// Code generated by structgen ../../d4data/definitions.json generated_types.go; DO NOT EDIT.

package d4

import (
	bin "github.com/Dakota628/d4parse/pkg/bin"
	"io"
)

func NewByFormatHash(h int) Object {
	switch h {
	case 2930352528:
		return &SeasonDefinition{}
	case 1714036886:
		return &ABTestDefinition{}
	case 1944355256:
		return &AchievementDefinition{}
	case 685009452:
		return &ActivityDefinition{}
	case 2209134147:
		return &ActorDefinition{}
	case 1334515424:
		return &AffixDefinition{}
	case 1052791206:
		return &AmbientSoundDefinition{}
	case 3028891766:
		return &AnimationDefinition{}
	case 2713967435:
		return &Animation2DDefinition{}
	case 3959966581:
		return &AnimSetDefinition{}
	case 4283047555:
		return &AnimTreeDefinition{}
	case 54867816:
		return &AppearanceDefinition{}
	case 2420016543:
		return &AspectDefinition{}
	case 2511652383:
		return &AudioContextDefinition{}
	case 2771942927:
		return &BiomeDefinition{}
	case 1505457976:
		return &BoostDefinition{}
	case 2493266938:
		return &ChallengeDefinition{}
	case 3175752678:
		return &ClothDefinition{}
	case 33576486:
		return &CollisionSettingsDefinition{}
	case 3526560486:
		return &ConditionDefinition{}
	case 1535366740:
		return &ConversationDefinition{}
	case 743168058:
		return &CrafterDefinition{}
	case 1886836184:
		return &DemonScrollDefinition{}
	case 4226195413:
		return &DungeonAffixDefinition{}
	case 855891767:
		return &DyeDefinition{}
	case 4102152914:
		return &EffectGroupDefinition{}
	case 3643810545:
		return &EmblemDefinition{}
	case 750077193:
		return &EmoteDefinition{}
	case 4110251921:
		return &EncounterDefinition{}
	case 4060704305:
		return &ExplosionDefinition{}
	case 248985203:
		return &EyeColorDefinition{}
	case 3509507267:
		return &FaceDefinition{}
	case 748469283:
		return &FacialHairDefinition{}
	case 961417760:
		return &FlagSetDefinition{}
	case 3649590056:
		return &FogOfWarDefinition{}
	case 3259836636:
		return &FogVolumeDefinition{}
	case 1803351102:
		return &FontDefinition{}
	case 4165310366:
		return &GameBalanceDefinition{}
	case 4068775928:
		return &GlobalDefinition{}
	case 1395860536:
		return &HairColorDefinition{}
	case 1271134248:
		return &HairStyleDefinition{}
	case 2720737509:
		return &HoudiniParticlesSimDefinition{}
	case 3848608585:
		return &ItemDefinition{}
	case 1229771660:
		return &ItemRequirementDefinition{}
	case 2620689364:
		return &ItemTypeDefinition{}
	case 3403712277:
		return &JewelryDefinition{}
	case 2776190697:
		return &LevelAreaDefinition{}
	case 3582800333:
		return &LightDefinition{}
	case 1614599467:
		return &LoreDefinition{}
	case 755559698:
		return &MakeupDefinition{}
	case 3847589890:
		return &MarkerSetDefinition{}
	case 1776463076:
		return &MarkingColorDefinition{}
	case 602045172:
		return &MarkingShapeDefinition{}
	case 2053041403:
		return &MaterialDefinition{}
	case 1043973718:
		return &MaterialValueDefinition{}
	case 729361343:
		return &MaterialValueSetDefinition{}
	case 897638220:
		return &MonsterAffixDefinition{}
	case 18197804:
		return &MonsterFamilyDefinition{}
	case 1743771856:
		return &MovieDefinition{}
	case 103202468:
		return &MusicDefinition{}
	case 1765209194:
		return &NPCComponentSetDefinition{}
	case 1401597153:
		return &ObserverDefinition{}
	case 106063450:
		return &ParagonBoardDefinition{}
	case 122651675:
		return &ParagonGlyphDefinition{}
	case 771278168:
		return &ParagonGlyphAffixDefinition{}
	case 4174764616:
		return &ParagonNodeDefinition{}
	case 4201272951:
		return &ParagonThresholdDefinition{}
	case 759454506:
		return &ParticleDefinition{}
	case 72915516:
		return &PhysicsDefinition{}
	case 2127853829:
		return &PlayerClassDefinition{}
	case 3344435680:
		return &PlayerTitleDefinition{}
	case 47580482:
		return &PowerDefinition{}
	case 1817808733:
		return &QuestDefinition{}
	case 2191681936:
		return &QuestChainDefinition{}
	case 1088236903:
		return &RecipeDefinition{}
	case 3806544672:
		return &ReputationDefinition{}
	case 78014346:
		return &ReverbDefinition{}
	case 1389907684:
		return &RopeDefinition{}
	case 1883232011:
		return &SceneDefinition{}
	case 7088667:
		return &SetItemBonusDefinition{}
	case 1791973961:
		return &ShaderDefinition{}
	case 2210875563:
		return &ShaderMapDefinition{}
	case 3528476834:
		return &ShakeDefinition{}
	case 138216317:
		return &SkillKitDefinition{}
	case 306133137:
		return &SoundDefinition{}
	case 123576589:
		return &SoundTableDefinition{}
	case 3207332567:
		return &SpeakerDefinition{}
	case 2623583028:
		return &StaggerDefinition{}
	case 1587341777:
		return &StoreProductDefinition{}
	case 3030569474:
		return &StoryboardDefinition{}
	case 1340376439:
		return &StringListDefinition{}
	case 2741245875:
		return &SubzoneDefinition{}
	case 2259066920:
		return &SurfaceDefinition{}
	case 2806960416:
		return &TerritoryDefinition{}
	case 4040157842:
		return &TextureDefinition{}
	case 2705556582:
		return &TiledStyleDefinition{}
	case 1529103962:
		return &TrackedRewardDefinition{}
	case 583067962:
		return &TrailDefinition{}
	case 2697244277:
		return &TutorialDefinition{}
	case 4248541951:
		return &UIDialogDefinition{}
	case 2168367308:
		return &VectorFieldDefinition{}
	case 1610557741:
		return &VibrationDefinition{}
	case 2180915558:
		return &WallDefinition{}
	case 3288876968:
		return &WeatherDefinition{}
	case 3726375657:
		return &WorldDefinition{}
	case 3487489608:
		return &WorldStateDefinition{}
	case 406598172:
		return &wWiseSoundBankDefinition{}
	default:
		return nil
	}
}

func NewByTypeHash[T Object](h int) Object {
	switch h {
	case 88275:
		return &OBB{}
	case 861281:
		return &GBIDBlocklistDataChanged{}
	case 2408934:
		return &AABB{}
	case 3112412:
		return &Stat{}
	case 5337680:
		return &PowerLimitedActorType{}
	case 5640122:
		return &SoundTableDefinition{}
	case 8510589:
		return &SavedCameraState{}
	case 9306245:
		return &ShaderInputLayout{}
	case 12265920:
		return &PowerConditionIsVulnerable{}
	case 12875460:
		return &PlayerParagonPointMessage{}
	case 18808552:
		return &AttributesSetValuesMessage{}
	case 21780289:
		return &Type_14c5741{}
	case 24231676:
		return &TexFrame{}
	case 26944936:
		return &Type_19b25a8{}
	case 30471230:
		return &WwiseSwitchValue{}
	case 31035945:
		return &AssignSkillMessage{}
	case 36650923:
		return &PetType{}
	case 38885574:
		return &OutroWaypointEffectMessage{}
	case 45134984:
		return &LimboWarpPrefetchBeginMessage{}
	case 48209924:
		return &MarkerWeatherVolumeData{}
	case 48522627:
		return &TiledWindowPieces{}
	case 49637164:
		return &TiledStyleDefinition{}
	case 51081978:
		return &Type_30b72fa{}
	case 57812962:
		return &BossDoorGizmoActivate{}
	case 59500993:
		return &Type_38be9c1{}
	case 64253465:
		return &IKGeneralBoneChain{}
	case 67331420:
		return &CurrentWorldSubcondition{}
	case 71815918:
		return &Type_447d2ee{}
	case 72180526:
		return &Type_44d632e{}
	case 75652318:
		return &ZoneMapParams{}
	case 78452166:
		return &Type_4ad15c6{}
	case 78967695:
		return &HdrSettings{}
	case 79564513:
		return &ProjectileAttachmentOnHitMessage{}
	case 79879298:
		return &dmClothCapsuleDefMirror{}
	case 82777608:
		return &GameBalanceTable{}
	case 87940067:
		return &AimTargetMessage{}
	case 88475393:
		return &ActorFoleySoundOverride{}
	case 89349493:
		return &Type_5535d75{}
	case 89353708:
		return &IKLeg{}
	case 90985183:
		return &BlockedDamageVisualsMessage{}
	case 92261083:
		return &Type_57fcadb{}
	case 92721210:
		return &LocalEventTrackingData{}
	case 93816786:
		return &DungeonAffixFamilyEntry{}
	case 98864240:
		return &Plane{}
	case 99314398:
		return &Type_5eb6ade{}
	case 99338022:
		return &GeoChunkIndexBuffer{}
	case 100099747:
		return &PresetBannerData{}
	case 100864898:
		return &Ray2D{}
	case 100864931:
		return &Ray3D{}
	case 102278321:
		return &Shape{}
	case 105310949:
		return &MarkerCameraData{}
	case 106673333:
		return &ScriptEventParamPlayer{}
	case 107073724:
		return &Type_661d0bc{}
	case 112892379:
		return &Type_6ba99db{}
	case 117231958:
		return &BlendSettings{}
	case 118576961:
		return &ChallengeCategory{}
	case 126352052:
		return &MaterialColorValueDefinition{}
	case 127673428:
		return &UITextStyle{}
	case 131857979:
		return &AnimTreeNodeOverride{}
	case 132838840:
		return &Type_7eaf5b8{}
	case 134857105:
		return &ObserverDefinition{}
	case 135947440:
		return &MarkerFogVolumeData{}
	case 136631170:
		return &SkillTag_Table{}
	case 137922517:
		return &WeatherStateParams{}
	case 145726193:
		return &AffixSyncComponents{}
	case 146224836:
		return &Type_8b736c4{}
	case 147061427:
		return &PowerConditionIsShapeshiftForm{}
	case 148976275:
		return &PlayerEmblemResponseMessage{}
	case 152386499:
		return &Type_9153bc3{}
	case 155004991:
		return &UIParagonBoardStyle{}
	case 158271388:
		return &GameTestingPvpSamplingStartMessage{}
	case 164326720:
		return &TrySalvageAllMessage{}
	case 165130238:
		return &Type_9d7affe{}
	case 165581846:
		return &Type_9de9416{}
	case 167120374:
		return &UICheckBoxStyle{}
	case 171121941:
		return &BiomeDefinition{}
	case 173900177:
		return &WorldDefinition{}
	case 174716335:
		return &AnimSyncGroup{}
	case 176697472:
		return &ScriptEventParamRecipe{}
	case 177635266:
		return &MarkerHiddenCacheGizmoData{}
	case 185354185:
		return &Type_b0c47c9{}
	case 188761711:
		return &BiomeClutter{}
	case 189792993:
		return &Type_b5002e1{}
	case 193950776:
		return &ModifyCurrencyMessage{}
	case 199422900:
		return &JoinGameFailedMessage{}
	case 200235594:
		return &Type_bef5a4a{}
	case 202596751:
		return &MarkerEncounterData{}
	case 203401058:
		return &CriteriaModifier{}
	case 203483570:
		return &MailSendMessage{}
	case 203752552:
		return &TriggerEventFadeOtherPlayers{}
	case 204122261:
		return &ScrollbarStyle{}
	case 207751246:
		return &Type_c62084e{}
	case 207826213:
		return &PlayHotbarUIFlourishMessage{}
	case 208996826:
		return &UIMinimapStyle{}
	case 213896766:
		return &Type_cbfce3e{}
	case 214270858:
		return &Type_cc5838a{}
	case 214586038:
		return &AddSocketResultMessage{}
	case 215453821:
		return &PowerConditionIsPower{}
	case 216509239:
		return &AffixDefinition{}
	case 216733152:
		return &ExperienceLevel{}
	case 224697917:
		return &OutroPortalEffectMessage{}
	case 228221451:
		return &UIEffect{}
	case 228359364:
		return &TryImbueAffixMessage{}
	case 228865963:
		return &SetItemBonusDefinition{}
	case 231895989:
		return &GBHandle{}
	case 232788579:
		return &PowerCastingEffectOverride{}
	case 234160671:
		return &ScriptEventParamString{}
	case 234624765:
		return &NPCComponentHardpointOverride{}
	case 235192742:
		return &Type_e04c1a6{}
	case 236738320:
		return &UIControlStyle{}
	case 239012676:
		return &OnAssistBuffCallback{}
	case 248064347:
		return &SharedServerWorldPlace{}
	case 250193936:
		return &ConditionDefinition{}
	case 253272816:
		return &WwiseName{}
	case 255596702:
		return &EffectGroupScaleYKeyData{}
	case 258676623:
		return &RitualTetherEffectMessage{}
	case 260563484:
		return &OnPetDeathBuffCallback{}
	case 264669227:
		return &ConsoleAwardDefinition{}
	case 266386765:
		return &Type_fe0bd4d{}
	case 267260813:
		return &Capsule{}
	case 269037185:
		return &CardArt{}
	case 273567485:
		return &MarkerWaypointGizmoData{}
	case 274458137:
		return &FatVertex{}
	case 275314580:
		return &ParagonGlyphExperience{}
	case 276390936:
		return &PrefetchWorldDataMessage{}
	case 277417732:
		return &LogoutContextMessage{}
	case 279687928:
		return &ACDEnterKnownMessage{}
	case 280849552:
		return &SavedCameraStates{}
	case 285850372:
		return &Type_1109bb04{}
	case 287416921:
		return &MarkerChestGizmoData{}
	case 287728085:
		return &UIStackPanelStyle{}
	case 288988602:
		return &JoinExistingGameMessage{}
	case 294654905:
		return &MarkerHeightFieldData{}
	case 294950919:
		return &MarkerHeightFieldLine{}
	case 295800455:
		return &Type_11a18e87{}
	case 295985342:
		return &PlayerUnpossessActorMessage{}
	case 296386918:
		return &DataIDDataMessage{}
	case 297390777:
		return &QuestObjectiveSet{}
	case 298327223:
		return &Type_11c81cb7{}
	case 300410424:
		return &AudioMonsterCategory{}
	case 303887094:
		return &TriggerEventAttachSpawnedActor{}
	case 307762844:
		return &DestroyOnProximityGizmoData{}
	case 307879080:
		return &Type_1259dca8{}
	case 309879163:
		return &StoryboardGenericTrack{}
	case 311539709:
		return &FogVolumeDefinition{}
	case 312499914:
		return &TexAnimTranslationCurve{}
	case 316337160:
		return &FoliageSettings{}
	case 316559119:
		return &PowerConditionIsSpecificActor{}
	case 318793304:
		return &BoxProximityData{}
	case 324361903:
		return &SceneSpecification{}
	case 330209804:
		return &TriggerEventRelaxCloth{}
	case 332218139:
		return &OnDotReceivedBuffCallback{}
	case 334330977:
		return &PVPGizmoMessage{}
	case 335066719:
		return &OnPetAddBuffCallback{}
	case 336944377:
		return &GameVariableIsSetSubcondition{}
	case 337203476:
		return &TutorialScreen{}
	case 340493133:
		return &GameTestingMonsterSkillSamplingStartMessage{}
	case 341256100:
		return &StoreDisclaimerData{}
	case 341778518:
		return &UIBlinkerStyle{}
	case 342198450:
		return &NpcLookTemplate{}
	case 342818969:
		return &PowerCrowdControlInfo{}
	case 346303511:
		return &Type_14a42c17{}
	case 347016374:
		return &PowerDefinition{}
	case 347583877:
		return &OnAttackBuffCallback{}
	case 350245922:
		return &ACDInventoryUpdateActorSNO{}
	case 351116421:
		return &NamedGizmoData{}
	case 351209529:
		return &PowerConditionIsPet{}
	case 353175414:
		return &UILayoutEntries{}
	case 359225989:
		return &MarkerAmbientSoundData{}
	case 360669915:
		return &PathLink{}
	case 361180618:
		return &MapRevealWorldMessage{}
	case 362087135:
		return &Type_159502df{}
	case 365739947:
		return &Currency{}
	case 366023756:
		return &GlobalBase{}
	case 366095659:
		return &GlobalData{}
	case 366375197:
		return &TutorialDefinition{}
	case 367818336:
		return &EventCallbackSubcondition{}
	case 375153600:
		return &GameTestingTakeScreenshotMessage{}
	case 377055229:
		return &UberMaterial{}
	case 377108136:
		return &StartLocationName{}
	case 378061786:
		return &CampaignData{}
	case 378671321:
		return &PlayerOwnsAMountSubcondition{}
	case 380017523:
		return &SurveyMessage{}
	case 380944299:
		return &HelpCode_Table{}
	case 382532488:
		return &FogMask{}
	case 384027390:
		return &Type_16e3cafe{}
	case 385403115:
		return &DebugProjectileMovementUpdateMessage{}
	case 387731069:
		return &GameTestingSalvageItems{}
	case 389048112:
		return &NpcFollowerArchetype{}
	case 392807017:
		return &GlobalClanData{}
	case 394027396:
		return &DetachCarryableFromPlayerMessage{}
	case 394717690:
		return &Type_1786e9fa{}
	case 398282971:
		return &ActorHitCollisionShape{}
	case 404172836:
		return &DRLGWorldDebugInfo{}
	case 405077397:
		return &TriggerEventSetAudioState{}
	case 408415486:
		return &ConvLocaleDisplayTimes{}
	case 413517284:
		return &MarkerFadeVolumeData{}
	case 415892117:
		return &Type_18ca0295{}
	case 417636351:
		return &dmHeightDataMirror{}
	case 417796692:
		return &AIPropType_Table{}
	case 418395020:
		return &HeroStateRewardsMessage{}
	case 419152424:
		return &TriggerEventObjectTurnToFace{}
	case 422165983:
		return &QuestTimerUpdatedMessage{}
	case 424839738:
		return &UIRadioButtonStyle{}
	case 427805145:
		return &Type_197fc9d9{}
	case 430464268:
		return &UpgradedItemLabelSubcondition{}
	case 432411082:
		return &LuxSettings{}
	case 434197565:
		return &GlobalServiceNPCData{}
	case 443290979:
		return &ParagonGlyphAffixDefinition{}
	case 446843337:
		return &PVPShrineEventUpdateMessage{}
	case 447120107:
		return &MarkerItemData{}
	case 448289747:
		return &UIMenuItemStyle{}
	case 450842144:
		return &SpawnerGizmoData{}
	case 452207452:
		return &Type_1af4235c{}
	case 454347093:
		return &PrefabScopedActorGroupData_Table{}
	case 456561964:
		return &MakeupDefinition{}
	case 457007016:
		return &GameVariableStringSubcondition{}
	case 458282602:
		return &WwiseSoundBankContentBase{}
	case 459349266:
		return &PlatformAccount{}
	case 459613767:
		return &Type_1b652647{}
	case 461739888:
		return &ScriptEventParamGizmoType{}
	case 466375807:
		return &PlayerClassCoreStatBenefitData{}
	case 467583236:
		return &ActorProjectileData{}
	case 469047295:
		return &MonsterAffixDefinition{}
	case 469541751:
		return &TriggerEventChangeShaderMapOverrideDuration{}
	case 471636391:
		return &Type_1c1c99a7{}
	case 475975077:
		return &Type_1c5ecda5{}
	case 476946996:
		return &TimedSpawningData{}
	case 481077997:
		return &PowerConditionStoredValueEquals{}
	case 485930233:
		return &Type_1cf6b4f9{}
	case 487980657:
		return &Type_1d15fe71{}
	case 489718821:
		return &ShoreWaveSettings{}
	case 490076731:
		return &MailDeleteMessage{}
	case 490118052:
		return &DebugForceSpawnMessage{}
	case 491575639:
		return &ClanBankDepositMessage{}
	case 494586042:
		return &Type_1d7ac8ba{}
	case 494681324:
		return &Type_1d7c3cec{}
	case 495345607:
		return &GlobalFontColor{}
	case 500700259:
		return &Type_1dd81463{}
	case 501814863:
		return &UIMargins{}
	case 501899601:
		return &ItemAffixAttribute{}
	case 503094317:
		return &PlayHitEffectMessage{}
	case 506492871:
		return &UIWindowStyle{}
	case 509045980:
		return &TriggerEventShadow{}
	case 513386483:
		return &GameTestingCharacterSamplingStartMessage{}
	case 514913766:
		return &Type_1eb0f5e6{}
	case 516822506:
		return &DynamicMovementData{}
	case 518656708:
		return &AIStateDebugSetStateMessage{}
	case 523544037:
		return &Type_1f34a5e5{}
	case 528427185:
		return &SignGizmoData{}
	case 528757367:
		return &Type_1f843277{}
	case 531649295:
		return &GameTestingRTCSamplingStartMessage{}
	case 532046846:
		return &EmitterPointData{}
	case 540107926:
		return &IKBoneChainBase{}
	case 540613693:
		return &CollisionShape{}
	case 541981023:
		return &Type_204df95f{}
	case 544227643:
		return &SharedChildFile{}
	case 546095827:
		return &ScriptEventParamReputation{}
	case 546182319:
		return &DebugDataRequestMessage{}
	case 547442486:
		return &Type_20a14f36{}
	case 551002818:
		return &TriggerEventShadowDuration{}
	case 551777591:
		return &ScriptFormulaInfo{}
	case 552516018:
		return &MaterialTextureEntry{}
	case 557181583:
		return &WeaponExpertiseRank{}
	case 559004334:
		return &StoryboardPlaySoundNode{}
	case 563099623:
		return &Type_219037e7{}
	case 568298472:
		return &Type_21df8be8{}
	case 568526390:
		return &TriggerEventAddObject{}
	case 570318784:
		return &TriggerEventDeleteObject{}
	case 571402940:
		return &Type_220eeabc{}
	case 582599742:
		return &PowerPhaseOneShot{}
	case 584663085:
		return &Type_22d9402d{}
	case 585896597:
		return &PlayerClassDruidData{}
	case 586826685:
		return &EffectGroupScaleXKeyData{}
	case 592804084:
		return &TranslationCurve{}
	case 596227098:
		return &TriggerEventActorMovement{}
	case 598155613:
		return &MarkerBaseGizmoData{}
	case 600059248:
		return &DebugEventLogMessage{}
	case 600875676:
		return &StaticLoadingImages{}
	case 601368518:
		return &PrefetchSubzoneEntranceDataMessage{}
	case 601452812:
		return &ABTestDefinition{}
	case 607927028:
		return &DebugProjectileRaycastMessage{}
	case 608184390:
		return &Type_24402846{}
	case 609698022:
		return &Type_245740e6{}
	case 612856310:
		return &AnimTangent{}
	case 615033278:
		return &Type_24a8a9be{}
	case 615324205:
		return &EliteKilledMessage{}
	case 619659323:
		return &PowerConditionHasAffixEquipped{}
	case 621008261:
		return &TrailDefinition{}
	case 623688299:
		return &Type_252cba6b{}
	case 626815792:
		return &ErrorWithContextMessage{}
	case 632575071:
		return &Type_25b4545f{}
	case 635232813:
		return &DungeonSigilTierSubcondition{}
	case 636207354:
		return &UIListItemStyle{}
	case 641859515:
		return &UIControlTemplate{}
	case 646020626:
		return &EffectGroupACDToACDMessage{}
	case 650798075:
		return &PlayAnimationMessage{}
	case 651418529:
		return &CrafterConditions{}
	case 654904231:
		return &Type_27090ba7{}
	case 656451641:
		return &WeatherDefinition{}
	case 657629450:
		return &Type_2732a10a{}
	case 658153198:
		return &Type_273a9eee{}
	case 658729586:
		return &LabelEntry{}
	case 665473065:
		return &Type_27aa5029{}
	case 667403575:
		return &ClassPassiveSkillPowerData{}
	case 679896568:
		return &ConsoleProperty{}
	case 680168459:
		return &PlayerCustomizationMessage{}
	case 685542235:
		return &Type_28dc8b5b{}
	case 685760733:
		return &EmitterBoxData{}
	case 687910683:
		return &ActorFacingData{}
	case 693826374:
		return &FoleyOverridePreloadHelper{}
	case 694569815:
		return &ParagonNodeDefinition{}
	case 696164520:
		return &LookVariantMap{}
	case 698965827:
		return &PRTransformMessage{}
	case 699316394:
		return &DRLGSpawningData{}
	case 699762730:
		return &DRLGSpawningPool{}
	case 701532932:
		return &WorldDeletedMessage{}
	case 701717625:
		return &QuestPreloadHelper{}
	case 702155408:
		return &EnableRagdollParams{}
	case 702892200:
		return &OnItemPickupBuffCallback{}
	case 708398011:
		return &DisplayMode{}
	case 708924230:
		return &Type_2a415346{}
	case 714854064:
		return &CurrentZoneSubcondition{}
	case 715283015:
		return &ZoneProgressRewardInfoMessage{}
	case 716315941:
		return &WwiseStandardSoundBank{}
	case 719000045:
		return &ConversationRandomChoiceNode{}
	case 721304485:
		return &SerializeContainerData{}
	case 721585600:
		return &StringLabelHandleEx{}
	case 724022612:
		return &PlayerClassBarbData{}
	case 725763710:
		return &EventRewardChestGizmoData{}
	case 730132346:
		return &RareItemName{}
	case 730988871:
		return &QuestObjectiveSetLink{}
	case 731368717:
		return &SNODiskEntry{}
	case 733725688:
		return &RogueSpecChangeMessage{}
	case 735016212:
		return &LinearAxisParams{}
	case 735885398:
		return &MarkerNPCActorData{}
	case 738942754:
		return &ScriptEventParamEffectGroup{}
	case 750243227:
		return &WaypointGizmoData{}
	case 754360841:
		return &Type_2cf6a209{}
	case 754688451:
		return &ActorMovingData{}
	case 755154324:
		return &Type_2d02bd94{}
	case 756611932:
		return &Type_2d18fb5c{}
	case 758869941:
		return &PlayerHasUnlockedMountsSubcondition{}
	case 759236416:
		return &POICameraInstanceData{}
	case 761532415:
		return &UITreeStyle{}
	case 761777473:
		return &PlayerBuffSubcondition{}
	case 761993241:
		return &DebugSetActorUpdateIntervalMessage{}
	case 765028544:
		return &Type_2d9968c0{}
	case 768702240:
		return &EssencePowerTierEntry_Table{}
	case 769249943:
		return &GameTestingBuyItem{}
	case 773758990:
		return &PrefetchRunOnDisk{}
	case 777063961:
		return &WorldServerData{}
	case 779531282:
		return &SocketedEffects{}
	case 779841713:
		return &ActorAnimSetPreloadHelper{}
	case 790690301:
		return &Type_2f20f9fd{}
	case 792493210:
		return &PlayerSkillModPointsSubcondition{}
	case 796243964:
		return &ParagonUnequipBoardMessage{}
	case 797044827:
		return &ActorMonsterData{}
	case 797606314:
		return &MaterialEnumValueDefinition{}
	case 797648367:
		return &dmMeshTriangleMirror{}
	case 798453786:
		return &Currencies_Table{}
	case 800593142:
		return &WorldTierUnlockedMessage{}
	case 802058580:
		return &ScoreStatistic{}
	case 804883275:
		return &SpeedTreeWind8{}
	case 805216097:
		return &BoneStructureInfo{}
	case 805226337:
		return &PlayerActorSetInitialMessage{}
	case 805969435:
		return &Type_300a1e1b{}
	case 809352960:
		return &Type_303dbf00{}
	case 809704699:
		return &LoreDefinition{}
	case 810622396:
		return &Type_30511dbc{}
	case 812773786:
		return &OnDotApplyBuffCallback{}
	case 812993760:
		return &PowerPayloadDefinition{}
	case 814048081:
		return &AICellBytes{}
	case 815039567:
		return &SurfaceGrid{}
	case 818712694:
		return &Type_30cc9076{}
	case 821344136:
		return &ExperienceLevelAlt_Table{}
	case 821665730:
		return &SavedPlayerTitle{}
	case 824315617:
		return &Type_31220ee1{}
	case 826038293:
		return &WwiseMetaDataSoundBank{}
	case 827674886:
		return &Type_31555106{}
	case 830630473:
		return &GlobalRoadGraphCell{}
	case 833093383:
		return &Type_31a7ff07{}
	case 834055373:
		return &PortalTransferSetupMessage{}
	case 834825378:
		return &Type_31c26ca2{}
	case 835243889:
		return &Structure{}
	case 836615167:
		return &RopeDefinition{}
	case 838073325:
		return &WorldTierSubcondition{}
	case 843622019:
		return &FogVolumeInstanceData{}
	case 844554497:
		return &Type_3256e101{}
	case 854376920:
		return &ACDTranslateSyncMessage{}
	case 857617376:
		return &TryRepairAllMessage{}
	case 859173317:
		return &MarkerSoundData{}
	case 859971517:
		return &ServerNotificationDataMessage{}
	case 864007404:
		return &OnHealingReceivedBuffCallback{}
	case 866553347:
		return &ItemTier{}
	case 871413486:
		return &ACDForceAddedMessage{}
	case 872540109:
		return &ActiveSkillEntry{}
	case 873111065:
		return &CollisionCapsule{}
	case 873409362:
		return &Type_340f2b52{}
	case 874191810:
		return &PlayLineParams{}
	case 874267018:
		return &UIDownloadImageStyle{}
	case 875081095:
		return &GameTestingNPCSamplingStartMessage{}
	case 876325571:
		return &Type_343baac3{}
	case 878162020:
		return &QuestSwitchGizmoData{}
	case 880817737:
		return &AnimationDefinition{}
	case 881828868:
		return &MarkerNoMountVolumeData{}
	case 882615838:
		return &Type_349ba61e{}
	case 884063201:
		return &VoiceActorEntry{}
	case 888105884:
		return &UpgradeItemMessage{}
	case 888408526:
		return &TriggerConditions{}
	case 892291564:
		return &Type_352f49ec{}
	case 893154457:
		return &OnKillBuffCallback{}
	case 894232435:
		return &AnimDepthOfField{}
	case 897096220:
		return &GlobalZoneProgressData{}
	case 897321246:
		return &Type_357c091e{}
	case 899754116:
		return &Type_35a12884{}
	case 900462496:
		return &ActorPlayerData{}
	case 901079139:
		return &PlayerLevelRangeSubcondition{}
	case 906169645:
		return &Type_36030d2d{}
	case 907176602:
		return &UniqueOperatorChestGizmoData{}
	case 910005755:
		return &SubzoneModifierStateMessage{}
	case 911325909:
		return &TriggerEventFoley{}
	case 911604182:
		return &TexAnim{}
	case 912556216:
		return &PowerConditionDungeonTier{}
	case 912941483:
		return &CommandFrameSynchronizeMessage{}
	case 914586851:
		return &ObjectiveRegionParams{}
	case 919850711:
		return &TriggerEventMusic{}
	case 923517792:
		return &ShaderDefinition{}
	case 928568907:
		return &BoolDataMessage{}
	case 930297292:
		return &TriggerEventVoice{}
	case 931132840:
		return &NpcLookEntry{}
	case 933677803:
		return &UIHotbarButtonStyle{}
	case 934402691:
		return &EmoteDefinition{}
	case 934747956:
		return &MarkerLightData{}
	case 935473883:
		return &ListenerReaction{}
	case 936375859:
		return &EnterKnownShaderMapOverrides{}
	case 939032690:
		return &NecroArmyUnitSpecializationSacrificeData{}
	case 939553606:
		return &AttackerEnemiesParam{}
	case 941161779:
		return &AnimTreeLayerName{}
	case 941445633:
		return &Type_381d5201{}
	case 945079131:
		return &Type_3854c35b{}
	case 948891356:
		return &DebugPlayerProcessHelpCodeMessage{}
	case 950929648:
		return &NotLogicSubcondition{}
	case 951791235:
		return &EffectGroupHardpoint{}
	case 958873913:
		return &ParametricSettings{}
	case 959143181:
		return &GeneratorToItemResponseMessage{}
	case 960545022:
		return &OnHitSounds{}
	case 962397665:
		return &CraftMultipleMessage{}
	case 962881663:
		return &MarkerReflectionProbeData{}
	case 963792479:
		return &HearthPortalInfoMessage{}
	case 964455581:
		return &ScriptEventParamOwnerFollower{}
	case 966075911:
		return &ConditionalAudioState{}
	case 971002810:
		return &PlayerWorldTierSubcondition{}
	case 977570672:
		return &AnimSetPowerEntry{}
	case 981125895:
		return &FreezeDirectionMessage{}
	case 982587744:
		return &dmClothDataMirror{}
	case 983502194:
		return &Type_3a9f0d72{}
	case 987746260:
		return &NPCPreset{}
	case 988032103:
		return &NpcGenerationData{}
	case 988753460:
		return &Type_3aef2e34{}
	case 989915321:
		return &Type_3b00e8b9{}
	case 991471482:
		return &Cylinder{}
	case 991799518:
		return &InterpolationScalar{}
	case 992657102:
		return &StoryboardPlayStoryboardNode{}
	case 1001478021:
		return &ParametricLayer{}
	case 1001740690:
		return &WorldStateDefinition{}
	case 1003082940:
		return &ChangedPlayerMessage{}
	case 1007410546:
		return &WallCornerPieces{}
	case 1007904609:
		return &StoreCameraTransition{}
	case 1011253607:
		return &Type_3c468167{}
	case 1011655352:
		return &PlasmaAttachMessage{}
	case 1013293730:
		return &Type_3c65a2a2{}
	case 1014113135:
		return &TriggerEventDisableRagdollAnimationOverride{}
	case 1014763069:
		return &CancelGroupTransferMessage{}
	case 1014796656:
		return &ConversationNodeReference{}
	case 1014817440:
		return &Type_3c7ce2a0{}
	case 1015376646:
		return &ActorMountData{}
	case 1018331041:
		return &PlayerACDInfo{}
	case 1020310943:
		return &PlayerSavedDataMessage{}
	case 1023716882:
		return &TransmogSlotMessage{}
	case 1026071916:
		return &RecipeTier{}
	case 1028015787:
		return &DT_BYTE{}
	case 1028111660:
		return &DT_ENUM{}
	case 1028170061:
		return &DT_GBID{}
	case 1028442418:
		return &DT_NULL{}
	case 1028641394:
		return &Type_3d4fd272{}
	case 1028680983:
		return &DT_UINT{}
	case 1028759507:
		return &DT_WORD{}
	case 1030159526:
		return &CollisionSettingsDefinition{}
	case 1031323553:
		return &PlayerVariableValueSubcondition{}
	case 1032599996:
		return &AssetList{}
	case 1036833962:
		return &TriggerEventChangeClothParameters{}
	case 1038063251:
		return &Type_3ddf9693{}
	case 1038618161:
		return &DebugDataBlockMessage{}
	case 1043704300:
		return &TrackedRewardDefinition{}
	case 1051891831:
		return &SpeedTreeWindParams{}
	case 1053813052:
		return &Type_3ecfe93c{}
	case 1053929211:
		return &QuestDefinition{}
	case 1055008700:
		return &VendorInventory{}
	case 1055046034:
		return &Type_3ee2b992{}
	case 1056455724:
		return &ChallengeDefinition{}
	case 1058180893:
		return &LightStateParams{}
	case 1059956194:
		return &MarkerHeightFieldClutter{}
	case 1061475052:
		return &ParagonGlyphAffixAttributeMap{}
	case 1063987433:
		return &ShrineGizmoData{}
	case 1064833490:
		return &Type_3f7811d2{}
	case 1066764433:
		return &TriggerEventChangeShaderMapOverride{}
	case 1068774800:
		return &FrameAnim{}
	case 1071057721:
		return &PowerBuffDefinition{}
	case 1074679724:
		return &CollSettingsParam{}
	case 1077456687:
		return &TriggerEventHitFlashDuration{}
	case 1079088876:
		return &TextureContent{}
	case 1083074776:
		return &PlayerTitleDefinition{}
	case 1083389844:
		return &PreloadSceneDataMessage{}
	case 1087707231:
		return &DWordDataMessage{}
	case 1090497837:
		return &AlwaysFalseSubcondition{}
	case 1091889950:
		return &ParagonThresholdDefinition{}
	case 1093951926:
		return &StaggerDefinition{}
	case 1098162516:
		return &Type_4174a154{}
	case 1101891844:
		return &OpenDungeonForLFDMessage{}
	case 1102252714:
		return &Type_41b30aaa{}
	case 1102252715:
		return &Type_41b30aab{}
	case 1103586575:
		return &FlagSetDefinition{}
	case 1105471552:
		return &DemonSummoningQuestBucket{}
	case 1105628966:
		return &Type_41e68f26{}
	case 1106225244:
		return &AnimTreeNodeOverrideWrapper{}
	case 1106358970:
		return &TriggerEventFrostBreath{}
	case 1107537454:
		return &SubzoneWorldMarkerSetEntry{}
	case 1109533772:
		return &TriggerEventDeleteAllObjects{}
	case 1110936387:
		return &Type_42378b43{}
	case 1113609512:
		return &Type_42605528{}
	case 1113825987:
		return &BiomeObject{}
	case 1113883424:
		return &ConversationCooldown{}
	case 1121250797:
		return &PowerConditionHasModPoints{}
	case 1121634143:
		return &Type_42dac75f{}
	case 1122569254:
		return &MountPreset{}
	case 1125787639:
		return &Type_431a27f7{}
	case 1127608961:
		return &EffectGroupPreloadHelper{}
	case 1127767451:
		return &BoneStructureInfoData{}
	case 1130943864:
		return &RopeEffectMessageACDToPlace{}
	case 1131078565:
		return &TriggerEventAddBaseMountLoadout{}
	case 1134541503:
		return &TriggerEventSubObjectVisibility{}
	case 1137498125:
		return &PvPChestGizmoData{}
	case 1143552823:
		return &Type_44293b37{}
	case 1144581000:
		return &TriggerEventHideWarpUI{}
	case 1144835562:
		return &MusicDefinition{}
	case 1146575562:
		return &Type_44575aca{}
	case 1150600713:
		return &PlayerCurrentWorldSubcondition{}
	case 1154619828:
		return &ProximityAdjustment{}
	case 1155821708:
		return &VisualEquipment{}
	case 1156716628:
		return &TraversalGizmoData{}
	case 1161022673:
		return &Type_4533ccd1{}
	case 1161896531:
		return &OnDeathBuffCallback{}
	case 1163953319:
		return &ParagonThresholdEntry{}
	case 1173939491:
		return &ClothDefinition{}
	case 1175697692:
		return &GameTestingCloseVendor{}
	case 1178593178:
		return &UIItemButtonStyle{}
	case 1181604269:
		return &Quaternion16{}
	case 1185241065:
		return &HitpointSpecifier{}
	case 1187027022:
		return &AssetListEntry{}
	case 1187455164:
		return &Type_46c720bc{}
	case 1188733192:
		return &EffectGroupActorTrack{}
	case 1191591578:
		return &DefaultMaterialValueDefinition{}
	case 1195077723:
		return &TriggerEventAddTrail{}
	case 1196096041:
		return &PowerConditionDistanceToTarget{}
	case 1199573104:
		return &EngagedMessage{}
	case 1200534587:
		return &MarkerSavePointGizmoData{}
	case 1201772373:
		return &DestroyableObjectGizmoData{}
	case 1207123170:
		return &WeaponExpertiseRanks{}
	case 1208547332:
		return &TriggerEventCameraMoveToCameraMarker{}
	case 1210377699:
		return &ScriptEventParamBase{}
	case 1210430033:
		return &WorldStateUpdateMessage{}
	case 1210649495:
		return &ScriptEventParamItem{}
	case 1210992754:
		return &ScriptEventParamSelf{}
	case 1211952593:
		return &ScaleKey{}
	case 1213843687:
		return &DungeonAffixDefinition{}
	case 1215544921:
		return &UIWrapPanelStyle{}
	case 1220959089:
		return &DynamicMovementData_Table{}
	case 1221882697:
		return &InventoryRequestUseMessage{}
	case 1224073241:
		return &ParagonEquipBoardMessage{}
	case 1225817687:
		return &VibrationDefinition{}
	case 1228895741:
		return &ConnectionEstablishedMessage{}
	case 1236371119:
		return &EffectGroupTrack{}
	case 1237626281:
		return &SceneSubzoneMarkerSetPreloadHelper{}
	case 1238677571:
		return &Type_49d4b843{}
	case 1245475889:
		return &Type_4a3c7431{}
	case 1245693876:
		return &ActorPropData{}
	case 1247230898:
		return &OnGetHitBuffCallback{}
	case 1250952257:
		return &HeightFieldWaveSettings{}
	case 1251504619:
		return &DemonScrollDefinition{}
	case 1252497901:
		return &ScaleCurve{}
	case 1254730756:
		return &AIStateDebugTestPowerMessage{}
	case 1260918711:
		return &LookVariantMaterialMap{}
	case 1263412124:
		return &TryUnlockRecipeTierMessage{}
	case 1265777792:
		return &PlayerIntValMessage{}
	case 1266660523:
		return &GroundNormalTests{}
	case 1267580109:
		return &Type_4b8dbccd{}
	case 1269686704:
		return &MarkerHeightFieldTexture{}
	case 1270559160:
		return &StringWrapper{}
	case 1271971574:
		return &Type_4bd0bef6{}
	case 1274493949:
		return &StoryboardPlaySoundTrack{}
	case 1274683599:
		return &DebugDataHeaderMessage{}
	case 1274748969:
		return &UInt64DataMessage{}
	case 1278380139:
		return &RareMonsterNamesMessage{}
	case 1281316753:
		return &QuestTrackedQuestChangedMessage{}
	case 1282659427:
		return &PVPMonsterMessage{}
	case 1286645889:
		return &ScriptEventParamActor{}
	case 1288253615:
		return &TriggerEventDisableConstraint{}
	case 1288668428:
		return &Triangle2D{}
	case 1288668461:
		return &Triangle3D{}
	case 1288926662:
		return &PowerConditionSkillRankCompare{}
	case 1289731112:
		return &ScriptEventParamDWORD{}
	case 1292893022:
		return &ScriptEventParamFloat{}
	case 1295852463:
		return &ScriptEventParamAllowAny{}
	case 1300029571:
		return &RunTimeMaterialValues{}
	case 1304868885:
		return &ScriptEventParamPower{}
	case 1305923393:
		return &Type_4dd6cf41{}
	case 1306251290:
		return &ScriptEventParamQuest{}
	case 1306363395:
		return &TraversalInstanceData{}
	case 1306543934:
		return &VersionsMessage{}
	case 1307976086:
		return &ScriptEventParamScene{}
	case 1308611305:
		return &SpawnLocType{}
	case 1310250065:
		return &TriggerEventCancelLook{}
	case 1313057402:
		return &Type_4e43aa7a{}
	case 1313165104:
		return &ScriptEventParamWorld{}
	case 1313940188:
		return &MarkerHeightFieldTextureInfo{}
	case 1317228073:
		return &GameBalanceDefinition{}
	case 1317967588:
		return &StartingAllowedWeather{}
	case 1320052487:
		return &BlockingActorLoadMessage{}
	case 1325067928:
		return &RareMonsterNamesEntry{}
	case 1325950502:
		return &WorldStateUpdateData{}
	case 1328668874:
		return &TriggerEventFootstep{}
	case 1330480459:
		return &WwiseAudioBus{}
	case 1334189719:
		return &ActorGroupSubcondition{}
	case 1335413793:
		return &OnOtherBuffAddedCallback{}
	case 1338965781:
		return &TriggerEventCameraTransitionToObserver{}
	case 1340417938:
		return &HirelingSwapMessage{}
	case 1345508590:
		return &ActivityMetadata{}
	case 1352167279:
		return &Material{}
	case 1353876900:
		return &Type_50b285a4{}
	case 1357984967:
		return &SalvagedItemLabelSubcondition{}
	case 1358693725:
		return &AnimPermutation{}
	case 1359885118:
		return &ACDPrimaryPowerMessage{}
	case 1361343054:
		return &TriggerData{}
	case 1362850202:
		return &DRLGDungeonState{}
	case 1364074038:
		return &ActorPhysicsData{}
	case 1364938622:
		return &BoneData{}
	case 1365215937:
		return &RecipeIngredient{}
	case 1365297765:
		return &BoneName{}
	case 1367839516:
		return &TriggerEventHideCaptionUI{}
	case 1370498779:
		return &PlayerPossessActorMessage{}
	case 1370930836:
		return &SubObjectSegment{}
	case 1375908409:
		return &OnFirstHitAttemptBuffCallback{}
	case 1376535853:
		return &PowerMod{}
	case 1378962479:
		return &Type_52314c2f{}
	case 1380971296:
		return &WorldLocationMessageData{}
	case 1381884558:
		return &Type_525de28e{}
	case 1384905369:
		return &TriggerEventAddEffectGroup{}
	case 1385175149:
		return &ExtractAffixResultMessage{}
	case 1385267894:
		return &MarkerEffectGroupData{}
	case 1391978581:
		return &EnchantAffixChooseMessage{}
	case 1395779955:
		return &SimpleRequest{}
	case 1398161649:
		return &AdditionalStatistic{}
	case 1401177745:
		return &Type_53844691{}
	case 1403384113:
		return &AIPathData{}
	case 1404327310:
		return &OnContactFramePowerCallback{}
	case 1404527137:
		return &ConditionData{}
	case 1405707193:
		return &GoToWaypointMessage{}
	case 1406641541:
		return &MonsterExtRaritySubcondition{}
	case 1410120192:
		return &ScriptEventInvalidType{}
	case 1411504817:
		return &POICameraGizmoData{}
	case 1412871082:
		return &SupportedServices{}
	case 1414125715:
		return &ScriptEventParamFloatGreaterThan{}
	case 1414743843:
		return &Type_54534723{}
	case 1420342763:
		return &EnterWorldMessage{}
	case 1428470990:
		return &PowerBlendOverrideList{}
	case 1428538427:
		return &BiomeItem{}
	case 1429869474:
		return &GlobalRoadSpline{}
	case 1429922773:
		return &OnKnockbackEndPowerCallback{}
	case 1431372750:
		return &GameTestingWorldSamplingStartMessage{}
	case 1441694327:
		return &Type_55ee8277{}
	case 1442146883:
		return &TriggerEventShowSubtitle{}
	case 1442604930:
		return &AnimSetOrderTagEntry_Table{}
	case 1443554511:
		return &Type_560ae4cf{}
	case 1445759116:
		return &Type_562c888c{}
	case 1452860828:
		return &MarkerObserverVolumeData{}
	case 1455359337:
		return &PrefabCustomization{}
	case 1455893936:
		return &PowerStartVariant{}
	case 1457308015:
		return &Type_56dcc16f{}
	case 1457360706:
		return &ActorItemData{}
	case 1459584362:
		return &Type_56ff7d6a{}
	case 1460440831:
		return &TrackedQuestChangedMessage{}
	case 1462511893:
		return &ParagonGlyphDefinition{}
	case 1462706204:
		return &Type_572f201c{}
	case 1462760288:
		return &ACDSyncBuffsMessage{}
	case 1466985016:
		return &AllLogicSubcondition{}
	case 1469357787:
		return &MonsterFamilySubcondition{}
	case 1481956267:
		return &GizmoMessage{}
	case 1482076039:
		return &ActorGroupData_Table{}
	case 1484526036:
		return &TraceMessage{}
	case 1485298337:
		return &Type_5887daa1{}
	case 1487816389:
		return &TriggerEventActorPlayAnimation{}
	case 1488082503:
		return &DemonSummoningQuestBucket_Table{}
	case 1490043571:
		return &ScriptEventParamSpawnerParentName{}
	case 1490227580:
		return &ScriptEventParamSpawnerParentSelf{}
	case 1490385319:
		return &MarkerSplineData{}
	case 1492891980:
		return &ClassPassiveSkillSlotData{}
	case 1494553099:
		return &UIThumbButtonStyle{}
	case 1496684361:
		return &NPCComponentSetDefinition{}
	case 1496944793:
		return &ParagonGlyphUpgradeMessage{}
	case 1497572237:
		return &HorizontalTiledWindowPieces{}
	case 1498808798:
		return &ClanLabel{}
	case 1499500636:
		return &TerritoryRegionParams{}
	case 1499847222:
		return &AccountDefinition{}
	case 1500149896:
		return &UIComboBoxStyle{}
	case 1500520594:
		return &SwitchGizmoData{}
	case 1503223956:
		return &Type_59996094{}
	case 1505533788:
		return &MonsterACDInfo{}
	case 1506311405:
		return &GlobalCrafterEvents{}
	case 1510969510:
		return &DemonSummoningRitualQuests{}
	case 1512482878:
		return &GameTestingPersonaSamplingStartMessage{}
	case 1515056329:
		return &SurveyTypeEntry_Table{}
	case 1515542467:
		return &SoundTableEntry{}
	case 1516041750:
		return &PlayerLevelSubcondition{}
	case 1519954155:
		return &MaterialScalarValueDefinition{}
	case 1524322706:
		return &TriggerEventFadeRemotePlayers{}
	case 1527347021:
		return &VertInfluences{}
	case 1527797171:
		return &EnterKnownLookOverrides{}
	case 1529384342:
		return &AIStateDebugSetEntryStateMessage{}
	case 1530760901:
		return &GlobalNPCCustomizationData{}
	case 1531705921:
		return &PowerConditionDamageIsCrit{}
	case 1532086805:
		return &Type_5b51ca15{}
	case 1536548129:
		return &VertexElem{}
	case 1539306012:
		return &PostApplyBuffCallback{}
	case 1539764745:
		return &HoudiniParticlesSimDefinition{}
	case 1542498662:
		return &InventoryLocationMessageData{}
	case 1545009353:
		return &NecroArmyUnitSpecializationData{}
	case 1545908648:
		return &Type_5c24b1a8{}
	case 1548004936:
		return &Type_5c44ae48{}
	case 1548404444:
		return &MapImageHandleReference{}
	case 1548498258:
		return &OnHitBuffCallback{}
	case 1549763492:
		return &FogOfWarDefinition{}
	case 1552149356:
		return &Type_5c83eb6c{}
	case 1553481155:
		return &VisualItem{}
	case 1553851092:
		return &PlayerClassNecroData{}
	case 1557633509:
		return &InventoryRequestSocketMessage{}
	case 1560350015:
		return &OnResourceSpentBuffCallback{}
	case 1561306520:
		return &SceneCommonSpecification{}
	case 1563449722:
		return &PlayerSavedData{}
	case 1565240433:
		return &PolymorphicBase{}
	case 1567071638:
		return &PolytopeData{}
	case 1567658692:
		return &PrefetchSceneMessage{}
	case 1572611965:
		return &NpcTemplate{}
	case 1573591793:
		return &PowerConditionIsSkillSlot{}
	case 1578221855:
		return &TriggerEventShowClosedCaption{}
	case 1578429650:
		return &AssignTechniqueSlotMessage{}
	case 1579502660:
		return &GroundTestPosition{}
	case 1579898130:
		return &ScriptEventParamMonsterFamily{}
	case 1580383550:
		return &Type_5e32bd3e{}
	case 1583616832:
		return &SpeedTreeWindGroup{}
	case 1585147788:
		return &MusicTransition{}
	case 1585421177:
		return &Type_5e7f9b79{}
	case 1587276558:
		return &PowerConditionIsStealthed{}
	case 1589989121:
		return &DecalLookVariantMap{}
	case 1595431348:
		return &Type_5f1859b4{}
	case 1596648439:
		return &HeroDefinition{}
	case 1598717599:
		return &RareMonsterNamesEntry_Table{}
	case 1599239464:
		return &dmTransformMirror{}
	case 1600030893:
		return &PowerFacingWindow{}
	case 1600853111:
		return &UIScrollableTextStyle{}
	case 1606406480:
		return &SNONameDataMessage{}
	case 1609541836:
		return &MarkerWallData{}
	case 1612373481:
		return &ScriptEventParamLinkedMarkerAny{}
	case 1613488483:
		return &PS5ConsoleAwardDefinition{}
	case 1613933674:
		return &LookVariant{}
	case 1620996494:
		return &EmitterCylinderData{}
	case 1621969581:
		return &RunTimeMaterialScalarGraphEntry{}
	case 1627723867:
		return &Type_6105185b{}
	case 1629427722:
		return &AbortPowerMessage{}
	case 1632310600:
		return &CheckpointGizmoData{}
	case 1634307306:
		return &Type_61698cea{}
	case 1635348238:
		return &PetMessage{}
	case 1636896932:
		return &Type_619110a4{}
	case 1640357264:
		return &AnimTreeBlendTriangle{}
	case 1641549773:
		return &PowerConditionIsInActorGroup{}
	case 1645595534:
		return &LargeBiomeObject{}
	case 1647198707:
		return &MonsterFamilyDefinition{}
	case 1648188489:
		return &TriggerEventHitFlash{}
	case 1661010243:
		return &Type_63010143{}
	case 1661010244:
		return &Type_63010144{}
	case 1662164195:
		return &QuestPhase{}
	case 1664425892:
		return &ImbueAffixResultMessage{}
	case 1665901277:
		return &AnimSetAnimPreloadHelper{}
	case 1668292200:
		return &Type_63701e68{}
	case 1670410600:
		return &TriggerEventFootstepDrag{}
	case 1670688473:
		return &TriggerEventFootstepLift{}
	case 1671323816:
		return &ConversationSpeakerCaseNode{}
	case 1672889714:
		return &PlayerTalentRankSubcondition{}
	case 1675052528:
		return &BoostDefinition{}
	case 1680851546:
		return &Type_642fc25a{}
	case 1681337108:
		return &Type_64372b14{}
	case 1683664497:
		return &DT_POLYMORPHIC_VARIABLEARRAY[T]{}
	case 1687293198:
		return &TriggerEventDisableCollisionMessages{}
	case 1688351367:
		return &UIScrollBoxStyle{}
	case 1693956821:
		return &InventorySplitStackMessage{}
	case 1697033285:
		return &PlayerWorldTierEligibilityMessage{}
	case 1697914509:
		return &AIPropType{}
	case 1698657718:
		return &UIControlFont{}
	case 1698752488:
		return &UIControlIcon{}
	case 1700805074:
		return &PortalGizmoData{}
	case 1703620037:
		return &TelemetryBugEnteredMessage{}
	case 1706747121:
		return &SalvageResultItem{}
	case 1707030331:
		return &ItemUpgradeResultMessage{}
	case 1708090461:
		return &FoliageGrid{}
	case 1708808756:
		return &GlobalVendorEvents{}
	case 1709841508:
		return &PlayerQuestMessage{}
	case 1712030165:
		return &Type_660b81d5{}
	case 1717523836:
		return &DebugProjectileDetPathData{}
	case 1718506033:
		return &Type_666e5231{}
	case 1718849905:
		return &NecroArmyUnitSpecializationUpgradeData{}
	case 1724776431:
		return &TriggerEventSequenceEnded{}
	case 1725462643:
		return &UIMinimapRoadsStyle{}
	case 1733186626:
		return &Type_674e5442{}
	case 1738300573:
		return &MarkerMonsterActorData{}
	case 1738373142:
		return &PowerConditionDamageIsDot{}
	case 1738374856:
		return &Type_679d7ec8{}
	case 1738588147:
		return &Type_67a0bff3{}
	case 1739069350:
		return &Type_67a817a6{}
	case 1740982451:
		return &Type_67c548b3{}
	case 1745318875:
		return &ActorSlotHelper{}
	case 1745391946:
		return &Type_6808914a{}
	case 1751632332:
		return &PreloadSpawnMarkerData{}
	case 1752813939:
		return &UInt64DataResponse{}
	case 1753871156:
		return &WaypointEffectInfo{}
	case 1755847107:
		return &HardpointOffsets{}
	case 1756881483:
		return &RevealTeamMessage{}
	case 1760724339:
		return &IKLegBoneChain{}
	case 1762254162:
		return &Type_6909dd52{}
	case 1766737593:
		return &SNOFileHeader{}
	case 1769463365:
		return &ShortcutKey{}
	case 1770847088:
		return &UITimerStyle{}
	case 1771829381:
		return &OnStartPowerCallback{}
	case 1771985748:
		return &Type_699e5b54{}
	case 1775775341:
		return &AtLeastLogicSubcondition{}
	case 1776237801:
		return &ItemCountSubcondition{}
	case 1777060346:
		return &NecroPetData{}
	case 1777318472:
		return &EffectGroupActorAnimationTrack{}
	case 1780051193:
		return &ScriptEventParamLevelArea{}
	case 1781863288:
		return &ItemQualityModifierSubcondition{}
	case 1782591369:
		return &UIContextMenuStyle{}
	case 1786551918:
		return &CraftingMatCategory{}
	case 1786644177:
		return &DeathMaterialTemplate{}
	case 1787454432:
		return &Type_6a8a63e0{}
	case 1789096554:
		return &RunTimeMaterialVectorGraphEntry{}
	case 1791638909:
		return &GameTestingActorUseSkill{}
	case 1795423328:
		return &Type_6b03fc60{}
	case 1797021084:
		return &UIImageHandleReference{}
	case 1797564205:
		return &PlayerWeaponExpertiseLevelMessage{}
	case 1800961110:
		return &SphereProximityData{}
	case 1801469402:
		return &Type_6b603dda{}
	case 1805383760:
		return &DebugDataFinishedMessage{}
	case 1806235108:
		return &ACDTranslateNormalMessage{}
	case 1806875813:
		return &GameFlagSubcondition{}
	case 1810202905:
		return &Influence{}
	case 1811863812:
		return &VertTiledWindowPieces{}
	case 1812237195:
		return &LayerVertexAO{}
	case 1812693783:
		return &ParagonGlyphObtainedMessage{}
	case 1812719981:
		return &DemonScrollNodeMessage{}
	case 1815184996:
		return &Type_6c318664{}
	case 1815206818:
		return &PvPResurrectTriggeredBuffCallback{}
	case 1816168716:
		return &ConditionProperty{}
	case 1817937405:
		return &ParagonUnequipSocketMessage{}
	case 1826826915:
		return &Type_6ce32aa3{}
	case 1827034945:
		return &MaterialValueSetDefinition{}
	case 1827228827:
		return &SkillTreeReward_Table{}
	case 1828129294:
		return &WorldRevealedPortalInfo{}
	case 1835606997:
		return &PlayCutsceneMessage{}
	case 1843934011:
		return &Type_6de8333b{}
	case 1845219085:
		return &PowerConditionDamageIsFromPayload{}
	case 1849409482:
		return &MapPinMessage{}
	case 1852155541:
		return &ActorVariantPreloadHelper{}
	case 1853817945:
		return &Type_6e7f0459{}
	case 1860709698:
		return &AttributeSetValueMessage{}
	case 1860780666:
		return &Type_6ee9427a{}
	case 1863894076:
		return &Type_6f18c43c{}
	case 1866279015:
		return &LockingGizmoData{}
	case 1868650677:
		return &GameTestingCloseCrafter{}
	case 1869689402:
		return &HitReactionOverride{}
	case 1872500871:
		return &IconLayout{}
	case 1874071251:
		return &TriggerEventChangePhysicsParameters{}
	case 1874856805:
		return &ClanBankMoveItemMessage{}
	case 1877253458:
		return &PlayerCurrentLevelAreaSubcondition{}
	case 1878327400:
		return &Type_6ff50068{}
	case 1886370288:
		return &TriggerEventTransparency{}
	case 1887511799:
		return &TriggerEventObjectLookAt{}
	case 1887910602:
		return &CraftingRecipeResultMessage{}
	case 1890695261:
		return &ScriptEventParamSecondaryGroup{}
	case 1892122433:
		return &HeroPreset{}
	case 1894103222:
		return &PrefabDataInfo{}
	case 1894312142:
		return &PrefabScopedActorGroupData{}
	case 1894444122:
		return &UIAutoScrollingTextStyle{}
	case 1896923476:
		return &BarbWeaponExpertiseData{}
	case 1899575067:
		return &PlayerNonAuthoritativePositionMessage{}
	case 1900436670:
		return &GeneratorToItemMessage{}
	case 1900454970:
		return &Type_7146a43a{}
	case 1904113869:
		return &ItemPowerSubcondition{}
	case 1904447052:
		return &PersonaSkinColor{}
	case 1905862367:
		return &ActorCollisionData{}
	case 1910102078:
		return &Type_71d9d83e{}
	case 1913132816:
		return &Type_72081710{}
	case 1914659836:
		return &AssignClassPassiveSkillSlotMessage{}
	case 1915825028:
		return &MediumBiomeObject{}
	case 1917309641:
		return &NightmareDungeonGlobalSpawn{}
	case 1919141278:
		return &LooteeLevelRangeSubcondition{}
	case 1921550813:
		return &TriggerEventMsg{}
	case 1922961974:
		return &StencilParams{}
	case 1925015032:
		return &RequiredRequestMessageHeader{}
	case 1927540920:
		return &GlobalMarkerActorPortalData{}
	case 1928395195:
		return &ChangeAppearanceMessage{}
	case 1929374276:
		return &Type_72ffea44{}
	case 1929750214:
		return &GameTestingStatusTextMessage{}
	case 1931092405:
		return &DT_BCVEC2I{}
	case 1931790071:
		return &MarkerDestroyableObjectGizmoData{}
	case 1932093566:
		return &ForcedPrefetchData{}
	case 1932832286:
		return &OnInitializeDamageBuffCallback{}
	case 1934448837:
		return &VoteKickMessage{}
	case 1937283260:
		return &Type_737898bc{}
	case 1937804743:
		return &SkillTreeNodeEntry{}
	case 1941067946:
		return &ChangedHeroIdMessage{}
	case 1941343248:
		return &PowerConditionHasActorTarget{}
	case 1946425919:
		return &LogicSubcondition{}
	case 1947080328:
		return &UIConsoleEditStyle{}
	case 1954392551:
		return &DRLGPortalInfo{}
	case 1955932002:
		return &JoinExistingGamePlayer{}
	case 1956557694:
		return &BoostCheatEntry{}
	case 1958909611:
		return &NpcLookTagEntry_Table{}
	case 1961073695:
		return &CameraModeSetMessage{}
	case 1963650241:
		return &ExperienceLevelAlt{}
	case 1966453421:
		return &Type_7535b2ad{}
	case 1970160507:
		return &ColorCorrectionParams{}
	case 1975688513:
		return &UIMinimapArtStyle{}
	case 1976178896:
		return &Type_75ca18d0{}
	case 1976572630:
		return &TriggerEvent{}
	case 1976971716:
		return &AICellData{}
	case 1977693790:
		return &PlayMusicOverlayMessage{}
	case 1982581444:
		return &BannerMaskOnly{}
	case 1983770026:
		return &DeathFadeTimeMessage{}
	case 1984123993:
		return &ActorGizmoData{}
	case 1986190036:
		return &FlagLookup{}
	case 1988397685:
		return &TriggerEventAddRope{}
	case 1989677168:
		return &GenericBlobResponseMessage{}
	case 1994743229:
		return &EffectGroupActorPositionTrack{}
	case 1996222619:
		return &WorldEventStartingMessage{}
	case 1996866922:
		return &ImbueRecipe{}
	case 2003228405:
		return &NecroArmyUnitMessage{}
	case 2004372852:
		return &SpeakerDefinition{}
	case 2006826034:
		return &TriggerEventSetWeaponSheathed{}
	case 2007470353:
		return &Type_77a79111{}
	case 2007685731:
		return &Type_77aada63{}
	case 2011319229:
		return &Type_77e24bbd{}
	case 2012569092:
		return &OnInterruptPowerCallback{}
	case 2018777882:
		return &Type_78541b1a{}
	case 2019694123:
		return &OnCreatePowerCallback{}
	case 2021184730:
		return &ACDGroupMessage{}
	case 2022002312:
		return &Type_78854e88{}
	case 2024104618:
		return &ClassPassiveSkillData{}
	case 2028905861:
		return &PlayerClassResourceData{}
	case 2029186460:
		return &TriggerCleanup{}
	case 2029827469:
		return &ClientDebugLogMessage{}
	case 2030959986:
		return &ActivityReward{}
	case 2031655355:
		return &PowerPhasePreplay{}
	case 2034679227:
		return &ScriptEventParamQuestName{}
	case 2036903461:
		return &CurrentLevelAreaSubcondition{}
	case 2037513697:
		return &GlobalMarkerActorWaypointData{}
	case 2041894246:
		return &PrivateGameSubcondition{}
	case 2046453424:
		return &MarkerInstanceChunk{}
	case 2046994646:
		return &Type_7a02a8d6{}
	case 2049702795:
		return &ScriptEventParamMonsterRarity{}
	case 2051550180:
		return &MarkerInstanceGroup{}
	case 2052605128:
		return &PrefetchQuestMessage{}
	case 2056603216:
		return &Type_7a954650{}
	case 2057617923:
		return &EffectGroupDefinition{}
	case 2057942129:
		return &CurrencyModifiedMessage{}
	case 2058477748:
		return &Type_7ab1e0b4{}
	case 2059036506:
		return &Type_7aba675a{}
	case 2059654736:
		return &Type_7ac3d650{}
	case 2060105275:
		return &Type_7acab63b{}
	case 2060884859:
		return &OctreePrimitive{}
	case 2061652930:
		return &DebugProjectileCollisionCheck{}
	case 2064769380:
		return &MarkerPortalDestGizmoData{}
	case 2065256525:
		return &ItemSourceWorldTierSubcondition{}
	case 2066859665:
		return &ItemUpgradeCountSubcondition{}
	case 2066998999:
		return &NPCHairColors{}
	case 2067380477:
		return &OnResourceGainedBuffCallback{}
	case 2073439808:
		return &ScriptEventParamSpawnerParentMarkerHandle{}
	case 2074591759:
		return &Type_7ba7c20f{}
	case 2077459498:
		return &FoleyMaterialTag{}
	case 2079139131:
		return &Type_7bed253b{}
	case 2087454851:
		return &ScriptEventParamConversation{}
	case 2088474641:
		return &SubObjectAppearance{}
	case 2088915018:
		return &PowerConditionIsValidForWeaponExpertise{}
	case 2092006570:
		return &OnBerserkRemovedCallback{}
	case 2094206499:
		return &AnimSetOverrideEntry{}
	case 2098572313:
		return &CollisionMesh{}
	case 2104860565:
		return &SkillTreeNode{}
	case 2105554066:
		return &Type_7d803492{}
	case 2112201650:
		return &ScriptEventParamFloatRangeEntered{}
	case 2112421053:
		return &Type_7de8fcbd{}
	case 2114060201:
		return &ActorCombatData{}
	case 2114606337:
		return &GameSyncedDebugData{}
	case 2118224808:
		return &Type_7e418ba8{}
	case 2121213381:
		return &GameTestingActorDeathSamplingStartMessage{}
	case 2126649151:
		return &Type_7ec2173f{}
	case 2127931882:
		return &WorldEvent{}
	case 2137439767:
		return &DeathLookTemplate{}
	case 2142531194:
		return &Type_7fb46e7a{}
	case 2142750046:
		return &HirelingInfo{}
	case 2143433921:
		return &Type_7fc234c1{}
	case 2144199072:
		return &HiddenCacheGizmoData{}
	case 2145337385:
		return &SurfaceWorldConstraints{}
	case 2145377512:
		return &TriggerEventCameraStayOnSpline{}
	case 2145577021:
		return &ParticleDefinition{}
	case 2146499348:
		return &Type_7ff0fb14{}
	case 2149480436:
		return &TriggerEventSetWeaponVisibility{}
	case 2151397172:
		return &SonyConsoleAwardDefinition{}
	case 2151579788:
		return &Type_803e808c{}
	case 2153074669:
		return &Type_80554fed{}
	case 2155009884:
		return &AnimPreplayData{}
	case 2157773438:
		return &ConversationSpeakerSwitchNode{}
	case 2160968233:
		return &Hardpoint{}
	case 2163877900:
		return &Type_80fa280c{}
	case 2163881319:
		return &Type_80fa3567{}
	case 2166886397:
		return &LineSeg2D{}
	case 2166886430:
		return &LineSeg3D{}
	case 2170423475:
		return &Matrix3x3{}
	case 2170424565:
		return &Matrix4x4{}
	case 2170992511:
		return &PeriodicBuffCallback{}
	case 2171505484:
		return &Type_816e8b4c{}
	case 2172679889:
		return &RandomNumberGenerator{}
	case 2172682041:
		return &Type_81807f39{}
	case 2174682268:
		return &ANNDataMessage{}
	case 2175310548:
		return &DT_CHARARRAY{}
	case 2176853528:
		return &RunTimeMaterialScalarValueEntry{}
	case 2179972544:
		return &CrowdControlEffects{}
	case 2181073666:
		return &Type_82008b02{}
	case 2181465511:
		return &ScriptEventParamPlayerAlly{}
	case 2183663603:
		return &Type_82280ff3{}
	case 2184063125:
		return &Type_822e2895{}
	case 2185067100:
		return &BlizzconSubcondition{}
	case 2193642883:
		return &DT_STARTLOC_NAME{}
	case 2196035606:
		return &ParticleLifeEvent{}
	case 2196661953:
		return &Type_82ee66c1{}
	case 2201739835:
		return &QuestItemCountSubcondition{}
	case 2203797867:
		return &PowerConditionDamageHasFortified{}
	case 2203850545:
		return &Type_835c1731{}
	case 2204929451:
		return &Type_836c8dab{}
	case 2209846478:
		return &InitiateGroupTransferMessage{}
	case 2214406937:
		return &AppearanceDefinition{}
	case 2215366883:
		return &WwiseExternalSource{}
	case 2216403567:
		return &Type_841ba26f{}
	case 2217400535:
		return &TriggerEventChangeLookDuration{}
	case 2218862017:
		return &LocalPlayerNetEvent{}
	case 2221046122:
		return &DRLGTileDebugInfo{}
	case 2224583688:
		return &ConvexHull{}
	case 2228087293:
		return &ActorWeaponData{}
	case 2231778435:
		return &ConditionalMaterialOverride{}
	case 2231852322:
		return &BasicGizmoData{}
	case 2232542902:
		return &LabelGBID{}
	case 2232906326:
		return &FoleyMaterialTagInfo{}
	case 2232994936:
		return &LabelRule{}
	case 2236788925:
		return &PowerConditionIsInCombat{}
	case 2237510224:
		return &InventoryRequestQuickMoveMessage{}
	case 2239531469:
		return &Type_857c89cd{}
	case 2241053736:
		return &WwiseInitSoundBank{}
	case 2241554070:
		return &WardrobeGizmoData{}
	case 2241717353:
		return &GlobalRoadGraph{}
	case 2244038972:
		return &ScreenStaticCamps{}
	case 2246606637:
		return &WorldSetRemainingReviveCountMessage{}
	case 2247187911:
		return &Type_85f15dc7{}
	case 2247750652:
		return &OnHitEffectTriggeredBuffCallback{}
	case 2251741487:
		return &Type_8636d92f{}
	case 2254079268:
		return &SpeakerActorOverride{}
	case 2256765564:
		return &PowerConditionHasItemEquipped{}
	case 2257212908:
		return &SchedulerGlobalUniqueCategory_Table{}
	case 2264191210:
		return &PlayerIndexMessage{}
	case 2266988989:
		return &DRLGNodeLink{}
	case 2268617325:
		return &Type_87385a6d{}
	case 2271882673:
		return &AssignArsenalSkillSlotMessage{}
	case 2273327169:
		return &DesignerVariablePayload{}
	case 2273337114:
		return &ItemTypeDefinition{}
	case 2275911501:
		return &Type_87a7a74d{}
	case 2281806197:
		return &FloatDataMessage{}
	case 2286345736:
		return &ACDChangeGBHandleMessage{}
	case 2286607278:
		return &MailRetrieveMessage{}
	case 2288649288:
		return &SceneData{}
	case 2289366803:
		return &LevelScalingData{}
	case 2289552381:
		return &MailRetrieveResponseMessage{}
	case 2291044736:
		return &ActorGroupData{}
	case 2292633268:
		return &TimeSinceEventSubcondition{}
	case 2294093111:
		return &LoreMessage{}
	case 2294355469:
		return &Type_88c1160d{}
	case 2296234344:
		return &ActiveSkillSavedData{}
	case 2303447637:
		return &RoadTypeProperties{}
	case 2305778229:
		return &PowerCallbackBase{}
	case 2306151105:
		return &ProcChanceBuffCallbackBase{}
	case 2307863150:
		return &GameTestingMonsterSamplingStartMessage{}
	case 2308255985:
		return &ScriptEventParamGameTime{}
	case 2309166548:
		return &Int64DataMessage{}
	case 2311704666:
		return &UIItemTagStyle{}
	case 2313381993:
		return &AnimPayloadData{}
	case 2314008733:
		return &ActorAIData{}
	case 2314185754:
		return &Type_89efac1a{}
	case 2316484023:
		return &Type_8a12bdb7{}
	case 2317315368:
		return &PostFXParams{}
	case 2319005362:
		return &LevelAreaTagsEntry{}
	case 2321101556:
		return &UIListBoxStyle{}
	case 2322101684:
		return &PlayerClassSubcondition{}
	case 2322205255:
		return &OnGizmoOperatedBuffCallback{}
	case 2322513553:
		return &Type_8a6ebe91{}
	case 2322586175:
		return &PowerConditionDamageHasVulnerable{}
	case 2330953703:
		return &dmHeightSampleMirror{}
	case 2332138205:
		return &AIBroadcast{}
	case 2335353143:
		return &Type_8b32a937{}
	case 2339908716:
		return &UnassignSkillMessage{}
	case 2340576936:
		return &VoiceActorEntry_Table{}
	case 2342148084:
		return &ReputationDefinition{}
	case 2342641194:
		return &IntDataMessage{}
	case 2343980501:
		return &RunTimeMaterialVectorValueEntry{}
	case 2345705581:
		return &GroupTransferQueryMessage{}
	case 2350164363:
		return &PowerConditionHasSkillTag{}
	case 2351673709:
		return &SkillEnchantSavedData{}
	case 2352207656:
		return &Type_8c33d728{}
	case 2354163126:
		return &CampaignArc{}
	case 2354985244:
		return &ReputationSubcondition{}
	case 2359108143:
		return &TriggerEventShowWarpUI{}
	case 2363268517:
		return &GameTestingSmokeSamplingStartMessage{}
	case 2365357836:
		return &ACDChangeActorMessage{}
	case 2366025409:
		return &Type_8d06aec1{}
	case 2366029567:
		return &CollectAchievementItemRewardsRequest{}
	case 2366545239:
		return &Type_8d0e9d57{}
	case 2366876290:
		return &LevelScalingDefinition{}
	case 2367854564:
		return &GlobalCustomizationData{}
	case 2368820934:
		return &PlayAnimationMessageSpec{}
	case 2369645379:
		return &TriggerProximityData{}
	case 2370441714:
		return &PetType_Table{}
	case 2372115555:
		return &TriggerEventShowCaptionUI{}
	case 2378235681:
		return &MaterialBoolValueDefinition{}
	case 2378676899:
		return &AttributeFormulaEntry_Table{}
	case 2381837287:
		return &GameFoundForTransferMessage{}
	case 2382044172:
		return &PlayerDWordDataMessage{}
	case 2382427025:
		return &WindowPieces{}
	case 2384880434:
		return &DT_RGBACOLOR{}
	case 2385389941:
		return &ConsoleEvent{}
	case 2387944564:
		return &PlayerHealthSubcondition{}
	case 2388214534:
		return &DT_FIXEDARRAY[T]{}
	case 2388963472:
		return &GameTestingWorldEventSamplingStartMessage{}
	case 2394153027:
		return &LookLink{}
	case 2394280102:
		return &MarkerAudioVolumeData{}
	case 2395658582:
		return &MarkerDoorGizmoData{}
	case 2395819864:
		return &PlayerIsMaxLevelSubcondition{}
	case 2400971897:
		return &FlippyMessage{}
	case 2401292714:
		return &NullProximityData{}
	case 2402010415:
		return &VertexDensitySettings{}
	case 2404505973:
		return &GBIDDataMessage{}
	case 2405096309:
		return &DecalTemplate{}
	case 2409250148:
		return &PlayerHasFollowerSubcondition{}
	case 2412575474:
		return &Type_8fccfaf2{}
	case 2417105777:
		return &PlayNonPositionalSoundMessage{}
	case 2420814353:
		return &Type_904ab211{}
	case 2421467334:
		return &ActorGroup{}
	case 2423935966:
		return &AnimTreeDefinition{}
	case 2430479134:
		return &SavedTransmog{}
	case 2433333811:
		return &Type_9109ba33{}
	case 2438391130:
		return &OnRetreatCompleteCallback{}
	case 2442380883:
		return &PowerConditionOnChance{}
	case 2450313795:
		return &DT_STRING_FORMULA{}
	case 2451485018:
		return &EnchantAffixChoice{}
	case 2451870822:
		return &NPCComponentEntry{}
	case 2454123799:
		return &PetDetachMessage{}
	case 2454381057:
		return &NPCComponentGroup{}
	case 2454888476:
		return &EncounterDefinition{}
	case 2456833659:
		return &Type_92704e7b{}
	case 2465803619:
		return &DungeonSpawningPoolEntry{}
	case 2469691855:
		return &ReverbDefinition{}
	case 2473743515:
		return &ParagonGlyphExperience_Table{}
	case 2474805987:
		return &PlayerCompletedRepeatableQuestEntry{}
	case 2475257601:
		return &OctreeCube{}
	case 2475563578:
		return &OctreeLeaf{}
	case 2475646440:
		return &OctreeNode{}
	case 2478508419:
		return &GlobalIntensityLevels{}
	case 2478744539:
		return &PersistentEventUpdateMessage{}
	case 2486290493:
		return &BroadcastTextMessage{}
	case 2489740473:
		return &Type_94666cb9{}
	case 2489826166:
		return &Type_9467bb76{}
	case 2498157443:
		return &MarkingShapeDefinition{}
	case 2499966838:
		return &MaxKeyedDungeonCompletedSubcondition{}
	case 2500959896:
		return &Type_95119e98{}
	case 2502332464:
		return &Type_95269030{}
	case 2504911729:
		return &Type_954deb71{}
	case 2507153527:
		return &PlayerClassCoreStatBenefitEntry{}
	case 2508478640:
		return &QuestCallbackSubcondition{}
	case 2510049735:
		return &SceneChunk{}
	case 2511145847:
		return &SceneDefinition{}
	case 2517296881:
		return &OperateWorldTierSelectMessage{}
	case 2517800201:
		return &HealthPotionData{}
	case 2519410570:
		return &MailDeleteResponseMessage{}
	case 2519917715:
		return &TrickleMessage{}
	case 2520702334:
		return &InterpolationPathHeader{}
	case 2522697303:
		return &TransmogEnableMessage{}
	case 2526923990:
		return &WallPiece{}
	case 2529552754:
		return &RevealSceneMessage{}
	case 2531064807:
		return &ExperienceLevel_Table{}
	case 2532034596:
		return &OnAIUpdatePowerCallback{}
	case 2535282083:
		return &ScriptEventParamOwnerParty{}
	case 2537782937:
		return &MonsterSubcondition{}
	case 2538390904:
		return &FaceDefinition{}
	case 2540505462:
		return &Type_976d0976{}
	case 2540765384:
		return &Type_977100c8{}
	case 2543084619:
		return &ActorMovementPowerData{}
	case 2544145426:
		return &IKFrames{}
	case 2544485076:
		return &MonsterRaritySubcondition{}
	case 2548851047:
		return &DemonScrollRewardChoicePickedMessage{}
	case 2549076906:
		return &GlobalSnoTemplatesData{}
	case 2549498530:
		return &PS4ConsoleAwardDefinition{}
	case 2549709590:
		return &ActivityDefinition{}
	case 2549930403:
		return &AngularAxisParams{}
	case 2550988783:
		return &ActivateDungeonKeyMessage{}
	case 2554403987:
		return &PowerConditionHasBuff{}
	case 2554746855:
		return &Type_984657e7{}
	case 2562866241:
		return &UIControlClickSounds{}
	case 2563239354:
		return &Type_98c7edba{}
	case 2563708935:
		return &VisualInventoryMessage{}
	case 2564089914:
		return &UIRActorStyle{}
	case 2564555685:
		return &AppBone{}
	case 2567036372:
		return &ZoneProgressClaimRewardsMessage{}
	case 2568734177:
		return &RecipeDefinition{}
	case 2568815379:
		return &Type_991d0313{}
	case 2569096240:
		return &ACDTranslateDetPathSpiralMessage{}
	case 2570366766:
		return &Type_9934af2e{}
	case 2570990031:
		return &Type_993e31cf{}
	case 2571326005:
		return &Environment{}
	case 2571982133:
		return &ConversationLineSetNode{}
	case 2575985446:
		return &Type_998a6b26{}
	case 2577181091:
		return &UIHotkeyStyle{}
	case 2580339411:
		return &PowerScriptParam{}
	case 2580740532:
		return &Type_99d2f9b4{}
	case 2581622842:
		return &DisplayGameTextMessage{}
	case 2582092633:
		return &DungeonAffixFamilyEntry_Table{}
	case 2583917793:
		return &OnOtherBuffRemovedCallback{}
	case 2584931415:
		return &PowerLimitedActorType_Table{}
	case 2586870554:
		return &SkillTreeSkillRankMod{}
	case 2588169118:
		return &PRTransform{}
	case 2592055163:
		return &AVParams{}
	case 2594652800:
		return &VectorPath{}
	case 2595039391:
		return &HirelingSavedData{}
	case 2597480017:
		return &IncludePath{}
	case 2598565419:
		return &DyeDefinition{}
	case 2599303564:
		return &NPCInteractOptionsMessage{}
	case 2600087323:
		return &RopeEffectMessageACDToACD{}
	case 2601544319:
		return &Type_9b106a7f{}
	case 2602744819:
		return &PowerConditionIsMonsterRarity{}
	case 2603594083:
		return &DynamicPortalInfo{}
	case 2607134593:
		return &TriggerEventFadeMonsters{}
	case 2612133870:
		return &RewardDefinition{}
	case 2613264313:
		return &Type_9bc33fb9{}
	case 2613318812:
		return &UIDateTimeStyle{}
	case 2615077772:
		return &NPCColorSet{}
	case 2616788302:
		return &PowerResourceCost{}
	case 2621793879:
		return &ACDLookAtMessage{}
	case 2623909960:
		return &ActorFaceHelper{}
	case 2624747364:
		return &MailReadMessage{}
	case 2626405485:
		return &FloatingAmountMessage{}
	case 2627400883:
		return &SpeedTreeWind{}
	case 2629560997:
		return &SkillDeclaration{}
	case 2630271823:
		return &PrefetchActorMessage{}
	case 2632036962:
		return &SerializeData{}
	case 2633518996:
		return &Type_9cf84f94{}
	case 2635124950:
		return &GlobalEmblems{}
	case 2637916746:
		return &QuestSideQuestAbandonedMessage{}
	case 2638826700:
		return &DebugEventLogMetaData{}
	case 2649429830:
		return &TriggerEventFadePlayers{}
	case 2650697781:
		return &MarkerDecalData{}
	case 2653177306:
		return &TriggerEventSetWeaponVisibilityDuration{}
	case 2655029985:
		return &NPCInteraction{}
	case 2656393353:
		return &Type_9e555889{}
	case 2659267804:
		return &Type_9e8134dc{}
	case 2661866676:
		return &Type_9ea8dcb4{}
	case 2664386791:
		return &GizmoConditionData{}
	case 2665518925:
		return &FacialHairDefinition{}
	case 2666466548:
		return &ClothData{}
	case 2671035274:
		return &PlayerLevelMessage{}
	case 2677649540:
		return &ActorSoundTableData{}
	case 2679332817:
		return &VictimMessage{}
	case 2692507939:
		return &PortedToPlayerMessage{}
	case 2693985039:
		return &BaseACDInfo{}
	case 2696054852:
		return &WorldStateFullUpdateMessage{}
	case 2696410867:
		return &Type_a0b7f6f3{}
	case 2698056971:
		return &JewelryDefinition{}
	case 2699874909:
		return &TerritoryDefinition{}
	case 2703348374:
		return &TriggerEventSpawnObject{}
	case 2704697578:
		return &LookVariantOverride{}
	case 2705520630:
		return &PowerConditionIsActorUnstoppable{}
	case 2710083680:
		return &Type_a1889860{}
	case 2710729343:
		return &MountClearMessage{}
	case 2711713996:
		return &TriggerEventCameraChangeTarget{}
	case 2714300283:
		return &SNOBlocklistDataChanged{}
	case 2715697063:
		return &PowerConditionIsTrackedActor{}
	case 2715997611:
		return &ZoneProgressRewardPerTierData{}
	case 2716429438:
		return &StarsSettings{}
	case 2718809169:
		return &LoudnessParams{}
	case 2720386370:
		return &TriggerEventEnableRagdollAnimationOverride{}
	case 2722037534:
		return &DesignerVariable_Table{}
	case 2722473312:
		return &StartPowerMessage{}
	case 2722669670:
		return &PowerConditionParagonGlyphAffixIsActive{}
	case 2729507990:
		return &Type_a2b0fc96{}
	case 2738650612:
		return &ParagonGlyphIntoSocketMessage{}
	case 2740285311:
		return &PlayerClassRogueData{}
	case 2750801330:
		return &Circle{}
	case 2751678841:
		return &RotationKey{}
	case 2752714698:
		return &ACDTranslateAckMessage{}
	case 2753673685:
		return &NPCACDInfo{}
	case 2755888482:
		return &PowerConditionHasFortifiedHealth{}
	case 2758429349:
		return &PowerConditionIsCrowdControlled{}
	case 2760098121:
		return &ConsoleCommandResultsMessage{}
	case 2760774118:
		return &BlendTimeOverrideEntry{}
	case 2763598860:
		return &PlayerVariableIsSetSubcondition{}
	case 2763918557:
		return &ConversationSample{}
	case 2764320258:
		return &DT_INT{}
	case 2764331143:
		return &DT_SNO{}
	case 2765613286:
		return &Anim2DFrame{}
	case 2766662738:
		return &ActorCollisionFlags{}
	case 2767272062:
		return &PlayerAnimSetOverride{}
	case 2768795568:
		return &ZoneProgressRewardData{}
	case 2770795733:
		return &ShaderMapOverride{}
	case 2771980683:
		return &Type_a539118b{}
	case 2772503601:
		return &PvPInfoResponse{}
	case 2777232529:
		return &PowerConditionIsDamageType{}
	case 2777898273:
		return &GenericBlobMessage{}
	case 2778042845:
		return &PlayerEnterKnownMessage{}
	case 2778974978:
		return &Type_a5a3cb02{}
	case 2780317717:
		return &MarkerActorData{}
	case 2780951310:
		return &SpeedTreeWindBase{}
	case 2781228885:
		return &Type_a5c62f55{}
	case 2782855569:
		return &Type_a5df0191{}
	case 2784838746:
		return &RepairResultsMessage{}
	case 2795391298:
		return &RemovedBuffCallback{}
	case 2800636746:
		return &GroupRegionEntry_Table{}
	case 2800793622:
		return &TriggerEventDetachObject{}
	case 2803017583:
		return &KeyedDungeonTierEntry_Table{}
	case 2803465218:
		return &PlayerClassSorcererData{}
	case 2809861339:
		return &ClassInfoDataArray{}
	case 2811181471:
		return &GBIDHeader{}
	case 2811314006:
		return &HotbarButtonData{}
	case 2820249283:
		return &Type_a81996c3{}
	case 2822536850:
		return &StoryboardDefinition{}
	case 2823526119:
		return &ScriptEventParamFloatRangeInside{}
	case 2823824643:
		return &UITutorialStyle{}
	case 2824118202:
		return &CurrencyItem{}
	case 2825252704:
		return &UIKeyMappingButtonStyle{}
	case 2826025722:
		return &MarkerNoSpawnVolumeData{}
	case 2827109142:
		return &AnimTreeNodeBase{}
	case 2828840794:
		return &SkillTreeNodeMessage{}
	case 2828952640:
		return &ActorPreloadHelper{}
	case 2829109539:
		return &TriggerEventRestoreCamera{}
	case 2833801029:
		return &Type_a8e85f45{}
	case 2838399059:
		return &UIScrollbarStyle{}
	case 2839639157:
		return &Type_a9417475{}
	case 2842269379:
		return &ValidComponent{}
	case 2847726419:
		return &WwiseChildFile{}
	case 2857749912:
		return &Type_aa55cd98{}
	case 2863656093:
		return &EffectGroupKeyData{}
	case 2865538525:
		return &PreApplyBuffCallback{}
	case 2866333320:
		return &DT_ACD_NETWORK_NAME{}
	case 2867390635:
		return &LayerInstanceChunk{}
	case 2871889556:
		return &ReputationValuePair{}
	case 2873585262:
		return &OnEndPowerCallback{}
	case 2876844401:
		return &ItemSalvageLevel_Table{}
	case 2877507578:
		return &Type_ab8347fa{}
	case 2882940688:
		return &ActorCritterData{}
	case 2884204419:
		return &QuestCallbackRegion{}
	case 2884411237:
		return &Type_abec9f65{}
	case 2885013475:
		return &NPCItems{}
	case 2887578027:
		return &UITemplateStyleOverride{}
	case 2888871135:
		return &Type_ac30acdf{}
	case 2890825383:
		return &UIRadioButtonGroupStyle{}
	case 2891320840:
		return &GameTestingBuybackItem{}
	case 2893246136:
		return &MaterialBoolValue{}
	case 2894373936:
		return &TriggerEventSetHelmVisibility{}
	case 2899228989:
		return &SubzoneModifierTagsEntry_Table{}
	case 2899636366:
		return &GameVariableValueSubcondition{}
	case 2901213531:
		return &Type_aced015b{}
	case 2902473767:
		return &GeoSet{}
	case 2902494846:
		return &RequiredResponseMessageHeader{}
	case 2907517865:
		return &Type_ad4d33a9{}
	case 2907865191:
		return &MountACDInfo{}
	case 2908600322:
		return &PlayerTradeMessage{}
	case 2909661697:
		return &DesignerVariableChanged{}
	case 2917036215:
		return &GameTestingSellItem{}
	case 2918685438:
		return &Type_adf79afe{}
	case 2920294703:
		return &SetIdleAnimationMessage{}
	case 2926955773:
		return &Type_ae75ccfd{}
	case 2928454866:
		return &AmbientSoundDefinition{}
	case 2932113843:
		return &HeroDetailsArray{}
	case 2935055576:
		return &ScriptMessageMap{}
	case 2935158038:
		return &Type_aef2f516{}
	case 2936716518:
		return &HeroDetailsEntry{}
	case 2940213818:
		return &WorldStateSubcondition{}
	case 2940719703:
		return &PowerConditionHasDot{}
	case 2940723648:
		return &Type_af47e1c0{}
	case 2941496629:
		return &MaterialValueDefinition{}
	case 2942321358:
		return &Type_af6042ce{}
	case 2943074919:
		return &Type_af6bc267{}
	case 2943327539:
		return &Type_af6f9d33{}
	case 2944981941:
		return &Type_af88dbb5{}
	case 2948324216:
		return &IKBone{}
	case 2948381038:
		return &IKData{}
	case 2949726179:
		return &ACDTranslateFacingMessage{}
	case 2952710408:
		return &Type_affec908{}
	case 2953843760:
		return &MarkerLink{}
	case 2956401361:
		return &HeroDetailsValue{}
	case 2956903311:
		return &PowerConditionHasDamage{}
	case 2958127092:
		return &PowerConditionIsAutoCast{}
	case 2959453771:
		return &EyeColorDefinition{}
	case 2963039083:
		return &DungeonAffixRange{}
	case 2963051637:
		return &PlayerKickTimerMessage{}
	case 2964990786:
		return &Type_b0ba2b42{}
	case 2965426892:
		return &UIColorPickerStyle{}
	case 2968578253:
		return &Type_b0f0e8cd{}
	case 2968693081:
		return &RequiredCommandFrameMessageHeader{}
	case 2971327593:
		return &WeaponExpertiseRanks_Table{}
	case 2974720179:
		return &Type_b14ea0b3{}
	case 2974844252:
		return &QuestFollower{}
	case 2977136533:
		return &RotationCurve{}
	case 2977505002:
		return &QuestPhasePreloadHelper{}
	case 2979382107:
		return &BountyData{}
	case 2980650101:
		return &CarryableGizmoData{}
	case 2982009401:
		return &Type_b1bdda39{}
	case 2982989742:
		return &ZoneProgressPerZoneData{}
	case 2983615105:
		return &MarkerAxeMapIconData{}
	case 2985547766:
		return &OffHandItemLabelSubcondition{}
	case 2985980787:
		return &ConstraintLink{}
	case 2987561328:
		return &MapRevealSceneMessage{}
	case 2990104049:
		return &QuestChainStep{}
	case 2990129354:
		return &SummonActorEntry{}
	case 2991662091:
		return &InvLoc{}
	case 2997763859:
		return &InventoryRequestMoveMessage{}
	case 3000146908:
		return &UIDateTimeSettings{}
	case 3001537487:
		return &ShaderPermutation{}
	case 3002009882:
		return &BossDoorInstanceData{}
	case 3002505909:
		return &AnimTreeOverride{}
	case 3009884126:
		return &LevelAreaTagSubcondition{}
	case 3015841888:
		return &BountyDataMessage{}
	case 3015895646:
		return &Type_b3c2ea5e{}
	case 3017070665:
		return &AxialCylinder{}
	case 3017273369:
		return &Type_b3d7f019{}
	case 3017681211:
		return &TriggerEventObjectMoveToLocator{}
	case 3019282580:
		return &Type_b3f69894{}
	case 3019833463:
		return &Type_b3ff0077{}
	case 3020586783:
		return &PlayerSetCameraDefaultsMessage{}
	case 3021124313:
		return &ParagonBoardDefinition{}
	case 3021334823:
		return &PreloadHelper{}
	case 3022074310:
		return &SerialDataInfo{}
	case 3024805895:
		return &PresetNPCComponent{}
	case 3025939855:
		return &TransmogSaveSnapshotMessage{}
	case 3026081009:
		return &UIRechargeTimerStyle{}
	case 3028624595:
		return &Type_b48524d3{}
	case 3029538669:
		return &ItemImageHandleReference{}
	case 3032334607:
		return &SpeedTreeWind8Params{}
	case 3032830054:
		return &Type_b4c55066{}
	case 3043022828:
		return &XboxConsoleAwardDefinition{}
	case 3043783025:
		return &PortedToWaypointMessage{}
	case 3044153190:
		return &Type_b5721766{}
	case 3045089718:
		return &Type_b58061b6{}
	case 3045283369:
		return &DT_SHARED_SERVER_DATA_ID{}
	case 3046368200:
		return &Type_b593e3c8{}
	case 3047785107:
		return &MarkerServerData{}
	case 3048628370:
		return &DebugDrawPrimMessage{}
	case 3052003491:
		return &EmitterSphericalCapData{}
	case 3054048017:
		return &HirelingRequestLearnSkillMessage{}
	case 3063971755:
		return &UIControlHandle{}
	case 3066101868:
		return &Type_b6c1006c{}
	case 3066352125:
		return &CollisionSettings{}
	case 3067360607:
		return &QuestCallback{}
	case 3068002867:
		return &Type_b6de0233{}
	case 3068519038:
		return &PowerConditionIsChannelled{}
	case 3075465310:
		return &QuestKillAllMonstersUpdatedMessage{}
	case 3075785259:
		return &Transmog{}
	case 3076557727:
		return &RareItemNameMessage{}
	case 3076704615:
		return &ChairGizmoData{}
	case 3077127225:
		return &ScriptEventParamPrimaryGroup{}
	case 3077190069:
		return &Type_b76a31b5{}
	case 3078666273:
		return &Type_b780b821{}
	case 3078833356:
		return &LocalEventDataMessage{}
	case 3081830969:
		return &ConfirmDungeonKeyUseMessage{}
	case 3083504987:
		return &DebugTrackedCheckpointRequestMessage{}
	case 3085005858:
		return &ActorDefinition{}
	case 3085544830:
		return &OnUnequipPowerCallback{}
	case 3089331074:
		return &UIControlConsoleInput{}
	case 3090765995:
		return &UIBrowserWindowStyle{}
	case 3094316551:
		return &LightInstanceData{}
	case 3095149691:
		return &CommonPortalGizmoData{}
	case 3096238958:
		return &PreloadACDDataMessage{}
	case 3096396389:
		return &dmMtxMirror{}
	case 3096716593:
		return &ActorUIData{}
	case 3100302512:
		return &OnDodgeBuffCallback{}
	case 3101063468:
		return &GetInventoryLocationMessage{}
	case 3101715391:
		return &AnimTreeNodeChild{}
	case 3101771039:
		return &dmMeshNodeMirror{}
	case 3101980087:
		return &ChestGizmoData{}
	case 3102876383:
		return &Line3D{}
	case 3105203439:
		return &WwiseConversationSoundBank{}
	case 3106010889:
		return &ItemQualitySubcondition{}
	case 3109214426:
		return &KillCountMessage{}
	case 3110834328:
		return &MaterialDefinition{}
	case 3112270847:
		return &BannerIcon{}
	case 3112682290:
		return &BannerTrim{}
	case 3114240327:
		return &Type_b99f8947{}
	case 3115140505:
		return &PowerPhaseBase{}
	case 3115515000:
		return &PowerPhaseLoop{}
	case 3116261682:
		return &ScalarFunctionFormula{}
	case 3117769734:
		return &PowerConditionHasHealth{}
	case 3118959544:
		return &ItemDefinition{}
	case 3120447277:
		return &IRect2D{}
	case 3120951188:
		return &SkillTreeReward{}
	case 3121633597:
		return &DT_OPTIONAL[T]{}
	case 3122866172:
		return &Type_ba2327fc{}
	case 3123636279:
		return &UIDialogDefinition{}
	case 3124492544:
		return &DT_VECTOR2D{}
	case 3124492577:
		return &DT_VECTOR3D{}
	case 3124492610:
		return &DT_VECTOR4D{}
	case 3126228816:
		return &BossEncounterStateMessage{}
	case 3127494188:
		return &MarkerPrefabData{}
	case 3128190323:
		return &TriggerEventCameraChangeDepthOfField{}
	case 3128795864:
		return &Type_ba7da2d8{}
	case 3130001275:
		return &GetInventoryLocationResponseMessage{}
	case 3132676386:
		return &Marker{}
	case 3133380173:
		return &Type_bac3964d{}
	case 3135495650:
		return &DamageTakenBuffCallback{}
	case 3135734846:
		return &QuestSubconditionBase{}
	case 3137045551:
		return &MonsterFamilyArchetype{}
	case 3138400357:
		return &AppearanceLook{}
	case 3141460973:
		return &CarryableReceptacleGizmoData{}
	case 3142967512:
		return &ActorVOData{}
	case 3144084119:
		return &IndexedTriangle{}
	case 3144630075:
		return &Type_bb6f3f3b{}
	case 3144984891:
		return &AnimSetOrderTagEntry{}
	case 3145411138:
		return &ActiveSubzoneModifierSubcondition{}
	case 3145668840:
		return &Type_bb7f18e8{}
	case 3152339101:
		return &DestroySceneMessage{}
	case 3153011302:
		return &Type_bbef2266{}
	case 3153797075:
		return &Currencies{}
	case 3154629575:
		return &Type_bc07d3c7{}
	case 3154991006:
		return &NSlice{}
	case 3156652577:
		return &TriggerEventObjectKeyFrame{}
	case 3158181227:
		return &BuffCallbackBase{}
	case 3161684625:
		return &TransmogMultipleSlotsMessage{}
	case 3162215415:
		return &PreloadSpawnWorldDataMessage{}
	case 3162763801:
		return &QuestFollowerPhaseInfo{}
	case 3169008909:
		return &AnimTreeLeaf{}
	case 3169091771:
		return &AnimTreeNode{}
	case 3174582404:
		return &MaterialEnum{}
	case 3176841574:
		return &QuestChainSubcondition{}
	case 3179414430:
		return &ScriptMessageMapFilter{}
	case 3179509402:
		return &AnimationClothOverride{}
	case 3183760729:
		return &SimpleResponse{}
	case 3185513958:
		return &HirelingInfoUpdateMessage{}
	case 3186488010:
		return &ConversationCannedNode{}
	case 3186581877:
		return &ActorVisualInventoryData{}
	case 3188175834:
		return &CampDiscoveredSubcondition{}
	case 3188626749:
		return &LabelGBID_Table{}
	case 3188635763:
		return &ByteDataMessage{}
	case 3190432702:
		return &CampaignCallbackSubcondition{}
	case 3193003306:
		return &UIStoryboard2Style{}
	case 3195183391:
		return &AttachCarryableToPlayerMessage{}
	case 3196250645:
		return &CriteriaEvent{}
	case 3199231532:
		return &IKWindow{}
	case 3203271662:
		return &RandomAmbientSoundParams{}
	case 3203307102:
		return &ChargeableGizmoData{}
	case 3205258018:
		return &SwitchBehaviorGizmoData{}
	case 3207113136:
		return &Type_bf28a9b0{}
	case 3207444007:
		return &WorldTierChangeMessage{}
	case 3208364871:
		return &Type_bf3bc347{}
	case 3208997398:
		return &Type_bf456a16{}
	case 3212271855:
		return &DT_RGBACOLORVALUE{}
	case 3213398498:
		return &Octree{}
	case 3218190286:
		return &AttributeSpecifier{}
	case 3218202504:
		return &PlayEffectMessage{}
	case 3220679561:
		return &ConversationLineNode{}
	case 3225564917:
		return &CraftingMatCategory_Table{}
	case 3227031434:
		return &PublicGameSubcondition{}
	case 3227193627:
		return &PlayerVariableStringSubcondition{}
	case 3228260825:
		return &SpeedTreeBranchWindLevel{}
	case 3228520127:
		return &Type_c06f4ebf{}
	case 3228758260:
		return &ActorNPCData{}
	case 3229621050:
		return &QuestTagsEntry_Table{}
	case 3230174094:
		return &PlayErrorSoundMessage{}
	case 3231772010:
		return &JoinLANGameMessage{}
	case 3237647452:
		return &Type_c0fa945c{}
	case 3244749660:
		return &DT_VARIABLEARRAY[T]{}
	case 3245746969:
		return &Type_c1762b19{}
	case 3251137226:
		return &Type_c1c86aca{}
	case 3251419010:
		return &NpcArchetypeTemplate{}
	case 3251854358:
		return &ItemPreloadHelper{}
	case 3251898289:
		return &ConversationTreeNode{}
	case 3252537043:
		return &dmMeshDataMirror{}
	case 3256968112:
		return &SpawnGenerator{}
	case 3262450273:
		return &Type_c2750a61{}
	case 3267106107:
		return &SkillTag{}
	case 3268314499:
		return &Type_c2ce8583{}
	case 3268886310:
		return &TriggerEventScreenFade{}
	case 3269576188:
		return &ProjectileImpactEffect{}
	case 3274290366:
		return &FogOfWarImage{}
	case 3278523656:
		return &StoryboardTimePointNode{}
	case 3278877880:
		return &UILayoutList{}
	case 3280532025:
		return &LevelAreaTagsEntry_Table{}
	case 3281363526:
		return &TriggerEventFade{}
	case 3281673073:
		return &TriggerEventNull{}
	case 3289294727:
		return &DotApplicationVisualsMessage{}
	case 3291325597:
		return &BuffExclusiveType{}
	case 3291807044:
		return &TryChatMessage{}
	case 3292961903:
		return &SubzoneDefinition{}
	case 3297622236:
		return &CapsuleProximityData{}
	case 3297641649:
		return &Type_c48e04b1{}
	case 3297747400:
		return &ConversationRandomSelectionNode{}
	case 3300608366:
		return &SubObjectNameInfo{}
	case 3301016084:
		return &GameTestingExecuteClientCheatMessage{}
	case 3303422751:
		return &PowerPetSpawn{}
	case 3304344920:
		return &IntensityParam{}
	case 3305523879:
		return &Type_c5064aa7{}
	case 3308252139:
		return &AIStateDebugSetConditionStateMessage{}
	case 3308326094:
		return &ActivityLinks{}
	case 3309501108:
		return &MarkerPortalGizmoData{}
	case 3311139638:
		return &ScriptEventParamMarkerHandle{}
	case 3311804693:
		return &UIEditStyle{}
	case 3312843337:
		return &MarkerGroupData{}
	case 3313504794:
		return &SeasonSubcondition{}
	case 3314464778:
		return &TownPortalReturnDest{}
	case 3315275999:
		return &PartyVoteReplyMessage{}
	case 3316134124:
		return &WindowPiecesBase{}
	case 3316219731:
		return &PlayerGenderSubcondition{}
	case 3319843167:
		return &PvPBucketLevels{}
	case 3320317005:
		return &PowerEffectOverrides{}
	case 3322368510:
		return &PortalInfo{}
	case 3323553519:
		return &RequiredMessageHeader{}
	case 3326311639:
		return &OnBerserkAppliedCallback{}
	case 3326716277:
		return &TriggerEventPOISkip{}
	case 3328092972:
		return &GlobalMarkerActor{}
	case 3328288509:
		return &Type_c661a6fd{}
	case 3328579492:
		return &ConversationDefinition{}
	case 3328833529:
		return &UIProgressBarStyle{}
	case 3330224177:
		return &PayloadOnHitMessage{}
	case 3332118356:
		return &Type_c69c1754{}
	case 3332566052:
		return &Rect2D{}
	case 3334207401:
		return &ScriptedAchievementEvent{}
	case 3335434764:
		return &NPCServiceData{}
	case 3335832649:
		return &ClassInfoPlayStyle{}
	case 3339108615:
		return &DT_SNO_NAME{}
	case 3342454473:
		return &UICutsceneStyle{}
	case 3343271695:
		return &ActorJitterJoint{}
	case 3343492614:
		return &StackPortionMessage{}
	case 3346038647:
		return &GameTestingCraftItem{}
	case 3346910512:
		return &ACDInventoryPositionMessage{}
	case 3351197648:
		return &CrafterDefinition{}
	case 3352174724:
		return &RenderParams{}
	case 3352290229:
		return &BoneStructure{}
	case 3352680818:
		return &SeasonDefinition{}
	case 3352785496:
		return &PlayerFlagSubcondition{}
	case 3356365191:
		return &TransmogSlotData{}
	case 3357404523:
		return &UIButtonStyle{}
	case 3363235252:
		return &TriggerEventAttachCamera{}
	case 3365671474:
		return &TriggerEventOutroAllObjects{}
	case 3368440460:
		return &EffectGroupPositionZKeyData{}
	case 3369569511:
		return &Type_c8d78ce7{}
	case 3372040510:
		return &Type_c8fd413e{}
	case 3374369047:
		return &StoreProductDefinition{}
	case 3378075250:
		return &AchievementDefinition{}
	case 3381331198:
		return &UISkillTreeStyle{}
	case 3381982601:
		return &UpdateConvAutoAdvanceMessage{}
	case 3382837424:
		return &Type_c9a200b0{}
	case 3384912071:
		return &Sphere{}
	case 3387295447:
		return &QuestReward{}
	case 3391081376:
		return &Type_ca1fcba0{}
	case 3394879799:
		return &RenderPass{}
	case 3398293218:
		return &GizmoTemplate{}
	case 3398933424:
		return &SpawnLocType_Table{}
	case 3399256911:
		return &OnPhaseEnteredPowerCallback{}
	case 3401368825:
		return &Type_cabcc4f9{}
	case 3402153949:
		return &ActorLookOverrideChangedMessage{}
	case 3403053865:
		return &AIStateDebugTestSwitchMessage{}
	case 3405923948:
		return &DungeonList{}
	case 3406869682:
		return &PlayerIsShapeshiftedSubcondition{}
	case 3409009058:
		return &GlobalAVData{}
	case 3409962653:
		return &AlphaBlendFactors{}
	case 3410126194:
		return &Type_cb426572{}
	case 3412473811:
		return &GameTestingInteractNPC{}
	case 3413477057:
		return &NetAttributeKeyValue{}
	case 3414193985:
		return &Type_cb807741{}
	case 3414881765:
		return &ZoneProgressEarnedMessage{}
	case 3417499265:
		return &LightDefinition{}
	case 3421175403:
		return &CheatCampaignStateMessage{}
	case 3422409450:
		return &Type_cbfdd2ea{}
	case 3422446376:
		return &Type_cbfe6328{}
	case 3423838001:
		return &Type_cc139f31{}
	case 3423973094:
		return &OnProjectileImpactPowerCallback{}
	case 3426042948:
		return &Type_cc354444{}
	case 3430954138:
		return &SkillRankChangedMessage{}
	case 3431030737:
		return &PortalSpecifierMessage{}
	case 3431747696:
		return &ScriptedAchievementEvent_Table{}
	case 3433075868:
		return &CriteriaDefinition{}
	case 3434678791:
		return &NPCComponentSetPreloadHelper{}
	case 3436800625:
		return &Type_ccd96a71{}
	case 3438967867:
		return &ConversationScopeNode{}
	case 3440513314:
		return &LightInfluenceSettings{}
	case 3442930196:
		return &Type_cd36f214{}
	case 3443761618:
		return &SoundDefinition{}
	case 3445310279:
		return &Type_cd5b4347{}
	case 3446996197:
		return &Type_cd74fce5{}
	case 3447305554:
		return &GameTestingPurchaseSkill{}
	case 3453107854:
		return &ScriptEventParamSubzone{}
	case 3457286220:
		return &PhysicsDefinition{}
	case 3457307456:
		return &CharacterPreset{}
	case 3457543411:
		return &AffixMessage{}
	case 3460647206:
		return &GlobalWaypointData{}
	case 3460728073:
		return &TriggerEventOutroEffectGroup{}
	case 3464528123:
		return &MarkerActorGizmoData{}
	case 3464679862:
		return &Type_ce82d1b6{}
	case 3468767588:
		return &Type_cec13164{}
	case 3469121019:
		return &ParticleKeyFrames{}
	case 3469228022:
		return &Type_cec837f6{}
	case 3470756225:
		return &PVPGameSubcondition{}
	case 3471665578:
		return &DungeonSpawningPoolEntry_Table{}
	case 3477503045:
		return &AttributeSubcondition{}
	case 3480546724:
		return &NpcLookTagEntry{}
	case 3481819086:
		return &ScriptEventParamActorGroup{}
	case 3485436892:
		return &Type_cfbf8bdc{}
	case 3485974543:
		return &Type_cfc7c00f{}
	case 3489737491:
		return &TriggerEventCameraKeyFrame{}
	case 3493213809:
		return &DT_TAGMAP[T]{}
	case 3493835382:
		return &TriggerEventObjectTurnToOriginalFacing{}
	case 3494179431:
		return &AnyLogicSubcondition{}
	case 3494624766:
		return &ShaderMapDefinition{}
	case 3495291529:
		return &AspectDefinition{}
	case 3496006087:
		return &DemonScrollReward{}
	case 3496443013:
		return &SavedWorldCameraState{}
	case 3500735359:
		return &GameTestingInvitePlayersToPartyMessage{}
	case 3503113420:
		return &TriggerEventPlayMovie{}
	case 3503394193:
		return &HeroStatusDataMessage{}
	case 3507066932:
		return &EnchantAffixMessage{}
	case 3507772913:
		return &TriggerEventChangeLook{}
	case 3509688990:
		return &GlobalStore{}
	case 3512347645:
		return &wWiseSoundBankDefinition{}
	case 3513188739:
		return &ItemSpecifierData{}
	case 3514741062:
		return &SubObjectAppearanceVariant{}
	case 3520446032:
		return &GameSetupMessage{}
	case 3524572566:
		return &DungeonStatesEntry{}
	case 3529217166:
		return &Type_d25b948e{}
	case 3530669903:
		return &SimpleMessage{}
	case 3531049129:
		return &ClanBankWithdrawMessage{}
	case 3531482778:
		return &GlobalNightmareDungeonData{}
	case 3531501022:
		return &StoryboardTrack{}
	case 3533883397:
		return &Type_d2a2c805{}
	case 3533966913:
		return &OnAssistTriggeredBuffCallback{}
	case 3539111973:
		return &SchedulerGlobalUniqueCategory{}
	case 3540363826:
		return &ActorCustomizationHelper{}
	case 3542510007:
		return &RequestBuffCancelMessage{}
	case 3543556157:
		return &CountdownStartedMessage{}
	case 3544827702:
		return &OnKillTriggeredBuffCallback{}
	case 3549813337:
		return &EssencePowerTierEntry{}
	case 3549816935:
		return &ItemDungeonKeyDataMessage{}
	case 3550172668:
		return &ScriptEventParamTimeInterval{}
	case 3552797567:
		return &Type_d3c3637f{}
	case 3553323383:
		return &OnInitializeAttackBuffCallback{}
	case 3555289754:
		return &LevelAreaDefinition{}
	case 3557025358:
		return &Type_d403e64e{}
	case 3558947995:
		return &Type_d4213c9b{}
	case 3559084288:
		return &Type_d4235100{}
	case 3560147884:
		return &ACDTranslateProjectileMessage{}
	case 3561077891:
		return &PlayerTitleResponseMessage{}
	case 3564584333:
		return &PowerOverride{}
	case 3568752688:
		return &PlayerForceShapeshiftMessage{}
	case 3573101747:
		return &TriggerEventFadeGroup{}
	case 3577501348:
		return &HelpCode{}
	case 3579684057:
		return &PlayConvLineMessage{}
	case 3581869265:
		return &GlobalRoadData{}
	case 3582883756:
		return &NecroArmyUnitTypeData{}
	case 3587671698:
		return &PlayHitJitterMessage{}
	case 3591048543:
		return &OnDoDamageBuffCallback{}
	case 3594392318:
		return &GlobalEmotes{}
	case 3595026749:
		return &UIControlGroupStyle{}
	case 3595429894:
		return &EffectGroupRotationRollKeyData{}
	case 3597846649:
		return &HiddenCacheEntry_Table{}
	case 3600465269:
		return &PVPShrineEventParticipatingMessage{}
	case 3600576406:
		return &ValidComponents{}
	case 3602917158:
		return &TriggerEventFootstepTrail{}
	case 3603241256:
		return &WwiseExternalSourceSoundBank{}
	case 3604059869:
		return &PowerFormulaTableEntry{}
	case 3604657485:
		return &Type_d6dab54d{}
	case 3608616152:
		return &EffectGroupCameraTrack{}
	case 3610736854:
		return &WorldTierData{}
	case 3611725540:
		return &TriggerEventSetTimeOfDay{}
	case 3614745956:
		return &Type_d774a564{}
	case 3615195411:
		return &ParagonNodeMessage{}
	case 3620255269:
		return &ChatMessage{}
	case 3622735654:
		return &Type_d7ee8f26{}
	case 3622949179:
		return &EmblemDefinition{}
	case 3627847308:
		return &PlayerClassDefinition{}
	case 3631199318:
		return &ForcedPrefetchEntry{}
	case 3631735738:
		return &TextureDefinition{}
	case 3632414755:
		return &GroupTransferReplyMessage{}
	case 3633663932:
		return &PlayerTownPortalReturnDestMessage{}
	case 3635012279:
		return &UIStyleResource{}
	case 3636736964:
		return &InventoryRequestSortMessage{}
	case 3639515093:
		return &HardpointInfo{}
	case 3639617719:
		return &HardpointLink{}
	case 3639680842:
		return &HardpointName{}
	case 3640855436:
		return &GlobalBountyData{}
	case 3643369700:
		return &InventoryImages{}
	case 3643941448:
		return &Type_d9322248{}
	case 3644249578:
		return &ACDWorldPositionMessage{}
	case 3646617580:
		return &GeoChunkVertexBuffer{}
	case 3647138944:
		return &FontDefinition{}
	case 3648032783:
		return &ACDTranslateDetPathSinMessage{}
	case 3648845914:
		return &Type_d97cf85a{}
	case 3650222889:
		return &MovieDefinition{}
	case 3652303092:
		return &DoorGizmoData{}
	case 3656025176:
		return &PowerConditionDamageIsOverpower{}
	case 3658540132:
		return &BuffExclusiveType_Table{}
	case 3659646211:
		return &Type_da21c503{}
	case 3660521401:
		return &SubzoneTypeSubcondition{}
	case 3661168133:
		return &dmClothPlaneDefMirror{}
	case 3666486037:
		return &QuestFollowerSpawnBehavior{}
	case 3672216444:
		return &StringListDefinition{}
	case 3674862323:
		return &QuestTagsEntry{}
	case 3677631049:
		return &PlayerSkillRankSubcondition{}
	case 3678340364:
		return &PowerPhaseBranch{}
	case 3682172275:
		return &EnterWorldPlayer{}
	case 3682266269:
		return &MonsterAwarenessInfo{}
	case 3683293384:
		return &EffectGroupActorVariant{}
	case 3687515379:
		return &Type_dbcb04f3{}
	case 3688169642:
		return &ActorServerData{}
	case 3693220108:
		return &BoneKeysInfo{}
	case 3696177905:
		return &MapPingMessage{}
	case 3697422160:
		return &HardpointOffset{}
	case 3697515930:
		return &PortToPlayerMessage{}
	case 3699670443:
		return &EffectGroupPositionYKeyData{}
	case 3700819239:
		return &Type_dc960527{}
	case 3701792450:
		return &IntensitySubParam{}
	case 3704120622:
		return &ParagonGlyphAffixAttribute{}
	case 3705522846:
		return &Type_dcddca9e{}
	case 3707753598:
		return &TriggerEventObjectMoveToObject{}
	case 3708548105:
		return &TraversalSurfaceOptions{}
	case 3709235023:
		return &SNODataMessage{}
	case 3710538503:
		return &SlopeBone{}
	case 3712531304:
		return &KeyedDungeonTierEntry{}
	case 3716696767:
		return &UIPieChartStyle{}
	case 3718463390:
		return &GameErrorData{}
	case 3722141311:
		return &PVPObeliskGizmoData{}
	case 3735052004:
		return &ScrollbarElementImages{}
	case 3735262368:
		return &AudioContextDefinition{}
	case 3736356571:
		return &ScriptEventDescription{}
	case 3741213674:
		return &ItemSalvageLevel{}
	case 3741275878:
		return &GlobalMarkerActorData{}
	case 3742548360:
		return &ConditionWrapper{}
	case 3742728940:
		return &RogueSpecializationGlobalData{}
	case 3748836680:
		return &WorldSyncedData{}
	case 3748928721:
		return &Subcondition{}
	case 3750701941:
		return &Type_df8f2b75{}
	case 3757510275:
		return &Type_dff70e83{}
	case 3762407828:
		return &BuffSubcondition{}
	case 3763372188:
		return &AnimContactFrame{}
	case 3763808751:
		return &EmitterDataBase{}
	case 3769072179:
		return &ComplexEffectAddMessage{}
	case 3776831931:
		return &SummonedActorsPreloadHelper{}
	case 3777118895:
		return &Type_e12242af{}
	case 3777567568:
		return &Type_e1291b50{}
	case 3782874409:
		return &EffectGroupMaterialValueKeyData{}
	case 3784737903:
		return &PowerConditionBase{}
	case 3785434353:
		return &Type_e1a124f1{}
	case 3786148276:
		return &Type_e1ac09b4{}
	case 3787314167:
		return &Type_e1bdd3f7{}
	case 3790868530:
		return &Type_e1f41032{}
	case 3795316385:
		return &AttributesChangedBuffCallback{}
	case 3796098960:
		return &Type_e243df90{}
	case 3796435398:
		return &PowerPhaseInitialization{}
	case 3797928927:
		return &WallInstanceData{}
	case 3798222270:
		return &QuestChainDefinition{}
	case 3799735114:
		return &GlobalRoadSegment{}
	case 3799976182:
		return &AnimTreeBlendCase{}
	case 3801316792:
		return &Type_e2937db8{}
	case 3802158917:
		return &SkillTreeNodeConnection{}
	case 3805829137:
		return &SoundPlayHistory{}
	case 3810234018:
		return &TriggerEventEnableRagdoll{}
	case 3814410313:
		return &SkillTreeNodePersonalConnection{}
	case 3817037376:
		return &ActorEffectData{}
	case 3818149954:
		return &FloatingNumberMessage{}
	case 3820930965:
		return &Type_e3bec795{}
	case 3822890031:
		return &BlizzconCVarsMessage{}
	case 3824324374:
		return &Type_e3f28f16{}
	case 3824510090:
		return &ProximityDataBase{}
	case 3825953289:
		return &ItemRequirementDefinition{}
	case 3826475810:
		return &AIStateDebugSetAllEntryStatesMessage{}
	case 3831299673:
		return &ConstraintParameters{}
	case 3833068973:
		return &WorldSyncedDataMessage{}
	case 3833381323:
		return &ScriptEventParamTrackedReward{}
	case 3833869781:
		return &Type_e48435d5{}
	case 3835832585:
		return &DRLGWorldDebugInfoMessage{}
	case 3836204633:
		return &WallDefinition{}
	case 3836325597:
		return &BountyIcons{}
	case 3837898558:
		return &Type_e4c1af3e{}
	case 3844612145:
		return &StringTableEntry{}
	case 3845014595:
		return &PlayerQuestHistoryEntry{}
	case 3846829457:
		return &DT_CSTRING[T]{}
	case 3848460434:
		return &SpeedTree8RippleGroup{}
	case 3854564369:
		return &MailSentResponseMessage{}
	case 3856437459:
		return &CustomizationData{}
	case 3856914134:
		return &dmFloat4Mirror{}
	case 3856916112:
		return &BountyZones{}
	case 3859902386:
		return &SurfaceDefinition{}
	case 3860176388:
		return &UIActorTagStyle{}
	case 3861122336:
		return &DynamicGameParameter{}
	case 3862192725:
		return &SpawnerGizmoInstanceData{}
	case 3863771036:
		return &AttributeFormulaEntry{}
	case 3864020909:
		return &DT_FLOAT{}
	case 3864023881:
		return &QuestChestGizmoData{}
	case 3865659177:
		return &CollisionHeightField{}
	case 3866881285:
		return &TexAnimTranslation{}
	case 3867655596:
		return &DT_INT64{}
	case 3870434112:
		return &Type_e6b22340{}
	case 3872544350:
		return &MarkerFolder{}
	case 3874588324:
		return &PowerFormulaTableEntry_Table{}
	case 3874798551:
		return &DesignerVariable{}
	case 3877855748:
		return &DT_RANGE[T]{}
	case 3878713911:
		return &AttributeFormulaRange{}
	case 3878735867:
		return &Type_e730cffb{}
	case 3879849394:
		return &dmInputTriangleMirror{}
	case 3882395607:
		return &PowerConditionIsActorBerserk{}
	case 3884811641:
		return &BoneKeyInfo{}
	case 3885149667:
		return &CampaignChain{}
	case 3889109893:
		return &GameTestingSkillSamplingStartMessage{}
	case 3889375613:
		return &OnDismountCallback{}
	case 3890074365:
		return &TriggerEventCameraFollowSpline{}
	case 3890408608:
		return &MaterialTexture{}
	case 3890926379:
		return &Type_e7ead32b{}
	case 3891466367:
		return &Animation2DDefinition{}
	case 3892462007:
		return &ShaderOverride{}
	case 3894303202:
		return &dmPolytopeDataMirror{}
	case 3895665662:
		return &DRLGEventDebugInfo{}
	case 3896035154:
		return &OnProjectileCreateBuffCallback{}
	case 3897348097:
		return &Type_e84cd001{}
	case 3897752931:
		return &EffectGroupKey{}
	case 3898049428:
		return &Type_e8578394{}
	case 3898498167:
		return &QuestRewardChoicePickedMessage{}
	case 3900142886:
		return &UIMinimapFoWStyle{}
	case 3900534977:
		return &SpawnLocOverrideData{}
	case 3905611800:
		return &TriggerEventSetWeaponSheathedDuration{}
	case 3907208665:
		return &ConversationTypeSounds{}
	case 3907910327:
		return &MarkerDataBase{}
	case 3908508603:
		return &UITreeFolderStyle{}
	case 3909729180:
		return &EndOfTickMessage{}
	case 3910588210:
		return &CloneBeingDeletedMessage{}
	case 3911232674:
		return &QuitGameMessage{}
	case 3911333260:
		return &Type_e922358c{}
	case 3913967859:
		return &EffectGroupActorMovementTrack{}
	case 3914002741:
		return &BannerColor{}
	case 3914528908:
		return &HairColorDefinition{}
	case 3917270559:
		return &Type_e97cce1f{}
	case 3917788984:
		return &PowerConditionHasResource{}
	case 3923895581:
		return &ActorShaderMapOverrideChangedMessage{}
	case 3925842543:
		return &Type_e9ff9a6f{}
	case 3928304546:
		return &DefaultTextureInfo{}
	case 3932958987:
		return &TriggerEventObjectFollowSpline{}
	case 3934284334:
		return &MarkerHandle{}
	case 3934769268:
		return &ParametricInfo{}
	case 3934834412:
		return &RestrictedComponent{}
	case 3938200363:
		return &dmSubEdgeMirror{}
	case 3938253109:
		return &DPathSinData{}
	case 3938938339:
		return &QuestSubcondition{}
	case 3941658074:
		return &SalvageResultsMessage{}
	case 3941725086:
		return &ServerLogMessage{}
	case 3945992458:
		return &GenericBlobRequestMessage{}
	case 3947422249:
		return &Type_eb48e229{}
	case 3952011826:
		return &Type_eb8eea32{}
	case 3952663046:
		return &MaterialScalarValuesUsed{}
	case 3955716320:
		return &bcQuat{}
	case 3955895500:
		return &PowerConditionIsFortified{}
	case 3956651678:
		return &ACDPickupFailedMessage{}
	case 3964094914:
		return &DungeonStateSubcondition{}
	case 3965580581:
		return &AnimFacingWindow{}
	case 3967226522:
		return &GlobalDefinition{}
	case 3968129939:
		return &EventSubcondition{}
	case 3969718545:
		return &Type_ec9d1911{}
	case 3974107604:
		return &GeoChunk{}
	case 3976143237:
		return &EffectGroupRotationPitchKeyData{}
	case 3976816482:
		return &MarkerBoneTransform{}
	case 3981645687:
		return &GlobalHealerEvents{}
	case 3981727516:
		return &NPCComponentRestrictionEntry{}
	case 3982191897:
		return &OnShapeshiftCallback{}
	case 3982467417:
		return &LookVariantMaterialOverride{}
	case 3983648445:
		return &GlobalPortalData{}
	case 3984646638:
		return &InventoryStackTransferMessage{}
	case 3986156917:
		return &ShakeDefinition{}
	case 3986397825:
		return &MarkerTextLabelData{}
	case 3987096416:
		return &Type_eda64360{}
	case 3987413862:
		return &BannerTextileTexture{}
	case 3987819995:
		return &HeadstoneGizmoData{}
	case 3988626058:
		return &PrefabData{}
	case 3990454785:
		return &MaterialEnumValue{}
	case 3992025323:
		return &Type_edf178eb{}
	case 3997453985:
		return &Type_ee444ea1{}
	case 3998907722:
		return &Type_ee5a7d4a{}
	case 4000554560:
		return &SkillTagStruct{}
	case 4006089948:
		return &TriggerEventRestoreTimeOfDay{}
	case 4010719183:
		return &TempCollisionMesh{}
	case 4012831658:
		return &ExplosionDefinition{}
	case 4014476633:
		return &GameTestingProfilingStarted{}
	case 4014883557:
		return &MarkerLevelAreaVolumeData{}
	case 4019404115:
		return &Type_ef933d53{}
	case 4022121664:
		return &VectorFieldDefinition{}
	case 4027789355:
		return &Type_f013302b{}
	case 4030900426:
		return &EffectGroupPositionXKeyData{}
	case 4031654575:
		return &AttachActorToActorMessage{}
	case 4031705439:
		return &ActorBrainData{}
	case 4037362027:
		return &SavePointPortalGizmoData{}
	case 4037984604:
		return &EffectItem{}
	case 4040942623:
		return &AppearanceMaterial{}
	case 4041606172:
		return &ScriptEventParamPrefabScopedActorGroup{}
	case 4042669885:
		return &Type_f0f63f3d{}
	case 4044315890:
		return &HiddenCacheEntry{}
	case 4047712805:
		return &ScriptEventParamLinkedMarkerInGroup{}
	case 4057854301:
		return &Type_f1ddf15d{}
	case 4059665222:
		return &GameSyncedDebugDataMessage{}
	case 4060009143:
		return &dmFrameMirror{}
	case 4063447694:
		return &LookAtBone{}
	case 4063504516:
		return &LookAtData{}
	case 4067534784:
		return &NecroArmySpecMessage{}
	case 4068810465:
		return &OnRetreatCallback{}
	case 4068844708:
		return &GlobalCharacterPresets{}
	case 4071223241:
		return &StopConvLineMessage{}
	case 4074791098:
		return &Type_f2e060ba{}
	case 4079759321:
		return &ActorDeathData{}
	case 4083908541:
		return &PowerConditionParagonNodeIsPurchased{}
	case 4088142735:
		return &TriggerEventPlayConversationLine{}
	case 4088798277:
		return &ACDTranslateDetPathMessage{}
	case 4088842039:
		return &EndConversationMessage{}
	case 4092961056:
		return &Type_f3f5a120{}
	case 4093179991:
		return &MarkerSetDefinition{}
	case 4100996537:
		return &PrefabCustomizedMarker{}
	case 4101156222:
		return &EffectGroupMaterialTrack{}
	case 4102386549:
		return &PlayerWarpedMessage{}
	case 4103184625:
		return &TryConsoleCommand{}
	case 4104033586:
		return &Type_f49e9532{}
	case 4104641245:
		return &GlobalQuestData{}
	case 4106185116:
		return &BreakableContainerGizmoData{}
	case 4107356838:
		return &TriggerEventOutroObject{}
	case 4111826321:
		return &PRSTransform{}
	case 4113664708:
		return &OnFirstHitPowerCallback{}
	case 4115604446:
		return &HairStyleDefinition{}
	case 4117978883:
		return &GroupRegionEntry{}
	case 4118521851:
		return &OnEquipPowerCallback{}
	case 4119790019:
		return &MaterialVectorValuesUsed{}
	case 4120944920:
		return &ResolvedPortalDestination{}
	case 4121622049:
		return &SubObject{}
	case 4121727419:
		return &Type_f5ac91bb{}
	case 4122208010:
		return &WwiseGameParameter{}
	case 4122576194:
		return &SurveyTypeEntry{}
	case 4123321325:
		return &Type_f5c4e3ed{}
	case 4123887595:
		return &Type_f5cd87eb{}
	case 4128871178:
		return &SplineEasingWeight{}
	case 4129646214:
		return &TrackedCheckpointGizmoData{}
	case 4133241699:
		return &MarkerSpawnLocData{}
	case 4134809062:
		return &MsgTriggeredEvent{}
	case 4134908163:
		return &UIProgressBarBase{}
	case 4135518729:
		return &LevelScalingDefinition_Table{}
	case 4135555133:
		return &Type_f67f903d{}
	case 4136813248:
		return &PowerConditionHasSkillRequirement{}
	case 4137156027:
		return &AccountProfilePrivacyFlagMessage{}
	case 4138174023:
		return &SetBonusTier{}
	case 4138637758:
		return &EffectGroupRotationYawKeyData{}
	case 4138865712:
		return &PowerBuffCrowdControl{}
	case 4143117588:
		return &WeaponExpertiseRankReward{}
	case 4148177091:
		return &NPCComponentInstanceData{}
	case 4148712533:
		return &Type_f7485455{}
	case 4155240392:
		return &Type_f7abefc8{}
	case 4156757805:
		return &Type_f7c3172d{}
	case 4158233291:
		return &BossDoorGizmoData{}
	case 4159814500:
		return &MountSetMessage{}
	case 4160730271:
		return &PowerConditionIsMonsterFamilyArchetype{}
	case 4164648442:
		return &GlobalHealthPotionData{}
	case 4166874378:
		return &Type_f85d750a{}
	case 4167247368:
		return &CompInfluence{}
	case 4171238087:
		return &TriggerEventOutroServicesDisable{}
	case 4171504262:
		return &ACDTranslateSnappedMessage{}
	case 4173985261:
		return &TriggerEventRangedDuration{}
	case 4176299945:
		return &GlobalUIData{}
	case 4180576668:
		return &CompVertInfluences{}
	case 4180938800:
		return &DebugActorTooltipMessage{}
	case 4188868250:
		return &AnimSetDefinition{}
	case 4198139340:
		return &RevealWorldMessage{}
	case 4199705024:
		return &EffectGroupStandardTrack{}
	case 4201850638:
		return &UIDrawHookStyle{}
	case 4203656352:
		return &Type_fa8eb4a0{}
	case 4204258745:
		return &Type_fa97e5b9{}
	case 4206682020:
		return &ACDCollFlagsMessage{}
	case 4206722984:
		return &PopGroupHandle{}
	case 4206949144:
		return &ConnectorProperties{}
	case 4208099680:
		return &MainHandItemLabelSubcondition{}
	case 4211607403:
		return &RequestPvPInfo{}
	case 4211930836:
		return &TriggerGizmoData{}
	case 4212868281:
		return &Type_fb1b44b9{}
	case 4213128525:
		return &TransmogSlot{}
	case 4214119801:
		return &LogoutTickTimeMessage{}
	case 4215210960:
		return &ImageFileID{}
	case 4219334015:
		return &EffectGroupScaleZKeyData{}
	case 4219842648:
		return &MountSelectMessage{}
	case 4221588828:
		return &dmPlaneMirror{}
	case 4223096186:
		return &Type_fbb7557a{}
	case 4225700928:
		return &Type_fbdf1440{}
	case 4226459381:
		return &EmitterSubObjectData{}
	case 4226610788:
		return &Type_fbecf664{}
	case 4227218246:
		return &GlobalMarkerActorHiddenCacheData{}
	case 4228472600:
		return &TranslationKey{}
	case 4229906289:
		return &IconScale{}
	case 4232128366:
		return &IconAnchorPoint{}
	case 4234742813:
		return &DungeonStatesEntry_Table{}
	case 4236426675:
		return &MailReadResponseMessage{}
	case 4239082984:
		return &NecroArmySpecUpgradeMessage{}
	case 4239495055:
		return &Type_fcb18f8f{}
	case 4243792680:
		return &ExternalPlatform{}
	case 4244287280:
		return &SkillKitDefinition{}
	case 4245213777:
		return &MarkingColorDefinition{}
	case 4246870993:
		return &BountyTierIcons{}
	case 4248156668:
		return &ItemPVPEarDataMessage{}
	case 4248268532:
		return &MarkerHeightFieldSection{}
	case 4249306872:
		return &VertexCountSettings{}
	case 4252885141:
		return &PlayerPotionDosesSubcondition{}
	case 4253567699:
		return &Type_fd884ad3{}
	case 4257156132:
		return &PrefetchMarkerSetMessage{}
	case 4260534408:
		return &SurfaceGridPrimitive{}
	case 4263001440:
		return &Type_fe183d60{}
	case 4263299288:
		return &DynamicAudioState{}
	case 4263594309:
		return &Type_fe214945{}
	case 4263957835:
		return &OnPhaseExitedPowerCallback{}
	case 4265117700:
		return &LabelRuleSet{}
	case 4265474781:
		return &AIStateDebugSetLoopMessage{}
	case 4267045533:
		return &SetTetherInfoForPlayerMessage{}
	case 4271208238:
		return &TrackPieces{}
	case 4272741198:
		return &SkillExtraAndArsenalEntry{}
	case 4273329489:
		return &Type_feb5d551{}
	case 4282423481:
		return &Type_ff4098b9{}
	case 4286083682:
		return &DeathTemplate{}
	case 4286658627:
		return &CriteriaStartEvent{}
	case 4287040182:
		return &SubzoneModifierTagsEntry{}
	case 4294183896:
		return &PowerConditionIsPlayerActiveSkill{}
	default:
		return nil
	}
}

type OBB struct {
	Transform PRTransform
	WvExt     DT_VECTOR3D
}

func (t *OBB) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Transform, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.WvExt, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+40, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *OBB) Walk(cb WalkCallback) {
	cb.Do("Transform", &t.Transform)
	cb.Do("WvExt", &t.WvExt)
}

type GBIDBlocklistDataChanged struct {
	THeader                    RequiredMessageHeader
	Unk_25d9f91                DT_FIXEDARRAY[*GBHandle]
	ENetAttributeKeyValueIndex DT_FIXEDARRAY[*DT_UINT]
}

func (t *GBIDBlocklistDataChanged) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_25d9f91, r, &Options{
		ArrayLength: 64,
		Flags:       8,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+532, &t.ENetAttributeKeyValueIndex, r, &Options{
		ArrayLength: 64,
		Flags:       8,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+792, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *GBIDBlocklistDataChanged) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("Unk_25d9f91", &t.Unk_25d9f91)
	cb.Do("ENetAttributeKeyValueIndex", &t.ENetAttributeKeyValueIndex)
}

type AABB struct {
	Wp    DT_VECTOR3D
	WvExt DT_VECTOR3D
}

func (t *AABB) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Wp, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.WvExt, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *AABB) Walk(cb WalkCallback) {
	cb.Do("Wp", &t.Wp)
	cb.Do("WvExt", &t.WvExt)
}

type Stat struct{}

func (t *Stat) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if _, err := r.Seek(p+1, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Stat) Walk(cb WalkCallback) {}

type PowerLimitedActorType struct {
	THeader         GBIDHeader
	DwMaxActorCount DT_UINT
}

func (t *PowerLimitedActorType) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+260, &t.DwMaxActorCount, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+264, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PowerLimitedActorType) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("DwMaxActorCount", &t.DwMaxActorCount)
}

type SoundTableDefinition struct {
	EType            DT_ENUM
	TEntries         DT_VARIABLEARRAY[*SoundTableEntry]
	SnoFallbackTable DT_SNO
	TDefaultEntry    SoundTableEntry
	PtPostprocessed  DT_INT64
}

func (t *SoundTableDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.EType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TEntries, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.SnoFallbackTable, r, &Options{
		Flags: 1,
		Group: 79,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.TDefaultEntry, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.PtPostprocessed, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if _, err := r.Seek(p+72, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *SoundTableDefinition) Walk(cb WalkCallback) {
	cb.Do("EType", &t.EType)
	cb.Do("TEntries", &t.TEntries)
	cb.Do("SnoFallbackTable", &t.SnoFallbackTable)
	cb.Do("TDefaultEntry", &t.TDefaultEntry)
	cb.Do("PtPostprocessed", &t.PtPostprocessed)
}

type SavedCameraState struct {
	Transform            PRTransform
	WvCameraOffsetVector DT_VECTOR3D
	WvLookAtOffsetVector DT_VECTOR3D
	WvLastPOI            DT_VECTOR3D
}

func (t *SavedCameraState) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Transform, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.WvCameraOffsetVector, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.WvLookAtOffsetVector, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.WvLastPOI, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+64, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *SavedCameraState) Walk(cb WalkCallback) {
	cb.Do("Transform", &t.Transform)
	cb.Do("WvCameraOffsetVector", &t.WvCameraOffsetVector)
	cb.Do("WvLookAtOffsetVector", &t.WvLookAtOffsetVector)
	cb.Do("WvLastPOI", &t.WvLastPOI)
}

type ShaderInputLayout struct {
	EVBFormat DT_ENUM
}

func (t *ShaderInputLayout) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.EVBFormat, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+4, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ShaderInputLayout) Walk(cb WalkCallback) {
	cb.Do("EVBFormat", &t.EVBFormat)
}

type PowerConditionIsVulnerable struct {
	// Inherits PowerConditionBase
	// Inherits PolymorphicBase
	DwType   DT_UINT
	BInverse DT_INT
	DwPad    DT_UINT
	ESubject DT_ENUM
}

func (t *PowerConditionIsVulnerable) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BInverse, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ESubject, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PowerConditionIsVulnerable) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("BInverse", &t.BInverse)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("ESubject", &t.ESubject)
}

type PlayerParagonPointMessage struct {
	THeader               RequiredMessageHeader
	DwPlayerGameAccountId DT_UINT
	NNewPoints            DT_INT
}

func (t *PlayerParagonPointMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.DwPlayerGameAccountId, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.NNewPoints, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PlayerParagonPointMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("DwPlayerGameAccountId", &t.DwPlayerGameAccountId)
	cb.Do("NNewPoints", &t.NNewPoints)
}

type AttributesSetValuesMessage struct {
	THeader   RequiredMessageHeader
	Ann       DT_ACD_NETWORK_NAME
	AtKeyVals DT_FIXEDARRAY[*NetAttributeKeyValue]
}

func (t *AttributesSetValuesMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Ann, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.AtKeyVals, r, &Options{
		ArrayLength: 15,
		Flags:       8,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+268, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *AttributesSetValuesMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("Ann", &t.Ann)
	cb.Do("AtKeyVals", &t.AtKeyVals)
}

type Type_14c5741 struct {
	SzName     DT_CSTRING[*DT_BYTE]
	SzToolTip  DT_CSTRING[*DT_BYTE]
	ArAnimSets DT_VARIABLEARRAY[*DT_SNO]
}

func (t *Type_14c5741) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SzName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SzToolTip, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.ArAnimSets, r, &Options{
		Flags: 1,
		Group: 8,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_14c5741) Walk(cb WalkCallback) {
	cb.Do("SzName", &t.SzName)
	cb.Do("SzToolTip", &t.SzToolTip)
	cb.Do("ArAnimSets", &t.ArAnimSets)
}

type TexFrame struct {
	HImageHandle DT_UINT
	FlU0         DT_FLOAT
	FlV0         DT_FLOAT
	FlU1         DT_FLOAT
	FlV1         DT_FLOAT
	FlTrimU0     DT_FLOAT
	FlTrimV0     DT_FLOAT
	FlTrimU1     DT_FLOAT
	FlTrimV1     DT_FLOAT
}

func (t *TexFrame) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.HImageHandle, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.FlU0, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.FlV0, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.FlU1, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.FlV1, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.FlTrimU0, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.FlTrimV0, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.FlTrimU1, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.FlTrimV1, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+36, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TexFrame) Walk(cb WalkCallback) {
	cb.Do("HImageHandle", &t.HImageHandle)
	cb.Do("FlU0", &t.FlU0)
	cb.Do("FlV0", &t.FlV0)
	cb.Do("FlU1", &t.FlU1)
	cb.Do("FlV1", &t.FlV1)
	cb.Do("FlTrimU0", &t.FlTrimU0)
	cb.Do("FlTrimV0", &t.FlTrimV0)
	cb.Do("FlTrimU1", &t.FlTrimU1)
	cb.Do("FlTrimV1", &t.FlTrimV1)
}

type Type_19b25a8 struct {
	// Inherits Type_cbfce3e
	// Inherits MarkerSplineData
	// Inherits MarkerDataBase
	// Inherits PolymorphicBase
	DwType             DT_UINT
	EInterpolationMode DT_ENUM
	Unk_a3f1699        DT_FLOAT
	Unk_4a4ab0e        DT_VARIABLEARRAY[*Type_cc5838a]
	FlTotalLength      DT_FLOAT
	EType              DT_ENUM
	ERoadType          DT_ENUM
	DwPad              DT_UINT
}

func (t *Type_19b25a8) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.EInterpolationMode, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.Unk_a3f1699, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_4a4ab0e, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.FlTotalLength, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.EType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.ERoadType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+56, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_19b25a8) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("EInterpolationMode", &t.EInterpolationMode)
	cb.Do("Unk_a3f1699", &t.Unk_a3f1699)
	cb.Do("Unk_4a4ab0e", &t.Unk_4a4ab0e)
	cb.Do("FlTotalLength", &t.FlTotalLength)
	cb.Do("EType", &t.EType)
	cb.Do("ERoadType", &t.ERoadType)
	cb.Do("DwPad", &t.DwPad)
}

type WwiseSwitchValue struct {
	TGroup WwiseName
	TValue WwiseName
}

func (t *WwiseSwitchValue) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.TGroup, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.TValue, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *WwiseSwitchValue) Walk(cb WalkCallback) {
	cb.Do("TGroup", &t.TGroup)
	cb.Do("TValue", &t.TValue)
}

type AssignSkillMessage struct {
	THeader               RequiredMessageHeader
	SnoPower              DT_SNO
	NSlot                 DT_INT
	NEnchantSlot          DT_INT
	BIsEnchant            DT_INT
	BIsAutoAssign         DT_INT
	DwPlayerGameAccountId DT_UINT
}

func (t *AssignSkillMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoPower, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.NSlot, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.NEnchantSlot, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.BIsEnchant, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.BIsAutoAssign, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.DwPlayerGameAccountId, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+40, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *AssignSkillMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("SnoPower", &t.SnoPower)
	cb.Do("NSlot", &t.NSlot)
	cb.Do("NEnchantSlot", &t.NEnchantSlot)
	cb.Do("BIsEnchant", &t.BIsEnchant)
	cb.Do("BIsAutoAssign", &t.BIsAutoAssign)
	cb.Do("DwPlayerGameAccountId", &t.DwPlayerGameAccountId)
}

type PetType struct {
	THeader             GBIDHeader
	Unk_887ea65         DT_ENUM
	Unk_17d5315         DT_INT
	Unk_a9f95f3         DT_INT
	BHasPlayerIndicator DT_INT
}

func (t *PetType) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+260, &t.Unk_887ea65, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+264, &t.Unk_17d5315, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+268, &t.Unk_a9f95f3, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+272, &t.BHasPlayerIndicator, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+276, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PetType) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("Unk_887ea65", &t.Unk_887ea65)
	cb.Do("Unk_17d5315", &t.Unk_17d5315)
	cb.Do("Unk_a9f95f3", &t.Unk_a9f95f3)
	cb.Do("BHasPlayerIndicator", &t.BHasPlayerIndicator)
}

type OutroWaypointEffectMessage struct {
	THeader      RequiredMessageHeader
	SnoLevelArea DT_SNO
}

func (t *OutroWaypointEffectMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoLevelArea, r, &Options{
		Flags: 1,
		Group: 22,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+20, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *OutroWaypointEffectMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("SnoLevelArea", &t.SnoLevelArea)
}

type LimboWarpPrefetchBeginMessage struct {
	THeader      RequiredMessageHeader
	SnoWorld     DT_SNO
	WpLocation   DT_VECTOR3D
	DwPortalType DT_UINT
	Unk_164ef1e  DT_INT
}

func (t *LimboWarpPrefetchBeginMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoWorld, r, &Options{
		Flags: 1,
		Group: 48,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.WpLocation, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.DwPortalType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.Unk_164ef1e, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+40, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *LimboWarpPrefetchBeginMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("SnoWorld", &t.SnoWorld)
	cb.Do("WpLocation", &t.WpLocation)
	cb.Do("DwPortalType", &t.DwPortalType)
	cb.Do("Unk_164ef1e", &t.Unk_164ef1e)
}

type MarkerWeatherVolumeData struct {
	// Inherits MarkerDataBase
	// Inherits PolymorphicBase
	DwType          DT_UINT
	DwPad           DT_UINT
	PtProxData      DT_POLYMORPHIC_VARIABLEARRAY[*ProximityDataBase]
	SnoAudioContext DT_SNO
	Unk_877fa6b     DT_SNO
	FDisabled       DT_INT
	Unk_80c961e     DT_INT
}

func (t *MarkerWeatherVolumeData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.PtProxData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.SnoAudioContext, r, &Options{
		Flags: 1,
		Group: 93,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.Unk_877fa6b, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.FDisabled, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.Unk_80c961e, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+56, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *MarkerWeatherVolumeData) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("PtProxData", &t.PtProxData)
	cb.Do("SnoAudioContext", &t.SnoAudioContext)
	cb.Do("Unk_877fa6b", &t.Unk_877fa6b)
	cb.Do("FDisabled", &t.FDisabled)
	cb.Do("Unk_80c961e", &t.Unk_80c961e)
}

type TiledWindowPieces struct {
	// Inherits WindowPiecesBase
	// Inherits PolymorphicBase
	DwType           DT_UINT
	DwPad            DT_UINT
	FlImageScale     DT_FLOAT
	NPadding         DT_UINT
	HCornerFrames    DT_FIXEDARRAY[*DT_UINT]
	HBackground      DT_UINT
	HLeftBorder      DT_UINT
	HTopBorder       DT_UINT
	HRightBorder     DT_UINT
	HBottomBorder    DT_UINT
	FInsetBackground DT_INT
	FTileBackground  DT_INT
	Unk_d661bef      DT_INT
	Unk_1ec53df      DT_INT
}

func (t *TiledWindowPieces) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.FlImageScale, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.NPadding, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.HCornerFrames, r, &Options{
		ArrayLength: 4,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.HBackground, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.HLeftBorder, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.HTopBorder, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.HRightBorder, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.HBottomBorder, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+60, &t.FInsetBackground, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.FTileBackground, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.Unk_d661bef, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_1ec53df, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+80, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TiledWindowPieces) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("FlImageScale", &t.FlImageScale)
	cb.Do("NPadding", &t.NPadding)
	cb.Do("HCornerFrames", &t.HCornerFrames)
	cb.Do("HBackground", &t.HBackground)
	cb.Do("HLeftBorder", &t.HLeftBorder)
	cb.Do("HTopBorder", &t.HTopBorder)
	cb.Do("HRightBorder", &t.HRightBorder)
	cb.Do("HBottomBorder", &t.HBottomBorder)
	cb.Do("FInsetBackground", &t.FInsetBackground)
	cb.Do("FTileBackground", &t.FTileBackground)
	cb.Do("Unk_d661bef", &t.Unk_d661bef)
	cb.Do("Unk_1ec53df", &t.Unk_1ec53df)
}

type TiledStyleDefinition struct {
	PtWindowPiece DT_POLYMORPHIC_VARIABLEARRAY[*WindowPiecesBase]
	Unk_b66d648   DT_TAGMAP[*DT_ENUM]
}

func (t *TiledStyleDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.PtWindowPiece, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.Unk_b66d648, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TiledStyleDefinition) Walk(cb WalkCallback) {
	cb.Do("PtWindowPiece", &t.PtWindowPiece)
	cb.Do("Unk_b66d648", &t.Unk_b66d648)
}

type Type_30b72fa struct {
	// Inherits BuffCallbackBase
	// Inherits PolymorphicBase
	DwType                DT_UINT
	DwPad                 DT_UINT
	SnoTriggerEffectGroup DT_SNO
	ArConditions          DT_POLYMORPHIC_VARIABLEARRAY[*DT_INT64]
}

func (t *Type_30b72fa) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoTriggerEffectGroup, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ArConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_30b72fa) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("SnoTriggerEffectGroup", &t.SnoTriggerEffectGroup)
	cb.Do("ArConditions", &t.ArConditions)
}

type BossDoorGizmoActivate struct {
	// Inherits Type_d4213c9b
	DwType      DT_UINT
	Unk_9b2bc26 Type_80554fed
	Unk_77ed19a DT_ENUM
	DwPad       DT_UINT
}

func (t *BossDoorGizmoActivate) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_9b2bc26, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.Unk_77ed19a, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+56, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *BossDoorGizmoActivate) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("Unk_9b2bc26", &t.Unk_9b2bc26)
	cb.Do("Unk_77ed19a", &t.Unk_77ed19a)
	cb.Do("DwPad", &t.DwPad)
}

type Type_38be9c1 struct {
	DwType  DT_UINT
	FlTime  DT_FLOAT
	DwPad   DT_UINT
	TValue  DT_FLOAT
	EEasing DT_ENUM
}

func (t *Type_38be9c1) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.FlTime, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.TValue, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.EEasing, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_38be9c1) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("FlTime", &t.FlTime)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("TValue", &t.TValue)
	cb.Do("EEasing", &t.EEasing)
}

type IKGeneralBoneChain struct {
	// Inherits IKBoneChainBase
	// Inherits PolymorphicBase
	DwType      DT_UINT
	DwPad       DT_UINT
	EIKLimb     DT_ENUM
	EIKTarget   DT_ENUM
	PtIKBones   DT_VARIABLEARRAY[*IKBone]
	Unk_4311d19 DT_ENUM
	Unk_59c4651 HardpointLink
}

func (t *IKGeneralBoneChain) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.EIKLimb, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.EIKTarget, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.PtIKBones, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.Unk_4311d19, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.Unk_59c4651, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+56, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *IKGeneralBoneChain) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("EIKLimb", &t.EIKLimb)
	cb.Do("EIKTarget", &t.EIKTarget)
	cb.Do("PtIKBones", &t.PtIKBones)
	cb.Do("Unk_4311d19", &t.Unk_4311d19)
	cb.Do("Unk_59c4651", &t.Unk_59c4651)
}

type CurrentWorldSubcondition struct {
	// Inherits Subcondition
	// Inherits PolymorphicBase
	DwType      DT_UINT
	BNegate     DT_INT
	DwPad       DT_UINT
	SnoWorld    DT_SNO
	Unk_c7b2b18 DT_ENUM
}

func (t *CurrentWorldSubcondition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BNegate, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SnoWorld, r, &Options{
		Flags: 513,
		Group: 48,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.Unk_c7b2b18, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *CurrentWorldSubcondition) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("BNegate", &t.BNegate)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("SnoWorld", &t.SnoWorld)
	cb.Do("Unk_c7b2b18", &t.Unk_c7b2b18)
}

type Type_447d2ee struct {
	// Inherits BuffCallbackBase
	// Inherits PolymorphicBase
	DwType                DT_UINT
	DwPad                 DT_UINT
	SnoTriggerEffectGroup DT_SNO
	ArConditions          DT_POLYMORPHIC_VARIABLEARRAY[*DT_INT64]
}

func (t *Type_447d2ee) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoTriggerEffectGroup, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ArConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_447d2ee) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("SnoTriggerEffectGroup", &t.SnoTriggerEffectGroup)
	cb.Do("ArConditions", &t.ArConditions)
}

type Type_44d632e struct {
	FlX DT_FLOAT
	FlY DT_FLOAT
}

func (t *Type_44d632e) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.FlX, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.FlY, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_44d632e) Walk(cb WalkCallback) {
	cb.Do("FlX", &t.FlX)
	cb.Do("FlY", &t.FlY)
}

type ZoneMapParams struct {
	FlZoneArtScale     DT_FLOAT
	VecZoneArtCenter   DT_VECTOR2D
	FlZoneBaseScale    DT_FLOAT
	FlZoneZoomScaleMax DT_FLOAT
	Unk_4e79635        DT_FLOAT
	Unk_341cf9b        DT_FLOAT
	Unk_7ed5974        DT_FLOAT
	Unk_f373e7a        DT_FLOAT
	Unk_77999b9        DT_FLOAT
	ArZoomBreakpoints  DT_VARIABLEARRAY[*DT_FLOAT]
	Unk_42cbe27        DT_INT
	Unk_34b452         DT_SNO
	Unk_3620f37        DT_INT
	Unk_c60b9b0        DT_INT
	Unk_754c08a        DT_SNO
	ArFogOfWar         DT_VARIABLEARRAY[*FogOfWarImage]
	Unk_ff16ba3        DT_VARIABLEARRAY[*Type_bef5a4a]
}

func (t *ZoneMapParams) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.FlZoneArtScale, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.VecZoneArtCenter, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.FlZoneBaseScale, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.FlZoneZoomScaleMax, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.Unk_4e79635, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_341cf9b, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.Unk_7ed5974, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.Unk_f373e7a, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.Unk_77999b9, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.ArZoomBreakpoints, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.Unk_42cbe27, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+60, &t.Unk_34b452, r, &Options{
		Flags: 1,
		Group: 44,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.Unk_3620f37, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.Unk_c60b9b0, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_754c08a, r, &Options{
		Flags: 1,
		Group: 44,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.ArFogOfWar, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.Unk_ff16ba3, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+112, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ZoneMapParams) Walk(cb WalkCallback) {
	cb.Do("FlZoneArtScale", &t.FlZoneArtScale)
	cb.Do("VecZoneArtCenter", &t.VecZoneArtCenter)
	cb.Do("FlZoneBaseScale", &t.FlZoneBaseScale)
	cb.Do("FlZoneZoomScaleMax", &t.FlZoneZoomScaleMax)
	cb.Do("Unk_4e79635", &t.Unk_4e79635)
	cb.Do("Unk_341cf9b", &t.Unk_341cf9b)
	cb.Do("Unk_7ed5974", &t.Unk_7ed5974)
	cb.Do("Unk_f373e7a", &t.Unk_f373e7a)
	cb.Do("Unk_77999b9", &t.Unk_77999b9)
	cb.Do("ArZoomBreakpoints", &t.ArZoomBreakpoints)
	cb.Do("Unk_42cbe27", &t.Unk_42cbe27)
	cb.Do("Unk_34b452", &t.Unk_34b452)
	cb.Do("Unk_3620f37", &t.Unk_3620f37)
	cb.Do("Unk_c60b9b0", &t.Unk_c60b9b0)
	cb.Do("Unk_754c08a", &t.Unk_754c08a)
	cb.Do("ArFogOfWar", &t.ArFogOfWar)
	cb.Do("Unk_ff16ba3", &t.Unk_ff16ba3)
}

type Type_4ad15c6 struct {
	THeader     RequiredMessageHeader
	Unk_f898967 DT_FLOAT
}

func (t *Type_4ad15c6) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_f898967, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+20, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_4ad15c6) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("Unk_f898967", &t.Unk_f898967)
}

type HdrSettings struct {
	Unk_4cd8a3f DT_SNO
}

func (t *HdrSettings) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Unk_4cd8a3f, r, &Options{
		Flags: 1,
		Group: 44,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+4, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *HdrSettings) Walk(cb WalkCallback) {
	cb.Do("Unk_4cd8a3f", &t.Unk_4cd8a3f)
}

type ProjectileAttachmentOnHitMessage struct {
	THeader                    RequiredMessageHeader
	AnnTarget                  DT_ACD_NETWORK_NAME
	AnnAttacker                DT_ACD_NETWORK_NAME
	VLocalImpactPos            DT_OPTIONAL[*DT_VECTOR3D]
	VProjectileImpactDirection DT_OPTIONAL[*DT_VECTOR3D]
	FlImpactDirection          DT_OPTIONAL[*DT_FLOAT]
	FlImpactPitch              DT_OPTIONAL[*DT_FLOAT]
	SnoEffectGroup             DT_SNO
}

func (t *ProjectileAttachmentOnHitMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.AnnTarget, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.AnnAttacker, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.VLocalImpactPos, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.VProjectileImpactDirection, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.FlImpactDirection, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.FlImpactPitch, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.SnoEffectGroup, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+84, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ProjectileAttachmentOnHitMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("AnnTarget", &t.AnnTarget)
	cb.Do("AnnAttacker", &t.AnnAttacker)
	cb.Do("VLocalImpactPos", &t.VLocalImpactPos)
	cb.Do("VProjectileImpactDirection", &t.VProjectileImpactDirection)
	cb.Do("FlImpactDirection", &t.FlImpactDirection)
	cb.Do("FlImpactPitch", &t.FlImpactPitch)
	cb.Do("SnoEffectGroup", &t.SnoEffectGroup)
}

type dmClothCapsuleDefMirror struct {
	LocalTransform dmTransformMirror
	Scale          DT_VECTOR4D
	Radius1        DT_FLOAT
	Radius2        DT_FLOAT
	Height         DT_FLOAT
	Friction       DT_FLOAT
	BoneIndex      DT_WORD
	Solver         DT_BYTE
	Padding        DT_FIXEDARRAY[*DT_WORD]
}

func (t *dmClothCapsuleDefMirror) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.LocalTransform, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.Scale, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.Radius1, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.Radius2, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.Height, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+60, &t.Friction, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.BoneIndex, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+66, &t.Solver, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.Padding, r, &Options{ArrayLength: 5}); err != nil {
		return err
	}
	if _, err := r.Seek(p+80, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *dmClothCapsuleDefMirror) Walk(cb WalkCallback) {
	cb.Do("LocalTransform", &t.LocalTransform)
	cb.Do("Scale", &t.Scale)
	cb.Do("Radius1", &t.Radius1)
	cb.Do("Radius2", &t.Radius2)
	cb.Do("Height", &t.Height)
	cb.Do("Friction", &t.Friction)
	cb.Do("BoneIndex", &t.BoneIndex)
	cb.Do("Solver", &t.Solver)
	cb.Do("Padding", &t.Padding)
}

type GameBalanceTable struct {
	// Inherits PolymorphicBase
	DwType DT_UINT
	DwPad  DT_UINT
}

func (t *GameBalanceTable) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *GameBalanceTable) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
}

type AimTargetMessage struct {
	THeader   RequiredMessageHeader
	Ann       DT_ACD_NETWORK_NAME
	EType     DT_ENUM
	AnnTarget DT_ACD_NETWORK_NAME
	TPlace    SharedServerWorldPlace
}

func (t *AimTargetMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Ann, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.EType, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.AnnTarget, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.TPlace, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+56, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *AimTargetMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("Ann", &t.Ann)
	cb.Do("EType", &t.EType)
	cb.Do("AnnTarget", &t.AnnTarget)
	cb.Do("TPlace", &t.TPlace)
}

type ActorFoleySoundOverride struct {
	TFoleyMaterialTag FoleyMaterialTag
	Unk_f77a839       DT_FIXEDARRAY[*DT_SNO]
}

func (t *ActorFoleySoundOverride) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.TFoleyMaterialTag, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.Unk_f77a839, r, &Options{
		ArrayLength: 4,
		Flags:       1,
		Group:       79,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+20, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ActorFoleySoundOverride) Walk(cb WalkCallback) {
	cb.Do("TFoleyMaterialTag", &t.TFoleyMaterialTag)
	cb.Do("Unk_f77a839", &t.Unk_f77a839)
}

type Type_5535d75 struct {
	Unk_6eeeaad IKBone
	Unk_155967  DT_FLOAT
}

func (t *Type_5535d75) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Unk_6eeeaad, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.Unk_155967, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_5535d75) Walk(cb WalkCallback) {
	cb.Do("Unk_6eeeaad", &t.Unk_6eeeaad)
	cb.Do("Unk_155967", &t.Unk_155967)
}

type IKLeg struct {
	EIKLimb            DT_ENUM
	PtUpperLegs        DT_VARIABLEARRAY[*IKBone]
	BUseAnimatedOffset DT_INT
	FlOffsetHeight     DT_FLOAT
	TAlternateBone     IKBone
	Unk_978714f        DT_FLOAT
}

func (t *IKLeg) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.EIKLimb, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.PtUpperLegs, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.BUseAnimatedOffset, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.FlOffsetHeight, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.TAlternateBone, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.Unk_978714f, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+40, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *IKLeg) Walk(cb WalkCallback) {
	cb.Do("EIKLimb", &t.EIKLimb)
	cb.Do("PtUpperLegs", &t.PtUpperLegs)
	cb.Do("BUseAnimatedOffset", &t.BUseAnimatedOffset)
	cb.Do("FlOffsetHeight", &t.FlOffsetHeight)
	cb.Do("TAlternateBone", &t.TAlternateBone)
	cb.Do("Unk_978714f", &t.Unk_978714f)
}

type BlockedDamageVisualsMessage struct {
	THeader                    RequiredMessageHeader
	AnnDefender                DT_ACD_NETWORK_NAME
	AnnAttacker                DT_ACD_NETWORK_NAME
	VLocalImpactPos            DT_OPTIONAL[*DT_VECTOR3D]
	VProjectileImpactDirection DT_OPTIONAL[*DT_VECTOR3D]
	FlImpactDirection          DT_OPTIONAL[*DT_FLOAT]
	FlImpactPitch              DT_OPTIONAL[*DT_FLOAT]
}

func (t *BlockedDamageVisualsMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.AnnDefender, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.AnnAttacker, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.VLocalImpactPos, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.VProjectileImpactDirection, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.FlImpactDirection, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.FlImpactPitch, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+80, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *BlockedDamageVisualsMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("AnnDefender", &t.AnnDefender)
	cb.Do("AnnAttacker", &t.AnnAttacker)
	cb.Do("VLocalImpactPos", &t.VLocalImpactPos)
	cb.Do("VProjectileImpactDirection", &t.VProjectileImpactDirection)
	cb.Do("FlImpactDirection", &t.FlImpactDirection)
	cb.Do("FlImpactPitch", &t.FlImpactPitch)
}

type Type_57fcadb struct {
	NSeed                        DT_INT
	ArForcedLabels               DT_FIXEDARRAY[*DT_GBID]
	ArForcedDungeonStates        DT_FIXEDARRAY[*DT_GBID]
	Unk_dab7507                  DT_FIXEDARRAY[*DT_GBID]
	Unk_4ab8ccb                  DT_INT
	BDisableDefaultLabels        DT_INT
	BDisableDefaultDungeonStates DT_INT
}

func (t *Type_57fcadb) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.NSeed, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.ArForcedLabels, r, &Options{
		ArrayLength: 32,
		Flags:       9,
		Group:       4,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+136, &t.ArForcedDungeonStates, r, &Options{
		ArrayLength: 32,
		Flags:       9,
		Group:       31,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+268, &t.Unk_dab7507, r, &Options{
		ArrayLength: 64,
		Flags:       9,
		Group:       31,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+528, &t.Unk_4ab8ccb, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+532, &t.BDisableDefaultLabels, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+536, &t.BDisableDefaultDungeonStates, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+540, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_57fcadb) Walk(cb WalkCallback) {
	cb.Do("NSeed", &t.NSeed)
	cb.Do("ArForcedLabels", &t.ArForcedLabels)
	cb.Do("ArForcedDungeonStates", &t.ArForcedDungeonStates)
	cb.Do("Unk_dab7507", &t.Unk_dab7507)
	cb.Do("Unk_4ab8ccb", &t.Unk_4ab8ccb)
	cb.Do("BDisableDefaultLabels", &t.BDisableDefaultLabels)
	cb.Do("BDisableDefaultDungeonStates", &t.BDisableDefaultDungeonStates)
}

type LocalEventTrackingData struct {
	NOccurrence  DT_INT
	SnoMarker    DT_INT
	NMarkerIndex DT_INT
}

func (t *LocalEventTrackingData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.NOccurrence, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.SnoMarker, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.NMarkerIndex, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+12, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *LocalEventTrackingData) Walk(cb WalkCallback) {
	cb.Do("NOccurrence", &t.NOccurrence)
	cb.Do("SnoMarker", &t.SnoMarker)
	cb.Do("NMarkerIndex", &t.NMarkerIndex)
}

type DungeonAffixFamilyEntry struct {
	THeader   GBIDHeader
	BIsUnique DT_INT
}

func (t *DungeonAffixFamilyEntry) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+260, &t.BIsUnique, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+264, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *DungeonAffixFamilyEntry) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("BIsUnique", &t.BIsUnique)
}

type Plane struct {
	WvNormal DT_VECTOR3D
	WdD      DT_FLOAT
}

func (t *Plane) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.WvNormal, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.WdD, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Plane) Walk(cb WalkCallback) {
	cb.Do("WvNormal", &t.WvNormal)
	cb.Do("WdD", &t.WdD)
}

type Type_5eb6ade struct {
	THardpointLinkTarget HardpointLink
	DwTargetID           DT_UINT
	FlWeight             DT_FLOAT
}

func (t *Type_5eb6ade) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THardpointLinkTarget, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwTargetID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.FlWeight, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_5eb6ade) Walk(cb WalkCallback) {
	cb.Do("THardpointLinkTarget", &t.THardpointLinkTarget)
	cb.Do("DwTargetID", &t.DwTargetID)
	cb.Do("FlWeight", &t.FlWeight)
}

type GeoChunkIndexBuffer struct {
	Unk_7ef82a3 DT_VARIABLEARRAY[*DT_WORD]
	Ibid        DT_INT
	FOptional   DT_INT
}

func (t *GeoChunkIndexBuffer) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Unk_7ef82a3, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Ibid, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.FOptional, r, &Options{Flags: 16}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *GeoChunkIndexBuffer) Walk(cb WalkCallback) {
	cb.Do("Unk_7ef82a3", &t.Unk_7ef82a3)
	cb.Do("Ibid", &t.Ibid)
	cb.Do("FOptional", &t.FOptional)
}

type PresetBannerData struct {
	SzName DT_UINT
	SzData DT_CSTRING[*DT_BYTE]
}

func (t *PresetBannerData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SzName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.SzData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PresetBannerData) Walk(cb WalkCallback) {
	cb.Do("SzName", &t.SzName)
	cb.Do("SzData", &t.SzData)
}

type Ray2D struct {
	WpOrigin    DT_VECTOR2D
	WvDirection DT_VECTOR2D
}

func (t *Ray2D) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.WpOrigin, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.WvDirection, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Ray2D) Walk(cb WalkCallback) {
	cb.Do("WpOrigin", &t.WpOrigin)
	cb.Do("WvDirection", &t.WvDirection)
}

type Ray3D struct {
	WpOrigin    DT_VECTOR3D
	WvDirection DT_VECTOR3D
}

func (t *Ray3D) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.WpOrigin, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.WvDirection, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Ray3D) Walk(cb WalkCallback) {
	cb.Do("WpOrigin", &t.WpOrigin)
	cb.Do("WvDirection", &t.WvDirection)
}

type Shape struct {
	DwFlags           DT_UINT
	EType             DT_ENUM
	EMaterial         DT_ENUM
	NDegrade          DT_INT
	FlDensityFactor   DT_FLOAT
	FlExplosionFactor DT_FLOAT
	FlVelocityFactor  DT_FLOAT
	THull             ConvexHull
	TBox              OBB
	TSphere           Sphere
	TCylinder         Cylinder
	TCapsule          Capsule
}

func (t *Shape) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.DwFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.EType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.EMaterial, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.NDegrade, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.FlDensityFactor, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.FlExplosionFactor, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.FlVelocityFactor, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.THull, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+160, &t.TBox, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+200, &t.TSphere, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+216, &t.TCylinder, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+244, &t.TCapsule, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+272, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Shape) Walk(cb WalkCallback) {
	cb.Do("DwFlags", &t.DwFlags)
	cb.Do("EType", &t.EType)
	cb.Do("EMaterial", &t.EMaterial)
	cb.Do("NDegrade", &t.NDegrade)
	cb.Do("FlDensityFactor", &t.FlDensityFactor)
	cb.Do("FlExplosionFactor", &t.FlExplosionFactor)
	cb.Do("FlVelocityFactor", &t.FlVelocityFactor)
	cb.Do("THull", &t.THull)
	cb.Do("TBox", &t.TBox)
	cb.Do("TSphere", &t.TSphere)
	cb.Do("TCylinder", &t.TCylinder)
	cb.Do("TCapsule", &t.TCapsule)
}

type MarkerCameraData struct {
	// Inherits MarkerDataBase
	// Inherits PolymorphicBase
	DwType       DT_UINT
	DwPad        DT_UINT
	AFOV         DT_FLOAT
	FlFocalPlane DT_FLOAT
	FlFStop      DT_FLOAT
	Unk_101b2fc  DT_FLOAT
	Unk_6749d34  DT_FLOAT
	Unk_839bfef  DT_FLOAT
	FlNearPlane  DT_FLOAT
	FlFarPlane   DT_FLOAT
}

func (t *MarkerCameraData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.AFOV, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.FlFocalPlane, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.FlFStop, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.Unk_101b2fc, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.Unk_6749d34, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.Unk_839bfef, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.FlNearPlane, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.FlFarPlane, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *MarkerCameraData) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("AFOV", &t.AFOV)
	cb.Do("FlFocalPlane", &t.FlFocalPlane)
	cb.Do("FlFStop", &t.FlFStop)
	cb.Do("Unk_101b2fc", &t.Unk_101b2fc)
	cb.Do("Unk_6749d34", &t.Unk_6749d34)
	cb.Do("Unk_839bfef", &t.Unk_839bfef)
	cb.Do("FlNearPlane", &t.FlNearPlane)
	cb.Do("FlFarPlane", &t.FlFarPlane)
}

type ScriptEventParamPlayer struct {
	// Inherits ScriptEventParamBase
	// Inherits PolymorphicBase
	DwType     DT_UINT
	EParamType DT_ENUM
	DwPad      DT_UINT
	BIsPlayer  DT_INT
}

func (t *ScriptEventParamPlayer) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.EParamType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.BIsPlayer, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ScriptEventParamPlayer) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("EParamType", &t.EParamType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("BIsPlayer", &t.BIsPlayer)
}

type Type_661d0bc struct {
	// Inherits Type_d4213c9b
	DwType      DT_UINT
	Unk_9b2bc26 Type_80554fed
	Unk_77ed19a DT_ENUM
	DwPad       DT_UINT
}

func (t *Type_661d0bc) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_9b2bc26, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.Unk_77ed19a, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+56, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_661d0bc) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("Unk_9b2bc26", &t.Unk_9b2bc26)
	cb.Do("Unk_77ed19a", &t.Unk_77ed19a)
	cb.Do("DwPad", &t.DwPad)
}

type Type_6ba99db struct {
	// Inherits Type_4e43aa7a
	DwType      DT_UINT
	Unk_9b2bc26 Type_80fa280c
	Unk_77ed19a DT_ENUM
	DwPad       DT_UINT
}

func (t *Type_6ba99db) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_9b2bc26, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.Unk_77ed19a, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+56, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_6ba99db) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("Unk_9b2bc26", &t.Unk_9b2bc26)
	cb.Do("Unk_77ed19a", &t.Unk_77ed19a)
	cb.Do("DwPad", &t.DwPad)
}

type BlendSettings struct {
	FlBlendTime DT_FLOAT
	EBlendCurve DT_ENUM
}

func (t *BlendSettings) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.FlBlendTime, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.EBlendCurve, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *BlendSettings) Walk(cb WalkCallback) {
	cb.Do("FlBlendTime", &t.FlBlendTime)
	cb.Do("EBlendCurve", &t.EBlendCurve)
}

type ChallengeCategory struct {
	DwID              DT_UINT
	ArCategories      DT_VARIABLEARRAY[*ChallengeCategory]
	ArAchievementSnos DT_VARIABLEARRAY[*DT_SNO]
	UFlags            DT_UINT
}

func (t *ChallengeCategory) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.DwID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.ArCategories, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ArAchievementSnos, r, &Options{
		Flags: 1,
		Group: 99,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.UFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ChallengeCategory) Walk(cb WalkCallback) {
	cb.Do("DwID", &t.DwID)
	cb.Do("ArCategories", &t.ArCategories)
	cb.Do("ArAchievementSnos", &t.ArAchievementSnos)
	cb.Do("UFlags", &t.UFlags)
}

type MaterialColorValueDefinition struct {
	// Inherits DefaultMaterialValueDefinition
	// Inherits PolymorphicBase
	DwType DT_UINT
	DwPad  DT_UINT
	VValue DT_VECTOR4D
}

func (t *MaterialColorValueDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.VValue, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *MaterialColorValueDefinition) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("VValue", &t.VValue)
}

type UITextStyle struct {
	// Inherits UIWindowStyle
	// Inherits UIControlStyle
	// Inherits PolymorphicBase
	DwType                    DT_UINT
	DwPad                     DT_UINT
	HParentStyle              UIControlHandle
	Unk_441f783               DT_INT64
	M_eHasModifiedPowerTagMap DT_TAGMAP[*DT_ENUM]
	TConsoleInput             UIControlConsoleInput
	Unk_b4f614c               DT_TAGMAP[*DT_ENUM]
	TFont                     UIControlFont
	Unk_4741819               DT_TAGMAP[*DT_ENUM]
}

func (t *UITextStyle) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.HParentStyle, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_441f783, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.M_eHasModifiedPowerTagMap, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.TConsoleInput, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.Unk_b4f614c, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.TFont, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.Unk_4741819, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+112, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *UITextStyle) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("HParentStyle", &t.HParentStyle)
	cb.Do("Unk_441f783", &t.Unk_441f783)
	cb.Do("M_eHasModifiedPowerTagMap", &t.M_eHasModifiedPowerTagMap)
	cb.Do("TConsoleInput", &t.TConsoleInput)
	cb.Do("Unk_b4f614c", &t.Unk_b4f614c)
	cb.Do("TFont", &t.TFont)
	cb.Do("Unk_4741819", &t.Unk_4741819)
}

type AnimTreeNodeOverride struct {
	// Inherits AnimTreeNodeBase
	// Inherits PolymorphicBase
	DwType               DT_UINT
	DwPad                DT_UINT
	DwID                 DT_UINT
	ENodeType            DT_ENUM
	EAnimLayer           DT_ENUM
	PtChildren           DT_VARIABLEARRAY[*AnimTreeNodeChild]
	EBlendParam          DT_ENUM
	ESecondaryBlendParam DT_ENUM
	Unk_5733828          DT_VARIABLEARRAY[*AnimTreeBlendTriangle]
	TMinBlend            DT_VECTOR2D
	TMaxBlend            DT_VECTOR2D
	TBlendIn             BlendSettings
	TBlendOut            BlendSettings
	Unk_dd1cd6f          DT_INT
	NSyncGroupIndex      DT_INT
	NOverrideID          DT_INT
}

func (t *AnimTreeNodeOverride) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.DwID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.ENodeType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.EAnimLayer, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.PtChildren, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.EBlendParam, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.ESecondaryBlendParam, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.Unk_5733828, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.TMinBlend, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.TMaxBlend, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.TBlendIn, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.TBlendOut, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+104, &t.Unk_dd1cd6f, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+108, &t.NSyncGroupIndex, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.NOverrideID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+120, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *AnimTreeNodeOverride) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("DwID", &t.DwID)
	cb.Do("ENodeType", &t.ENodeType)
	cb.Do("EAnimLayer", &t.EAnimLayer)
	cb.Do("PtChildren", &t.PtChildren)
	cb.Do("EBlendParam", &t.EBlendParam)
	cb.Do("ESecondaryBlendParam", &t.ESecondaryBlendParam)
	cb.Do("Unk_5733828", &t.Unk_5733828)
	cb.Do("TMinBlend", &t.TMinBlend)
	cb.Do("TMaxBlend", &t.TMaxBlend)
	cb.Do("TBlendIn", &t.TBlendIn)
	cb.Do("TBlendOut", &t.TBlendOut)
	cb.Do("Unk_dd1cd6f", &t.Unk_dd1cd6f)
	cb.Do("NSyncGroupIndex", &t.NSyncGroupIndex)
	cb.Do("NOverrideID", &t.NOverrideID)
}

type Type_7eaf5b8 struct {
	// Inherits BuffCallbackBase
	// Inherits PolymorphicBase
	DwType                DT_UINT
	DwPad                 DT_UINT
	SnoTriggerEffectGroup DT_SNO
	ArConditions          DT_POLYMORPHIC_VARIABLEARRAY[*DT_INT64]
}

func (t *Type_7eaf5b8) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoTriggerEffectGroup, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ArConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_7eaf5b8) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("SnoTriggerEffectGroup", &t.SnoTriggerEffectGroup)
	cb.Do("ArConditions", &t.ArConditions)
}

type ObserverDefinition struct {
	AFOV                 DT_FLOAT
	WvLookAtOffsetVector DT_VECTOR3D
	WvCameraOffsetVector DT_VECTOR3D
	Unk_5a947a6          DT_INT
	Unk_5c0680d          DT_VECTOR3D
	FlCameraOffsetScalar DT_FLOAT
	Unk_3fe5936          DT_FLOAT
	Unk_c9a32ec          DT_FLOAT
	Unk_3ac51ed          DT_FLOAT
	FOrthographic        DT_INT
	FlFocalPlane         DT_FLOAT
	FlFStop              DT_FLOAT
	Unk_101b2fc          DT_FLOAT
	Unk_6749d34          DT_FLOAT
	Unk_839bfef          DT_FLOAT
	FlZFar               DT_FLOAT
	FlHeight             DT_FLOAT
	Unk_3853352          DT_FLOAT
	Unk_76194b5          DT_FLOAT
	Unk_551d996          DT_FLOAT
	Unk_e8a7758          DT_FLOAT
	Unk_4f566f0          DT_FLOAT
	Unk_4771732          DT_FLOAT
	FlFollowSpeed        DT_FLOAT
	Unk_9fb28df          DT_FLOAT
	Unk_f4da6b2          DT_FLOAT
	Unk_483b79           DT_FLOAT
	Unk_57e840d          DT_FLOAT
	Unk_d6fad4           DT_FLOAT
	Unk_6b455b8          DT_FLOAT
	Unk_15b7944          DT_FLOAT
	Unk_d2b3efc          DT_FLOAT
	BVelocityCamera      DT_INT
	Unk_9e17f0a          DT_FLOAT
	Unk_8f82b03          DT_FLOAT
	Unk_777445b          DT_FLOAT
	FlItemUntargetable   DT_FLOAT
	Unk_ee8e3a           DT_FLOAT
	Unk_e45f065          DT_FLOAT
}

func (t *ObserverDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.AFOV, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.WvLookAtOffsetVector, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.WvCameraOffsetVector, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.Unk_5a947a6, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.Unk_5c0680d, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.FlCameraOffsetScalar, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.Unk_3fe5936, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+60, &t.Unk_c9a32ec, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.Unk_3ac51ed, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.FOrthographic, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.FlFocalPlane, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.FlFStop, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.Unk_101b2fc, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.Unk_6749d34, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.Unk_839bfef, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.FlZFar, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.FlHeight, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+100, &t.Unk_3853352, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+104, &t.Unk_76194b5, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+108, &t.Unk_551d996, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.Unk_e8a7758, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+116, &t.Unk_4f566f0, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.Unk_4771732, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+124, &t.FlFollowSpeed, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.Unk_9fb28df, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+132, &t.Unk_f4da6b2, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+136, &t.Unk_483b79, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+140, &t.Unk_57e840d, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+144, &t.Unk_d6fad4, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+148, &t.Unk_6b455b8, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+152, &t.Unk_15b7944, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+156, &t.Unk_d2b3efc, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+160, &t.BVelocityCamera, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+164, &t.Unk_9e17f0a, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+168, &t.Unk_8f82b03, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+172, &t.Unk_777445b, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+176, &t.FlItemUntargetable, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+180, &t.Unk_ee8e3a, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+184, &t.Unk_e45f065, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+188, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ObserverDefinition) Walk(cb WalkCallback) {
	cb.Do("AFOV", &t.AFOV)
	cb.Do("WvLookAtOffsetVector", &t.WvLookAtOffsetVector)
	cb.Do("WvCameraOffsetVector", &t.WvCameraOffsetVector)
	cb.Do("Unk_5a947a6", &t.Unk_5a947a6)
	cb.Do("Unk_5c0680d", &t.Unk_5c0680d)
	cb.Do("FlCameraOffsetScalar", &t.FlCameraOffsetScalar)
	cb.Do("Unk_3fe5936", &t.Unk_3fe5936)
	cb.Do("Unk_c9a32ec", &t.Unk_c9a32ec)
	cb.Do("Unk_3ac51ed", &t.Unk_3ac51ed)
	cb.Do("FOrthographic", &t.FOrthographic)
	cb.Do("FlFocalPlane", &t.FlFocalPlane)
	cb.Do("FlFStop", &t.FlFStop)
	cb.Do("Unk_101b2fc", &t.Unk_101b2fc)
	cb.Do("Unk_6749d34", &t.Unk_6749d34)
	cb.Do("Unk_839bfef", &t.Unk_839bfef)
	cb.Do("FlZFar", &t.FlZFar)
	cb.Do("FlHeight", &t.FlHeight)
	cb.Do("Unk_3853352", &t.Unk_3853352)
	cb.Do("Unk_76194b5", &t.Unk_76194b5)
	cb.Do("Unk_551d996", &t.Unk_551d996)
	cb.Do("Unk_e8a7758", &t.Unk_e8a7758)
	cb.Do("Unk_4f566f0", &t.Unk_4f566f0)
	cb.Do("Unk_4771732", &t.Unk_4771732)
	cb.Do("FlFollowSpeed", &t.FlFollowSpeed)
	cb.Do("Unk_9fb28df", &t.Unk_9fb28df)
	cb.Do("Unk_f4da6b2", &t.Unk_f4da6b2)
	cb.Do("Unk_483b79", &t.Unk_483b79)
	cb.Do("Unk_57e840d", &t.Unk_57e840d)
	cb.Do("Unk_d6fad4", &t.Unk_d6fad4)
	cb.Do("Unk_6b455b8", &t.Unk_6b455b8)
	cb.Do("Unk_15b7944", &t.Unk_15b7944)
	cb.Do("Unk_d2b3efc", &t.Unk_d2b3efc)
	cb.Do("BVelocityCamera", &t.BVelocityCamera)
	cb.Do("Unk_9e17f0a", &t.Unk_9e17f0a)
	cb.Do("Unk_8f82b03", &t.Unk_8f82b03)
	cb.Do("Unk_777445b", &t.Unk_777445b)
	cb.Do("FlItemUntargetable", &t.FlItemUntargetable)
	cb.Do("Unk_ee8e3a", &t.Unk_ee8e3a)
	cb.Do("Unk_e45f065", &t.Unk_e45f065)
}

type MarkerFogVolumeData struct {
	// Inherits MarkerDataBase
	// Inherits PolymorphicBase
	DwType        DT_UINT
	DwPad         DT_UINT
	TInstanceData FogVolumeInstanceData
}

func (t *MarkerFogVolumeData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TInstanceData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+152, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *MarkerFogVolumeData) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("TInstanceData", &t.TInstanceData)
}

type SkillTag_Table struct {
	// Inherits GameBalanceTable
	// Inherits PolymorphicBase
	DwType   DT_UINT
	DwPad    DT_UINT
	TEntries DT_VARIABLEARRAY[*SkillTag]
}

func (t *SkillTag_Table) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TEntries, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *SkillTag_Table) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("TEntries", &t.TEntries)
}

type WeatherStateParams struct {
	Unk_d6ca49a DT_TAGMAP[*DT_ENUM]
}

func (t *WeatherStateParams) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Unk_d6ca49a, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *WeatherStateParams) Walk(cb WalkCallback) {
	cb.Do("Unk_d6ca49a", &t.Unk_d6ca49a)
}

type AffixSyncComponents struct {
	// Inherits BuffCallbackBase
	// Inherits PolymorphicBase
	DwType                DT_UINT
	DwPad                 DT_UINT
	SnoTriggerEffectGroup DT_SNO
	ArConditions          DT_POLYMORPHIC_VARIABLEARRAY[*DT_INT64]
}

func (t *AffixSyncComponents) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoTriggerEffectGroup, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ArConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *AffixSyncComponents) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("SnoTriggerEffectGroup", &t.SnoTriggerEffectGroup)
	cb.Do("ArConditions", &t.ArConditions)
}

type Type_8b736c4 struct {
	RgbaOuterFalloff DT_RGBACOLOR
	RgbaOuter        DT_RGBACOLOR
	RgbaInner        DT_RGBACOLOR
	Unk_d9d4850      DT_FLOAT
}

func (t *Type_8b736c4) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.RgbaOuterFalloff, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.RgbaOuter, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.RgbaInner, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.Unk_d9d4850, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_8b736c4) Walk(cb WalkCallback) {
	cb.Do("RgbaOuterFalloff", &t.RgbaOuterFalloff)
	cb.Do("RgbaOuter", &t.RgbaOuter)
	cb.Do("RgbaInner", &t.RgbaInner)
	cb.Do("Unk_d9d4850", &t.Unk_d9d4850)
}

type PowerConditionIsShapeshiftForm struct {
	// Inherits PowerConditionBase
	// Inherits PolymorphicBase
	DwType          DT_UINT
	BInverse        DT_INT
	DwPad           DT_UINT
	EShapeshiftForm DT_ENUM
	ESubject        DT_ENUM
}

func (t *PowerConditionIsShapeshiftForm) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BInverse, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.EShapeshiftForm, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.ESubject, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PowerConditionIsShapeshiftForm) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("BInverse", &t.BInverse)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("EShapeshiftForm", &t.EShapeshiftForm)
	cb.Do("ESubject", &t.ESubject)
}

type PlayerEmblemResponseMessage struct {
	THeader               RequiredRequestMessageHeader
	DwPlayerGameAccountId DT_UINT
	SnoEmblem             DT_SNO
}

func (t *PlayerEmblemResponseMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPlayerGameAccountId, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SnoEmblem, r, &Options{
		Flags: 1,
		Group: 121,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+28, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PlayerEmblemResponseMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("DwPlayerGameAccountId", &t.DwPlayerGameAccountId)
	cb.Do("SnoEmblem", &t.SnoEmblem)
}

type Type_9153bc3 struct {
	FlProgressMin            DT_FLOAT
	FlProgressMax            DT_FLOAT
	BVertical                DT_INT
	HProgressForegroundImage UIImageHandleReference
	HProgressBackgroundImage UIImageHandleReference
	Unk_9df1c6f              UIImageHandleReference
	BReversed                DT_INT
	FlThickness              DT_FLOAT
}

func (t *Type_9153bc3) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.FlProgressMin, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.FlProgressMax, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.BVertical, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.HProgressForegroundImage, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.HProgressBackgroundImage, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.Unk_9df1c6f, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.BReversed, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.FlThickness, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_9153bc3) Walk(cb WalkCallback) {
	cb.Do("FlProgressMin", &t.FlProgressMin)
	cb.Do("FlProgressMax", &t.FlProgressMax)
	cb.Do("BVertical", &t.BVertical)
	cb.Do("HProgressForegroundImage", &t.HProgressForegroundImage)
	cb.Do("HProgressBackgroundImage", &t.HProgressBackgroundImage)
	cb.Do("Unk_9df1c6f", &t.Unk_9df1c6f)
	cb.Do("BReversed", &t.BReversed)
	cb.Do("FlThickness", &t.FlThickness)
}

type UIParagonBoardStyle struct {
	// Inherits UIWindowStyle
	// Inherits UIControlStyle
	// Inherits PolymorphicBase
	DwType                    DT_UINT
	DwPad                     DT_UINT
	HParentStyle              UIControlHandle
	Unk_441f783               DT_INT64
	M_eHasModifiedPowerTagMap DT_TAGMAP[*DT_ENUM]
	TConsoleInput             UIControlConsoleInput
	Unk_b4f614c               DT_TAGMAP[*DT_ENUM]
}

func (t *UIParagonBoardStyle) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.HParentStyle, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_441f783, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.M_eHasModifiedPowerTagMap, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.TConsoleInput, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.Unk_b4f614c, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+80, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *UIParagonBoardStyle) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("HParentStyle", &t.HParentStyle)
	cb.Do("Unk_441f783", &t.Unk_441f783)
	cb.Do("M_eHasModifiedPowerTagMap", &t.M_eHasModifiedPowerTagMap)
	cb.Do("TConsoleInput", &t.TConsoleInput)
	cb.Do("Unk_b4f614c", &t.Unk_b4f614c)
}

type GameTestingPvpSamplingStartMessage struct {
	THeader    RequiredMessageHeader
	SzTestName DT_CHARARRAY
}

func (t *GameTestingPvpSamplingStartMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SzTestName, r, &Options{
		ArrayLength: 64,
		Flags:       1,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+80, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *GameTestingPvpSamplingStartMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("SzTestName", &t.SzTestName)
}

type TrySalvageAllMessage struct {
	THeader      RequiredMessageHeader
	ESalvageType DT_ENUM
}

func (t *TrySalvageAllMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.ESalvageType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+20, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TrySalvageAllMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("ESalvageType", &t.ESalvageType)
}

type Type_9d7affe struct {
	// Inherits BuffCallbackBase
	// Inherits PolymorphicBase
	DwType                DT_UINT
	DwPad                 DT_UINT
	SnoTriggerEffectGroup DT_SNO
	ArConditions          DT_POLYMORPHIC_VARIABLEARRAY[*DT_INT64]
	BTriggersOnce         DT_INT
	Unk_74544d1           DT_INT
	FIsHFists             DT_INT
	ArThresholds          DT_VARIABLEARRAY[*DT_FLOAT]
}

func (t *Type_9d7affe) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoTriggerEffectGroup, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ArConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.BTriggersOnce, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.Unk_74544d1, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.FIsHFists, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.ArThresholds, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+80, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_9d7affe) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("SnoTriggerEffectGroup", &t.SnoTriggerEffectGroup)
	cb.Do("ArConditions", &t.ArConditions)
	cb.Do("BTriggersOnce", &t.BTriggersOnce)
	cb.Do("Unk_74544d1", &t.Unk_74544d1)
	cb.Do("FIsHFists", &t.FIsHFists)
	cb.Do("ArThresholds", &t.ArThresholds)
}

type Type_9de9416 struct {
	BBlinkForever          DT_INT
	FlBlinkerMinAlpha      DT_FLOAT
	FlBlinkerRotationSpeed DT_FLOAT
	FlBlinkerAlphaSpeed    DT_FLOAT
}

func (t *Type_9de9416) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.BBlinkForever, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.FlBlinkerMinAlpha, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.FlBlinkerRotationSpeed, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.FlBlinkerAlphaSpeed, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_9de9416) Walk(cb WalkCallback) {
	cb.Do("BBlinkForever", &t.BBlinkForever)
	cb.Do("FlBlinkerMinAlpha", &t.FlBlinkerMinAlpha)
	cb.Do("FlBlinkerRotationSpeed", &t.FlBlinkerRotationSpeed)
	cb.Do("FlBlinkerAlphaSpeed", &t.FlBlinkerAlphaSpeed)
}

type UICheckBoxStyle struct {
	// Inherits UIButtonStyle
	// Inherits UITextStyle
	// Inherits UIWindowStyle
	// Inherits UIControlStyle
	// Inherits PolymorphicBase
	DwType                    DT_UINT
	DwPad                     DT_UINT
	HParentStyle              UIControlHandle
	Unk_441f783               DT_INT64
	M_eHasModifiedPowerTagMap DT_TAGMAP[*DT_ENUM]
	TConsoleInput             UIControlConsoleInput
	Unk_b4f614c               DT_TAGMAP[*DT_ENUM]
	TFont                     UIControlFont
	Unk_4741819               DT_TAGMAP[*DT_ENUM]
	TIcon                     UIControlIcon
	TClickSounds              UIControlClickSounds
	Unk_10f81f0               DT_TAGMAP[*DT_ENUM]
	Unk_c12ea3b               DT_TAGMAP[*DT_ENUM]
}

func (t *UICheckBoxStyle) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.HParentStyle, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_441f783, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.M_eHasModifiedPowerTagMap, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.TConsoleInput, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.Unk_b4f614c, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.TFont, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.Unk_4741819, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.TIcon, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.TClickSounds, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+144, &t.Unk_10f81f0, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+160, &t.Unk_c12ea3b, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+176, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *UICheckBoxStyle) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("HParentStyle", &t.HParentStyle)
	cb.Do("Unk_441f783", &t.Unk_441f783)
	cb.Do("M_eHasModifiedPowerTagMap", &t.M_eHasModifiedPowerTagMap)
	cb.Do("TConsoleInput", &t.TConsoleInput)
	cb.Do("Unk_b4f614c", &t.Unk_b4f614c)
	cb.Do("TFont", &t.TFont)
	cb.Do("Unk_4741819", &t.Unk_4741819)
	cb.Do("TIcon", &t.TIcon)
	cb.Do("TClickSounds", &t.TClickSounds)
	cb.Do("Unk_10f81f0", &t.Unk_10f81f0)
	cb.Do("Unk_c12ea3b", &t.Unk_c12ea3b)
}

type BiomeDefinition struct {
	DwFlags              DT_UINT
	Unk_742ea83          DT_FLOAT
	ArBiomeClutters      DT_FIXEDARRAY[*BiomeClutter]
	ArMediumBiomeObjects DT_VARIABLEARRAY[*MediumBiomeObject]
	ArLargeBiomeObjects  DT_VARIABLEARRAY[*LargeBiomeObject]
}

func (t *BiomeDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.Unk_742ea83, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.ArBiomeClutters, r, &Options{
		ArrayLength: 4,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1040, &t.ArMediumBiomeObjects, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1056, &t.ArLargeBiomeObjects, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+1072, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *BiomeDefinition) Walk(cb WalkCallback) {
	cb.Do("DwFlags", &t.DwFlags)
	cb.Do("Unk_742ea83", &t.Unk_742ea83)
	cb.Do("ArBiomeClutters", &t.ArBiomeClutters)
	cb.Do("ArMediumBiomeObjects", &t.ArMediumBiomeObjects)
	cb.Do("ArLargeBiomeObjects", &t.ArLargeBiomeObjects)
}

type WorldDefinition struct {
	PtServerData       DT_VARIABLEARRAY[*WorldServerData]
	ELayoutType        DT_ENUM
	FlGridSize         DT_FLOAT
	TEnvironment       Environment
	FlDeformationScale DT_FLOAT
	UFlags             DT_UINT
	Unk_4194d72        DT_SNO
	SnoSubzoneDefault  DT_SNO
	ArDRLGLevelAreas   DT_VARIABLEARRAY[*DT_SNO]
	FHasZoneMap        DT_INT
	Unk_675bda3        DT_VARIABLEARRAY[*ScreenStaticCamps]
	DwAppearanceFlags  DT_UINT
	EDungeonFlavorType DT_ENUM
	TMatTexCloud       MaterialTexture
	TMatTexCloud2      MaterialTexture
	FlCloudScale       DT_FLOAT
	TZoneMapParams     ZoneMapParams
}

func (t *WorldDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.PtServerData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ELayoutType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.FlGridSize, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.TEnvironment, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+140, &t.FlDeformationScale, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+144, &t.UFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+148, &t.Unk_4194d72, r, &Options{
		Flags: 1,
		Group: 26,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+152, &t.SnoSubzoneDefault, r, &Options{
		Flags: 1,
		Group: 80,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+160, &t.ArDRLGLevelAreas, r, &Options{Group: 22}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+176, &t.FHasZoneMap, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+184, &t.Unk_675bda3, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+200, &t.DwAppearanceFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+204, &t.EDungeonFlavorType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+208, &t.TMatTexCloud, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+248, &t.TMatTexCloud2, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+288, &t.FlCloudScale, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+296, &t.TZoneMapParams, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+408, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *WorldDefinition) Walk(cb WalkCallback) {
	cb.Do("PtServerData", &t.PtServerData)
	cb.Do("ELayoutType", &t.ELayoutType)
	cb.Do("FlGridSize", &t.FlGridSize)
	cb.Do("TEnvironment", &t.TEnvironment)
	cb.Do("FlDeformationScale", &t.FlDeformationScale)
	cb.Do("UFlags", &t.UFlags)
	cb.Do("Unk_4194d72", &t.Unk_4194d72)
	cb.Do("SnoSubzoneDefault", &t.SnoSubzoneDefault)
	cb.Do("ArDRLGLevelAreas", &t.ArDRLGLevelAreas)
	cb.Do("FHasZoneMap", &t.FHasZoneMap)
	cb.Do("Unk_675bda3", &t.Unk_675bda3)
	cb.Do("DwAppearanceFlags", &t.DwAppearanceFlags)
	cb.Do("EDungeonFlavorType", &t.EDungeonFlavorType)
	cb.Do("TMatTexCloud", &t.TMatTexCloud)
	cb.Do("TMatTexCloud2", &t.TMatTexCloud2)
	cb.Do("FlCloudScale", &t.FlCloudScale)
	cb.Do("TZoneMapParams", &t.TZoneMapParams)
}

type AnimSyncGroup struct {
	ESyncGroupType DT_ENUM
}

func (t *AnimSyncGroup) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.ESyncGroupType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+4, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *AnimSyncGroup) Walk(cb WalkCallback) {
	cb.Do("ESyncGroupType", &t.ESyncGroupType)
}

type ScriptEventParamRecipe struct {
	// Inherits ScriptEventParamBase
	// Inherits PolymorphicBase
	DwType     DT_UINT
	EParamType DT_ENUM
	DwPad      DT_UINT
	SnoRecipe  DT_SNO
}

func (t *ScriptEventParamRecipe) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.EParamType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SnoRecipe, r, &Options{
		Flags: 513,
		Group: 49,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ScriptEventParamRecipe) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("EParamType", &t.EParamType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("SnoRecipe", &t.SnoRecipe)
}

type MarkerHiddenCacheGizmoData struct {
	GbidHiddenCache DT_GBID
}

func (t *MarkerHiddenCacheGizmoData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.GbidHiddenCache, r, &Options{
		Flags: 1,
		Group: 28,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+4, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *MarkerHiddenCacheGizmoData) Walk(cb WalkCallback) {
	cb.Do("GbidHiddenCache", &t.GbidHiddenCache)
}

type Type_b0c47c9 struct{}

func (t *Type_b0c47c9) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if _, err := r.Seek(p+1, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_b0c47c9) Walk(cb WalkCallback) {}

type BiomeClutter struct {
	// Inherits BiomeItem
	// Inherits PolymorphicBase
	DwType                 DT_UINT
	DwPad                  DT_UINT
	FlRadius               DT_FLOAT
	Unk_2fd1cdb            DT_FLOAT
	TAllowedScaleRange     DT_RANGE[*DT_FLOAT]
	Unk_87acb69            DT_RANGE[*DT_FLOAT]
	Unk_87acb6a            DT_RANGE[*DT_FLOAT]
	Unk_87acb6b            DT_RANGE[*DT_FLOAT]
	Unk_9854b6a            DT_RANGE[*DT_FLOAT]
	FlChance               DT_FLOAT
	DwFlags                DT_UINT
	Unk_2a8c4b6            DT_FLOAT
	AAzimuthAngle          DT_FLOAT
	AAltitudeAngle         DT_FLOAT
	Unk_6ead041            DT_RANGE[*DT_FLOAT]
	TParametricSettings    ParametricSettings
	ArProximityAdjustments DT_VARIABLEARRAY[*ProximityAdjustment]
	SnoClutter             DT_SNO
	SzLookName             DT_UINT
	DwShaderMapOverride    DT_UINT
}

func (t *BiomeClutter) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.FlRadius, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.Unk_2fd1cdb, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.TAllowedScaleRange, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.Unk_87acb69, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.Unk_87acb6a, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.Unk_87acb6b, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.Unk_9854b6a, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.FlChance, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.DwFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_2a8c4b6, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.AAzimuthAngle, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.AAltitudeAngle, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.Unk_6ead041, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.TParametricSettings, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+224, &t.ArProximityAdjustments, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+240, &t.SnoClutter, r, &Options{
		Flags: 1,
		Group: 9,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+244, &t.SzLookName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+248, &t.DwShaderMapOverride, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+256, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *BiomeClutter) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("FlRadius", &t.FlRadius)
	cb.Do("Unk_2fd1cdb", &t.Unk_2fd1cdb)
	cb.Do("TAllowedScaleRange", &t.TAllowedScaleRange)
	cb.Do("Unk_87acb69", &t.Unk_87acb69)
	cb.Do("Unk_87acb6a", &t.Unk_87acb6a)
	cb.Do("Unk_87acb6b", &t.Unk_87acb6b)
	cb.Do("Unk_9854b6a", &t.Unk_9854b6a)
	cb.Do("FlChance", &t.FlChance)
	cb.Do("DwFlags", &t.DwFlags)
	cb.Do("Unk_2a8c4b6", &t.Unk_2a8c4b6)
	cb.Do("AAzimuthAngle", &t.AAzimuthAngle)
	cb.Do("AAltitudeAngle", &t.AAltitudeAngle)
	cb.Do("Unk_6ead041", &t.Unk_6ead041)
	cb.Do("TParametricSettings", &t.TParametricSettings)
	cb.Do("ArProximityAdjustments", &t.ArProximityAdjustments)
	cb.Do("SnoClutter", &t.SnoClutter)
	cb.Do("SzLookName", &t.SzLookName)
	cb.Do("DwShaderMapOverride", &t.DwShaderMapOverride)
}

type Type_b5002e1 struct {
	GbidSpawnLocType        DT_GBID
	FlGlobalCooldownSeconds DT_FLOAT
}

func (t *Type_b5002e1) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.GbidSpawnLocType, r, &Options{
		Flags: 1,
		Group: 20,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.FlGlobalCooldownSeconds, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_b5002e1) Walk(cb WalkCallback) {
	cb.Do("GbidSpawnLocType", &t.GbidSpawnLocType)
	cb.Do("FlGlobalCooldownSeconds", &t.FlGlobalCooldownSeconds)
}

type ModifyCurrencyMessage struct {
	THeader       RequiredRequestMessageHeader
	ECurrencyType DT_ENUM
	NOpAmount     DT_INT64
}

func (t *ModifyCurrencyMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.ECurrencyType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.NOpAmount, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ModifyCurrencyMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("ECurrencyType", &t.ECurrencyType)
	cb.Do("NOpAmount", &t.NOpAmount)
}

type JoinGameFailedMessage struct {
	THeader RequiredMessageHeader
	Reason  DT_UINT
}

func (t *JoinGameFailedMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Reason, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+20, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *JoinGameFailedMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("Reason", &t.Reason)
}

type Type_bef5a4a struct {
	NX          DT_INT
	NY          DT_INT
	Unk_2ec05dd DT_VARIABLEARRAY[*Type_ccd96a71]
}

func (t *Type_bef5a4a) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.NX, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.NY, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.Unk_2ec05dd, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_bef5a4a) Walk(cb WalkCallback) {
	cb.Do("NX", &t.NX)
	cb.Do("NY", &t.NY)
	cb.Do("Unk_2ec05dd", &t.Unk_2ec05dd)
}

type MarkerEncounterData struct {
	// Inherits MarkerDataBase
	// Inherits PolymorphicBase
	DwType                        DT_UINT
	DwPad                         DT_UINT
	ArActorGroups                 DT_VARIABLEARRAY[*DT_GBID]
	ArPrefabScopedActorGroups     DT_VARIABLEARRAY[*DT_GBID]
	SnoScript                     DT_VARIABLEARRAY[*DT_SNO]
	Unk_a497096                   DT_SNO
	Unk_7a5aecd                   DT_SNO
	Unk_8e70eff                   DT_ENUM
	Unk_c627b16                   DT_INT
	SnoPhasingVisibilityCondition DT_SNO
}

func (t *MarkerEncounterData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.ArActorGroups, r, &Options{
		Flags: 1,
		Group: 24,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.ArPrefabScopedActorGroups, r, &Options{
		Flags: 1,
		Group: 51,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.SnoScript, r, &Options{
		Flags: 1,
		Group: 35,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.Unk_a497096, r, &Options{
		Flags: 1,
		Group: 3,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.Unk_7a5aecd, r, &Options{
		Flags: 1,
		Group: 8,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_8e70eff, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.Unk_c627b16, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.SnoPhasingVisibilityCondition, r, &Options{
		Flags: 1,
		Group: 51,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+88, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *MarkerEncounterData) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("ArActorGroups", &t.ArActorGroups)
	cb.Do("ArPrefabScopedActorGroups", &t.ArPrefabScopedActorGroups)
	cb.Do("SnoScript", &t.SnoScript)
	cb.Do("Unk_a497096", &t.Unk_a497096)
	cb.Do("Unk_7a5aecd", &t.Unk_7a5aecd)
	cb.Do("Unk_8e70eff", &t.Unk_8e70eff)
	cb.Do("Unk_c627b16", &t.Unk_c627b16)
	cb.Do("SnoPhasingVisibilityCondition", &t.SnoPhasingVisibilityCondition)
}

type CriteriaModifier struct {
	ENecessaryCondition DT_ENUM
	EOperandType        DT_ENUM
	Snoname             DT_SNO_NAME
	EPowerCategory      DT_ENUM
	ESlot               DT_ENUM
	ECrafterType        DT_ENUM
	ECCType             DT_ENUM
	SzName              DT_UINT
	EIQL                DT_ENUM
	EMonsterRarity      DT_ENUM
	EDamageType         DT_ENUM
	EShapeshiftForm     DT_ENUM
	EDungeonFlavorType  DT_ENUM
	EDungeonTier        DT_ENUM
	EZone               DT_ENUM
	EWorldTier          DT_ENUM
	EParagonNodeRarity  DT_ENUM
	UVal                DT_UINT
	EBountyType         DT_ENUM
	ERogueImbueType     DT_ENUM
	GbidPetType         DT_GBID
	EGizmoType          DT_ENUM
	TDateTime           DT_INT64
	UOperand            DT_INT64
}

func (t *CriteriaModifier) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.ENecessaryCondition, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.EOperandType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.Snoname, r, &Options{Flags: 513}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.EPowerCategory, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.ESlot, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ECrafterType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.ECCType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.SzName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.EIQL, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.EMonsterRarity, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.EDamageType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.EShapeshiftForm, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.EDungeonFlavorType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.EDungeonTier, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+60, &t.EZone, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.EWorldTier, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.EParagonNodeRarity, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.UVal, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.EBountyType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.ERogueImbueType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.GbidPetType, r, &Options{
		Flags: 1,
		Group: 23,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.EGizmoType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.TDateTime, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+104, &t.UOperand, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+112, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *CriteriaModifier) Walk(cb WalkCallback) {
	cb.Do("ENecessaryCondition", &t.ENecessaryCondition)
	cb.Do("EOperandType", &t.EOperandType)
	cb.Do("Snoname", &t.Snoname)
	cb.Do("EPowerCategory", &t.EPowerCategory)
	cb.Do("ESlot", &t.ESlot)
	cb.Do("ECrafterType", &t.ECrafterType)
	cb.Do("ECCType", &t.ECCType)
	cb.Do("SzName", &t.SzName)
	cb.Do("EIQL", &t.EIQL)
	cb.Do("EMonsterRarity", &t.EMonsterRarity)
	cb.Do("EDamageType", &t.EDamageType)
	cb.Do("EShapeshiftForm", &t.EShapeshiftForm)
	cb.Do("EDungeonFlavorType", &t.EDungeonFlavorType)
	cb.Do("EDungeonTier", &t.EDungeonTier)
	cb.Do("EZone", &t.EZone)
	cb.Do("EWorldTier", &t.EWorldTier)
	cb.Do("EParagonNodeRarity", &t.EParagonNodeRarity)
	cb.Do("UVal", &t.UVal)
	cb.Do("EBountyType", &t.EBountyType)
	cb.Do("ERogueImbueType", &t.ERogueImbueType)
	cb.Do("GbidPetType", &t.GbidPetType)
	cb.Do("EGizmoType", &t.EGizmoType)
	cb.Do("TDateTime", &t.TDateTime)
	cb.Do("UOperand", &t.UOperand)
}

type MailSendMessage struct {
	THeader    RequiredMessageHeader
	NToAccount DT_INT64
}

func (t *MailSendMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.NToAccount, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *MailSendMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("NToAccount", &t.NToAccount)
}

type TriggerEventFadeOtherPlayers struct {
	// Inherits TriggerEventRangedDuration
	// Inherits TriggerEvent
	// Inherits PolymorphicBase
	DwType           DT_UINT
	TConditions      TriggerConditions
	FGenerated       DT_INT
	Unk_6cba752      DT_INT
	DwParentActorID  DT_UINT
	TDuration        DT_FLOAT
	DwTriggerFlags   DT_UINT
	DwTriggerFlagsEx DT_UINT
	TCleanup         TriggerCleanup
	Unk_49e9257      DT_INT
	Unk_5490979      DT_INT
	DwPad            DT_UINT
}

func (t *TriggerEventFadeOtherPlayers) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.FGenerated, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_6cba752, r, &Options{Flags: 16}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.DwParentActorID, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.TDuration, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.DwTriggerFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.DwTriggerFlagsEx, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.TCleanup, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+116, &t.Unk_49e9257, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.Unk_5490979, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+124, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+128, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TriggerEventFadeOtherPlayers) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("TConditions", &t.TConditions)
	cb.Do("FGenerated", &t.FGenerated)
	cb.Do("Unk_6cba752", &t.Unk_6cba752)
	cb.Do("DwParentActorID", &t.DwParentActorID)
	cb.Do("TDuration", &t.TDuration)
	cb.Do("DwTriggerFlags", &t.DwTriggerFlags)
	cb.Do("DwTriggerFlagsEx", &t.DwTriggerFlagsEx)
	cb.Do("TCleanup", &t.TCleanup)
	cb.Do("Unk_49e9257", &t.Unk_49e9257)
	cb.Do("Unk_5490979", &t.Unk_5490979)
	cb.Do("DwPad", &t.DwPad)
}

type ScrollbarStyle struct {
	TElements DT_FIXEDARRAY[*ScrollbarElementImages]
}

func (t *ScrollbarStyle) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.TElements, r, &Options{
		ArrayLength: 5,
		Flags:       1,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+60, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ScrollbarStyle) Walk(cb WalkCallback) {
	cb.Do("TElements", &t.TElements)
}

type Type_c62084e struct {
	THeader RequiredRequestMessageHeader
	NData   DT_INT
}

func (t *Type_c62084e) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.NData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_c62084e) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("NData", &t.NData)
}

type PlayHotbarUIFlourishMessage struct {
	THeader               RequiredCommandFrameMessageHeader
	DwPlayerGameAccountId DT_UINT
	SnoPower              DT_SNO
}

func (t *PlayHotbarUIFlourishMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPlayerGameAccountId, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SnoPower, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+28, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PlayHotbarUIFlourishMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("DwPlayerGameAccountId", &t.DwPlayerGameAccountId)
	cb.Do("SnoPower", &t.SnoPower)
}

type UIMinimapStyle struct {
	// Inherits UIWindowStyle
	// Inherits UIControlStyle
	// Inherits PolymorphicBase
	DwType                    DT_UINT
	DwPad                     DT_UINT
	HParentStyle              UIControlHandle
	Unk_441f783               DT_INT64
	M_eHasModifiedPowerTagMap DT_TAGMAP[*DT_ENUM]
	TConsoleInput             UIControlConsoleInput
	Unk_b4f614c               DT_TAGMAP[*DT_ENUM]
}

func (t *UIMinimapStyle) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.HParentStyle, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_441f783, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.M_eHasModifiedPowerTagMap, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.TConsoleInput, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.Unk_b4f614c, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+80, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *UIMinimapStyle) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("HParentStyle", &t.HParentStyle)
	cb.Do("Unk_441f783", &t.Unk_441f783)
	cb.Do("M_eHasModifiedPowerTagMap", &t.M_eHasModifiedPowerTagMap)
	cb.Do("TConsoleInput", &t.TConsoleInput)
	cb.Do("Unk_b4f614c", &t.Unk_b4f614c)
}

type Type_cbfce3e struct {
	// Inherits MarkerSplineData
	// Inherits MarkerDataBase
	// Inherits PolymorphicBase
	DwType             DT_UINT
	EInterpolationMode DT_ENUM
	Unk_a3f1699        DT_FLOAT
	Unk_4a4ab0e        DT_VARIABLEARRAY[*Type_cc5838a]
	FlTotalLength      DT_FLOAT
	EType              DT_ENUM
	ERoadType          DT_ENUM
	DwPad              DT_UINT
}

func (t *Type_cbfce3e) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.EInterpolationMode, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.Unk_a3f1699, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_4a4ab0e, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.FlTotalLength, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.EType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.ERoadType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+56, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_cbfce3e) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("EInterpolationMode", &t.EInterpolationMode)
	cb.Do("Unk_a3f1699", &t.Unk_a3f1699)
	cb.Do("Unk_4a4ab0e", &t.Unk_4a4ab0e)
	cb.Do("FlTotalLength", &t.FlTotalLength)
	cb.Do("EType", &t.EType)
	cb.Do("ERoadType", &t.ERoadType)
	cb.Do("DwPad", &t.DwPad)
}

type Type_cc5838a struct {
	SzName      DT_UINT
	Transform   PRTransform
	Unk_644027a DT_FLOAT
	Unk_83cc220 DT_RANGE[*DT_INT]
	Unk_81a5ef8 DT_FLOAT
	Unk_2e8bbc0 DT_RANGE[*DT_INT]
	Unk_2cc466b DT_FLOAT
	Unk_375223b DT_INT
}

func (t *Type_cc5838a) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SzName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.Transform, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.Unk_644027a, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.Unk_83cc220, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.Unk_81a5ef8, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.Unk_2e8bbc0, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.Unk_2cc466b, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+60, &t.Unk_375223b, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+64, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_cc5838a) Walk(cb WalkCallback) {
	cb.Do("SzName", &t.SzName)
	cb.Do("Transform", &t.Transform)
	cb.Do("Unk_644027a", &t.Unk_644027a)
	cb.Do("Unk_83cc220", &t.Unk_83cc220)
	cb.Do("Unk_81a5ef8", &t.Unk_81a5ef8)
	cb.Do("Unk_2e8bbc0", &t.Unk_2e8bbc0)
	cb.Do("Unk_2cc466b", &t.Unk_2cc466b)
	cb.Do("Unk_375223b", &t.Unk_375223b)
}

type AddSocketResultMessage struct {
	THeader  RequiredMessageHeader
	BSuccess DT_INT
	AnnItem  DT_ACD_NETWORK_NAME
}

func (t *AddSocketResultMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BSuccess, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.AnnItem, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+28, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *AddSocketResultMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("BSuccess", &t.BSuccess)
	cb.Do("AnnItem", &t.AnnItem)
}

type PowerConditionIsPower struct {
	// Inherits PowerConditionBase
	// Inherits PolymorphicBase
	DwType   DT_UINT
	BInverse DT_INT
	DwPad    DT_UINT
	SnoPower DT_SNO
}

func (t *PowerConditionIsPower) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BInverse, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SnoPower, r, &Options{
		Flags: 513,
		Group: 29,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PowerConditionIsPower) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("BInverse", &t.BInverse)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("SnoPower", &t.SnoPower)
}

type AffixDefinition struct {
	DwFlags                     DT_UINT
	EMagicType                  DT_ENUM
	ECategory                   DT_ENUM
	NItemPowerMin               DT_INT
	NItemPowerMax               DT_INT
	TCost                       DT_STRING_FORMULA
	SnoRareNamePrefixStringList DT_SNO
	SnoRareNameSuffixStringList DT_SNO
	GbidAffixFamily             DT_GBID
	FAllowedForPlayerClass      DT_FIXEDARRAY[*DT_INT]
	ArAllowedItemLabels         DT_VARIABLEARRAY[*DT_ENUM]
	DwAllowedQualityLevels      DT_UINT
	EAffixType                  DT_ENUM
	PtItemAffixAttributes       DT_VARIABLEARRAY[*ItemAffixAttribute]
	ArStaticValues              DT_VARIABLEARRAY[*DT_FLOAT]
	SnoPassivePower             DT_SNO
	SnoClassRequirement         DT_SNO
	ArAffixSkillTags            DT_VARIABLEARRAY[*DT_GBID]
	ArPowerToModify             DT_VARIABLEARRAY[*DT_SNO]
	ArSkillTagsToAdd            DT_VARIABLEARRAY[*DT_GBID]
	ArSkillTagsToRemove         DT_VARIABLEARRAY[*DT_GBID]
	Unk_4cb9610                 DT_GBID
}

func (t *AffixDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.EMagicType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.ECategory, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.NItemPowerMin, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.NItemPowerMax, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.TCost, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.SnoRareNamePrefixStringList, r, &Options{
		Flags: 1,
		Group: 42,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.SnoRareNameSuffixStringList, r, &Options{
		Flags: 1,
		Group: 42,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.GbidAffixFamily, r, &Options{
		Flags: 1,
		Group: 18,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.FAllowedForPlayerClass, r, &Options{
		ArrayLength: 5,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.ArAllowedItemLabels, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.DwAllowedQualityLevels, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+116, &t.EAffixType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.PtItemAffixAttributes, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+136, &t.ArStaticValues, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+152, &t.SnoPassivePower, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+156, &t.SnoClassRequirement, r, &Options{
		Flags: 513,
		Group: 74,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+160, &t.ArAffixSkillTags, r, &Options{
		Flags: 1,
		Group: 56,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+176, &t.ArPowerToModify, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+192, &t.ArSkillTagsToAdd, r, &Options{
		Flags: 1,
		Group: 56,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+208, &t.ArSkillTagsToRemove, r, &Options{
		Flags: 1,
		Group: 56,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+224, &t.Unk_4cb9610, r, &Options{
		Flags: 1,
		Group: 63,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+232, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *AffixDefinition) Walk(cb WalkCallback) {
	cb.Do("DwFlags", &t.DwFlags)
	cb.Do("EMagicType", &t.EMagicType)
	cb.Do("ECategory", &t.ECategory)
	cb.Do("NItemPowerMin", &t.NItemPowerMin)
	cb.Do("NItemPowerMax", &t.NItemPowerMax)
	cb.Do("TCost", &t.TCost)
	cb.Do("SnoRareNamePrefixStringList", &t.SnoRareNamePrefixStringList)
	cb.Do("SnoRareNameSuffixStringList", &t.SnoRareNameSuffixStringList)
	cb.Do("GbidAffixFamily", &t.GbidAffixFamily)
	cb.Do("FAllowedForPlayerClass", &t.FAllowedForPlayerClass)
	cb.Do("ArAllowedItemLabels", &t.ArAllowedItemLabels)
	cb.Do("DwAllowedQualityLevels", &t.DwAllowedQualityLevels)
	cb.Do("EAffixType", &t.EAffixType)
	cb.Do("PtItemAffixAttributes", &t.PtItemAffixAttributes)
	cb.Do("ArStaticValues", &t.ArStaticValues)
	cb.Do("SnoPassivePower", &t.SnoPassivePower)
	cb.Do("SnoClassRequirement", &t.SnoClassRequirement)
	cb.Do("ArAffixSkillTags", &t.ArAffixSkillTags)
	cb.Do("ArPowerToModify", &t.ArPowerToModify)
	cb.Do("ArSkillTagsToAdd", &t.ArSkillTagsToAdd)
	cb.Do("ArSkillTagsToRemove", &t.ArSkillTagsToRemove)
	cb.Do("Unk_4cb9610", &t.Unk_4cb9610)
}

type ExperienceLevel struct {
	NDeltaXP              DT_INT64
	Unk_66201eb           DT_INT
	FlLifeStealMultiplier DT_FLOAT
}

func (t *ExperienceLevel) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.NDeltaXP, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.Unk_66201eb, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.FlLifeStealMultiplier, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ExperienceLevel) Walk(cb WalkCallback) {
	cb.Do("NDeltaXP", &t.NDeltaXP)
	cb.Do("Unk_66201eb", &t.Unk_66201eb)
	cb.Do("FlLifeStealMultiplier", &t.FlLifeStealMultiplier)
}

type OutroPortalEffectMessage struct {
	THeader      RequiredMessageHeader
	DwPortalType DT_UINT
}

func (t *OutroPortalEffectMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.DwPortalType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+20, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *OutroPortalEffectMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("DwPortalType", &t.DwPortalType)
}

type UIEffect struct {
	SnoEffectGroup DT_SNO
	Unk_25f3563    DT_CSTRING[*DT_BYTE]
	EScaleMethod   DT_ENUM
	VecScale       DT_VECTOR2D
}

func (t *UIEffect) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoEffectGroup, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.Unk_25f3563, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.EScaleMethod, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.VecScale, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+40, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *UIEffect) Walk(cb WalkCallback) {
	cb.Do("SnoEffectGroup", &t.SnoEffectGroup)
	cb.Do("Unk_25f3563", &t.Unk_25f3563)
	cb.Do("EScaleMethod", &t.EScaleMethod)
	cb.Do("VecScale", &t.VecScale)
}

type TryImbueAffixMessage struct {
	THeader       RequiredMessageHeader
	AnnTargetItem DT_ACD_NETWORK_NAME
	BFromItem     DT_INT
	AnnAspectItem DT_ACD_NETWORK_NAME
	SnoAspect     DT_SNO
}

func (t *TryImbueAffixMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.AnnTargetItem, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.BFromItem, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.AnnAspectItem, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.SnoAspect, r, &Options{
		Flags: 1,
		Group: 128,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+40, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TryImbueAffixMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("AnnTargetItem", &t.AnnTargetItem)
	cb.Do("BFromItem", &t.BFromItem)
	cb.Do("AnnAspectItem", &t.AnnAspectItem)
	cb.Do("SnoAspect", &t.SnoAspect)
}

type SetItemBonusDefinition struct {
	PtTiers DT_VARIABLEARRAY[*SetBonusTier]
}

func (t *SetItemBonusDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.PtTiers, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *SetItemBonusDefinition) Walk(cb WalkCallback) {
	cb.Do("PtTiers", &t.PtTiers)
}

type GBHandle struct {
	EType DT_ENUM
	Gbid  DT_GBID
}

func (t *GBHandle) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.EType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.Gbid, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *GBHandle) Walk(cb WalkCallback) {
	cb.Do("EType", &t.EType)
	cb.Do("Gbid", &t.Gbid)
}

type PowerCastingEffectOverride struct {
	Unk_aa3fdee               DT_SNO
	SnoCastingEffectGroup     DT_SNO
	SnoAutoCastingEffectGroup DT_SNO
}

func (t *PowerCastingEffectOverride) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Unk_aa3fdee, r, &Options{
		Flags: 1,
		Group: 104,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.SnoCastingEffectGroup, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.SnoAutoCastingEffectGroup, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+12, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PowerCastingEffectOverride) Walk(cb WalkCallback) {
	cb.Do("Unk_aa3fdee", &t.Unk_aa3fdee)
	cb.Do("SnoCastingEffectGroup", &t.SnoCastingEffectGroup)
	cb.Do("SnoAutoCastingEffectGroup", &t.SnoAutoCastingEffectGroup)
}

type ScriptEventParamString struct {
	// Inherits ScriptEventParamBase
	// Inherits PolymorphicBase
	DwType       DT_UINT
	EParamType   DT_ENUM
	DwPad        DT_UINT
	DwStringHash DT_UINT
	SzString     DT_CSTRING[*DT_BYTE]
}

func (t *ScriptEventParamString) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.EParamType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.DwStringHash, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.SzString, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ScriptEventParamString) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("EParamType", &t.EParamType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("DwStringHash", &t.DwStringHash)
	cb.Do("SzString", &t.SzString)
}

type NPCComponentHardpointOverride struct {
	THardpointOverride HardpointLink
	PositionOffset     DT_VECTOR3D
	EComponentType     DT_ENUM
	SzComponent        DT_UINT
}

func (t *NPCComponentHardpointOverride) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THardpointOverride, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.PositionOffset, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.EComponentType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SzComponent, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+28, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *NPCComponentHardpointOverride) Walk(cb WalkCallback) {
	cb.Do("THardpointOverride", &t.THardpointOverride)
	cb.Do("PositionOffset", &t.PositionOffset)
	cb.Do("EComponentType", &t.EComponentType)
	cb.Do("SzComponent", &t.SzComponent)
}

type Type_e04c1a6 struct {
	FlTime    DT_FLOAT
	VPosition DT_VECTOR3D
}

func (t *Type_e04c1a6) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.FlTime, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.VPosition, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_e04c1a6) Walk(cb WalkCallback) {
	cb.Do("FlTime", &t.FlTime)
	cb.Do("VPosition", &t.VPosition)
}

type UIControlStyle struct {
	// Inherits PolymorphicBase
	DwType                    DT_UINT
	DwPad                     DT_UINT
	HParentStyle              UIControlHandle
	Unk_441f783               DT_INT64
	M_eHasModifiedPowerTagMap DT_TAGMAP[*DT_ENUM]
}

func (t *UIControlStyle) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.HParentStyle, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_441f783, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.M_eHasModifiedPowerTagMap, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *UIControlStyle) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("HParentStyle", &t.HParentStyle)
	cb.Do("Unk_441f783", &t.Unk_441f783)
	cb.Do("M_eHasModifiedPowerTagMap", &t.M_eHasModifiedPowerTagMap)
}

type OnAssistBuffCallback struct {
	// Inherits BuffCallbackBase
	// Inherits PolymorphicBase
	DwType                DT_UINT
	DwPad                 DT_UINT
	SnoTriggerEffectGroup DT_SNO
	ArConditions          DT_POLYMORPHIC_VARIABLEARRAY[*DT_INT64]
}

func (t *OnAssistBuffCallback) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoTriggerEffectGroup, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ArConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *OnAssistBuffCallback) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("SnoTriggerEffectGroup", &t.SnoTriggerEffectGroup)
	cb.Do("ArConditions", &t.ArConditions)
}

type SharedServerWorldPlace struct {
	Wp       DT_VECTOR3D
	IdSWorld DT_SHARED_SERVER_DATA_ID
}

func (t *SharedServerWorldPlace) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Wp, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.IdSWorld, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+20, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *SharedServerWorldPlace) Walk(cb WalkCallback) {
	cb.Do("Wp", &t.Wp)
	cb.Do("IdSWorld", &t.IdSWorld)
}

type ConditionDefinition struct {
	PtRootCondition DT_POLYMORPHIC_VARIABLEARRAY[*Subcondition]
}

func (t *ConditionDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.PtRootCondition, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ConditionDefinition) Walk(cb WalkCallback) {
	cb.Do("PtRootCondition", &t.PtRootCondition)
}

type WwiseName struct {
	UID DT_UINT
}

func (t *WwiseName) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.UID, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+4, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *WwiseName) Walk(cb WalkCallback) {
	cb.Do("UID", &t.UID)
}

type EffectGroupScaleYKeyData struct {
	// Inherits EffectGroupKeyData
	// Inherits PolymorphicBase
	DwType     DT_UINT
	DwPad      DT_UINT
	ArKeyItems DT_VARIABLEARRAY[*EffectGroupKey]
}

func (t *EffectGroupScaleYKeyData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.ArKeyItems, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *EffectGroupScaleYKeyData) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("ArKeyItems", &t.ArKeyItems)
}

type RitualTetherEffectMessage struct {
	THeader    RequiredMessageHeader
	AnnFrom    DT_ACD_NETWORK_NAME
	TPlaceDest SharedServerWorldPlace
}

func (t *RitualTetherEffectMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.AnnFrom, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.TPlaceDest, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+44, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *RitualTetherEffectMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("AnnFrom", &t.AnnFrom)
	cb.Do("TPlaceDest", &t.TPlaceDest)
}

type OnPetDeathBuffCallback struct {
	// Inherits BuffCallbackBase
	// Inherits PolymorphicBase
	DwType                DT_UINT
	DwPad                 DT_UINT
	SnoTriggerEffectGroup DT_SNO
	ArConditions          DT_POLYMORPHIC_VARIABLEARRAY[*DT_INT64]
}

func (t *OnPetDeathBuffCallback) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoTriggerEffectGroup, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ArConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *OnPetDeathBuffCallback) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("SnoTriggerEffectGroup", &t.SnoTriggerEffectGroup)
	cb.Do("ArConditions", &t.ArConditions)
}

type ConsoleAwardDefinition struct {
	// Inherits PolymorphicBase
	DwType          DT_UINT
	UProfileAwardId DT_UINT
	DwPad           DT_UINT
}

func (t *ConsoleAwardDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.UProfileAwardId, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ConsoleAwardDefinition) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("UProfileAwardId", &t.UProfileAwardId)
	cb.Do("DwPad", &t.DwPad)
}

type Type_fe0bd4d struct {
	// Inherits TriggerEvent
	// Inherits PolymorphicBase
	DwType          DT_UINT
	DwPad           DT_UINT
	TConditions     TriggerConditions
	FGenerated      DT_INT
	Unk_6cba752     DT_INT
	DwParentActorID DT_UINT
}

func (t *Type_fe0bd4d) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.FGenerated, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_6cba752, r, &Options{Flags: 16}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.DwParentActorID, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+80, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_fe0bd4d) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("TConditions", &t.TConditions)
	cb.Do("FGenerated", &t.FGenerated)
	cb.Do("Unk_6cba752", &t.Unk_6cba752)
	cb.Do("DwParentActorID", &t.DwParentActorID)
}

type Capsule struct {
	Wp1      DT_VECTOR3D
	Wp2      DT_VECTOR3D
	FlRadius DT_FLOAT
}

func (t *Capsule) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Wp1, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.Wp2, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.FlRadius, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+28, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Capsule) Walk(cb WalkCallback) {
	cb.Do("Wp1", &t.Wp1)
	cb.Do("Wp2", &t.Wp2)
	cb.Do("FlRadius", &t.FlRadius)
}

type CardArt struct {
	HCardImage      DT_UINT
	HCardHoverImage DT_UINT
}

func (t *CardArt) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.HCardImage, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.HCardHoverImage, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *CardArt) Walk(cb WalkCallback) {
	cb.Do("HCardImage", &t.HCardImage)
	cb.Do("HCardHoverImage", &t.HCardHoverImage)
}

type MarkerWaypointGizmoData struct {
	ArWaypointEffects DT_FIXEDARRAY[*WaypointEffectInfo]
	Unk_92edf50       DT_SNO
	HZoneLabel        DT_UINT
	UEntranceGUID     DT_STARTLOC_NAME
}

func (t *MarkerWaypointGizmoData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.ArWaypointEffects, r, &Options{
		ArrayLength: 4,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+864, &t.Unk_92edf50, r, &Options{
		Flags: 513,
		Group: 31,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+868, &t.HZoneLabel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+872, &t.UEntranceGUID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+876, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *MarkerWaypointGizmoData) Walk(cb WalkCallback) {
	cb.Do("ArWaypointEffects", &t.ArWaypointEffects)
	cb.Do("Unk_92edf50", &t.Unk_92edf50)
	cb.Do("HZoneLabel", &t.HZoneLabel)
	cb.Do("UEntranceGUID", &t.UEntranceGUID)
}

type FatVertex struct {
	WpPos      DT_VECTOR3D
	WvNormal   DT_VECTOR3D
	RgbaColor  DT_FIXEDARRAY[*DT_RGBACOLOR]
	VUVSet     DT_FIXEDARRAY[*DT_VECTOR2D]
	VecTangent DT_VECTOR4D
}

func (t *FatVertex) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.WpPos, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.WvNormal, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.RgbaColor, r, &Options{
		ArrayLength: 2,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.VUVSet, r, &Options{
		ArrayLength: 4,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.VecTangent, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+80, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *FatVertex) Walk(cb WalkCallback) {
	cb.Do("WpPos", &t.WpPos)
	cb.Do("WvNormal", &t.WvNormal)
	cb.Do("RgbaColor", &t.RgbaColor)
	cb.Do("VUVSet", &t.VUVSet)
	cb.Do("VecTangent", &t.VecTangent)
}

type ParagonGlyphExperience struct {
	NDeltaXP DT_UINT
}

func (t *ParagonGlyphExperience) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.NDeltaXP, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+4, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ParagonGlyphExperience) Walk(cb WalkCallback) {
	cb.Do("NDeltaXP", &t.NDeltaXP)
}

type PrefetchWorldDataMessage struct {
	THeader    RequiredMessageHeader
	SnoWorld   DT_SNO
	SnoSubzone DT_SNO
}

func (t *PrefetchWorldDataMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoWorld, r, &Options{
		Flags: 1,
		Group: 48,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.SnoSubzone, r, &Options{
		Flags: 1,
		Group: 80,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PrefetchWorldDataMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("SnoWorld", &t.SnoWorld)
	cb.Do("SnoSubzone", &t.SnoSubzone)
}

type LogoutContextMessage struct {
	THeader        RequiredMessageHeader
	ELogoutContext DT_ENUM
}

func (t *LogoutContextMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.ELogoutContext, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+20, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *LogoutContextMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("ELogoutContext", &t.ELogoutContext)
}

type ACDEnterKnownMessage struct {
	THeader                        RequiredMessageHeader
	Ann                            DT_ACD_NETWORK_NAME
	SnoActor                       DT_SNO
	DwFlags                        DT_UINT
	ELocationType                  DT_ENUM
	TWorldLocationData             DT_OPTIONAL[*WorldLocationMessageData]
	TInvLocationData               DT_OPTIONAL[*InventoryLocationMessageData]
	Unk_aa2bbb9                    DT_SNO_NAME
	NMonsterRarity                 DT_OPTIONAL[*DT_INT]
	NItemQuality                   DT_OPTIONAL[*DT_INT]
	NItemQualityModifier           DT_OPTIONAL[*DT_INT]
	DwLookHash                     DT_UINT
	DwShaderMapOverride            DT_UINT
	SnoMarkerSet                   DT_OPTIONAL[*DT_SNO]
	NMarkerId                      DT_OPTIONAL[*DT_INT]
	SnoRootMarkerSet               DT_OPTIONAL[*DT_SNO]
	Unk_7a55b3f                    DT_OPTIONAL[*DT_UINT]
	Unk_7d23397                    DT_OPTIONAL[*DT_SNO]
	Unk_3125d0e                    DT_OPTIONAL[*DT_UINT]
	SnoAmbientOcclusionOverrideTex DT_OPTIONAL[*DT_SNO]
	DwTimeActorCreated             DT_OPTIONAL[*DT_UINT]
	TEnterKnownLookOverrides       DT_OPTIONAL[*EnterKnownLookOverrides]
	TEnterKnownShaderMapOverrides  DT_OPTIONAL[*EnterKnownShaderMapOverrides]
	UGizmoHash                     DT_OPTIONAL[*DT_UINT]
	Unk_9e938b5                    DT_OPTIONAL[*DT_INT64]
	AnnSummonedBy                  DT_OPTIONAL[*DT_ACD_NETWORK_NAME]
	SnoAttachedRenderActor         DT_OPTIONAL[*DT_SNO]
	DwAttachedHardpoint            DT_OPTIONAL[*DT_UINT]
	DwAttachHardpoint              DT_OPTIONAL[*DT_UINT]
	Unk_3929c26                    DT_OPTIONAL[*DT_ACD_NETWORK_NAME]
	Unk_f5f15cc                    DT_FIXEDARRAY[*Type_a9417475]
	Unk_310a730                    DT_FIXEDARRAY[*Type_a9417475]
}

func (t *ACDEnterKnownMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Ann, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SnoActor, r, &Options{
		Flags: 1,
		Group: 1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.DwFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.ELocationType, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.TWorldLocationData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.TInvLocationData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.Unk_aa2bbb9, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.NMonsterRarity, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.NItemQuality, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+136, &t.NItemQualityModifier, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+144, &t.DwLookHash, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+148, &t.DwShaderMapOverride, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+152, &t.SnoMarkerSet, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+160, &t.NMarkerId, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+168, &t.SnoRootMarkerSet, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+176, &t.Unk_7a55b3f, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+184, &t.Unk_7d23397, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+192, &t.Unk_3125d0e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+200, &t.SnoAmbientOcclusionOverrideTex, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+208, &t.DwTimeActorCreated, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+216, &t.TEnterKnownLookOverrides, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+268, &t.TEnterKnownShaderMapOverrides, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+296, &t.UGizmoHash, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+304, &t.Unk_9e938b5, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+320, &t.AnnSummonedBy, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+332, &t.SnoAttachedRenderActor, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+340, &t.DwAttachedHardpoint, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+348, &t.DwAttachHardpoint, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+356, &t.Unk_3929c26, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+368, &t.Unk_f5f15cc, r, &Options{
		ArrayLength: 4,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+432, &t.Unk_310a730, r, &Options{
		ArrayLength: 4,
		Flags:       1,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+496, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ACDEnterKnownMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("Ann", &t.Ann)
	cb.Do("SnoActor", &t.SnoActor)
	cb.Do("DwFlags", &t.DwFlags)
	cb.Do("ELocationType", &t.ELocationType)
	cb.Do("TWorldLocationData", &t.TWorldLocationData)
	cb.Do("TInvLocationData", &t.TInvLocationData)
	cb.Do("Unk_aa2bbb9", &t.Unk_aa2bbb9)
	cb.Do("NMonsterRarity", &t.NMonsterRarity)
	cb.Do("NItemQuality", &t.NItemQuality)
	cb.Do("NItemQualityModifier", &t.NItemQualityModifier)
	cb.Do("DwLookHash", &t.DwLookHash)
	cb.Do("DwShaderMapOverride", &t.DwShaderMapOverride)
	cb.Do("SnoMarkerSet", &t.SnoMarkerSet)
	cb.Do("NMarkerId", &t.NMarkerId)
	cb.Do("SnoRootMarkerSet", &t.SnoRootMarkerSet)
	cb.Do("Unk_7a55b3f", &t.Unk_7a55b3f)
	cb.Do("Unk_7d23397", &t.Unk_7d23397)
	cb.Do("Unk_3125d0e", &t.Unk_3125d0e)
	cb.Do("SnoAmbientOcclusionOverrideTex", &t.SnoAmbientOcclusionOverrideTex)
	cb.Do("DwTimeActorCreated", &t.DwTimeActorCreated)
	cb.Do("TEnterKnownLookOverrides", &t.TEnterKnownLookOverrides)
	cb.Do("TEnterKnownShaderMapOverrides", &t.TEnterKnownShaderMapOverrides)
	cb.Do("UGizmoHash", &t.UGizmoHash)
	cb.Do("Unk_9e938b5", &t.Unk_9e938b5)
	cb.Do("AnnSummonedBy", &t.AnnSummonedBy)
	cb.Do("SnoAttachedRenderActor", &t.SnoAttachedRenderActor)
	cb.Do("DwAttachedHardpoint", &t.DwAttachedHardpoint)
	cb.Do("DwAttachHardpoint", &t.DwAttachHardpoint)
	cb.Do("Unk_3929c26", &t.Unk_3929c26)
	cb.Do("Unk_f5f15cc", &t.Unk_f5f15cc)
	cb.Do("Unk_310a730", &t.Unk_310a730)
}

type SavedCameraStates struct {
	ArCameraStates DT_VARIABLEARRAY[*SavedWorldCameraState]
}

func (t *SavedCameraStates) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.ArCameraStates, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *SavedCameraStates) Walk(cb WalkCallback) {
	cb.Do("ArCameraStates", &t.ArCameraStates)
}

type Type_1109bb04 struct {
	TComponentId     DT_UINT
	ArLegComponents  DT_VARIABLEARRAY[*DT_UINT]
	ArHelmComponents DT_VARIABLEARRAY[*DT_UINT]
}

func (t *Type_1109bb04) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.TComponentId, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.ArLegComponents, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ArHelmComponents, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+40, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_1109bb04) Walk(cb WalkCallback) {
	cb.Do("TComponentId", &t.TComponentId)
	cb.Do("ArLegComponents", &t.ArLegComponents)
	cb.Do("ArHelmComponents", &t.ArHelmComponents)
}

type MarkerChestGizmoData struct {
	SnoTreasureClass DT_SNO
	Unk_2a0e071      DT_INT
	Unk_e86679d      DT_FLOAT
}

func (t *MarkerChestGizmoData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoTreasureClass, r, &Options{
		Flags: 1,
		Group: 52,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.Unk_2a0e071, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.Unk_e86679d, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+12, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *MarkerChestGizmoData) Walk(cb WalkCallback) {
	cb.Do("SnoTreasureClass", &t.SnoTreasureClass)
	cb.Do("Unk_2a0e071", &t.Unk_2a0e071)
	cb.Do("Unk_e86679d", &t.Unk_e86679d)
}

type UIStackPanelStyle struct {
	// Inherits UIWindowStyle
	// Inherits UIControlStyle
	// Inherits PolymorphicBase
	DwType                    DT_UINT
	DwPad                     DT_UINT
	HParentStyle              UIControlHandle
	Unk_441f783               DT_INT64
	M_eHasModifiedPowerTagMap DT_TAGMAP[*DT_ENUM]
	TConsoleInput             UIControlConsoleInput
	Unk_b4f614c               DT_TAGMAP[*DT_ENUM]
	Unk_8e594da               DT_TAGMAP[*DT_ENUM]
}

func (t *UIStackPanelStyle) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.HParentStyle, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_441f783, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.M_eHasModifiedPowerTagMap, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.TConsoleInput, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.Unk_b4f614c, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.Unk_8e594da, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+96, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *UIStackPanelStyle) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("HParentStyle", &t.HParentStyle)
	cb.Do("Unk_441f783", &t.Unk_441f783)
	cb.Do("M_eHasModifiedPowerTagMap", &t.M_eHasModifiedPowerTagMap)
	cb.Do("TConsoleInput", &t.TConsoleInput)
	cb.Do("Unk_b4f614c", &t.Unk_b4f614c)
	cb.Do("Unk_8e594da", &t.Unk_8e594da)
}

type JoinExistingGameMessage struct {
	THeader       RequiredMessageHeader
	IdSGame       DT_INT
	EXLocale      DT_ENUM
	FlAspectRatio DT_FLOAT
	UProtocolHash DT_UINT
	AtPlayers     DT_FIXEDARRAY[*JoinExistingGamePlayer]
	TTrace        TraceMessage
}

func (t *JoinExistingGameMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.IdSGame, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.EXLocale, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.FlAspectRatio, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.UProtocolHash, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.AtPlayers, r, &Options{
		ArrayLength: 2,
		Flags:       8,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+344, &t.TTrace, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+424, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *JoinExistingGameMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("IdSGame", &t.IdSGame)
	cb.Do("EXLocale", &t.EXLocale)
	cb.Do("FlAspectRatio", &t.FlAspectRatio)
	cb.Do("UProtocolHash", &t.UProtocolHash)
	cb.Do("AtPlayers", &t.AtPlayers)
	cb.Do("TTrace", &t.TTrace)
}

type MarkerHeightFieldData struct {
	// Inherits MarkerDataBase
	// Inherits PolymorphicBase
	DwType                         DT_UINT
	DwPad                          DT_UINT
	Unk_d8d2509                    DT_INT
	Unk_b677151                    DT_INT
	SnoBaseMaterial                DT_SNO
	FlSystemDuration               DT_FLOAT
	TWaveSettings                  HeightFieldWaveSettings
	ArAtlasTextures                DT_VARIABLEARRAY[*MarkerHeightFieldTexture]
	ArIndices                      DT_VARIABLEARRAY[*DT_WORD]
	IbidIndices                    DT_INT
	Unk_f481a51                    DT_INT
	ArLookVariantMaterialMap       DT_VARIABLEARRAY[*LookVariantMaterialMap]
	ArConditionalMaterialOverrides DT_VARIABLEARRAY[*ConditionalMaterialOverride]
	ArLines                        DT_VARIABLEARRAY[*MarkerHeightFieldLine]
}

func (t *MarkerHeightFieldData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_d8d2509, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.Unk_b677151, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SnoBaseMaterial, r, &Options{
		Flags: 1,
		Group: 57,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.FlSystemDuration, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.TWaveSettings, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.ArAtlasTextures, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.ArIndices, r, &Options{Flags: 2097152}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.IbidIndices, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.Unk_f481a51, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.ArLookVariantMaterialMap, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+104, &t.ArConditionalMaterialOverrides, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.ArLines, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+136, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *MarkerHeightFieldData) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("Unk_d8d2509", &t.Unk_d8d2509)
	cb.Do("Unk_b677151", &t.Unk_b677151)
	cb.Do("SnoBaseMaterial", &t.SnoBaseMaterial)
	cb.Do("FlSystemDuration", &t.FlSystemDuration)
	cb.Do("TWaveSettings", &t.TWaveSettings)
	cb.Do("ArAtlasTextures", &t.ArAtlasTextures)
	cb.Do("ArIndices", &t.ArIndices)
	cb.Do("IbidIndices", &t.IbidIndices)
	cb.Do("Unk_f481a51", &t.Unk_f481a51)
	cb.Do("ArLookVariantMaterialMap", &t.ArLookVariantMaterialMap)
	cb.Do("ArConditionalMaterialOverrides", &t.ArConditionalMaterialOverrides)
	cb.Do("ArLines", &t.ArLines)
}

type MarkerHeightFieldLine struct {
	ArSections DT_VARIABLEARRAY[*MarkerHeightFieldSection]
}

func (t *MarkerHeightFieldLine) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.ArSections, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *MarkerHeightFieldLine) Walk(cb WalkCallback) {
	cb.Do("ArSections", &t.ArSections)
}

type Type_11a18e87 struct {
	NLeft                            DT_INT
	NTop                             DT_INT
	NWidth                           DT_INT
	NHeight                          DT_INT
	NRight                           DT_INT
	NBottom                          DT_INT
	NMaxWidth                        DT_INT
	NMaxHeight                       DT_INT
	NMinWidth                        DT_INT
	NMinHeight                       DT_INT
	HTooltipText                     StringLabelHandleEx
	ETooltipTextJustify              DT_ENUM
	NTooltip                         DT_CSTRING[*DT_BYTE]
	NTooltipOffsetX                  DT_INT
	NTooltipOffsetY                  DT_INT
	ETooltipAlignHorizontal          DT_ENUM
	ETooltipAlignVertical            DT_ENUM
	NTooltipWidth                    DT_INT
	Unk_bffade6                      DT_FLOAT
	DwAlpha                          DT_BYTE
	EAlphaInheritanceType            DT_ENUM
	SnoShader                        DT_SNO
	Unk_b25bd2f                      UIEffect
	Unk_9cf9482                      UIEffect
	Unk_53346c4                      UIEffect
	Unk_4c24000                      DT_INT
	HImageFrame                      UIImageHandleReference
	HMaskImage                       UIImageHandleReference
	HHitMaskImage                    UIImageHandleReference
	Unk_902601b                      DT_INT
	HImageRenderSourceOverlay        UIImageHandleReference
	SnoChildHoverTiledStyle          DT_SNO
	Unk_7cf5f9e                      DT_SNO
	BWinDraggable                    DT_INT
	Unk_849b3d9                      DT_INT
	Unk_f9614a9                      DT_INT
	EClipBehavior                    DT_ENUM
	BRolledUp                        DT_INT
	BEncloseChildren                 DT_INT
	Unk_b0ab75a                      DT_INT
	Unk_f6e00c8                      DT_INT
	Unk_ab7c81f                      DT_INT
	Unk_90fbd84                      DT_INT
	Unk_28714d                       DT_INT
	BWindowIsInputFocusGroup         DT_INT
	NInputFocusOrder                 DT_INT
	EVisibilityCondition             DT_ENUM
	SnoTiledStyle                    DT_SNO
	SnoControllerHighlightTiledStyle DT_SNO
	Unk_3dc9f06                      DT_INT
	Unk_3dc9f07                      DT_INT
	Unk_438e5c1                      DT_INT
	EWindowEatsClicks                DT_ENUM
	Unk_bdc3d9e                      DT_INT
	SzOnClick                        DT_CSTRING[*DT_BYTE]
	Unk_f19b822                      DT_CSTRING[*DT_BYTE]
	Unk_c6ae8ed                      DT_INT
	SzOnDoubleClick                  DT_CSTRING[*DT_BYTE]
	SzOnRightClick                   DT_CSTRING[*DT_BYTE]
	Unk_cf724a8                      DT_CSTRING[*DT_BYTE]
	Unk_1894e73                      DT_INT
	SzOnMiddleClick                  DT_CSTRING[*DT_BYTE]
	SzOnDragStart                    DT_CSTRING[*DT_BYTE]
	SzOnDrag                         DT_CSTRING[*DT_BYTE]
	SzOnDragStop                     DT_CSTRING[*DT_BYTE]
	BIsDragTarget                    DT_INT
	Unk_4530f50                      DT_CSTRING[*DT_BYTE]
	SzOnContextMenu                  DT_CSTRING[*DT_BYTE]
	Unk_d31cd22                      DT_INT
	Unk_37f7289                      DT_INT
	Unk_354e749                      DT_INT
	SzChangedArsenal                 DT_CSTRING[*DT_BYTE]
	FlRotation                       DT_FLOAT
	VecPivot                         DT_VECTOR2D
	BMirrorX                         DT_INT
	BMirrorY                         DT_INT
	BNoSnap                          DT_INT
	Unk_93cbaa8                      DT_ENUM
	Unk_3d55658                      DT_ENUM
	RgbaTint                         DT_RGBACOLOR
	RgbaForeground                   DT_RGBACOLOR
	RgbaForegroundDisabled           DT_RGBACOLOR
	RgbaDropShadow                   DT_RGBACOLOR
	RgbaChildHoverForeground         DT_RGBACOLOR
	RgbaChildHoverForegroundDisabled DT_RGBACOLOR
}

func (t *Type_11a18e87) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.NLeft, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.NTop, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.NWidth, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.NHeight, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.NRight, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.NBottom, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.NMaxWidth, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.NMaxHeight, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.NMinWidth, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.NMinHeight, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.HTooltipText, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.ETooltipTextJustify, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.NTooltip, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.NTooltipOffsetX, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.NTooltipOffsetY, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.ETooltipAlignHorizontal, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.ETooltipAlignVertical, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.NTooltipWidth, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.Unk_bffade6, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.DwAlpha, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+100, &t.EAlphaInheritanceType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+104, &t.SnoShader, r, &Options{
		Flags: 1,
		Group: 37,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.Unk_b25bd2f, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+152, &t.Unk_9cf9482, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+192, &t.Unk_53346c4, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+232, &t.Unk_4c24000, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+236, &t.HImageFrame, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+240, &t.HMaskImage, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+244, &t.HHitMaskImage, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+248, &t.Unk_902601b, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+252, &t.HImageRenderSourceOverlay, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+256, &t.SnoChildHoverTiledStyle, r, &Options{
		Flags: 1,
		Group: 103,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+260, &t.Unk_7cf5f9e, r, &Options{
		Flags: 1,
		Group: 7,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+264, &t.BWinDraggable, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+268, &t.Unk_849b3d9, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+272, &t.Unk_f9614a9, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+276, &t.EClipBehavior, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+280, &t.BRolledUp, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+284, &t.BEncloseChildren, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+288, &t.Unk_b0ab75a, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+292, &t.Unk_f6e00c8, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+296, &t.Unk_ab7c81f, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+300, &t.Unk_90fbd84, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+304, &t.Unk_28714d, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+308, &t.BWindowIsInputFocusGroup, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+312, &t.NInputFocusOrder, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+316, &t.EVisibilityCondition, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+320, &t.SnoTiledStyle, r, &Options{
		Flags: 1,
		Group: 103,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+324, &t.SnoControllerHighlightTiledStyle, r, &Options{
		Flags: 1,
		Group: 103,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+328, &t.Unk_3dc9f06, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+332, &t.Unk_3dc9f07, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+336, &t.Unk_438e5c1, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+340, &t.EWindowEatsClicks, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+344, &t.Unk_bdc3d9e, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+352, &t.SzOnClick, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+368, &t.Unk_f19b822, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+384, &t.Unk_c6ae8ed, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+392, &t.SzOnDoubleClick, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+408, &t.SzOnRightClick, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+424, &t.Unk_cf724a8, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+440, &t.Unk_1894e73, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+448, &t.SzOnMiddleClick, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+464, &t.SzOnDragStart, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+480, &t.SzOnDrag, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+496, &t.SzOnDragStop, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+512, &t.BIsDragTarget, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+520, &t.Unk_4530f50, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+536, &t.SzOnContextMenu, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+552, &t.Unk_d31cd22, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+556, &t.Unk_37f7289, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+560, &t.Unk_354e749, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+568, &t.SzChangedArsenal, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+584, &t.FlRotation, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+588, &t.VecPivot, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+596, &t.BMirrorX, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+600, &t.BMirrorY, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+604, &t.BNoSnap, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+608, &t.Unk_93cbaa8, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+612, &t.Unk_3d55658, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+616, &t.RgbaTint, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+620, &t.RgbaForeground, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+624, &t.RgbaForegroundDisabled, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+628, &t.RgbaDropShadow, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+632, &t.RgbaChildHoverForeground, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+636, &t.RgbaChildHoverForegroundDisabled, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+640, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_11a18e87) Walk(cb WalkCallback) {
	cb.Do("NLeft", &t.NLeft)
	cb.Do("NTop", &t.NTop)
	cb.Do("NWidth", &t.NWidth)
	cb.Do("NHeight", &t.NHeight)
	cb.Do("NRight", &t.NRight)
	cb.Do("NBottom", &t.NBottom)
	cb.Do("NMaxWidth", &t.NMaxWidth)
	cb.Do("NMaxHeight", &t.NMaxHeight)
	cb.Do("NMinWidth", &t.NMinWidth)
	cb.Do("NMinHeight", &t.NMinHeight)
	cb.Do("HTooltipText", &t.HTooltipText)
	cb.Do("ETooltipTextJustify", &t.ETooltipTextJustify)
	cb.Do("NTooltip", &t.NTooltip)
	cb.Do("NTooltipOffsetX", &t.NTooltipOffsetX)
	cb.Do("NTooltipOffsetY", &t.NTooltipOffsetY)
	cb.Do("ETooltipAlignHorizontal", &t.ETooltipAlignHorizontal)
	cb.Do("ETooltipAlignVertical", &t.ETooltipAlignVertical)
	cb.Do("NTooltipWidth", &t.NTooltipWidth)
	cb.Do("Unk_bffade6", &t.Unk_bffade6)
	cb.Do("DwAlpha", &t.DwAlpha)
	cb.Do("EAlphaInheritanceType", &t.EAlphaInheritanceType)
	cb.Do("SnoShader", &t.SnoShader)
	cb.Do("Unk_b25bd2f", &t.Unk_b25bd2f)
	cb.Do("Unk_9cf9482", &t.Unk_9cf9482)
	cb.Do("Unk_53346c4", &t.Unk_53346c4)
	cb.Do("Unk_4c24000", &t.Unk_4c24000)
	cb.Do("HImageFrame", &t.HImageFrame)
	cb.Do("HMaskImage", &t.HMaskImage)
	cb.Do("HHitMaskImage", &t.HHitMaskImage)
	cb.Do("Unk_902601b", &t.Unk_902601b)
	cb.Do("HImageRenderSourceOverlay", &t.HImageRenderSourceOverlay)
	cb.Do("SnoChildHoverTiledStyle", &t.SnoChildHoverTiledStyle)
	cb.Do("Unk_7cf5f9e", &t.Unk_7cf5f9e)
	cb.Do("BWinDraggable", &t.BWinDraggable)
	cb.Do("Unk_849b3d9", &t.Unk_849b3d9)
	cb.Do("Unk_f9614a9", &t.Unk_f9614a9)
	cb.Do("EClipBehavior", &t.EClipBehavior)
	cb.Do("BRolledUp", &t.BRolledUp)
	cb.Do("BEncloseChildren", &t.BEncloseChildren)
	cb.Do("Unk_b0ab75a", &t.Unk_b0ab75a)
	cb.Do("Unk_f6e00c8", &t.Unk_f6e00c8)
	cb.Do("Unk_ab7c81f", &t.Unk_ab7c81f)
	cb.Do("Unk_90fbd84", &t.Unk_90fbd84)
	cb.Do("Unk_28714d", &t.Unk_28714d)
	cb.Do("BWindowIsInputFocusGroup", &t.BWindowIsInputFocusGroup)
	cb.Do("NInputFocusOrder", &t.NInputFocusOrder)
	cb.Do("EVisibilityCondition", &t.EVisibilityCondition)
	cb.Do("SnoTiledStyle", &t.SnoTiledStyle)
	cb.Do("SnoControllerHighlightTiledStyle", &t.SnoControllerHighlightTiledStyle)
	cb.Do("Unk_3dc9f06", &t.Unk_3dc9f06)
	cb.Do("Unk_3dc9f07", &t.Unk_3dc9f07)
	cb.Do("Unk_438e5c1", &t.Unk_438e5c1)
	cb.Do("EWindowEatsClicks", &t.EWindowEatsClicks)
	cb.Do("Unk_bdc3d9e", &t.Unk_bdc3d9e)
	cb.Do("SzOnClick", &t.SzOnClick)
	cb.Do("Unk_f19b822", &t.Unk_f19b822)
	cb.Do("Unk_c6ae8ed", &t.Unk_c6ae8ed)
	cb.Do("SzOnDoubleClick", &t.SzOnDoubleClick)
	cb.Do("SzOnRightClick", &t.SzOnRightClick)
	cb.Do("Unk_cf724a8", &t.Unk_cf724a8)
	cb.Do("Unk_1894e73", &t.Unk_1894e73)
	cb.Do("SzOnMiddleClick", &t.SzOnMiddleClick)
	cb.Do("SzOnDragStart", &t.SzOnDragStart)
	cb.Do("SzOnDrag", &t.SzOnDrag)
	cb.Do("SzOnDragStop", &t.SzOnDragStop)
	cb.Do("BIsDragTarget", &t.BIsDragTarget)
	cb.Do("Unk_4530f50", &t.Unk_4530f50)
	cb.Do("SzOnContextMenu", &t.SzOnContextMenu)
	cb.Do("Unk_d31cd22", &t.Unk_d31cd22)
	cb.Do("Unk_37f7289", &t.Unk_37f7289)
	cb.Do("Unk_354e749", &t.Unk_354e749)
	cb.Do("SzChangedArsenal", &t.SzChangedArsenal)
	cb.Do("FlRotation", &t.FlRotation)
	cb.Do("VecPivot", &t.VecPivot)
	cb.Do("BMirrorX", &t.BMirrorX)
	cb.Do("BMirrorY", &t.BMirrorY)
	cb.Do("BNoSnap", &t.BNoSnap)
	cb.Do("Unk_93cbaa8", &t.Unk_93cbaa8)
	cb.Do("Unk_3d55658", &t.Unk_3d55658)
	cb.Do("RgbaTint", &t.RgbaTint)
	cb.Do("RgbaForeground", &t.RgbaForeground)
	cb.Do("RgbaForegroundDisabled", &t.RgbaForegroundDisabled)
	cb.Do("RgbaDropShadow", &t.RgbaDropShadow)
	cb.Do("RgbaChildHoverForeground", &t.RgbaChildHoverForeground)
	cb.Do("RgbaChildHoverForegroundDisabled", &t.RgbaChildHoverForegroundDisabled)
}

type PlayerUnpossessActorMessage struct {
	THeader               RequiredMessageHeader
	DwPlayerGameAccountId DT_UINT
}

func (t *PlayerUnpossessActorMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.DwPlayerGameAccountId, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+20, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PlayerUnpossessActorMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("DwPlayerGameAccountId", &t.DwPlayerGameAccountId)
}

type DataIDDataMessage struct {
	THeader RequiredMessageHeader
	Id      DT_INT
}

func (t *DataIDDataMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Id, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+20, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *DataIDDataMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("Id", &t.Id)
}

type QuestObjectiveSet struct {
	DwUID               DT_UINT
	PtLink              DT_VARIABLEARRAY[*QuestObjectiveSetLink]
	ArCallbacks         DT_VARIABLEARRAY[*QuestCallback]
	Unk_a845fa9         DT_INT
	Unk_89d02b1         DT_SNO
	TFirstTimeReward    QuestReward
	TReward             QuestReward
	TKeyedDungeonReward QuestReward
	Unk_8c63f3c         DT_INT
	Unk_e903c4e         DT_SNO
	Unk_8f432f8         DT_VARIABLEARRAY[*DT_SNO]
}

func (t *QuestObjectiveSet) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.DwUID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.PtLink, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ArCallbacks, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.Unk_a845fa9, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.Unk_89d02b1, r, &Options{
		Flags: 1,
		Group: 73,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.TFirstTimeReward, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.TReward, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+144, &t.TKeyedDungeonReward, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+192, &t.Unk_8c63f3c, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+196, &t.Unk_e903c4e, r, &Options{
		Flags: 1,
		Group: 12,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+200, &t.Unk_8f432f8, r, &Options{
		Flags: 1,
		Group: 73,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+216, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *QuestObjectiveSet) Walk(cb WalkCallback) {
	cb.Do("DwUID", &t.DwUID)
	cb.Do("PtLink", &t.PtLink)
	cb.Do("ArCallbacks", &t.ArCallbacks)
	cb.Do("Unk_a845fa9", &t.Unk_a845fa9)
	cb.Do("Unk_89d02b1", &t.Unk_89d02b1)
	cb.Do("TFirstTimeReward", &t.TFirstTimeReward)
	cb.Do("TReward", &t.TReward)
	cb.Do("TKeyedDungeonReward", &t.TKeyedDungeonReward)
	cb.Do("Unk_8c63f3c", &t.Unk_8c63f3c)
	cb.Do("Unk_e903c4e", &t.Unk_e903c4e)
	cb.Do("Unk_8f432f8", &t.Unk_8f432f8)
}

type Type_11c81cb7 struct {
	THeader      RequiredMessageHeader
	Ann          DT_ACD_NETWORK_NAME
	NKey         DT_INT64
	NIntValue    DT_INT
	FlFloatValue DT_FLOAT
}

func (t *Type_11c81cb7) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Ann, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.NKey, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.NIntValue, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.FlFloatValue, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+40, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_11c81cb7) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("Ann", &t.Ann)
	cb.Do("NKey", &t.NKey)
	cb.Do("NIntValue", &t.NIntValue)
	cb.Do("FlFloatValue", &t.FlFloatValue)
}

type AudioMonsterCategory struct {
	SzName      DT_UINT
	NScore      DT_INT
	Unk_8105d80 Type_cbfdd2ea
	Unk_bb98fd8 DT_CSTRING[*DT_BYTE]
}

func (t *AudioMonsterCategory) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SzName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.NScore, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.Unk_8105d80, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.Unk_bb98fd8, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+80, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *AudioMonsterCategory) Walk(cb WalkCallback) {
	cb.Do("SzName", &t.SzName)
	cb.Do("NScore", &t.NScore)
	cb.Do("Unk_8105d80", &t.Unk_8105d80)
	cb.Do("Unk_bb98fd8", &t.Unk_bb98fd8)
}

type TriggerEventAttachSpawnedActor struct {
	// Inherits TriggerEvent
	// Inherits PolymorphicBase
	DwType          DT_UINT
	DwPad           DT_UINT
	TConditions     TriggerConditions
	FGenerated      DT_INT
	Unk_6cba752     DT_INT
	DwParentActorID DT_UINT
	DwID            DT_UINT
	THardpointLink  HardpointLink
}

func (t *TriggerEventAttachSpawnedActor) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.FGenerated, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_6cba752, r, &Options{Flags: 16}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.DwParentActorID, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.DwID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.THardpointLink, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+96, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TriggerEventAttachSpawnedActor) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("TConditions", &t.TConditions)
	cb.Do("FGenerated", &t.FGenerated)
	cb.Do("Unk_6cba752", &t.Unk_6cba752)
	cb.Do("DwParentActorID", &t.DwParentActorID)
	cb.Do("DwID", &t.DwID)
	cb.Do("THardpointLink", &t.THardpointLink)
}

type DestroyOnProximityGizmoData struct {
	// Inherits ActorGizmoData
	// Inherits PolymorphicBase
	DwType                       DT_UINT
	DwPad                        DT_UINT
	FDisableNonFriendlyOperation DT_INT
	FWalkToCenter                DT_INT
	FGizmoStartsDisabled         DT_INT
	FUseStringListName           DT_INT
	FForceMinimapIcon            DT_INT
	FlOperationRadius            DT_FLOAT
	Unk_d0b1df5                  DT_FLOAT
	FlGizmoUseTime               DT_FLOAT
	SnoChannelingEffect          DT_SNO
	Unk_2767229                  DT_INT
	FGizmoShowProgressBar        DT_INT
	Unk_6d9ebe1                  DT_INT
	Unk_5456245                  DT_INT
	Unk_af5815a                  DT_INT
	SnoOnClickEffect             DT_SNO
	SnoPickedUpEffect            DT_SNO
	SnoDropOnGroundEffect        DT_SNO
	TConditionData               GizmoConditionData
	SnoPowerOperator             DT_SNO
	SnoPowerOperate              DT_SNO
	SnoPowerOperatorActive       DT_SNO
	SnoPowerOperateActive        DT_SNO
	Unk_359810e                  DT_INT
	NCooldown                    DT_UINT
	Unk_9c8478e                  DT_UINT
	Unk_d45ed2d                  DT_INT
	Unk_f6b20b7                  DT_INT
	Unk_54513b8                  DT_INT
	Unk_fd1f378                  DT_UINT
	Unk_487c14                   DT_UINT
	Unk_87f2609                  DT_UINT
	Unk_158eb4f                  DT_FLOAT
	Unk_ab58cd3                  DT_ENUM
	Unk_91a3966                  DT_UINT
	Unk_25312e5                  DT_UINT
	Unk_4be4371                  DT_INT
	PtProxData                   DT_POLYMORPHIC_VARIABLEARRAY[*ProximityDataBase]
	SnoDeathPower                DT_SNO
}

func (t *DestroyOnProximityGizmoData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.FDisableNonFriendlyOperation, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.FWalkToCenter, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.FGizmoStartsDisabled, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.FUseStringListName, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.FForceMinimapIcon, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.FlOperationRadius, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.Unk_d0b1df5, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.FlGizmoUseTime, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.SnoChannelingEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.Unk_2767229, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.FGizmoShowProgressBar, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+60, &t.Unk_6d9ebe1, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.Unk_5456245, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.Unk_af5815a, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.SnoOnClickEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.SnoPickedUpEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.SnoDropOnGroundEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.TConditionData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.SnoPowerOperator, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.SnoPowerOperate, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.SnoPowerOperatorActive, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+100, &t.SnoPowerOperateActive, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+104, &t.Unk_359810e, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+108, &t.NCooldown, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.Unk_9c8478e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+116, &t.Unk_d45ed2d, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.Unk_f6b20b7, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+124, &t.Unk_54513b8, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.Unk_fd1f378, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+132, &t.Unk_487c14, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+136, &t.Unk_87f2609, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+140, &t.Unk_158eb4f, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+144, &t.Unk_ab58cd3, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+148, &t.Unk_91a3966, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+152, &t.Unk_25312e5, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+156, &t.Unk_4be4371, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+160, &t.PtProxData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+184, &t.SnoDeathPower, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+192, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *DestroyOnProximityGizmoData) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("FDisableNonFriendlyOperation", &t.FDisableNonFriendlyOperation)
	cb.Do("FWalkToCenter", &t.FWalkToCenter)
	cb.Do("FGizmoStartsDisabled", &t.FGizmoStartsDisabled)
	cb.Do("FUseStringListName", &t.FUseStringListName)
	cb.Do("FForceMinimapIcon", &t.FForceMinimapIcon)
	cb.Do("FlOperationRadius", &t.FlOperationRadius)
	cb.Do("Unk_d0b1df5", &t.Unk_d0b1df5)
	cb.Do("FlGizmoUseTime", &t.FlGizmoUseTime)
	cb.Do("SnoChannelingEffect", &t.SnoChannelingEffect)
	cb.Do("Unk_2767229", &t.Unk_2767229)
	cb.Do("FGizmoShowProgressBar", &t.FGizmoShowProgressBar)
	cb.Do("Unk_6d9ebe1", &t.Unk_6d9ebe1)
	cb.Do("Unk_5456245", &t.Unk_5456245)
	cb.Do("Unk_af5815a", &t.Unk_af5815a)
	cb.Do("SnoOnClickEffect", &t.SnoOnClickEffect)
	cb.Do("SnoPickedUpEffect", &t.SnoPickedUpEffect)
	cb.Do("SnoDropOnGroundEffect", &t.SnoDropOnGroundEffect)
	cb.Do("TConditionData", &t.TConditionData)
	cb.Do("SnoPowerOperator", &t.SnoPowerOperator)
	cb.Do("SnoPowerOperate", &t.SnoPowerOperate)
	cb.Do("SnoPowerOperatorActive", &t.SnoPowerOperatorActive)
	cb.Do("SnoPowerOperateActive", &t.SnoPowerOperateActive)
	cb.Do("Unk_359810e", &t.Unk_359810e)
	cb.Do("NCooldown", &t.NCooldown)
	cb.Do("Unk_9c8478e", &t.Unk_9c8478e)
	cb.Do("Unk_d45ed2d", &t.Unk_d45ed2d)
	cb.Do("Unk_f6b20b7", &t.Unk_f6b20b7)
	cb.Do("Unk_54513b8", &t.Unk_54513b8)
	cb.Do("Unk_fd1f378", &t.Unk_fd1f378)
	cb.Do("Unk_487c14", &t.Unk_487c14)
	cb.Do("Unk_87f2609", &t.Unk_87f2609)
	cb.Do("Unk_158eb4f", &t.Unk_158eb4f)
	cb.Do("Unk_ab58cd3", &t.Unk_ab58cd3)
	cb.Do("Unk_91a3966", &t.Unk_91a3966)
	cb.Do("Unk_25312e5", &t.Unk_25312e5)
	cb.Do("Unk_4be4371", &t.Unk_4be4371)
	cb.Do("PtProxData", &t.PtProxData)
	cb.Do("SnoDeathPower", &t.SnoDeathPower)
}

type Type_1259dca8 struct {
	SnoWorld         DT_SNO
	SnoPortraitWorld DT_SNO
	SnoActor         DT_SNO
}

func (t *Type_1259dca8) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoWorld, r, &Options{
		Flags: 513,
		Group: 48,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.SnoPortraitWorld, r, &Options{
		Flags: 513,
		Group: 48,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.SnoActor, r, &Options{
		Flags: 1,
		Group: 1,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+12, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_1259dca8) Walk(cb WalkCallback) {
	cb.Do("SnoWorld", &t.SnoWorld)
	cb.Do("SnoPortraitWorld", &t.SnoPortraitWorld)
	cb.Do("SnoActor", &t.SnoActor)
}

type StoryboardGenericTrack struct {
	// Inherits StoryboardTrack
	// Inherits PolymorphicBase
	DwType DT_UINT
	DwPad  DT_UINT
}

func (t *StoryboardGenericTrack) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *StoryboardGenericTrack) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
}

type FogVolumeDefinition struct {
	TInstanceData FogVolumeInstanceData
	VecScale      DT_VECTOR3D
}

func (t *FogVolumeDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.TInstanceData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+144, &t.VecScale, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+160, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *FogVolumeDefinition) Walk(cb WalkCallback) {
	cb.Do("TInstanceData", &t.TInstanceData)
	cb.Do("VecScale", &t.VecScale)
}

type TexAnimTranslationCurve struct {
	// Inherits TexAnim
	// Inherits PolymorphicBase
	DwType      DT_UINT
	DwPad       DT_UINT
	FlUScale    DT_FLOAT
	FlVScale    DT_FLOAT
	PathU       Type_cbfdd2ea
	PathV       Type_cbfdd2ea
	DwAnimFlags DT_UINT
}

func (t *TexAnimTranslationCurve) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.FlUScale, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.FlVScale, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.PathU, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.PathV, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+136, &t.DwAnimFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if _, err := r.Seek(p+144, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TexAnimTranslationCurve) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("FlUScale", &t.FlUScale)
	cb.Do("FlVScale", &t.FlVScale)
	cb.Do("PathU", &t.PathU)
	cb.Do("PathV", &t.PathV)
	cb.Do("DwAnimFlags", &t.DwAnimFlags)
}

type FoliageSettings struct {
	FlExplosionFactor DT_FLOAT
	FlFrequency       DT_FLOAT
	FlDampingRatio    DT_FLOAT
	FlMaxOffsetFactor DT_FLOAT
	FlRadiusRatio     DT_FLOAT
	Unk_77adebf       DT_SNO
	SnoSoundImpact    DT_SNO
	SnoAmbientSound   DT_SNO
	Unk_620b5c3       DT_FLOAT
	Unk_bf229f9       DT_FLOAT
}

func (t *FoliageSettings) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.FlExplosionFactor, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.FlFrequency, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.FlDampingRatio, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.FlMaxOffsetFactor, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.FlRadiusRatio, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.Unk_77adebf, r, &Options{
		Flags: 1,
		Group: 40,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SnoSoundImpact, r, &Options{
		Flags: 1,
		Group: 40,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.SnoAmbientSound, r, &Options{
		Flags: 1,
		Group: 5,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.Unk_620b5c3, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.Unk_bf229f9, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+40, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *FoliageSettings) Walk(cb WalkCallback) {
	cb.Do("FlExplosionFactor", &t.FlExplosionFactor)
	cb.Do("FlFrequency", &t.FlFrequency)
	cb.Do("FlDampingRatio", &t.FlDampingRatio)
	cb.Do("FlMaxOffsetFactor", &t.FlMaxOffsetFactor)
	cb.Do("FlRadiusRatio", &t.FlRadiusRatio)
	cb.Do("Unk_77adebf", &t.Unk_77adebf)
	cb.Do("SnoSoundImpact", &t.SnoSoundImpact)
	cb.Do("SnoAmbientSound", &t.SnoAmbientSound)
	cb.Do("Unk_620b5c3", &t.Unk_620b5c3)
	cb.Do("Unk_bf229f9", &t.Unk_bf229f9)
}

type PowerConditionIsSpecificActor struct {
	// Inherits PowerConditionBase
	// Inherits PolymorphicBase
	DwType   DT_UINT
	BInverse DT_INT
	DwPad    DT_UINT
	ESubject DT_ENUM
	SnoActor DT_SNO
}

func (t *PowerConditionIsSpecificActor) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BInverse, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ESubject, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.SnoActor, r, &Options{
		Flags: 513,
		Group: 1,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PowerConditionIsSpecificActor) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("BInverse", &t.BInverse)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("ESubject", &t.ESubject)
	cb.Do("SnoActor", &t.SnoActor)
}

type BoxProximityData struct {
	// Inherits ProximityDataBase
	// Inherits PolymorphicBase
	DwType DT_UINT
	DwPad  DT_UINT
	WvOBB  DT_VECTOR3D
}

func (t *BoxProximityData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.WvOBB, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *BoxProximityData) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("WvOBB", &t.WvOBB)
}

type SceneSpecification struct {
	DwFlags           DT_UINT
	SnoLevelArea      DT_SNO
	Unk_74a9537       DT_STARTLOC_NAME
	SnoPrevWorld      DT_SNO
	UPrevEntranceGUID DT_STARTLOC_NAME
	SnoPrevLevelArea  DT_SNO
	SnoAudioContext   DT_SNO
	SnoWeather        DT_SNO
	SnoPresetWorld    DT_SNO
	NSceneChunk       DT_INT
	ArSubzones        DT_VARIABLEARRAY[*StartingAllowedWeather]
}

func (t *SceneSpecification) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.DwFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.SnoLevelArea, r, &Options{
		Flags: 1,
		Group: 22,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.Unk_74a9537, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.SnoPrevWorld, r, &Options{
		Flags: 513,
		Group: 48,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.UPrevEntranceGUID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.SnoPrevLevelArea, r, &Options{
		Flags: 513,
		Group: 22,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SnoAudioContext, r, &Options{
		Flags: 1,
		Group: 93,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.SnoWeather, r, &Options{
		Flags: 1,
		Group: 47,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.SnoPresetWorld, r, &Options{
		Flags: 512,
		Group: 48,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.NSceneChunk, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.ArSubzones, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+56, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *SceneSpecification) Walk(cb WalkCallback) {
	cb.Do("DwFlags", &t.DwFlags)
	cb.Do("SnoLevelArea", &t.SnoLevelArea)
	cb.Do("Unk_74a9537", &t.Unk_74a9537)
	cb.Do("SnoPrevWorld", &t.SnoPrevWorld)
	cb.Do("UPrevEntranceGUID", &t.UPrevEntranceGUID)
	cb.Do("SnoPrevLevelArea", &t.SnoPrevLevelArea)
	cb.Do("SnoAudioContext", &t.SnoAudioContext)
	cb.Do("SnoWeather", &t.SnoWeather)
	cb.Do("SnoPresetWorld", &t.SnoPresetWorld)
	cb.Do("NSceneChunk", &t.NSceneChunk)
	cb.Do("ArSubzones", &t.ArSubzones)
}

type TriggerEventRelaxCloth struct {
	// Inherits TriggerEvent
	// Inherits PolymorphicBase
	DwType          DT_UINT
	DwPad           DT_UINT
	TConditions     TriggerConditions
	FGenerated      DT_INT
	Unk_6cba752     DT_INT
	DwParentActorID DT_UINT
	Unk_85269a4     DT_INT
	DwActorID       DT_UINT
	Unk_54489ef     DT_INT
}

func (t *TriggerEventRelaxCloth) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.FGenerated, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_6cba752, r, &Options{Flags: 16}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.DwParentActorID, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.Unk_85269a4, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.DwActorID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.Unk_54489ef, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+96, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TriggerEventRelaxCloth) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("TConditions", &t.TConditions)
	cb.Do("FGenerated", &t.FGenerated)
	cb.Do("Unk_6cba752", &t.Unk_6cba752)
	cb.Do("DwParentActorID", &t.DwParentActorID)
	cb.Do("Unk_85269a4", &t.Unk_85269a4)
	cb.Do("DwActorID", &t.DwActorID)
	cb.Do("Unk_54489ef", &t.Unk_54489ef)
}

type OnDotReceivedBuffCallback struct {
	// Inherits BuffCallbackBase
	// Inherits PolymorphicBase
	DwType                DT_UINT
	DwPad                 DT_UINT
	SnoTriggerEffectGroup DT_SNO
	ArConditions          DT_POLYMORPHIC_VARIABLEARRAY[*DT_INT64]
}

func (t *OnDotReceivedBuffCallback) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoTriggerEffectGroup, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ArConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *OnDotReceivedBuffCallback) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("SnoTriggerEffectGroup", &t.SnoTriggerEffectGroup)
	cb.Do("ArConditions", &t.ArConditions)
}

type PVPGizmoMessage struct {
	THeader           RequiredMessageHeader
	SnoGizmo          DT_SNO
	WpLocation        DT_VECTOR3D
	DwCooldownEndTime DT_UINT
}

func (t *PVPGizmoMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoGizmo, r, &Options{
		Flags: 1,
		Group: 1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.WpLocation, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.DwCooldownEndTime, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+36, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PVPGizmoMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("SnoGizmo", &t.SnoGizmo)
	cb.Do("WpLocation", &t.WpLocation)
	cb.Do("DwCooldownEndTime", &t.DwCooldownEndTime)
}

type OnPetAddBuffCallback struct {
	// Inherits BuffCallbackBase
	// Inherits PolymorphicBase
	DwType                DT_UINT
	DwPad                 DT_UINT
	SnoTriggerEffectGroup DT_SNO
	ArConditions          DT_POLYMORPHIC_VARIABLEARRAY[*DT_INT64]
}

func (t *OnPetAddBuffCallback) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoTriggerEffectGroup, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ArConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *OnPetAddBuffCallback) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("SnoTriggerEffectGroup", &t.SnoTriggerEffectGroup)
	cb.Do("ArConditions", &t.ArConditions)
}

type GameVariableIsSetSubcondition struct {
	// Inherits Subcondition
	// Inherits PolymorphicBase
	DwType               DT_UINT
	BNegate              DT_INT
	DwPad                DT_UINT
	GbidDesignerVariable DT_GBID
}

func (t *GameVariableIsSetSubcondition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BNegate, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.GbidDesignerVariable, r, &Options{
		Flags: 1,
		Group: 45,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *GameVariableIsSetSubcondition) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("BNegate", &t.BNegate)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("GbidDesignerVariable", &t.GbidDesignerVariable)
}

type TutorialScreen struct {
	DwID     DT_UINT
	HImage   DT_UINT
	SnoMovie DT_SNO
}

func (t *TutorialScreen) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.DwID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.HImage, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.SnoMovie, r, &Options{
		Flags: 1,
		Group: 102,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+12, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TutorialScreen) Walk(cb WalkCallback) {
	cb.Do("DwID", &t.DwID)
	cb.Do("HImage", &t.HImage)
	cb.Do("SnoMovie", &t.SnoMovie)
}

type GameTestingMonsterSkillSamplingStartMessage struct {
	THeader     RequiredMessageHeader
	SzGroupType DT_CHARARRAY
	SnoMonster  DT_SNO
	SnoSkill    DT_SNO
	UCount      DT_UINT
}

func (t *GameTestingMonsterSkillSamplingStartMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SzGroupType, r, &Options{
		ArrayLength: 16,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.SnoMonster, r, &Options{
		Flags: 1,
		Group: 1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.SnoSkill, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.UCount, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+44, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *GameTestingMonsterSkillSamplingStartMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("SzGroupType", &t.SzGroupType)
	cb.Do("SnoMonster", &t.SnoMonster)
	cb.Do("SnoSkill", &t.SnoSkill)
	cb.Do("UCount", &t.UCount)
}

type StoreDisclaimerData struct {
	HLabel StringLabelHandleEx
}

func (t *StoreDisclaimerData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.HLabel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *StoreDisclaimerData) Walk(cb WalkCallback) {
	cb.Do("HLabel", &t.HLabel)
}

type UIBlinkerStyle struct {
	// Inherits UITextStyle
	// Inherits UIWindowStyle
	// Inherits UIControlStyle
	// Inherits PolymorphicBase
	DwType                    DT_UINT
	DwPad                     DT_UINT
	HParentStyle              UIControlHandle
	Unk_441f783               DT_INT64
	M_eHasModifiedPowerTagMap DT_TAGMAP[*DT_ENUM]
	TConsoleInput             UIControlConsoleInput
	Unk_b4f614c               DT_TAGMAP[*DT_ENUM]
	TFont                     UIControlFont
	Unk_4741819               DT_TAGMAP[*DT_ENUM]
	Unk_16582db               DT_TAGMAP[*DT_ENUM]
}

func (t *UIBlinkerStyle) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.HParentStyle, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_441f783, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.M_eHasModifiedPowerTagMap, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.TConsoleInput, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.Unk_b4f614c, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.TFont, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.Unk_4741819, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.Unk_16582db, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+128, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *UIBlinkerStyle) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("HParentStyle", &t.HParentStyle)
	cb.Do("Unk_441f783", &t.Unk_441f783)
	cb.Do("M_eHasModifiedPowerTagMap", &t.M_eHasModifiedPowerTagMap)
	cb.Do("TConsoleInput", &t.TConsoleInput)
	cb.Do("Unk_b4f614c", &t.Unk_b4f614c)
	cb.Do("TFont", &t.TFont)
	cb.Do("Unk_4741819", &t.Unk_4741819)
	cb.Do("Unk_16582db", &t.Unk_16582db)
}

type NpcLookTemplate struct {
	SzRegionName     DT_CSTRING[*DT_BYTE]
	EZone            DT_ENUM
	SzToolTip        DT_CSTRING[*DT_BYTE]
	ArNpcLookEntries DT_VARIABLEARRAY[*NpcLookEntry]
}

func (t *NpcLookTemplate) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SzRegionName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.EZone, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SzToolTip, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.ArNpcLookEntries, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+56, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *NpcLookTemplate) Walk(cb WalkCallback) {
	cb.Do("SzRegionName", &t.SzRegionName)
	cb.Do("EZone", &t.EZone)
	cb.Do("SzToolTip", &t.SzToolTip)
	cb.Do("ArNpcLookEntries", &t.ArNpcLookEntries)
}

type PowerCrowdControlInfo struct {
	Unk_b7c1372 DT_STRING_FORMULA
	Unk_5143c1f DT_STRING_FORMULA
	Unk_982fe71 DT_STRING_FORMULA
}

func (t *PowerCrowdControlInfo) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Unk_b7c1372, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.Unk_5143c1f, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.Unk_982fe71, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+96, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PowerCrowdControlInfo) Walk(cb WalkCallback) {
	cb.Do("Unk_b7c1372", &t.Unk_b7c1372)
	cb.Do("Unk_5143c1f", &t.Unk_5143c1f)
	cb.Do("Unk_982fe71", &t.Unk_982fe71)
}

type Type_14a42c17 struct {
	Unk_6942446 DT_FLOAT
	Unk_11ed90c DT_FLOAT
	Unk_b9b72f0 DT_FLOAT
	Unk_9cca79f DT_FLOAT
	Unk_ae42774 DT_FLOAT
	Unk_5342bdc DT_FLOAT
	Unk_f2e6be7 DT_FLOAT
}

func (t *Type_14a42c17) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Unk_6942446, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.Unk_11ed90c, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.Unk_b9b72f0, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.Unk_9cca79f, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_ae42774, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.Unk_5342bdc, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_f2e6be7, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+28, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_14a42c17) Walk(cb WalkCallback) {
	cb.Do("Unk_6942446", &t.Unk_6942446)
	cb.Do("Unk_11ed90c", &t.Unk_11ed90c)
	cb.Do("Unk_b9b72f0", &t.Unk_b9b72f0)
	cb.Do("Unk_9cca79f", &t.Unk_9cca79f)
	cb.Do("Unk_ae42774", &t.Unk_ae42774)
	cb.Do("Unk_5342bdc", &t.Unk_5342bdc)
	cb.Do("Unk_f2e6be7", &t.Unk_f2e6be7)
}

type PowerDefinition struct {
	SzInternalName               DT_CHARARRAY
	BDefensive                   DT_INT
	Unk_bd561bf                  DT_INT
	TPrimaryTag                  SkillTagStruct
	ArSkillTags                  DT_VARIABLEARRAY[*SkillTagStruct]
	ESkillCat                    DT_ENUM
	EType                        DT_ENUM
	ECategory                    DT_ENUM
	Unk_2b4eb99                  DT_ENUM
	Unk_9a3836e                  DT_ENUM
	EPowerAnimMovement           DT_ENUM
	Unk_1450715                  DT_INT
	BChannelled                  DT_INT
	BChannelledMovement          DT_INT
	BAutoChannelled              DT_INT
	Unk_3837f2a                  DT_INT
	Unk_6c6eb6b                  DT_INT
	Unk_c19db61                  DT_STRING_FORMULA
	Unk_9aad0d1                  DT_INT
	BIsBasicAttack               DT_INT
	BIsPassive                   DT_INT
	Unk_30531f7                  DT_INT
	BAimedPower                  DT_INT
	Unk_1f1fcc                   DT_INT
	EPowerFallback               DT_ENUM
	Unk_49572b0                  DT_ENUM
	EPowerTargetingType          DT_ENUM
	Unk_d8567e5                  DT_VARIABLEARRAY[*DT_SNO]
	SnoEnchantmentPower          DT_SNO
	SnoMountedRiderPower         DT_SNO
	BUsesWeaponExpertise         DT_INT
	Unk_fca3b69                  DT_INT
	BIgnoreSkillRanks            DT_INT
	SnoPowerAnimationOverride    DT_SNO
	BPreplayAnimation            DT_INT
	Unk_99e0ced                  DT_INT
	EAnimationLayer              DT_ENUM
	Unk_3616d3                   DT_ENUM
	Unk_41a3d22                  DT_INT
	Unk_2df4181                  DT_INT
	BSetLookAtTarget             DT_INT
	BForceSheath                 DT_INT
	Unk_48531b6                  DT_INT
	ArEndingPreplayed            DT_POLYMORPHIC_VARIABLEARRAY[*PowerPhasePreplay]
	PtPhaseInitialization        DT_POLYMORPHIC_VARIABLEARRAY[*PowerPhaseInitialization]
	ArPhases                     DT_POLYMORPHIC_VARIABLEARRAY[*DT_INT64]
	Unk_92fea1c                  DT_INT
	Unk_8cdde38                  DT_INT
	ArFacingWindows              DT_VARIABLEARRAY[*PowerFacingWindow]
	Unk_4bf03ff                  DT_INT
	TAttackSpeed                 DT_STRING_FORMULA
	Unk_6deb090                  DT_INT
	Unk_ed2bdad                  DT_INT
	BOverkillStacked             DT_INT
	Unk_7a86b64                  DT_INT
	EDamageType                  DT_ENUM
	Unk_752edeb                  DT_INT
	TCombatEffectChance          DT_STRING_FORMULA
	Unk_7cfb7ba                  DT_STRING_FORMULA
	Unk_923b5fb                  DT_INT
	Unk_e517f6f                  DT_INT
	EHitSound                    DT_ENUM
	OnHitSounds                  OnHitSounds
	Unk_1a5392                   DT_INT
	Unk_97eadb8                  DT_UINT
	Unk_5e1a52d                  DT_INT
	BCaptionsInside              DT_INT
	EShapeshiftForm              DT_ENUM
	ArResourceCosts              DT_VARIABLEARRAY[*PowerResourceCost]
	THealthCost                  DT_STRING_FORMULA
	TChargeCost                  DT_STRING_FORMULA
	TMaxCharges                  DT_STRING_FORMULA
	TRechargeTime                DT_STRING_FORMULA
	TCooldownTime                DT_STRING_FORMULA
	Unk_b26a921                  DT_STRING_FORMULA
	Unk_86a6e05                  DT_STRING_FORMULA
	BTargetGroundOnly            DT_INT
	Unk_fc01065                  DT_ENUM
	BWalksCloserIfOutOfRange     DT_INT
	BCanSteer                    DT_INT
	Unk_67b65e9                  DT_INT
	BAutoTargetingEnabled        DT_INT
	Unk_42057f3                  DT_INT
	Unk_fbccf7                   DT_INT
	Unk_7cdc8cb                  DT_INT
	Unk_37d51de                  DT_SNO
	Unk_be5487b                  DT_SNO
	Unk_66bbae7                  DT_INT
	Unk_5efc45c                  DT_INT
	Unk_b9ffd91                  DT_INT
	Unk_4d9cc58                  DT_INT
	Unk_950971c                  DT_FLOAT
	Unk_79e716a                  DT_FLOAT
	Unk_ead9008                  DT_FLOAT
	Unk_767809                   DT_FLOAT
	BCastTargetAllies            DT_INT
	BCastTargetEnemies           DT_INT
	BCastTargetPlayersOnly       DT_INT
	TCastTargetNecroCorpsesOnly  DT_STRING_FORMULA
	Unk_b9b985                   DT_STRING_FORMULA
	Unk_bcdb405                  DT_INT
	Unk_6e40571                  DT_INT
	Unk_807540f                  DT_STRING_FORMULA
	VAttributesResistFireValue   DT_STRING_FORMULA
	Unk_e96cf25                  DT_INT
	Unk_d8f7885                  DT_INT
	Unk_8d0166c                  DT_INT
	Unk_1539714                  DT_FLOAT
	Unk_e9ac57a                  DT_INT
	Unk_61e06df                  DT_INT
	Unk_787b722                  DT_FLOAT
	Unk_b2d506d                  DT_FLOAT
	Unk_8b4e7a                   DT_ENUM
	Unk_44bbb8e                  DT_INT
	TAttackRadius                DT_STRING_FORMULA
	BRequiresPathToTarget        DT_INT
	BIsApproachPower             DT_INT
	SnoPowerApproach             DT_SNO
	Unk_f70b0d                   DT_ENUM
	Unk_e65d245                  DT_GBID
	Unk_17dddfd                  DT_INT
	Unk_d897ba6                  ActorMovementPowerData
	EMovementStyleOverride       DT_ENUM
	EFacingStyleOverride         DT_ENUM
	Unk_6714077                  DT_INT
	BRequiresActorTarget         DT_INT
	Unk_805ebfc                  DT_INT
	Unk_b4ad6e7                  DT_INT
	ELOSCheck                    DT_ENUM
	Unk_ea58c49                  DT_FLOAT
	Unk_692752d                  DT_FLOAT
	Unk_eb84fbe                  DT_INT
	BInvisibleDuring             DT_INT
	BInvulnerableDuring          DT_INT
	BUntargetableDuring          DT_INT
	BCannotDieDuring             DT_INT
	BCannotBeInterruptedDuring   DT_INT
	BStunnedUnstoppableIdDuring  DT_INT
	BIgnoreGravityDuring         DT_INT
	Unk_7a416a6                  DT_INT
	ArCCInfo                     DT_FIXEDARRAY[*PowerCrowdControlInfo]
	Unk_6afae78                  DT_INT
	SnoClassRequirement          DT_SNO
	SnoSkillRequirement          DT_SNO
	SnoItemRequirement           DT_SNO
	SnoHeroConditionRequirement  DT_SNO
	BUsableInTown                DT_INT
	BUsableInCombat              DT_INT
	BIsCraftItemName             DT_INT
	Unk_744a4fd                  DT_INT
	Unk_a8611dd                  DT_INT
	Unk_365e3c2                  DT_INT
	Unk_83d96df                  DT_INT
	Unk_9aaab79                  DT_INT
	Unk_b15bf7f                  DT_INT
	Unk_8fe39cf                  DT_UINT
	BPassabilityDuringEnabled    DT_INT
	BPassabilityDestEnabled      DT_INT
	ArCollisionSettings          DT_FIXEDARRAY[*CollisionSettings]
	FCannotLMBAssign             DT_INT
	FMouseAssignable             DT_INT
	FHotbarAssignable            DT_INT
	Unk_a75e08a                  DT_INT
	Unk_89134c5                  DT_INT
	HIconNormal                  DT_UINT
	HIconMouseover               DT_UINT
	HIconPushed                  DT_UINT
	HIconInactive                DT_UINT
	HIconInactiveMouseover       DT_UINT
	HIconRound                   DT_UINT
	Unk_ca85a0a                  DT_GBID
	Unk_159fc50                  DT_UINT
	Unk_cecdfc8                  DT_INT
	Unk_210b5d5                  DT_INT
	Unk_1c331c3                  DT_INT
	Unk_3f7ac9c                  DT_INT
	Unk_36a68ce                  DT_INT
	ArHitReactionOverrides       DT_VARIABLEARRAY[*HitReactionOverride]
	ArBuffs                      DT_VARIABLEARRAY[*PowerBuffDefinition]
	PtScriptFormulas             DT_VARIABLEARRAY[*ScriptFormulaInfo]
	NFormulaCount                DT_INT
	ArPayloads                   DT_VARIABLEARRAY[*PowerPayloadDefinition]
	ArMods                       DT_VARIABLEARRAY[*PowerMod]
	SnoCastingEffectGroup        DT_SNO
	SnoAutoCastingEffectGroup    DT_SNO
	Unk_c5a8e20                  HardpointLink
	FlCastingEffectGroupDuration DT_FLOAT
	ArCastingEffectOverrides     DT_VARIABLEARRAY[*PowerCastingEffectOverride]
	ArPetSpawns                  DT_VARIABLEARRAY[*PowerPetSpawn]
}

func (t *PowerDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.SzInternalName, r, &Options{
		ArrayLength: 64,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.BDefensive, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.Unk_bd561bf, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.TPrimaryTag, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.ArSkillTags, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+104, &t.ESkillCat, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+108, &t.EType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.ECategory, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+116, &t.Unk_2b4eb99, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.Unk_9a3836e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+124, &t.EPowerAnimMovement, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.Unk_1450715, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+132, &t.BChannelled, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+136, &t.BChannelledMovement, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+140, &t.BAutoChannelled, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+144, &t.Unk_3837f2a, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+148, &t.Unk_6c6eb6b, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+152, &t.Unk_c19db61, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+184, &t.Unk_9aad0d1, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+188, &t.BIsBasicAttack, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+192, &t.BIsPassive, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+196, &t.Unk_30531f7, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+200, &t.BAimedPower, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+204, &t.Unk_1f1fcc, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+208, &t.EPowerFallback, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+212, &t.Unk_49572b0, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+216, &t.EPowerTargetingType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+224, &t.Unk_d8567e5, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+240, &t.SnoEnchantmentPower, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+244, &t.SnoMountedRiderPower, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+248, &t.BUsesWeaponExpertise, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+252, &t.Unk_fca3b69, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+256, &t.BIgnoreSkillRanks, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+260, &t.SnoPowerAnimationOverride, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+264, &t.BPreplayAnimation, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+268, &t.Unk_99e0ced, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+272, &t.EAnimationLayer, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+276, &t.Unk_3616d3, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+280, &t.Unk_41a3d22, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+284, &t.Unk_2df4181, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+288, &t.BSetLookAtTarget, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+292, &t.BForceSheath, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+296, &t.Unk_48531b6, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+304, &t.ArEndingPreplayed, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+328, &t.PtPhaseInitialization, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+352, &t.ArPhases, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+376, &t.Unk_92fea1c, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+380, &t.Unk_8cdde38, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+384, &t.ArFacingWindows, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+400, &t.Unk_4bf03ff, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+408, &t.TAttackSpeed, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+440, &t.Unk_6deb090, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+444, &t.Unk_ed2bdad, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+448, &t.BOverkillStacked, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+452, &t.Unk_7a86b64, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+456, &t.EDamageType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+460, &t.Unk_752edeb, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+464, &t.TCombatEffectChance, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+496, &t.Unk_7cfb7ba, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+528, &t.Unk_923b5fb, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+532, &t.Unk_e517f6f, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+536, &t.EHitSound, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+540, &t.OnHitSounds, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+552, &t.Unk_1a5392, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+556, &t.Unk_97eadb8, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+560, &t.Unk_5e1a52d, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+564, &t.BCaptionsInside, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+568, &t.EShapeshiftForm, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+576, &t.ArResourceCosts, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+592, &t.THealthCost, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+624, &t.TChargeCost, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+656, &t.TMaxCharges, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+688, &t.TRechargeTime, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+720, &t.TCooldownTime, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+752, &t.Unk_b26a921, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+784, &t.Unk_86a6e05, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+816, &t.BTargetGroundOnly, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+820, &t.Unk_fc01065, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+824, &t.BWalksCloserIfOutOfRange, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+828, &t.BCanSteer, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+832, &t.Unk_67b65e9, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+836, &t.BAutoTargetingEnabled, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+840, &t.Unk_42057f3, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+844, &t.Unk_fbccf7, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+848, &t.Unk_7cdc8cb, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+852, &t.Unk_37d51de, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+856, &t.Unk_be5487b, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+860, &t.Unk_66bbae7, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+864, &t.Unk_5efc45c, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+868, &t.Unk_b9ffd91, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+872, &t.Unk_4d9cc58, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+876, &t.Unk_950971c, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+880, &t.Unk_79e716a, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+884, &t.Unk_ead9008, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+888, &t.Unk_767809, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+892, &t.BCastTargetAllies, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+896, &t.BCastTargetEnemies, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+900, &t.BCastTargetPlayersOnly, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+904, &t.TCastTargetNecroCorpsesOnly, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+936, &t.Unk_b9b985, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+968, &t.Unk_bcdb405, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+972, &t.Unk_6e40571, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+976, &t.Unk_807540f, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1008, &t.VAttributesResistFireValue, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1040, &t.Unk_e96cf25, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1044, &t.Unk_d8f7885, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1048, &t.Unk_8d0166c, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1052, &t.Unk_1539714, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1056, &t.Unk_e9ac57a, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1060, &t.Unk_61e06df, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1064, &t.Unk_787b722, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1068, &t.Unk_b2d506d, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1072, &t.Unk_8b4e7a, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1076, &t.Unk_44bbb8e, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1080, &t.TAttackRadius, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1112, &t.BRequiresPathToTarget, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1116, &t.BIsApproachPower, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1120, &t.SnoPowerApproach, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1124, &t.Unk_f70b0d, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1128, &t.Unk_e65d245, r, &Options{
		Flags: 1,
		Group: 34,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1132, &t.Unk_17dddfd, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1136, &t.Unk_d897ba6, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1256, &t.EMovementStyleOverride, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1260, &t.EFacingStyleOverride, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1264, &t.Unk_6714077, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1268, &t.BRequiresActorTarget, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1272, &t.Unk_805ebfc, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1276, &t.Unk_b4ad6e7, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1280, &t.ELOSCheck, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1284, &t.Unk_ea58c49, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1288, &t.Unk_692752d, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1292, &t.Unk_eb84fbe, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1296, &t.BInvisibleDuring, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1300, &t.BInvulnerableDuring, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1304, &t.BUntargetableDuring, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1308, &t.BCannotDieDuring, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1312, &t.BCannotBeInterruptedDuring, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1316, &t.BStunnedUnstoppableIdDuring, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1320, &t.BIgnoreGravityDuring, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1324, &t.Unk_7a416a6, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1328, &t.ArCCInfo, r, &Options{
		ArrayLength: 14,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2672, &t.Unk_6afae78, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2676, &t.SnoClassRequirement, r, &Options{
		Flags: 513,
		Group: 74,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2680, &t.SnoSkillRequirement, r, &Options{
		Flags: 1,
		Group: 116,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2684, &t.SnoItemRequirement, r, &Options{
		Flags: 513,
		Group: 73,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2688, &t.SnoHeroConditionRequirement, r, &Options{
		Flags: 513,
		Group: 51,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2692, &t.BUsableInTown, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2696, &t.BUsableInCombat, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2700, &t.BIsCraftItemName, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2704, &t.Unk_744a4fd, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2708, &t.Unk_a8611dd, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2712, &t.Unk_365e3c2, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2716, &t.Unk_83d96df, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2720, &t.Unk_9aaab79, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2724, &t.Unk_b15bf7f, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2728, &t.Unk_8fe39cf, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2732, &t.BPassabilityDuringEnabled, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2736, &t.BPassabilityDestEnabled, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2740, &t.ArCollisionSettings, r, &Options{
		ArrayLength: 2,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2780, &t.FCannotLMBAssign, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2784, &t.FMouseAssignable, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2788, &t.FHotbarAssignable, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2792, &t.Unk_a75e08a, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2796, &t.Unk_89134c5, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2800, &t.HIconNormal, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2804, &t.HIconMouseover, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2808, &t.HIconPushed, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2812, &t.HIconInactive, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2816, &t.HIconInactiveMouseover, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2820, &t.HIconRound, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2824, &t.Unk_ca85a0a, r, &Options{
		Flags: 1,
		Group: 23,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2828, &t.Unk_159fc50, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2832, &t.Unk_cecdfc8, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2836, &t.Unk_210b5d5, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2840, &t.Unk_1c331c3, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2844, &t.Unk_3f7ac9c, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2848, &t.Unk_36a68ce, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2856, &t.ArHitReactionOverrides, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2872, &t.ArBuffs, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2888, &t.PtScriptFormulas, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2904, &t.NFormulaCount, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2912, &t.ArPayloads, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2928, &t.ArMods, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2944, &t.SnoCastingEffectGroup, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2948, &t.SnoAutoCastingEffectGroup, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2952, &t.Unk_c5a8e20, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2960, &t.FlCastingEffectGroupDuration, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2968, &t.ArCastingEffectOverrides, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2984, &t.ArPetSpawns, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+3000, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PowerDefinition) Walk(cb WalkCallback) {
	cb.Do("SzInternalName", &t.SzInternalName)
	cb.Do("BDefensive", &t.BDefensive)
	cb.Do("Unk_bd561bf", &t.Unk_bd561bf)
	cb.Do("TPrimaryTag", &t.TPrimaryTag)
	cb.Do("ArSkillTags", &t.ArSkillTags)
	cb.Do("ESkillCat", &t.ESkillCat)
	cb.Do("EType", &t.EType)
	cb.Do("ECategory", &t.ECategory)
	cb.Do("Unk_2b4eb99", &t.Unk_2b4eb99)
	cb.Do("Unk_9a3836e", &t.Unk_9a3836e)
	cb.Do("EPowerAnimMovement", &t.EPowerAnimMovement)
	cb.Do("Unk_1450715", &t.Unk_1450715)
	cb.Do("BChannelled", &t.BChannelled)
	cb.Do("BChannelledMovement", &t.BChannelledMovement)
	cb.Do("BAutoChannelled", &t.BAutoChannelled)
	cb.Do("Unk_3837f2a", &t.Unk_3837f2a)
	cb.Do("Unk_6c6eb6b", &t.Unk_6c6eb6b)
	cb.Do("Unk_c19db61", &t.Unk_c19db61)
	cb.Do("Unk_9aad0d1", &t.Unk_9aad0d1)
	cb.Do("BIsBasicAttack", &t.BIsBasicAttack)
	cb.Do("BIsPassive", &t.BIsPassive)
	cb.Do("Unk_30531f7", &t.Unk_30531f7)
	cb.Do("BAimedPower", &t.BAimedPower)
	cb.Do("Unk_1f1fcc", &t.Unk_1f1fcc)
	cb.Do("EPowerFallback", &t.EPowerFallback)
	cb.Do("Unk_49572b0", &t.Unk_49572b0)
	cb.Do("EPowerTargetingType", &t.EPowerTargetingType)
	cb.Do("Unk_d8567e5", &t.Unk_d8567e5)
	cb.Do("SnoEnchantmentPower", &t.SnoEnchantmentPower)
	cb.Do("SnoMountedRiderPower", &t.SnoMountedRiderPower)
	cb.Do("BUsesWeaponExpertise", &t.BUsesWeaponExpertise)
	cb.Do("Unk_fca3b69", &t.Unk_fca3b69)
	cb.Do("BIgnoreSkillRanks", &t.BIgnoreSkillRanks)
	cb.Do("SnoPowerAnimationOverride", &t.SnoPowerAnimationOverride)
	cb.Do("BPreplayAnimation", &t.BPreplayAnimation)
	cb.Do("Unk_99e0ced", &t.Unk_99e0ced)
	cb.Do("EAnimationLayer", &t.EAnimationLayer)
	cb.Do("Unk_3616d3", &t.Unk_3616d3)
	cb.Do("Unk_41a3d22", &t.Unk_41a3d22)
	cb.Do("Unk_2df4181", &t.Unk_2df4181)
	cb.Do("BSetLookAtTarget", &t.BSetLookAtTarget)
	cb.Do("BForceSheath", &t.BForceSheath)
	cb.Do("Unk_48531b6", &t.Unk_48531b6)
	cb.Do("ArEndingPreplayed", &t.ArEndingPreplayed)
	cb.Do("PtPhaseInitialization", &t.PtPhaseInitialization)
	cb.Do("ArPhases", &t.ArPhases)
	cb.Do("Unk_92fea1c", &t.Unk_92fea1c)
	cb.Do("Unk_8cdde38", &t.Unk_8cdde38)
	cb.Do("ArFacingWindows", &t.ArFacingWindows)
	cb.Do("Unk_4bf03ff", &t.Unk_4bf03ff)
	cb.Do("TAttackSpeed", &t.TAttackSpeed)
	cb.Do("Unk_6deb090", &t.Unk_6deb090)
	cb.Do("Unk_ed2bdad", &t.Unk_ed2bdad)
	cb.Do("BOverkillStacked", &t.BOverkillStacked)
	cb.Do("Unk_7a86b64", &t.Unk_7a86b64)
	cb.Do("EDamageType", &t.EDamageType)
	cb.Do("Unk_752edeb", &t.Unk_752edeb)
	cb.Do("TCombatEffectChance", &t.TCombatEffectChance)
	cb.Do("Unk_7cfb7ba", &t.Unk_7cfb7ba)
	cb.Do("Unk_923b5fb", &t.Unk_923b5fb)
	cb.Do("Unk_e517f6f", &t.Unk_e517f6f)
	cb.Do("EHitSound", &t.EHitSound)
	cb.Do("OnHitSounds", &t.OnHitSounds)
	cb.Do("Unk_1a5392", &t.Unk_1a5392)
	cb.Do("Unk_97eadb8", &t.Unk_97eadb8)
	cb.Do("Unk_5e1a52d", &t.Unk_5e1a52d)
	cb.Do("BCaptionsInside", &t.BCaptionsInside)
	cb.Do("EShapeshiftForm", &t.EShapeshiftForm)
	cb.Do("ArResourceCosts", &t.ArResourceCosts)
	cb.Do("THealthCost", &t.THealthCost)
	cb.Do("TChargeCost", &t.TChargeCost)
	cb.Do("TMaxCharges", &t.TMaxCharges)
	cb.Do("TRechargeTime", &t.TRechargeTime)
	cb.Do("TCooldownTime", &t.TCooldownTime)
	cb.Do("Unk_b26a921", &t.Unk_b26a921)
	cb.Do("Unk_86a6e05", &t.Unk_86a6e05)
	cb.Do("BTargetGroundOnly", &t.BTargetGroundOnly)
	cb.Do("Unk_fc01065", &t.Unk_fc01065)
	cb.Do("BWalksCloserIfOutOfRange", &t.BWalksCloserIfOutOfRange)
	cb.Do("BCanSteer", &t.BCanSteer)
	cb.Do("Unk_67b65e9", &t.Unk_67b65e9)
	cb.Do("BAutoTargetingEnabled", &t.BAutoTargetingEnabled)
	cb.Do("Unk_42057f3", &t.Unk_42057f3)
	cb.Do("Unk_fbccf7", &t.Unk_fbccf7)
	cb.Do("Unk_7cdc8cb", &t.Unk_7cdc8cb)
	cb.Do("Unk_37d51de", &t.Unk_37d51de)
	cb.Do("Unk_be5487b", &t.Unk_be5487b)
	cb.Do("Unk_66bbae7", &t.Unk_66bbae7)
	cb.Do("Unk_5efc45c", &t.Unk_5efc45c)
	cb.Do("Unk_b9ffd91", &t.Unk_b9ffd91)
	cb.Do("Unk_4d9cc58", &t.Unk_4d9cc58)
	cb.Do("Unk_950971c", &t.Unk_950971c)
	cb.Do("Unk_79e716a", &t.Unk_79e716a)
	cb.Do("Unk_ead9008", &t.Unk_ead9008)
	cb.Do("Unk_767809", &t.Unk_767809)
	cb.Do("BCastTargetAllies", &t.BCastTargetAllies)
	cb.Do("BCastTargetEnemies", &t.BCastTargetEnemies)
	cb.Do("BCastTargetPlayersOnly", &t.BCastTargetPlayersOnly)
	cb.Do("TCastTargetNecroCorpsesOnly", &t.TCastTargetNecroCorpsesOnly)
	cb.Do("Unk_b9b985", &t.Unk_b9b985)
	cb.Do("Unk_bcdb405", &t.Unk_bcdb405)
	cb.Do("Unk_6e40571", &t.Unk_6e40571)
	cb.Do("Unk_807540f", &t.Unk_807540f)
	cb.Do("VAttributesResistFireValue", &t.VAttributesResistFireValue)
	cb.Do("Unk_e96cf25", &t.Unk_e96cf25)
	cb.Do("Unk_d8f7885", &t.Unk_d8f7885)
	cb.Do("Unk_8d0166c", &t.Unk_8d0166c)
	cb.Do("Unk_1539714", &t.Unk_1539714)
	cb.Do("Unk_e9ac57a", &t.Unk_e9ac57a)
	cb.Do("Unk_61e06df", &t.Unk_61e06df)
	cb.Do("Unk_787b722", &t.Unk_787b722)
	cb.Do("Unk_b2d506d", &t.Unk_b2d506d)
	cb.Do("Unk_8b4e7a", &t.Unk_8b4e7a)
	cb.Do("Unk_44bbb8e", &t.Unk_44bbb8e)
	cb.Do("TAttackRadius", &t.TAttackRadius)
	cb.Do("BRequiresPathToTarget", &t.BRequiresPathToTarget)
	cb.Do("BIsApproachPower", &t.BIsApproachPower)
	cb.Do("SnoPowerApproach", &t.SnoPowerApproach)
	cb.Do("Unk_f70b0d", &t.Unk_f70b0d)
	cb.Do("Unk_e65d245", &t.Unk_e65d245)
	cb.Do("Unk_17dddfd", &t.Unk_17dddfd)
	cb.Do("Unk_d897ba6", &t.Unk_d897ba6)
	cb.Do("EMovementStyleOverride", &t.EMovementStyleOverride)
	cb.Do("EFacingStyleOverride", &t.EFacingStyleOverride)
	cb.Do("Unk_6714077", &t.Unk_6714077)
	cb.Do("BRequiresActorTarget", &t.BRequiresActorTarget)
	cb.Do("Unk_805ebfc", &t.Unk_805ebfc)
	cb.Do("Unk_b4ad6e7", &t.Unk_b4ad6e7)
	cb.Do("ELOSCheck", &t.ELOSCheck)
	cb.Do("Unk_ea58c49", &t.Unk_ea58c49)
	cb.Do("Unk_692752d", &t.Unk_692752d)
	cb.Do("Unk_eb84fbe", &t.Unk_eb84fbe)
	cb.Do("BInvisibleDuring", &t.BInvisibleDuring)
	cb.Do("BInvulnerableDuring", &t.BInvulnerableDuring)
	cb.Do("BUntargetableDuring", &t.BUntargetableDuring)
	cb.Do("BCannotDieDuring", &t.BCannotDieDuring)
	cb.Do("BCannotBeInterruptedDuring", &t.BCannotBeInterruptedDuring)
	cb.Do("BStunnedUnstoppableIdDuring", &t.BStunnedUnstoppableIdDuring)
	cb.Do("BIgnoreGravityDuring", &t.BIgnoreGravityDuring)
	cb.Do("Unk_7a416a6", &t.Unk_7a416a6)
	cb.Do("ArCCInfo", &t.ArCCInfo)
	cb.Do("Unk_6afae78", &t.Unk_6afae78)
	cb.Do("SnoClassRequirement", &t.SnoClassRequirement)
	cb.Do("SnoSkillRequirement", &t.SnoSkillRequirement)
	cb.Do("SnoItemRequirement", &t.SnoItemRequirement)
	cb.Do("SnoHeroConditionRequirement", &t.SnoHeroConditionRequirement)
	cb.Do("BUsableInTown", &t.BUsableInTown)
	cb.Do("BUsableInCombat", &t.BUsableInCombat)
	cb.Do("BIsCraftItemName", &t.BIsCraftItemName)
	cb.Do("Unk_744a4fd", &t.Unk_744a4fd)
	cb.Do("Unk_a8611dd", &t.Unk_a8611dd)
	cb.Do("Unk_365e3c2", &t.Unk_365e3c2)
	cb.Do("Unk_83d96df", &t.Unk_83d96df)
	cb.Do("Unk_9aaab79", &t.Unk_9aaab79)
	cb.Do("Unk_b15bf7f", &t.Unk_b15bf7f)
	cb.Do("Unk_8fe39cf", &t.Unk_8fe39cf)
	cb.Do("BPassabilityDuringEnabled", &t.BPassabilityDuringEnabled)
	cb.Do("BPassabilityDestEnabled", &t.BPassabilityDestEnabled)
	cb.Do("ArCollisionSettings", &t.ArCollisionSettings)
	cb.Do("FCannotLMBAssign", &t.FCannotLMBAssign)
	cb.Do("FMouseAssignable", &t.FMouseAssignable)
	cb.Do("FHotbarAssignable", &t.FHotbarAssignable)
	cb.Do("Unk_a75e08a", &t.Unk_a75e08a)
	cb.Do("Unk_89134c5", &t.Unk_89134c5)
	cb.Do("HIconNormal", &t.HIconNormal)
	cb.Do("HIconMouseover", &t.HIconMouseover)
	cb.Do("HIconPushed", &t.HIconPushed)
	cb.Do("HIconInactive", &t.HIconInactive)
	cb.Do("HIconInactiveMouseover", &t.HIconInactiveMouseover)
	cb.Do("HIconRound", &t.HIconRound)
	cb.Do("Unk_ca85a0a", &t.Unk_ca85a0a)
	cb.Do("Unk_159fc50", &t.Unk_159fc50)
	cb.Do("Unk_cecdfc8", &t.Unk_cecdfc8)
	cb.Do("Unk_210b5d5", &t.Unk_210b5d5)
	cb.Do("Unk_1c331c3", &t.Unk_1c331c3)
	cb.Do("Unk_3f7ac9c", &t.Unk_3f7ac9c)
	cb.Do("Unk_36a68ce", &t.Unk_36a68ce)
	cb.Do("ArHitReactionOverrides", &t.ArHitReactionOverrides)
	cb.Do("ArBuffs", &t.ArBuffs)
	cb.Do("PtScriptFormulas", &t.PtScriptFormulas)
	cb.Do("NFormulaCount", &t.NFormulaCount)
	cb.Do("ArPayloads", &t.ArPayloads)
	cb.Do("ArMods", &t.ArMods)
	cb.Do("SnoCastingEffectGroup", &t.SnoCastingEffectGroup)
	cb.Do("SnoAutoCastingEffectGroup", &t.SnoAutoCastingEffectGroup)
	cb.Do("Unk_c5a8e20", &t.Unk_c5a8e20)
	cb.Do("FlCastingEffectGroupDuration", &t.FlCastingEffectGroupDuration)
	cb.Do("ArCastingEffectOverrides", &t.ArCastingEffectOverrides)
	cb.Do("ArPetSpawns", &t.ArPetSpawns)
}

type OnAttackBuffCallback struct {
	// Inherits BuffCallbackBase
	// Inherits PolymorphicBase
	DwType                DT_UINT
	DwPad                 DT_UINT
	SnoTriggerEffectGroup DT_SNO
	ArConditions          DT_POLYMORPHIC_VARIABLEARRAY[*DT_INT64]
}

func (t *OnAttackBuffCallback) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoTriggerEffectGroup, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ArConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *OnAttackBuffCallback) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("SnoTriggerEffectGroup", &t.SnoTriggerEffectGroup)
	cb.Do("ArConditions", &t.ArConditions)
}

type ACDInventoryUpdateActorSNO struct {
	THeader  RequiredMessageHeader
	Ann      DT_ACD_NETWORK_NAME
	SnoActor DT_SNO
}

func (t *ACDInventoryUpdateActorSNO) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Ann, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SnoActor, r, &Options{
		Flags: 1,
		Group: 1,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+28, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ACDInventoryUpdateActorSNO) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("Ann", &t.Ann)
	cb.Do("SnoActor", &t.SnoActor)
}

type NamedGizmoData struct {
	// Inherits ActorGizmoData
	// Inherits PolymorphicBase
	DwType                       DT_UINT
	DwPad                        DT_UINT
	FDisableNonFriendlyOperation DT_INT
	FWalkToCenter                DT_INT
	FGizmoStartsDisabled         DT_INT
	FUseStringListName           DT_INT
	FForceMinimapIcon            DT_INT
	FlOperationRadius            DT_FLOAT
	Unk_d0b1df5                  DT_FLOAT
	FlGizmoUseTime               DT_FLOAT
	SnoChannelingEffect          DT_SNO
	Unk_2767229                  DT_INT
	FGizmoShowProgressBar        DT_INT
	Unk_6d9ebe1                  DT_INT
	Unk_5456245                  DT_INT
	Unk_af5815a                  DT_INT
	SnoOnClickEffect             DT_SNO
	SnoPickedUpEffect            DT_SNO
	SnoDropOnGroundEffect        DT_SNO
	TConditionData               GizmoConditionData
	SnoPowerOperator             DT_SNO
	SnoPowerOperate              DT_SNO
	SnoPowerOperatorActive       DT_SNO
	SnoPowerOperateActive        DT_SNO
	Unk_359810e                  DT_INT
	NCooldown                    DT_UINT
	Unk_9c8478e                  DT_UINT
	Unk_d45ed2d                  DT_INT
	Unk_f6b20b7                  DT_INT
	Unk_54513b8                  DT_INT
	Unk_fd1f378                  DT_UINT
	Unk_487c14                   DT_UINT
	Unk_87f2609                  DT_UINT
	Unk_158eb4f                  DT_FLOAT
	Unk_ab58cd3                  DT_ENUM
	Unk_91a3966                  DT_UINT
	Unk_25312e5                  DT_UINT
	Unk_4be4371                  DT_INT
}

func (t *NamedGizmoData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.FDisableNonFriendlyOperation, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.FWalkToCenter, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.FGizmoStartsDisabled, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.FUseStringListName, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.FForceMinimapIcon, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.FlOperationRadius, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.Unk_d0b1df5, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.FlGizmoUseTime, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.SnoChannelingEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.Unk_2767229, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.FGizmoShowProgressBar, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+60, &t.Unk_6d9ebe1, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.Unk_5456245, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.Unk_af5815a, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.SnoOnClickEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.SnoPickedUpEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.SnoDropOnGroundEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.TConditionData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.SnoPowerOperator, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.SnoPowerOperate, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.SnoPowerOperatorActive, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+100, &t.SnoPowerOperateActive, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+104, &t.Unk_359810e, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+108, &t.NCooldown, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.Unk_9c8478e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+116, &t.Unk_d45ed2d, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.Unk_f6b20b7, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+124, &t.Unk_54513b8, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.Unk_fd1f378, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+132, &t.Unk_487c14, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+136, &t.Unk_87f2609, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+140, &t.Unk_158eb4f, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+144, &t.Unk_ab58cd3, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+148, &t.Unk_91a3966, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+152, &t.Unk_25312e5, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+156, &t.Unk_4be4371, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+160, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *NamedGizmoData) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("FDisableNonFriendlyOperation", &t.FDisableNonFriendlyOperation)
	cb.Do("FWalkToCenter", &t.FWalkToCenter)
	cb.Do("FGizmoStartsDisabled", &t.FGizmoStartsDisabled)
	cb.Do("FUseStringListName", &t.FUseStringListName)
	cb.Do("FForceMinimapIcon", &t.FForceMinimapIcon)
	cb.Do("FlOperationRadius", &t.FlOperationRadius)
	cb.Do("Unk_d0b1df5", &t.Unk_d0b1df5)
	cb.Do("FlGizmoUseTime", &t.FlGizmoUseTime)
	cb.Do("SnoChannelingEffect", &t.SnoChannelingEffect)
	cb.Do("Unk_2767229", &t.Unk_2767229)
	cb.Do("FGizmoShowProgressBar", &t.FGizmoShowProgressBar)
	cb.Do("Unk_6d9ebe1", &t.Unk_6d9ebe1)
	cb.Do("Unk_5456245", &t.Unk_5456245)
	cb.Do("Unk_af5815a", &t.Unk_af5815a)
	cb.Do("SnoOnClickEffect", &t.SnoOnClickEffect)
	cb.Do("SnoPickedUpEffect", &t.SnoPickedUpEffect)
	cb.Do("SnoDropOnGroundEffect", &t.SnoDropOnGroundEffect)
	cb.Do("TConditionData", &t.TConditionData)
	cb.Do("SnoPowerOperator", &t.SnoPowerOperator)
	cb.Do("SnoPowerOperate", &t.SnoPowerOperate)
	cb.Do("SnoPowerOperatorActive", &t.SnoPowerOperatorActive)
	cb.Do("SnoPowerOperateActive", &t.SnoPowerOperateActive)
	cb.Do("Unk_359810e", &t.Unk_359810e)
	cb.Do("NCooldown", &t.NCooldown)
	cb.Do("Unk_9c8478e", &t.Unk_9c8478e)
	cb.Do("Unk_d45ed2d", &t.Unk_d45ed2d)
	cb.Do("Unk_f6b20b7", &t.Unk_f6b20b7)
	cb.Do("Unk_54513b8", &t.Unk_54513b8)
	cb.Do("Unk_fd1f378", &t.Unk_fd1f378)
	cb.Do("Unk_487c14", &t.Unk_487c14)
	cb.Do("Unk_87f2609", &t.Unk_87f2609)
	cb.Do("Unk_158eb4f", &t.Unk_158eb4f)
	cb.Do("Unk_ab58cd3", &t.Unk_ab58cd3)
	cb.Do("Unk_91a3966", &t.Unk_91a3966)
	cb.Do("Unk_25312e5", &t.Unk_25312e5)
	cb.Do("Unk_4be4371", &t.Unk_4be4371)
}

type PowerConditionIsPet struct {
	// Inherits PowerConditionBase
	// Inherits PolymorphicBase
	DwType      DT_UINT
	BInverse    DT_INT
	DwPad       DT_UINT
	ESubject    DT_ENUM
	Unk_d8caf57 DT_INT
	ArPetType   DT_VARIABLEARRAY[*DT_GBID]
}

func (t *PowerConditionIsPet) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BInverse, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ESubject, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.Unk_d8caf57, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.ArPetType, r, &Options{
		Flags: 1,
		Group: 23,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PowerConditionIsPet) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("BInverse", &t.BInverse)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("ESubject", &t.ESubject)
	cb.Do("Unk_d8caf57", &t.Unk_d8caf57)
	cb.Do("ArPetType", &t.ArPetType)
}

type UILayoutEntries struct {
	SnoUI              DT_SNO
	SzCutoffWrite      DT_CHARARRAY
	SzScreenName       DT_CHARARRAY
	EGroup             DT_ENUM
	ELayer             DT_ENUM
	EPlatform          DT_ENUM
	SnoWorld           DT_SNO
	SzCameraMarkerName DT_CHARARRAY
	EBanner            DT_ENUM
	DwAttributeFlags   DT_UINT
}

func (t *UILayoutEntries) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoUI, r, &Options{
		Flags: 513,
		Group: 46,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.SzCutoffWrite, r, &Options{
		ArrayLength: 256,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+260, &t.SzScreenName, r, &Options{
		ArrayLength: 256,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+516, &t.EGroup, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+520, &t.ELayer, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+524, &t.EPlatform, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+528, &t.SnoWorld, r, &Options{
		Flags: 513,
		Group: 48,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+532, &t.SzCameraMarkerName, r, &Options{
		ArrayLength: 128,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+660, &t.EBanner, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+664, &t.DwAttributeFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if _, err := r.Seek(p+668, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *UILayoutEntries) Walk(cb WalkCallback) {
	cb.Do("SnoUI", &t.SnoUI)
	cb.Do("SzCutoffWrite", &t.SzCutoffWrite)
	cb.Do("SzScreenName", &t.SzScreenName)
	cb.Do("EGroup", &t.EGroup)
	cb.Do("ELayer", &t.ELayer)
	cb.Do("EPlatform", &t.EPlatform)
	cb.Do("SnoWorld", &t.SnoWorld)
	cb.Do("SzCameraMarkerName", &t.SzCameraMarkerName)
	cb.Do("EBanner", &t.EBanner)
	cb.Do("DwAttributeFlags", &t.DwAttributeFlags)
}

type MarkerAmbientSoundData struct {
	// Inherits MarkerSplineData
	// Inherits MarkerDataBase
	// Inherits PolymorphicBase
	DwType                         DT_UINT
	DwPad                          DT_UINT
	EInterpolationMode             DT_ENUM
	Unk_a3f1699                    DT_FLOAT
	EAmbientSoundShape             DT_ENUM
	FlCapsuleLength                DT_FLOAT
	FClosedSpline                  DT_INT
	SnoCampaignVisibilityCondition DT_SNO
	Unk_4a4ab0e                    DT_VARIABLEARRAY[*DT_VECTOR3D]
}

func (t *MarkerAmbientSoundData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.EInterpolationMode, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.Unk_a3f1699, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.EAmbientSoundShape, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.FlCapsuleLength, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.FClosedSpline, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.SnoCampaignVisibilityCondition, r, &Options{
		Flags: 1,
		Group: 51,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.Unk_4a4ab0e, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+56, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *MarkerAmbientSoundData) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("EInterpolationMode", &t.EInterpolationMode)
	cb.Do("Unk_a3f1699", &t.Unk_a3f1699)
	cb.Do("EAmbientSoundShape", &t.EAmbientSoundShape)
	cb.Do("FlCapsuleLength", &t.FlCapsuleLength)
	cb.Do("FClosedSpline", &t.FClosedSpline)
	cb.Do("SnoCampaignVisibilityCondition", &t.SnoCampaignVisibilityCondition)
	cb.Do("Unk_4a4ab0e", &t.Unk_4a4ab0e)
}

type PathLink struct {
	SzLinkName  DT_UINT
	TPathHandle MarkerHandle
	EFollowMode DT_ENUM
	DwFlags     DT_UINT
}

func (t *PathLink) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SzLinkName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.TPathHandle, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.EFollowMode, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.DwFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if _, err := r.Seek(p+20, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PathLink) Walk(cb WalkCallback) {
	cb.Do("SzLinkName", &t.SzLinkName)
	cb.Do("TPathHandle", &t.TPathHandle)
	cb.Do("EFollowMode", &t.EFollowMode)
	cb.Do("DwFlags", &t.DwFlags)
}

type MapRevealWorldMessage struct {
	THeader  RequiredMessageHeader
	IdSWorld DT_SHARED_SERVER_DATA_ID
}

func (t *MapRevealWorldMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.IdSWorld, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *MapRevealWorldMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("IdSWorld", &t.IdSWorld)
}

type Type_159502df struct {
	// Inherits Type_7e418ba8
	// Inherits PolymorphicBase
	DwType       DT_UINT
	Unk_2de4987  DT_UINT
	ArConditions DT_POLYMORPHIC_VARIABLEARRAY[*DT_INT64]
	BEnd         DT_INT
	DwPad        DT_UINT
}

func (t *Type_159502df) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_2de4987, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ArConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.BEnd, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+56, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_159502df) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("Unk_2de4987", &t.Unk_2de4987)
	cb.Do("ArConditions", &t.ArConditions)
	cb.Do("BEnd", &t.BEnd)
	cb.Do("DwPad", &t.DwPad)
}

type Currency struct {
	ECurrencyType   DT_ENUM
	NCurrencyAmount DT_INT64
}

func (t *Currency) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.ECurrencyType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.NCurrencyAmount, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Currency) Walk(cb WalkCallback) {
	cb.Do("ECurrencyType", &t.ECurrencyType)
	cb.Do("NCurrencyAmount", &t.NCurrencyAmount)
}

type GlobalBase struct {
	// Inherits PolymorphicBase
	DwType DT_UINT
	DwPad  DT_UINT
}

func (t *GlobalBase) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *GlobalBase) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
}

type GlobalData struct {
	// Inherits GlobalBase
	// Inherits PolymorphicBase
	DwType                                  DT_UINT
	DwPad                                   DT_UINT
	ArLookVariants                          DT_VARIABLEARRAY[*LookVariant]
	ArShaderMapOverrides                    DT_VARIABLEARRAY[*ShaderMapOverride]
	Unk_156a14c                             DT_VARIABLEARRAY[*DT_INT]
	Unk_6759f02                             DT_VARIABLEARRAY[*DT_INT]
	Unk_e2e2917                             DT_FLOAT
	Unk_e2fe2ea                             DT_FLOAT
	Unk_95f203b                             DT_FLOAT
	Unk_db1c22b                             DT_FLOAT
	Unk_b5ebbb2                             DT_FLOAT
	Unk_5ccf7cc                             DT_FLOAT
	Unk_e7d727                              DT_FLOAT
	Unk_51c96d6                             DT_FLOAT
	Unk_ecd99ed                             DT_FLOAT
	Unk_51c95d8                             DT_FLOAT
	Unk_ec03fd                              DT_FLOAT
	Unk_6032a24                             DT_FLOAT
	Unk_d247cf8                             DT_INT
	Unk_eea9f7c                             DT_INT
	Unk_8472630                             DT_FLOAT
	Unk_8f17798                             DT_FLOAT
	Unk_7954efd                             DT_FLOAT
	Unk_1a40d94                             DT_FLOAT
	Unk_7954dff                             DT_FLOAT
	Unk_76813f3                             DT_FLOAT
	Unk_60b79b9                             DT_INT
	Unk_eec6296                             DT_FLOAT
	Unk_917777c                             DT_INT
	Unk_318127b                             DT_FLOAT
	Unk_f143013                             DT_FLOAT
	Unk_33296c0                             DT_FLOAT
	Unk_9ca3dcb                             DT_FLOAT
	Unk_18a668d                             DT_FLOAT
	Unk_b0ffbbf                             DT_FLOAT
	Unk_f54712c                             DT_FLOAT
	Unk_d6395ff                             DT_FLOAT
	Unk_854ceeb                             DT_FLOAT
	Unk_bb4f409                             DT_FLOAT
	Unk_ee3875c                             DT_FLOAT
	Unk_8b202cb                             DT_INT
	Unk_b704b85                             DT_INT
	Unk_f2db3a4                             DT_FIXEDARRAY[*DT_FLOAT]
	Unk_ebfec0b                             DT_FLOAT
	Unk_3fe50bb                             DT_INT
	Unk_5d77ea6                             DT_UINT
	Unk_5e4581e                             DT_UINT
	SnoStartingSubzone                      DT_SNO
	Unk_7499899                             DT_SNO
	ArStartLocationNames                    DT_VARIABLEARRAY[*StartLocationName]
	Unk_8aac9ef                             DT_STRING_FORMULA
	FlSellPricePercent                      DT_FLOAT
	FlPlayerPowerCacheTimeoutNormal         DT_FLOAT
	FlPlayerPowerCacheTimeoutInterrupt      DT_FLOAT
	Unk_d38759a                             DT_FLOAT
	Unk_dfccabc                             DT_FLOAT
	Unk_e9ca4ed                             DT_FLOAT
	Unk_e03c38a                             DT_FLOAT
	Unk_5b6dc2d                             DT_FLOAT
	Unk_f3679e3                             DT_FLOAT
	Unk_4f5a9e3                             DT_FLOAT
	Unk_44ba742                             DT_INT
	Unk_1636dfe                             DT_FLOAT
	Unk_8835be2                             DT_FLOAT
	Unk_a70ae94                             DT_FLOAT
	Unk_43addd1                             DT_FLOAT
	Unk_6a55fc4                             DT_UINT
	Unk_f1891b9                             DT_UINT
	NUIBusyTime                             DT_UINT
	NTrialVersionLevelCap                   DT_INT
	Unk_579747d                             DT_FLOAT
	Unk_17db22a                             DT_FLOAT
	Unk_b740dfc                             DT_FLOAT
	Unk_8aec133                             DT_FLOAT
	FlHirelingDiminishedBonusRatio          DT_FLOAT
	Unk_882ccc8                             DT_FLOAT
	FlMonsterCritDamageScalar               DT_FLOAT
	FlPlayerCritDamageScalar                DT_FLOAT
	FlPvPMaxCritDamagePercent               DT_FLOAT
	FlDefaultDamageVariance                 DT_FLOAT
	Unk_251341c                             DT_FLOAT
	Unk_352d6bc                             DT_FLOAT
	Unk_e248d9d                             DT_FLOAT
	Unk_51a7ab2                             DT_FLOAT
	Unk_ed83bad                             DT_FLOAT
	Unk_d37d3d4                             DT_FLOAT
	NStashSlotsCost                         DT_INT
	NStashTabCost                           DT_FIXEDARRAY[*DT_INT]
	NClanBankTabCost                        DT_FIXEDARRAY[*DT_INT]
	Unk_a9e9f16                             DT_STRING_FORMULA
	Unk_ea4532f                             DT_STRING_FORMULA
	NItemPowerOffset                        DT_INT
	Unk_62802da                             DT_INT
	Unk_3c98a40                             DT_INT
	Unk_21a6a21                             DT_INT
	Unk_60132bb                             DT_INT
	ArStartingParagonGlyphs                 DT_VARIABLEARRAY[*DT_SNO]
	ArParagonPowerBudgetMultiplier          DT_FIXEDARRAY[*DT_FLOAT]
	Unk_4b766ae                             DT_FLOAT
	Unk_5a673c4                             DT_FLOAT
	Unk_4a89716                             DT_FLOAT
	Unk_b491be3                             DT_FLOAT
	Unk_e762b56                             DT_FLOAT
	Unk_2e11fb8                             DT_FLOAT
	Unk_9a0ad1d                             DT_FLOAT
	Unk_6e8cb51                             DT_FLOAT
	Unk_4d68111                             DT_FLOAT
	Unk_d2ab6e9                             DT_FLOAT
	Unk_7c75a6b                             DT_FIXEDARRAY[*DT_INT]
	Unk_6b670be                             DT_FLOAT
	Unk_13c636                              DT_FLOAT
	Unk_fa7eefd                             DT_UINT
	Unk_7176abf                             DT_INT
	Unk_e2e6a87                             DT_FIXEDARRAY[*Type_7de8fcbd]
	Unk_f78b3b9                             Type_7de8fcbd
	Unk_3761f84                             Type_7de8fcbd
	Unk_7452a15                             DT_INT
	Unk_4b7eea0                             DT_INT
	Unk_3890cf4                             DT_FLOAT
	FlLegendaryAffixTwoHandBonus            DT_FLOAT
	FlLegendaryAffixAmuletBonus             DT_FLOAT
	FlSacredAffixScalarOffense              DT_FLOAT
	FlSacredAffixScalarDefense              DT_FLOAT
	FlAncestralAffixScalarOffense           DT_FLOAT
	FlAncestralAffixScalarDefense           DT_FLOAT
	Unk_4f066d9                             DT_INT
	Unk_7393144                             DT_INT
	Unk_74a1c7                              DT_INT
	Unk_7f687df                             DT_INT
	Unk_f484748                             DT_INT
	Unk_1db2e99                             DT_INT
	Unk_4c46cf0                             DT_INT
	Unk_a3a3543                             DT_FIXEDARRAY[*DT_INT]
	Unk_598e0c                              DT_FIXEDARRAY[*DT_INT]
	Unk_c23d2e4                             DT_FIXEDARRAY[*DT_INT]
	Unk_2a720cb                             DT_INT
	Unk_487fe77                             DT_INT
	Unk_57661a3                             DT_RANGE[*DT_FLOAT]
	Unk_6affe04                             DT_FLOAT
	Unk_a96b1a9                             DT_FIXEDARRAY[*Type_dff70e83]
	Unk_ea22f36                             DT_FIXEDARRAY[*DT_SNO]
	FlHealthBase                            DT_FLOAT
	Unk_1e39848                             DT_FLOAT
	Unk_f00d070                             DT_FLOAT
	Unk_7298101                             Type_14a42c17
	Unk_6bc634b                             Type_14a42c17
	Unk_a7e753e                             Type_14a42c17
	Unk_fcfc4af                             Type_14a42c17
	Unk_23a17b                              Type_14a42c17
	Unk_57c5927                             DT_FLOAT
	Unk_54fe8b                              DT_FLOAT
	Unk_ce51b5a                             DT_FLOAT
	Unk_3f05457                             DT_FLOAT
	Unk_5b6bd4f                             DT_FLOAT
	Unk_bfde6a2                             DT_FLOAT
	Unk_fc1e7ff                             DT_FLOAT
	Unk_551056e                             DT_FLOAT
	Unk_d616ce9                             DT_FLOAT
	Unk_28a2990                             DT_FLOAT
	Unk_d20a438                             DT_FLOAT
	Unk_a50d36c                             DT_FLOAT
	Unk_475b452                             DT_FLOAT
	Unk_b982fbb                             DT_FLOAT
	Unk_867f53b                             DT_FLOAT
	Unk_c02087d                             DT_FLOAT
	Unk_fa5d56b                             DT_FLOAT
	Unk_1e91b8e                             DT_FLOAT
	Unk_468a2dc                             DT_FLOAT
	Unk_3debe95                             DT_FLOAT
	Unk_e8e5c04                             DT_FLOAT
	FlVulnerableDamageBonus                 DT_FLOAT
	Unk_2c3c144                             DT_FLOAT
	Unk_e82db97                             DT_FLOAT
	Unk_c097750                             DT_FLOAT
	Unk_90f2fe1                             DT_FLOAT
	Unk_ad10637                             DT_FLOAT
	Unk_6e4eda1                             DT_FLOAT
	Unk_f345457                             DT_FLOAT
	Unk_ad76909                             DT_FLOAT
	Unk_685b23e                             DT_FLOAT
	FlPlayerErrorCooldownTime               DT_FLOAT
	Unk_71fe9f5                             DT_INT
	Unk_8a3b54b                             DT_FLOAT
	Unk_c6c6501                             DT_FLOAT
	Unk_be2dc46                             DT_FLOAT
	Unk_1a3078b                             DT_INT
	Unk_8c182bc                             DT_FLOAT
	Unk_28e5246                             DT_FLOAT
	Unk_9f1d1ec                             DT_FLOAT
	NCorpseResurrectionMaxCharges           DT_INT
	NCorpseResurrectionChargeRegenTime      DT_INT
	Unk_745ffba                             DT_FLOAT
	Unk_9021966                             DT_FLOAT
	FlRestXPBonusPercent                    DT_FLOAT
	Unk_db4052a                             DT_FLOAT
	Unk_278b9d4                             DT_FLOAT
	Unk_9813a63                             DT_FLOAT
	Unk_ebe84a2                             DT_FLOAT
	Unk_9175934                             DT_FLOAT
	Unk_25263a2                             DT_FLOAT
	Unk_de04b4c                             DT_FLOAT
	Unk_a118f6a                             DT_VARIABLEARRAY[*DT_RGBACOLOR]
	TAssetLists                             DT_FIXEDARRAY[*AssetList]
	FlVoteKickAttemptDelay                  DT_FLOAT
	FlVoteKickSuccessfulDelay               DT_FLOAT
	Unk_e9980af                             DT_FLOAT
	Unk_d658d4f                             DT_FLOAT
	FlCombatRadius                          DT_FLOAT
	Unk_a04a7d5                             DT_FLOAT
	FlTargetAbandonTime                     DT_FLOAT
	FlBossTargetAbandonTime                 DT_FLOAT
	Unk_a26a857                             DT_FLOAT
	Unk_9a3861e                             DT_UINT
	Unk_27a4780                             DT_FLOAT
	Unk_d25790                              DT_FLOAT
	Unk_828940a                             DT_FLOAT
	Unk_626a640                             DT_FLOAT
	Unk_b05e753                             DT_FLOAT
	Unk_df8e743                             DT_FLOAT
	Unk_d3fa9ff                             DT_FLOAT
	Unk_948a837                             DT_FLOAT
	Unk_92fe267                             DT_FLOAT
	Unk_d6fd7a3                             DT_FLOAT
	Unk_eb11826                             DT_FLOAT
	Unk_195fb76                             DT_FLOAT
	Unk_caaf312                             DT_FLOAT
	Unk_a993b17                             DT_FLOAT
	Unk_4811560                             DT_FLOAT
	FlControllerAutoTargetingCloseRange     DT_FLOAT
	Unk_87d174a                             DT_FLOAT
	Unk_c37e6c9                             DT_FLOAT
	Unk_8891df5                             DT_FLOAT
	Unk_d552313                             DT_FLOAT
	Unk_ff1d407                             DT_FLOAT
	Unk_70ec1                               DT_INT
	Unk_3686ba1                             DT_FLOAT
	Unk_e8448d                              DT_FLOAT
	Unk_4f238e9                             DT_FLOAT
	Unk_d6be782                             DT_FLOAT
	Unk_98c772                              DT_FLOAT
	Unk_26c4feb                             DT_FLOAT
	Unk_9badb6d                             DT_FLOAT
	Unk_87209a6                             DT_FLOAT
	Unk_c8e8eaa                             DT_FLOAT
	Unk_5c72c6c                             DT_FLOAT
	Unk_273be4d                             DT_FLOAT
	Unk_911c30a                             DT_FLOAT
	Unk_e34a591                             DT_FLOAT
	FlControllerMoveFacingZone              DT_FLOAT
	Unk_2b6ca3                              DT_FLOAT
	Unk_7b71733                             DT_FLOAT
	FlControllerMaxMoveThreshold            DT_FLOAT
	FlControllerEvadeZone                   DT_FLOAT
	FlControllerReboundDetectionZone        DT_FLOAT
	Unk_bd6dd59                             DT_FLOAT
	Unk_ee4e38c                             DT_FLOAT
	Unk_b01ac6a                             DT_FLOAT
	Unk_e0fb29d                             DT_FLOAT
	NControllerReboundDuration              DT_INT
	FlFacingMult                            DT_FLOAT
	Unk_eb3e3e1                             DT_FLOAT
	Unk_724e40                              DT_FLOAT
	FlControllerNormalTurnSpeed             DT_FLOAT
	Unk_867800f                             DT_FLOAT
	Unk_bce77fe                             DT_FLOAT
	Unk_f14295                              DT_FLOAT
	Unk_4639a17                             DT_FLOAT
	Unk_7d8ae03                             DT_FLOAT
	Unk_13e7c92                             DT_FLOAT
	Unk_c8eb270                             DT_FLOAT
	Unk_dac13bc                             DT_FLOAT
	Unk_73807f8                             DT_FLOAT
	Unk_a87e6d8                             DT_FLOAT
	FlLocalCoopDropsPerAdditionalPlayer     DT_FLOAT
	FlLocalCoopMagicFindBonusPerPlayer      DT_FLOAT
	Unk_8b7c556                             DT_FLOAT
	Unk_7c557f                              DT_FLOAT
	Unk_2d378f1                             DT_FLOAT
	Unk_d65b306                             DT_FLOAT
	Unk_6330331                             DT_FLOAT
	Unk_590a656                             DT_FLOAT
	Unk_4e80a81                             DT_FLOAT
	Unk_ec5016f                             DT_FLOAT
	Unk_91f0fa5                             DT_FLOAT
	Unk_2870b2a                             DT_FLOAT
	Unk_90af455                             DT_FLOAT
	Unk_698cc10                             DT_FLOAT
	Unk_89086bb                             DT_FLOAT
	Unk_13f115e                             DT_FLOAT
	Unk_5dd5789                             DT_FLOAT
	Unk_52d64ee                             DT_FLOAT
	Unk_8a3122b                             DT_FLOAT
	Unk_644bf96                             DT_FLOAT
	Unk_6a602d7                             DT_FLOAT
	Unk_c68b42                              DT_FLOAT
	Unk_77f6d53                             DT_FLOAT
	Unk_da484be                             DT_FLOAT
	Unk_1b9aeed                             DT_FLOAT
	FlRetreatSpeed                          DT_FLOAT
	Unk_6f5cf67                             DT_FLOAT
	Unk_90ec4a9                             DT_FLOAT
	Unk_41e36fe                             DT_FLOAT
	FlRetreatRadius                         DT_FLOAT
	Unk_f9dbb21                             DT_FLOAT
	Unk_aca15d2                             DT_FLOAT
	Unk_dfa10f0                             DT_FLOAT
	Unk_54c9bdd                             DT_FLOAT
	Unk_1495643                             DT_FLOAT
	Unk_b905edc                             DT_FLOAT
	Unk_85c8520                             DT_FLOAT
	Unk_9f06f92                             DT_FLOAT
	Unk_e99eb94                             DT_FLOAT
	Unk_6b2748d                             DT_FLOAT
	Unk_30be3a9                             DT_FLOAT
	SnoChampionEffectGroup                  DT_SNO
	Unk_89a383a                             DT_FLOAT
	Unk_c31c69e                             DT_FLOAT
	Unk_d3c532d                             DT_FLOAT
	Unk_8c04671                             DT_FLOAT
	Unk_25d5380                             DT_FLOAT
	Unk_359472b                             DT_FLOAT
	Unk_6691247                             DT_FLOAT
	Unk_b8b775b                             DT_FLOAT
	Unk_344205b                             DT_FLOAT
	Unk_86f4d6                              DT_FIXEDARRAY[*DT_SNO]
	Unk_6446242                             DT_FIXEDARRAY[*DT_UINT]
	Unk_e8cf406                             DT_FLOAT
	Unk_f5138b2                             DT_FLOAT
	Unk_3de44f8                             DT_FLOAT
	Unk_d8774f9                             DT_FLOAT
	Unk_e8d16cb                             DT_FLOAT
	Unk_c8658af                             DT_FLOAT
	Unk_379ded                              DT_FLOAT
	Unk_c8501c8                             DT_FLOAT
	Unk_dddf871                             DT_FLOAT
	Unk_f07a0ad                             DT_FLOAT
	Unk_7b3aa95                             DT_FLOAT
	Unk_e85b37f                             DT_FLOAT
	Unk_ace0d77                             DT_FLOAT
	Unk_2b5e2e3                             DT_FLOAT
	Unk_ace303c                             DT_FLOAT
	Unk_1f600c0                             DT_FLOAT
	Unk_49be57e                             DT_FLOAT
	Unk_500aee9                             DT_FLOAT
	Unk_ea9deea                             DT_FLOAT
	Unk_36be83e                             DT_FLOAT
	Unk_8a0e446                             DT_FLOAT
	Unk_ac6ccf0                             DT_FLOAT
	Unk_ea216af                             DT_FLOAT
	ArCrowdControlEffects                   DT_FIXEDARRAY[*CrowdControlEffects]
	Unk_c84a3db                             DT_FLOAT
	Unk_fc90e9d                             DT_FLOAT
	FlChillDuration                         DT_FLOAT
	FlFrozenDuration                        DT_FLOAT
	Unk_66303a6                             DT_FLOAT
	TConfuseRadius                          DT_RANGE[*DT_INT]
	Unk_421e1a                              DT_FLOAT
	Unk_fd978e4                             DT_FLOAT
	Unk_5e484f3                             DT_FLOAT
	Unk_4ad06fe                             DT_FLOAT
	Unk_95a2eb5                             DT_FLOAT
	Unk_194621f                             DT_FLOAT
	Unk_7796b0e                             DT_FLOAT
	Unk_dc51799                             DT_FLOAT
	Unk_c706a2a                             DT_FLOAT
	Unk_a6682f4                             DT_FLOAT
	Unk_97a5903                             DT_FLOAT
	Unk_db530e                              DT_FLOAT
	Unk_2a2e4fd                             DT_FIXEDARRAY[*DT_FLOAT]
	Unk_47ab791                             DT_FLOAT
	Unk_1152bf4                             DT_FLOAT
	Unk_fbf84b1                             DT_FLOAT
	Unk_47f08e2                             DT_FIXEDARRAY[*DT_FLOAT]
	Unk_74d0fea                             DT_INT
	Unk_2af2ec3                             DT_INT
	Unk_3a14364                             DT_INT
	Unk_c5cd637                             DT_INT
	Unk_d85b358                             DT_INT
	Unk_463f23c                             DT_FIXEDARRAY[*DT_INT]
	ArWorldTiers                            DT_FIXEDARRAY[*WorldTierData]
	ArFlippyHangTime                        DT_FIXEDARRAY[*DT_FLOAT]
	Unk_c9c1b78                             DT_FIXEDARRAY[*DT_SNO]
	Unk_765a638                             DT_FLOAT
	Unk_d12a366                             DT_FLOAT
	Unk_3ab153e                             DT_FLOAT
	Unk_bd7bb9e                             DT_FLOAT
	Unk_ab69427                             DT_FLOAT
	Unk_7ebfadb                             DT_FIXEDARRAY[*DT_SNO]
	Unk_4a7cb26                             DT_FLOAT
	Unk_a1f16f1                             DT_FLOAT
	Unk_efdb522                             DT_FLOAT
	Unk_42948c4                             DT_FLOAT
	Unk_60e5526                             DT_FLOAT
	Unk_29951b5                             DT_FLOAT
	Unk_5d34691                             DT_FLOAT
	Unk_237d1fa                             DT_FLOAT
	Unk_38a54aa                             DT_UINT
	NDRLGSeedType                           DT_UINT
	Unk_71d473f                             DT_FLOAT
	Unk_7a4dcca                             DT_FLOAT
	Unk_97bf60d                             DT_FLOAT
	Unk_73e7909                             DT_FLOAT
	Unk_d4101f7                             DT_FLOAT
	Unk_5593852                             DT_FLOAT
	Unk_92f1cc9                             DT_SNO
	SnoMountPaperdollWorld                  DT_SNO
	Unk_5af8b62                             DT_UINT
	Unk_eb1d100                             DT_FLOAT
	Unk_6bf80d8                             DT_FLOAT
	Unk_6396ebc                             DT_FLOAT
	Unk_fab7259                             DT_FLOAT
	Unk_4858565                             DT_FLOAT
	Unk_bd84137                             DT_FLOAT
	Unk_95c4279                             DT_FLOAT
	Unk_a42ecfd                             DT_FLOAT
	Unk_b7f7d87                             DT_FLOAT
	Unk_3af447e                             DT_FLOAT
	Unk_ba50d0f                             DT_FLOAT
	Unk_5c53403                             DT_FLOAT
	Unk_de13a01                             DT_FLOAT
	Unk_84adb3a                             DT_FLOAT
	Unk_f804cf9                             DT_FLOAT
	Unk_95cc949                             DT_FLOAT
	Unk_8d7337                              DT_FLOAT
	Unk_d714948                             DT_FLOAT
	Unk_4e0583b                             DT_FLOAT
	NTransmogSnapshotCosts                  DT_FIXEDARRAY[*DT_INT]
	Unk_fd42f01                             DT_VARIABLEARRAY[*DT_SNO]
	Unk_91356ce                             DT_FLOAT
	Unk_4ab0243                             DT_INT
	Unk_ab4a88e                             DT_INT
	Unk_a9e4262                             DT_INT
	Unk_bc34342                             DT_INT
	Unk_b11b51b                             DT_FLOAT
	Unk_43088a0                             DT_FIXEDARRAY[*Type_7535b2ad]
	Unk_3021a92                             DT_UINT
	Unk_496cffb                             DT_UINT
	Unk_56d4995                             DT_FLOAT
	ArCurrencyCaps                          DT_FIXEDARRAY[*DT_INT64]
	Unk_606852d                             Type_3b00e8b9
	Unk_bf59715                             DT_VARIABLEARRAY[*ActorEffectData]
	Unk_2bb7f27                             DT_FLOAT
	Unk_50c5dba                             DT_FLOAT
	Unk_a19cbf3                             DT_FLOAT
	FlPowerEffectIntensityPerSkillRank      DT_FLOAT
	FlMaxPowerEffectIntensityFromSkillRanks DT_FLOAT
	Unk_57c5af4                             DT_FLOAT
	ArSeasons                               DT_VARIABLEARRAY[*DT_SNO]
	TScalarFormulas                         DT_VARIABLEARRAY[*ScalarFunctionFormula]
	Unk_5beabc1                             DT_FLOAT
	Unk_72ee1ae                             DT_FLOAT
	Unk_b59ed1                              DT_FLOAT
	Unk_38b5fed                             DT_FLOAT
	Unk_dbc6f0d                             DT_UINT
	Unk_9ea22ec                             DT_UINT
	Unk_9155d6b                             DT_INT
	Unk_b1d46f8                             DT_INT
	Unk_9f4060e                             DT_FLOAT
	Unk_2cbcb69                             DT_FLOAT
	Unk_603d082                             DT_FLOAT
	Unk_c20677a                             DT_SNO
	Unk_bad483c                             DT_FLOAT
	Unk_f883e95                             DT_FLOAT
	Unk_ae661d1                             DT_FLOAT
}

func (t *GlobalData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.ArLookVariants, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.ArShaderMapOverrides, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.Unk_156a14c, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.Unk_6759f02, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.Unk_e2e2917, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.Unk_e2fe2ea, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.Unk_95f203b, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.Unk_db1c22b, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.Unk_b5ebbb2, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+100, &t.Unk_5ccf7cc, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+104, &t.Unk_e7d727, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+108, &t.Unk_51c96d6, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.Unk_ecd99ed, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+116, &t.Unk_51c95d8, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.Unk_ec03fd, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+124, &t.Unk_6032a24, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.Unk_d247cf8, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+132, &t.Unk_eea9f7c, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+136, &t.Unk_8472630, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+140, &t.Unk_8f17798, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+144, &t.Unk_7954efd, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+148, &t.Unk_1a40d94, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+152, &t.Unk_7954dff, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+156, &t.Unk_76813f3, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+160, &t.Unk_60b79b9, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+164, &t.Unk_eec6296, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+168, &t.Unk_917777c, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+172, &t.Unk_318127b, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+176, &t.Unk_f143013, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+180, &t.Unk_33296c0, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+184, &t.Unk_9ca3dcb, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+188, &t.Unk_18a668d, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+192, &t.Unk_b0ffbbf, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+196, &t.Unk_f54712c, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+200, &t.Unk_d6395ff, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+204, &t.Unk_854ceeb, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+208, &t.Unk_bb4f409, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+212, &t.Unk_ee3875c, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+216, &t.Unk_8b202cb, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+220, &t.Unk_b704b85, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+224, &t.Unk_f2db3a4, r, &Options{
		ArrayLength: 3,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+236, &t.Unk_ebfec0b, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+240, &t.Unk_3fe50bb, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+244, &t.Unk_5d77ea6, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+248, &t.Unk_5e4581e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+252, &t.SnoStartingSubzone, r, &Options{
		Flags: 513,
		Group: 80,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+256, &t.Unk_7499899, r, &Options{
		Flags: 513,
		Group: 80,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+264, &t.ArStartLocationNames, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+280, &t.Unk_8aac9ef, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+312, &t.FlSellPricePercent, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+316, &t.FlPlayerPowerCacheTimeoutNormal, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+320, &t.FlPlayerPowerCacheTimeoutInterrupt, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+324, &t.Unk_d38759a, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+328, &t.Unk_dfccabc, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+332, &t.Unk_e9ca4ed, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+336, &t.Unk_e03c38a, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+340, &t.Unk_5b6dc2d, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+344, &t.Unk_f3679e3, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+348, &t.Unk_4f5a9e3, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+352, &t.Unk_44ba742, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+356, &t.Unk_1636dfe, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+360, &t.Unk_8835be2, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+364, &t.Unk_a70ae94, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+368, &t.Unk_43addd1, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+372, &t.Unk_6a55fc4, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+376, &t.Unk_f1891b9, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+380, &t.NUIBusyTime, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+384, &t.NTrialVersionLevelCap, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+388, &t.Unk_579747d, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+392, &t.Unk_17db22a, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+396, &t.Unk_b740dfc, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+400, &t.Unk_8aec133, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+404, &t.FlHirelingDiminishedBonusRatio, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+408, &t.Unk_882ccc8, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+412, &t.FlMonsterCritDamageScalar, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+416, &t.FlPlayerCritDamageScalar, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+420, &t.FlPvPMaxCritDamagePercent, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+424, &t.FlDefaultDamageVariance, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+428, &t.Unk_251341c, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+432, &t.Unk_352d6bc, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+436, &t.Unk_e248d9d, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+440, &t.Unk_51a7ab2, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+444, &t.Unk_ed83bad, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+448, &t.Unk_d37d3d4, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+452, &t.NStashSlotsCost, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+456, &t.NStashTabCost, r, &Options{
		ArrayLength: 4,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+472, &t.NClanBankTabCost, r, &Options{
		ArrayLength: 5,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+496, &t.Unk_a9e9f16, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+528, &t.Unk_ea4532f, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+560, &t.NItemPowerOffset, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+564, &t.Unk_62802da, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+568, &t.Unk_3c98a40, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+572, &t.Unk_21a6a21, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+576, &t.Unk_60132bb, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+584, &t.ArStartingParagonGlyphs, r, &Options{
		Flags: 1,
		Group: 111,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+600, &t.ArParagonPowerBudgetMultiplier, r, &Options{
		ArrayLength: 11,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+644, &t.Unk_4b766ae, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+648, &t.Unk_5a673c4, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+652, &t.Unk_4a89716, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+656, &t.Unk_b491be3, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+660, &t.Unk_e762b56, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+664, &t.Unk_2e11fb8, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+668, &t.Unk_9a0ad1d, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+672, &t.Unk_6e8cb51, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+676, &t.Unk_4d68111, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+680, &t.Unk_d2ab6e9, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+684, &t.Unk_7c75a6b, r, &Options{
		ArrayLength: 3,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+696, &t.Unk_6b670be, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+700, &t.Unk_13c636, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+704, &t.Unk_fa7eefd, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+708, &t.Unk_7176abf, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+712, &t.Unk_e2e6a87, r, &Options{
		ArrayLength: 8,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1000, &t.Unk_f78b3b9, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1036, &t.Unk_3761f84, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1072, &t.Unk_7452a15, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1076, &t.Unk_4b7eea0, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1080, &t.Unk_3890cf4, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1084, &t.FlLegendaryAffixTwoHandBonus, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1088, &t.FlLegendaryAffixAmuletBonus, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1092, &t.FlSacredAffixScalarOffense, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1096, &t.FlSacredAffixScalarDefense, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1100, &t.FlAncestralAffixScalarOffense, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1104, &t.FlAncestralAffixScalarDefense, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1108, &t.Unk_4f066d9, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1112, &t.Unk_7393144, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1116, &t.Unk_74a1c7, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1120, &t.Unk_7f687df, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1124, &t.Unk_f484748, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1128, &t.Unk_1db2e99, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1132, &t.Unk_4c46cf0, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1136, &t.Unk_a3a3543, r, &Options{
		ArrayLength: 5,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1156, &t.Unk_598e0c, r, &Options{
		ArrayLength: 5,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1176, &t.Unk_c23d2e4, r, &Options{
		ArrayLength: 5,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1196, &t.Unk_2a720cb, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1200, &t.Unk_487fe77, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1204, &t.Unk_57661a3, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1212, &t.Unk_6affe04, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1216, &t.Unk_a96b1a9, r, &Options{
		ArrayLength: 6,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1288, &t.Unk_ea22f36, r, &Options{
		ArrayLength: 8,
		Flags:       1,
		Group:       73,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1320, &t.FlHealthBase, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1324, &t.Unk_1e39848, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1328, &t.Unk_f00d070, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1332, &t.Unk_7298101, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1360, &t.Unk_6bc634b, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1388, &t.Unk_a7e753e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1416, &t.Unk_fcfc4af, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1444, &t.Unk_23a17b, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1472, &t.Unk_57c5927, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1476, &t.Unk_54fe8b, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1480, &t.Unk_ce51b5a, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1484, &t.Unk_3f05457, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1488, &t.Unk_5b6bd4f, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1492, &t.Unk_bfde6a2, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1496, &t.Unk_fc1e7ff, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1500, &t.Unk_551056e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1504, &t.Unk_d616ce9, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1508, &t.Unk_28a2990, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1512, &t.Unk_d20a438, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1516, &t.Unk_a50d36c, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1520, &t.Unk_475b452, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1524, &t.Unk_b982fbb, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1528, &t.Unk_867f53b, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1532, &t.Unk_c02087d, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1536, &t.Unk_fa5d56b, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1540, &t.Unk_1e91b8e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1544, &t.Unk_468a2dc, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1548, &t.Unk_3debe95, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1552, &t.Unk_e8e5c04, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1556, &t.FlVulnerableDamageBonus, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1560, &t.Unk_2c3c144, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1564, &t.Unk_e82db97, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1568, &t.Unk_c097750, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1572, &t.Unk_90f2fe1, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1576, &t.Unk_ad10637, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1580, &t.Unk_6e4eda1, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1584, &t.Unk_f345457, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1588, &t.Unk_ad76909, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1592, &t.Unk_685b23e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1596, &t.FlPlayerErrorCooldownTime, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1600, &t.Unk_71fe9f5, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1604, &t.Unk_8a3b54b, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1608, &t.Unk_c6c6501, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1612, &t.Unk_be2dc46, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1616, &t.Unk_1a3078b, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1620, &t.Unk_8c182bc, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1624, &t.Unk_28e5246, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1628, &t.Unk_9f1d1ec, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1632, &t.NCorpseResurrectionMaxCharges, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1636, &t.NCorpseResurrectionChargeRegenTime, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1640, &t.Unk_745ffba, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1644, &t.Unk_9021966, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1648, &t.FlRestXPBonusPercent, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1652, &t.Unk_db4052a, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1656, &t.Unk_278b9d4, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1660, &t.Unk_9813a63, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1664, &t.Unk_ebe84a2, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1668, &t.Unk_9175934, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1672, &t.Unk_25263a2, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1676, &t.Unk_de04b4c, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1680, &t.Unk_a118f6a, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1696, &t.TAssetLists, r, &Options{
		ArrayLength: 9,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1840, &t.FlVoteKickAttemptDelay, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1844, &t.FlVoteKickSuccessfulDelay, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1848, &t.Unk_e9980af, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1852, &t.Unk_d658d4f, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1856, &t.FlCombatRadius, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1860, &t.Unk_a04a7d5, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1864, &t.FlTargetAbandonTime, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1868, &t.FlBossTargetAbandonTime, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1872, &t.Unk_a26a857, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1876, &t.Unk_9a3861e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1880, &t.Unk_27a4780, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1884, &t.Unk_d25790, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1888, &t.Unk_828940a, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1892, &t.Unk_626a640, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1896, &t.Unk_b05e753, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1900, &t.Unk_df8e743, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1904, &t.Unk_d3fa9ff, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1908, &t.Unk_948a837, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1912, &t.Unk_92fe267, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1916, &t.Unk_d6fd7a3, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1920, &t.Unk_eb11826, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1924, &t.Unk_195fb76, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1928, &t.Unk_caaf312, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1932, &t.Unk_a993b17, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1936, &t.Unk_4811560, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1940, &t.FlControllerAutoTargetingCloseRange, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1944, &t.Unk_87d174a, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1948, &t.Unk_c37e6c9, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1952, &t.Unk_8891df5, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1956, &t.Unk_d552313, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1960, &t.Unk_ff1d407, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1964, &t.Unk_70ec1, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1968, &t.Unk_3686ba1, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1972, &t.Unk_e8448d, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1976, &t.Unk_4f238e9, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1980, &t.Unk_d6be782, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1984, &t.Unk_98c772, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1988, &t.Unk_26c4feb, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1992, &t.Unk_9badb6d, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1996, &t.Unk_87209a6, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2000, &t.Unk_c8e8eaa, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2004, &t.Unk_5c72c6c, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2008, &t.Unk_273be4d, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2012, &t.Unk_911c30a, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2016, &t.Unk_e34a591, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2020, &t.FlControllerMoveFacingZone, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2024, &t.Unk_2b6ca3, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2028, &t.Unk_7b71733, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2032, &t.FlControllerMaxMoveThreshold, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2036, &t.FlControllerEvadeZone, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2040, &t.FlControllerReboundDetectionZone, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2044, &t.Unk_bd6dd59, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2048, &t.Unk_ee4e38c, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2052, &t.Unk_b01ac6a, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2056, &t.Unk_e0fb29d, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2060, &t.NControllerReboundDuration, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2064, &t.FlFacingMult, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2068, &t.Unk_eb3e3e1, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2072, &t.Unk_724e40, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2076, &t.FlControllerNormalTurnSpeed, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2080, &t.Unk_867800f, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2084, &t.Unk_bce77fe, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2088, &t.Unk_f14295, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2092, &t.Unk_4639a17, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2096, &t.Unk_7d8ae03, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2100, &t.Unk_13e7c92, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2104, &t.Unk_c8eb270, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2108, &t.Unk_dac13bc, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2112, &t.Unk_73807f8, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2116, &t.Unk_a87e6d8, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2120, &t.FlLocalCoopDropsPerAdditionalPlayer, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2124, &t.FlLocalCoopMagicFindBonusPerPlayer, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2128, &t.Unk_8b7c556, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2132, &t.Unk_7c557f, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2136, &t.Unk_2d378f1, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2140, &t.Unk_d65b306, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2144, &t.Unk_6330331, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2148, &t.Unk_590a656, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2152, &t.Unk_4e80a81, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2156, &t.Unk_ec5016f, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2160, &t.Unk_91f0fa5, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2164, &t.Unk_2870b2a, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2168, &t.Unk_90af455, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2172, &t.Unk_698cc10, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2176, &t.Unk_89086bb, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2180, &t.Unk_13f115e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2184, &t.Unk_5dd5789, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2188, &t.Unk_52d64ee, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2192, &t.Unk_8a3122b, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2196, &t.Unk_644bf96, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2200, &t.Unk_6a602d7, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2204, &t.Unk_c68b42, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2208, &t.Unk_77f6d53, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2212, &t.Unk_da484be, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2216, &t.Unk_1b9aeed, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2220, &t.FlRetreatSpeed, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2224, &t.Unk_6f5cf67, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2228, &t.Unk_90ec4a9, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2232, &t.Unk_41e36fe, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2236, &t.FlRetreatRadius, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2240, &t.Unk_f9dbb21, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2244, &t.Unk_aca15d2, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2248, &t.Unk_dfa10f0, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2252, &t.Unk_54c9bdd, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2256, &t.Unk_1495643, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2260, &t.Unk_b905edc, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2264, &t.Unk_85c8520, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2268, &t.Unk_9f06f92, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2272, &t.Unk_e99eb94, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2276, &t.Unk_6b2748d, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2280, &t.Unk_30be3a9, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2284, &t.SnoChampionEffectGroup, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2288, &t.Unk_89a383a, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2292, &t.Unk_c31c69e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2296, &t.Unk_d3c532d, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2300, &t.Unk_8c04671, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2304, &t.Unk_25d5380, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2308, &t.Unk_359472b, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2312, &t.Unk_6691247, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2316, &t.Unk_b8b775b, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2320, &t.Unk_344205b, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2324, &t.Unk_86f4d6, r, &Options{
		ArrayLength: 6,
		Flags:       1,
		Group:       14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2348, &t.Unk_6446242, r, &Options{
		ArrayLength: 6,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2372, &t.Unk_e8cf406, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2376, &t.Unk_f5138b2, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2380, &t.Unk_3de44f8, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2384, &t.Unk_d8774f9, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2388, &t.Unk_e8d16cb, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2392, &t.Unk_c8658af, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2396, &t.Unk_379ded, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2400, &t.Unk_c8501c8, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2404, &t.Unk_dddf871, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2408, &t.Unk_f07a0ad, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2412, &t.Unk_7b3aa95, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2416, &t.Unk_e85b37f, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2420, &t.Unk_ace0d77, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2424, &t.Unk_2b5e2e3, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2428, &t.Unk_ace303c, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2432, &t.Unk_1f600c0, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2436, &t.Unk_49be57e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2440, &t.Unk_500aee9, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2444, &t.Unk_ea9deea, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2448, &t.Unk_36be83e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2452, &t.Unk_8a0e446, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2456, &t.Unk_ac6ccf0, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2460, &t.Unk_ea216af, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2464, &t.ArCrowdControlEffects, r, &Options{
		ArrayLength: 14,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2632, &t.Unk_c84a3db, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2636, &t.Unk_fc90e9d, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2640, &t.FlChillDuration, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2644, &t.FlFrozenDuration, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2648, &t.Unk_66303a6, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2652, &t.TConfuseRadius, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2660, &t.Unk_421e1a, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2664, &t.Unk_fd978e4, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2668, &t.Unk_5e484f3, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2672, &t.Unk_4ad06fe, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2676, &t.Unk_95a2eb5, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2680, &t.Unk_194621f, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2684, &t.Unk_7796b0e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2688, &t.Unk_dc51799, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2692, &t.Unk_c706a2a, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2696, &t.Unk_a6682f4, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2700, &t.Unk_97a5903, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2704, &t.Unk_db530e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2708, &t.Unk_2a2e4fd, r, &Options{
		ArrayLength: 14,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2764, &t.Unk_47ab791, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2768, &t.Unk_1152bf4, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2772, &t.Unk_fbf84b1, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2776, &t.Unk_47f08e2, r, &Options{
		ArrayLength: 3,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2788, &t.Unk_74d0fea, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2792, &t.Unk_2af2ec3, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2796, &t.Unk_3a14364, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2800, &t.Unk_c5cd637, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2804, &t.Unk_d85b358, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2808, &t.Unk_463f23c, r, &Options{
		ArrayLength: 3,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2824, &t.ArWorldTiers, r, &Options{
		ArrayLength: 4,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+3688, &t.ArFlippyHangTime, r, &Options{
		ArrayLength: 5,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+3708, &t.Unk_c9c1b78, r, &Options{
		ArrayLength: 5,
		Flags:       1,
		Group:       27,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+3728, &t.Unk_765a638, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+3732, &t.Unk_d12a366, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+3736, &t.Unk_3ab153e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+3740, &t.Unk_bd7bb9e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+3744, &t.Unk_ab69427, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+3748, &t.Unk_7ebfadb, r, &Options{
		ArrayLength: 8,
		Flags:       513,
		Group:       48,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+3780, &t.Unk_4a7cb26, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+3784, &t.Unk_a1f16f1, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+3788, &t.Unk_efdb522, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+3792, &t.Unk_42948c4, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+3796, &t.Unk_60e5526, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+3800, &t.Unk_29951b5, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+3804, &t.Unk_5d34691, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+3808, &t.Unk_237d1fa, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+3812, &t.Unk_38a54aa, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+3816, &t.NDRLGSeedType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+3820, &t.Unk_71d473f, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+3824, &t.Unk_7a4dcca, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+3828, &t.Unk_97bf60d, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+3832, &t.Unk_73e7909, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+3836, &t.Unk_d4101f7, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+3840, &t.Unk_5593852, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+3844, &t.Unk_92f1cc9, r, &Options{
		Flags: 513,
		Group: 48,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+3848, &t.SnoMountPaperdollWorld, r, &Options{
		Flags: 513,
		Group: 48,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+3852, &t.Unk_5af8b62, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+3856, &t.Unk_eb1d100, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+3860, &t.Unk_6bf80d8, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+3864, &t.Unk_6396ebc, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+3868, &t.Unk_fab7259, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+3872, &t.Unk_4858565, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+3876, &t.Unk_bd84137, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+3880, &t.Unk_95c4279, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+3884, &t.Unk_a42ecfd, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+3888, &t.Unk_b7f7d87, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+3892, &t.Unk_3af447e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+3896, &t.Unk_ba50d0f, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+3900, &t.Unk_5c53403, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+3904, &t.Unk_de13a01, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+3908, &t.Unk_84adb3a, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+3912, &t.Unk_f804cf9, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+3916, &t.Unk_95cc949, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+3920, &t.Unk_8d7337, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+3924, &t.Unk_d714948, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+3928, &t.Unk_4e0583b, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+3932, &t.NTransmogSnapshotCosts, r, &Options{
		ArrayLength: 5,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+3952, &t.Unk_fd42f01, r, &Options{
		Flags: 513,
		Group: 22,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+3968, &t.Unk_91356ce, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+3972, &t.Unk_4ab0243, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+3976, &t.Unk_ab4a88e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+3980, &t.Unk_a9e4262, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+3984, &t.Unk_bc34342, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+3988, &t.Unk_b11b51b, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+3992, &t.Unk_43088a0, r, &Options{
		ArrayLength: 3,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4016, &t.Unk_3021a92, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4020, &t.Unk_496cffb, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4024, &t.Unk_56d4995, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4032, &t.ArCurrencyCaps, r, &Options{
		ArrayLength: 31,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4280, &t.Unk_606852d, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4304, &t.Unk_bf59715, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4320, &t.Unk_2bb7f27, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4324, &t.Unk_50c5dba, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4328, &t.Unk_a19cbf3, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4332, &t.FlPowerEffectIntensityPerSkillRank, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4336, &t.FlMaxPowerEffectIntensityFromSkillRanks, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4340, &t.Unk_57c5af4, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4344, &t.ArSeasons, r, &Options{
		Flags: 1,
		Group: 137,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4360, &t.TScalarFormulas, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4376, &t.Unk_5beabc1, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4380, &t.Unk_72ee1ae, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4384, &t.Unk_b59ed1, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4388, &t.Unk_38b5fed, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4392, &t.Unk_dbc6f0d, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4396, &t.Unk_9ea22ec, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4400, &t.Unk_9155d6b, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4404, &t.Unk_b1d46f8, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4408, &t.Unk_9f4060e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4412, &t.Unk_2cbcb69, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4416, &t.Unk_603d082, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4420, &t.Unk_c20677a, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4424, &t.Unk_bad483c, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4428, &t.Unk_f883e95, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4432, &t.Unk_ae661d1, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+4440, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *GlobalData) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("ArLookVariants", &t.ArLookVariants)
	cb.Do("ArShaderMapOverrides", &t.ArShaderMapOverrides)
	cb.Do("Unk_156a14c", &t.Unk_156a14c)
	cb.Do("Unk_6759f02", &t.Unk_6759f02)
	cb.Do("Unk_e2e2917", &t.Unk_e2e2917)
	cb.Do("Unk_e2fe2ea", &t.Unk_e2fe2ea)
	cb.Do("Unk_95f203b", &t.Unk_95f203b)
	cb.Do("Unk_db1c22b", &t.Unk_db1c22b)
	cb.Do("Unk_b5ebbb2", &t.Unk_b5ebbb2)
	cb.Do("Unk_5ccf7cc", &t.Unk_5ccf7cc)
	cb.Do("Unk_e7d727", &t.Unk_e7d727)
	cb.Do("Unk_51c96d6", &t.Unk_51c96d6)
	cb.Do("Unk_ecd99ed", &t.Unk_ecd99ed)
	cb.Do("Unk_51c95d8", &t.Unk_51c95d8)
	cb.Do("Unk_ec03fd", &t.Unk_ec03fd)
	cb.Do("Unk_6032a24", &t.Unk_6032a24)
	cb.Do("Unk_d247cf8", &t.Unk_d247cf8)
	cb.Do("Unk_eea9f7c", &t.Unk_eea9f7c)
	cb.Do("Unk_8472630", &t.Unk_8472630)
	cb.Do("Unk_8f17798", &t.Unk_8f17798)
	cb.Do("Unk_7954efd", &t.Unk_7954efd)
	cb.Do("Unk_1a40d94", &t.Unk_1a40d94)
	cb.Do("Unk_7954dff", &t.Unk_7954dff)
	cb.Do("Unk_76813f3", &t.Unk_76813f3)
	cb.Do("Unk_60b79b9", &t.Unk_60b79b9)
	cb.Do("Unk_eec6296", &t.Unk_eec6296)
	cb.Do("Unk_917777c", &t.Unk_917777c)
	cb.Do("Unk_318127b", &t.Unk_318127b)
	cb.Do("Unk_f143013", &t.Unk_f143013)
	cb.Do("Unk_33296c0", &t.Unk_33296c0)
	cb.Do("Unk_9ca3dcb", &t.Unk_9ca3dcb)
	cb.Do("Unk_18a668d", &t.Unk_18a668d)
	cb.Do("Unk_b0ffbbf", &t.Unk_b0ffbbf)
	cb.Do("Unk_f54712c", &t.Unk_f54712c)
	cb.Do("Unk_d6395ff", &t.Unk_d6395ff)
	cb.Do("Unk_854ceeb", &t.Unk_854ceeb)
	cb.Do("Unk_bb4f409", &t.Unk_bb4f409)
	cb.Do("Unk_ee3875c", &t.Unk_ee3875c)
	cb.Do("Unk_8b202cb", &t.Unk_8b202cb)
	cb.Do("Unk_b704b85", &t.Unk_b704b85)
	cb.Do("Unk_f2db3a4", &t.Unk_f2db3a4)
	cb.Do("Unk_ebfec0b", &t.Unk_ebfec0b)
	cb.Do("Unk_3fe50bb", &t.Unk_3fe50bb)
	cb.Do("Unk_5d77ea6", &t.Unk_5d77ea6)
	cb.Do("Unk_5e4581e", &t.Unk_5e4581e)
	cb.Do("SnoStartingSubzone", &t.SnoStartingSubzone)
	cb.Do("Unk_7499899", &t.Unk_7499899)
	cb.Do("ArStartLocationNames", &t.ArStartLocationNames)
	cb.Do("Unk_8aac9ef", &t.Unk_8aac9ef)
	cb.Do("FlSellPricePercent", &t.FlSellPricePercent)
	cb.Do("FlPlayerPowerCacheTimeoutNormal", &t.FlPlayerPowerCacheTimeoutNormal)
	cb.Do("FlPlayerPowerCacheTimeoutInterrupt", &t.FlPlayerPowerCacheTimeoutInterrupt)
	cb.Do("Unk_d38759a", &t.Unk_d38759a)
	cb.Do("Unk_dfccabc", &t.Unk_dfccabc)
	cb.Do("Unk_e9ca4ed", &t.Unk_e9ca4ed)
	cb.Do("Unk_e03c38a", &t.Unk_e03c38a)
	cb.Do("Unk_5b6dc2d", &t.Unk_5b6dc2d)
	cb.Do("Unk_f3679e3", &t.Unk_f3679e3)
	cb.Do("Unk_4f5a9e3", &t.Unk_4f5a9e3)
	cb.Do("Unk_44ba742", &t.Unk_44ba742)
	cb.Do("Unk_1636dfe", &t.Unk_1636dfe)
	cb.Do("Unk_8835be2", &t.Unk_8835be2)
	cb.Do("Unk_a70ae94", &t.Unk_a70ae94)
	cb.Do("Unk_43addd1", &t.Unk_43addd1)
	cb.Do("Unk_6a55fc4", &t.Unk_6a55fc4)
	cb.Do("Unk_f1891b9", &t.Unk_f1891b9)
	cb.Do("NUIBusyTime", &t.NUIBusyTime)
	cb.Do("NTrialVersionLevelCap", &t.NTrialVersionLevelCap)
	cb.Do("Unk_579747d", &t.Unk_579747d)
	cb.Do("Unk_17db22a", &t.Unk_17db22a)
	cb.Do("Unk_b740dfc", &t.Unk_b740dfc)
	cb.Do("Unk_8aec133", &t.Unk_8aec133)
	cb.Do("FlHirelingDiminishedBonusRatio", &t.FlHirelingDiminishedBonusRatio)
	cb.Do("Unk_882ccc8", &t.Unk_882ccc8)
	cb.Do("FlMonsterCritDamageScalar", &t.FlMonsterCritDamageScalar)
	cb.Do("FlPlayerCritDamageScalar", &t.FlPlayerCritDamageScalar)
	cb.Do("FlPvPMaxCritDamagePercent", &t.FlPvPMaxCritDamagePercent)
	cb.Do("FlDefaultDamageVariance", &t.FlDefaultDamageVariance)
	cb.Do("Unk_251341c", &t.Unk_251341c)
	cb.Do("Unk_352d6bc", &t.Unk_352d6bc)
	cb.Do("Unk_e248d9d", &t.Unk_e248d9d)
	cb.Do("Unk_51a7ab2", &t.Unk_51a7ab2)
	cb.Do("Unk_ed83bad", &t.Unk_ed83bad)
	cb.Do("Unk_d37d3d4", &t.Unk_d37d3d4)
	cb.Do("NStashSlotsCost", &t.NStashSlotsCost)
	cb.Do("NStashTabCost", &t.NStashTabCost)
	cb.Do("NClanBankTabCost", &t.NClanBankTabCost)
	cb.Do("Unk_a9e9f16", &t.Unk_a9e9f16)
	cb.Do("Unk_ea4532f", &t.Unk_ea4532f)
	cb.Do("NItemPowerOffset", &t.NItemPowerOffset)
	cb.Do("Unk_62802da", &t.Unk_62802da)
	cb.Do("Unk_3c98a40", &t.Unk_3c98a40)
	cb.Do("Unk_21a6a21", &t.Unk_21a6a21)
	cb.Do("Unk_60132bb", &t.Unk_60132bb)
	cb.Do("ArStartingParagonGlyphs", &t.ArStartingParagonGlyphs)
	cb.Do("ArParagonPowerBudgetMultiplier", &t.ArParagonPowerBudgetMultiplier)
	cb.Do("Unk_4b766ae", &t.Unk_4b766ae)
	cb.Do("Unk_5a673c4", &t.Unk_5a673c4)
	cb.Do("Unk_4a89716", &t.Unk_4a89716)
	cb.Do("Unk_b491be3", &t.Unk_b491be3)
	cb.Do("Unk_e762b56", &t.Unk_e762b56)
	cb.Do("Unk_2e11fb8", &t.Unk_2e11fb8)
	cb.Do("Unk_9a0ad1d", &t.Unk_9a0ad1d)
	cb.Do("Unk_6e8cb51", &t.Unk_6e8cb51)
	cb.Do("Unk_4d68111", &t.Unk_4d68111)
	cb.Do("Unk_d2ab6e9", &t.Unk_d2ab6e9)
	cb.Do("Unk_7c75a6b", &t.Unk_7c75a6b)
	cb.Do("Unk_6b670be", &t.Unk_6b670be)
	cb.Do("Unk_13c636", &t.Unk_13c636)
	cb.Do("Unk_fa7eefd", &t.Unk_fa7eefd)
	cb.Do("Unk_7176abf", &t.Unk_7176abf)
	cb.Do("Unk_e2e6a87", &t.Unk_e2e6a87)
	cb.Do("Unk_f78b3b9", &t.Unk_f78b3b9)
	cb.Do("Unk_3761f84", &t.Unk_3761f84)
	cb.Do("Unk_7452a15", &t.Unk_7452a15)
	cb.Do("Unk_4b7eea0", &t.Unk_4b7eea0)
	cb.Do("Unk_3890cf4", &t.Unk_3890cf4)
	cb.Do("FlLegendaryAffixTwoHandBonus", &t.FlLegendaryAffixTwoHandBonus)
	cb.Do("FlLegendaryAffixAmuletBonus", &t.FlLegendaryAffixAmuletBonus)
	cb.Do("FlSacredAffixScalarOffense", &t.FlSacredAffixScalarOffense)
	cb.Do("FlSacredAffixScalarDefense", &t.FlSacredAffixScalarDefense)
	cb.Do("FlAncestralAffixScalarOffense", &t.FlAncestralAffixScalarOffense)
	cb.Do("FlAncestralAffixScalarDefense", &t.FlAncestralAffixScalarDefense)
	cb.Do("Unk_4f066d9", &t.Unk_4f066d9)
	cb.Do("Unk_7393144", &t.Unk_7393144)
	cb.Do("Unk_74a1c7", &t.Unk_74a1c7)
	cb.Do("Unk_7f687df", &t.Unk_7f687df)
	cb.Do("Unk_f484748", &t.Unk_f484748)
	cb.Do("Unk_1db2e99", &t.Unk_1db2e99)
	cb.Do("Unk_4c46cf0", &t.Unk_4c46cf0)
	cb.Do("Unk_a3a3543", &t.Unk_a3a3543)
	cb.Do("Unk_598e0c", &t.Unk_598e0c)
	cb.Do("Unk_c23d2e4", &t.Unk_c23d2e4)
	cb.Do("Unk_2a720cb", &t.Unk_2a720cb)
	cb.Do("Unk_487fe77", &t.Unk_487fe77)
	cb.Do("Unk_57661a3", &t.Unk_57661a3)
	cb.Do("Unk_6affe04", &t.Unk_6affe04)
	cb.Do("Unk_a96b1a9", &t.Unk_a96b1a9)
	cb.Do("Unk_ea22f36", &t.Unk_ea22f36)
	cb.Do("FlHealthBase", &t.FlHealthBase)
	cb.Do("Unk_1e39848", &t.Unk_1e39848)
	cb.Do("Unk_f00d070", &t.Unk_f00d070)
	cb.Do("Unk_7298101", &t.Unk_7298101)
	cb.Do("Unk_6bc634b", &t.Unk_6bc634b)
	cb.Do("Unk_a7e753e", &t.Unk_a7e753e)
	cb.Do("Unk_fcfc4af", &t.Unk_fcfc4af)
	cb.Do("Unk_23a17b", &t.Unk_23a17b)
	cb.Do("Unk_57c5927", &t.Unk_57c5927)
	cb.Do("Unk_54fe8b", &t.Unk_54fe8b)
	cb.Do("Unk_ce51b5a", &t.Unk_ce51b5a)
	cb.Do("Unk_3f05457", &t.Unk_3f05457)
	cb.Do("Unk_5b6bd4f", &t.Unk_5b6bd4f)
	cb.Do("Unk_bfde6a2", &t.Unk_bfde6a2)
	cb.Do("Unk_fc1e7ff", &t.Unk_fc1e7ff)
	cb.Do("Unk_551056e", &t.Unk_551056e)
	cb.Do("Unk_d616ce9", &t.Unk_d616ce9)
	cb.Do("Unk_28a2990", &t.Unk_28a2990)
	cb.Do("Unk_d20a438", &t.Unk_d20a438)
	cb.Do("Unk_a50d36c", &t.Unk_a50d36c)
	cb.Do("Unk_475b452", &t.Unk_475b452)
	cb.Do("Unk_b982fbb", &t.Unk_b982fbb)
	cb.Do("Unk_867f53b", &t.Unk_867f53b)
	cb.Do("Unk_c02087d", &t.Unk_c02087d)
	cb.Do("Unk_fa5d56b", &t.Unk_fa5d56b)
	cb.Do("Unk_1e91b8e", &t.Unk_1e91b8e)
	cb.Do("Unk_468a2dc", &t.Unk_468a2dc)
	cb.Do("Unk_3debe95", &t.Unk_3debe95)
	cb.Do("Unk_e8e5c04", &t.Unk_e8e5c04)
	cb.Do("FlVulnerableDamageBonus", &t.FlVulnerableDamageBonus)
	cb.Do("Unk_2c3c144", &t.Unk_2c3c144)
	cb.Do("Unk_e82db97", &t.Unk_e82db97)
	cb.Do("Unk_c097750", &t.Unk_c097750)
	cb.Do("Unk_90f2fe1", &t.Unk_90f2fe1)
	cb.Do("Unk_ad10637", &t.Unk_ad10637)
	cb.Do("Unk_6e4eda1", &t.Unk_6e4eda1)
	cb.Do("Unk_f345457", &t.Unk_f345457)
	cb.Do("Unk_ad76909", &t.Unk_ad76909)
	cb.Do("Unk_685b23e", &t.Unk_685b23e)
	cb.Do("FlPlayerErrorCooldownTime", &t.FlPlayerErrorCooldownTime)
	cb.Do("Unk_71fe9f5", &t.Unk_71fe9f5)
	cb.Do("Unk_8a3b54b", &t.Unk_8a3b54b)
	cb.Do("Unk_c6c6501", &t.Unk_c6c6501)
	cb.Do("Unk_be2dc46", &t.Unk_be2dc46)
	cb.Do("Unk_1a3078b", &t.Unk_1a3078b)
	cb.Do("Unk_8c182bc", &t.Unk_8c182bc)
	cb.Do("Unk_28e5246", &t.Unk_28e5246)
	cb.Do("Unk_9f1d1ec", &t.Unk_9f1d1ec)
	cb.Do("NCorpseResurrectionMaxCharges", &t.NCorpseResurrectionMaxCharges)
	cb.Do("NCorpseResurrectionChargeRegenTime", &t.NCorpseResurrectionChargeRegenTime)
	cb.Do("Unk_745ffba", &t.Unk_745ffba)
	cb.Do("Unk_9021966", &t.Unk_9021966)
	cb.Do("FlRestXPBonusPercent", &t.FlRestXPBonusPercent)
	cb.Do("Unk_db4052a", &t.Unk_db4052a)
	cb.Do("Unk_278b9d4", &t.Unk_278b9d4)
	cb.Do("Unk_9813a63", &t.Unk_9813a63)
	cb.Do("Unk_ebe84a2", &t.Unk_ebe84a2)
	cb.Do("Unk_9175934", &t.Unk_9175934)
	cb.Do("Unk_25263a2", &t.Unk_25263a2)
	cb.Do("Unk_de04b4c", &t.Unk_de04b4c)
	cb.Do("Unk_a118f6a", &t.Unk_a118f6a)
	cb.Do("TAssetLists", &t.TAssetLists)
	cb.Do("FlVoteKickAttemptDelay", &t.FlVoteKickAttemptDelay)
	cb.Do("FlVoteKickSuccessfulDelay", &t.FlVoteKickSuccessfulDelay)
	cb.Do("Unk_e9980af", &t.Unk_e9980af)
	cb.Do("Unk_d658d4f", &t.Unk_d658d4f)
	cb.Do("FlCombatRadius", &t.FlCombatRadius)
	cb.Do("Unk_a04a7d5", &t.Unk_a04a7d5)
	cb.Do("FlTargetAbandonTime", &t.FlTargetAbandonTime)
	cb.Do("FlBossTargetAbandonTime", &t.FlBossTargetAbandonTime)
	cb.Do("Unk_a26a857", &t.Unk_a26a857)
	cb.Do("Unk_9a3861e", &t.Unk_9a3861e)
	cb.Do("Unk_27a4780", &t.Unk_27a4780)
	cb.Do("Unk_d25790", &t.Unk_d25790)
	cb.Do("Unk_828940a", &t.Unk_828940a)
	cb.Do("Unk_626a640", &t.Unk_626a640)
	cb.Do("Unk_b05e753", &t.Unk_b05e753)
	cb.Do("Unk_df8e743", &t.Unk_df8e743)
	cb.Do("Unk_d3fa9ff", &t.Unk_d3fa9ff)
	cb.Do("Unk_948a837", &t.Unk_948a837)
	cb.Do("Unk_92fe267", &t.Unk_92fe267)
	cb.Do("Unk_d6fd7a3", &t.Unk_d6fd7a3)
	cb.Do("Unk_eb11826", &t.Unk_eb11826)
	cb.Do("Unk_195fb76", &t.Unk_195fb76)
	cb.Do("Unk_caaf312", &t.Unk_caaf312)
	cb.Do("Unk_a993b17", &t.Unk_a993b17)
	cb.Do("Unk_4811560", &t.Unk_4811560)
	cb.Do("FlControllerAutoTargetingCloseRange", &t.FlControllerAutoTargetingCloseRange)
	cb.Do("Unk_87d174a", &t.Unk_87d174a)
	cb.Do("Unk_c37e6c9", &t.Unk_c37e6c9)
	cb.Do("Unk_8891df5", &t.Unk_8891df5)
	cb.Do("Unk_d552313", &t.Unk_d552313)
	cb.Do("Unk_ff1d407", &t.Unk_ff1d407)
	cb.Do("Unk_70ec1", &t.Unk_70ec1)
	cb.Do("Unk_3686ba1", &t.Unk_3686ba1)
	cb.Do("Unk_e8448d", &t.Unk_e8448d)
	cb.Do("Unk_4f238e9", &t.Unk_4f238e9)
	cb.Do("Unk_d6be782", &t.Unk_d6be782)
	cb.Do("Unk_98c772", &t.Unk_98c772)
	cb.Do("Unk_26c4feb", &t.Unk_26c4feb)
	cb.Do("Unk_9badb6d", &t.Unk_9badb6d)
	cb.Do("Unk_87209a6", &t.Unk_87209a6)
	cb.Do("Unk_c8e8eaa", &t.Unk_c8e8eaa)
	cb.Do("Unk_5c72c6c", &t.Unk_5c72c6c)
	cb.Do("Unk_273be4d", &t.Unk_273be4d)
	cb.Do("Unk_911c30a", &t.Unk_911c30a)
	cb.Do("Unk_e34a591", &t.Unk_e34a591)
	cb.Do("FlControllerMoveFacingZone", &t.FlControllerMoveFacingZone)
	cb.Do("Unk_2b6ca3", &t.Unk_2b6ca3)
	cb.Do("Unk_7b71733", &t.Unk_7b71733)
	cb.Do("FlControllerMaxMoveThreshold", &t.FlControllerMaxMoveThreshold)
	cb.Do("FlControllerEvadeZone", &t.FlControllerEvadeZone)
	cb.Do("FlControllerReboundDetectionZone", &t.FlControllerReboundDetectionZone)
	cb.Do("Unk_bd6dd59", &t.Unk_bd6dd59)
	cb.Do("Unk_ee4e38c", &t.Unk_ee4e38c)
	cb.Do("Unk_b01ac6a", &t.Unk_b01ac6a)
	cb.Do("Unk_e0fb29d", &t.Unk_e0fb29d)
	cb.Do("NControllerReboundDuration", &t.NControllerReboundDuration)
	cb.Do("FlFacingMult", &t.FlFacingMult)
	cb.Do("Unk_eb3e3e1", &t.Unk_eb3e3e1)
	cb.Do("Unk_724e40", &t.Unk_724e40)
	cb.Do("FlControllerNormalTurnSpeed", &t.FlControllerNormalTurnSpeed)
	cb.Do("Unk_867800f", &t.Unk_867800f)
	cb.Do("Unk_bce77fe", &t.Unk_bce77fe)
	cb.Do("Unk_f14295", &t.Unk_f14295)
	cb.Do("Unk_4639a17", &t.Unk_4639a17)
	cb.Do("Unk_7d8ae03", &t.Unk_7d8ae03)
	cb.Do("Unk_13e7c92", &t.Unk_13e7c92)
	cb.Do("Unk_c8eb270", &t.Unk_c8eb270)
	cb.Do("Unk_dac13bc", &t.Unk_dac13bc)
	cb.Do("Unk_73807f8", &t.Unk_73807f8)
	cb.Do("Unk_a87e6d8", &t.Unk_a87e6d8)
	cb.Do("FlLocalCoopDropsPerAdditionalPlayer", &t.FlLocalCoopDropsPerAdditionalPlayer)
	cb.Do("FlLocalCoopMagicFindBonusPerPlayer", &t.FlLocalCoopMagicFindBonusPerPlayer)
	cb.Do("Unk_8b7c556", &t.Unk_8b7c556)
	cb.Do("Unk_7c557f", &t.Unk_7c557f)
	cb.Do("Unk_2d378f1", &t.Unk_2d378f1)
	cb.Do("Unk_d65b306", &t.Unk_d65b306)
	cb.Do("Unk_6330331", &t.Unk_6330331)
	cb.Do("Unk_590a656", &t.Unk_590a656)
	cb.Do("Unk_4e80a81", &t.Unk_4e80a81)
	cb.Do("Unk_ec5016f", &t.Unk_ec5016f)
	cb.Do("Unk_91f0fa5", &t.Unk_91f0fa5)
	cb.Do("Unk_2870b2a", &t.Unk_2870b2a)
	cb.Do("Unk_90af455", &t.Unk_90af455)
	cb.Do("Unk_698cc10", &t.Unk_698cc10)
	cb.Do("Unk_89086bb", &t.Unk_89086bb)
	cb.Do("Unk_13f115e", &t.Unk_13f115e)
	cb.Do("Unk_5dd5789", &t.Unk_5dd5789)
	cb.Do("Unk_52d64ee", &t.Unk_52d64ee)
	cb.Do("Unk_8a3122b", &t.Unk_8a3122b)
	cb.Do("Unk_644bf96", &t.Unk_644bf96)
	cb.Do("Unk_6a602d7", &t.Unk_6a602d7)
	cb.Do("Unk_c68b42", &t.Unk_c68b42)
	cb.Do("Unk_77f6d53", &t.Unk_77f6d53)
	cb.Do("Unk_da484be", &t.Unk_da484be)
	cb.Do("Unk_1b9aeed", &t.Unk_1b9aeed)
	cb.Do("FlRetreatSpeed", &t.FlRetreatSpeed)
	cb.Do("Unk_6f5cf67", &t.Unk_6f5cf67)
	cb.Do("Unk_90ec4a9", &t.Unk_90ec4a9)
	cb.Do("Unk_41e36fe", &t.Unk_41e36fe)
	cb.Do("FlRetreatRadius", &t.FlRetreatRadius)
	cb.Do("Unk_f9dbb21", &t.Unk_f9dbb21)
	cb.Do("Unk_aca15d2", &t.Unk_aca15d2)
	cb.Do("Unk_dfa10f0", &t.Unk_dfa10f0)
	cb.Do("Unk_54c9bdd", &t.Unk_54c9bdd)
	cb.Do("Unk_1495643", &t.Unk_1495643)
	cb.Do("Unk_b905edc", &t.Unk_b905edc)
	cb.Do("Unk_85c8520", &t.Unk_85c8520)
	cb.Do("Unk_9f06f92", &t.Unk_9f06f92)
	cb.Do("Unk_e99eb94", &t.Unk_e99eb94)
	cb.Do("Unk_6b2748d", &t.Unk_6b2748d)
	cb.Do("Unk_30be3a9", &t.Unk_30be3a9)
	cb.Do("SnoChampionEffectGroup", &t.SnoChampionEffectGroup)
	cb.Do("Unk_89a383a", &t.Unk_89a383a)
	cb.Do("Unk_c31c69e", &t.Unk_c31c69e)
	cb.Do("Unk_d3c532d", &t.Unk_d3c532d)
	cb.Do("Unk_8c04671", &t.Unk_8c04671)
	cb.Do("Unk_25d5380", &t.Unk_25d5380)
	cb.Do("Unk_359472b", &t.Unk_359472b)
	cb.Do("Unk_6691247", &t.Unk_6691247)
	cb.Do("Unk_b8b775b", &t.Unk_b8b775b)
	cb.Do("Unk_344205b", &t.Unk_344205b)
	cb.Do("Unk_86f4d6", &t.Unk_86f4d6)
	cb.Do("Unk_6446242", &t.Unk_6446242)
	cb.Do("Unk_e8cf406", &t.Unk_e8cf406)
	cb.Do("Unk_f5138b2", &t.Unk_f5138b2)
	cb.Do("Unk_3de44f8", &t.Unk_3de44f8)
	cb.Do("Unk_d8774f9", &t.Unk_d8774f9)
	cb.Do("Unk_e8d16cb", &t.Unk_e8d16cb)
	cb.Do("Unk_c8658af", &t.Unk_c8658af)
	cb.Do("Unk_379ded", &t.Unk_379ded)
	cb.Do("Unk_c8501c8", &t.Unk_c8501c8)
	cb.Do("Unk_dddf871", &t.Unk_dddf871)
	cb.Do("Unk_f07a0ad", &t.Unk_f07a0ad)
	cb.Do("Unk_7b3aa95", &t.Unk_7b3aa95)
	cb.Do("Unk_e85b37f", &t.Unk_e85b37f)
	cb.Do("Unk_ace0d77", &t.Unk_ace0d77)
	cb.Do("Unk_2b5e2e3", &t.Unk_2b5e2e3)
	cb.Do("Unk_ace303c", &t.Unk_ace303c)
	cb.Do("Unk_1f600c0", &t.Unk_1f600c0)
	cb.Do("Unk_49be57e", &t.Unk_49be57e)
	cb.Do("Unk_500aee9", &t.Unk_500aee9)
	cb.Do("Unk_ea9deea", &t.Unk_ea9deea)
	cb.Do("Unk_36be83e", &t.Unk_36be83e)
	cb.Do("Unk_8a0e446", &t.Unk_8a0e446)
	cb.Do("Unk_ac6ccf0", &t.Unk_ac6ccf0)
	cb.Do("Unk_ea216af", &t.Unk_ea216af)
	cb.Do("ArCrowdControlEffects", &t.ArCrowdControlEffects)
	cb.Do("Unk_c84a3db", &t.Unk_c84a3db)
	cb.Do("Unk_fc90e9d", &t.Unk_fc90e9d)
	cb.Do("FlChillDuration", &t.FlChillDuration)
	cb.Do("FlFrozenDuration", &t.FlFrozenDuration)
	cb.Do("Unk_66303a6", &t.Unk_66303a6)
	cb.Do("TConfuseRadius", &t.TConfuseRadius)
	cb.Do("Unk_421e1a", &t.Unk_421e1a)
	cb.Do("Unk_fd978e4", &t.Unk_fd978e4)
	cb.Do("Unk_5e484f3", &t.Unk_5e484f3)
	cb.Do("Unk_4ad06fe", &t.Unk_4ad06fe)
	cb.Do("Unk_95a2eb5", &t.Unk_95a2eb5)
	cb.Do("Unk_194621f", &t.Unk_194621f)
	cb.Do("Unk_7796b0e", &t.Unk_7796b0e)
	cb.Do("Unk_dc51799", &t.Unk_dc51799)
	cb.Do("Unk_c706a2a", &t.Unk_c706a2a)
	cb.Do("Unk_a6682f4", &t.Unk_a6682f4)
	cb.Do("Unk_97a5903", &t.Unk_97a5903)
	cb.Do("Unk_db530e", &t.Unk_db530e)
	cb.Do("Unk_2a2e4fd", &t.Unk_2a2e4fd)
	cb.Do("Unk_47ab791", &t.Unk_47ab791)
	cb.Do("Unk_1152bf4", &t.Unk_1152bf4)
	cb.Do("Unk_fbf84b1", &t.Unk_fbf84b1)
	cb.Do("Unk_47f08e2", &t.Unk_47f08e2)
	cb.Do("Unk_74d0fea", &t.Unk_74d0fea)
	cb.Do("Unk_2af2ec3", &t.Unk_2af2ec3)
	cb.Do("Unk_3a14364", &t.Unk_3a14364)
	cb.Do("Unk_c5cd637", &t.Unk_c5cd637)
	cb.Do("Unk_d85b358", &t.Unk_d85b358)
	cb.Do("Unk_463f23c", &t.Unk_463f23c)
	cb.Do("ArWorldTiers", &t.ArWorldTiers)
	cb.Do("ArFlippyHangTime", &t.ArFlippyHangTime)
	cb.Do("Unk_c9c1b78", &t.Unk_c9c1b78)
	cb.Do("Unk_765a638", &t.Unk_765a638)
	cb.Do("Unk_d12a366", &t.Unk_d12a366)
	cb.Do("Unk_3ab153e", &t.Unk_3ab153e)
	cb.Do("Unk_bd7bb9e", &t.Unk_bd7bb9e)
	cb.Do("Unk_ab69427", &t.Unk_ab69427)
	cb.Do("Unk_7ebfadb", &t.Unk_7ebfadb)
	cb.Do("Unk_4a7cb26", &t.Unk_4a7cb26)
	cb.Do("Unk_a1f16f1", &t.Unk_a1f16f1)
	cb.Do("Unk_efdb522", &t.Unk_efdb522)
	cb.Do("Unk_42948c4", &t.Unk_42948c4)
	cb.Do("Unk_60e5526", &t.Unk_60e5526)
	cb.Do("Unk_29951b5", &t.Unk_29951b5)
	cb.Do("Unk_5d34691", &t.Unk_5d34691)
	cb.Do("Unk_237d1fa", &t.Unk_237d1fa)
	cb.Do("Unk_38a54aa", &t.Unk_38a54aa)
	cb.Do("NDRLGSeedType", &t.NDRLGSeedType)
	cb.Do("Unk_71d473f", &t.Unk_71d473f)
	cb.Do("Unk_7a4dcca", &t.Unk_7a4dcca)
	cb.Do("Unk_97bf60d", &t.Unk_97bf60d)
	cb.Do("Unk_73e7909", &t.Unk_73e7909)
	cb.Do("Unk_d4101f7", &t.Unk_d4101f7)
	cb.Do("Unk_5593852", &t.Unk_5593852)
	cb.Do("Unk_92f1cc9", &t.Unk_92f1cc9)
	cb.Do("SnoMountPaperdollWorld", &t.SnoMountPaperdollWorld)
	cb.Do("Unk_5af8b62", &t.Unk_5af8b62)
	cb.Do("Unk_eb1d100", &t.Unk_eb1d100)
	cb.Do("Unk_6bf80d8", &t.Unk_6bf80d8)
	cb.Do("Unk_6396ebc", &t.Unk_6396ebc)
	cb.Do("Unk_fab7259", &t.Unk_fab7259)
	cb.Do("Unk_4858565", &t.Unk_4858565)
	cb.Do("Unk_bd84137", &t.Unk_bd84137)
	cb.Do("Unk_95c4279", &t.Unk_95c4279)
	cb.Do("Unk_a42ecfd", &t.Unk_a42ecfd)
	cb.Do("Unk_b7f7d87", &t.Unk_b7f7d87)
	cb.Do("Unk_3af447e", &t.Unk_3af447e)
	cb.Do("Unk_ba50d0f", &t.Unk_ba50d0f)
	cb.Do("Unk_5c53403", &t.Unk_5c53403)
	cb.Do("Unk_de13a01", &t.Unk_de13a01)
	cb.Do("Unk_84adb3a", &t.Unk_84adb3a)
	cb.Do("Unk_f804cf9", &t.Unk_f804cf9)
	cb.Do("Unk_95cc949", &t.Unk_95cc949)
	cb.Do("Unk_8d7337", &t.Unk_8d7337)
	cb.Do("Unk_d714948", &t.Unk_d714948)
	cb.Do("Unk_4e0583b", &t.Unk_4e0583b)
	cb.Do("NTransmogSnapshotCosts", &t.NTransmogSnapshotCosts)
	cb.Do("Unk_fd42f01", &t.Unk_fd42f01)
	cb.Do("Unk_91356ce", &t.Unk_91356ce)
	cb.Do("Unk_4ab0243", &t.Unk_4ab0243)
	cb.Do("Unk_ab4a88e", &t.Unk_ab4a88e)
	cb.Do("Unk_a9e4262", &t.Unk_a9e4262)
	cb.Do("Unk_bc34342", &t.Unk_bc34342)
	cb.Do("Unk_b11b51b", &t.Unk_b11b51b)
	cb.Do("Unk_43088a0", &t.Unk_43088a0)
	cb.Do("Unk_3021a92", &t.Unk_3021a92)
	cb.Do("Unk_496cffb", &t.Unk_496cffb)
	cb.Do("Unk_56d4995", &t.Unk_56d4995)
	cb.Do("ArCurrencyCaps", &t.ArCurrencyCaps)
	cb.Do("Unk_606852d", &t.Unk_606852d)
	cb.Do("Unk_bf59715", &t.Unk_bf59715)
	cb.Do("Unk_2bb7f27", &t.Unk_2bb7f27)
	cb.Do("Unk_50c5dba", &t.Unk_50c5dba)
	cb.Do("Unk_a19cbf3", &t.Unk_a19cbf3)
	cb.Do("FlPowerEffectIntensityPerSkillRank", &t.FlPowerEffectIntensityPerSkillRank)
	cb.Do("FlMaxPowerEffectIntensityFromSkillRanks", &t.FlMaxPowerEffectIntensityFromSkillRanks)
	cb.Do("Unk_57c5af4", &t.Unk_57c5af4)
	cb.Do("ArSeasons", &t.ArSeasons)
	cb.Do("TScalarFormulas", &t.TScalarFormulas)
	cb.Do("Unk_5beabc1", &t.Unk_5beabc1)
	cb.Do("Unk_72ee1ae", &t.Unk_72ee1ae)
	cb.Do("Unk_b59ed1", &t.Unk_b59ed1)
	cb.Do("Unk_38b5fed", &t.Unk_38b5fed)
	cb.Do("Unk_dbc6f0d", &t.Unk_dbc6f0d)
	cb.Do("Unk_9ea22ec", &t.Unk_9ea22ec)
	cb.Do("Unk_9155d6b", &t.Unk_9155d6b)
	cb.Do("Unk_b1d46f8", &t.Unk_b1d46f8)
	cb.Do("Unk_9f4060e", &t.Unk_9f4060e)
	cb.Do("Unk_2cbcb69", &t.Unk_2cbcb69)
	cb.Do("Unk_603d082", &t.Unk_603d082)
	cb.Do("Unk_c20677a", &t.Unk_c20677a)
	cb.Do("Unk_bad483c", &t.Unk_bad483c)
	cb.Do("Unk_f883e95", &t.Unk_f883e95)
	cb.Do("Unk_ae661d1", &t.Unk_ae661d1)
}

type TutorialDefinition struct {
	DwNextID             DT_UINT
	EType                DT_ENUM
	DwFlags              DT_UINT
	ArSlides             DT_VARIABLEARRAY[*TutorialScreen]
	EVisibilityCondition DT_ENUM
	FlTimeBeforeFading   DT_FLOAT
	EAlignHorizontal     DT_ENUM
	EAlignVertical       DT_ENUM
	VecOffset            DT_BCVEC2I
	SzAnchorControl      DT_CSTRING[*DT_BYTE]
}

func (t *TutorialDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwNextID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.EType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.DwFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ArSlides, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.EVisibilityCondition, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.FlTimeBeforeFading, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.EAlignHorizontal, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.EAlignVertical, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.VecOffset, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.SzAnchorControl, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+80, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TutorialDefinition) Walk(cb WalkCallback) {
	cb.Do("DwNextID", &t.DwNextID)
	cb.Do("EType", &t.EType)
	cb.Do("DwFlags", &t.DwFlags)
	cb.Do("ArSlides", &t.ArSlides)
	cb.Do("EVisibilityCondition", &t.EVisibilityCondition)
	cb.Do("FlTimeBeforeFading", &t.FlTimeBeforeFading)
	cb.Do("EAlignHorizontal", &t.EAlignHorizontal)
	cb.Do("EAlignVertical", &t.EAlignVertical)
	cb.Do("VecOffset", &t.VecOffset)
	cb.Do("SzAnchorControl", &t.SzAnchorControl)
}

type EventCallbackSubcondition struct {
	// Inherits QuestSubconditionBase
	// Inherits Subcondition
	// Inherits PolymorphicBase
	DwType       DT_UINT
	BNegate      DT_INT
	SnoQuest     DT_SNO
	DwPad        DT_UINT
	NStepUID     DT_INT
	NCallbackUID DT_UINT
	EComp        DT_ENUM
	NCount       DT_UINT
}

func (t *EventCallbackSubcondition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BNegate, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SnoQuest, r, &Options{
		Flags: 513,
		Group: 31,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.NStepUID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.NCallbackUID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.EComp, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.NCount, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *EventCallbackSubcondition) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("BNegate", &t.BNegate)
	cb.Do("SnoQuest", &t.SnoQuest)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("NStepUID", &t.NStepUID)
	cb.Do("NCallbackUID", &t.NCallbackUID)
	cb.Do("EComp", &t.EComp)
	cb.Do("NCount", &t.NCount)
}

type GameTestingTakeScreenshotMessage struct {
	THeader     RequiredMessageHeader
	Unk_870804d DT_INT
	SzName      DT_CHARARRAY
}

func (t *GameTestingTakeScreenshotMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_870804d, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.SzName, r, &Options{
		ArrayLength: 128,
		Flags:       1,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+148, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *GameTestingTakeScreenshotMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("Unk_870804d", &t.Unk_870804d)
	cb.Do("SzName", &t.SzName)
}

type UberMaterial struct {
	SnoShaderMap                DT_SNO
	SnoMaterialValueSetOverride DT_SNO
	Mat                         Material
	PtMatTexList                DT_VARIABLEARRAY[*MaterialTextureEntry]
	PtRunTimeMaterialValues     DT_VARIABLEARRAY[*RunTimeMaterialValues]
	NTexAnimStateCount          DT_INT
	FHasGraph                   DT_INT
}

func (t *UberMaterial) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoShaderMap, r, &Options{
		Flags: 257,
		Group: 36,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.SnoMaterialValueSetOverride, r, &Options{
		Flags: 1,
		Group: 85,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.Mat, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.PtMatTexList, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.PtRunTimeMaterialValues, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.NTexAnimStateCount, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.FHasGraph, r, &Options{Flags: 16}); err != nil {
		return err
	}
	if _, err := r.Seek(p+56, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *UberMaterial) Walk(cb WalkCallback) {
	cb.Do("SnoShaderMap", &t.SnoShaderMap)
	cb.Do("SnoMaterialValueSetOverride", &t.SnoMaterialValueSetOverride)
	cb.Do("Mat", &t.Mat)
	cb.Do("PtMatTexList", &t.PtMatTexList)
	cb.Do("PtRunTimeMaterialValues", &t.PtRunTimeMaterialValues)
	cb.Do("NTexAnimStateCount", &t.NTexAnimStateCount)
	cb.Do("FHasGraph", &t.FHasGraph)
}

type StartLocationName struct {
	UGUID  DT_UINT
	SzName DT_CHARARRAY
}

func (t *StartLocationName) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.UGUID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.SzName, r, &Options{
		ArrayLength: 64,
		Flags:       1,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+68, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *StartLocationName) Walk(cb WalkCallback) {
	cb.Do("UGUID", &t.UGUID)
	cb.Do("SzName", &t.SzName)
}

type CampaignData struct {
	ArCampaignArcs DT_VARIABLEARRAY[*CampaignArc]
}

func (t *CampaignData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.ArCampaignArcs, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *CampaignData) Walk(cb WalkCallback) {
	cb.Do("ArCampaignArcs", &t.ArCampaignArcs)
}

type PlayerOwnsAMountSubcondition struct {
	// Inherits Subcondition
	// Inherits PolymorphicBase
	DwType  DT_UINT
	BNegate DT_INT
	DwPad   DT_UINT
}

func (t *PlayerOwnsAMountSubcondition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BNegate, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PlayerOwnsAMountSubcondition) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("BNegate", &t.BNegate)
	cb.Do("DwPad", &t.DwPad)
}

type SurveyMessage struct {
	THeader        RequiredMessageHeader
	TSNOName       DT_SNO_NAME
	GbidSurveyType DT_GBID
}

func (t *SurveyMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TSNOName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.GbidSurveyType, r, &Options{
		Flags: 1,
		Group: 57,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+28, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *SurveyMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("TSNOName", &t.TSNOName)
	cb.Do("GbidSurveyType", &t.GbidSurveyType)
}

type HelpCode_Table struct {
	// Inherits GameBalanceTable
	// Inherits PolymorphicBase
	DwType   DT_UINT
	DwPad    DT_UINT
	TEntries DT_VARIABLEARRAY[*HelpCode]
}

func (t *HelpCode_Table) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TEntries, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *HelpCode_Table) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("TEntries", &t.TEntries)
}

type FogMask struct {
	DwWidth  DT_UINT
	DwHeight DT_UINT
	ArMask   DT_VARIABLEARRAY[*DT_BYTE]
}

func (t *FogMask) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.DwWidth, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.DwHeight, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.ArMask, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *FogMask) Walk(cb WalkCallback) {
	cb.Do("DwWidth", &t.DwWidth)
	cb.Do("DwHeight", &t.DwHeight)
	cb.Do("ArMask", &t.ArMask)
}

type Type_16e3cafe struct {
	// Inherits Type_d4213c9b
	DwType      DT_UINT
	Unk_9b2bc26 Type_80554fed
	Unk_77ed19a DT_ENUM
	DwPad       DT_UINT
}

func (t *Type_16e3cafe) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_9b2bc26, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.Unk_77ed19a, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+56, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_16e3cafe) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("Unk_9b2bc26", &t.Unk_9b2bc26)
	cb.Do("Unk_77ed19a", &t.Unk_77ed19a)
	cb.Do("DwPad", &t.DwPad)
}

type DebugProjectileMovementUpdateMessage struct {
	THeader                   RequiredMessageHeader
	Ann                       DT_ACD_NETWORK_NAME
	IdSWorld                  DT_SHARED_SERVER_DATA_ID
	WpStart                   DT_VECTOR3D
	VVelocity                 DT_VECTOR3D
	Unk_5aa0d1f               DT_VECTOR3D
	Unk_be8c5f6               DT_INT
	FlProjectileRadius        DT_FLOAT
	FlProjectileCapsuleLength DT_FLOAT
	TDetPathData              DT_OPTIONAL[*DebugProjectileDetPathData]
	ArCollisionChecks         DT_FIXEDARRAY[*DebugProjectileCollisionCheck]
	Unk_81f3430               DT_INT
}

func (t *DebugProjectileMovementUpdateMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Ann, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.IdSWorld, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.WpStart, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.VVelocity, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.Unk_5aa0d1f, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.Unk_be8c5f6, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.FlProjectileRadius, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.FlProjectileCapsuleLength, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.TDetPathData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+140, &t.ArCollisionChecks, r, &Options{
		ArrayLength: 4,
		Flags:       8,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+336, &t.Unk_81f3430, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+340, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *DebugProjectileMovementUpdateMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("Ann", &t.Ann)
	cb.Do("IdSWorld", &t.IdSWorld)
	cb.Do("WpStart", &t.WpStart)
	cb.Do("VVelocity", &t.VVelocity)
	cb.Do("Unk_5aa0d1f", &t.Unk_5aa0d1f)
	cb.Do("Unk_be8c5f6", &t.Unk_be8c5f6)
	cb.Do("FlProjectileRadius", &t.FlProjectileRadius)
	cb.Do("FlProjectileCapsuleLength", &t.FlProjectileCapsuleLength)
	cb.Do("TDetPathData", &t.TDetPathData)
	cb.Do("ArCollisionChecks", &t.ArCollisionChecks)
	cb.Do("Unk_81f3430", &t.Unk_81f3430)
}

type GameTestingSalvageItems struct {
	THeader RequiredMessageHeader
}

func (t *GameTestingSalvageItems) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *GameTestingSalvageItems) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
}

type NpcFollowerArchetype struct {
	SzName        DT_CSTRING[*DT_BYTE]
	SzToolTip     DT_CSTRING[*DT_BYTE]
	SnoAIBehavior DT_SNO
	Unk_cbd4b2c   DT_VARIABLEARRAY[*DT_ENUM]
}

func (t *NpcFollowerArchetype) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SzName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SzToolTip, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.SnoAIBehavior, r, &Options{
		Flags: 1,
		Group: 3,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.Unk_cbd4b2c, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+56, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *NpcFollowerArchetype) Walk(cb WalkCallback) {
	cb.Do("SzName", &t.SzName)
	cb.Do("SzToolTip", &t.SzToolTip)
	cb.Do("SnoAIBehavior", &t.SnoAIBehavior)
	cb.Do("Unk_cbd4b2c", &t.Unk_cbd4b2c)
}

type GlobalClanData struct {
	// Inherits GlobalBase
	// Inherits PolymorphicBase
	DwType             DT_UINT
	DwPad              DT_UINT
	ArLabels           DT_VARIABLEARRAY[*ClanLabel]
	ArBannerShapes     DT_VARIABLEARRAY[*BannerMaskOnly]
	ArTextilePatterns  DT_VARIABLEARRAY[*BannerMaskOnly]
	ArTextileTextures  DT_VARIABLEARRAY[*BannerTextileTexture]
	ArEmbroideries     DT_VARIABLEARRAY[*BannerMaskOnly]
	ArTrims            DT_VARIABLEARRAY[*BannerTrim]
	ArIcons            DT_VARIABLEARRAY[*BannerIcon]
	ArColors           DT_VARIABLEARRAY[*BannerColor]
	ArIconAnchorPoints DT_VARIABLEARRAY[*IconAnchorPoint]
	ArIconLayouts      DT_VARIABLEARRAY[*IconLayout]
	ArDefaultBanners   DT_VARIABLEARRAY[*PresetBannerData]
	Unk_38a6145        Type_aa55cd98
	Unk_109949c        Type_1259dca8
	TIconScale         IconScale
}

func (t *GlobalClanData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.ArLabels, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.ArBannerShapes, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.ArTextilePatterns, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.ArTextileTextures, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.ArEmbroideries, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.ArTrims, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.ArIcons, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.ArColors, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+144, &t.ArIconAnchorPoints, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+160, &t.ArIconLayouts, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+176, &t.ArDefaultBanners, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+192, &t.Unk_38a6145, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+208, &t.Unk_109949c, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+224, &t.TIconScale, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+240, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *GlobalClanData) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("ArLabels", &t.ArLabels)
	cb.Do("ArBannerShapes", &t.ArBannerShapes)
	cb.Do("ArTextilePatterns", &t.ArTextilePatterns)
	cb.Do("ArTextileTextures", &t.ArTextileTextures)
	cb.Do("ArEmbroideries", &t.ArEmbroideries)
	cb.Do("ArTrims", &t.ArTrims)
	cb.Do("ArIcons", &t.ArIcons)
	cb.Do("ArColors", &t.ArColors)
	cb.Do("ArIconAnchorPoints", &t.ArIconAnchorPoints)
	cb.Do("ArIconLayouts", &t.ArIconLayouts)
	cb.Do("ArDefaultBanners", &t.ArDefaultBanners)
	cb.Do("Unk_38a6145", &t.Unk_38a6145)
	cb.Do("Unk_109949c", &t.Unk_109949c)
	cb.Do("TIconScale", &t.TIconScale)
}

type DetachCarryableFromPlayerMessage struct {
	THeader      RequiredMessageHeader
	AnnPlayer    DT_ACD_NETWORK_NAME
	SnoCarryable DT_SNO
	Unk_fa1aeb2  DT_OPTIONAL[*DT_INT]
}

func (t *DetachCarryableFromPlayerMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.AnnPlayer, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SnoCarryable, r, &Options{
		Flags: 1,
		Group: 1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.Unk_fa1aeb2, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+36, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *DetachCarryableFromPlayerMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("AnnPlayer", &t.AnnPlayer)
	cb.Do("SnoCarryable", &t.SnoCarryable)
	cb.Do("Unk_fa1aeb2", &t.Unk_fa1aeb2)
}

type Type_1786e9fa struct {
	NRadioButtonValue                    DT_INT
	Unk_d6b1ed2                          DT_INT
	Unk_b264c41                          UIImageHandleReference
	Unk_b93f506                          UIImageHandleReference
	Unk_ffcb54c                          UIImageHandleReference
	SnoTiledStyleSoundsRetreatTiledStyle DT_SNO
	Unk_a781ae5                          DT_SNO
	Unk_966c056                          DT_SNO
	Unk_7310a9                           DT_RGBACOLOR
	Unk_807b009                          DT_RGBACOLOR
	SzChosenHex                          DT_CSTRING[*DT_BYTE]
	ArSrcPath                            UIImageHandleReference
	Unk_608378d                          UIImageHandleReference
	Unk_ac65a3e                          UIImageHandleReference
	Unk_69f59f                           DT_SNO
}

func (t *Type_1786e9fa) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.NRadioButtonValue, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.Unk_d6b1ed2, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.Unk_b264c41, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.Unk_b93f506, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_ffcb54c, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.SnoTiledStyleSoundsRetreatTiledStyle, r, &Options{
		Flags: 1,
		Group: 103,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_a781ae5, r, &Options{
		Flags: 1,
		Group: 103,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.Unk_966c056, r, &Options{
		Flags: 1,
		Group: 103,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.Unk_7310a9, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.Unk_807b009, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.SzChosenHex, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.ArSrcPath, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+60, &t.Unk_608378d, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.Unk_ac65a3e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.Unk_69f59f, r, &Options{
		Flags: 1,
		Group: 40,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+72, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_1786e9fa) Walk(cb WalkCallback) {
	cb.Do("NRadioButtonValue", &t.NRadioButtonValue)
	cb.Do("Unk_d6b1ed2", &t.Unk_d6b1ed2)
	cb.Do("Unk_b264c41", &t.Unk_b264c41)
	cb.Do("Unk_b93f506", &t.Unk_b93f506)
	cb.Do("Unk_ffcb54c", &t.Unk_ffcb54c)
	cb.Do("SnoTiledStyleSoundsRetreatTiledStyle", &t.SnoTiledStyleSoundsRetreatTiledStyle)
	cb.Do("Unk_a781ae5", &t.Unk_a781ae5)
	cb.Do("Unk_966c056", &t.Unk_966c056)
	cb.Do("Unk_7310a9", &t.Unk_7310a9)
	cb.Do("Unk_807b009", &t.Unk_807b009)
	cb.Do("SzChosenHex", &t.SzChosenHex)
	cb.Do("ArSrcPath", &t.ArSrcPath)
	cb.Do("Unk_608378d", &t.Unk_608378d)
	cb.Do("Unk_ac65a3e", &t.Unk_ac65a3e)
	cb.Do("Unk_69f59f", &t.Unk_69f59f)
}

type ActorHitCollisionShape struct {
	Unk_20b45d7      DT_UINT
	EType            DT_ENUM
	FlRadius         DT_FLOAT
	FlLength         DT_FLOAT
	APitch           DT_FLOAT
	AYaw             DT_FLOAT
	VBoneLocalOffset DT_VECTOR3D
}

func (t *ActorHitCollisionShape) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Unk_20b45d7, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.EType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.FlRadius, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.FlLength, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.APitch, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.AYaw, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.VBoneLocalOffset, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+36, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ActorHitCollisionShape) Walk(cb WalkCallback) {
	cb.Do("Unk_20b45d7", &t.Unk_20b45d7)
	cb.Do("EType", &t.EType)
	cb.Do("FlRadius", &t.FlRadius)
	cb.Do("FlLength", &t.FlLength)
	cb.Do("APitch", &t.APitch)
	cb.Do("AYaw", &t.AYaw)
	cb.Do("VBoneLocalOffset", &t.VBoneLocalOffset)
}

type DRLGWorldDebugInfo struct {
	DwSeed                 DT_UINT
	DwSeedInitial          DT_UINT
	SnoPrimaryDungeonQuest DT_SNO
	ArTiles                DT_FIXEDARRAY[*DRLGTileDebugInfo]
	ArDRLGEvents           DT_FIXEDARRAY[*DRLGEventDebugInfo]
	Unk_5999f73            Type_57fcadb
}

func (t *DRLGWorldDebugInfo) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.DwSeed, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.DwSeedInitial, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.SnoPrimaryDungeonQuest, r, &Options{
		Flags: 1,
		Group: 31,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.ArTiles, r, &Options{
		ArrayLength: 128,
		Flags:       8,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+14864, &t.ArDRLGEvents, r, &Options{
		ArrayLength: 16,
		Flags:       8,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+15892, &t.Unk_5999f73, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16432, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *DRLGWorldDebugInfo) Walk(cb WalkCallback) {
	cb.Do("DwSeed", &t.DwSeed)
	cb.Do("DwSeedInitial", &t.DwSeedInitial)
	cb.Do("SnoPrimaryDungeonQuest", &t.SnoPrimaryDungeonQuest)
	cb.Do("ArTiles", &t.ArTiles)
	cb.Do("ArDRLGEvents", &t.ArDRLGEvents)
	cb.Do("Unk_5999f73", &t.Unk_5999f73)
}

type TriggerEventSetAudioState struct {
	// Inherits TriggerEvent
	// Inherits PolymorphicBase
	DwType          DT_UINT
	DwPad           DT_UINT
	TConditions     TriggerConditions
	FGenerated      DT_INT
	Unk_6cba752     DT_INT
	DwParentActorID DT_UINT
	TAudioState     WwiseSwitchValue
}

func (t *TriggerEventSetAudioState) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.FGenerated, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_6cba752, r, &Options{Flags: 16}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.DwParentActorID, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.TAudioState, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+88, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TriggerEventSetAudioState) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("TConditions", &t.TConditions)
	cb.Do("FGenerated", &t.FGenerated)
	cb.Do("Unk_6cba752", &t.Unk_6cba752)
	cb.Do("DwParentActorID", &t.DwParentActorID)
	cb.Do("TAudioState", &t.TAudioState)
}

type ConvLocaleDisplayTimes struct {
	FlDisplayTime DT_FIXEDARRAY[*DT_FLOAT]
}

func (t *ConvLocaleDisplayTimes) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.FlDisplayTime, r, &Options{
		ArrayLength: 10,
		Flags:       1,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+40, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ConvLocaleDisplayTimes) Walk(cb WalkCallback) {
	cb.Do("FlDisplayTime", &t.FlDisplayTime)
}

type MarkerFadeVolumeData struct {
	// Inherits MarkerDataBase
	// Inherits PolymorphicBase
	DwType      DT_UINT
	DwPad       DT_UINT
	Unk_f86aafe DT_ENUM
	EBehavior   DT_ENUM
	Unk_d014f8b DT_INT
	Unk_81c0263 DT_INT
	NFadeGroup  DT_INT
}

func (t *MarkerFadeVolumeData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_f86aafe, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.EBehavior, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_d014f8b, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.Unk_81c0263, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.NFadeGroup, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+40, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *MarkerFadeVolumeData) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("Unk_f86aafe", &t.Unk_f86aafe)
	cb.Do("EBehavior", &t.EBehavior)
	cb.Do("Unk_d014f8b", &t.Unk_d014f8b)
	cb.Do("Unk_81c0263", &t.Unk_81c0263)
	cb.Do("NFadeGroup", &t.NFadeGroup)
}

type Type_18ca0295 struct {
	BReverseOrder   DT_INT
	BHorizontal     DT_INT
	Unk_f89660f     DT_INT
	Unk_3385ab6     DT_INT
	Unk_3a57c53     DT_INT
	NStackSpacing   DT_INT
	ELayoutBehavior DT_ENUM
	TMargins        UIMargins
}

func (t *Type_18ca0295) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.BReverseOrder, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.BHorizontal, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.Unk_f89660f, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.Unk_3385ab6, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_3a57c53, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.NStackSpacing, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ELayoutBehavior, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.TMargins, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+44, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_18ca0295) Walk(cb WalkCallback) {
	cb.Do("BReverseOrder", &t.BReverseOrder)
	cb.Do("BHorizontal", &t.BHorizontal)
	cb.Do("Unk_f89660f", &t.Unk_f89660f)
	cb.Do("Unk_3385ab6", &t.Unk_3385ab6)
	cb.Do("Unk_3a57c53", &t.Unk_3a57c53)
	cb.Do("NStackSpacing", &t.NStackSpacing)
	cb.Do("ELayoutBehavior", &t.ELayoutBehavior)
	cb.Do("TMargins", &t.TMargins)
}

type dmHeightDataMirror struct {
	CountX    DT_INT
	CountY    DT_INT
	CellWidth DT_FLOAT
	ASamples  DT_INT64
	Center    DT_FLOAT
	Scale     DT_FLOAT
}

func (t *dmHeightDataMirror) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.CountX, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.CountY, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.CellWidth, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.ASamples, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Center, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.Scale, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *dmHeightDataMirror) Walk(cb WalkCallback) {
	cb.Do("CountX", &t.CountX)
	cb.Do("CountY", &t.CountY)
	cb.Do("CellWidth", &t.CellWidth)
	cb.Do("ASamples", &t.ASamples)
	cb.Do("Center", &t.Center)
	cb.Do("Scale", &t.Scale)
}

type AIPropType_Table struct {
	// Inherits GameBalanceTable
	// Inherits PolymorphicBase
	DwType   DT_UINT
	DwPad    DT_UINT
	TEntries DT_VARIABLEARRAY[*AIPropType]
}

func (t *AIPropType_Table) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TEntries, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *AIPropType_Table) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("TEntries", &t.TEntries)
}

type HeroStateRewardsMessage struct {
	THeader               RequiredMessageHeader
	DwPlayerGameAccountId DT_UINT
	ArZoneProgressData    DT_FIXEDARRAY[*Type_f0f63f3d]
}

func (t *HeroStateRewardsMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.DwPlayerGameAccountId, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.ArZoneProgressData, r, &Options{
		ArrayLength: 5,
		Flags:       8,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+44, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *HeroStateRewardsMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("DwPlayerGameAccountId", &t.DwPlayerGameAccountId)
	cb.Do("ArZoneProgressData", &t.ArZoneProgressData)
}

type TriggerEventObjectTurnToFace struct {
	// Inherits TriggerEvent
	// Inherits PolymorphicBase
	DwType          DT_UINT
	DwPad           DT_UINT
	TConditions     TriggerConditions
	FGenerated      DT_INT
	Unk_6cba752     DT_INT
	DwParentActorID DT_UINT
	DwObjectID      DT_UINT
	DwTargetID      DT_UINT
	AThreshold      DT_FLOAT
	Unk_d74c75c     DT_FLOAT
	Unk_77ca12a     DT_INT
	Unk_23237e1     DT_INT
	Unk_f1b6afc     DT_FLOAT
}

func (t *TriggerEventObjectTurnToFace) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.FGenerated, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_6cba752, r, &Options{Flags: 16}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.DwParentActorID, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.DwObjectID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.DwTargetID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.AThreshold, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.Unk_d74c75c, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.Unk_77ca12a, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+100, &t.Unk_23237e1, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+104, &t.Unk_f1b6afc, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+112, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TriggerEventObjectTurnToFace) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("TConditions", &t.TConditions)
	cb.Do("FGenerated", &t.FGenerated)
	cb.Do("Unk_6cba752", &t.Unk_6cba752)
	cb.Do("DwParentActorID", &t.DwParentActorID)
	cb.Do("DwObjectID", &t.DwObjectID)
	cb.Do("DwTargetID", &t.DwTargetID)
	cb.Do("AThreshold", &t.AThreshold)
	cb.Do("Unk_d74c75c", &t.Unk_d74c75c)
	cb.Do("Unk_77ca12a", &t.Unk_77ca12a)
	cb.Do("Unk_23237e1", &t.Unk_23237e1)
	cb.Do("Unk_f1b6afc", &t.Unk_f1b6afc)
}

type QuestTimerUpdatedMessage struct {
	THeader     RequiredMessageHeader
	IdQuest     DT_ENUM
	NTimeChange DT_INT
}

func (t *QuestTimerUpdatedMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.IdQuest, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.NTimeChange, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *QuestTimerUpdatedMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("IdQuest", &t.IdQuest)
	cb.Do("NTimeChange", &t.NTimeChange)
}

type UIRadioButtonStyle struct {
	// Inherits UIButtonStyle
	// Inherits UITextStyle
	// Inherits UIWindowStyle
	// Inherits UIControlStyle
	// Inherits PolymorphicBase
	DwType                    DT_UINT
	DwPad                     DT_UINT
	HParentStyle              UIControlHandle
	Unk_441f783               DT_INT64
	M_eHasModifiedPowerTagMap DT_TAGMAP[*DT_ENUM]
	TConsoleInput             UIControlConsoleInput
	Unk_b4f614c               DT_TAGMAP[*DT_ENUM]
	TFont                     UIControlFont
	Unk_4741819               DT_TAGMAP[*DT_ENUM]
	TIcon                     UIControlIcon
	TClickSounds              UIControlClickSounds
	Unk_10f81f0               DT_TAGMAP[*DT_ENUM]
	Unk_d3a1ebf               DT_TAGMAP[*DT_ENUM]
}

func (t *UIRadioButtonStyle) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.HParentStyle, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_441f783, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.M_eHasModifiedPowerTagMap, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.TConsoleInput, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.Unk_b4f614c, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.TFont, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.Unk_4741819, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.TIcon, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.TClickSounds, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+144, &t.Unk_10f81f0, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+160, &t.Unk_d3a1ebf, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+176, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *UIRadioButtonStyle) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("HParentStyle", &t.HParentStyle)
	cb.Do("Unk_441f783", &t.Unk_441f783)
	cb.Do("M_eHasModifiedPowerTagMap", &t.M_eHasModifiedPowerTagMap)
	cb.Do("TConsoleInput", &t.TConsoleInput)
	cb.Do("Unk_b4f614c", &t.Unk_b4f614c)
	cb.Do("TFont", &t.TFont)
	cb.Do("Unk_4741819", &t.Unk_4741819)
	cb.Do("TIcon", &t.TIcon)
	cb.Do("TClickSounds", &t.TClickSounds)
	cb.Do("Unk_10f81f0", &t.Unk_10f81f0)
	cb.Do("Unk_d3a1ebf", &t.Unk_d3a1ebf)
}

type Type_197fc9d9 struct {
	SnoSkill DT_SNO
}

func (t *Type_197fc9d9) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoSkill, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+4, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_197fc9d9) Walk(cb WalkCallback) {
	cb.Do("SnoSkill", &t.SnoSkill)
}

type UpgradedItemLabelSubcondition struct {
	// Inherits Subcondition
	// Inherits PolymorphicBase
	DwType     DT_UINT
	BNegate    DT_INT
	DwPad      DT_UINT
	EItemLabel DT_ENUM
}

func (t *UpgradedItemLabelSubcondition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BNegate, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.EItemLabel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *UpgradedItemLabelSubcondition) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("BNegate", &t.BNegate)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("EItemLabel", &t.EItemLabel)
}

type LuxSettings struct {
	FlLuxMin DT_FLOAT
	FlLuxMax DT_FLOAT
}

func (t *LuxSettings) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.FlLuxMin, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.FlLuxMax, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *LuxSettings) Walk(cb WalkCallback) {
	cb.Do("FlLuxMin", &t.FlLuxMin)
	cb.Do("FlLuxMax", &t.FlLuxMax)
}

type GlobalServiceNPCData struct {
	// Inherits GlobalBase
	// Inherits PolymorphicBase
	DwType                  DT_UINT
	DwPad                   DT_UINT
	ArVendors               DT_FIXEDARRAY[*GlobalVendorEvents]
	ArCrafters              DT_FIXEDARRAY[*GlobalCrafterEvents]
	ArCrafterLockConditions DT_FIXEDARRAY[*CrafterConditions]
	Unk_13e0ecf             DT_FLOAT
	THealerEvents           GlobalHealerEvents
	Unk_24fcd3d             DT_SNO
	Unk_6ac8078             DT_FLOAT
	Unk_2a2b3f7             DT_FLOAT
}

func (t *GlobalServiceNPCData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.ArVendors, r, &Options{
		ArrayLength: 12,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+256, &t.ArCrafters, r, &Options{
		ArrayLength: 6,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+424, &t.ArCrafterLockConditions, r, &Options{
		ArrayLength: 6,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+520, &t.Unk_13e0ecf, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+524, &t.THealerEvents, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+528, &t.Unk_24fcd3d, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+532, &t.Unk_6ac8078, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+536, &t.Unk_2a2b3f7, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+544, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *GlobalServiceNPCData) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("ArVendors", &t.ArVendors)
	cb.Do("ArCrafters", &t.ArCrafters)
	cb.Do("ArCrafterLockConditions", &t.ArCrafterLockConditions)
	cb.Do("Unk_13e0ecf", &t.Unk_13e0ecf)
	cb.Do("THealerEvents", &t.THealerEvents)
	cb.Do("Unk_24fcd3d", &t.Unk_24fcd3d)
	cb.Do("Unk_6ac8078", &t.Unk_6ac8078)
	cb.Do("Unk_2a2b3f7", &t.Unk_2a2b3f7)
}

type ParagonGlyphAffixDefinition struct {
	Unk_3bfd2fb          DT_VARIABLEARRAY[*ParagonGlyphAffixAttribute]
	Unk_a16a4d8          DT_ENUM
	Unk_e53c570          DT_ENUM
	ArThresholdSelector  DT_VARIABLEARRAY[*DT_SNO]
	EBonusOperation      DT_ENUM
	Unk_e80c332          DT_VARIABLEARRAY[*ParagonGlyphAffixAttributeMap]
	Unk_2506574          DT_GBID
	Unk_680001b          DT_FLOAT
	Unk_1135a20          DT_FLOAT
	Unk_12a5abd          DT_FLOAT
	SnoBonusPassivePower DT_SNO
	ArBonusAttributes    DT_VARIABLEARRAY[*ParagonGlyphAffixAttribute]
	ArAffixSkillTags     DT_VARIABLEARRAY[*DT_GBID]
}

func (t *ParagonGlyphAffixDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.Unk_3bfd2fb, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_a16a4d8, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.Unk_e53c570, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.ArThresholdSelector, r, &Options{
		Flags: 1,
		Group: 124,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.EBonusOperation, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.Unk_e80c332, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_2506574, r, &Options{
		Flags: 1,
		Group: 22,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.Unk_680001b, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.Unk_1135a20, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.Unk_12a5abd, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.SnoBonusPassivePower, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.ArBonusAttributes, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.ArAffixSkillTags, r, &Options{
		Flags: 1,
		Group: 56,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+128, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ParagonGlyphAffixDefinition) Walk(cb WalkCallback) {
	cb.Do("Unk_3bfd2fb", &t.Unk_3bfd2fb)
	cb.Do("Unk_a16a4d8", &t.Unk_a16a4d8)
	cb.Do("Unk_e53c570", &t.Unk_e53c570)
	cb.Do("ArThresholdSelector", &t.ArThresholdSelector)
	cb.Do("EBonusOperation", &t.EBonusOperation)
	cb.Do("Unk_e80c332", &t.Unk_e80c332)
	cb.Do("Unk_2506574", &t.Unk_2506574)
	cb.Do("Unk_680001b", &t.Unk_680001b)
	cb.Do("Unk_1135a20", &t.Unk_1135a20)
	cb.Do("Unk_12a5abd", &t.Unk_12a5abd)
	cb.Do("SnoBonusPassivePower", &t.SnoBonusPassivePower)
	cb.Do("ArBonusAttributes", &t.ArBonusAttributes)
	cb.Do("ArAffixSkillTags", &t.ArAffixSkillTags)
}

type PVPShrineEventUpdateMessage struct {
	THeader      RequiredMessageHeader
	WpLocation   DT_VECTOR3D
	DwEnd        DT_UINT
	SnoLevelArea DT_SNO
}

func (t *PVPShrineEventUpdateMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.WpLocation, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.DwEnd, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.SnoLevelArea, r, &Options{
		Flags: 1,
		Group: 22,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+36, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PVPShrineEventUpdateMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("WpLocation", &t.WpLocation)
	cb.Do("DwEnd", &t.DwEnd)
	cb.Do("SnoLevelArea", &t.SnoLevelArea)
}

type MarkerItemData struct {
	// Inherits MarkerDataBase
	// Inherits PolymorphicBase
	DwType          DT_UINT
	DwPad           DT_UINT
	ECurrencyType   DT_ENUM
	NCurrencyAmount DT_INT
}

func (t *MarkerItemData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.ECurrencyType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.NCurrencyAmount, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *MarkerItemData) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("ECurrencyType", &t.ECurrencyType)
	cb.Do("NCurrencyAmount", &t.NCurrencyAmount)
}

type UIMenuItemStyle struct {
	// Inherits UIButtonStyle
	// Inherits UITextStyle
	// Inherits UIWindowStyle
	// Inherits UIControlStyle
	// Inherits PolymorphicBase
	DwType                    DT_UINT
	DwPad                     DT_UINT
	HParentStyle              UIControlHandle
	Unk_441f783               DT_INT64
	M_eHasModifiedPowerTagMap DT_TAGMAP[*DT_ENUM]
	TConsoleInput             UIControlConsoleInput
	Unk_b4f614c               DT_TAGMAP[*DT_ENUM]
	TFont                     UIControlFont
	Unk_4741819               DT_TAGMAP[*DT_ENUM]
	TIcon                     UIControlIcon
	TClickSounds              UIControlClickSounds
	Unk_10f81f0               DT_TAGMAP[*DT_ENUM]
}

func (t *UIMenuItemStyle) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.HParentStyle, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_441f783, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.M_eHasModifiedPowerTagMap, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.TConsoleInput, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.Unk_b4f614c, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.TFont, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.Unk_4741819, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.TIcon, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.TClickSounds, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+144, &t.Unk_10f81f0, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+160, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *UIMenuItemStyle) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("HParentStyle", &t.HParentStyle)
	cb.Do("Unk_441f783", &t.Unk_441f783)
	cb.Do("M_eHasModifiedPowerTagMap", &t.M_eHasModifiedPowerTagMap)
	cb.Do("TConsoleInput", &t.TConsoleInput)
	cb.Do("Unk_b4f614c", &t.Unk_b4f614c)
	cb.Do("TFont", &t.TFont)
	cb.Do("Unk_4741819", &t.Unk_4741819)
	cb.Do("TIcon", &t.TIcon)
	cb.Do("TClickSounds", &t.TClickSounds)
	cb.Do("Unk_10f81f0", &t.Unk_10f81f0)
}

type SpawnerGizmoData struct {
	// Inherits NamedGizmoData
	// Inherits ActorGizmoData
	// Inherits PolymorphicBase
	DwType                              DT_UINT
	DwPad                               DT_UINT
	FDisableNonFriendlyOperation        DT_INT
	FWalkToCenter                       DT_INT
	FGizmoStartsDisabled                DT_INT
	FUseStringListName                  DT_INT
	FForceMinimapIcon                   DT_INT
	FlOperationRadius                   DT_FLOAT
	Unk_d0b1df5                         DT_FLOAT
	FlGizmoUseTime                      DT_FLOAT
	SnoChannelingEffect                 DT_SNO
	Unk_2767229                         DT_INT
	FGizmoShowProgressBar               DT_INT
	Unk_6d9ebe1                         DT_INT
	Unk_5456245                         DT_INT
	Unk_af5815a                         DT_INT
	SnoOnClickEffect                    DT_SNO
	SnoPickedUpEffect                   DT_SNO
	SnoDropOnGroundEffect               DT_SNO
	TConditionData                      GizmoConditionData
	SnoPowerOperator                    DT_SNO
	SnoPowerOperate                     DT_SNO
	SnoPowerOperatorActive              DT_SNO
	SnoPowerOperateActive               DT_SNO
	Unk_359810e                         DT_INT
	NCooldown                           DT_UINT
	Unk_9c8478e                         DT_UINT
	Unk_d45ed2d                         DT_INT
	Unk_f6b20b7                         DT_INT
	Unk_54513b8                         DT_INT
	Unk_fd1f378                         DT_UINT
	Unk_487c14                          DT_UINT
	Unk_87f2609                         DT_UINT
	Unk_158eb4f                         DT_FLOAT
	Unk_ab58cd3                         DT_ENUM
	Unk_91a3966                         DT_UINT
	Unk_25312e5                         DT_UINT
	Unk_4be4371                         DT_INT
	FSpawnedMonstersInheritTargetList   DT_INT
	FSpawnedMonstersStartInSpecialState DT_INT
	FSpawnedMonstersGiveLoot            DT_INT
	FSpawnedMonstersGiveXP              DT_INT
	FSpawnItemRotateInGroup             DT_INT
	Unk_545c5ca                         DT_INT
	ESpawnType                          DT_ENUM
	SnoSpawnActor                       DT_SNO
	SnoSpawnEncounter                   DT_SNO
	SnoPopulation                       DT_SNO
	SnoSpawnEffect                      DT_SNO
	SnoSummonedEffect                   DT_SNO
	SnoSpawnEffectGroupActorToActor     DT_SNO
	Unk_50d7e54                         DT_SNO
	SnoSpawnItem                        DT_SNO
	NSpawnAdditionalAffixCount          DT_INT
	FSpawnLockRandomAffixesOnCreate     DT_INT
	ArrReloadedBits                     DT_FIXEDARRAY[*DT_SNO]
	TInstanceData                       SpawnerGizmoInstanceData
}

func (t *SpawnerGizmoData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.FDisableNonFriendlyOperation, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.FWalkToCenter, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.FGizmoStartsDisabled, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.FUseStringListName, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.FForceMinimapIcon, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.FlOperationRadius, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.Unk_d0b1df5, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.FlGizmoUseTime, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.SnoChannelingEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.Unk_2767229, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.FGizmoShowProgressBar, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+60, &t.Unk_6d9ebe1, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.Unk_5456245, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.Unk_af5815a, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.SnoOnClickEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.SnoPickedUpEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.SnoDropOnGroundEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.TConditionData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.SnoPowerOperator, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.SnoPowerOperate, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.SnoPowerOperatorActive, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+100, &t.SnoPowerOperateActive, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+104, &t.Unk_359810e, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+108, &t.NCooldown, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.Unk_9c8478e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+116, &t.Unk_d45ed2d, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.Unk_f6b20b7, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+124, &t.Unk_54513b8, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.Unk_fd1f378, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+132, &t.Unk_487c14, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+136, &t.Unk_87f2609, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+140, &t.Unk_158eb4f, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+144, &t.Unk_ab58cd3, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+148, &t.Unk_91a3966, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+152, &t.Unk_25312e5, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+156, &t.Unk_4be4371, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+160, &t.FSpawnedMonstersInheritTargetList, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+164, &t.FSpawnedMonstersStartInSpecialState, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+168, &t.FSpawnedMonstersGiveLoot, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+172, &t.FSpawnedMonstersGiveXP, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+176, &t.FSpawnItemRotateInGroup, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+180, &t.Unk_545c5ca, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+184, &t.ESpawnType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+188, &t.SnoSpawnActor, r, &Options{
		Flags: 1,
		Group: 1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+192, &t.SnoSpawnEncounter, r, &Options{
		Flags: 1,
		Group: 15,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+196, &t.SnoPopulation, r, &Options{
		Flags: 1,
		Group: 84,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+200, &t.SnoSpawnEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+204, &t.SnoSummonedEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+208, &t.SnoSpawnEffectGroupActorToActor, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+212, &t.Unk_50d7e54, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+216, &t.SnoSpawnItem, r, &Options{
		Flags: 1,
		Group: 73,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+220, &t.NSpawnAdditionalAffixCount, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+224, &t.FSpawnLockRandomAffixesOnCreate, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+228, &t.ArrReloadedBits, r, &Options{
		ArrayLength: 4,
		Flags:       1,
		Group:       107,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+248, &t.TInstanceData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+472, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *SpawnerGizmoData) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("FDisableNonFriendlyOperation", &t.FDisableNonFriendlyOperation)
	cb.Do("FWalkToCenter", &t.FWalkToCenter)
	cb.Do("FGizmoStartsDisabled", &t.FGizmoStartsDisabled)
	cb.Do("FUseStringListName", &t.FUseStringListName)
	cb.Do("FForceMinimapIcon", &t.FForceMinimapIcon)
	cb.Do("FlOperationRadius", &t.FlOperationRadius)
	cb.Do("Unk_d0b1df5", &t.Unk_d0b1df5)
	cb.Do("FlGizmoUseTime", &t.FlGizmoUseTime)
	cb.Do("SnoChannelingEffect", &t.SnoChannelingEffect)
	cb.Do("Unk_2767229", &t.Unk_2767229)
	cb.Do("FGizmoShowProgressBar", &t.FGizmoShowProgressBar)
	cb.Do("Unk_6d9ebe1", &t.Unk_6d9ebe1)
	cb.Do("Unk_5456245", &t.Unk_5456245)
	cb.Do("Unk_af5815a", &t.Unk_af5815a)
	cb.Do("SnoOnClickEffect", &t.SnoOnClickEffect)
	cb.Do("SnoPickedUpEffect", &t.SnoPickedUpEffect)
	cb.Do("SnoDropOnGroundEffect", &t.SnoDropOnGroundEffect)
	cb.Do("TConditionData", &t.TConditionData)
	cb.Do("SnoPowerOperator", &t.SnoPowerOperator)
	cb.Do("SnoPowerOperate", &t.SnoPowerOperate)
	cb.Do("SnoPowerOperatorActive", &t.SnoPowerOperatorActive)
	cb.Do("SnoPowerOperateActive", &t.SnoPowerOperateActive)
	cb.Do("Unk_359810e", &t.Unk_359810e)
	cb.Do("NCooldown", &t.NCooldown)
	cb.Do("Unk_9c8478e", &t.Unk_9c8478e)
	cb.Do("Unk_d45ed2d", &t.Unk_d45ed2d)
	cb.Do("Unk_f6b20b7", &t.Unk_f6b20b7)
	cb.Do("Unk_54513b8", &t.Unk_54513b8)
	cb.Do("Unk_fd1f378", &t.Unk_fd1f378)
	cb.Do("Unk_487c14", &t.Unk_487c14)
	cb.Do("Unk_87f2609", &t.Unk_87f2609)
	cb.Do("Unk_158eb4f", &t.Unk_158eb4f)
	cb.Do("Unk_ab58cd3", &t.Unk_ab58cd3)
	cb.Do("Unk_91a3966", &t.Unk_91a3966)
	cb.Do("Unk_25312e5", &t.Unk_25312e5)
	cb.Do("Unk_4be4371", &t.Unk_4be4371)
	cb.Do("FSpawnedMonstersInheritTargetList", &t.FSpawnedMonstersInheritTargetList)
	cb.Do("FSpawnedMonstersStartInSpecialState", &t.FSpawnedMonstersStartInSpecialState)
	cb.Do("FSpawnedMonstersGiveLoot", &t.FSpawnedMonstersGiveLoot)
	cb.Do("FSpawnedMonstersGiveXP", &t.FSpawnedMonstersGiveXP)
	cb.Do("FSpawnItemRotateInGroup", &t.FSpawnItemRotateInGroup)
	cb.Do("Unk_545c5ca", &t.Unk_545c5ca)
	cb.Do("ESpawnType", &t.ESpawnType)
	cb.Do("SnoSpawnActor", &t.SnoSpawnActor)
	cb.Do("SnoSpawnEncounter", &t.SnoSpawnEncounter)
	cb.Do("SnoPopulation", &t.SnoPopulation)
	cb.Do("SnoSpawnEffect", &t.SnoSpawnEffect)
	cb.Do("SnoSummonedEffect", &t.SnoSummonedEffect)
	cb.Do("SnoSpawnEffectGroupActorToActor", &t.SnoSpawnEffectGroupActorToActor)
	cb.Do("Unk_50d7e54", &t.Unk_50d7e54)
	cb.Do("SnoSpawnItem", &t.SnoSpawnItem)
	cb.Do("NSpawnAdditionalAffixCount", &t.NSpawnAdditionalAffixCount)
	cb.Do("FSpawnLockRandomAffixesOnCreate", &t.FSpawnLockRandomAffixesOnCreate)
	cb.Do("ArrReloadedBits", &t.ArrReloadedBits)
	cb.Do("TInstanceData", &t.TInstanceData)
}

type Type_1af4235c struct {
	// Inherits Type_d3c3637f
	// Inherits Subcondition
	// Inherits PolymorphicBase
	DwType        DT_UINT
	BNegate       DT_INT
	EComparisonOp DT_ENUM
	DwPad         DT_UINT
	FlValue       DT_FLOAT
	BUse2D        DT_INT
	Unk_c7b2b18   DT_ENUM
}

func (t *Type_1af4235c) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BNegate, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.EComparisonOp, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.FlValue, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.BUse2D, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.Unk_c7b2b18, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_1af4235c) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("BNegate", &t.BNegate)
	cb.Do("EComparisonOp", &t.EComparisonOp)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("FlValue", &t.FlValue)
	cb.Do("BUse2D", &t.BUse2D)
	cb.Do("Unk_c7b2b18", &t.Unk_c7b2b18)
}

type PrefabScopedActorGroupData_Table struct {
	// Inherits GameBalanceTable
	// Inherits PolymorphicBase
	DwType   DT_UINT
	DwPad    DT_UINT
	TEntries DT_VARIABLEARRAY[*PrefabScopedActorGroupData]
}

func (t *PrefabScopedActorGroupData_Table) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TEntries, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PrefabScopedActorGroupData_Table) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("TEntries", &t.TEntries)
}

type MakeupDefinition struct {
	FUsableByClass DT_FIXEDARRAY[*DT_INT]
	SnoMakeup      DT_SNO
	FlIntensity    DT_FLOAT
	FlRoughness    DT_FLOAT
	FlMetalness    DT_FLOAT
	HIconImage     DT_UINT
}

func (t *MakeupDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.FUsableByClass, r, &Options{
		ArrayLength: 5,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.SnoMakeup, r, &Options{
		Flags: 1,
		Group: 44,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.FlIntensity, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.FlRoughness, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.FlMetalness, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.HIconImage, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *MakeupDefinition) Walk(cb WalkCallback) {
	cb.Do("FUsableByClass", &t.FUsableByClass)
	cb.Do("SnoMakeup", &t.SnoMakeup)
	cb.Do("FlIntensity", &t.FlIntensity)
	cb.Do("FlRoughness", &t.FlRoughness)
	cb.Do("FlMetalness", &t.FlMetalness)
	cb.Do("HIconImage", &t.HIconImage)
}

type GameVariableStringSubcondition struct {
	// Inherits Subcondition
	// Inherits PolymorphicBase
	DwType               DT_UINT
	BNegate              DT_INT
	DwPad                DT_UINT
	GbidDesignerVariable DT_GBID
	SzValue              DT_UINT
}

func (t *GameVariableStringSubcondition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BNegate, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.GbidDesignerVariable, r, &Options{
		Flags: 1,
		Group: 45,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.SzValue, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *GameVariableStringSubcondition) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("BNegate", &t.BNegate)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("GbidDesignerVariable", &t.GbidDesignerVariable)
	cb.Do("SzValue", &t.SzValue)
}

type WwiseSoundBankContentBase struct {
	// Inherits PolymorphicBase
	DwType DT_UINT
	DwPad  DT_UINT
}

func (t *WwiseSoundBankContentBase) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *WwiseSoundBankContentBase) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
}

type PlatformAccount struct {
	M_id       DT_INT64
	M_platform DT_ENUM
}

func (t *PlatformAccount) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.M_id, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.M_platform, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PlatformAccount) Walk(cb WalkCallback) {
	cb.Do("M_id", &t.M_id)
	cb.Do("M_platform", &t.M_platform)
}

type Type_1b652647 struct {
	TComponentId       DT_UINT
	TComponentFoleyTag FoleyMaterialTag
}

func (t *Type_1b652647) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.TComponentId, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.TComponentFoleyTag, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_1b652647) Walk(cb WalkCallback) {
	cb.Do("TComponentId", &t.TComponentId)
	cb.Do("TComponentFoleyTag", &t.TComponentFoleyTag)
}

type ScriptEventParamGizmoType struct {
	// Inherits ScriptEventParamBase
	// Inherits PolymorphicBase
	DwType     DT_UINT
	EParamType DT_ENUM
	DwPad      DT_UINT
	EType      DT_ENUM
}

func (t *ScriptEventParamGizmoType) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.EParamType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.EType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ScriptEventParamGizmoType) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("EParamType", &t.EParamType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("EType", &t.EType)
}

type PlayerClassCoreStatBenefitData struct {
	Unk_8754bdb DT_VARIABLEARRAY[*PlayerClassCoreStatBenefitEntry]
}

func (t *PlayerClassCoreStatBenefitData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Unk_8754bdb, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PlayerClassCoreStatBenefitData) Walk(cb WalkCallback) {
	cb.Do("Unk_8754bdb", &t.Unk_8754bdb)
}

type ActorProjectileData struct {
	FDestroyOnImpact              DT_INT
	Unk_fc86022                   DT_FLOAT
	FProjectileMatchYawToVelocity DT_INT
	Unk_a6a9aae                   DT_INT
	Unk_1db2e79                   DT_INT
	FProjectileCanBeReflected     DT_INT
	FProjectileCanBeSlowed        DT_INT
	Unk_bac5791                   DT_INT
	Unk_7c4ac65                   DT_INT
	THardpointLink                HardpointLink
	TAttachHardpointLink          HardpointLink
	FlGravityMultiplier           DT_FLOAT
	FHugsGround                   DT_INT
	FIgnoreSceneCollision         DT_INT
	BIgnoreActorCollision         DT_INT
	Unk_4673605                   DT_FLOAT
	Unk_cdf7878                   DT_FLOAT
	Unk_3168e93                   DT_INT
	Unk_1458258                   DT_INT
	Unk_6b95d1b                   DT_ENUM
	Unk_30866cd                   DT_INT
	Unk_57ae150                   DT_UINT
	Unk_c220883                   DT_FLOAT
	Unk_721bb83                   DT_FLOAT
	Unk_869456c                   DT_FLOAT
	Unk_bd02cf7                   DT_FLOAT
	Unk_17a6e83                   DT_SNO
	Unk_8815a78                   DT_INT
	Unk_57168be                   DT_INT
	Unk_9348542                   DT_INT
	DwCollidableFlags             DT_UINT
	Unk_6250c06                   DT_INT
}

func (t *ActorProjectileData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.FDestroyOnImpact, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.Unk_fc86022, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.FProjectileMatchYawToVelocity, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.Unk_a6a9aae, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_1db2e79, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.FProjectileCanBeReflected, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.FProjectileCanBeSlowed, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.Unk_bac5791, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.Unk_7c4ac65, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.THardpointLink, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.TAttachHardpointLink, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.FlGravityMultiplier, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.FHugsGround, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+60, &t.FIgnoreSceneCollision, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.BIgnoreActorCollision, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.Unk_4673605, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_cdf7878, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.Unk_3168e93, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.Unk_1458258, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.Unk_6b95d1b, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.Unk_30866cd, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.Unk_57ae150, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.Unk_c220883, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+100, &t.Unk_721bb83, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+104, &t.Unk_869456c, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+108, &t.Unk_bd02cf7, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.Unk_17a6e83, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+116, &t.Unk_8815a78, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.Unk_57168be, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+124, &t.Unk_9348542, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.DwCollidableFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+132, &t.Unk_6250c06, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+136, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ActorProjectileData) Walk(cb WalkCallback) {
	cb.Do("FDestroyOnImpact", &t.FDestroyOnImpact)
	cb.Do("Unk_fc86022", &t.Unk_fc86022)
	cb.Do("FProjectileMatchYawToVelocity", &t.FProjectileMatchYawToVelocity)
	cb.Do("Unk_a6a9aae", &t.Unk_a6a9aae)
	cb.Do("Unk_1db2e79", &t.Unk_1db2e79)
	cb.Do("FProjectileCanBeReflected", &t.FProjectileCanBeReflected)
	cb.Do("FProjectileCanBeSlowed", &t.FProjectileCanBeSlowed)
	cb.Do("Unk_bac5791", &t.Unk_bac5791)
	cb.Do("Unk_7c4ac65", &t.Unk_7c4ac65)
	cb.Do("THardpointLink", &t.THardpointLink)
	cb.Do("TAttachHardpointLink", &t.TAttachHardpointLink)
	cb.Do("FlGravityMultiplier", &t.FlGravityMultiplier)
	cb.Do("FHugsGround", &t.FHugsGround)
	cb.Do("FIgnoreSceneCollision", &t.FIgnoreSceneCollision)
	cb.Do("BIgnoreActorCollision", &t.BIgnoreActorCollision)
	cb.Do("Unk_4673605", &t.Unk_4673605)
	cb.Do("Unk_cdf7878", &t.Unk_cdf7878)
	cb.Do("Unk_3168e93", &t.Unk_3168e93)
	cb.Do("Unk_1458258", &t.Unk_1458258)
	cb.Do("Unk_6b95d1b", &t.Unk_6b95d1b)
	cb.Do("Unk_30866cd", &t.Unk_30866cd)
	cb.Do("Unk_57ae150", &t.Unk_57ae150)
	cb.Do("Unk_c220883", &t.Unk_c220883)
	cb.Do("Unk_721bb83", &t.Unk_721bb83)
	cb.Do("Unk_869456c", &t.Unk_869456c)
	cb.Do("Unk_bd02cf7", &t.Unk_bd02cf7)
	cb.Do("Unk_17a6e83", &t.Unk_17a6e83)
	cb.Do("Unk_8815a78", &t.Unk_8815a78)
	cb.Do("Unk_57168be", &t.Unk_57168be)
	cb.Do("Unk_9348542", &t.Unk_9348542)
	cb.Do("DwCollidableFlags", &t.DwCollidableFlags)
	cb.Do("Unk_6250c06", &t.Unk_6250c06)
}

type MonsterAffixDefinition struct {
	BShown          DT_INT
	SnoOnDeathPower DT_SNO
	SnoSpawnPower   DT_SNO
	HIcon           DT_UINT
}

func (t *MonsterAffixDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.BShown, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.SnoOnDeathPower, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoSpawnPower, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.HIcon, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *MonsterAffixDefinition) Walk(cb WalkCallback) {
	cb.Do("BShown", &t.BShown)
	cb.Do("SnoOnDeathPower", &t.SnoOnDeathPower)
	cb.Do("SnoSpawnPower", &t.SnoSpawnPower)
	cb.Do("HIcon", &t.HIcon)
}

type TriggerEventChangeShaderMapOverrideDuration struct {
	// Inherits TriggerEventRangedDuration
	// Inherits TriggerEvent
	// Inherits PolymorphicBase
	DwType              DT_UINT
	TConditions         TriggerConditions
	FGenerated          DT_INT
	Unk_6cba752         DT_INT
	DwParentActorID     DT_UINT
	TDuration           DT_FLOAT
	DwTriggerFlags      DT_UINT
	DwTriggerFlagsEx    DT_UINT
	TCleanup            TriggerCleanup
	Unk_49e9257         DT_INT
	Unk_5490979         DT_INT
	DwPad               DT_UINT
	DwActorID           DT_UINT
	DwShaderMapOverride DT_UINT
	Unk_279aa5a         DT_INT
}

func (t *TriggerEventChangeShaderMapOverrideDuration) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.FGenerated, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_6cba752, r, &Options{Flags: 16}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.DwParentActorID, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.TDuration, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.DwTriggerFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.DwTriggerFlagsEx, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.TCleanup, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+116, &t.Unk_49e9257, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.Unk_5490979, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+124, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.DwActorID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+132, &t.DwShaderMapOverride, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+136, &t.Unk_279aa5a, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+144, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TriggerEventChangeShaderMapOverrideDuration) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("TConditions", &t.TConditions)
	cb.Do("FGenerated", &t.FGenerated)
	cb.Do("Unk_6cba752", &t.Unk_6cba752)
	cb.Do("DwParentActorID", &t.DwParentActorID)
	cb.Do("TDuration", &t.TDuration)
	cb.Do("DwTriggerFlags", &t.DwTriggerFlags)
	cb.Do("DwTriggerFlagsEx", &t.DwTriggerFlagsEx)
	cb.Do("TCleanup", &t.TCleanup)
	cb.Do("Unk_49e9257", &t.Unk_49e9257)
	cb.Do("Unk_5490979", &t.Unk_5490979)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("DwActorID", &t.DwActorID)
	cb.Do("DwShaderMapOverride", &t.DwShaderMapOverride)
	cb.Do("Unk_279aa5a", &t.Unk_279aa5a)
}

type Type_1c1c99a7 struct {
	// Inherits Type_d4213c9b
	DwType      DT_UINT
	Unk_9b2bc26 Type_80554fed
	Unk_77ed19a DT_ENUM
	DwPad       DT_UINT
}

func (t *Type_1c1c99a7) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_9b2bc26, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.Unk_77ed19a, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+56, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_1c1c99a7) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("Unk_9b2bc26", &t.Unk_9b2bc26)
	cb.Do("Unk_77ed19a", &t.Unk_77ed19a)
	cb.Do("DwPad", &t.DwPad)
}

type Type_1c5ecda5 struct {
	TStyleOverrides DT_VARIABLEARRAY[*UITemplateStyleOverride]
}

func (t *Type_1c5ecda5) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.TStyleOverrides, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_1c5ecda5) Walk(cb WalkCallback) {
	cb.Do("TStyleOverrides", &t.TStyleOverrides)
}

type TimedSpawningData struct {
	GbidSpawnLocType DT_GBID
	ERestrictionType DT_ENUM
	NCountActive     DT_INT
	FlPercentActive  DT_FLOAT
	FlDuration       DT_FLOAT
}

func (t *TimedSpawningData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.GbidSpawnLocType, r, &Options{
		Flags: 1,
		Group: 20,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.ERestrictionType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.NCountActive, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.FlPercentActive, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.FlDuration, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+20, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TimedSpawningData) Walk(cb WalkCallback) {
	cb.Do("GbidSpawnLocType", &t.GbidSpawnLocType)
	cb.Do("ERestrictionType", &t.ERestrictionType)
	cb.Do("NCountActive", &t.NCountActive)
	cb.Do("FlPercentActive", &t.FlPercentActive)
	cb.Do("FlDuration", &t.FlDuration)
}

type PowerConditionStoredValueEquals struct {
	// Inherits PowerConditionBase
	// Inherits PolymorphicBase
	DwType         DT_UINT
	BInverse       DT_INT
	DwPad          DT_UINT
	SzVariableName DT_UINT
	FlValue        DT_FLOAT
}

func (t *PowerConditionStoredValueEquals) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BInverse, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SzVariableName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.FlValue, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PowerConditionStoredValueEquals) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("BInverse", &t.BInverse)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("SzVariableName", &t.SzVariableName)
	cb.Do("FlValue", &t.FlValue)
}

type Type_1cf6b4f9 struct {
	Unk_281a24e              DT_INT
	Unk_db52f49              DT_INT
	FlWeatherDuration        DT_FLOAT
	PathWeatherIntensity     Type_cbfdd2ea
	Unk_6da77a8              Type_cbfdd2ea
	Unk_e71f9c               Type_cbfdd2ea
	Unk_e71f9d               Type_cbfdd2ea
	Unk_78feafe              DT_INT
	Unk_88e388e              Type_cbfdd2ea
	Unk_8a0510f              Type_cbfdd2ea
	Unk_78feaff              DT_INT
	Unk_88e388f              Type_cbfdd2ea
	Unk_8a05110              Type_cbfdd2ea
	PathCloudShadowIntensity Type_cbfdd2ea
	PathCloudShadowOffset    Type_cbfdd2ea
	Unk_27336d0              DT_FLOAT
	Unk_969434               DT_INT
	FlCloudScale             DT_FLOAT
	TMatTexCloud             MaterialTexture
	TMatTexCloud2            MaterialTexture
	Unk_635ca57              Type_cbfdd2ea
	EEffectType              DT_ENUM
	Unk_17e101e              DT_INT
	Unk_61412c1              DT_FLOAT
	FDryCharacters           DT_INT
	Unk_6a3ef4               DT_VARIABLEARRAY[*DT_SNO]
	SnoFogParticle           DT_SNO
	SnoSound                 DT_SNO
	SnoSkyboxActor           DT_SNO
	ASkyboxYaw               DT_FLOAT
	Unk_d76517b              DT_INT
	FlLightningAltitude      DT_RANGE[*DT_FLOAT]
	FlLightningAzimuth       DT_RANGE[*DT_FLOAT]
	PathLightningThreshold   Type_cbfdd2ea
	TLightningDelayRange     DT_RANGE[*DT_FLOAT]
	FlThunderDelayMax        DT_FLOAT
	SnoLightning             DT_SNO
	SnoLightningEffectGroup  DT_SNO
	SnoThunder               DT_SNO
	Unk_e62e0c5              DT_INT
	Unk_ef3334               Type_cbfdd2ea
	Unk_5ae444c              DT_RANGE[*DT_FLOAT]
	Unk_814d665              DT_FLOAT
	Unk_e4ce904              DT_FLOAT
	Unk_71a7d61              Type_cbfdd2ea
	Unk_c03585a              Type_cbfdd2ea
	Unk_ef9caa7              Type_cbfdd2ea
	Unk_e9c94fc              Type_cbfdd2ea
	Unk_acc170e              DT_FLOAT
	Unk_ec2c674              DT_FLOAT
	SnoSkylightTex           DT_SNO
	Unk_afd6821              bcQuat
	FSunEnabled              DT_INT
	PathSunColor             Type_560ae4cf
	PathSunIntensity         Type_cbfdd2ea
	Unk_b9380cd              Type_cbfdd2ea
	Unk_d83665               DT_FLOAT
	Unk_8ff1cc9              DT_INT
	Unk_18f4472              Type_560ae4cf
	Unk_71643d4              DT_RGBACOLOR
	Unk_811fc11              DT_FLOAT
	FlSunAltitude            DT_FLOAT
	FlSunAzimuth             DT_FLOAT
	FlSunRadius              DT_FLOAT
	Unk_9e754d5              DT_FLOAT
	Unk_aa224d7              DT_INT
	FlSunShadowAltitude      DT_FLOAT
	FlSunShadowAzimuth       DT_FLOAT
	Unk_daea413              DT_FLOAT
	Unk_2935034              Type_cbfdd2ea
	Unk_83a1898              DT_FLOAT
	Unk_d9887a5              DT_FLOAT
	Unk_736ceb5              Type_560ae4cf
	Unk_e10a587              Type_560ae4cf
	Unk_dd8bdbd              Type_cbfdd2ea
	Unk_8f0758f              Type_cbfdd2ea
	Unk_f9636b7              DT_FLOAT
	Unk_b8314fd              DT_FLOAT
	Unk_25d0dc9              DT_FLOAT
	Unk_be5b4cf              DT_FLOAT
	Unk_8d2c2a4              Type_560ae4cf
	Unk_31b112c              Type_cbfdd2ea
	Unk_526a5cd              Type_cbfdd2ea
	Unk_d9f342f              DT_INT
	Unk_d4be541              DT_INT
	Unk_57c6d0f              Type_560ae4cf
	Unk_50a0f21              Type_560ae4cf
	Unk_819f917              Type_cbfdd2ea
	Unk_b591c29              Type_cbfdd2ea
	Unk_93f10b1              DT_FLOAT
	Unk_21b97b7              DT_FLOAT
	Unk_1212703              DT_FLOAT
	Unk_58e8ec9              DT_FLOAT
	Unk_65efd73              Type_cbfdd2ea
	Unk_23eac05              Type_cbfdd2ea
	Unk_6cf80a6              Type_cbfdd2ea
	Unk_bf9598               Type_cbfdd2ea
	Unk_902b160              Type_cbfdd2ea
	Unk_958dd92              Type_cbfdd2ea
	Unk_9733493              Type_cbfdd2ea
	Unk_7d9c725              Type_cbfdd2ea
	Unk_4e2cb52              Type_cbfdd2ea
	Unk_a0d23db              DT_INT
	FlBlendApproachSpeed     DT_FLOAT
	TWaveSettings            HeightFieldWaveSettings
	SnoOceanMaterial         DT_SNO
	SnoGroundFogMaterial     DT_SNO
	PathWaterBloodiness      Type_cbfdd2ea
	Unk_832195e              Type_cbfdd2ea
	Unk_d9ac5a8              Type_cbfdd2ea
	FlSSAOOcclusionRadius    DT_FLOAT
	FlSSAOOcclusionStrength  DT_FLOAT
	Unk_6356b81              DT_FLOAT
	Unk_c1c86a0              DT_FLOAT
	Unk_cc9331e              DT_FLOAT
	Unk_58f490               DT_FLOAT
	Unk_92befa               DT_FLOAT
	Unk_ff9df7d              DT_FLOAT
	Unk_eebbc0               DT_FLOAT
	Unk_826c03f              Type_cbfdd2ea
	Unk_31d22a7              DT_INT
	Unk_a16201               DT_FLOAT
	Unk_a55216b              Type_cbfdd2ea
	Unk_166e0e6              DT_FLOAT
	Unk_bd7f6de              DT_FLOAT
	Unk_f5b8782              Type_cbfdd2ea
	Unk_f8bf7fa              DT_FLOAT
	Unk_b6100e3              DT_FLOAT
	Unk_62ddb30              DT_INT
	Unk_202fc35              bcQuat
	Unk_4e6515c              DT_INT
	TShoreWaveSettings       ShoreWaveSettings
	Unk_ee76094              DT_RGBACOLOR
	Unk_403296d              DT_INT
}

func (t *Type_1cf6b4f9) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Unk_281a24e, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.Unk_db52f49, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.FlWeatherDuration, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.PathWeatherIntensity, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_6da77a8, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.Unk_e71f9c, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+184, &t.Unk_e71f9d, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+240, &t.Unk_78feafe, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+248, &t.Unk_88e388e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+304, &t.Unk_8a0510f, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+360, &t.Unk_78feaff, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+368, &t.Unk_88e388f, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+424, &t.Unk_8a05110, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+480, &t.PathCloudShadowIntensity, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+536, &t.PathCloudShadowOffset, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+592, &t.Unk_27336d0, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+596, &t.Unk_969434, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+600, &t.FlCloudScale, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+608, &t.TMatTexCloud, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+648, &t.TMatTexCloud2, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+688, &t.Unk_635ca57, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+744, &t.EEffectType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+748, &t.Unk_17e101e, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+752, &t.Unk_61412c1, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+756, &t.FDryCharacters, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+760, &t.Unk_6a3ef4, r, &Options{
		Flags: 1,
		Group: 44,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+776, &t.SnoFogParticle, r, &Options{
		Flags: 1,
		Group: 27,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+780, &t.SnoSound, r, &Options{
		Flags: 1,
		Group: 40,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+784, &t.SnoSkyboxActor, r, &Options{
		Flags: 1,
		Group: 1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+788, &t.ASkyboxYaw, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+792, &t.Unk_d76517b, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+796, &t.FlLightningAltitude, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+804, &t.FlLightningAzimuth, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+816, &t.PathLightningThreshold, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+872, &t.TLightningDelayRange, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+880, &t.FlThunderDelayMax, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+884, &t.SnoLightning, r, &Options{
		Flags: 1,
		Group: 23,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+888, &t.SnoLightningEffectGroup, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+892, &t.SnoThunder, r, &Options{
		Flags: 1,
		Group: 40,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+896, &t.Unk_e62e0c5, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+904, &t.Unk_ef3334, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+960, &t.Unk_5ae444c, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+968, &t.Unk_814d665, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+972, &t.Unk_e4ce904, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+976, &t.Unk_71a7d61, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1032, &t.Unk_c03585a, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1088, &t.Unk_ef9caa7, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1144, &t.Unk_e9c94fc, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1200, &t.Unk_acc170e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1204, &t.Unk_ec2c674, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1208, &t.SnoSkylightTex, r, &Options{
		Flags: 1,
		Group: 44,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1212, &t.Unk_afd6821, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1228, &t.FSunEnabled, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1232, &t.PathSunColor, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1288, &t.PathSunIntensity, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1344, &t.Unk_b9380cd, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1400, &t.Unk_d83665, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1404, &t.Unk_8ff1cc9, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1408, &t.Unk_18f4472, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1464, &t.Unk_71643d4, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1468, &t.Unk_811fc11, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1472, &t.FlSunAltitude, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1476, &t.FlSunAzimuth, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1480, &t.FlSunRadius, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1484, &t.Unk_9e754d5, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1488, &t.Unk_aa224d7, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1492, &t.FlSunShadowAltitude, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1496, &t.FlSunShadowAzimuth, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1500, &t.Unk_daea413, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1504, &t.Unk_2935034, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1560, &t.Unk_83a1898, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1564, &t.Unk_d9887a5, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1568, &t.Unk_736ceb5, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1624, &t.Unk_e10a587, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1680, &t.Unk_dd8bdbd, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1736, &t.Unk_8f0758f, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1792, &t.Unk_f9636b7, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1796, &t.Unk_b8314fd, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1800, &t.Unk_25d0dc9, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1804, &t.Unk_be5b4cf, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1808, &t.Unk_8d2c2a4, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1864, &t.Unk_31b112c, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1920, &t.Unk_526a5cd, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1976, &t.Unk_d9f342f, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1980, &t.Unk_d4be541, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1984, &t.Unk_57c6d0f, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2040, &t.Unk_50a0f21, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2096, &t.Unk_819f917, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2152, &t.Unk_b591c29, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2208, &t.Unk_93f10b1, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2212, &t.Unk_21b97b7, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2216, &t.Unk_1212703, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2220, &t.Unk_58e8ec9, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2224, &t.Unk_65efd73, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2280, &t.Unk_23eac05, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2336, &t.Unk_6cf80a6, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2392, &t.Unk_bf9598, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2448, &t.Unk_902b160, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2504, &t.Unk_958dd92, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2560, &t.Unk_9733493, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2616, &t.Unk_7d9c725, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2672, &t.Unk_4e2cb52, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2728, &t.Unk_a0d23db, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2732, &t.FlBlendApproachSpeed, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2736, &t.TWaveSettings, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2752, &t.SnoOceanMaterial, r, &Options{
		Flags: 1,
		Group: 57,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2756, &t.SnoGroundFogMaterial, r, &Options{
		Flags: 1,
		Group: 57,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2760, &t.PathWaterBloodiness, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2816, &t.Unk_832195e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2872, &t.Unk_d9ac5a8, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2928, &t.FlSSAOOcclusionRadius, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2932, &t.FlSSAOOcclusionStrength, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2936, &t.Unk_6356b81, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2940, &t.Unk_c1c86a0, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2944, &t.Unk_cc9331e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2948, &t.Unk_58f490, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2952, &t.Unk_92befa, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2956, &t.Unk_ff9df7d, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2960, &t.Unk_eebbc0, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2968, &t.Unk_826c03f, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+3024, &t.Unk_31d22a7, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+3028, &t.Unk_a16201, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+3032, &t.Unk_a55216b, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+3088, &t.Unk_166e0e6, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+3092, &t.Unk_bd7f6de, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+3096, &t.Unk_f5b8782, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+3152, &t.Unk_f8bf7fa, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+3156, &t.Unk_b6100e3, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+3160, &t.Unk_62ddb30, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+3164, &t.Unk_202fc35, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+3180, &t.Unk_4e6515c, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+3184, &t.TShoreWaveSettings, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+3216, &t.Unk_ee76094, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+3220, &t.Unk_403296d, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+3224, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_1cf6b4f9) Walk(cb WalkCallback) {
	cb.Do("Unk_281a24e", &t.Unk_281a24e)
	cb.Do("Unk_db52f49", &t.Unk_db52f49)
	cb.Do("FlWeatherDuration", &t.FlWeatherDuration)
	cb.Do("PathWeatherIntensity", &t.PathWeatherIntensity)
	cb.Do("Unk_6da77a8", &t.Unk_6da77a8)
	cb.Do("Unk_e71f9c", &t.Unk_e71f9c)
	cb.Do("Unk_e71f9d", &t.Unk_e71f9d)
	cb.Do("Unk_78feafe", &t.Unk_78feafe)
	cb.Do("Unk_88e388e", &t.Unk_88e388e)
	cb.Do("Unk_8a0510f", &t.Unk_8a0510f)
	cb.Do("Unk_78feaff", &t.Unk_78feaff)
	cb.Do("Unk_88e388f", &t.Unk_88e388f)
	cb.Do("Unk_8a05110", &t.Unk_8a05110)
	cb.Do("PathCloudShadowIntensity", &t.PathCloudShadowIntensity)
	cb.Do("PathCloudShadowOffset", &t.PathCloudShadowOffset)
	cb.Do("Unk_27336d0", &t.Unk_27336d0)
	cb.Do("Unk_969434", &t.Unk_969434)
	cb.Do("FlCloudScale", &t.FlCloudScale)
	cb.Do("TMatTexCloud", &t.TMatTexCloud)
	cb.Do("TMatTexCloud2", &t.TMatTexCloud2)
	cb.Do("Unk_635ca57", &t.Unk_635ca57)
	cb.Do("EEffectType", &t.EEffectType)
	cb.Do("Unk_17e101e", &t.Unk_17e101e)
	cb.Do("Unk_61412c1", &t.Unk_61412c1)
	cb.Do("FDryCharacters", &t.FDryCharacters)
	cb.Do("Unk_6a3ef4", &t.Unk_6a3ef4)
	cb.Do("SnoFogParticle", &t.SnoFogParticle)
	cb.Do("SnoSound", &t.SnoSound)
	cb.Do("SnoSkyboxActor", &t.SnoSkyboxActor)
	cb.Do("ASkyboxYaw", &t.ASkyboxYaw)
	cb.Do("Unk_d76517b", &t.Unk_d76517b)
	cb.Do("FlLightningAltitude", &t.FlLightningAltitude)
	cb.Do("FlLightningAzimuth", &t.FlLightningAzimuth)
	cb.Do("PathLightningThreshold", &t.PathLightningThreshold)
	cb.Do("TLightningDelayRange", &t.TLightningDelayRange)
	cb.Do("FlThunderDelayMax", &t.FlThunderDelayMax)
	cb.Do("SnoLightning", &t.SnoLightning)
	cb.Do("SnoLightningEffectGroup", &t.SnoLightningEffectGroup)
	cb.Do("SnoThunder", &t.SnoThunder)
	cb.Do("Unk_e62e0c5", &t.Unk_e62e0c5)
	cb.Do("Unk_ef3334", &t.Unk_ef3334)
	cb.Do("Unk_5ae444c", &t.Unk_5ae444c)
	cb.Do("Unk_814d665", &t.Unk_814d665)
	cb.Do("Unk_e4ce904", &t.Unk_e4ce904)
	cb.Do("Unk_71a7d61", &t.Unk_71a7d61)
	cb.Do("Unk_c03585a", &t.Unk_c03585a)
	cb.Do("Unk_ef9caa7", &t.Unk_ef9caa7)
	cb.Do("Unk_e9c94fc", &t.Unk_e9c94fc)
	cb.Do("Unk_acc170e", &t.Unk_acc170e)
	cb.Do("Unk_ec2c674", &t.Unk_ec2c674)
	cb.Do("SnoSkylightTex", &t.SnoSkylightTex)
	cb.Do("Unk_afd6821", &t.Unk_afd6821)
	cb.Do("FSunEnabled", &t.FSunEnabled)
	cb.Do("PathSunColor", &t.PathSunColor)
	cb.Do("PathSunIntensity", &t.PathSunIntensity)
	cb.Do("Unk_b9380cd", &t.Unk_b9380cd)
	cb.Do("Unk_d83665", &t.Unk_d83665)
	cb.Do("Unk_8ff1cc9", &t.Unk_8ff1cc9)
	cb.Do("Unk_18f4472", &t.Unk_18f4472)
	cb.Do("Unk_71643d4", &t.Unk_71643d4)
	cb.Do("Unk_811fc11", &t.Unk_811fc11)
	cb.Do("FlSunAltitude", &t.FlSunAltitude)
	cb.Do("FlSunAzimuth", &t.FlSunAzimuth)
	cb.Do("FlSunRadius", &t.FlSunRadius)
	cb.Do("Unk_9e754d5", &t.Unk_9e754d5)
	cb.Do("Unk_aa224d7", &t.Unk_aa224d7)
	cb.Do("FlSunShadowAltitude", &t.FlSunShadowAltitude)
	cb.Do("FlSunShadowAzimuth", &t.FlSunShadowAzimuth)
	cb.Do("Unk_daea413", &t.Unk_daea413)
	cb.Do("Unk_2935034", &t.Unk_2935034)
	cb.Do("Unk_83a1898", &t.Unk_83a1898)
	cb.Do("Unk_d9887a5", &t.Unk_d9887a5)
	cb.Do("Unk_736ceb5", &t.Unk_736ceb5)
	cb.Do("Unk_e10a587", &t.Unk_e10a587)
	cb.Do("Unk_dd8bdbd", &t.Unk_dd8bdbd)
	cb.Do("Unk_8f0758f", &t.Unk_8f0758f)
	cb.Do("Unk_f9636b7", &t.Unk_f9636b7)
	cb.Do("Unk_b8314fd", &t.Unk_b8314fd)
	cb.Do("Unk_25d0dc9", &t.Unk_25d0dc9)
	cb.Do("Unk_be5b4cf", &t.Unk_be5b4cf)
	cb.Do("Unk_8d2c2a4", &t.Unk_8d2c2a4)
	cb.Do("Unk_31b112c", &t.Unk_31b112c)
	cb.Do("Unk_526a5cd", &t.Unk_526a5cd)
	cb.Do("Unk_d9f342f", &t.Unk_d9f342f)
	cb.Do("Unk_d4be541", &t.Unk_d4be541)
	cb.Do("Unk_57c6d0f", &t.Unk_57c6d0f)
	cb.Do("Unk_50a0f21", &t.Unk_50a0f21)
	cb.Do("Unk_819f917", &t.Unk_819f917)
	cb.Do("Unk_b591c29", &t.Unk_b591c29)
	cb.Do("Unk_93f10b1", &t.Unk_93f10b1)
	cb.Do("Unk_21b97b7", &t.Unk_21b97b7)
	cb.Do("Unk_1212703", &t.Unk_1212703)
	cb.Do("Unk_58e8ec9", &t.Unk_58e8ec9)
	cb.Do("Unk_65efd73", &t.Unk_65efd73)
	cb.Do("Unk_23eac05", &t.Unk_23eac05)
	cb.Do("Unk_6cf80a6", &t.Unk_6cf80a6)
	cb.Do("Unk_bf9598", &t.Unk_bf9598)
	cb.Do("Unk_902b160", &t.Unk_902b160)
	cb.Do("Unk_958dd92", &t.Unk_958dd92)
	cb.Do("Unk_9733493", &t.Unk_9733493)
	cb.Do("Unk_7d9c725", &t.Unk_7d9c725)
	cb.Do("Unk_4e2cb52", &t.Unk_4e2cb52)
	cb.Do("Unk_a0d23db", &t.Unk_a0d23db)
	cb.Do("FlBlendApproachSpeed", &t.FlBlendApproachSpeed)
	cb.Do("TWaveSettings", &t.TWaveSettings)
	cb.Do("SnoOceanMaterial", &t.SnoOceanMaterial)
	cb.Do("SnoGroundFogMaterial", &t.SnoGroundFogMaterial)
	cb.Do("PathWaterBloodiness", &t.PathWaterBloodiness)
	cb.Do("Unk_832195e", &t.Unk_832195e)
	cb.Do("Unk_d9ac5a8", &t.Unk_d9ac5a8)
	cb.Do("FlSSAOOcclusionRadius", &t.FlSSAOOcclusionRadius)
	cb.Do("FlSSAOOcclusionStrength", &t.FlSSAOOcclusionStrength)
	cb.Do("Unk_6356b81", &t.Unk_6356b81)
	cb.Do("Unk_c1c86a0", &t.Unk_c1c86a0)
	cb.Do("Unk_cc9331e", &t.Unk_cc9331e)
	cb.Do("Unk_58f490", &t.Unk_58f490)
	cb.Do("Unk_92befa", &t.Unk_92befa)
	cb.Do("Unk_ff9df7d", &t.Unk_ff9df7d)
	cb.Do("Unk_eebbc0", &t.Unk_eebbc0)
	cb.Do("Unk_826c03f", &t.Unk_826c03f)
	cb.Do("Unk_31d22a7", &t.Unk_31d22a7)
	cb.Do("Unk_a16201", &t.Unk_a16201)
	cb.Do("Unk_a55216b", &t.Unk_a55216b)
	cb.Do("Unk_166e0e6", &t.Unk_166e0e6)
	cb.Do("Unk_bd7f6de", &t.Unk_bd7f6de)
	cb.Do("Unk_f5b8782", &t.Unk_f5b8782)
	cb.Do("Unk_f8bf7fa", &t.Unk_f8bf7fa)
	cb.Do("Unk_b6100e3", &t.Unk_b6100e3)
	cb.Do("Unk_62ddb30", &t.Unk_62ddb30)
	cb.Do("Unk_202fc35", &t.Unk_202fc35)
	cb.Do("Unk_4e6515c", &t.Unk_4e6515c)
	cb.Do("TShoreWaveSettings", &t.TShoreWaveSettings)
	cb.Do("Unk_ee76094", &t.Unk_ee76094)
	cb.Do("Unk_403296d", &t.Unk_403296d)
}

type Type_1d15fe71 struct {
	// Inherits BuffCallbackBase
	// Inherits PolymorphicBase
	DwType                DT_UINT
	DwPad                 DT_UINT
	SnoTriggerEffectGroup DT_SNO
	ArConditions          DT_POLYMORPHIC_VARIABLEARRAY[*DT_INT64]
}

func (t *Type_1d15fe71) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoTriggerEffectGroup, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ArConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_1d15fe71) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("SnoTriggerEffectGroup", &t.SnoTriggerEffectGroup)
	cb.Do("ArConditions", &t.ArConditions)
}

type ShoreWaveSettings struct {
	Unk_4d19a78       DT_FLOAT
	FlShoreSpeed      DT_FLOAT
	FlShoreMultiplier DT_FLOAT
	FlWaveSpeed       DT_FLOAT
	FlLineWidth       DT_FLOAT
	Unk_d8d6cc9       DT_FLOAT
	Unk_503df13       DT_RANGE[*DT_FLOAT]
}

func (t *ShoreWaveSettings) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Unk_4d19a78, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.FlShoreSpeed, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.FlShoreMultiplier, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.FlWaveSpeed, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.FlLineWidth, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.Unk_d8d6cc9, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_503df13, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ShoreWaveSettings) Walk(cb WalkCallback) {
	cb.Do("Unk_4d19a78", &t.Unk_4d19a78)
	cb.Do("FlShoreSpeed", &t.FlShoreSpeed)
	cb.Do("FlShoreMultiplier", &t.FlShoreMultiplier)
	cb.Do("FlWaveSpeed", &t.FlWaveSpeed)
	cb.Do("FlLineWidth", &t.FlLineWidth)
	cb.Do("Unk_d8d6cc9", &t.Unk_d8d6cc9)
	cb.Do("Unk_503df13", &t.Unk_503df13)
}

type MailDeleteMessage struct {
	THeader RequiredMessageHeader
	IdMail  Type_f5ac91bb
}

func (t *MailDeleteMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.IdMail, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *MailDeleteMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("IdMail", &t.IdMail)
}

type DebugForceSpawnMessage struct {
	THeader       RequiredMessageHeader
	IdLevelArea   DT_INT
	GbidType      DT_GBID
	IdSpawnMarker DT_INT
	NGroupIndex   DT_INT
	EGroupType    DT_INT
}

func (t *DebugForceSpawnMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.IdLevelArea, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.GbidType, r, &Options{
		Flags: 1,
		Group: 20,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.IdSpawnMarker, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.NGroupIndex, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.EGroupType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+36, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *DebugForceSpawnMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("IdLevelArea", &t.IdLevelArea)
	cb.Do("GbidType", &t.GbidType)
	cb.Do("IdSpawnMarker", &t.IdSpawnMarker)
	cb.Do("NGroupIndex", &t.NGroupIndex)
	cb.Do("EGroupType", &t.EGroupType)
}

type ClanBankDepositMessage struct {
	THeader         RequiredRequestMessageHeader
	AnnItem         DT_ACD_NETWORK_NAME
	NBankTab        DT_INT
	ECurrencyType   DT_ENUM
	NCurrencyAmount DT_INT64
}

func (t *ClanBankDepositMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.AnnItem, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.NBankTab, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.ECurrencyType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.NCurrencyAmount, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ClanBankDepositMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("AnnItem", &t.AnnItem)
	cb.Do("NBankTab", &t.NBankTab)
	cb.Do("ECurrencyType", &t.ECurrencyType)
	cb.Do("NCurrencyAmount", &t.NCurrencyAmount)
}

type Type_1d7ac8ba struct {
	SzName      DT_CSTRING[*DT_BYTE]
	Unk_c5f0201 DT_INT
	NID         DT_INT
}

func (t *Type_1d7ac8ba) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SzName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_c5f0201, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.NID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_1d7ac8ba) Walk(cb WalkCallback) {
	cb.Do("SzName", &t.SzName)
	cb.Do("Unk_c5f0201", &t.Unk_c5f0201)
	cb.Do("NID", &t.NID)
}

type Type_1d7c3cec struct {
	SnoShader DT_SNO
}

func (t *Type_1d7c3cec) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoShader, r, &Options{
		Flags: 1,
		Group: 37,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+4, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_1d7c3cec) Walk(cb WalkCallback) {
	cb.Do("SnoShader", &t.SnoShader)
}

type GlobalFontColor struct {
	SzToken   DT_UINT
	RgbaColor DT_RGBACOLOR
}

func (t *GlobalFontColor) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SzToken, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.RgbaColor, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *GlobalFontColor) Walk(cb WalkCallback) {
	cb.Do("SzToken", &t.SzToken)
	cb.Do("RgbaColor", &t.RgbaColor)
}

type Type_1dd81463 struct {
	Unk_ef323d8        DT_CSTRING[*DT_BYTE]
	EHotkey            DT_ENUM
	Unk_8c498b5        DT_ENUM
	EFixedKey          DT_ENUM
	Unk_ccd9967        DT_CSTRING[*DT_BYTE]
	Unk_a2157e8        DT_CSTRING[*DT_BYTE]
	SzOnController     DT_CSTRING[*DT_BYTE]
	Unk_587374f        DT_CSTRING[*DT_BYTE]
	Unk_42b05a7        DT_CSTRING[*DT_BYTE]
	Unk_f887f54        DT_SNO
	BAllowsHeldRepeats DT_INT
	Unk_9a8825c        DT_FLOAT
}

func (t *Type_1dd81463) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Unk_ef323d8, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.EHotkey, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.Unk_8c498b5, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.EFixedKey, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.Unk_ccd9967, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.Unk_a2157e8, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.SzOnController, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.Unk_587374f, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.Unk_42b05a7, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.Unk_f887f54, r, &Options{
		Flags: 1,
		Group: 40,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+116, &t.BAllowsHeldRepeats, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.Unk_9a8825c, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+128, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_1dd81463) Walk(cb WalkCallback) {
	cb.Do("Unk_ef323d8", &t.Unk_ef323d8)
	cb.Do("EHotkey", &t.EHotkey)
	cb.Do("Unk_8c498b5", &t.Unk_8c498b5)
	cb.Do("EFixedKey", &t.EFixedKey)
	cb.Do("Unk_ccd9967", &t.Unk_ccd9967)
	cb.Do("Unk_a2157e8", &t.Unk_a2157e8)
	cb.Do("SzOnController", &t.SzOnController)
	cb.Do("Unk_587374f", &t.Unk_587374f)
	cb.Do("Unk_42b05a7", &t.Unk_42b05a7)
	cb.Do("Unk_f887f54", &t.Unk_f887f54)
	cb.Do("BAllowsHeldRepeats", &t.BAllowsHeldRepeats)
	cb.Do("Unk_9a8825c", &t.Unk_9a8825c)
}

type UIMargins struct {
	FlLeft   DT_FLOAT
	FlTop    DT_FLOAT
	FlRight  DT_FLOAT
	FlBottom DT_FLOAT
}

func (t *UIMargins) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.FlLeft, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.FlTop, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.FlRight, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.FlBottom, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *UIMargins) Walk(cb WalkCallback) {
	cb.Do("FlLeft", &t.FlLeft)
	cb.Do("FlTop", &t.FlTop)
	cb.Do("FlRight", &t.FlRight)
	cb.Do("FlBottom", &t.FlBottom)
}

type ItemAffixAttribute struct {
	BIgnoreLegendaryScaling DT_INT
	Unk_288eecd             DT_INT
	TAttribute              AttributeSpecifier
}

func (t *ItemAffixAttribute) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.BIgnoreLegendaryScaling, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.Unk_288eecd, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.TAttribute, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+88, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ItemAffixAttribute) Walk(cb WalkCallback) {
	cb.Do("BIgnoreLegendaryScaling", &t.BIgnoreLegendaryScaling)
	cb.Do("Unk_288eecd", &t.Unk_288eecd)
	cb.Do("TAttribute", &t.TAttribute)
}

type PlayHitEffectMessage struct {
	THeader     RequiredMessageHeader
	Ann         DT_ACD_NETWORK_NAME
	AnnAttacker DT_ACD_NETWORK_NAME
	EDamageType DT_ENUM
}

func (t *PlayHitEffectMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Ann, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.AnnAttacker, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.EDamageType, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+36, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PlayHitEffectMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("Ann", &t.Ann)
	cb.Do("AnnAttacker", &t.AnnAttacker)
	cb.Do("EDamageType", &t.EDamageType)
}

type UIWindowStyle struct {
	// Inherits UIControlStyle
	// Inherits PolymorphicBase
	DwType                    DT_UINT
	DwPad                     DT_UINT
	HParentStyle              UIControlHandle
	Unk_441f783               DT_INT64
	M_eHasModifiedPowerTagMap DT_TAGMAP[*DT_ENUM]
	TConsoleInput             UIControlConsoleInput
	Unk_b4f614c               DT_TAGMAP[*DT_ENUM]
}

func (t *UIWindowStyle) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.HParentStyle, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_441f783, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.M_eHasModifiedPowerTagMap, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.TConsoleInput, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.Unk_b4f614c, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+80, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *UIWindowStyle) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("HParentStyle", &t.HParentStyle)
	cb.Do("Unk_441f783", &t.Unk_441f783)
	cb.Do("M_eHasModifiedPowerTagMap", &t.M_eHasModifiedPowerTagMap)
	cb.Do("TConsoleInput", &t.TConsoleInput)
	cb.Do("Unk_b4f614c", &t.Unk_b4f614c)
}

type TriggerEventShadow struct {
	// Inherits TriggerEvent
	// Inherits PolymorphicBase
	DwType           DT_UINT
	DwPad            DT_UINT
	TConditions      TriggerConditions
	FGenerated       DT_INT
	Unk_6cba752      DT_INT
	DwParentActorID  DT_UINT
	DwTriggerFlags   DT_UINT
	DwTriggerFlagsEx DT_UINT
	BShadow          DT_INT
}

func (t *TriggerEventShadow) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.FGenerated, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_6cba752, r, &Options{Flags: 16}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.DwParentActorID, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.DwTriggerFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.DwTriggerFlagsEx, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.BShadow, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+96, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TriggerEventShadow) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("TConditions", &t.TConditions)
	cb.Do("FGenerated", &t.FGenerated)
	cb.Do("Unk_6cba752", &t.Unk_6cba752)
	cb.Do("DwParentActorID", &t.DwParentActorID)
	cb.Do("DwTriggerFlags", &t.DwTriggerFlags)
	cb.Do("DwTriggerFlagsEx", &t.DwTriggerFlagsEx)
	cb.Do("BShadow", &t.BShadow)
}

type GameTestingCharacterSamplingStartMessage struct {
	THeader    RequiredMessageHeader
	SzArmorSet DT_CHARARRAY
	SzHead     DT_CHARARRAY
	SzTorso    DT_CHARARRAY
	SzFeet     DT_CHARARRAY
	SzHands    DT_CHARARRAY
	SzLegs     DT_CHARARRAY
	SzBack     DT_CHARARRAY
	SnoClass   DT_SNO
	BFemale    DT_INT
}

func (t *GameTestingCharacterSamplingStartMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SzArmorSet, r, &Options{
		ArrayLength: 50,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+66, &t.SzHead, r, &Options{
		ArrayLength: 50,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+116, &t.SzTorso, r, &Options{
		ArrayLength: 50,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+166, &t.SzFeet, r, &Options{
		ArrayLength: 50,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+216, &t.SzHands, r, &Options{
		ArrayLength: 50,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+266, &t.SzLegs, r, &Options{
		ArrayLength: 50,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+316, &t.SzBack, r, &Options{
		ArrayLength: 50,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+368, &t.SnoClass, r, &Options{
		Flags: 1,
		Group: 74,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+372, &t.BFemale, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+376, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *GameTestingCharacterSamplingStartMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("SzArmorSet", &t.SzArmorSet)
	cb.Do("SzHead", &t.SzHead)
	cb.Do("SzTorso", &t.SzTorso)
	cb.Do("SzFeet", &t.SzFeet)
	cb.Do("SzHands", &t.SzHands)
	cb.Do("SzLegs", &t.SzLegs)
	cb.Do("SzBack", &t.SzBack)
	cb.Do("SnoClass", &t.SnoClass)
	cb.Do("BFemale", &t.BFemale)
}

type Type_1eb0f5e6 struct {
	// Inherits TriggerEventRangedDuration
	// Inherits TriggerEvent
	// Inherits PolymorphicBase
	DwType           DT_UINT
	TConditions      TriggerConditions
	FGenerated       DT_INT
	Unk_6cba752      DT_INT
	DwParentActorID  DT_UINT
	TDuration        DT_FLOAT
	DwTriggerFlags   DT_UINT
	DwTriggerFlagsEx DT_UINT
	TCleanup         TriggerCleanup
	Unk_49e9257      DT_INT
	Unk_5490979      DT_INT
	DwPad            DT_UINT
}

func (t *Type_1eb0f5e6) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.FGenerated, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_6cba752, r, &Options{Flags: 16}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.DwParentActorID, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.TDuration, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.DwTriggerFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.DwTriggerFlagsEx, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.TCleanup, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+116, &t.Unk_49e9257, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.Unk_5490979, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+124, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+128, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_1eb0f5e6) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("TConditions", &t.TConditions)
	cb.Do("FGenerated", &t.FGenerated)
	cb.Do("Unk_6cba752", &t.Unk_6cba752)
	cb.Do("DwParentActorID", &t.DwParentActorID)
	cb.Do("TDuration", &t.TDuration)
	cb.Do("DwTriggerFlags", &t.DwTriggerFlags)
	cb.Do("DwTriggerFlagsEx", &t.DwTriggerFlagsEx)
	cb.Do("TCleanup", &t.TCleanup)
	cb.Do("Unk_49e9257", &t.Unk_49e9257)
	cb.Do("Unk_5490979", &t.Unk_5490979)
	cb.Do("DwPad", &t.DwPad)
}

type DynamicMovementData struct {
	THeader     GBIDHeader
	Unk_e726cf1 DT_RANGE[*DT_FLOAT]
	Unk_a1e03a6 DT_RANGE[*DT_FLOAT]
	Unk_2a8932  DT_RANGE[*DT_FLOAT]
	Unk_94d0477 DT_RANGE[*DT_FLOAT]
	Unk_e466a88 DT_FLOAT
	Unk_78d1051 DT_FLOAT
	Unk_761cd11 DT_FLOAT
	Unk_402fe97 DT_FLOAT
	Unk_30b0cd2 DT_FLOAT
}

func (t *DynamicMovementData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+260, &t.Unk_e726cf1, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+268, &t.Unk_a1e03a6, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+276, &t.Unk_2a8932, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+284, &t.Unk_94d0477, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+292, &t.Unk_e466a88, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+296, &t.Unk_78d1051, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+300, &t.Unk_761cd11, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+304, &t.Unk_402fe97, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+308, &t.Unk_30b0cd2, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+312, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *DynamicMovementData) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("Unk_e726cf1", &t.Unk_e726cf1)
	cb.Do("Unk_a1e03a6", &t.Unk_a1e03a6)
	cb.Do("Unk_2a8932", &t.Unk_2a8932)
	cb.Do("Unk_94d0477", &t.Unk_94d0477)
	cb.Do("Unk_e466a88", &t.Unk_e466a88)
	cb.Do("Unk_78d1051", &t.Unk_78d1051)
	cb.Do("Unk_761cd11", &t.Unk_761cd11)
	cb.Do("Unk_402fe97", &t.Unk_402fe97)
	cb.Do("Unk_30b0cd2", &t.Unk_30b0cd2)
}

type AIStateDebugSetStateMessage struct {
	THeader  RequiredMessageHeader
	AnnActor DT_ACD_NETWORK_NAME
	BEnabled DT_INT
}

func (t *AIStateDebugSetStateMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.AnnActor, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.BEnabled, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+28, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *AIStateDebugSetStateMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("AnnActor", &t.AnnActor)
	cb.Do("BEnabled", &t.BEnabled)
}

type Type_1f34a5e5 struct {
	TComponentId     DT_UINT
	ArHelmComponents DT_VARIABLEARRAY[*DT_UINT]
}

func (t *Type_1f34a5e5) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.TComponentId, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.ArHelmComponents, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_1f34a5e5) Walk(cb WalkCallback) {
	cb.Do("TComponentId", &t.TComponentId)
	cb.Do("ArHelmComponents", &t.ArHelmComponents)
}

type SignGizmoData struct {
	// Inherits ActorGizmoData
	// Inherits PolymorphicBase
	DwType                       DT_UINT
	DwPad                        DT_UINT
	FDisableNonFriendlyOperation DT_INT
	FWalkToCenter                DT_INT
	FGizmoStartsDisabled         DT_INT
	FUseStringListName           DT_INT
	FForceMinimapIcon            DT_INT
	FlOperationRadius            DT_FLOAT
	Unk_d0b1df5                  DT_FLOAT
	FlGizmoUseTime               DT_FLOAT
	SnoChannelingEffect          DT_SNO
	Unk_2767229                  DT_INT
	FGizmoShowProgressBar        DT_INT
	Unk_6d9ebe1                  DT_INT
	Unk_5456245                  DT_INT
	Unk_af5815a                  DT_INT
	SnoOnClickEffect             DT_SNO
	SnoPickedUpEffect            DT_SNO
	SnoDropOnGroundEffect        DT_SNO
	TConditionData               GizmoConditionData
	SnoPowerOperator             DT_SNO
	SnoPowerOperate              DT_SNO
	SnoPowerOperatorActive       DT_SNO
	SnoPowerOperateActive        DT_SNO
	Unk_359810e                  DT_INT
	NCooldown                    DT_UINT
	Unk_9c8478e                  DT_UINT
	Unk_d45ed2d                  DT_INT
	Unk_f6b20b7                  DT_INT
	Unk_54513b8                  DT_INT
	Unk_fd1f378                  DT_UINT
	Unk_487c14                   DT_UINT
	Unk_87f2609                  DT_UINT
	Unk_158eb4f                  DT_FLOAT
	Unk_ab58cd3                  DT_ENUM
	Unk_91a3966                  DT_UINT
	Unk_25312e5                  DT_UINT
	Unk_4be4371                  DT_INT
	ESignType                    DT_ENUM
	SnoInteractSound             DT_SNO
	TDestination                 MarkerHandle
	SnoDisembodiedVoice          DT_SNO
	ESignMaterial                DT_ENUM
	SnoLore                      DT_SNO
	Unk_13742cd                  UIImageHandleReference
}

func (t *SignGizmoData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.FDisableNonFriendlyOperation, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.FWalkToCenter, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.FGizmoStartsDisabled, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.FUseStringListName, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.FForceMinimapIcon, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.FlOperationRadius, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.Unk_d0b1df5, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.FlGizmoUseTime, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.SnoChannelingEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.Unk_2767229, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.FGizmoShowProgressBar, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+60, &t.Unk_6d9ebe1, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.Unk_5456245, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.Unk_af5815a, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.SnoOnClickEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.SnoPickedUpEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.SnoDropOnGroundEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.TConditionData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.SnoPowerOperator, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.SnoPowerOperate, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.SnoPowerOperatorActive, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+100, &t.SnoPowerOperateActive, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+104, &t.Unk_359810e, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+108, &t.NCooldown, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.Unk_9c8478e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+116, &t.Unk_d45ed2d, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.Unk_f6b20b7, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+124, &t.Unk_54513b8, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.Unk_fd1f378, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+132, &t.Unk_487c14, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+136, &t.Unk_87f2609, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+140, &t.Unk_158eb4f, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+144, &t.Unk_ab58cd3, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+148, &t.Unk_91a3966, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+152, &t.Unk_25312e5, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+156, &t.Unk_4be4371, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+160, &t.ESignType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+164, &t.SnoInteractSound, r, &Options{
		Flags: 1,
		Group: 40,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+168, &t.TDestination, r, &Options{Flags: 513}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+176, &t.SnoDisembodiedVoice, r, &Options{
		Flags: 1,
		Group: 12,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+180, &t.ESignMaterial, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+184, &t.SnoLore, r, &Options{
		Flags: 1,
		Group: 59,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+188, &t.Unk_13742cd, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+192, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *SignGizmoData) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("FDisableNonFriendlyOperation", &t.FDisableNonFriendlyOperation)
	cb.Do("FWalkToCenter", &t.FWalkToCenter)
	cb.Do("FGizmoStartsDisabled", &t.FGizmoStartsDisabled)
	cb.Do("FUseStringListName", &t.FUseStringListName)
	cb.Do("FForceMinimapIcon", &t.FForceMinimapIcon)
	cb.Do("FlOperationRadius", &t.FlOperationRadius)
	cb.Do("Unk_d0b1df5", &t.Unk_d0b1df5)
	cb.Do("FlGizmoUseTime", &t.FlGizmoUseTime)
	cb.Do("SnoChannelingEffect", &t.SnoChannelingEffect)
	cb.Do("Unk_2767229", &t.Unk_2767229)
	cb.Do("FGizmoShowProgressBar", &t.FGizmoShowProgressBar)
	cb.Do("Unk_6d9ebe1", &t.Unk_6d9ebe1)
	cb.Do("Unk_5456245", &t.Unk_5456245)
	cb.Do("Unk_af5815a", &t.Unk_af5815a)
	cb.Do("SnoOnClickEffect", &t.SnoOnClickEffect)
	cb.Do("SnoPickedUpEffect", &t.SnoPickedUpEffect)
	cb.Do("SnoDropOnGroundEffect", &t.SnoDropOnGroundEffect)
	cb.Do("TConditionData", &t.TConditionData)
	cb.Do("SnoPowerOperator", &t.SnoPowerOperator)
	cb.Do("SnoPowerOperate", &t.SnoPowerOperate)
	cb.Do("SnoPowerOperatorActive", &t.SnoPowerOperatorActive)
	cb.Do("SnoPowerOperateActive", &t.SnoPowerOperateActive)
	cb.Do("Unk_359810e", &t.Unk_359810e)
	cb.Do("NCooldown", &t.NCooldown)
	cb.Do("Unk_9c8478e", &t.Unk_9c8478e)
	cb.Do("Unk_d45ed2d", &t.Unk_d45ed2d)
	cb.Do("Unk_f6b20b7", &t.Unk_f6b20b7)
	cb.Do("Unk_54513b8", &t.Unk_54513b8)
	cb.Do("Unk_fd1f378", &t.Unk_fd1f378)
	cb.Do("Unk_487c14", &t.Unk_487c14)
	cb.Do("Unk_87f2609", &t.Unk_87f2609)
	cb.Do("Unk_158eb4f", &t.Unk_158eb4f)
	cb.Do("Unk_ab58cd3", &t.Unk_ab58cd3)
	cb.Do("Unk_91a3966", &t.Unk_91a3966)
	cb.Do("Unk_25312e5", &t.Unk_25312e5)
	cb.Do("Unk_4be4371", &t.Unk_4be4371)
	cb.Do("ESignType", &t.ESignType)
	cb.Do("SnoInteractSound", &t.SnoInteractSound)
	cb.Do("TDestination", &t.TDestination)
	cb.Do("SnoDisembodiedVoice", &t.SnoDisembodiedVoice)
	cb.Do("ESignMaterial", &t.ESignMaterial)
	cb.Do("SnoLore", &t.SnoLore)
	cb.Do("Unk_13742cd", &t.Unk_13742cd)
}

type Type_1f843277 struct {
	THardpointLink    HardpointLink
	Unk_2cbb1b0       DT_UINT
	ETargetType       DT_ENUM
	DwAttachedActorID DT_UINT
}

func (t *Type_1f843277) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THardpointLink, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.Unk_2cbb1b0, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.ETargetType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.DwAttachedActorID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+20, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_1f843277) Walk(cb WalkCallback) {
	cb.Do("THardpointLink", &t.THardpointLink)
	cb.Do("Unk_2cbb1b0", &t.Unk_2cbb1b0)
	cb.Do("ETargetType", &t.ETargetType)
	cb.Do("DwAttachedActorID", &t.DwAttachedActorID)
}

type GameTestingRTCSamplingStartMessage struct {
	THeader        RequiredMessageHeader
	SnoEffectGroup DT_SNO
	SnoWorld       DT_SNO
	SnoSubzone     DT_SNO
	SnoScene       DT_SNO
	SnoQuest       DT_SNO
	SzTileSet      DT_CHARARRAY
	SzMarker       DT_CHARARRAY
}

func (t *GameTestingRTCSamplingStartMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoEffectGroup, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.SnoWorld, r, &Options{
		Flags: 1,
		Group: 48,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SnoSubzone, r, &Options{
		Flags: 1,
		Group: 80,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.SnoScene, r, &Options{
		Flags: 1,
		Group: 33,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.SnoQuest, r, &Options{
		Flags: 1,
		Group: 31,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.SzTileSet, r, &Options{
		ArrayLength: 128,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+164, &t.SzMarker, r, &Options{
		ArrayLength: 128,
		Flags:       1,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+292, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *GameTestingRTCSamplingStartMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("SnoEffectGroup", &t.SnoEffectGroup)
	cb.Do("SnoWorld", &t.SnoWorld)
	cb.Do("SnoSubzone", &t.SnoSubzone)
	cb.Do("SnoScene", &t.SnoScene)
	cb.Do("SnoQuest", &t.SnoQuest)
	cb.Do("SzTileSet", &t.SzTileSet)
	cb.Do("SzMarker", &t.SzMarker)
}

type EmitterPointData struct {
	// Inherits EmitterDataBase
	// Inherits PolymorphicBase
	DwType DT_UINT
	DwPad  DT_UINT
}

func (t *EmitterPointData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *EmitterPointData) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
}

type IKBoneChainBase struct {
	// Inherits PolymorphicBase
	DwType    DT_UINT
	DwPad     DT_UINT
	EIKLimb   DT_ENUM
	EIKTarget DT_ENUM
	PtIKBones DT_VARIABLEARRAY[*IKBone]
}

func (t *IKBoneChainBase) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.EIKLimb, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.EIKTarget, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.PtIKBones, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+40, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *IKBoneChainBase) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("EIKLimb", &t.EIKLimb)
	cb.Do("EIKTarget", &t.EIKTarget)
	cb.Do("PtIKBones", &t.PtIKBones)
}

type CollisionShape struct {
	DwFlags           DT_UINT
	EType             DT_ENUM
	EMaterial         DT_ENUM
	NDegrade          DT_INT
	FlDensityFactor   DT_FLOAT
	FlExplosionFactor DT_FLOAT
	FlVelocityFactor  DT_FLOAT
	PPolytopeData     DT_VARIABLEARRAY[*PolytopeData]
	Wp1               DT_VECTOR3D
	Wp2               DT_VECTOR3D
	FlRadius          DT_FLOAT
}

func (t *CollisionShape) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.DwFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.EType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.EMaterial, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.NDegrade, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.FlDensityFactor, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.FlExplosionFactor, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.FlVelocityFactor, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.PPolytopeData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.Wp1, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+60, &t.Wp2, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.FlRadius, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+80, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *CollisionShape) Walk(cb WalkCallback) {
	cb.Do("DwFlags", &t.DwFlags)
	cb.Do("EType", &t.EType)
	cb.Do("EMaterial", &t.EMaterial)
	cb.Do("NDegrade", &t.NDegrade)
	cb.Do("FlDensityFactor", &t.FlDensityFactor)
	cb.Do("FlExplosionFactor", &t.FlExplosionFactor)
	cb.Do("FlVelocityFactor", &t.FlVelocityFactor)
	cb.Do("PPolytopeData", &t.PPolytopeData)
	cb.Do("Wp1", &t.Wp1)
	cb.Do("Wp2", &t.Wp2)
	cb.Do("FlRadius", &t.FlRadius)
}

type Type_204df95f struct {
	// Inherits PowerConditionBase
	// Inherits PolymorphicBase
	DwType   DT_UINT
	BInverse DT_INT
	DwPad    DT_UINT
	ESubject DT_ENUM
}

func (t *Type_204df95f) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BInverse, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ESubject, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_204df95f) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("BInverse", &t.BInverse)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("ESubject", &t.ESubject)
}

type SharedChildFile struct {
	SzMD5 DT_CHARARRAY
}

func (t *SharedChildFile) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SzMD5, r, &Options{
		ArrayLength: 50,
		Flags:       1,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+50, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *SharedChildFile) Walk(cb WalkCallback) {
	cb.Do("SzMD5", &t.SzMD5)
}

type ScriptEventParamReputation struct {
	// Inherits ScriptEventParamBase
	// Inherits PolymorphicBase
	DwType        DT_UINT
	EParamType    DT_ENUM
	DwPad         DT_UINT
	SnoReputation DT_SNO
}

func (t *ScriptEventParamReputation) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.EParamType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SnoReputation, r, &Options{
		Flags: 1,
		Group: 105,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ScriptEventParamReputation) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("EParamType", &t.EParamType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("SnoReputation", &t.SnoReputation)
}

type DebugDataRequestMessage struct {
	THeader          RequiredMessageHeader
	NType            DT_INT
	ArParams         DT_FIXEDARRAY[*DT_INT]
	ArOptionalParams DT_FIXEDARRAY[*Type_b780b821]
}

func (t *DebugDataRequestMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.NType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.ArParams, r, &Options{
		ArrayLength: 2,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.ArOptionalParams, r, &Options{
		ArrayLength: 10,
		Flags:       8,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+1632, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *DebugDataRequestMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("NType", &t.NType)
	cb.Do("ArParams", &t.ArParams)
	cb.Do("ArOptionalParams", &t.ArOptionalParams)
}

type Type_20a14f36 struct {
	// Inherits TriggerEvent
	// Inherits PolymorphicBase
	DwType          DT_UINT
	DwPad           DT_UINT
	TConditions     TriggerConditions
	FGenerated      DT_INT
	Unk_6cba752     DT_INT
	DwParentActorID DT_UINT
}

func (t *Type_20a14f36) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.FGenerated, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_6cba752, r, &Options{Flags: 16}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.DwParentActorID, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+80, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_20a14f36) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("TConditions", &t.TConditions)
	cb.Do("FGenerated", &t.FGenerated)
	cb.Do("Unk_6cba752", &t.Unk_6cba752)
	cb.Do("DwParentActorID", &t.DwParentActorID)
}

type TriggerEventShadowDuration struct {
	// Inherits TriggerEventRangedDuration
	// Inherits TriggerEvent
	// Inherits PolymorphicBase
	DwType           DT_UINT
	TConditions      TriggerConditions
	FGenerated       DT_INT
	Unk_6cba752      DT_INT
	DwParentActorID  DT_UINT
	TDuration        DT_FLOAT
	DwTriggerFlags   DT_UINT
	DwTriggerFlagsEx DT_UINT
	TCleanup         TriggerCleanup
	Unk_49e9257      DT_INT
	Unk_5490979      DT_INT
	DwPad            DT_UINT
	BShadow          DT_INT
	Unk_b34a8b4      DT_INT
}

func (t *TriggerEventShadowDuration) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.FGenerated, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_6cba752, r, &Options{Flags: 16}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.DwParentActorID, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.TDuration, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.DwTriggerFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.DwTriggerFlagsEx, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.TCleanup, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+116, &t.Unk_49e9257, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.Unk_5490979, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+124, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.BShadow, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+132, &t.Unk_b34a8b4, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+136, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TriggerEventShadowDuration) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("TConditions", &t.TConditions)
	cb.Do("FGenerated", &t.FGenerated)
	cb.Do("Unk_6cba752", &t.Unk_6cba752)
	cb.Do("DwParentActorID", &t.DwParentActorID)
	cb.Do("TDuration", &t.TDuration)
	cb.Do("DwTriggerFlags", &t.DwTriggerFlags)
	cb.Do("DwTriggerFlagsEx", &t.DwTriggerFlagsEx)
	cb.Do("TCleanup", &t.TCleanup)
	cb.Do("Unk_49e9257", &t.Unk_49e9257)
	cb.Do("Unk_5490979", &t.Unk_5490979)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("BShadow", &t.BShadow)
	cb.Do("Unk_b34a8b4", &t.Unk_b34a8b4)
}

type ScriptFormulaInfo struct {
	TFormula DT_STRING_FORMULA
}

func (t *ScriptFormulaInfo) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.TFormula, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ScriptFormulaInfo) Walk(cb WalkCallback) {
	cb.Do("TFormula", &t.TFormula)
}

type MaterialTextureEntry struct {
	EShaderTex DT_ENUM
	TMatTex    MaterialTexture
}

func (t *MaterialTextureEntry) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.EShaderTex, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.TMatTex, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *MaterialTextureEntry) Walk(cb WalkCallback) {
	cb.Do("EShaderTex", &t.EShaderTex)
	cb.Do("TMatTex", &t.TMatTex)
}

type WeaponExpertiseRank struct {
	Unk_5ec4d3d DT_UINT
}

func (t *WeaponExpertiseRank) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Unk_5ec4d3d, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+4, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *WeaponExpertiseRank) Walk(cb WalkCallback) {
	cb.Do("Unk_5ec4d3d", &t.Unk_5ec4d3d)
}

type StoryboardPlaySoundNode struct {
	// Inherits StoryboardTimePointNode
	// Inherits PolymorphicBase
	DwType   DT_UINT
	FlTime   DT_FLOAT
	DwPad    DT_UINT
	SnoSound DT_SNO
}

func (t *StoryboardPlaySoundNode) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.FlTime, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SnoSound, r, &Options{
		Flags: 1,
		Group: 40,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *StoryboardPlaySoundNode) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("FlTime", &t.FlTime)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("SnoSound", &t.SnoSound)
}

type Type_219037e7 struct {
	// Inherits TriggerEventRangedDuration
	// Inherits TriggerEvent
	// Inherits PolymorphicBase
	DwType           DT_UINT
	TConditions      TriggerConditions
	FGenerated       DT_INT
	Unk_6cba752      DT_INT
	DwParentActorID  DT_UINT
	TDuration        DT_FLOAT
	DwTriggerFlags   DT_UINT
	DwTriggerFlagsEx DT_UINT
	TCleanup         TriggerCleanup
	Unk_49e9257      DT_INT
	Unk_5490979      DT_INT
	DwPad            DT_UINT
	FlNearPlane      DT_FLOAT
	FlFarPlane       DT_FLOAT
	EBlendEasing     DT_ENUM
}

func (t *Type_219037e7) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.FGenerated, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_6cba752, r, &Options{Flags: 16}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.DwParentActorID, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.TDuration, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.DwTriggerFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.DwTriggerFlagsEx, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.TCleanup, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+116, &t.Unk_49e9257, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.Unk_5490979, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+124, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.FlNearPlane, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+132, &t.FlFarPlane, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+136, &t.EBlendEasing, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+144, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_219037e7) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("TConditions", &t.TConditions)
	cb.Do("FGenerated", &t.FGenerated)
	cb.Do("Unk_6cba752", &t.Unk_6cba752)
	cb.Do("DwParentActorID", &t.DwParentActorID)
	cb.Do("TDuration", &t.TDuration)
	cb.Do("DwTriggerFlags", &t.DwTriggerFlags)
	cb.Do("DwTriggerFlagsEx", &t.DwTriggerFlagsEx)
	cb.Do("TCleanup", &t.TCleanup)
	cb.Do("Unk_49e9257", &t.Unk_49e9257)
	cb.Do("Unk_5490979", &t.Unk_5490979)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("FlNearPlane", &t.FlNearPlane)
	cb.Do("FlFarPlane", &t.FlFarPlane)
	cb.Do("EBlendEasing", &t.EBlendEasing)
}

type Type_21df8be8 struct {
	THeader   RequiredMessageHeader
	BComplete DT_INT
}

func (t *Type_21df8be8) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BComplete, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+20, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_21df8be8) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("BComplete", &t.BComplete)
}

type TriggerEventAddObject struct {
	// Inherits TriggerEventRangedDuration
	// Inherits TriggerEvent
	// Inherits PolymorphicBase
	DwType                    DT_UINT
	TConditions               TriggerConditions
	FGenerated                DT_INT
	Unk_6cba752               DT_INT
	DwParentActorID           DT_UINT
	TDuration                 DT_FLOAT
	DwTriggerFlags            DT_UINT
	DwTriggerFlagsEx          DT_UINT
	TCleanup                  TriggerCleanup
	Unk_49e9257               DT_INT
	Unk_5490979               DT_INT
	DwPad                     DT_UINT
	Unk_85269a4               DT_INT
	DwActorID                 DT_UINT
	Snoname                   DT_SNO_NAME
	DwID                      DT_UINT
	THardpointLinks           DT_FIXEDARRAY[*HardpointLink]
	Unk_e7c25e0               DT_ENUM
	SnoPowerEffectParam       DT_SNO
	Unk_beaacd1               DT_ENUM
	Unk_af58166               DT_FLOAT
	Unk_3ed00d7               DT_FLOAT
	DwSeed                    DT_UINT
	FBillboard                DT_INT
	EAddType                  DT_ENUM
	Unk_fbdc534               DT_INT
	FKeepOriginal             DT_INT
	FEnableMovement           DT_INT
	Unk_773852b               DT_INT
	Unk_62ab747               DT_INT
	SnoSubtitles              DT_SNO
	SnoClosedCaptions         DT_SNO
	Unk_1426000               DT_FLOAT
	Unk_cb43646               DT_INT
	FRandomLook               DT_INT
	TLookLink                 LookLink
	FOverrideActorVariant     DT_INT
	Unk_6b8bffc               DT_ENUM
	SnoAnimSetOverride        DT_SNO
	SnoPlayerAnimSetOverrides DT_VARIABLEARRAY[*PlayerAnimSetOverride]
	DwSegmentsStep            DT_UINT
	DwShaderMapOverride       DT_UINT
	NLocalPlayerIndex         DT_INT
	FlScale                   DT_FLOAT
	SzSpawnLocatorName        DT_UINT
	VecScalar                 DT_VECTOR2D
	Transform                 PRTransform
	TEffectGroupHardpointLink HardpointLink
	Unk_c7fa18a               DT_RANGE[*DT_FLOAT]
	IdRActorAttachment        DT_INT
	NPermIndex                DT_INT
	SnoCopyFromMarkerSet      DT_SNO
	Unk_33e4eec               DT_INT
	NMaxAttachments           DT_UINT
	Unk_a45e6bd               DT_FLOAT
	Unk_36bc3de               DT_FLOAT
	NPriority                 DT_INT
	TNPCComponentInstanceData NPCComponentInstanceData
	PtLightInstanceData       DT_VARIABLEARRAY[*LightInstanceData]
}

func (t *TriggerEventAddObject) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.FGenerated, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_6cba752, r, &Options{Flags: 16}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.DwParentActorID, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.TDuration, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.DwTriggerFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.DwTriggerFlagsEx, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.TCleanup, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+116, &t.Unk_49e9257, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.Unk_5490979, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+124, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.Unk_85269a4, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+132, &t.DwActorID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+136, &t.Snoname, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+144, &t.DwID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+148, &t.THardpointLinks, r, &Options{
		ArrayLength: 2,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+164, &t.Unk_e7c25e0, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+168, &t.SnoPowerEffectParam, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+172, &t.Unk_beaacd1, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+176, &t.Unk_af58166, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+180, &t.Unk_3ed00d7, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+184, &t.DwSeed, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+188, &t.FBillboard, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+192, &t.EAddType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+196, &t.Unk_fbdc534, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+200, &t.FKeepOriginal, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+204, &t.FEnableMovement, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+208, &t.Unk_773852b, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+212, &t.Unk_62ab747, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+216, &t.SnoSubtitles, r, &Options{
		Flags: 1,
		Group: 42,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+220, &t.SnoClosedCaptions, r, &Options{
		Flags: 1,
		Group: 42,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+224, &t.Unk_1426000, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+228, &t.Unk_cb43646, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+232, &t.FRandomLook, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+236, &t.TLookLink, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+240, &t.FOverrideActorVariant, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+244, &t.Unk_6b8bffc, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+248, &t.SnoAnimSetOverride, r, &Options{
		Flags: 1,
		Group: 8,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+256, &t.SnoPlayerAnimSetOverrides, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+272, &t.DwSegmentsStep, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+276, &t.DwShaderMapOverride, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+280, &t.NLocalPlayerIndex, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+284, &t.FlScale, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+288, &t.SzSpawnLocatorName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+292, &t.VecScalar, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+300, &t.Transform, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+328, &t.TEffectGroupHardpointLink, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+336, &t.Unk_c7fa18a, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+344, &t.IdRActorAttachment, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+348, &t.NPermIndex, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+352, &t.SnoCopyFromMarkerSet, r, &Options{
		Flags: 513,
		Group: 24,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+356, &t.Unk_33e4eec, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+360, &t.NMaxAttachments, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+364, &t.Unk_a45e6bd, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+368, &t.Unk_36bc3de, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+372, &t.NPriority, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+376, &t.TNPCComponentInstanceData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+416, &t.PtLightInstanceData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+432, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TriggerEventAddObject) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("TConditions", &t.TConditions)
	cb.Do("FGenerated", &t.FGenerated)
	cb.Do("Unk_6cba752", &t.Unk_6cba752)
	cb.Do("DwParentActorID", &t.DwParentActorID)
	cb.Do("TDuration", &t.TDuration)
	cb.Do("DwTriggerFlags", &t.DwTriggerFlags)
	cb.Do("DwTriggerFlagsEx", &t.DwTriggerFlagsEx)
	cb.Do("TCleanup", &t.TCleanup)
	cb.Do("Unk_49e9257", &t.Unk_49e9257)
	cb.Do("Unk_5490979", &t.Unk_5490979)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("Unk_85269a4", &t.Unk_85269a4)
	cb.Do("DwActorID", &t.DwActorID)
	cb.Do("Snoname", &t.Snoname)
	cb.Do("DwID", &t.DwID)
	cb.Do("THardpointLinks", &t.THardpointLinks)
	cb.Do("Unk_e7c25e0", &t.Unk_e7c25e0)
	cb.Do("SnoPowerEffectParam", &t.SnoPowerEffectParam)
	cb.Do("Unk_beaacd1", &t.Unk_beaacd1)
	cb.Do("Unk_af58166", &t.Unk_af58166)
	cb.Do("Unk_3ed00d7", &t.Unk_3ed00d7)
	cb.Do("DwSeed", &t.DwSeed)
	cb.Do("FBillboard", &t.FBillboard)
	cb.Do("EAddType", &t.EAddType)
	cb.Do("Unk_fbdc534", &t.Unk_fbdc534)
	cb.Do("FKeepOriginal", &t.FKeepOriginal)
	cb.Do("FEnableMovement", &t.FEnableMovement)
	cb.Do("Unk_773852b", &t.Unk_773852b)
	cb.Do("Unk_62ab747", &t.Unk_62ab747)
	cb.Do("SnoSubtitles", &t.SnoSubtitles)
	cb.Do("SnoClosedCaptions", &t.SnoClosedCaptions)
	cb.Do("Unk_1426000", &t.Unk_1426000)
	cb.Do("Unk_cb43646", &t.Unk_cb43646)
	cb.Do("FRandomLook", &t.FRandomLook)
	cb.Do("TLookLink", &t.TLookLink)
	cb.Do("FOverrideActorVariant", &t.FOverrideActorVariant)
	cb.Do("Unk_6b8bffc", &t.Unk_6b8bffc)
	cb.Do("SnoAnimSetOverride", &t.SnoAnimSetOverride)
	cb.Do("SnoPlayerAnimSetOverrides", &t.SnoPlayerAnimSetOverrides)
	cb.Do("DwSegmentsStep", &t.DwSegmentsStep)
	cb.Do("DwShaderMapOverride", &t.DwShaderMapOverride)
	cb.Do("NLocalPlayerIndex", &t.NLocalPlayerIndex)
	cb.Do("FlScale", &t.FlScale)
	cb.Do("SzSpawnLocatorName", &t.SzSpawnLocatorName)
	cb.Do("VecScalar", &t.VecScalar)
	cb.Do("Transform", &t.Transform)
	cb.Do("TEffectGroupHardpointLink", &t.TEffectGroupHardpointLink)
	cb.Do("Unk_c7fa18a", &t.Unk_c7fa18a)
	cb.Do("IdRActorAttachment", &t.IdRActorAttachment)
	cb.Do("NPermIndex", &t.NPermIndex)
	cb.Do("SnoCopyFromMarkerSet", &t.SnoCopyFromMarkerSet)
	cb.Do("Unk_33e4eec", &t.Unk_33e4eec)
	cb.Do("NMaxAttachments", &t.NMaxAttachments)
	cb.Do("Unk_a45e6bd", &t.Unk_a45e6bd)
	cb.Do("Unk_36bc3de", &t.Unk_36bc3de)
	cb.Do("NPriority", &t.NPriority)
	cb.Do("TNPCComponentInstanceData", &t.TNPCComponentInstanceData)
	cb.Do("PtLightInstanceData", &t.PtLightInstanceData)
}

type TriggerEventDeleteObject struct {
	// Inherits TriggerEvent
	// Inherits PolymorphicBase
	DwType          DT_UINT
	DwPad           DT_UINT
	TConditions     TriggerConditions
	FGenerated      DT_INT
	Unk_6cba752     DT_INT
	DwParentActorID DT_UINT
	Unk_2b94198     DT_INT
	DwActorID       DT_UINT
	DwID            DT_UINT
}

func (t *TriggerEventDeleteObject) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.FGenerated, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_6cba752, r, &Options{Flags: 16}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.DwParentActorID, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.Unk_2b94198, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.DwActorID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.DwID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+96, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TriggerEventDeleteObject) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("TConditions", &t.TConditions)
	cb.Do("FGenerated", &t.FGenerated)
	cb.Do("Unk_6cba752", &t.Unk_6cba752)
	cb.Do("DwParentActorID", &t.DwParentActorID)
	cb.Do("Unk_2b94198", &t.Unk_2b94198)
	cb.Do("DwActorID", &t.DwActorID)
	cb.Do("DwID", &t.DwID)
}

type Type_220eeabc struct {
	Unk_96bd281 DT_FLOAT
	Unk_96bd183 DT_FLOAT
	RgbaColors  DT_FIXEDARRAY[*DT_RGBACOLOR]
}

func (t *Type_220eeabc) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Unk_96bd281, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.Unk_96bd183, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.RgbaColors, r, &Options{
		ArrayLength: 7,
		Flags:       1,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+36, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_220eeabc) Walk(cb WalkCallback) {
	cb.Do("Unk_96bd281", &t.Unk_96bd281)
	cb.Do("Unk_96bd183", &t.Unk_96bd183)
	cb.Do("RgbaColors", &t.RgbaColors)
}

type PowerPhaseOneShot struct {
	// Inherits PowerPhaseBase
	// Inherits PolymorphicBase
	DwType      DT_UINT
	DwPad       DT_UINT
	TPhaseName  DT_UINT
	Unk_fcb7313 DT_POLYMORPHIC_VARIABLEARRAY[*DT_INT64]
	Unk_d0d932b DT_INT
	Unk_9a8200e DT_INT
	Unk_4d5c43f DT_INT
}

func (t *PowerPhaseOneShot) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TPhaseName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_fcb7313, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.Unk_d0d932b, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.Unk_9a8200e, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.Unk_4d5c43f, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+64, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PowerPhaseOneShot) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("TPhaseName", &t.TPhaseName)
	cb.Do("Unk_fcb7313", &t.Unk_fcb7313)
	cb.Do("Unk_d0d932b", &t.Unk_d0d932b)
	cb.Do("Unk_9a8200e", &t.Unk_9a8200e)
	cb.Do("Unk_4d5c43f", &t.Unk_4d5c43f)
}

type Type_22d9402d struct {
	ActionType      DT_ENUM
	QuickActionType DT_ENUM
	SnoEmote        DT_SNO
	SnoConsumable   DT_SNO
}

func (t *Type_22d9402d) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.ActionType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.QuickActionType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.SnoEmote, r, &Options{
		Flags: 1,
		Group: 118,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.SnoConsumable, r, &Options{
		Flags: 1,
		Group: 73,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_22d9402d) Walk(cb WalkCallback) {
	cb.Do("ActionType", &t.ActionType)
	cb.Do("QuickActionType", &t.QuickActionType)
	cb.Do("SnoEmote", &t.SnoEmote)
	cb.Do("SnoConsumable", &t.SnoConsumable)
}

type PlayerClassDruidData struct {
	DwUnlockLevel  DT_UINT
	SnoUnlockQuest DT_SNO
	TPassiveData   ClassPassiveSkillData
}

func (t *PlayerClassDruidData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.DwUnlockLevel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.SnoUnlockQuest, r, &Options{
		Flags: 1,
		Group: 31,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.TPassiveData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+40, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PlayerClassDruidData) Walk(cb WalkCallback) {
	cb.Do("DwUnlockLevel", &t.DwUnlockLevel)
	cb.Do("SnoUnlockQuest", &t.SnoUnlockQuest)
	cb.Do("TPassiveData", &t.TPassiveData)
}

type EffectGroupScaleXKeyData struct {
	// Inherits EffectGroupKeyData
	// Inherits PolymorphicBase
	DwType     DT_UINT
	DwPad      DT_UINT
	ArKeyItems DT_VARIABLEARRAY[*EffectGroupKey]
}

func (t *EffectGroupScaleXKeyData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.ArKeyItems, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *EffectGroupScaleXKeyData) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("ArKeyItems", &t.ArKeyItems)
}

type TranslationCurve struct {
	PtKeysComp DT_VARIABLEARRAY[*DT_BYTE]
}

func (t *TranslationCurve) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.PtKeysComp, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TranslationCurve) Walk(cb WalkCallback) {
	cb.Do("PtKeysComp", &t.PtKeysComp)
}

type TriggerEventActorMovement struct {
	// Inherits TriggerEventRangedDuration
	// Inherits TriggerEvent
	// Inherits PolymorphicBase
	DwType                DT_UINT
	TConditions           TriggerConditions
	FGenerated            DT_INT
	Unk_6cba752           DT_INT
	DwParentActorID       DT_UINT
	TDuration             DT_FLOAT
	DwTriggerFlags        DT_UINT
	DwTriggerFlagsEx      DT_UINT
	TCleanup              TriggerCleanup
	Unk_49e9257           DT_INT
	Unk_5490979           DT_INT
	DwPad                 DT_UINT
	SzLocatorName         DT_UINT
	DwActorID             DT_UINT
	Unk_7c25701           DT_ENUM
	EOrientationMode      DT_ENUM
	Unk_daebe18           DT_ENUM
	Unk_6101673           DT_UINT
	Unk_8470ffc           HardpointLink
	Unk_46c8459           DT_UINT
	EBlendEasing          DT_ENUM
	EMoveRate             DT_ENUM
	EDynamicMovementSpeed DT_ENUM
	Unk_c751343           DT_INT
	Unk_17909b9           DT_INT
	THardpointLinkTarget  HardpointLink
	DwTargetID            DT_UINT
	Unk_23237e1           DT_INT
	Unk_f1b6afc           DT_FLOAT
}

func (t *TriggerEventActorMovement) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.FGenerated, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_6cba752, r, &Options{Flags: 16}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.DwParentActorID, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.TDuration, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.DwTriggerFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.DwTriggerFlagsEx, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.TCleanup, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+116, &t.Unk_49e9257, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.Unk_5490979, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+124, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.SzLocatorName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+132, &t.DwActorID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+136, &t.Unk_7c25701, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+140, &t.EOrientationMode, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+144, &t.Unk_daebe18, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+148, &t.Unk_6101673, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+152, &t.Unk_8470ffc, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+160, &t.Unk_46c8459, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+164, &t.EBlendEasing, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+168, &t.EMoveRate, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+172, &t.EDynamicMovementSpeed, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+176, &t.Unk_c751343, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+180, &t.Unk_17909b9, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+184, &t.THardpointLinkTarget, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+192, &t.DwTargetID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+196, &t.Unk_23237e1, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+200, &t.Unk_f1b6afc, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+208, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TriggerEventActorMovement) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("TConditions", &t.TConditions)
	cb.Do("FGenerated", &t.FGenerated)
	cb.Do("Unk_6cba752", &t.Unk_6cba752)
	cb.Do("DwParentActorID", &t.DwParentActorID)
	cb.Do("TDuration", &t.TDuration)
	cb.Do("DwTriggerFlags", &t.DwTriggerFlags)
	cb.Do("DwTriggerFlagsEx", &t.DwTriggerFlagsEx)
	cb.Do("TCleanup", &t.TCleanup)
	cb.Do("Unk_49e9257", &t.Unk_49e9257)
	cb.Do("Unk_5490979", &t.Unk_5490979)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("SzLocatorName", &t.SzLocatorName)
	cb.Do("DwActorID", &t.DwActorID)
	cb.Do("Unk_7c25701", &t.Unk_7c25701)
	cb.Do("EOrientationMode", &t.EOrientationMode)
	cb.Do("Unk_daebe18", &t.Unk_daebe18)
	cb.Do("Unk_6101673", &t.Unk_6101673)
	cb.Do("Unk_8470ffc", &t.Unk_8470ffc)
	cb.Do("Unk_46c8459", &t.Unk_46c8459)
	cb.Do("EBlendEasing", &t.EBlendEasing)
	cb.Do("EMoveRate", &t.EMoveRate)
	cb.Do("EDynamicMovementSpeed", &t.EDynamicMovementSpeed)
	cb.Do("Unk_c751343", &t.Unk_c751343)
	cb.Do("Unk_17909b9", &t.Unk_17909b9)
	cb.Do("THardpointLinkTarget", &t.THardpointLinkTarget)
	cb.Do("DwTargetID", &t.DwTargetID)
	cb.Do("Unk_23237e1", &t.Unk_23237e1)
	cb.Do("Unk_f1b6afc", &t.Unk_f1b6afc)
}

type MarkerBaseGizmoData struct {
	FQuestRestricted     DT_INT
	FGizmoStartsDisabled DT_INT
}

func (t *MarkerBaseGizmoData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.FQuestRestricted, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.FGizmoStartsDisabled, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *MarkerBaseGizmoData) Walk(cb WalkCallback) {
	cb.Do("FQuestRestricted", &t.FQuestRestricted)
	cb.Do("FGizmoStartsDisabled", &t.FGizmoStartsDisabled)
}

type DebugEventLogMessage struct {
	THeader       RequiredMessageHeader
	SzLogString   DT_CHARARRAY
	Unk_a23ac9b   DT_INT64
	NCommandFrame DT_INT
	AMetaData     DT_FIXEDARRAY[*DebugEventLogMetaData]
	Ann           DT_OPTIONAL[*DT_ACD_NETWORK_NAME]
}

func (t *DebugEventLogMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SzLogString, r, &Options{
		ArrayLength: 1000,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1016, &t.Unk_a23ac9b, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1024, &t.NCommandFrame, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1028, &t.AMetaData, r, &Options{
		ArrayLength: 128,
		Flags:       8,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+13320, &t.Ann, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+13336, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *DebugEventLogMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("SzLogString", &t.SzLogString)
	cb.Do("Unk_a23ac9b", &t.Unk_a23ac9b)
	cb.Do("NCommandFrame", &t.NCommandFrame)
	cb.Do("AMetaData", &t.AMetaData)
	cb.Do("Ann", &t.Ann)
}

type StaticLoadingImages struct {
	ArExteriorImages DT_VARIABLEARRAY[*DT_SNO]
	ArDungeonImages  DT_VARIABLEARRAY[*DT_SNO]
}

func (t *StaticLoadingImages) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.ArExteriorImages, r, &Options{
		Flags: 513,
		Group: 44,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.ArDungeonImages, r, &Options{
		Flags: 513,
		Group: 44,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *StaticLoadingImages) Walk(cb WalkCallback) {
	cb.Do("ArExteriorImages", &t.ArExteriorImages)
	cb.Do("ArDungeonImages", &t.ArDungeonImages)
}

type PrefetchSubzoneEntranceDataMessage struct {
	THeader       RequiredMessageHeader
	SnoSubzone    DT_SNO
	UEntranceGUID DT_UINT
}

func (t *PrefetchSubzoneEntranceDataMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoSubzone, r, &Options{
		Flags: 1,
		Group: 80,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.UEntranceGUID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PrefetchSubzoneEntranceDataMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("SnoSubzone", &t.SnoSubzone)
	cb.Do("UEntranceGUID", &t.UEntranceGUID)
}

type ABTestDefinition struct {
	ArVariantKeys DT_VARIABLEARRAY[*StringWrapper]
}

func (t *ABTestDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.ArVariantKeys, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ABTestDefinition) Walk(cb WalkCallback) {
	cb.Do("ArVariantKeys", &t.ArVariantKeys)
}

type DebugProjectileRaycastMessage struct {
	THeader     RequiredMessageHeader
	Ann         DT_ACD_NETWORK_NAME
	IdSWorld    DT_SHARED_SERVER_DATA_ID
	WpStart     DT_VECTOR3D
	WpEnd       DT_VECTOR3D
	Unk_e1ac6f5 DT_INT
	WpPosition  DT_VECTOR3D
	WpNormal    DT_VECTOR3D
	Unk_1c414e5 DT_SNO
}

func (t *DebugProjectileRaycastMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Ann, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.IdSWorld, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.WpStart, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.WpEnd, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.Unk_e1ac6f5, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+60, &t.WpPosition, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.WpNormal, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.Unk_1c414e5, r, &Options{
		Flags: 1,
		Group: 9,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+88, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *DebugProjectileRaycastMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("Ann", &t.Ann)
	cb.Do("IdSWorld", &t.IdSWorld)
	cb.Do("WpStart", &t.WpStart)
	cb.Do("WpEnd", &t.WpEnd)
	cb.Do("Unk_e1ac6f5", &t.Unk_e1ac6f5)
	cb.Do("WpPosition", &t.WpPosition)
	cb.Do("WpNormal", &t.WpNormal)
	cb.Do("Unk_1c414e5", &t.Unk_1c414e5)
}

type Type_24402846 struct {
	THeader       RequiredMessageHeader
	SnoAppearance DT_SNO
	Unk_a61d97    DT_INT
}

func (t *Type_24402846) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoAppearance, r, &Options{
		Flags: 1,
		Group: 9,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.Unk_a61d97, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_24402846) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("SnoAppearance", &t.SnoAppearance)
	cb.Do("Unk_a61d97", &t.Unk_a61d97)
}

type Type_245740e6 struct {
	Unk_4c75a49       DT_RGBACOLOR
	Unk_7766bf8       DT_RGBACOLOR
	Unk_7e856a        DT_RGBACOLOR
	Unk_a12fb39       DT_RGBACOLOR
	Unk_27240d        DT_RGBACOLOR
	Unk_2ff5bcb       DT_RGBACOLOR
	FlSlopeAngleValue DT_FLOAT
	RgbaSlopeColor    DT_RGBACOLOR
}

func (t *Type_245740e6) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Unk_4c75a49, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.Unk_7766bf8, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.Unk_7e856a, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.Unk_a12fb39, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_27240d, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.Unk_2ff5bcb, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.FlSlopeAngleValue, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.RgbaSlopeColor, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_245740e6) Walk(cb WalkCallback) {
	cb.Do("Unk_4c75a49", &t.Unk_4c75a49)
	cb.Do("Unk_7766bf8", &t.Unk_7766bf8)
	cb.Do("Unk_7e856a", &t.Unk_7e856a)
	cb.Do("Unk_a12fb39", &t.Unk_a12fb39)
	cb.Do("Unk_27240d", &t.Unk_27240d)
	cb.Do("Unk_2ff5bcb", &t.Unk_2ff5bcb)
	cb.Do("FlSlopeAngleValue", &t.FlSlopeAngleValue)
	cb.Do("RgbaSlopeColor", &t.RgbaSlopeColor)
}

type AnimTangent struct {
	Unk_2c6615d DT_VECTOR2D
	Unk_2d879de DT_VECTOR2D
	Unk_2ea925f DT_VECTOR2D
	Unk_90e5235 DT_VECTOR2D
	Unk_9206ab6 DT_VECTOR2D
	Unk_9328337 DT_VECTOR2D
}

func (t *AnimTangent) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Unk_2c6615d, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.Unk_2d879de, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_2ea925f, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_90e5235, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.Unk_9206ab6, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.Unk_9328337, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *AnimTangent) Walk(cb WalkCallback) {
	cb.Do("Unk_2c6615d", &t.Unk_2c6615d)
	cb.Do("Unk_2d879de", &t.Unk_2d879de)
	cb.Do("Unk_2ea925f", &t.Unk_2ea925f)
	cb.Do("Unk_90e5235", &t.Unk_90e5235)
	cb.Do("Unk_9206ab6", &t.Unk_9206ab6)
	cb.Do("Unk_9328337", &t.Unk_9328337)
}

type Type_24a8a9be struct {
	SnoMinDefault                    DT_SNO
	SnoMedDefault                    DT_SNO
	SnoHighDefault                   DT_SNO
	SnoHighlight                     DT_SNO
	Unk_c1379cf                      DT_SNO
	Unk_eb1288f                      DT_SNO
	SnoLootOverlay                   DT_SNO
	SnoStencilLootSelectable         DT_SNO
	SnoTriangleOverlay               DT_SNO
	SnoDepthComplexity               DT_SNO
	SnoTexelDensity                  DT_SNO
	SnoOccluded                      DT_SNO
	SnoDepth                         DT_SNO
	SnoCookie                        DT_SNO
	SnoUIRActor                      DT_SNO
	SnoFaded                         DT_SNO
	SnoFur                           DT_SNO
	SnoPowerCenters                  DT_SNO
	Unk_a2d779a                      DT_SNO
	Unk_62b01b3                      DT_SNO
	Unk_fda1e28                      DT_SNO
	Unk_8857547                      DT_SNO
	Unk_57fb208                      DT_SNO
	Unk_279eec9                      DT_SNO
	Unk_f742b8a                      DT_SNO
	Unk_259e646                      DT_SNO
	Unk_a90ec3a                      DT_SNO
	Unk_78b28fb                      DT_SNO
	SnoShaderShowTranslateWalkShader DT_SNO
	SnoShaderShowTranslateWallShader DT_SNO
	Unk_65c301c                      DT_SNO
	Unk_edc70d0                      DT_SNO
	Unk_bd6ad91                      DT_SNO
	Unk_8d0ea52                      DT_SNO
	Unk_fcdf27b                      DT_SNO
	Unk_6867f0f                      DT_SNO
	Unk_380bbd0                      DT_SNO
	Unk_7af891                       DT_SNO
	SnoInfluenceSim                  DT_SNO
	Unk_8c6cbe4                      DT_SNO
	Unk_e9a8598                      DT_SNO
	Unk_b94c259                      DT_SNO
	Unk_88eff1a                      DT_SNO
	Unk_679d69f                      DT_SNO
	Unk_2aee7b3                      DT_SNO
	Unk_fa92474                      DT_SNO
	Unk_ca36135                      DT_SNO
	Unk_99d9df6                      DT_SNO
	Unk_abed88                       DT_SNO
	SnoClosureOuter                  DT_SNO
	Unk_1e187d                       DT_SNO
	Unk_d18553e                      DT_SNO
}

func (t *Type_24a8a9be) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoMinDefault, r, &Options{
		Flags: 1,
		Group: 37,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.SnoMedDefault, r, &Options{
		Flags: 1,
		Group: 37,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.SnoHighDefault, r, &Options{
		Flags: 1,
		Group: 37,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.SnoHighlight, r, &Options{
		Flags: 1,
		Group: 37,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_c1379cf, r, &Options{
		Flags: 1,
		Group: 37,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.Unk_eb1288f, r, &Options{
		Flags: 1,
		Group: 37,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SnoLootOverlay, r, &Options{
		Flags: 1,
		Group: 37,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.SnoStencilLootSelectable, r, &Options{
		Flags: 1,
		Group: 37,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.SnoTriangleOverlay, r, &Options{
		Flags: 1,
		Group: 37,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.SnoDepthComplexity, r, &Options{
		Flags: 1,
		Group: 37,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.SnoTexelDensity, r, &Options{
		Flags: 1,
		Group: 37,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.SnoOccluded, r, &Options{
		Flags: 1,
		Group: 37,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.SnoDepth, r, &Options{
		Flags: 1,
		Group: 37,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.SnoCookie, r, &Options{
		Flags: 1,
		Group: 37,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.SnoUIRActor, r, &Options{
		Flags: 1,
		Group: 37,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+60, &t.SnoFaded, r, &Options{
		Flags: 1,
		Group: 37,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.SnoFur, r, &Options{
		Flags: 1,
		Group: 37,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.SnoPowerCenters, r, &Options{
		Flags: 1,
		Group: 37,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_a2d779a, r, &Options{
		Flags: 1,
		Group: 37,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.Unk_62b01b3, r, &Options{
		Flags: 1,
		Group: 37,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.Unk_fda1e28, r, &Options{
		Flags: 1,
		Group: 37,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.Unk_8857547, r, &Options{
		Flags: 1,
		Group: 37,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.Unk_57fb208, r, &Options{
		Flags: 1,
		Group: 37,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.Unk_279eec9, r, &Options{
		Flags: 1,
		Group: 37,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.Unk_f742b8a, r, &Options{
		Flags: 1,
		Group: 37,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+100, &t.Unk_259e646, r, &Options{
		Flags: 1,
		Group: 37,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+104, &t.Unk_a90ec3a, r, &Options{
		Flags: 1,
		Group: 37,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+108, &t.Unk_78b28fb, r, &Options{
		Flags: 1,
		Group: 37,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.SnoShaderShowTranslateWalkShader, r, &Options{
		Flags: 1,
		Group: 37,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+116, &t.SnoShaderShowTranslateWallShader, r, &Options{
		Flags: 1,
		Group: 37,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.Unk_65c301c, r, &Options{
		Flags: 1,
		Group: 37,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+124, &t.Unk_edc70d0, r, &Options{
		Flags: 1,
		Group: 37,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.Unk_bd6ad91, r, &Options{
		Flags: 1,
		Group: 37,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+132, &t.Unk_8d0ea52, r, &Options{
		Flags: 1,
		Group: 37,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+136, &t.Unk_fcdf27b, r, &Options{
		Flags: 1,
		Group: 37,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+140, &t.Unk_6867f0f, r, &Options{
		Flags: 1,
		Group: 37,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+144, &t.Unk_380bbd0, r, &Options{
		Flags: 1,
		Group: 37,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+148, &t.Unk_7af891, r, &Options{
		Flags: 1,
		Group: 37,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+152, &t.SnoInfluenceSim, r, &Options{
		Flags: 1,
		Group: 37,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+156, &t.Unk_8c6cbe4, r, &Options{
		Flags: 1,
		Group: 37,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+160, &t.Unk_e9a8598, r, &Options{
		Flags: 1,
		Group: 37,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+164, &t.Unk_b94c259, r, &Options{
		Flags: 1,
		Group: 37,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+168, &t.Unk_88eff1a, r, &Options{
		Flags: 1,
		Group: 37,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+172, &t.Unk_679d69f, r, &Options{
		Flags: 1,
		Group: 37,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+176, &t.Unk_2aee7b3, r, &Options{
		Flags: 1,
		Group: 37,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+180, &t.Unk_fa92474, r, &Options{
		Flags: 1,
		Group: 37,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+184, &t.Unk_ca36135, r, &Options{
		Flags: 1,
		Group: 37,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+188, &t.Unk_99d9df6, r, &Options{
		Flags: 1,
		Group: 37,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+192, &t.Unk_abed88, r, &Options{
		Flags: 1,
		Group: 37,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+196, &t.SnoClosureOuter, r, &Options{
		Flags: 1,
		Group: 37,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+200, &t.Unk_1e187d, r, &Options{
		Flags: 1,
		Group: 37,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+204, &t.Unk_d18553e, r, &Options{
		Flags: 1,
		Group: 37,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+208, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_24a8a9be) Walk(cb WalkCallback) {
	cb.Do("SnoMinDefault", &t.SnoMinDefault)
	cb.Do("SnoMedDefault", &t.SnoMedDefault)
	cb.Do("SnoHighDefault", &t.SnoHighDefault)
	cb.Do("SnoHighlight", &t.SnoHighlight)
	cb.Do("Unk_c1379cf", &t.Unk_c1379cf)
	cb.Do("Unk_eb1288f", &t.Unk_eb1288f)
	cb.Do("SnoLootOverlay", &t.SnoLootOverlay)
	cb.Do("SnoStencilLootSelectable", &t.SnoStencilLootSelectable)
	cb.Do("SnoTriangleOverlay", &t.SnoTriangleOverlay)
	cb.Do("SnoDepthComplexity", &t.SnoDepthComplexity)
	cb.Do("SnoTexelDensity", &t.SnoTexelDensity)
	cb.Do("SnoOccluded", &t.SnoOccluded)
	cb.Do("SnoDepth", &t.SnoDepth)
	cb.Do("SnoCookie", &t.SnoCookie)
	cb.Do("SnoUIRActor", &t.SnoUIRActor)
	cb.Do("SnoFaded", &t.SnoFaded)
	cb.Do("SnoFur", &t.SnoFur)
	cb.Do("SnoPowerCenters", &t.SnoPowerCenters)
	cb.Do("Unk_a2d779a", &t.Unk_a2d779a)
	cb.Do("Unk_62b01b3", &t.Unk_62b01b3)
	cb.Do("Unk_fda1e28", &t.Unk_fda1e28)
	cb.Do("Unk_8857547", &t.Unk_8857547)
	cb.Do("Unk_57fb208", &t.Unk_57fb208)
	cb.Do("Unk_279eec9", &t.Unk_279eec9)
	cb.Do("Unk_f742b8a", &t.Unk_f742b8a)
	cb.Do("Unk_259e646", &t.Unk_259e646)
	cb.Do("Unk_a90ec3a", &t.Unk_a90ec3a)
	cb.Do("Unk_78b28fb", &t.Unk_78b28fb)
	cb.Do("SnoShaderShowTranslateWalkShader", &t.SnoShaderShowTranslateWalkShader)
	cb.Do("SnoShaderShowTranslateWallShader", &t.SnoShaderShowTranslateWallShader)
	cb.Do("Unk_65c301c", &t.Unk_65c301c)
	cb.Do("Unk_edc70d0", &t.Unk_edc70d0)
	cb.Do("Unk_bd6ad91", &t.Unk_bd6ad91)
	cb.Do("Unk_8d0ea52", &t.Unk_8d0ea52)
	cb.Do("Unk_fcdf27b", &t.Unk_fcdf27b)
	cb.Do("Unk_6867f0f", &t.Unk_6867f0f)
	cb.Do("Unk_380bbd0", &t.Unk_380bbd0)
	cb.Do("Unk_7af891", &t.Unk_7af891)
	cb.Do("SnoInfluenceSim", &t.SnoInfluenceSim)
	cb.Do("Unk_8c6cbe4", &t.Unk_8c6cbe4)
	cb.Do("Unk_e9a8598", &t.Unk_e9a8598)
	cb.Do("Unk_b94c259", &t.Unk_b94c259)
	cb.Do("Unk_88eff1a", &t.Unk_88eff1a)
	cb.Do("Unk_679d69f", &t.Unk_679d69f)
	cb.Do("Unk_2aee7b3", &t.Unk_2aee7b3)
	cb.Do("Unk_fa92474", &t.Unk_fa92474)
	cb.Do("Unk_ca36135", &t.Unk_ca36135)
	cb.Do("Unk_99d9df6", &t.Unk_99d9df6)
	cb.Do("Unk_abed88", &t.Unk_abed88)
	cb.Do("SnoClosureOuter", &t.SnoClosureOuter)
	cb.Do("Unk_1e187d", &t.Unk_1e187d)
	cb.Do("Unk_d18553e", &t.Unk_d18553e)
}

type EliteKilledMessage struct {
	THeader               RequiredMessageHeader
	DwPlayerGameAccountId DT_UINT
	SnoActorMonster       DT_SNO
	EMonsterRarity        DT_ENUM
	BUseAlternateName     DT_INT
	PRareNameGBIDs        DT_FIXEDARRAY[*DT_GBID]
}

func (t *EliteKilledMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.DwPlayerGameAccountId, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.SnoActorMonster, r, &Options{
		Flags: 1,
		Group: 1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.EMonsterRarity, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.BUseAlternateName, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.PRareNameGBIDs, r, &Options{
		ArrayLength: 2,
		Flags:       1,
		Group:       7,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+40, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *EliteKilledMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("DwPlayerGameAccountId", &t.DwPlayerGameAccountId)
	cb.Do("SnoActorMonster", &t.SnoActorMonster)
	cb.Do("EMonsterRarity", &t.EMonsterRarity)
	cb.Do("BUseAlternateName", &t.BUseAlternateName)
	cb.Do("PRareNameGBIDs", &t.PRareNameGBIDs)
}

type PowerConditionHasAffixEquipped struct {
	// Inherits PowerConditionBase
	// Inherits PolymorphicBase
	DwType   DT_UINT
	BInverse DT_INT
	DwPad    DT_UINT
	ESubject DT_ENUM
	SnoAffix DT_SNO
}

func (t *PowerConditionHasAffixEquipped) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BInverse, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ESubject, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.SnoAffix, r, &Options{
		Flags: 513,
		Group: 104,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PowerConditionHasAffixEquipped) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("BInverse", &t.BInverse)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("ESubject", &t.ESubject)
	cb.Do("SnoAffix", &t.SnoAffix)
}

type TrailDefinition struct {
	DwTrailDefFlags       DT_UINT
	FlBaseWidth           DT_FLOAT
	FTextureRepeatCount   DT_FLOAT
	Unk_faa043c           DT_INT
	NSegmentCount         DT_INT
	TTrailLengthRange     DT_RANGE[*DT_FLOAT]
	TTrailDurationRange   DT_RANGE[*DT_FLOAT]
	TSystemDurationRange  DT_RANGE[*DT_FLOAT]
	TSystemDurationScalar InterpolationScalar
	TTrailDurationScalar  InterpolationScalar
	TTrailLengthScalar    InterpolationScalar
	FlOutroDuration       DT_FLOAT
	PathColorOverTime     Type_560ae4cf
	PathColorOverLength   Type_560ae4cf
	PathAlpha             Type_cbfdd2ea
	PathAlphaOverLength   Type_cbfdd2ea
	Unk_ab00250           Type_cbfdd2ea
	Unk_3c8d383           Type_cbfdd2ea
	Unk_bf2b399           Type_cbfdd2ea
	Unk_abcab5e           Type_cbfdd2ea
	Unk_9a3f811           Type_cbfdd2ea
	Unk_3a6dc3c           Type_cbfdd2ea
	Unk_5ddd86f           Type_cbfdd2ea
	PathScaleOverTime     Type_cbfdd2ea
	PathScaleOverLength   Type_cbfdd2ea
	Unk_a14a82f           VectorPath
	Unk_eee6d22           VectorPath
	Unk_d957f72           VectorPath
	Unk_6022125           VectorPath
	Unk_e8edd27           Type_cbfdd2ea
	NTrailType            DT_ENUM
	ETrailSpawnType       DT_ENUM
	SnoMaterial           DT_SNO
	ENormalAxis           DT_ENUM
	Unk_c0b6075           DT_RANGE[*DT_FLOAT]
	Unk_a968362           DT_RANGE[*DT_FLOAT]
	Unk_293081            DT_RANGE[*DT_FLOAT]
	Unk_e5a86e1           Type_cbfdd2ea
	Unk_3e1462e           Type_cbfdd2ea
	DwMaxSystems          DT_UINT
}

func (t *TrailDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwTrailDefFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.FlBaseWidth, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.FTextureRepeatCount, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.Unk_faa043c, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.NSegmentCount, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.TTrailLengthRange, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.TTrailDurationRange, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.TSystemDurationRange, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.TSystemDurationScalar, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.TTrailDurationScalar, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+116, &t.TTrailLengthScalar, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+148, &t.FlOutroDuration, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+152, &t.PathColorOverTime, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+208, &t.PathColorOverLength, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+264, &t.PathAlpha, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+320, &t.PathAlphaOverLength, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+376, &t.Unk_ab00250, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+432, &t.Unk_3c8d383, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+488, &t.Unk_bf2b399, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+544, &t.Unk_abcab5e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+600, &t.Unk_9a3f811, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+656, &t.Unk_3a6dc3c, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+712, &t.Unk_5ddd86f, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+768, &t.PathScaleOverTime, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+824, &t.PathScaleOverLength, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+880, &t.Unk_a14a82f, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+936, &t.Unk_eee6d22, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+992, &t.Unk_d957f72, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1048, &t.Unk_6022125, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1104, &t.Unk_e8edd27, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1160, &t.NTrailType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1164, &t.ETrailSpawnType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1168, &t.SnoMaterial, r, &Options{
		Flags: 1,
		Group: 57,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1172, &t.ENormalAxis, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1176, &t.Unk_c0b6075, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1184, &t.Unk_a968362, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1192, &t.Unk_293081, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1200, &t.Unk_e5a86e1, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1256, &t.Unk_3e1462e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1312, &t.DwMaxSystems, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+1320, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TrailDefinition) Walk(cb WalkCallback) {
	cb.Do("DwTrailDefFlags", &t.DwTrailDefFlags)
	cb.Do("FlBaseWidth", &t.FlBaseWidth)
	cb.Do("FTextureRepeatCount", &t.FTextureRepeatCount)
	cb.Do("Unk_faa043c", &t.Unk_faa043c)
	cb.Do("NSegmentCount", &t.NSegmentCount)
	cb.Do("TTrailLengthRange", &t.TTrailLengthRange)
	cb.Do("TTrailDurationRange", &t.TTrailDurationRange)
	cb.Do("TSystemDurationRange", &t.TSystemDurationRange)
	cb.Do("TSystemDurationScalar", &t.TSystemDurationScalar)
	cb.Do("TTrailDurationScalar", &t.TTrailDurationScalar)
	cb.Do("TTrailLengthScalar", &t.TTrailLengthScalar)
	cb.Do("FlOutroDuration", &t.FlOutroDuration)
	cb.Do("PathColorOverTime", &t.PathColorOverTime)
	cb.Do("PathColorOverLength", &t.PathColorOverLength)
	cb.Do("PathAlpha", &t.PathAlpha)
	cb.Do("PathAlphaOverLength", &t.PathAlphaOverLength)
	cb.Do("Unk_ab00250", &t.Unk_ab00250)
	cb.Do("Unk_3c8d383", &t.Unk_3c8d383)
	cb.Do("Unk_bf2b399", &t.Unk_bf2b399)
	cb.Do("Unk_abcab5e", &t.Unk_abcab5e)
	cb.Do("Unk_9a3f811", &t.Unk_9a3f811)
	cb.Do("Unk_3a6dc3c", &t.Unk_3a6dc3c)
	cb.Do("Unk_5ddd86f", &t.Unk_5ddd86f)
	cb.Do("PathScaleOverTime", &t.PathScaleOverTime)
	cb.Do("PathScaleOverLength", &t.PathScaleOverLength)
	cb.Do("Unk_a14a82f", &t.Unk_a14a82f)
	cb.Do("Unk_eee6d22", &t.Unk_eee6d22)
	cb.Do("Unk_d957f72", &t.Unk_d957f72)
	cb.Do("Unk_6022125", &t.Unk_6022125)
	cb.Do("Unk_e8edd27", &t.Unk_e8edd27)
	cb.Do("NTrailType", &t.NTrailType)
	cb.Do("ETrailSpawnType", &t.ETrailSpawnType)
	cb.Do("SnoMaterial", &t.SnoMaterial)
	cb.Do("ENormalAxis", &t.ENormalAxis)
	cb.Do("Unk_c0b6075", &t.Unk_c0b6075)
	cb.Do("Unk_a968362", &t.Unk_a968362)
	cb.Do("Unk_293081", &t.Unk_293081)
	cb.Do("Unk_e5a86e1", &t.Unk_e5a86e1)
	cb.Do("Unk_3e1462e", &t.Unk_3e1462e)
	cb.Do("DwMaxSystems", &t.DwMaxSystems)
}

type Type_252cba6b struct {
	FlTime DT_FLOAT
	FlSpin DT_FLOAT
}

func (t *Type_252cba6b) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.FlTime, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.FlSpin, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_252cba6b) Walk(cb WalkCallback) {
	cb.Do("FlTime", &t.FlTime)
	cb.Do("FlSpin", &t.FlSpin)
}

type ErrorWithContextMessage struct {
	THeader   RequiredMessageHeader
	EType     DT_ENUM
	SnoAsset  DT_SNO_NAME
	ETeam     DT_ENUM
	UsMessage DT_CHARARRAY
	UsOwner   DT_CHARARRAY
}

func (t *ErrorWithContextMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.EType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.SnoAsset, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.ETeam, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.UsMessage, r, &Options{
		ArrayLength: 1024,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1056, &t.UsOwner, r, &Options{
		ArrayLength: 64,
		Flags:       1,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+1120, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ErrorWithContextMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("EType", &t.EType)
	cb.Do("SnoAsset", &t.SnoAsset)
	cb.Do("ETeam", &t.ETeam)
	cb.Do("UsMessage", &t.UsMessage)
	cb.Do("UsOwner", &t.UsOwner)
}

type Type_25b4545f struct {
	// Inherits PowerCallbackBase
	// Inherits PolymorphicBase
	DwType                DT_UINT
	DwPad                 DT_UINT
	SnoTriggerEffectGroup DT_SNO
	BCouldHaveRagdolled   DT_INT
	TPhaseName            DT_UINT
	EContactFrame         DT_ENUM
	BOptional             DT_INT
}

func (t *Type_25b4545f) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoTriggerEffectGroup, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.BCouldHaveRagdolled, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.TPhaseName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.EContactFrame, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.BOptional, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+40, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_25b4545f) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("SnoTriggerEffectGroup", &t.SnoTriggerEffectGroup)
	cb.Do("BCouldHaveRagdolled", &t.BCouldHaveRagdolled)
	cb.Do("TPhaseName", &t.TPhaseName)
	cb.Do("EContactFrame", &t.EContactFrame)
	cb.Do("BOptional", &t.BOptional)
}

type DungeonSigilTierSubcondition struct {
	// Inherits Type_d3c3637f
	// Inherits Subcondition
	// Inherits PolymorphicBase
	DwType        DT_UINT
	BNegate       DT_INT
	EComparisonOp DT_ENUM
	DwPad         DT_UINT
	NTier         DT_INT
}

func (t *DungeonSigilTierSubcondition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BNegate, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.EComparisonOp, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.NTier, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+40, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *DungeonSigilTierSubcondition) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("BNegate", &t.BNegate)
	cb.Do("EComparisonOp", &t.EComparisonOp)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("NTier", &t.NTier)
}

type UIListItemStyle struct {
	// Inherits UITextStyle
	// Inherits UIWindowStyle
	// Inherits UIControlStyle
	// Inherits PolymorphicBase
	DwType                    DT_UINT
	DwPad                     DT_UINT
	HParentStyle              UIControlHandle
	Unk_441f783               DT_INT64
	M_eHasModifiedPowerTagMap DT_TAGMAP[*DT_ENUM]
	TConsoleInput             UIControlConsoleInput
	Unk_b4f614c               DT_TAGMAP[*DT_ENUM]
	TFont                     UIControlFont
	Unk_4741819               DT_TAGMAP[*DT_ENUM]
	Unk_82bd03f               DT_TAGMAP[*DT_ENUM]
}

func (t *UIListItemStyle) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.HParentStyle, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_441f783, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.M_eHasModifiedPowerTagMap, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.TConsoleInput, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.Unk_b4f614c, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.TFont, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.Unk_4741819, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.Unk_82bd03f, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+128, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *UIListItemStyle) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("HParentStyle", &t.HParentStyle)
	cb.Do("Unk_441f783", &t.Unk_441f783)
	cb.Do("M_eHasModifiedPowerTagMap", &t.M_eHasModifiedPowerTagMap)
	cb.Do("TConsoleInput", &t.TConsoleInput)
	cb.Do("Unk_b4f614c", &t.Unk_b4f614c)
	cb.Do("TFont", &t.TFont)
	cb.Do("Unk_4741819", &t.Unk_4741819)
	cb.Do("Unk_82bd03f", &t.Unk_82bd03f)
}

type UIControlTemplate struct {
	SzName        DT_CSTRING[*DT_BYTE]
	PtInlineStyle DT_POLYMORPHIC_VARIABLEARRAY[*UIControlStyle]
	ArChildren    DT_VARIABLEARRAY[*UIControlTemplate]
	Unk_1cb       DT_VARIABLEARRAY[*Type_1c5ecda5]
}

func (t *UIControlTemplate) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SzName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.PtInlineStyle, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.ArChildren, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.Unk_1cb, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+72, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *UIControlTemplate) Walk(cb WalkCallback) {
	cb.Do("SzName", &t.SzName)
	cb.Do("PtInlineStyle", &t.PtInlineStyle)
	cb.Do("ArChildren", &t.ArChildren)
	cb.Do("Unk_1cb", &t.Unk_1cb)
}

type EffectGroupACDToACDMessage struct {
	THeader        RequiredMessageHeader
	SnoEffectGroup DT_SNO
	AnnFrom        DT_ACD_NETWORK_NAME
	AnnTo          DT_ACD_NETWORK_NAME
	AnnOrigin      DT_ACD_NETWORK_NAME
	TLinkStart     HardpointInfo
	TLinkEnd       HardpointInfo
}

func (t *EffectGroupACDToACDMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoEffectGroup, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.AnnFrom, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.AnnTo, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.AnnOrigin, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.TLinkStart, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.TLinkEnd, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+60, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *EffectGroupACDToACDMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("SnoEffectGroup", &t.SnoEffectGroup)
	cb.Do("AnnFrom", &t.AnnFrom)
	cb.Do("AnnTo", &t.AnnTo)
	cb.Do("AnnOrigin", &t.AnnOrigin)
	cb.Do("TLinkStart", &t.TLinkStart)
	cb.Do("TLinkEnd", &t.TLinkEnd)
}

type PlayAnimationMessage struct {
	THeader             RequiredMessageHeader
	Ann                 DT_ACD_NETWORK_NAME
	EAnimReason         DT_ENUM
	FlUnitAnimStartTime DT_FLOAT
	TAnim               DT_FIXEDARRAY[*PlayAnimationMessageSpec]
	Unk_2875d89         DT_OPTIONAL[*SharedServerWorldPlace]
	FlSyncYaw           DT_OPTIONAL[*DT_FLOAT]
	BWasPreplayed       DT_OPTIONAL[*DT_INT]
}

func (t *PlayAnimationMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Ann, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.EAnimReason, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.FlUnitAnimStartTime, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.TAnim, r, &Options{
		ArrayLength: 6,
		Flags:       8,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+252, &t.Unk_2875d89, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+276, &t.FlSyncYaw, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+284, &t.BWasPreplayed, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+292, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PlayAnimationMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("Ann", &t.Ann)
	cb.Do("EAnimReason", &t.EAnimReason)
	cb.Do("FlUnitAnimStartTime", &t.FlUnitAnimStartTime)
	cb.Do("TAnim", &t.TAnim)
	cb.Do("Unk_2875d89", &t.Unk_2875d89)
	cb.Do("FlSyncYaw", &t.FlSyncYaw)
	cb.Do("BWasPreplayed", &t.BWasPreplayed)
}

type CrafterConditions struct {
	ArConditionData DT_VARIABLEARRAY[*ConditionData]
}

func (t *CrafterConditions) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.ArConditionData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *CrafterConditions) Walk(cb WalkCallback) {
	cb.Do("ArConditionData", &t.ArConditionData)
}

type Type_27090ba7 struct {
	Unk_9fea26c DT_TAGMAP[*DT_ENUM]
}

func (t *Type_27090ba7) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Unk_9fea26c, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_27090ba7) Walk(cb WalkCallback) {
	cb.Do("Unk_9fea26c", &t.Unk_9fea26c)
}

type WeatherDefinition struct {
	PtPostprocessed    DT_INT64
	SnoParentWeather   DT_SNO
	Unk_45703df        DT_INT
	Unk_5989069        DT_FIXEDARRAY[*Type_3f7811d2]
	TParamsNotRaining  WeatherStateParams
	TParamsWhenRaining WeatherStateParams
	TColorCorrection   ColorCorrectionParams
	TDomainEpoch       Type_27090ba7
	TStarsSettings     StarsSettings
	Unk_c68eb66        Type_3a9f0d72
	Unk_319c94         Type_ca1fcba0
	Unk_dc54395        DT_TAGMAP[*DT_ENUM]
}

func (t *WeatherDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.PtPostprocessed, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoParentWeather, r, &Options{
		Flags: 1,
		Group: 47,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.Unk_45703df, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_5989069, r, &Options{
		ArrayLength: 3,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.TParamsNotRaining, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.TParamsWhenRaining, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+104, &t.TColorCorrection, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.TDomainEpoch, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+136, &t.TStarsSettings, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+152, &t.Unk_c68eb66, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+168, &t.Unk_319c94, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+184, &t.Unk_dc54395, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+200, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *WeatherDefinition) Walk(cb WalkCallback) {
	cb.Do("PtPostprocessed", &t.PtPostprocessed)
	cb.Do("SnoParentWeather", &t.SnoParentWeather)
	cb.Do("Unk_45703df", &t.Unk_45703df)
	cb.Do("Unk_5989069", &t.Unk_5989069)
	cb.Do("TParamsNotRaining", &t.TParamsNotRaining)
	cb.Do("TParamsWhenRaining", &t.TParamsWhenRaining)
	cb.Do("TColorCorrection", &t.TColorCorrection)
	cb.Do("TDomainEpoch", &t.TDomainEpoch)
	cb.Do("TStarsSettings", &t.TStarsSettings)
	cb.Do("Unk_c68eb66", &t.Unk_c68eb66)
	cb.Do("Unk_319c94", &t.Unk_319c94)
	cb.Do("Unk_dc54395", &t.Unk_dc54395)
}

type Type_2732a10a struct {
	THeader     GBIDHeader
	EAttribute  DT_ENUM
	Unk_50ee29e DT_VARIABLEARRAY[*Type_cfc7c00f]
	HIconImage  DT_UINT
	Unk_5862a2d DT_UINT
}

func (t *Type_2732a10a) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+260, &t.EAttribute, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+264, &t.Unk_50ee29e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+280, &t.HIconImage, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+284, &t.Unk_5862a2d, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+288, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_2732a10a) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("EAttribute", &t.EAttribute)
	cb.Do("Unk_50ee29e", &t.Unk_50ee29e)
	cb.Do("HIconImage", &t.HIconImage)
	cb.Do("Unk_5862a2d", &t.Unk_5862a2d)
}

type Type_273a9eee struct {
	GbidSpawnLocType DT_GBID
	ERestrictionType DT_ENUM
	NCountActive     DT_INT
	FlPercentActive  DT_FLOAT
	Unk_74768a4      DT_FLOAT
}

func (t *Type_273a9eee) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.GbidSpawnLocType, r, &Options{
		Flags: 1,
		Group: 20,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.ERestrictionType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.NCountActive, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.FlPercentActive, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_74768a4, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+20, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_273a9eee) Walk(cb WalkCallback) {
	cb.Do("GbidSpawnLocType", &t.GbidSpawnLocType)
	cb.Do("ERestrictionType", &t.ERestrictionType)
	cb.Do("NCountActive", &t.NCountActive)
	cb.Do("FlPercentActive", &t.FlPercentActive)
	cb.Do("Unk_74768a4", &t.Unk_74768a4)
}

type LabelEntry struct {
	GbidLabel      DT_GBID
	UFlags         DT_UINT
	FlWeight       DT_FLOAT
	NApplyCountMin DT_INT
	Unk_9ac63e8    DT_FLOAT
	Unk_b171d47    DT_INT
}

func (t *LabelEntry) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.GbidLabel, r, &Options{
		Flags: 1,
		Group: 4,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.UFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.FlWeight, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.NApplyCountMin, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_9ac63e8, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.Unk_b171d47, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *LabelEntry) Walk(cb WalkCallback) {
	cb.Do("GbidLabel", &t.GbidLabel)
	cb.Do("UFlags", &t.UFlags)
	cb.Do("FlWeight", &t.FlWeight)
	cb.Do("NApplyCountMin", &t.NApplyCountMin)
	cb.Do("Unk_9ac63e8", &t.Unk_9ac63e8)
	cb.Do("Unk_b171d47", &t.Unk_b171d47)
}

type Type_27aa5029 struct {
	THeader        RequiredMessageHeader
	SnoAchievement DT_SNO
	Unk_815b7e9    DT_INT
}

func (t *Type_27aa5029) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoAchievement, r, &Options{
		Flags: 1,
		Group: 99,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.Unk_815b7e9, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_27aa5029) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("SnoAchievement", &t.SnoAchievement)
	cb.Do("Unk_815b7e9", &t.Unk_815b7e9)
}

type ClassPassiveSkillPowerData struct {
	SnoPassivePower  DT_SNO
	TUnlockCondition ConditionWrapper
}

func (t *ClassPassiveSkillPowerData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoPassivePower, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.TUnlockCondition, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+40, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ClassPassiveSkillPowerData) Walk(cb WalkCallback) {
	cb.Do("SnoPassivePower", &t.SnoPassivePower)
	cb.Do("TUnlockCondition", &t.TUnlockCondition)
}

type ConsoleProperty struct{}

func (t *ConsoleProperty) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if _, err := r.Seek(p+1, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ConsoleProperty) Walk(cb WalkCallback) {}

type PlayerCustomizationMessage struct {
	THeader               RequiredMessageHeader
	TCustomizationData    CustomizationData
	DwPlayerGameAccountId DT_UINT
}

func (t *PlayerCustomizationMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TCustomizationData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.DwPlayerGameAccountId, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+60, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PlayerCustomizationMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("TCustomizationData", &t.TCustomizationData)
	cb.Do("DwPlayerGameAccountId", &t.DwPlayerGameAccountId)
}

type Type_28dc8b5b struct {
	// Inherits BuffCallbackBase
	// Inherits PolymorphicBase
	DwType                DT_UINT
	DwPad                 DT_UINT
	SnoTriggerEffectGroup DT_SNO
	ArConditions          DT_POLYMORPHIC_VARIABLEARRAY[*DT_INT64]
}

func (t *Type_28dc8b5b) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoTriggerEffectGroup, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ArConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_28dc8b5b) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("SnoTriggerEffectGroup", &t.SnoTriggerEffectGroup)
	cb.Do("ArConditions", &t.ArConditions)
}

type EmitterBoxData struct {
	// Inherits EmitterDataBase
	// Inherits PolymorphicBase
	DwType            DT_UINT
	DwPad             DT_UINT
	FEvenDistribution DT_INT
	PathBoxExtents    VectorPath
}

func (t *EmitterBoxData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.FEvenDistribution, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.PathBoxExtents, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+80, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *EmitterBoxData) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("FEvenDistribution", &t.FEvenDistribution)
	cb.Do("PathBoxExtents", &t.PathBoxExtents)
}

type ActorFacingData struct {
	FlTurnSpeed              DT_FLOAT
	FlRunTurnSpeed           DT_FLOAT
	FlDefaultAttackTurnSpeed DT_FLOAT
}

func (t *ActorFacingData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.FlTurnSpeed, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.FlRunTurnSpeed, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.FlDefaultAttackTurnSpeed, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+12, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ActorFacingData) Walk(cb WalkCallback) {
	cb.Do("FlTurnSpeed", &t.FlTurnSpeed)
	cb.Do("FlRunTurnSpeed", &t.FlRunTurnSpeed)
	cb.Do("FlDefaultAttackTurnSpeed", &t.FlDefaultAttackTurnSpeed)
}

type FoleyOverridePreloadHelper struct {
	SnoActor    DT_SNO
	DwTag       DT_UINT
	Unk_c063965 SerialDataInfo
}

func (t *FoleyOverridePreloadHelper) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoActor, r, &Options{
		Flags: 1,
		Group: 1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.DwTag, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.Unk_c063965, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *FoleyOverridePreloadHelper) Walk(cb WalkCallback) {
	cb.Do("SnoActor", &t.SnoActor)
	cb.Do("DwTag", &t.DwTag)
	cb.Do("Unk_c063965", &t.Unk_c063965)
}

type ParagonNodeDefinition struct {
	HIcon               DT_UINT
	HIconMask           DT_UINT
	Unk_7714b98         DT_ENUM
	ERarityOverride     DT_ENUM
	SnoPassivePower     DT_SNO
	PtAttributes        DT_VARIABLEARRAY[*AttributeSpecifier]
	Unk_8ba8e1e         DT_VARIABLEARRAY[*DT_INT]
	ArThresholdSelector DT_VARIABLEARRAY[*DT_SNO]
	BHasSocket          DT_INT
	BIsGate             DT_INT
	ArSkillTags         DT_VARIABLEARRAY[*DT_GBID]
}

func (t *ParagonNodeDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.HIcon, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.HIconMask, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_7714b98, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.ERarityOverride, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SnoPassivePower, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.PtAttributes, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.Unk_8ba8e1e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.ArThresholdSelector, r, &Options{
		Flags: 1,
		Group: 124,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.BHasSocket, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.BIsGate, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.ArSkillTags, r, &Options{
		Flags: 1,
		Group: 56,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+104, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ParagonNodeDefinition) Walk(cb WalkCallback) {
	cb.Do("HIcon", &t.HIcon)
	cb.Do("HIconMask", &t.HIconMask)
	cb.Do("Unk_7714b98", &t.Unk_7714b98)
	cb.Do("ERarityOverride", &t.ERarityOverride)
	cb.Do("SnoPassivePower", &t.SnoPassivePower)
	cb.Do("PtAttributes", &t.PtAttributes)
	cb.Do("Unk_8ba8e1e", &t.Unk_8ba8e1e)
	cb.Do("ArThresholdSelector", &t.ArThresholdSelector)
	cb.Do("BHasSocket", &t.BHasSocket)
	cb.Do("BIsGate", &t.BIsGate)
	cb.Do("ArSkillTags", &t.ArSkillTags)
}

type LookVariantMap struct {
	DwLookVariant          DT_UINT
	ArLookVariantOverrides DT_VARIABLEARRAY[*LookVariantOverride]
}

func (t *LookVariantMap) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.DwLookVariant, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.ArLookVariantOverrides, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *LookVariantMap) Walk(cb WalkCallback) {
	cb.Do("DwLookVariant", &t.DwLookVariant)
	cb.Do("ArLookVariantOverrides", &t.ArLookVariantOverrides)
}

type PRTransformMessage struct {
	THeader    RequiredMessageHeader
	TTransform PRTransform
}

func (t *PRTransformMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TTransform, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+44, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PRTransformMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("TTransform", &t.TTransform)
}

type DRLGSpawningData struct {
	GbidSpawnLocType DT_GBID
	ArGroupTypeData  DT_FIXEDARRAY[*Type_e730cffb]
}

func (t *DRLGSpawningData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.GbidSpawnLocType, r, &Options{
		Flags: 1,
		Group: 20,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.ArGroupTypeData, r, &Options{
		ArrayLength: 9,
		Flags:       1,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+256, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *DRLGSpawningData) Walk(cb WalkCallback) {
	cb.Do("GbidSpawnLocType", &t.GbidSpawnLocType)
	cb.Do("ArGroupTypeData", &t.ArGroupTypeData)
}

type DRLGSpawningPool struct {
	GbidSpawningPool DT_GBID
	BNegate          DT_INT
}

func (t *DRLGSpawningPool) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.GbidSpawningPool, r, &Options{
		Flags: 1,
		Group: 48,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.BNegate, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *DRLGSpawningPool) Walk(cb WalkCallback) {
	cb.Do("GbidSpawningPool", &t.GbidSpawningPool)
	cb.Do("BNegate", &t.BNegate)
}

type WorldDeletedMessage struct {
	THeader  RequiredMessageHeader
	IdSWorld DT_SHARED_SERVER_DATA_ID
}

func (t *WorldDeletedMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.IdSWorld, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *WorldDeletedMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("IdSWorld", &t.IdSWorld)
}

type QuestPreloadHelper struct {
	SnoQuest    DT_SNO
	Unk_537b67f SerialDataInfo
	Unk_c67aacc SerialDataInfo
}

func (t *QuestPreloadHelper) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoQuest, r, &Options{
		Flags: 1,
		Group: 31,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.Unk_537b67f, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.Unk_c67aacc, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+20, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *QuestPreloadHelper) Walk(cb WalkCallback) {
	cb.Do("SnoQuest", &t.SnoQuest)
	cb.Do("Unk_537b67f", &t.Unk_537b67f)
	cb.Do("Unk_c67aacc", &t.Unk_c67aacc)
}

type EnableRagdollParams struct {
	FlRagdollVelocityFactor DT_FLOAT
	FlRagdollMomentumFactor DT_FLOAT
	Unk_665d2e1             DT_FLOAT
}

func (t *EnableRagdollParams) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.FlRagdollVelocityFactor, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.FlRagdollMomentumFactor, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.Unk_665d2e1, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+12, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *EnableRagdollParams) Walk(cb WalkCallback) {
	cb.Do("FlRagdollVelocityFactor", &t.FlRagdollVelocityFactor)
	cb.Do("FlRagdollMomentumFactor", &t.FlRagdollMomentumFactor)
	cb.Do("Unk_665d2e1", &t.Unk_665d2e1)
}

type OnItemPickupBuffCallback struct {
	// Inherits BuffCallbackBase
	// Inherits PolymorphicBase
	DwType                DT_UINT
	DwPad                 DT_UINT
	SnoTriggerEffectGroup DT_SNO
	ArConditions          DT_POLYMORPHIC_VARIABLEARRAY[*DT_INT64]
}

func (t *OnItemPickupBuffCallback) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoTriggerEffectGroup, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ArConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *OnItemPickupBuffCallback) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("SnoTriggerEffectGroup", &t.SnoTriggerEffectGroup)
	cb.Do("ArConditions", &t.ArConditions)
}

type DisplayMode struct {
	DwFlags       DT_UINT
	DwWindowMode  DT_ENUM
	NWinLeft      DT_INT
	NWinTop       DT_INT
	DwUIOptWidth  DT_UINT
	DwUIOptHeight DT_UINT
	DwWidth       DT_UINT
	DwHeight      DT_UINT
	NRefreshRate  DT_INT
	DwMonitor     DT_UINT
	EColorSpace   DT_ENUM
	DwMSAALevel   DT_UINT
}

func (t *DisplayMode) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.DwFlags, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.DwWindowMode, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.NWinLeft, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.NWinTop, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.DwUIOptWidth, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwUIOptHeight, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.DwWidth, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.DwHeight, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.NRefreshRate, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.DwMonitor, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.EColorSpace, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.DwMSAALevel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *DisplayMode) Walk(cb WalkCallback) {
	cb.Do("DwFlags", &t.DwFlags)
	cb.Do("DwWindowMode", &t.DwWindowMode)
	cb.Do("NWinLeft", &t.NWinLeft)
	cb.Do("NWinTop", &t.NWinTop)
	cb.Do("DwUIOptWidth", &t.DwUIOptWidth)
	cb.Do("DwUIOptHeight", &t.DwUIOptHeight)
	cb.Do("DwWidth", &t.DwWidth)
	cb.Do("DwHeight", &t.DwHeight)
	cb.Do("NRefreshRate", &t.NRefreshRate)
	cb.Do("DwMonitor", &t.DwMonitor)
	cb.Do("EColorSpace", &t.EColorSpace)
	cb.Do("DwMSAALevel", &t.DwMSAALevel)
}

type Type_2a415346 struct {
	Unk_f501e9d DT_INT
	Unk_5133232 DT_INT
	Unk_dbd4b71 DT_INT
}

func (t *Type_2a415346) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Unk_f501e9d, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.Unk_5133232, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.Unk_dbd4b71, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+12, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_2a415346) Walk(cb WalkCallback) {
	cb.Do("Unk_f501e9d", &t.Unk_f501e9d)
	cb.Do("Unk_5133232", &t.Unk_5133232)
	cb.Do("Unk_dbd4b71", &t.Unk_dbd4b71)
}

type CurrentZoneSubcondition struct {
	// Inherits Subcondition
	// Inherits PolymorphicBase
	DwType  DT_UINT
	BNegate DT_INT
	DwPad   DT_UINT
	EZone   DT_ENUM
}

func (t *CurrentZoneSubcondition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BNegate, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.EZone, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *CurrentZoneSubcondition) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("BNegate", &t.BNegate)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("EZone", &t.EZone)
}

type ZoneProgressRewardInfoMessage struct {
	THeader     RequiredMessageHeader
	Unk_ae25fc7 DT_FIXEDARRAY[*DT_INT]
	Unk_cf0ad45 DT_FIXEDARRAY[*DT_INT]
}

func (t *ZoneProgressRewardInfoMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_ae25fc7, r, &Options{
		ArrayLength: 6,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.Unk_cf0ad45, r, &Options{
		ArrayLength: 6,
		Flags:       1,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+64, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ZoneProgressRewardInfoMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("Unk_ae25fc7", &t.Unk_ae25fc7)
	cb.Do("Unk_cf0ad45", &t.Unk_cf0ad45)
}

type WwiseStandardSoundBank struct {
	// Inherits WwiseSoundBankContentBase
	// Inherits PolymorphicBase
	DwType      DT_UINT
	DwPad       DT_UINT
	PtWWiseBank DT_VARIABLEARRAY[*DT_BYTE]
}

func (t *WwiseStandardSoundBank) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.PtWWiseBank, r, &Options{Flags: 2097152}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *WwiseStandardSoundBank) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("PtWWiseBank", &t.PtWWiseBank)
}

type ConversationRandomChoiceNode struct {
	// Inherits ConversationScopeNode
	// Inherits ConversationTreeNode
	// Inherits PolymorphicBase
	DwType         DT_UINT
	DwPad          DT_UINT
	DwNodeID       DT_UINT
	DwNextNodeID   DT_UINT
	DwParentNodeID DT_UINT
	PtNextNode     DT_INT64
	DwFlags        DT_UINT
	SzComment      DT_CSTRING[*DT_BYTE]
	ArChildNodes   DT_POLYMORPHIC_VARIABLEARRAY[*DT_INT64]
	SnoCondition   DT_SNO
	Unk_d8bf9e4    DT_INT
	SnoSpeaker     DT_SNO
}

func (t *ConversationRandomChoiceNode) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.DwNodeID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwNextNodeID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.DwParentNodeID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.PtNextNode, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.DwFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.SzComment, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.ArChildNodes, r, &Options{Flags: 262145}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.SnoCondition, r, &Options{
		Flags: 1,
		Group: 51,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.Unk_d8bf9e4, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.SnoSpeaker, r, &Options{
		Flags: 1,
		Group: 72,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+104, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ConversationRandomChoiceNode) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("DwNodeID", &t.DwNodeID)
	cb.Do("DwNextNodeID", &t.DwNextNodeID)
	cb.Do("DwParentNodeID", &t.DwParentNodeID)
	cb.Do("PtNextNode", &t.PtNextNode)
	cb.Do("DwFlags", &t.DwFlags)
	cb.Do("SzComment", &t.SzComment)
	cb.Do("ArChildNodes", &t.ArChildNodes)
	cb.Do("SnoCondition", &t.SnoCondition)
	cb.Do("Unk_d8bf9e4", &t.Unk_d8bf9e4)
	cb.Do("SnoSpeaker", &t.SnoSpeaker)
}

type SerializeContainerData struct {
	DwOffset         DT_INT
	DwSizeAndFlags   DT_INT
	NCount           DT_INT
	DwContainerFlags DT_INT
}

func (t *SerializeContainerData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.DwOffset, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.DwSizeAndFlags, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.NCount, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwContainerFlags, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *SerializeContainerData) Walk(cb WalkCallback) {
	cb.Do("DwOffset", &t.DwOffset)
	cb.Do("DwSizeAndFlags", &t.DwSizeAndFlags)
	cb.Do("NCount", &t.NCount)
	cb.Do("DwContainerFlags", &t.DwContainerFlags)
}

type StringLabelHandleEx struct {
	SnoStringList DT_SNO
	SzLabel       DT_UINT
}

func (t *StringLabelHandleEx) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoStringList, r, &Options{
		Flags: 1,
		Group: 42,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.SzLabel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *StringLabelHandleEx) Walk(cb WalkCallback) {
	cb.Do("SnoStringList", &t.SnoStringList)
	cb.Do("SzLabel", &t.SzLabel)
}

type PlayerClassBarbData struct {
	DwUnlockLevel           DT_UINT
	DwTechniqueUnlockLevel  DT_UINT
	SnoTechniqueUnlockQuest DT_SNO
	ArWeaponExpertiseData   DT_VARIABLEARRAY[*BarbWeaponExpertiseData]
}

func (t *PlayerClassBarbData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.DwUnlockLevel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.DwTechniqueUnlockLevel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.SnoTechniqueUnlockQuest, r, &Options{
		Flags: 1,
		Group: 31,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.ArWeaponExpertiseData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PlayerClassBarbData) Walk(cb WalkCallback) {
	cb.Do("DwUnlockLevel", &t.DwUnlockLevel)
	cb.Do("DwTechniqueUnlockLevel", &t.DwTechniqueUnlockLevel)
	cb.Do("SnoTechniqueUnlockQuest", &t.SnoTechniqueUnlockQuest)
	cb.Do("ArWeaponExpertiseData", &t.ArWeaponExpertiseData)
}

type EventRewardChestGizmoData struct {
	// Inherits ChestGizmoData
	// Inherits NamedGizmoData
	// Inherits ActorGizmoData
	// Inherits PolymorphicBase
	DwType                            DT_UINT
	FDisableNonFriendlyOperation      DT_INT
	FWalkToCenter                     DT_INT
	FGizmoStartsDisabled              DT_INT
	FUseStringListName                DT_INT
	FForceMinimapIcon                 DT_INT
	FlOperationRadius                 DT_FLOAT
	Unk_d0b1df5                       DT_FLOAT
	FlGizmoUseTime                    DT_FLOAT
	SnoChannelingEffect               DT_SNO
	Unk_2767229                       DT_INT
	FGizmoShowProgressBar             DT_INT
	Unk_6d9ebe1                       DT_INT
	Unk_5456245                       DT_INT
	Unk_af5815a                       DT_INT
	SnoOnClickEffect                  DT_SNO
	SnoPickedUpEffect                 DT_SNO
	SnoDropOnGroundEffect             DT_SNO
	TConditionData                    GizmoConditionData
	SnoPowerOperator                  DT_SNO
	SnoPowerOperate                   DT_SNO
	SnoPowerOperatorActive            DT_SNO
	SnoPowerOperateActive             DT_SNO
	Unk_359810e                       DT_INT
	NCooldown                         DT_UINT
	Unk_9c8478e                       DT_UINT
	Unk_d45ed2d                       DT_INT
	Unk_f6b20b7                       DT_INT
	Unk_54513b8                       DT_INT
	Unk_fd1f378                       DT_UINT
	Unk_487c14                        DT_UINT
	Unk_87f2609                       DT_UINT
	Unk_158eb4f                       DT_FLOAT
	Unk_ab58cd3                       DT_ENUM
	Unk_91a3966                       DT_UINT
	Unk_25312e5                       DT_UINT
	Unk_4be4371                       DT_INT
	SnoTreasureClass                  DT_SNO
	TLockData                         LockingGizmoData
	FChestRemovesCollisionOnOperation DT_INT
	FChestOperatesOnProximity         DT_INT
	FChestLight                       DT_INT
	Unk_51b0c11                       DT_INT
	Unk_6b4a81d                       DT_FLOAT
	DwPad                             DT_UINT
	FlExpirationDelay                 DT_FLOAT
	Unk_8385e16                       DT_INT
	Unk_fd778e6                       DT_UINT
}

func (t *EventRewardChestGizmoData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.FDisableNonFriendlyOperation, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.FWalkToCenter, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.FGizmoStartsDisabled, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.FUseStringListName, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.FForceMinimapIcon, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.FlOperationRadius, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.Unk_d0b1df5, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.FlGizmoUseTime, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.SnoChannelingEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.Unk_2767229, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.FGizmoShowProgressBar, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+60, &t.Unk_6d9ebe1, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.Unk_5456245, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.Unk_af5815a, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.SnoOnClickEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.SnoPickedUpEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.SnoDropOnGroundEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.TConditionData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.SnoPowerOperator, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.SnoPowerOperate, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.SnoPowerOperatorActive, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+100, &t.SnoPowerOperateActive, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+104, &t.Unk_359810e, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+108, &t.NCooldown, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.Unk_9c8478e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+116, &t.Unk_d45ed2d, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.Unk_f6b20b7, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+124, &t.Unk_54513b8, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.Unk_fd1f378, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+132, &t.Unk_487c14, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+136, &t.Unk_87f2609, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+140, &t.Unk_158eb4f, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+144, &t.Unk_ab58cd3, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+148, &t.Unk_91a3966, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+152, &t.Unk_25312e5, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+156, &t.Unk_4be4371, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+160, &t.SnoTreasureClass, r, &Options{
		Flags: 1,
		Group: 52,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+164, &t.TLockData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+200, &t.FChestRemovesCollisionOnOperation, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+204, &t.FChestOperatesOnProximity, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+208, &t.FChestLight, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+212, &t.Unk_51b0c11, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+216, &t.Unk_6b4a81d, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+220, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+224, &t.FlExpirationDelay, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+228, &t.Unk_8385e16, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+232, &t.Unk_fd778e6, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+240, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *EventRewardChestGizmoData) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("FDisableNonFriendlyOperation", &t.FDisableNonFriendlyOperation)
	cb.Do("FWalkToCenter", &t.FWalkToCenter)
	cb.Do("FGizmoStartsDisabled", &t.FGizmoStartsDisabled)
	cb.Do("FUseStringListName", &t.FUseStringListName)
	cb.Do("FForceMinimapIcon", &t.FForceMinimapIcon)
	cb.Do("FlOperationRadius", &t.FlOperationRadius)
	cb.Do("Unk_d0b1df5", &t.Unk_d0b1df5)
	cb.Do("FlGizmoUseTime", &t.FlGizmoUseTime)
	cb.Do("SnoChannelingEffect", &t.SnoChannelingEffect)
	cb.Do("Unk_2767229", &t.Unk_2767229)
	cb.Do("FGizmoShowProgressBar", &t.FGizmoShowProgressBar)
	cb.Do("Unk_6d9ebe1", &t.Unk_6d9ebe1)
	cb.Do("Unk_5456245", &t.Unk_5456245)
	cb.Do("Unk_af5815a", &t.Unk_af5815a)
	cb.Do("SnoOnClickEffect", &t.SnoOnClickEffect)
	cb.Do("SnoPickedUpEffect", &t.SnoPickedUpEffect)
	cb.Do("SnoDropOnGroundEffect", &t.SnoDropOnGroundEffect)
	cb.Do("TConditionData", &t.TConditionData)
	cb.Do("SnoPowerOperator", &t.SnoPowerOperator)
	cb.Do("SnoPowerOperate", &t.SnoPowerOperate)
	cb.Do("SnoPowerOperatorActive", &t.SnoPowerOperatorActive)
	cb.Do("SnoPowerOperateActive", &t.SnoPowerOperateActive)
	cb.Do("Unk_359810e", &t.Unk_359810e)
	cb.Do("NCooldown", &t.NCooldown)
	cb.Do("Unk_9c8478e", &t.Unk_9c8478e)
	cb.Do("Unk_d45ed2d", &t.Unk_d45ed2d)
	cb.Do("Unk_f6b20b7", &t.Unk_f6b20b7)
	cb.Do("Unk_54513b8", &t.Unk_54513b8)
	cb.Do("Unk_fd1f378", &t.Unk_fd1f378)
	cb.Do("Unk_487c14", &t.Unk_487c14)
	cb.Do("Unk_87f2609", &t.Unk_87f2609)
	cb.Do("Unk_158eb4f", &t.Unk_158eb4f)
	cb.Do("Unk_ab58cd3", &t.Unk_ab58cd3)
	cb.Do("Unk_91a3966", &t.Unk_91a3966)
	cb.Do("Unk_25312e5", &t.Unk_25312e5)
	cb.Do("Unk_4be4371", &t.Unk_4be4371)
	cb.Do("SnoTreasureClass", &t.SnoTreasureClass)
	cb.Do("TLockData", &t.TLockData)
	cb.Do("FChestRemovesCollisionOnOperation", &t.FChestRemovesCollisionOnOperation)
	cb.Do("FChestOperatesOnProximity", &t.FChestOperatesOnProximity)
	cb.Do("FChestLight", &t.FChestLight)
	cb.Do("Unk_51b0c11", &t.Unk_51b0c11)
	cb.Do("Unk_6b4a81d", &t.Unk_6b4a81d)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("FlExpirationDelay", &t.FlExpirationDelay)
	cb.Do("Unk_8385e16", &t.Unk_8385e16)
	cb.Do("Unk_fd778e6", &t.Unk_fd778e6)
}

type RareItemName struct {
	FItemNameIsPrefix     DT_INT
	SnoAffixStringList    DT_SNO
	NAffixStringListIndex DT_INT
	NItemStringListIndex  DT_INT
}

func (t *RareItemName) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.FItemNameIsPrefix, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.SnoAffixStringList, r, &Options{
		Flags: 1,
		Group: 42,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.NAffixStringListIndex, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.NItemStringListIndex, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *RareItemName) Walk(cb WalkCallback) {
	cb.Do("FItemNameIsPrefix", &t.FItemNameIsPrefix)
	cb.Do("SnoAffixStringList", &t.SnoAffixStringList)
	cb.Do("NAffixStringListIndex", &t.NAffixStringListIndex)
	cb.Do("NItemStringListIndex", &t.NItemStringListIndex)
}

type QuestObjectiveSetLink struct {
	DwDestinationPhaseUID DT_UINT
	ELinkType             DT_ENUM
}

func (t *QuestObjectiveSetLink) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.DwDestinationPhaseUID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.ELinkType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *QuestObjectiveSetLink) Walk(cb WalkCallback) {
	cb.Do("DwDestinationPhaseUID", &t.DwDestinationPhaseUID)
	cb.Do("ELinkType", &t.ELinkType)
}

type SNODiskEntry struct {
	SnoGroup     DT_ENUM
	UGuid        DT_UINT
	DwNameOffset DT_UINT
}

func (t *SNODiskEntry) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoGroup, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.UGuid, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwNameOffset, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+12, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *SNODiskEntry) Walk(cb WalkCallback) {
	cb.Do("SnoGroup", &t.SnoGroup)
	cb.Do("UGuid", &t.UGuid)
	cb.Do("DwNameOffset", &t.DwNameOffset)
}

type RogueSpecChangeMessage struct {
	THeader  RequiredMessageHeader
	EOldSpec DT_ENUM
	ENewSpec DT_ENUM
}

func (t *RogueSpecChangeMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.EOldSpec, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.ENewSpec, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *RogueSpecChangeMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("EOldSpec", &t.EOldSpec)
	cb.Do("ENewSpec", &t.ENewSpec)
}

type LinearAxisParams struct {
	Unk_9b43ddf DT_FLOAT
	Unk_a4ff40  DT_FLOAT
	FlMaxSpeed  DT_FLOAT
}

func (t *LinearAxisParams) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Unk_9b43ddf, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.Unk_a4ff40, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.FlMaxSpeed, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+12, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *LinearAxisParams) Walk(cb WalkCallback) {
	cb.Do("Unk_9b43ddf", &t.Unk_9b43ddf)
	cb.Do("Unk_a4ff40", &t.Unk_a4ff40)
	cb.Do("FlMaxSpeed", &t.FlMaxSpeed)
}

type MarkerNPCActorData struct {
	FRandom      DT_INT
	TColorSet    NPCColorSet
	TItems       NPCItems
	PtComponents DT_FIXEDARRAY[*ValidComponent]
	SLookName    DT_UINT
}

func (t *MarkerNPCActorData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.FRandom, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.TColorSet, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.TItems, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.PtComponents, r, &Options{
		ArrayLength: 4,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.SLookName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+56, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *MarkerNPCActorData) Walk(cb WalkCallback) {
	cb.Do("FRandom", &t.FRandom)
	cb.Do("TColorSet", &t.TColorSet)
	cb.Do("TItems", &t.TItems)
	cb.Do("PtComponents", &t.PtComponents)
	cb.Do("SLookName", &t.SLookName)
}

type ScriptEventParamEffectGroup struct {
	// Inherits ScriptEventParamBase
	// Inherits PolymorphicBase
	DwType         DT_UINT
	EParamType     DT_ENUM
	DwPad          DT_UINT
	SnoEffectGroup DT_SNO
}

func (t *ScriptEventParamEffectGroup) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.EParamType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SnoEffectGroup, r, &Options{
		Flags: 513,
		Group: 14,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ScriptEventParamEffectGroup) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("EParamType", &t.EParamType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("SnoEffectGroup", &t.SnoEffectGroup)
}

type WaypointGizmoData struct {
	// Inherits ActorGizmoData
	// Inherits PolymorphicBase
	DwType                       DT_UINT
	DwPad                        DT_UINT
	FDisableNonFriendlyOperation DT_INT
	FWalkToCenter                DT_INT
	FGizmoStartsDisabled         DT_INT
	FUseStringListName           DT_INT
	FForceMinimapIcon            DT_INT
	FlOperationRadius            DT_FLOAT
	Unk_d0b1df5                  DT_FLOAT
	FlGizmoUseTime               DT_FLOAT
	SnoChannelingEffect          DT_SNO
	Unk_2767229                  DT_INT
	FGizmoShowProgressBar        DT_INT
	Unk_6d9ebe1                  DT_INT
	Unk_5456245                  DT_INT
	Unk_af5815a                  DT_INT
	SnoOnClickEffect             DT_SNO
	SnoPickedUpEffect            DT_SNO
	SnoDropOnGroundEffect        DT_SNO
	TConditionData               GizmoConditionData
	SnoPowerOperator             DT_SNO
	SnoPowerOperate              DT_SNO
	SnoPowerOperatorActive       DT_SNO
	SnoPowerOperateActive        DT_SNO
	Unk_359810e                  DT_INT
	NCooldown                    DT_UINT
	Unk_9c8478e                  DT_UINT
	Unk_d45ed2d                  DT_INT
	Unk_f6b20b7                  DT_INT
	Unk_54513b8                  DT_INT
	Unk_fd1f378                  DT_UINT
	Unk_487c14                   DT_UINT
	Unk_87f2609                  DT_UINT
	Unk_158eb4f                  DT_FLOAT
	Unk_ab58cd3                  DT_ENUM
	Unk_91a3966                  DT_UINT
	Unk_25312e5                  DT_UINT
	Unk_4be4371                  DT_INT
}

func (t *WaypointGizmoData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.FDisableNonFriendlyOperation, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.FWalkToCenter, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.FGizmoStartsDisabled, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.FUseStringListName, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.FForceMinimapIcon, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.FlOperationRadius, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.Unk_d0b1df5, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.FlGizmoUseTime, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.SnoChannelingEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.Unk_2767229, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.FGizmoShowProgressBar, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+60, &t.Unk_6d9ebe1, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.Unk_5456245, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.Unk_af5815a, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.SnoOnClickEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.SnoPickedUpEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.SnoDropOnGroundEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.TConditionData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.SnoPowerOperator, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.SnoPowerOperate, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.SnoPowerOperatorActive, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+100, &t.SnoPowerOperateActive, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+104, &t.Unk_359810e, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+108, &t.NCooldown, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.Unk_9c8478e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+116, &t.Unk_d45ed2d, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.Unk_f6b20b7, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+124, &t.Unk_54513b8, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.Unk_fd1f378, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+132, &t.Unk_487c14, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+136, &t.Unk_87f2609, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+140, &t.Unk_158eb4f, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+144, &t.Unk_ab58cd3, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+148, &t.Unk_91a3966, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+152, &t.Unk_25312e5, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+156, &t.Unk_4be4371, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+160, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *WaypointGizmoData) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("FDisableNonFriendlyOperation", &t.FDisableNonFriendlyOperation)
	cb.Do("FWalkToCenter", &t.FWalkToCenter)
	cb.Do("FGizmoStartsDisabled", &t.FGizmoStartsDisabled)
	cb.Do("FUseStringListName", &t.FUseStringListName)
	cb.Do("FForceMinimapIcon", &t.FForceMinimapIcon)
	cb.Do("FlOperationRadius", &t.FlOperationRadius)
	cb.Do("Unk_d0b1df5", &t.Unk_d0b1df5)
	cb.Do("FlGizmoUseTime", &t.FlGizmoUseTime)
	cb.Do("SnoChannelingEffect", &t.SnoChannelingEffect)
	cb.Do("Unk_2767229", &t.Unk_2767229)
	cb.Do("FGizmoShowProgressBar", &t.FGizmoShowProgressBar)
	cb.Do("Unk_6d9ebe1", &t.Unk_6d9ebe1)
	cb.Do("Unk_5456245", &t.Unk_5456245)
	cb.Do("Unk_af5815a", &t.Unk_af5815a)
	cb.Do("SnoOnClickEffect", &t.SnoOnClickEffect)
	cb.Do("SnoPickedUpEffect", &t.SnoPickedUpEffect)
	cb.Do("SnoDropOnGroundEffect", &t.SnoDropOnGroundEffect)
	cb.Do("TConditionData", &t.TConditionData)
	cb.Do("SnoPowerOperator", &t.SnoPowerOperator)
	cb.Do("SnoPowerOperate", &t.SnoPowerOperate)
	cb.Do("SnoPowerOperatorActive", &t.SnoPowerOperatorActive)
	cb.Do("SnoPowerOperateActive", &t.SnoPowerOperateActive)
	cb.Do("Unk_359810e", &t.Unk_359810e)
	cb.Do("NCooldown", &t.NCooldown)
	cb.Do("Unk_9c8478e", &t.Unk_9c8478e)
	cb.Do("Unk_d45ed2d", &t.Unk_d45ed2d)
	cb.Do("Unk_f6b20b7", &t.Unk_f6b20b7)
	cb.Do("Unk_54513b8", &t.Unk_54513b8)
	cb.Do("Unk_fd1f378", &t.Unk_fd1f378)
	cb.Do("Unk_487c14", &t.Unk_487c14)
	cb.Do("Unk_87f2609", &t.Unk_87f2609)
	cb.Do("Unk_158eb4f", &t.Unk_158eb4f)
	cb.Do("Unk_ab58cd3", &t.Unk_ab58cd3)
	cb.Do("Unk_91a3966", &t.Unk_91a3966)
	cb.Do("Unk_25312e5", &t.Unk_25312e5)
	cb.Do("Unk_4be4371", &t.Unk_4be4371)
}

type Type_2cf6a209 struct {
	DwParentNodeID DT_UINT
	SnoPowerAnim   DT_SNO
}

func (t *Type_2cf6a209) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.DwParentNodeID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.SnoPowerAnim, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_2cf6a209) Walk(cb WalkCallback) {
	cb.Do("DwParentNodeID", &t.DwParentNodeID)
	cb.Do("SnoPowerAnim", &t.SnoPowerAnim)
}

type ActorMovingData struct {
	FGenerateFootstepParticles DT_INT
	Unk_56d76cc                DT_INT
	Unk_9d48ee2                DT_INT
}

func (t *ActorMovingData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.FGenerateFootstepParticles, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.Unk_56d76cc, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.Unk_9d48ee2, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+12, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ActorMovingData) Walk(cb WalkCallback) {
	cb.Do("FGenerateFootstepParticles", &t.FGenerateFootstepParticles)
	cb.Do("Unk_56d76cc", &t.Unk_56d76cc)
	cb.Do("Unk_9d48ee2", &t.Unk_9d48ee2)
}

type Type_2d02bd94 struct {
	Unk_7ccd73  DT_INT
	Unk_cab4517 DT_INT
}

func (t *Type_2d02bd94) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Unk_7ccd73, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.Unk_cab4517, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_2d02bd94) Walk(cb WalkCallback) {
	cb.Do("Unk_7ccd73", &t.Unk_7ccd73)
	cb.Do("Unk_cab4517", &t.Unk_cab4517)
}

type Type_2d18fb5c struct {
	Unk_50f7690 DT_UINT
	Unk_29377d2 DT_UINT
	Unk_cd68eaf DT_UINT
	Unk_3696325 DT_UINT
}

func (t *Type_2d18fb5c) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Unk_50f7690, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.Unk_29377d2, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.Unk_cd68eaf, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.Unk_3696325, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_2d18fb5c) Walk(cb WalkCallback) {
	cb.Do("Unk_50f7690", &t.Unk_50f7690)
	cb.Do("Unk_29377d2", &t.Unk_29377d2)
	cb.Do("Unk_cd68eaf", &t.Unk_cd68eaf)
	cb.Do("Unk_3696325", &t.Unk_3696325)
}

type PlayerHasUnlockedMountsSubcondition struct {
	// Inherits Subcondition
	// Inherits PolymorphicBase
	DwType  DT_UINT
	BNegate DT_INT
	DwPad   DT_UINT
}

func (t *PlayerHasUnlockedMountsSubcondition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BNegate, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PlayerHasUnlockedMountsSubcondition) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("BNegate", &t.BNegate)
	cb.Do("DwPad", &t.DwPad)
}

type POICameraInstanceData struct {
	PtProxData      DT_POLYMORPHIC_VARIABLEARRAY[*ProximityDataBase]
	SnoCameraEffect DT_SNO
	Unk_a183154     DT_INT
	Unk_6a602d7     DT_FLOAT
	Unk_c68b42      DT_FLOAT
	Unk_77f6d53     DT_FLOAT
	Unk_da484be     DT_FLOAT
}

func (t *POICameraInstanceData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.PtProxData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SnoCameraEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.Unk_a183154, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.Unk_6a602d7, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.Unk_c68b42, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.Unk_77f6d53, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.Unk_da484be, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *POICameraInstanceData) Walk(cb WalkCallback) {
	cb.Do("PtProxData", &t.PtProxData)
	cb.Do("SnoCameraEffect", &t.SnoCameraEffect)
	cb.Do("Unk_a183154", &t.Unk_a183154)
	cb.Do("Unk_6a602d7", &t.Unk_6a602d7)
	cb.Do("Unk_c68b42", &t.Unk_c68b42)
	cb.Do("Unk_77f6d53", &t.Unk_77f6d53)
	cb.Do("Unk_da484be", &t.Unk_da484be)
}

type UITreeStyle struct {
	// Inherits UIWindowStyle
	// Inherits UIControlStyle
	// Inherits PolymorphicBase
	DwType                    DT_UINT
	DwPad                     DT_UINT
	HParentStyle              UIControlHandle
	Unk_441f783               DT_INT64
	M_eHasModifiedPowerTagMap DT_TAGMAP[*DT_ENUM]
	TConsoleInput             UIControlConsoleInput
	Unk_b4f614c               DT_TAGMAP[*DT_ENUM]
	Unk_466d804               DT_TAGMAP[*DT_ENUM]
}

func (t *UITreeStyle) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.HParentStyle, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_441f783, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.M_eHasModifiedPowerTagMap, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.TConsoleInput, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.Unk_b4f614c, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.Unk_466d804, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+96, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *UITreeStyle) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("HParentStyle", &t.HParentStyle)
	cb.Do("Unk_441f783", &t.Unk_441f783)
	cb.Do("M_eHasModifiedPowerTagMap", &t.M_eHasModifiedPowerTagMap)
	cb.Do("TConsoleInput", &t.TConsoleInput)
	cb.Do("Unk_b4f614c", &t.Unk_b4f614c)
	cb.Do("Unk_466d804", &t.Unk_466d804)
}

type PlayerBuffSubcondition struct {
	// Inherits Subcondition
	// Inherits PolymorphicBase
	DwType       DT_UINT
	BNegate      DT_INT
	DwPad        DT_UINT
	SnoBuffPower DT_SNO
	SzBuffDataID DT_UINT
}

func (t *PlayerBuffSubcondition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BNegate, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SnoBuffPower, r, &Options{
		Flags: 513,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.SzBuffDataID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PlayerBuffSubcondition) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("BNegate", &t.BNegate)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("SnoBuffPower", &t.SnoBuffPower)
	cb.Do("SzBuffDataID", &t.SzBuffDataID)
}

type DebugSetActorUpdateIntervalMessage struct {
	THeader        RequiredMessageHeader
	Ann            DT_ACD_NETWORK_NAME
	UpdateInterval DT_INT
}

func (t *DebugSetActorUpdateIntervalMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Ann, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.UpdateInterval, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+28, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *DebugSetActorUpdateIntervalMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("Ann", &t.Ann)
	cb.Do("UpdateInterval", &t.UpdateInterval)
}

type Type_2d9968c0 struct {
	SnoAffix    DT_SNO
	Unk_828ec72 DT_INT
}

func (t *Type_2d9968c0) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoAffix, r, &Options{
		Flags: 1,
		Group: 107,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.Unk_828ec72, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_2d9968c0) Walk(cb WalkCallback) {
	cb.Do("SnoAffix", &t.SnoAffix)
	cb.Do("Unk_828ec72", &t.Unk_828ec72)
}

type EssencePowerTierEntry_Table struct {
	// Inherits GameBalanceTable
	// Inherits PolymorphicBase
	DwType   DT_UINT
	DwPad    DT_UINT
	TEntries DT_VARIABLEARRAY[*EssencePowerTierEntry]
}

func (t *EssencePowerTierEntry_Table) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TEntries, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *EssencePowerTierEntry_Table) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("TEntries", &t.TEntries)
}

type GameTestingBuyItem struct {
	THeader      RequiredMessageHeader
	DwItemAmount DT_INT64
}

func (t *GameTestingBuyItem) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.DwItemAmount, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *GameTestingBuyItem) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("DwItemAmount", &t.DwItemAmount)
}

type PrefetchRunOnDisk struct {
	UCount DT_UINT
	UStart DT_UINT
}

func (t *PrefetchRunOnDisk) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.UCount, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.UStart, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PrefetchRunOnDisk) Walk(cb WalkCallback) {
	cb.Do("UCount", &t.UCount)
	cb.Do("UStart", &t.UStart)
}

type WorldServerData struct {
	PtSceneChunks DT_VARIABLEARRAY[*SceneChunk]
	SnoScript     DT_SNO
	NSeed         DT_INT
	FlMinX        DT_FLOAT
	FlMinY        DT_FLOAT
	FlMaxX        DT_FLOAT
	FlMaxY        DT_FLOAT
	ArWeatherSNOs DT_VARIABLEARRAY[*DT_SNO]
	ArSubzones    DT_VARIABLEARRAY[*DT_SNO]
}

func (t *WorldServerData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.PtSceneChunks, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoScript, r, &Options{
		Flags: 1,
		Group: 35,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.NSeed, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.FlMinX, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.FlMinY, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.FlMaxX, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.FlMaxY, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.ArWeatherSNOs, r, &Options{
		Flags: 1,
		Group: 47,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.ArSubzones, r, &Options{Group: 80}); err != nil {
		return err
	}
	if _, err := r.Seek(p+72, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *WorldServerData) Walk(cb WalkCallback) {
	cb.Do("PtSceneChunks", &t.PtSceneChunks)
	cb.Do("SnoScript", &t.SnoScript)
	cb.Do("NSeed", &t.NSeed)
	cb.Do("FlMinX", &t.FlMinX)
	cb.Do("FlMinY", &t.FlMinY)
	cb.Do("FlMaxX", &t.FlMaxX)
	cb.Do("FlMaxY", &t.FlMaxY)
	cb.Do("ArWeatherSNOs", &t.ArWeatherSNOs)
	cb.Do("ArSubzones", &t.ArSubzones)
}

type SocketedEffects struct {
	ESocketTarget DT_ENUM
	PtAttributes  DT_VARIABLEARRAY[*AttributeSpecifier]
	TStringLabel  DT_UINT
}

func (t *SocketedEffects) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.ESocketTarget, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.PtAttributes, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.TStringLabel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *SocketedEffects) Walk(cb WalkCallback) {
	cb.Do("ESocketTarget", &t.ESocketTarget)
	cb.Do("PtAttributes", &t.PtAttributes)
	cb.Do("TStringLabel", &t.TStringLabel)
}

type ActorAnimSetPreloadHelper struct {
	SnoActor DT_SNO
	TAnimSet SerialDataInfo
}

func (t *ActorAnimSetPreloadHelper) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoActor, r, &Options{
		Flags: 1,
		Group: 1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.TAnimSet, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+12, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ActorAnimSetPreloadHelper) Walk(cb WalkCallback) {
	cb.Do("SnoActor", &t.SnoActor)
	cb.Do("TAnimSet", &t.TAnimSet)
}

type Type_2f20f9fd struct {
	// Inherits GameBalanceTable
	// Inherits PolymorphicBase
	DwType   DT_UINT
	DwPad    DT_UINT
	TEntries DT_VARIABLEARRAY[*Type_9467bb76]
}

func (t *Type_2f20f9fd) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TEntries, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_2f20f9fd) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("TEntries", &t.TEntries)
}

type PlayerSkillModPointsSubcondition struct {
	// Inherits Type_d3c3637f
	// Inherits Subcondition
	// Inherits PolymorphicBase
	DwType          DT_UINT
	BNegate         DT_INT
	EComparisonOp   DT_ENUM
	DwPad           DT_UINT
	SnoSkillPower   DT_SNO
	SzModName       DT_UINT
	NSkillModPoints DT_INT
}

func (t *PlayerSkillModPointsSubcondition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BNegate, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.EComparisonOp, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.SnoSkillPower, r, &Options{
		Flags: 513,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.SzModName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.NSkillModPoints, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PlayerSkillModPointsSubcondition) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("BNegate", &t.BNegate)
	cb.Do("EComparisonOp", &t.EComparisonOp)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("SnoSkillPower", &t.SnoSkillPower)
	cb.Do("SzModName", &t.SzModName)
	cb.Do("NSkillModPoints", &t.NSkillModPoints)
}

type ParagonUnequipBoardMessage struct {
	THeader  RequiredMessageHeader
	SnoBoard DT_SNO
}

func (t *ParagonUnequipBoardMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoBoard, r, &Options{
		Flags: 1,
		Group: 108,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+20, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ParagonUnequipBoardMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("SnoBoard", &t.SnoBoard)
}

type ActorMonsterData struct {
	EGender                       DT_ENUM
	FIsNPC                        DT_INT
	Unk_7c902e4                   DT_INT
	Unk_ac5481c                   DT_INT
	SnoNPCOperateSound            DT_SNO
	Unk_ac1cb2e                   DT_SNO
	Unk_765a638                   DT_FLOAT
	TNPCServiceData               NPCServiceData
	EHirelingClass                DT_ENUM
	FConvertsDamageToDamageStates DT_INT
	Unk_6bce993                   DT_VARIABLEARRAY[*Type_5c44ae48]
	Unk_6b4a81d                   DT_FLOAT
	SnoMonsterFamily              DT_SNO
	SzArchetype                   DT_UINT
	Unk_de0631b                   DT_SNO
	EBaseElement                  DT_ENUM
	SnoMainHand                   DT_SNO
	SnoOffHand                    DT_SNO
	TLevelScaling                 LevelScalingData
	NGoldGranted                  DT_INT
	SnoTreasureClass              DT_SNO
	SnoTreasureClassElite         DT_SNO
	SnoTreasureClassSuperElite    DT_SNO
	FlSummonLifetime              DT_FLOAT
	NSummonMaxConcurrent          DT_INT
	NSummonMaxTotal               DT_INT
	ArAIBehaviors                 DT_FIXEDARRAY[*DT_SNO]
	BKillSummonsOnDeath           DT_INT
	SnoSummonActor                DT_FIXEDARRAY[*DT_SNO]
	ArSummonActors                DT_VARIABLEARRAY[*SummonActorEntry]
	SnoAffixes                    DT_FIXEDARRAY[*DT_SNO]
	Unk_c8306c                    DT_FIXEDARRAY[*Type_2d9968c0]
	SnoDisallowedAffixes          DT_VARIABLEARRAY[*DT_SNO]
	Unk_c2d611d                   DT_VARIABLEARRAY[*DT_GBID]
	EAITargetStyleNormal          DT_ENUM
	EAITargetStyleElite           DT_ENUM
	Unk_130279f                   DT_GBID
	Unk_4b9e5c9                   DT_GBID
	Unk_e7a2637                   DT_UINT
	SzInternalName                DT_CHARARRAY
	BDoesRetreat                  DT_INT
	Unk_50569ba                   DT_INT
	Unk_7a3dc4a                   DT_UINT
	SnoMount                      DT_SNO
	SnoPowerPossessed             DT_SNO
	Unk_87dbd3a                   DT_ENUM
	Unk_7859c5b                   DT_INT
	BIsWorldBoss                  DT_INT
	Unk_bc58cee                   DT_INT
	Unk_7fdab9c                   DT_INT
	Unk_e7ee8f1                   DT_INT
	Unk_e4c90d3                   DT_INT
	Unk_12ecd6a                   DT_INT
	FlHPScalarOverride            DT_FLOAT
	FlDamageScalarOverride        DT_FLOAT
	Unk_c2cc767                   DT_SNO
	SnoStaggerPower               DT_SNO
	SnoStaggerSettings            DT_SNO
	SnoBossObserver               DT_SNO
	Unk_1627b04                   DT_FLOAT
	Unk_401e0d6                   DT_FLOAT
	Unk_401dfd8                   DT_FLOAT
	Unk_f68cd00                   DT_FLOAT
	Unk_f68cc02                   DT_FLOAT
	FlBossCameraSmoothing         DT_FLOAT
	Unk_5428a5e                   DT_FLOAT
	Unk_3b9132c                   DT_FLOAT
	Unk_c0cc954                   DT_FLOAT
	Unk_d5178b2                   DT_FLOAT
	Unk_e08f0df                   DT_FLOAT
}

func (t *ActorMonsterData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.EGender, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.FIsNPC, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.Unk_7c902e4, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.Unk_ac5481c, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoNPCOperateSound, r, &Options{
		Flags: 1,
		Group: 40,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.Unk_ac1cb2e, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_765a638, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.TNPCServiceData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.EHirelingClass, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.FConvertsDamageToDamageStates, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_6bce993, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.Unk_6b4a81d, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.SnoMonsterFamily, r, &Options{
		Flags: 1,
		Group: 82,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.SzArchetype, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+100, &t.Unk_de0631b, r, &Options{
		Flags: 513,
		Group: 9,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+104, &t.EBaseElement, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+108, &t.SnoMainHand, r, &Options{
		Flags: 1,
		Group: 98,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.SnoOffHand, r, &Options{
		Flags: 1,
		Group: 98,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+116, &t.TLevelScaling, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+132, &t.NGoldGranted, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+136, &t.SnoTreasureClass, r, &Options{
		Flags: 1,
		Group: 52,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+140, &t.SnoTreasureClassElite, r, &Options{
		Flags: 1,
		Group: 52,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+144, &t.SnoTreasureClassSuperElite, r, &Options{
		Flags: 1,
		Group: 52,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+148, &t.FlSummonLifetime, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+152, &t.NSummonMaxConcurrent, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+156, &t.NSummonMaxTotal, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+160, &t.ArAIBehaviors, r, &Options{
		ArrayLength: 6,
		Flags:       1,
		Group:       3,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+184, &t.BKillSummonsOnDeath, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+188, &t.SnoSummonActor, r, &Options{
		ArrayLength: 6,
		Flags:       1,
		Group:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+216, &t.ArSummonActors, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+232, &t.SnoAffixes, r, &Options{
		ArrayLength: 4,
		Flags:       1,
		Group:       107,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+248, &t.Unk_c8306c, r, &Options{
		ArrayLength: 4,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+280, &t.SnoDisallowedAffixes, r, &Options{
		Flags: 513,
		Group: 107,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+296, &t.Unk_c2d611d, r, &Options{
		Flags: 1,
		Group: 66,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+312, &t.EAITargetStyleNormal, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+316, &t.EAITargetStyleElite, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+320, &t.Unk_130279f, r, &Options{
		Flags: 1,
		Group: 42,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+324, &t.Unk_4b9e5c9, r, &Options{
		Flags: 1,
		Group: 42,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+328, &t.Unk_e7a2637, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+332, &t.SzInternalName, r, &Options{
		ArrayLength: 128,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+460, &t.BDoesRetreat, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+464, &t.Unk_50569ba, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+468, &t.Unk_7a3dc4a, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+472, &t.SnoMount, r, &Options{
		Flags: 1,
		Group: 1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+476, &t.SnoPowerPossessed, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+480, &t.Unk_87dbd3a, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+484, &t.Unk_7859c5b, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+488, &t.BIsWorldBoss, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+492, &t.Unk_bc58cee, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+496, &t.Unk_7fdab9c, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+500, &t.Unk_e7ee8f1, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+504, &t.Unk_e4c90d3, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+508, &t.Unk_12ecd6a, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+512, &t.FlHPScalarOverride, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+516, &t.FlDamageScalarOverride, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+520, &t.Unk_c2cc767, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+524, &t.SnoStaggerPower, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+528, &t.SnoStaggerSettings, r, &Options{
		Flags: 1,
		Group: 130,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+532, &t.SnoBossObserver, r, &Options{
		Flags: 1,
		Group: 26,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+536, &t.Unk_1627b04, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+540, &t.Unk_401e0d6, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+544, &t.Unk_401dfd8, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+548, &t.Unk_f68cd00, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+552, &t.Unk_f68cc02, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+556, &t.FlBossCameraSmoothing, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+560, &t.Unk_5428a5e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+564, &t.Unk_3b9132c, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+568, &t.Unk_c0cc954, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+572, &t.Unk_d5178b2, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+576, &t.Unk_e08f0df, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+584, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ActorMonsterData) Walk(cb WalkCallback) {
	cb.Do("EGender", &t.EGender)
	cb.Do("FIsNPC", &t.FIsNPC)
	cb.Do("Unk_7c902e4", &t.Unk_7c902e4)
	cb.Do("Unk_ac5481c", &t.Unk_ac5481c)
	cb.Do("SnoNPCOperateSound", &t.SnoNPCOperateSound)
	cb.Do("Unk_ac1cb2e", &t.Unk_ac1cb2e)
	cb.Do("Unk_765a638", &t.Unk_765a638)
	cb.Do("TNPCServiceData", &t.TNPCServiceData)
	cb.Do("EHirelingClass", &t.EHirelingClass)
	cb.Do("FConvertsDamageToDamageStates", &t.FConvertsDamageToDamageStates)
	cb.Do("Unk_6bce993", &t.Unk_6bce993)
	cb.Do("Unk_6b4a81d", &t.Unk_6b4a81d)
	cb.Do("SnoMonsterFamily", &t.SnoMonsterFamily)
	cb.Do("SzArchetype", &t.SzArchetype)
	cb.Do("Unk_de0631b", &t.Unk_de0631b)
	cb.Do("EBaseElement", &t.EBaseElement)
	cb.Do("SnoMainHand", &t.SnoMainHand)
	cb.Do("SnoOffHand", &t.SnoOffHand)
	cb.Do("TLevelScaling", &t.TLevelScaling)
	cb.Do("NGoldGranted", &t.NGoldGranted)
	cb.Do("SnoTreasureClass", &t.SnoTreasureClass)
	cb.Do("SnoTreasureClassElite", &t.SnoTreasureClassElite)
	cb.Do("SnoTreasureClassSuperElite", &t.SnoTreasureClassSuperElite)
	cb.Do("FlSummonLifetime", &t.FlSummonLifetime)
	cb.Do("NSummonMaxConcurrent", &t.NSummonMaxConcurrent)
	cb.Do("NSummonMaxTotal", &t.NSummonMaxTotal)
	cb.Do("ArAIBehaviors", &t.ArAIBehaviors)
	cb.Do("BKillSummonsOnDeath", &t.BKillSummonsOnDeath)
	cb.Do("SnoSummonActor", &t.SnoSummonActor)
	cb.Do("ArSummonActors", &t.ArSummonActors)
	cb.Do("SnoAffixes", &t.SnoAffixes)
	cb.Do("Unk_c8306c", &t.Unk_c8306c)
	cb.Do("SnoDisallowedAffixes", &t.SnoDisallowedAffixes)
	cb.Do("Unk_c2d611d", &t.Unk_c2d611d)
	cb.Do("EAITargetStyleNormal", &t.EAITargetStyleNormal)
	cb.Do("EAITargetStyleElite", &t.EAITargetStyleElite)
	cb.Do("Unk_130279f", &t.Unk_130279f)
	cb.Do("Unk_4b9e5c9", &t.Unk_4b9e5c9)
	cb.Do("Unk_e7a2637", &t.Unk_e7a2637)
	cb.Do("SzInternalName", &t.SzInternalName)
	cb.Do("BDoesRetreat", &t.BDoesRetreat)
	cb.Do("Unk_50569ba", &t.Unk_50569ba)
	cb.Do("Unk_7a3dc4a", &t.Unk_7a3dc4a)
	cb.Do("SnoMount", &t.SnoMount)
	cb.Do("SnoPowerPossessed", &t.SnoPowerPossessed)
	cb.Do("Unk_87dbd3a", &t.Unk_87dbd3a)
	cb.Do("Unk_7859c5b", &t.Unk_7859c5b)
	cb.Do("BIsWorldBoss", &t.BIsWorldBoss)
	cb.Do("Unk_bc58cee", &t.Unk_bc58cee)
	cb.Do("Unk_7fdab9c", &t.Unk_7fdab9c)
	cb.Do("Unk_e7ee8f1", &t.Unk_e7ee8f1)
	cb.Do("Unk_e4c90d3", &t.Unk_e4c90d3)
	cb.Do("Unk_12ecd6a", &t.Unk_12ecd6a)
	cb.Do("FlHPScalarOverride", &t.FlHPScalarOverride)
	cb.Do("FlDamageScalarOverride", &t.FlDamageScalarOverride)
	cb.Do("Unk_c2cc767", &t.Unk_c2cc767)
	cb.Do("SnoStaggerPower", &t.SnoStaggerPower)
	cb.Do("SnoStaggerSettings", &t.SnoStaggerSettings)
	cb.Do("SnoBossObserver", &t.SnoBossObserver)
	cb.Do("Unk_1627b04", &t.Unk_1627b04)
	cb.Do("Unk_401e0d6", &t.Unk_401e0d6)
	cb.Do("Unk_401dfd8", &t.Unk_401dfd8)
	cb.Do("Unk_f68cd00", &t.Unk_f68cd00)
	cb.Do("Unk_f68cc02", &t.Unk_f68cc02)
	cb.Do("FlBossCameraSmoothing", &t.FlBossCameraSmoothing)
	cb.Do("Unk_5428a5e", &t.Unk_5428a5e)
	cb.Do("Unk_3b9132c", &t.Unk_3b9132c)
	cb.Do("Unk_c0cc954", &t.Unk_c0cc954)
	cb.Do("Unk_d5178b2", &t.Unk_d5178b2)
	cb.Do("Unk_e08f0df", &t.Unk_e08f0df)
}

type MaterialEnumValueDefinition struct {
	// Inherits DefaultMaterialValueDefinition
	// Inherits PolymorphicBase
	DwType DT_UINT
	DwPad  DT_UINT
	VValue DT_VECTOR4D
}

func (t *MaterialEnumValueDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.VValue, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *MaterialEnumValueDefinition) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("VValue", &t.VValue)
}

type dmMeshTriangleMirror struct {
	I1            DT_INT
	I2            DT_INT
	I3            DT_INT
	W1            DT_INT
	W2            DT_INT
	W3            DT_INT
	DwMaterialId  DT_WORD
	DwGameFlags   DT_WORD
	DwIncludeMask DT_WORD
}

func (t *dmMeshTriangleMirror) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.I1, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.I2, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.I3, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.W1, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.W2, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.W3, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.DwMaterialId, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+26, &t.DwGameFlags, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.DwIncludeMask, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *dmMeshTriangleMirror) Walk(cb WalkCallback) {
	cb.Do("I1", &t.I1)
	cb.Do("I2", &t.I2)
	cb.Do("I3", &t.I3)
	cb.Do("W1", &t.W1)
	cb.Do("W2", &t.W2)
	cb.Do("W3", &t.W3)
	cb.Do("DwMaterialId", &t.DwMaterialId)
	cb.Do("DwGameFlags", &t.DwGameFlags)
	cb.Do("DwIncludeMask", &t.DwIncludeMask)
}

type Currencies_Table struct {
	// Inherits GameBalanceTable
	// Inherits PolymorphicBase
	DwType   DT_UINT
	DwPad    DT_UINT
	TEntries DT_VARIABLEARRAY[*Currencies]
}

func (t *Currencies_Table) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TEntries, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Currencies_Table) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("TEntries", &t.TEntries)
}

type WorldTierUnlockedMessage struct {
	THeader    RequiredMessageHeader
	EWorldTier DT_INT
}

func (t *WorldTierUnlockedMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.EWorldTier, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+20, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *WorldTierUnlockedMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("EWorldTier", &t.EWorldTier)
}

type ScoreStatistic struct{}

func (t *ScoreStatistic) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if _, err := r.Seek(p+1, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ScoreStatistic) Walk(cb WalkCallback) {}

type SpeedTreeWind8 struct {
	// Inherits SpeedTreeWindBase
	// Inherits PolymorphicBase
	DwType  DT_UINT
	DwPad   DT_UINT
	TParams SpeedTreeWind8Params
}

func (t *SpeedTreeWind8) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TParams, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+1000, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *SpeedTreeWind8) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("TParams", &t.TParams)
}

type BoneStructureInfo struct {
	TBoneName       AppBone
	TParentBoneName AppBone
	FSnapGround     DT_INT
}

func (t *BoneStructureInfo) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.TBoneName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.TParentBoneName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.FSnapGround, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+12, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *BoneStructureInfo) Walk(cb WalkCallback) {
	cb.Do("TBoneName", &t.TBoneName)
	cb.Do("TParentBoneName", &t.TParentBoneName)
	cb.Do("FSnapGround", &t.FSnapGround)
}

type PlayerActorSetInitialMessage struct {
	THeader               RequiredMessageHeader
	Ann                   DT_ACD_NETWORK_NAME
	DwPlayerGameAccountId DT_UINT
}

func (t *PlayerActorSetInitialMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Ann, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.DwPlayerGameAccountId, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+28, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PlayerActorSetInitialMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("Ann", &t.Ann)
	cb.Do("DwPlayerGameAccountId", &t.DwPlayerGameAccountId)
}

type Type_300a1e1b struct {
	// Inherits Type_7e418ba8
	// Inherits PolymorphicBase
	DwType       DT_UINT
	Unk_2de4987  DT_UINT
	ArConditions DT_POLYMORPHIC_VARIABLEARRAY[*DT_INT64]
	BEnd         DT_INT
	DwPad        DT_UINT
	Unk_b8abd18  DT_FLOAT
}

func (t *Type_300a1e1b) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_2de4987, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ArConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.BEnd, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.Unk_b8abd18, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+64, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_300a1e1b) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("Unk_2de4987", &t.Unk_2de4987)
	cb.Do("ArConditions", &t.ArConditions)
	cb.Do("BEnd", &t.BEnd)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("Unk_b8abd18", &t.Unk_b8abd18)
}

type Type_303dbf00 struct {
	DwType      DT_UINT
	Unk_9b2bc26 Type_340f2b52
	Unk_77ed19a DT_ENUM
	DwPad       DT_UINT
}

func (t *Type_303dbf00) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_9b2bc26, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.Unk_77ed19a, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+56, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_303dbf00) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("Unk_9b2bc26", &t.Unk_9b2bc26)
	cb.Do("Unk_77ed19a", &t.Unk_77ed19a)
	cb.Do("DwPad", &t.DwPad)
}

type LoreDefinition struct {
	NXPTier         DT_INT
	SnoConversation DT_SNO
}

func (t *LoreDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.NXPTier, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.SnoConversation, r, &Options{
		Flags: 1,
		Group: 12,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *LoreDefinition) Walk(cb WalkCallback) {
	cb.Do("NXPTier", &t.NXPTier)
	cb.Do("SnoConversation", &t.SnoConversation)
}

type Type_30511dbc struct {
	DwFormulaHash DT_UINT
	BEvaluateOnce DT_INT
}

func (t *Type_30511dbc) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.DwFormulaHash, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.BEvaluateOnce, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_30511dbc) Walk(cb WalkCallback) {
	cb.Do("DwFormulaHash", &t.DwFormulaHash)
	cb.Do("BEvaluateOnce", &t.BEvaluateOnce)
}

type OnDotApplyBuffCallback struct {
	// Inherits BuffCallbackBase
	// Inherits PolymorphicBase
	DwType                DT_UINT
	DwPad                 DT_UINT
	SnoTriggerEffectGroup DT_SNO
	ArConditions          DT_POLYMORPHIC_VARIABLEARRAY[*DT_INT64]
}

func (t *OnDotApplyBuffCallback) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoTriggerEffectGroup, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ArConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *OnDotApplyBuffCallback) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("SnoTriggerEffectGroup", &t.SnoTriggerEffectGroup)
	cb.Do("ArConditions", &t.ArConditions)
}

type PowerPayloadDefinition struct {
	Unk_84473c1                DT_SNO
	Unk_2c0d1b7                DT_SNO
	DwID                       DT_UINT
	EForcedDamageType          DT_ENUM
	TDamage                    HitpointSpecifier
	Unk_16bcce1                DT_INT
	TDamageVariance            DT_STRING_FORMULA
	Unk_c1c7b04                DT_INT
	Unk_907cc39                DT_STRING_FORMULA
	TFortifiedHealth           HitpointSpecifier
	TApplyFreeze               DT_STRING_FORMULA
	Unk_634341a                DT_STRING_FORMULA
	Unk_e659b0f                DT_ENUM
	THeal                      HitpointSpecifier
	EHealType                  DT_ENUM
	Unk_58227bf                DT_INT
	Unk_8bc45f2                DT_INT
	Unk_15c6c03                DT_INT
	Unk_e842c84                DT_INT
	Unk_b8f2b                  DT_ENUM
	BHasCombatEffectOverride   DT_INT
	TCombatEffectOverride      DT_STRING_FORMULA
	Unk_ddcd868                DT_ENUM
	SnoNormalHitEffectGroup    DT_SNO
	SnoTargetImpactEffectGroup DT_SNO
	Unk_b65cd61                DT_FLOAT
	IPowerNeedTarget           DT_INT
	Unk_b9a00d9                DT_INT
	Unk_969096b                DT_INT
	Unk_5885b8                 DT_ENUM
	Unk_f38eac9                DT_INT
	Unk_67260fc                OnHitSounds
}

func (t *PowerPayloadDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Unk_84473c1, r, &Options{
		Flags: 1,
		Group: 98,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.Unk_2c0d1b7, r, &Options{
		Flags: 1,
		Group: 98,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.EForcedDamageType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TDamage, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.Unk_16bcce1, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.TDamageVariance, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.Unk_c1c7b04, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+136, &t.Unk_907cc39, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+168, &t.TFortifiedHealth, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+240, &t.TApplyFreeze, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+272, &t.Unk_634341a, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+304, &t.Unk_e659b0f, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+312, &t.THeal, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+384, &t.EHealType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+388, &t.Unk_58227bf, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+392, &t.Unk_8bc45f2, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+396, &t.Unk_15c6c03, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+400, &t.Unk_e842c84, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+404, &t.Unk_b8f2b, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+408, &t.BHasCombatEffectOverride, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+416, &t.TCombatEffectOverride, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+448, &t.Unk_ddcd868, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+452, &t.SnoNormalHitEffectGroup, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+456, &t.SnoTargetImpactEffectGroup, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+460, &t.Unk_b65cd61, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+464, &t.IPowerNeedTarget, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+468, &t.Unk_b9a00d9, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+472, &t.Unk_969096b, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+476, &t.Unk_5885b8, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+480, &t.Unk_f38eac9, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+484, &t.Unk_67260fc, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+496, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PowerPayloadDefinition) Walk(cb WalkCallback) {
	cb.Do("Unk_84473c1", &t.Unk_84473c1)
	cb.Do("Unk_2c0d1b7", &t.Unk_2c0d1b7)
	cb.Do("DwID", &t.DwID)
	cb.Do("EForcedDamageType", &t.EForcedDamageType)
	cb.Do("TDamage", &t.TDamage)
	cb.Do("Unk_16bcce1", &t.Unk_16bcce1)
	cb.Do("TDamageVariance", &t.TDamageVariance)
	cb.Do("Unk_c1c7b04", &t.Unk_c1c7b04)
	cb.Do("Unk_907cc39", &t.Unk_907cc39)
	cb.Do("TFortifiedHealth", &t.TFortifiedHealth)
	cb.Do("TApplyFreeze", &t.TApplyFreeze)
	cb.Do("Unk_634341a", &t.Unk_634341a)
	cb.Do("Unk_e659b0f", &t.Unk_e659b0f)
	cb.Do("THeal", &t.THeal)
	cb.Do("EHealType", &t.EHealType)
	cb.Do("Unk_58227bf", &t.Unk_58227bf)
	cb.Do("Unk_8bc45f2", &t.Unk_8bc45f2)
	cb.Do("Unk_15c6c03", &t.Unk_15c6c03)
	cb.Do("Unk_e842c84", &t.Unk_e842c84)
	cb.Do("Unk_b8f2b", &t.Unk_b8f2b)
	cb.Do("BHasCombatEffectOverride", &t.BHasCombatEffectOverride)
	cb.Do("TCombatEffectOverride", &t.TCombatEffectOverride)
	cb.Do("Unk_ddcd868", &t.Unk_ddcd868)
	cb.Do("SnoNormalHitEffectGroup", &t.SnoNormalHitEffectGroup)
	cb.Do("SnoTargetImpactEffectGroup", &t.SnoTargetImpactEffectGroup)
	cb.Do("Unk_b65cd61", &t.Unk_b65cd61)
	cb.Do("IPowerNeedTarget", &t.IPowerNeedTarget)
	cb.Do("Unk_b9a00d9", &t.Unk_b9a00d9)
	cb.Do("Unk_969096b", &t.Unk_969096b)
	cb.Do("Unk_5885b8", &t.Unk_5885b8)
	cb.Do("Unk_f38eac9", &t.Unk_f38eac9)
	cb.Do("Unk_67260fc", &t.Unk_67260fc)
}

type AICellBytes struct {
	M_data DT_VARIABLEARRAY[*DT_BYTE]
}

func (t *AICellBytes) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.M_data, r, &Options{Flags: 262144}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *AICellBytes) Walk(cb WalkCallback) {
	cb.Do("M_data", &t.M_data)
}

type SurfaceGrid struct {
	Grid         DT_VARIABLEARRAY[*DT_WORD]
	ArPrimitives DT_VARIABLEARRAY[*SurfaceGridPrimitive]
	AabbBounds   AABB
	DwRows       DT_UINT
	DwColumns    DT_UINT
}

func (t *SurfaceGrid) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Grid, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.ArPrimitives, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.AabbBounds, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.DwRows, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+60, &t.DwColumns, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+64, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *SurfaceGrid) Walk(cb WalkCallback) {
	cb.Do("Grid", &t.Grid)
	cb.Do("ArPrimitives", &t.ArPrimitives)
	cb.Do("AabbBounds", &t.AabbBounds)
	cb.Do("DwRows", &t.DwRows)
	cb.Do("DwColumns", &t.DwColumns)
}

type Type_30cc9076 struct {
	THeader               RequiredMessageHeader
	DwPlayerGameAccountId DT_UINT
	SnoAchievement        DT_SNO
	BManuallyTracked      DT_INT
}

func (t *Type_30cc9076) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.DwPlayerGameAccountId, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.SnoAchievement, r, &Options{
		Flags: 1,
		Group: 99,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.BManuallyTracked, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+28, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_30cc9076) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("DwPlayerGameAccountId", &t.DwPlayerGameAccountId)
	cb.Do("SnoAchievement", &t.SnoAchievement)
	cb.Do("BManuallyTracked", &t.BManuallyTracked)
}

type ExperienceLevelAlt_Table struct {
	// Inherits GameBalanceTable
	// Inherits PolymorphicBase
	DwType   DT_UINT
	DwPad    DT_UINT
	TEntries DT_VARIABLEARRAY[*ExperienceLevelAlt]
}

func (t *ExperienceLevelAlt_Table) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TEntries, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ExperienceLevelAlt_Table) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("TEntries", &t.TEntries)
}

type SavedPlayerTitle struct {
	SnoPrefix DT_SNO
	SnoSuffix DT_SNO
}

func (t *SavedPlayerTitle) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoPrefix, r, &Options{
		Flags: 1,
		Group: 120,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.SnoSuffix, r, &Options{
		Flags: 1,
		Group: 120,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *SavedPlayerTitle) Walk(cb WalkCallback) {
	cb.Do("SnoPrefix", &t.SnoPrefix)
	cb.Do("SnoSuffix", &t.SnoSuffix)
}

type Type_31220ee1 struct {
	FlZoomScaleMin DT_FLOAT
	Unk_dee8d29    DT_FLOAT
	FlZoomScaleMax DT_FLOAT
	Unk_92c785e    DT_FLOAT
	Unk_1f05fd7    DT_FLOAT
	Unk_a465346    DT_FLOAT
	Unk_4548ccf    DT_FLOAT
	Unk_33bda99    DT_FLOAT
	Unk_1c550ca    DT_FLOAT
	Unk_6d6c5ac    DT_FLOAT
	Unk_1b2420c    DT_FLOAT
	Unk_7e4ef05    DT_FLOAT
	Unk_9814907    DT_FLOAT
	Unk_fde953b    DT_FLOAT
	Unk_cc72c59    DT_FLOAT
	Unk_a19ea25    DT_INT
	Unk_9c74994    DT_FLOAT
}

func (t *Type_31220ee1) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.FlZoomScaleMin, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.Unk_dee8d29, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.FlZoomScaleMax, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.Unk_92c785e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_1f05fd7, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.Unk_a465346, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_4548ccf, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.Unk_33bda99, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.Unk_1c550ca, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.Unk_6d6c5ac, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.Unk_1b2420c, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.Unk_7e4ef05, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.Unk_9814907, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.Unk_fde953b, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.Unk_cc72c59, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+60, &t.Unk_a19ea25, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.Unk_9c74994, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+68, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_31220ee1) Walk(cb WalkCallback) {
	cb.Do("FlZoomScaleMin", &t.FlZoomScaleMin)
	cb.Do("Unk_dee8d29", &t.Unk_dee8d29)
	cb.Do("FlZoomScaleMax", &t.FlZoomScaleMax)
	cb.Do("Unk_92c785e", &t.Unk_92c785e)
	cb.Do("Unk_1f05fd7", &t.Unk_1f05fd7)
	cb.Do("Unk_a465346", &t.Unk_a465346)
	cb.Do("Unk_4548ccf", &t.Unk_4548ccf)
	cb.Do("Unk_33bda99", &t.Unk_33bda99)
	cb.Do("Unk_1c550ca", &t.Unk_1c550ca)
	cb.Do("Unk_6d6c5ac", &t.Unk_6d6c5ac)
	cb.Do("Unk_1b2420c", &t.Unk_1b2420c)
	cb.Do("Unk_7e4ef05", &t.Unk_7e4ef05)
	cb.Do("Unk_9814907", &t.Unk_9814907)
	cb.Do("Unk_fde953b", &t.Unk_fde953b)
	cb.Do("Unk_cc72c59", &t.Unk_cc72c59)
	cb.Do("Unk_a19ea25", &t.Unk_a19ea25)
	cb.Do("Unk_9c74994", &t.Unk_9c74994)
}

type WwiseMetaDataSoundBank struct {
	// Inherits WwiseSoundBankContentBase
	// Inherits PolymorphicBase
	DwType          DT_UINT
	DwPad           DT_UINT
	Unk_ce10c35     DT_VARIABLEARRAY[*Type_d6dab54d]
	PtWWiseBank     DT_VARIABLEARRAY[*DT_BYTE]
	ArMusicSegments DT_VARIABLEARRAY[*Type_53844691]
}

func (t *WwiseMetaDataSoundBank) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_ce10c35, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.PtWWiseBank, r, &Options{Flags: 2097152}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.ArMusicSegments, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+64, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *WwiseMetaDataSoundBank) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("Unk_ce10c35", &t.Unk_ce10c35)
	cb.Do("PtWWiseBank", &t.PtWWiseBank)
	cb.Do("ArMusicSegments", &t.ArMusicSegments)
}

type Type_31555106 struct {
	TDuration   DT_STRING_FORMULA
	Unk_bb865d0 DT_INT
}

func (t *Type_31555106) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.TDuration, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.Unk_bb865d0, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+40, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_31555106) Walk(cb WalkCallback) {
	cb.Do("TDuration", &t.TDuration)
	cb.Do("Unk_bb865d0", &t.Unk_bb865d0)
}

type GlobalRoadGraphCell struct {
	ArSegmentIndices DT_VARIABLEARRAY[*DT_INT]
}

func (t *GlobalRoadGraphCell) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.ArSegmentIndices, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *GlobalRoadGraphCell) Walk(cb WalkCallback) {
	cb.Do("ArSegmentIndices", &t.ArSegmentIndices)
}

type Type_31a7ff07 struct {
	THeader     GBIDHeader
	Unk_66a98b7 DT_UINT
}

func (t *Type_31a7ff07) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+260, &t.Unk_66a98b7, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+264, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_31a7ff07) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("Unk_66a98b7", &t.Unk_66a98b7)
}

type PortalTransferSetupMessage struct {
	THeader      RequiredMessageHeader
	DwPortalType DT_UINT
	Unk_1bf9922  DT_INT
	SnoLevelArea DT_SNO
	SnoSubzone   DT_SNO
	BDungeon     DT_INT
}

func (t *PortalTransferSetupMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.DwPortalType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.Unk_1bf9922, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SnoLevelArea, r, &Options{
		Flags: 1,
		Group: 22,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.SnoSubzone, r, &Options{
		Flags: 1,
		Group: 80,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.BDungeon, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+36, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PortalTransferSetupMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("DwPortalType", &t.DwPortalType)
	cb.Do("Unk_1bf9922", &t.Unk_1bf9922)
	cb.Do("SnoLevelArea", &t.SnoLevelArea)
	cb.Do("SnoSubzone", &t.SnoSubzone)
	cb.Do("BDungeon", &t.BDungeon)
}

type Type_31c26ca2 struct {
	Value                   DT_VECTOR4D
	BIsDungeonRewardMessage DT_INT
	Unk_411da82             Type_41b30aab
}

func (t *Type_31c26ca2) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Value, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BIsDungeonRewardMessage, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_411da82, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+80, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_31c26ca2) Walk(cb WalkCallback) {
	cb.Do("Value", &t.Value)
	cb.Do("BIsDungeonRewardMessage", &t.BIsDungeonRewardMessage)
	cb.Do("Unk_411da82", &t.Unk_411da82)
}

type Structure struct {
	PtCollisionMeshes   DT_VARIABLEARRAY[*CollisionMesh]
	PtCollisionCapsules DT_VARIABLEARRAY[*CollisionCapsule]
	PtChunks            DT_VARIABLEARRAY[*GeoChunk]
	PtSceneData         DT_VARIABLEARRAY[*SceneData]
	PtBoneData          DT_VARIABLEARRAY[*BoneData]
	DwFlags             DT_UINT
	Unk_6bd8898         DT_FLOAT
	WsBounds            Sphere
	AabbBounds          AABB
	Unk_d8c9b68         DT_INT
	PtPostprocessed     DT_INT64
}

func (t *Structure) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.PtCollisionMeshes, r, &Options{Flags: 2097152}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.PtCollisionCapsules, r, &Options{Flags: 2097152}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.PtChunks, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.PtSceneData, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.PtBoneData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.DwFlags, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.Unk_6bd8898, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.WsBounds, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+104, &t.AabbBounds, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.Unk_d8c9b68, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+136, &t.PtPostprocessed, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if _, err := r.Seek(p+144, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Structure) Walk(cb WalkCallback) {
	cb.Do("PtCollisionMeshes", &t.PtCollisionMeshes)
	cb.Do("PtCollisionCapsules", &t.PtCollisionCapsules)
	cb.Do("PtChunks", &t.PtChunks)
	cb.Do("PtSceneData", &t.PtSceneData)
	cb.Do("PtBoneData", &t.PtBoneData)
	cb.Do("DwFlags", &t.DwFlags)
	cb.Do("Unk_6bd8898", &t.Unk_6bd8898)
	cb.Do("WsBounds", &t.WsBounds)
	cb.Do("AabbBounds", &t.AabbBounds)
	cb.Do("Unk_d8c9b68", &t.Unk_d8c9b68)
	cb.Do("PtPostprocessed", &t.PtPostprocessed)
}

type RopeDefinition struct {
	DwRopeFlags                        DT_UINT
	NWidth                             DT_INT
	NTraversalWidth                    DT_INT
	Unk_5be6305                        DT_FLOAT
	FlLength                           DT_FLOAT
	FlMass                             DT_FLOAT
	FlMassTaperFactor                  DT_FLOAT
	FlMassEnd                          DT_FLOAT
	FTextureRepeatCount                DT_FLOAT
	NRopeType                          DT_ENUM
	Unk_faa043c                        DT_INT
	Unk_daaa964                        DT_FLOAT
	FlStiffness                        DT_FLOAT
	Unk_e590d3c                        Type_cbfdd2ea
	Unk_24547d4                        Type_cbfdd2ea
	SnoMaterial                        DT_SNO
	SnoPhysics                         DT_SNO
	FlWindFactor                       DT_FLOAT
	TSystemDurationRange               DT_RANGE[*DT_FLOAT]
	TSystemDurationScalar              InterpolationScalar
	FlOutroDuration                    DT_FLOAT
	Unk_b1810a4                        DT_INT
	PathColorOverTime                  Type_560ae4cf
	PathColorOverLength                Type_560ae4cf
	PathAlpha                          Type_cbfdd2ea
	PathAlphaOverLength                Type_cbfdd2ea
	Unk_ab00250                        Type_cbfdd2ea
	Unk_3c8d383                        Type_cbfdd2ea
	Unk_d96e4e6                        Type_cbfdd2ea
	Unk_bf2b399                        Type_cbfdd2ea
	Unk_abcab5e                        Type_cbfdd2ea
	Unk_9a3f811                        Type_cbfdd2ea
	Unk_3a6dc3c                        Type_cbfdd2ea
	Unk_5ddd86f                        Type_cbfdd2ea
	PathWidthOverTime                  Type_cbfdd2ea
	PathWidthOverLength                Type_cbfdd2ea
	PathSourcePointWorldUpMotion       Type_cbfdd2ea
	PathSourcePointAlongRopeMotion     Type_cbfdd2ea
	PathSourcePointPerpendicularMotion Type_cbfdd2ea
	Unk_fd2b7ac                        Type_cbfdd2ea
	PathDestPointWorldUpMotion         Type_cbfdd2ea
	PathDestPointAlongRopeMotion       Type_cbfdd2ea
	PathDestPointPerpendicularMotion   Type_cbfdd2ea
	PathSeparation                     Type_cbfdd2ea
	PathXAmpOverLength                 Type_cbfdd2ea
	PathYAmpOverLength                 Type_cbfdd2ea
	Unk_14d71e7                        Type_cbfdd2ea
	Unk_3e97148                        Type_cbfdd2ea
	PathFreqOverTime                   Type_cbfdd2ea
	PathPhaseSpeedOverTime             Type_cbfdd2ea
	Unk_e85eb5                         DT_RANGE[*DT_FLOAT]
	Unk_f7381a2                        DT_RANGE[*DT_FLOAT]
	Unk_bc10ec1                        DT_RANGE[*DT_FLOAT]
	Unk_6a3b8c1                        Type_cbfdd2ea
	Unk_a74800e                        Type_cbfdd2ea
	Unk_a85b95c                        DT_RANGE[*DT_FLOAT]
	Unk_910dc49                        DT_RANGE[*DT_FLOAT]
	Unk_fa52de8                        DT_RANGE[*DT_FLOAT]
	Unk_c44c7c8                        Type_cbfdd2ea
	Unk_4a82155                        Type_cbfdd2ea
	NNoiseFrequency                    DT_INT
	TNoiseRateRange                    DT_RANGE[*DT_FLOAT]
	PathNoiseRangeOverLength           Type_cbfdd2ea
	PathTangentSourceOverTime          VectorPath
	PathTangentDestinationOverTime     VectorPath
	PtMsgTriggeredEvents               DT_VARIABLEARRAY[*MsgTriggeredEvent]
	DwMaxSystems                       DT_UINT
}

func (t *RopeDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwRopeFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.NWidth, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.NTraversalWidth, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.Unk_5be6305, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.FlLength, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.FlMass, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.FlMassTaperFactor, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.FlMassEnd, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.FTextureRepeatCount, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.NRopeType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.Unk_faa043c, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.Unk_daaa964, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.FlStiffness, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.Unk_e590d3c, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.Unk_24547d4, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+176, &t.SnoMaterial, r, &Options{
		Flags: 1,
		Group: 57,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+180, &t.SnoPhysics, r, &Options{
		Flags: 1,
		Group: 28,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+184, &t.FlWindFactor, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+188, &t.TSystemDurationRange, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+196, &t.TSystemDurationScalar, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+228, &t.FlOutroDuration, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+232, &t.Unk_b1810a4, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+240, &t.PathColorOverTime, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+296, &t.PathColorOverLength, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+352, &t.PathAlpha, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+408, &t.PathAlphaOverLength, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+464, &t.Unk_ab00250, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+520, &t.Unk_3c8d383, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+576, &t.Unk_d96e4e6, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+632, &t.Unk_bf2b399, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+688, &t.Unk_abcab5e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+744, &t.Unk_9a3f811, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+800, &t.Unk_3a6dc3c, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+856, &t.Unk_5ddd86f, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+912, &t.PathWidthOverTime, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+968, &t.PathWidthOverLength, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1024, &t.PathSourcePointWorldUpMotion, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1080, &t.PathSourcePointAlongRopeMotion, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1136, &t.PathSourcePointPerpendicularMotion, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1192, &t.Unk_fd2b7ac, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1248, &t.PathDestPointWorldUpMotion, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1304, &t.PathDestPointAlongRopeMotion, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1360, &t.PathDestPointPerpendicularMotion, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1416, &t.PathSeparation, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1472, &t.PathXAmpOverLength, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1528, &t.PathYAmpOverLength, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1584, &t.Unk_14d71e7, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1640, &t.Unk_3e97148, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1696, &t.PathFreqOverTime, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1752, &t.PathPhaseSpeedOverTime, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1808, &t.Unk_e85eb5, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1816, &t.Unk_f7381a2, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1824, &t.Unk_bc10ec1, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1832, &t.Unk_6a3b8c1, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1888, &t.Unk_a74800e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1944, &t.Unk_a85b95c, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1952, &t.Unk_910dc49, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1960, &t.Unk_fa52de8, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1968, &t.Unk_c44c7c8, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2024, &t.Unk_4a82155, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2080, &t.NNoiseFrequency, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2084, &t.TNoiseRateRange, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2096, &t.PathNoiseRangeOverLength, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2152, &t.PathTangentSourceOverTime, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2208, &t.PathTangentDestinationOverTime, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2264, &t.PtMsgTriggeredEvents, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2280, &t.DwMaxSystems, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+2288, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *RopeDefinition) Walk(cb WalkCallback) {
	cb.Do("DwRopeFlags", &t.DwRopeFlags)
	cb.Do("NWidth", &t.NWidth)
	cb.Do("NTraversalWidth", &t.NTraversalWidth)
	cb.Do("Unk_5be6305", &t.Unk_5be6305)
	cb.Do("FlLength", &t.FlLength)
	cb.Do("FlMass", &t.FlMass)
	cb.Do("FlMassTaperFactor", &t.FlMassTaperFactor)
	cb.Do("FlMassEnd", &t.FlMassEnd)
	cb.Do("FTextureRepeatCount", &t.FTextureRepeatCount)
	cb.Do("NRopeType", &t.NRopeType)
	cb.Do("Unk_faa043c", &t.Unk_faa043c)
	cb.Do("Unk_daaa964", &t.Unk_daaa964)
	cb.Do("FlStiffness", &t.FlStiffness)
	cb.Do("Unk_e590d3c", &t.Unk_e590d3c)
	cb.Do("Unk_24547d4", &t.Unk_24547d4)
	cb.Do("SnoMaterial", &t.SnoMaterial)
	cb.Do("SnoPhysics", &t.SnoPhysics)
	cb.Do("FlWindFactor", &t.FlWindFactor)
	cb.Do("TSystemDurationRange", &t.TSystemDurationRange)
	cb.Do("TSystemDurationScalar", &t.TSystemDurationScalar)
	cb.Do("FlOutroDuration", &t.FlOutroDuration)
	cb.Do("Unk_b1810a4", &t.Unk_b1810a4)
	cb.Do("PathColorOverTime", &t.PathColorOverTime)
	cb.Do("PathColorOverLength", &t.PathColorOverLength)
	cb.Do("PathAlpha", &t.PathAlpha)
	cb.Do("PathAlphaOverLength", &t.PathAlphaOverLength)
	cb.Do("Unk_ab00250", &t.Unk_ab00250)
	cb.Do("Unk_3c8d383", &t.Unk_3c8d383)
	cb.Do("Unk_d96e4e6", &t.Unk_d96e4e6)
	cb.Do("Unk_bf2b399", &t.Unk_bf2b399)
	cb.Do("Unk_abcab5e", &t.Unk_abcab5e)
	cb.Do("Unk_9a3f811", &t.Unk_9a3f811)
	cb.Do("Unk_3a6dc3c", &t.Unk_3a6dc3c)
	cb.Do("Unk_5ddd86f", &t.Unk_5ddd86f)
	cb.Do("PathWidthOverTime", &t.PathWidthOverTime)
	cb.Do("PathWidthOverLength", &t.PathWidthOverLength)
	cb.Do("PathSourcePointWorldUpMotion", &t.PathSourcePointWorldUpMotion)
	cb.Do("PathSourcePointAlongRopeMotion", &t.PathSourcePointAlongRopeMotion)
	cb.Do("PathSourcePointPerpendicularMotion", &t.PathSourcePointPerpendicularMotion)
	cb.Do("Unk_fd2b7ac", &t.Unk_fd2b7ac)
	cb.Do("PathDestPointWorldUpMotion", &t.PathDestPointWorldUpMotion)
	cb.Do("PathDestPointAlongRopeMotion", &t.PathDestPointAlongRopeMotion)
	cb.Do("PathDestPointPerpendicularMotion", &t.PathDestPointPerpendicularMotion)
	cb.Do("PathSeparation", &t.PathSeparation)
	cb.Do("PathXAmpOverLength", &t.PathXAmpOverLength)
	cb.Do("PathYAmpOverLength", &t.PathYAmpOverLength)
	cb.Do("Unk_14d71e7", &t.Unk_14d71e7)
	cb.Do("Unk_3e97148", &t.Unk_3e97148)
	cb.Do("PathFreqOverTime", &t.PathFreqOverTime)
	cb.Do("PathPhaseSpeedOverTime", &t.PathPhaseSpeedOverTime)
	cb.Do("Unk_e85eb5", &t.Unk_e85eb5)
	cb.Do("Unk_f7381a2", &t.Unk_f7381a2)
	cb.Do("Unk_bc10ec1", &t.Unk_bc10ec1)
	cb.Do("Unk_6a3b8c1", &t.Unk_6a3b8c1)
	cb.Do("Unk_a74800e", &t.Unk_a74800e)
	cb.Do("Unk_a85b95c", &t.Unk_a85b95c)
	cb.Do("Unk_910dc49", &t.Unk_910dc49)
	cb.Do("Unk_fa52de8", &t.Unk_fa52de8)
	cb.Do("Unk_c44c7c8", &t.Unk_c44c7c8)
	cb.Do("Unk_4a82155", &t.Unk_4a82155)
	cb.Do("NNoiseFrequency", &t.NNoiseFrequency)
	cb.Do("TNoiseRateRange", &t.TNoiseRateRange)
	cb.Do("PathNoiseRangeOverLength", &t.PathNoiseRangeOverLength)
	cb.Do("PathTangentSourceOverTime", &t.PathTangentSourceOverTime)
	cb.Do("PathTangentDestinationOverTime", &t.PathTangentDestinationOverTime)
	cb.Do("PtMsgTriggeredEvents", &t.PtMsgTriggeredEvents)
	cb.Do("DwMaxSystems", &t.DwMaxSystems)
}

type WorldTierSubcondition struct {
	// Inherits Type_d3c3637f
	// Inherits Subcondition
	// Inherits PolymorphicBase
	DwType        DT_UINT
	BNegate       DT_INT
	EComparisonOp DT_ENUM
	DwPad         DT_UINT
	EWorldTier    DT_ENUM
}

func (t *WorldTierSubcondition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BNegate, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.EComparisonOp, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.EWorldTier, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+40, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *WorldTierSubcondition) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("BNegate", &t.BNegate)
	cb.Do("EComparisonOp", &t.EComparisonOp)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("EWorldTier", &t.EWorldTier)
}

type FogVolumeInstanceData struct {
	EShape            DT_ENUM
	FlDensity         DT_FLOAT
	FlHeightScale     DT_FLOAT
	FlNoiseScale      DT_FLOAT
	Unk_5050283       DT_FLOAT
	FlNoiseOffset     DT_FLOAT
	FlEmissive        DT_FLOAT
	Unk_9e04ce9       DT_FLOAT
	FlAbsorptionCoeff DT_FLOAT
	FlFlowSpeed       DT_FLOAT
	FlFlowPower       DT_FLOAT
	FlInnerScale      DT_FLOAT
	Unk_b345994       DT_FLOAT
	Unk_4d7c109       DT_FLOAT
	Unk_29ac45        DT_FLOAT
	DwFogFlags        DT_UINT
	Unk_56127ed       DT_ENUM
	FlWindSpeedFactor DT_FLOAT
	PathHeightColor   Type_560ae4cf
	BUseMask          DT_INT
}

func (t *FogVolumeInstanceData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.EShape, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.FlDensity, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.FlHeightScale, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.FlNoiseScale, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_5050283, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.FlNoiseOffset, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.FlEmissive, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.Unk_9e04ce9, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.FlAbsorptionCoeff, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.FlFlowSpeed, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.FlFlowPower, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.FlInnerScale, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.Unk_b345994, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.Unk_4d7c109, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.Unk_29ac45, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+60, &t.DwFogFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.Unk_56127ed, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.FlWindSpeedFactor, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.PathHeightColor, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.BUseMask, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+136, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *FogVolumeInstanceData) Walk(cb WalkCallback) {
	cb.Do("EShape", &t.EShape)
	cb.Do("FlDensity", &t.FlDensity)
	cb.Do("FlHeightScale", &t.FlHeightScale)
	cb.Do("FlNoiseScale", &t.FlNoiseScale)
	cb.Do("Unk_5050283", &t.Unk_5050283)
	cb.Do("FlNoiseOffset", &t.FlNoiseOffset)
	cb.Do("FlEmissive", &t.FlEmissive)
	cb.Do("Unk_9e04ce9", &t.Unk_9e04ce9)
	cb.Do("FlAbsorptionCoeff", &t.FlAbsorptionCoeff)
	cb.Do("FlFlowSpeed", &t.FlFlowSpeed)
	cb.Do("FlFlowPower", &t.FlFlowPower)
	cb.Do("FlInnerScale", &t.FlInnerScale)
	cb.Do("Unk_b345994", &t.Unk_b345994)
	cb.Do("Unk_4d7c109", &t.Unk_4d7c109)
	cb.Do("Unk_29ac45", &t.Unk_29ac45)
	cb.Do("DwFogFlags", &t.DwFogFlags)
	cb.Do("Unk_56127ed", &t.Unk_56127ed)
	cb.Do("FlWindSpeedFactor", &t.FlWindSpeedFactor)
	cb.Do("PathHeightColor", &t.PathHeightColor)
	cb.Do("BUseMask", &t.BUseMask)
}

type Type_3256e101 struct {
	SnoClickSound     DT_SNO
	SnoMouseOverSound DT_SNO
}

func (t *Type_3256e101) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoClickSound, r, &Options{
		Flags: 1,
		Group: 40,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.SnoMouseOverSound, r, &Options{
		Flags: 1,
		Group: 40,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_3256e101) Walk(cb WalkCallback) {
	cb.Do("SnoClickSound", &t.SnoClickSound)
	cb.Do("SnoMouseOverSound", &t.SnoMouseOverSound)
}

type ACDTranslateSyncMessage struct {
	THeader   RequiredMessageHeader
	Ann       DT_ACD_NETWORK_NAME
	VDestX    DT_OPTIONAL[*DT_INT]
	VDestY    DT_OPTIONAL[*DT_INT]
	VDestZ    DT_OPTIONAL[*DT_INT]
	BSnap     DT_OPTIONAL[*DT_INT]
	UAckValue DT_OPTIONAL[*DT_UINT]
}

func (t *ACDTranslateSyncMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Ann, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.VDestX, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.VDestY, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.VDestZ, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.BSnap, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.UAckValue, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+64, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ACDTranslateSyncMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("Ann", &t.Ann)
	cb.Do("VDestX", &t.VDestX)
	cb.Do("VDestY", &t.VDestY)
	cb.Do("VDestZ", &t.VDestZ)
	cb.Do("BSnap", &t.BSnap)
	cb.Do("UAckValue", &t.UAckValue)
}

type TryRepairAllMessage struct {
	THeader   RequiredMessageHeader
	BEquipped DT_INT
	BBackpack DT_INT
	BStash    DT_INT
}

func (t *TryRepairAllMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BEquipped, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.BBackpack, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.BStash, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+28, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TryRepairAllMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("BEquipped", &t.BEquipped)
	cb.Do("BBackpack", &t.BBackpack)
	cb.Do("BStash", &t.BStash)
}

type MarkerSoundData struct {
	// Inherits MarkerDataBase
	// Inherits PolymorphicBase
	DwType DT_UINT
	DwPad  DT_UINT
}

func (t *MarkerSoundData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *MarkerSoundData) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
}

type ServerNotificationDataMessage struct {
	THeader RequiredMessageHeader
	USec    DT_UINT
	EType   DT_ENUM
}

func (t *ServerNotificationDataMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.USec, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.EType, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ServerNotificationDataMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("USec", &t.USec)
	cb.Do("EType", &t.EType)
}

type OnHealingReceivedBuffCallback struct {
	// Inherits BuffCallbackBase
	// Inherits PolymorphicBase
	DwType                DT_UINT
	DwPad                 DT_UINT
	SnoTriggerEffectGroup DT_SNO
	ArConditions          DT_POLYMORPHIC_VARIABLEARRAY[*DT_INT64]
}

func (t *OnHealingReceivedBuffCallback) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoTriggerEffectGroup, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ArConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *OnHealingReceivedBuffCallback) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("SnoTriggerEffectGroup", &t.SnoTriggerEffectGroup)
	cb.Do("ArConditions", &t.ArConditions)
}

type ItemTier struct {
	SnoHead     DT_SNO
	SnoTorso    DT_SNO
	SnoFeet     DT_SNO
	SnoHands    DT_SNO
	SnoLegs     DT_SNO
	SnoMainHand DT_SNO
	SnoOffHand  DT_SNO
	Unk_10ef80a DT_SNO
	Unk_2424420 DT_SNO
	Unk_7757fd6 DT_SNO
	Unk_9e2632  DT_SNO
	Unk_6ce8668 DT_SNO
	SnoDye      DT_SNO
	SzName      DT_UINT
}

func (t *ItemTier) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoHead, r, &Options{
		Flags: 513,
		Group: 73,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.SnoTorso, r, &Options{
		Flags: 513,
		Group: 73,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.SnoFeet, r, &Options{
		Flags: 513,
		Group: 73,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.SnoHands, r, &Options{
		Flags: 513,
		Group: 73,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoLegs, r, &Options{
		Flags: 513,
		Group: 73,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.SnoMainHand, r, &Options{
		Flags: 513,
		Group: 73,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SnoOffHand, r, &Options{
		Flags: 513,
		Group: 73,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.Unk_10ef80a, r, &Options{
		Flags: 513,
		Group: 73,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.Unk_2424420, r, &Options{
		Flags: 513,
		Group: 73,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.Unk_7757fd6, r, &Options{
		Flags: 513,
		Group: 73,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.Unk_9e2632, r, &Options{
		Flags: 513,
		Group: 73,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.Unk_6ce8668, r, &Options{
		Flags: 513,
		Group: 73,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.SnoDye, r, &Options{
		Flags: 513,
		Group: 122,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.SzName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+56, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ItemTier) Walk(cb WalkCallback) {
	cb.Do("SnoHead", &t.SnoHead)
	cb.Do("SnoTorso", &t.SnoTorso)
	cb.Do("SnoFeet", &t.SnoFeet)
	cb.Do("SnoHands", &t.SnoHands)
	cb.Do("SnoLegs", &t.SnoLegs)
	cb.Do("SnoMainHand", &t.SnoMainHand)
	cb.Do("SnoOffHand", &t.SnoOffHand)
	cb.Do("Unk_10ef80a", &t.Unk_10ef80a)
	cb.Do("Unk_2424420", &t.Unk_2424420)
	cb.Do("Unk_7757fd6", &t.Unk_7757fd6)
	cb.Do("Unk_9e2632", &t.Unk_9e2632)
	cb.Do("Unk_6ce8668", &t.Unk_6ce8668)
	cb.Do("SnoDye", &t.SnoDye)
	cb.Do("SzName", &t.SzName)
}

type ACDForceAddedMessage struct {
	THeader     RequiredMessageHeader
	Ann         DT_ACD_NETWORK_NAME
	Unk_1833d57 DT_VECTOR3D
	FlSecs      DT_FLOAT
}

func (t *ACDForceAddedMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Ann, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_1833d57, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.FlSecs, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+40, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ACDForceAddedMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("Ann", &t.Ann)
	cb.Do("Unk_1833d57", &t.Unk_1833d57)
	cb.Do("FlSecs", &t.FlSecs)
}

type ActiveSkillEntry struct {
	SnoPower    DT_SNO
	Unk_cc81097 DT_INT
	NLevelReq   DT_INT
}

func (t *ActiveSkillEntry) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoPower, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.Unk_cc81097, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.NLevelReq, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+12, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ActiveSkillEntry) Walk(cb WalkCallback) {
	cb.Do("SnoPower", &t.SnoPower)
	cb.Do("Unk_cc81097", &t.Unk_cc81097)
	cb.Do("NLevelReq", &t.NLevelReq)
}

type CollisionCapsule struct {
	FlRadiusA    DT_FLOAT
	FlRadiusB    DT_FLOAT
	FlLength     DT_FLOAT
	THardpoint   Hardpoint
	DwShapeFlags DT_UINT
	Unk_d094b9a  DT_ENUM
}

func (t *CollisionCapsule) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.FlRadiusA, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.FlRadiusB, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.FlLength, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.THardpoint, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.DwShapeFlags, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+60, &t.Unk_d094b9a, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+64, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *CollisionCapsule) Walk(cb WalkCallback) {
	cb.Do("FlRadiusA", &t.FlRadiusA)
	cb.Do("FlRadiusB", &t.FlRadiusB)
	cb.Do("FlLength", &t.FlLength)
	cb.Do("THardpoint", &t.THardpoint)
	cb.Do("DwShapeFlags", &t.DwShapeFlags)
	cb.Do("Unk_d094b9a", &t.Unk_d094b9a)
}

type Type_340f2b52 struct {
	ArNodes     DT_VARIABLEARRAY[*Type_41e68f26]
	Unk_36cc429 DT_VARIABLEARRAY[*DT_INT]
}

func (t *Type_340f2b52) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.ArNodes, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_36cc429, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_340f2b52) Walk(cb WalkCallback) {
	cb.Do("ArNodes", &t.ArNodes)
	cb.Do("Unk_36cc429", &t.Unk_36cc429)
}

type PlayLineParams struct {
	SnoConversation       DT_SNO
	SnoParentConversation DT_SNO
	Unk_d85ca94           DT_INT
	BFirstLine            DT_INT
	DwLineUID             DT_UINT
	Unk_3528310           DT_UINT
	ELineGender           DT_ENUM
	ELineClass            DT_ENUM
	Unk_1dc956e           DT_UINT
	EPlayerGender         DT_ENUM
	EPlayerClass          DT_ENUM
	SnoSpeaker            DT_SNO
	DwLineFlags           DT_UINT
	FlLineDisplayTime     DT_FLOAT
	NLineGUID             DT_INT
	SnoSoundOverride      DT_SNO
	Unk_8c9c6ba           Type_72ffea44
}

func (t *PlayLineParams) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoConversation, r, &Options{
		Flags: 1,
		Group: 12,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.SnoParentConversation, r, &Options{
		Flags: 1,
		Group: 12,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.Unk_d85ca94, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.BFirstLine, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.DwLineUID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.Unk_3528310, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ELineGender, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.ELineClass, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.Unk_1dc956e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.EPlayerGender, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.EPlayerClass, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.SnoSpeaker, r, &Options{
		Flags: 1,
		Group: 72,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.DwLineFlags, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.FlLineDisplayTime, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.NLineGUID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+60, &t.SnoSoundOverride, r, &Options{
		Flags: 1,
		Group: 40,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.Unk_8c9c6ba, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+88, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PlayLineParams) Walk(cb WalkCallback) {
	cb.Do("SnoConversation", &t.SnoConversation)
	cb.Do("SnoParentConversation", &t.SnoParentConversation)
	cb.Do("Unk_d85ca94", &t.Unk_d85ca94)
	cb.Do("BFirstLine", &t.BFirstLine)
	cb.Do("DwLineUID", &t.DwLineUID)
	cb.Do("Unk_3528310", &t.Unk_3528310)
	cb.Do("ELineGender", &t.ELineGender)
	cb.Do("ELineClass", &t.ELineClass)
	cb.Do("Unk_1dc956e", &t.Unk_1dc956e)
	cb.Do("EPlayerGender", &t.EPlayerGender)
	cb.Do("EPlayerClass", &t.EPlayerClass)
	cb.Do("SnoSpeaker", &t.SnoSpeaker)
	cb.Do("DwLineFlags", &t.DwLineFlags)
	cb.Do("FlLineDisplayTime", &t.FlLineDisplayTime)
	cb.Do("NLineGUID", &t.NLineGUID)
	cb.Do("SnoSoundOverride", &t.SnoSoundOverride)
	cb.Do("Unk_8c9c6ba", &t.Unk_8c9c6ba)
}

type UIDownloadImageStyle struct {
	// Inherits UIWindowStyle
	// Inherits UIControlStyle
	// Inherits PolymorphicBase
	DwType                    DT_UINT
	DwPad                     DT_UINT
	HParentStyle              UIControlHandle
	Unk_441f783               DT_INT64
	M_eHasModifiedPowerTagMap DT_TAGMAP[*DT_ENUM]
	TConsoleInput             UIControlConsoleInput
	Unk_b4f614c               DT_TAGMAP[*DT_ENUM]
}

func (t *UIDownloadImageStyle) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.HParentStyle, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_441f783, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.M_eHasModifiedPowerTagMap, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.TConsoleInput, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.Unk_b4f614c, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+80, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *UIDownloadImageStyle) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("HParentStyle", &t.HParentStyle)
	cb.Do("Unk_441f783", &t.Unk_441f783)
	cb.Do("M_eHasModifiedPowerTagMap", &t.M_eHasModifiedPowerTagMap)
	cb.Do("TConsoleInput", &t.TConsoleInput)
	cb.Do("Unk_b4f614c", &t.Unk_b4f614c)
}

type GameTestingNPCSamplingStartMessage struct {
	THeader        RequiredMessageHeader
	SzLocationName DT_CHARARRAY
	SnoWorld       DT_SNO
	SnoActor       DT_SNO
	NActorCount    DT_INT
}

func (t *GameTestingNPCSamplingStartMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SzLocationName, r, &Options{
		ArrayLength: 64,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.SnoWorld, r, &Options{
		Flags: 1,
		Group: 48,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.SnoActor, r, &Options{
		Flags: 1,
		Group: 1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.NActorCount, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+92, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *GameTestingNPCSamplingStartMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("SzLocationName", &t.SzLocationName)
	cb.Do("SnoWorld", &t.SnoWorld)
	cb.Do("SnoActor", &t.SnoActor)
	cb.Do("NActorCount", &t.NActorCount)
}

type Type_343baac3 struct {
	Unk_1fa233b DT_ENUM
	Unk_76177c6 DT_VARIABLEARRAY[*Type_6a8a63e0]
}

func (t *Type_343baac3) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Unk_1fa233b, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.Unk_76177c6, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_343baac3) Walk(cb WalkCallback) {
	cb.Do("Unk_1fa233b", &t.Unk_1fa233b)
	cb.Do("Unk_76177c6", &t.Unk_76177c6)
}

type QuestSwitchGizmoData struct {
	// Inherits NamedGizmoData
	// Inherits ActorGizmoData
	// Inherits PolymorphicBase
	DwType                       DT_UINT
	DwPad                        DT_UINT
	FDisableNonFriendlyOperation DT_INT
	FWalkToCenter                DT_INT
	FGizmoStartsDisabled         DT_INT
	FUseStringListName           DT_INT
	FForceMinimapIcon            DT_INT
	FlOperationRadius            DT_FLOAT
	Unk_d0b1df5                  DT_FLOAT
	FlGizmoUseTime               DT_FLOAT
	SnoChannelingEffect          DT_SNO
	Unk_2767229                  DT_INT
	FGizmoShowProgressBar        DT_INT
	Unk_6d9ebe1                  DT_INT
	Unk_5456245                  DT_INT
	Unk_af5815a                  DT_INT
	SnoOnClickEffect             DT_SNO
	SnoPickedUpEffect            DT_SNO
	SnoDropOnGroundEffect        DT_SNO
	TConditionData               GizmoConditionData
	SnoPowerOperator             DT_SNO
	SnoPowerOperate              DT_SNO
	SnoPowerOperatorActive       DT_SNO
	SnoPowerOperateActive        DT_SNO
	Unk_359810e                  DT_INT
	NCooldown                    DT_UINT
	Unk_9c8478e                  DT_UINT
	Unk_d45ed2d                  DT_INT
	Unk_f6b20b7                  DT_INT
	Unk_54513b8                  DT_INT
	Unk_fd1f378                  DT_UINT
	Unk_487c14                   DT_UINT
	Unk_87f2609                  DT_UINT
	Unk_158eb4f                  DT_FLOAT
	Unk_ab58cd3                  DT_ENUM
	Unk_91a3966                  DT_UINT
	Unk_25312e5                  DT_UINT
	Unk_4be4371                  DT_INT
	TLockData                    LockingGizmoData
}

func (t *QuestSwitchGizmoData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.FDisableNonFriendlyOperation, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.FWalkToCenter, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.FGizmoStartsDisabled, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.FUseStringListName, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.FForceMinimapIcon, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.FlOperationRadius, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.Unk_d0b1df5, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.FlGizmoUseTime, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.SnoChannelingEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.Unk_2767229, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.FGizmoShowProgressBar, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+60, &t.Unk_6d9ebe1, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.Unk_5456245, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.Unk_af5815a, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.SnoOnClickEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.SnoPickedUpEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.SnoDropOnGroundEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.TConditionData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.SnoPowerOperator, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.SnoPowerOperate, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.SnoPowerOperatorActive, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+100, &t.SnoPowerOperateActive, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+104, &t.Unk_359810e, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+108, &t.NCooldown, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.Unk_9c8478e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+116, &t.Unk_d45ed2d, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.Unk_f6b20b7, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+124, &t.Unk_54513b8, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.Unk_fd1f378, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+132, &t.Unk_487c14, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+136, &t.Unk_87f2609, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+140, &t.Unk_158eb4f, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+144, &t.Unk_ab58cd3, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+148, &t.Unk_91a3966, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+152, &t.Unk_25312e5, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+156, &t.Unk_4be4371, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+160, &t.TLockData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+200, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *QuestSwitchGizmoData) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("FDisableNonFriendlyOperation", &t.FDisableNonFriendlyOperation)
	cb.Do("FWalkToCenter", &t.FWalkToCenter)
	cb.Do("FGizmoStartsDisabled", &t.FGizmoStartsDisabled)
	cb.Do("FUseStringListName", &t.FUseStringListName)
	cb.Do("FForceMinimapIcon", &t.FForceMinimapIcon)
	cb.Do("FlOperationRadius", &t.FlOperationRadius)
	cb.Do("Unk_d0b1df5", &t.Unk_d0b1df5)
	cb.Do("FlGizmoUseTime", &t.FlGizmoUseTime)
	cb.Do("SnoChannelingEffect", &t.SnoChannelingEffect)
	cb.Do("Unk_2767229", &t.Unk_2767229)
	cb.Do("FGizmoShowProgressBar", &t.FGizmoShowProgressBar)
	cb.Do("Unk_6d9ebe1", &t.Unk_6d9ebe1)
	cb.Do("Unk_5456245", &t.Unk_5456245)
	cb.Do("Unk_af5815a", &t.Unk_af5815a)
	cb.Do("SnoOnClickEffect", &t.SnoOnClickEffect)
	cb.Do("SnoPickedUpEffect", &t.SnoPickedUpEffect)
	cb.Do("SnoDropOnGroundEffect", &t.SnoDropOnGroundEffect)
	cb.Do("TConditionData", &t.TConditionData)
	cb.Do("SnoPowerOperator", &t.SnoPowerOperator)
	cb.Do("SnoPowerOperate", &t.SnoPowerOperate)
	cb.Do("SnoPowerOperatorActive", &t.SnoPowerOperatorActive)
	cb.Do("SnoPowerOperateActive", &t.SnoPowerOperateActive)
	cb.Do("Unk_359810e", &t.Unk_359810e)
	cb.Do("NCooldown", &t.NCooldown)
	cb.Do("Unk_9c8478e", &t.Unk_9c8478e)
	cb.Do("Unk_d45ed2d", &t.Unk_d45ed2d)
	cb.Do("Unk_f6b20b7", &t.Unk_f6b20b7)
	cb.Do("Unk_54513b8", &t.Unk_54513b8)
	cb.Do("Unk_fd1f378", &t.Unk_fd1f378)
	cb.Do("Unk_487c14", &t.Unk_487c14)
	cb.Do("Unk_87f2609", &t.Unk_87f2609)
	cb.Do("Unk_158eb4f", &t.Unk_158eb4f)
	cb.Do("Unk_ab58cd3", &t.Unk_ab58cd3)
	cb.Do("Unk_91a3966", &t.Unk_91a3966)
	cb.Do("Unk_25312e5", &t.Unk_25312e5)
	cb.Do("Unk_4be4371", &t.Unk_4be4371)
	cb.Do("TLockData", &t.TLockData)
}

type AnimationDefinition struct {
	DwNextID                 DT_UINT
	DwFlags                  DT_UINT
	EPlaybackMode            DT_ENUM
	Unk_38fab0d              DT_ENUM
	ESelectionOrder          DT_ENUM
	Unk_ba85a8e              DT_INT
	BAlternatesAnims         DT_INT
	SnoAppearance            DT_SNO
	PtPermutations           DT_VARIABLEARRAY[*AnimPermutation]
	ArPermutationIndices     DT_VARIABLEARRAY[*DT_INT]
	PtRepeatablePermutations DT_VARIABLEARRAY[*DT_BYTE]
	Unk_88ce6d6              DT_INT
	Unk_5316586              DT_INT
}

func (t *AnimationDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwNextID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.EPlaybackMode, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.Unk_38fab0d, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ESelectionOrder, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.Unk_ba85a8e, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.BAlternatesAnims, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.SnoAppearance, r, &Options{
		Flags: 769,
		Group: 9,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.PtPermutations, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.ArPermutationIndices, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.PtRepeatablePermutations, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.Unk_88ce6d6, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.Unk_5316586, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+96, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *AnimationDefinition) Walk(cb WalkCallback) {
	cb.Do("DwNextID", &t.DwNextID)
	cb.Do("DwFlags", &t.DwFlags)
	cb.Do("EPlaybackMode", &t.EPlaybackMode)
	cb.Do("Unk_38fab0d", &t.Unk_38fab0d)
	cb.Do("ESelectionOrder", &t.ESelectionOrder)
	cb.Do("Unk_ba85a8e", &t.Unk_ba85a8e)
	cb.Do("BAlternatesAnims", &t.BAlternatesAnims)
	cb.Do("SnoAppearance", &t.SnoAppearance)
	cb.Do("PtPermutations", &t.PtPermutations)
	cb.Do("ArPermutationIndices", &t.ArPermutationIndices)
	cb.Do("PtRepeatablePermutations", &t.PtRepeatablePermutations)
	cb.Do("Unk_88ce6d6", &t.Unk_88ce6d6)
	cb.Do("Unk_5316586", &t.Unk_5316586)
}

type MarkerNoMountVolumeData struct {
	// Inherits MarkerDataBase
	// Inherits PolymorphicBase
	DwType      DT_UINT
	DwPad       DT_UINT
	Unk_75ac63e DT_ENUM
}

func (t *MarkerNoMountVolumeData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_75ac63e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *MarkerNoMountVolumeData) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("Unk_75ac63e", &t.Unk_75ac63e)
}

type Type_349ba61e struct {
	THeader               RequiredMessageHeader
	DwPlayerGameAccountId DT_UINT
	Unk_b88123b           DT_CHARARRAY
	Unk_f1dc826           DT_CHARARRAY
}

func (t *Type_349ba61e) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.DwPlayerGameAccountId, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.Unk_b88123b, r, &Options{
		ArrayLength: 49,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+69, &t.Unk_f1dc826, r, &Options{
		ArrayLength: 49,
		Flags:       1,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+120, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_349ba61e) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("DwPlayerGameAccountId", &t.DwPlayerGameAccountId)
	cb.Do("Unk_b88123b", &t.Unk_b88123b)
	cb.Do("Unk_f1dc826", &t.Unk_f1dc826)
}

type VoiceActorEntry struct {
	THeader GBIDHeader
}

func (t *VoiceActorEntry) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+260, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *VoiceActorEntry) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
}

type UpgradeItemMessage struct {
	THeader   RequiredMessageHeader
	AnnItem   DT_ACD_NETWORK_NAME
	AnnVendor DT_ACD_NETWORK_NAME
}

func (t *UpgradeItemMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.AnnItem, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.AnnVendor, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *UpgradeItemMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("AnnItem", &t.AnnItem)
	cb.Do("AnnVendor", &t.AnnVendor)
}

type TriggerConditions struct {
	FlChance              DT_FLOAT
	BMute                 DT_INT
	BMuteExternal         DT_INT
	TDelay                DT_FLOAT
	TImpactVelocityRange  DT_RANGE[*DT_FLOAT]
	TImpactWeightRange    DT_RANGE[*DT_FLOAT]
	EMaterial             DT_ENUM
	DwConditionFlags      DT_UINT
	EPlayerCountCondition DT_ENUM
	Unk_b51df67           DT_ENUM
	DwPad                 DT_UINT
}

func (t *TriggerConditions) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.FlChance, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.BMute, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.BMuteExternal, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.TDelay, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TImpactVelocityRange, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.TImpactWeightRange, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.EMaterial, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.DwConditionFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.EPlayerCountCondition, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.Unk_b51df67, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+52, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TriggerConditions) Walk(cb WalkCallback) {
	cb.Do("FlChance", &t.FlChance)
	cb.Do("BMute", &t.BMute)
	cb.Do("BMuteExternal", &t.BMuteExternal)
	cb.Do("TDelay", &t.TDelay)
	cb.Do("TImpactVelocityRange", &t.TImpactVelocityRange)
	cb.Do("TImpactWeightRange", &t.TImpactWeightRange)
	cb.Do("EMaterial", &t.EMaterial)
	cb.Do("DwConditionFlags", &t.DwConditionFlags)
	cb.Do("EPlayerCountCondition", &t.EPlayerCountCondition)
	cb.Do("Unk_b51df67", &t.Unk_b51df67)
	cb.Do("DwPad", &t.DwPad)
}

type Type_352f49ec struct {
	// Inherits PowerConditionBase
	// Inherits PolymorphicBase
	DwType         DT_UINT
	BInverse       DT_INT
	DwPad          DT_UINT
	SzVariableName DT_UINT
	FlValue        DT_FLOAT
}

func (t *Type_352f49ec) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BInverse, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SzVariableName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.FlValue, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_352f49ec) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("BInverse", &t.BInverse)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("SzVariableName", &t.SzVariableName)
	cb.Do("FlValue", &t.FlValue)
}

type OnKillBuffCallback struct {
	// Inherits BuffCallbackBase
	// Inherits PolymorphicBase
	DwType                DT_UINT
	DwPad                 DT_UINT
	SnoTriggerEffectGroup DT_SNO
	ArConditions          DT_POLYMORPHIC_VARIABLEARRAY[*DT_INT64]
}

func (t *OnKillBuffCallback) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoTriggerEffectGroup, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ArConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *OnKillBuffCallback) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("SnoTriggerEffectGroup", &t.SnoTriggerEffectGroup)
	cb.Do("ArConditions", &t.ArConditions)
}

type AnimDepthOfField struct {
	FlFStop         DT_FLOAT
	FlFocalDistance DT_FLOAT
}

func (t *AnimDepthOfField) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.FlFStop, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.FlFocalDistance, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *AnimDepthOfField) Walk(cb WalkCallback) {
	cb.Do("FlFStop", &t.FlFStop)
	cb.Do("FlFocalDistance", &t.FlFocalDistance)
}

type GlobalZoneProgressData struct {
	// Inherits GlobalBase
	// Inherits PolymorphicBase
	DwType                DT_UINT
	DwPad                 DT_UINT
	SzCurrentTargetBranch DT_CSTRING[*DT_BYTE]
	ArPerZoneData         DT_FIXEDARRAY[*ZoneProgressPerZoneData]
	Unk_83a373            DT_FIXEDARRAY[*DT_INT]
	Unk_2d36569           DT_FIXEDARRAY[*DT_INT]
	ArRewardStringLabels  DT_FIXEDARRAY[*DT_UINT]
	Unk_7f27ec0           DT_FIXEDARRAY[*DT_UINT]
	Unk_980ba0f           DT_VARIABLEARRAY[*Type_ba2327fc]
}

func (t *GlobalZoneProgressData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SzCurrentTargetBranch, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.ArPerZoneData, r, &Options{
		ArrayLength: 5,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1912, &t.Unk_83a373, r, &Options{
		ArrayLength: 6,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1936, &t.Unk_2d36569, r, &Options{
		ArrayLength: 5,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1956, &t.ArRewardStringLabels, r, &Options{
		ArrayLength: 2,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1964, &t.Unk_7f27ec0, r, &Options{
		ArrayLength: 7,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1992, &t.Unk_980ba0f, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+2008, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *GlobalZoneProgressData) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("SzCurrentTargetBranch", &t.SzCurrentTargetBranch)
	cb.Do("ArPerZoneData", &t.ArPerZoneData)
	cb.Do("Unk_83a373", &t.Unk_83a373)
	cb.Do("Unk_2d36569", &t.Unk_2d36569)
	cb.Do("ArRewardStringLabels", &t.ArRewardStringLabels)
	cb.Do("Unk_7f27ec0", &t.Unk_7f27ec0)
	cb.Do("Unk_980ba0f", &t.Unk_980ba0f)
}

type Type_357c091e struct {
	Unk_20a6d7a DT_VECTOR3D
	Unk_9fd3bed DT_VECTOR3D
}

func (t *Type_357c091e) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Unk_20a6d7a, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.Unk_9fd3bed, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_357c091e) Walk(cb WalkCallback) {
	cb.Do("Unk_20a6d7a", &t.Unk_20a6d7a)
	cb.Do("Unk_9fd3bed", &t.Unk_9fd3bed)
}

type Type_35a12884 struct {
	// Inherits BuffCallbackBase
	// Inherits PolymorphicBase
	DwType                DT_UINT
	DwPad                 DT_UINT
	SnoTriggerEffectGroup DT_SNO
	ArConditions          DT_POLYMORPHIC_VARIABLEARRAY[*DT_INT64]
}

func (t *Type_35a12884) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoTriggerEffectGroup, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ArConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_35a12884) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("SnoTriggerEffectGroup", &t.SnoTriggerEffectGroup)
	cb.Do("ArConditions", &t.ArConditions)
}

type ActorPlayerData struct {
	EGender                    DT_ENUM
	EPlayerClass               DT_ENUM
	Unk_b50cfcc                DT_FLOAT
	ArSkinColorChoices         DT_VARIABLEARRAY[*PersonaSkinColor]
	SnoPowerPassives           DT_VARIABLEARRAY[*DT_SNO]
	FlIrisSize                 DT_FLOAT
	ArWarningConversationLines DT_FIXEDARRAY[*ConversationNodeReference]
	ArConditionalAudioStates   DT_VARIABLEARRAY[*ConditionalAudioState]
}

func (t *ActorPlayerData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.EGender, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.EPlayerClass, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.Unk_b50cfcc, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.ArSkinColorChoices, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.SnoPowerPassives, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.FlIrisSize, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.ArWarningConversationLines, r, &Options{
		ArrayLength: 26,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+264, &t.ArConditionalAudioStates, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+280, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ActorPlayerData) Walk(cb WalkCallback) {
	cb.Do("EGender", &t.EGender)
	cb.Do("EPlayerClass", &t.EPlayerClass)
	cb.Do("Unk_b50cfcc", &t.Unk_b50cfcc)
	cb.Do("ArSkinColorChoices", &t.ArSkinColorChoices)
	cb.Do("SnoPowerPassives", &t.SnoPowerPassives)
	cb.Do("FlIrisSize", &t.FlIrisSize)
	cb.Do("ArWarningConversationLines", &t.ArWarningConversationLines)
	cb.Do("ArConditionalAudioStates", &t.ArConditionalAudioStates)
}

type PlayerLevelRangeSubcondition struct {
	// Inherits Subcondition
	// Inherits PolymorphicBase
	DwType    DT_UINT
	BNegate   DT_INT
	DwPad     DT_UINT
	NMinLevel DT_INT
	NMaxLevel DT_INT
}

func (t *PlayerLevelRangeSubcondition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BNegate, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.NMinLevel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.NMaxLevel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PlayerLevelRangeSubcondition) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("BNegate", &t.BNegate)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("NMinLevel", &t.NMinLevel)
	cb.Do("NMaxLevel", &t.NMaxLevel)
}

type Type_36030d2d struct {
	ArTracks DT_POLYMORPHIC_VARIABLEARRAY[*DT_INT64]
}

func (t *Type_36030d2d) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.ArTracks, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_36030d2d) Walk(cb WalkCallback) {
	cb.Do("ArTracks", &t.ArTracks)
}

type UniqueOperatorChestGizmoData struct {
	// Inherits ChestGizmoData
	// Inherits NamedGizmoData
	// Inherits ActorGizmoData
	// Inherits PolymorphicBase
	DwType                            DT_UINT
	FDisableNonFriendlyOperation      DT_INT
	FWalkToCenter                     DT_INT
	FGizmoStartsDisabled              DT_INT
	FUseStringListName                DT_INT
	FForceMinimapIcon                 DT_INT
	FlOperationRadius                 DT_FLOAT
	Unk_d0b1df5                       DT_FLOAT
	FlGizmoUseTime                    DT_FLOAT
	SnoChannelingEffect               DT_SNO
	Unk_2767229                       DT_INT
	FGizmoShowProgressBar             DT_INT
	Unk_6d9ebe1                       DT_INT
	Unk_5456245                       DT_INT
	Unk_af5815a                       DT_INT
	SnoOnClickEffect                  DT_SNO
	SnoPickedUpEffect                 DT_SNO
	SnoDropOnGroundEffect             DT_SNO
	TConditionData                    GizmoConditionData
	SnoPowerOperator                  DT_SNO
	SnoPowerOperate                   DT_SNO
	SnoPowerOperatorActive            DT_SNO
	SnoPowerOperateActive             DT_SNO
	Unk_359810e                       DT_INT
	NCooldown                         DT_UINT
	Unk_9c8478e                       DT_UINT
	Unk_d45ed2d                       DT_INT
	Unk_f6b20b7                       DT_INT
	Unk_54513b8                       DT_INT
	Unk_fd1f378                       DT_UINT
	Unk_487c14                        DT_UINT
	Unk_87f2609                       DT_UINT
	Unk_158eb4f                       DT_FLOAT
	Unk_ab58cd3                       DT_ENUM
	Unk_91a3966                       DT_UINT
	Unk_25312e5                       DT_UINT
	Unk_4be4371                       DT_INT
	SnoTreasureClass                  DT_SNO
	TLockData                         LockingGizmoData
	FChestRemovesCollisionOnOperation DT_INT
	FChestOperatesOnProximity         DT_INT
	FChestLight                       DT_INT
	Unk_51b0c11                       DT_INT
	Unk_6b4a81d                       DT_FLOAT
	DwPad                             DT_UINT
}

func (t *UniqueOperatorChestGizmoData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.FDisableNonFriendlyOperation, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.FWalkToCenter, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.FGizmoStartsDisabled, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.FUseStringListName, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.FForceMinimapIcon, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.FlOperationRadius, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.Unk_d0b1df5, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.FlGizmoUseTime, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.SnoChannelingEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.Unk_2767229, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.FGizmoShowProgressBar, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+60, &t.Unk_6d9ebe1, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.Unk_5456245, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.Unk_af5815a, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.SnoOnClickEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.SnoPickedUpEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.SnoDropOnGroundEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.TConditionData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.SnoPowerOperator, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.SnoPowerOperate, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.SnoPowerOperatorActive, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+100, &t.SnoPowerOperateActive, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+104, &t.Unk_359810e, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+108, &t.NCooldown, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.Unk_9c8478e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+116, &t.Unk_d45ed2d, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.Unk_f6b20b7, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+124, &t.Unk_54513b8, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.Unk_fd1f378, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+132, &t.Unk_487c14, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+136, &t.Unk_87f2609, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+140, &t.Unk_158eb4f, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+144, &t.Unk_ab58cd3, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+148, &t.Unk_91a3966, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+152, &t.Unk_25312e5, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+156, &t.Unk_4be4371, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+160, &t.SnoTreasureClass, r, &Options{
		Flags: 1,
		Group: 52,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+164, &t.TLockData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+200, &t.FChestRemovesCollisionOnOperation, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+204, &t.FChestOperatesOnProximity, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+208, &t.FChestLight, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+212, &t.Unk_51b0c11, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+216, &t.Unk_6b4a81d, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+220, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+224, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *UniqueOperatorChestGizmoData) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("FDisableNonFriendlyOperation", &t.FDisableNonFriendlyOperation)
	cb.Do("FWalkToCenter", &t.FWalkToCenter)
	cb.Do("FGizmoStartsDisabled", &t.FGizmoStartsDisabled)
	cb.Do("FUseStringListName", &t.FUseStringListName)
	cb.Do("FForceMinimapIcon", &t.FForceMinimapIcon)
	cb.Do("FlOperationRadius", &t.FlOperationRadius)
	cb.Do("Unk_d0b1df5", &t.Unk_d0b1df5)
	cb.Do("FlGizmoUseTime", &t.FlGizmoUseTime)
	cb.Do("SnoChannelingEffect", &t.SnoChannelingEffect)
	cb.Do("Unk_2767229", &t.Unk_2767229)
	cb.Do("FGizmoShowProgressBar", &t.FGizmoShowProgressBar)
	cb.Do("Unk_6d9ebe1", &t.Unk_6d9ebe1)
	cb.Do("Unk_5456245", &t.Unk_5456245)
	cb.Do("Unk_af5815a", &t.Unk_af5815a)
	cb.Do("SnoOnClickEffect", &t.SnoOnClickEffect)
	cb.Do("SnoPickedUpEffect", &t.SnoPickedUpEffect)
	cb.Do("SnoDropOnGroundEffect", &t.SnoDropOnGroundEffect)
	cb.Do("TConditionData", &t.TConditionData)
	cb.Do("SnoPowerOperator", &t.SnoPowerOperator)
	cb.Do("SnoPowerOperate", &t.SnoPowerOperate)
	cb.Do("SnoPowerOperatorActive", &t.SnoPowerOperatorActive)
	cb.Do("SnoPowerOperateActive", &t.SnoPowerOperateActive)
	cb.Do("Unk_359810e", &t.Unk_359810e)
	cb.Do("NCooldown", &t.NCooldown)
	cb.Do("Unk_9c8478e", &t.Unk_9c8478e)
	cb.Do("Unk_d45ed2d", &t.Unk_d45ed2d)
	cb.Do("Unk_f6b20b7", &t.Unk_f6b20b7)
	cb.Do("Unk_54513b8", &t.Unk_54513b8)
	cb.Do("Unk_fd1f378", &t.Unk_fd1f378)
	cb.Do("Unk_487c14", &t.Unk_487c14)
	cb.Do("Unk_87f2609", &t.Unk_87f2609)
	cb.Do("Unk_158eb4f", &t.Unk_158eb4f)
	cb.Do("Unk_ab58cd3", &t.Unk_ab58cd3)
	cb.Do("Unk_91a3966", &t.Unk_91a3966)
	cb.Do("Unk_25312e5", &t.Unk_25312e5)
	cb.Do("Unk_4be4371", &t.Unk_4be4371)
	cb.Do("SnoTreasureClass", &t.SnoTreasureClass)
	cb.Do("TLockData", &t.TLockData)
	cb.Do("FChestRemovesCollisionOnOperation", &t.FChestRemovesCollisionOnOperation)
	cb.Do("FChestOperatesOnProximity", &t.FChestOperatesOnProximity)
	cb.Do("FChestLight", &t.FChestLight)
	cb.Do("Unk_51b0c11", &t.Unk_51b0c11)
	cb.Do("Unk_6b4a81d", &t.Unk_6b4a81d)
	cb.Do("DwPad", &t.DwPad)
}

type SubzoneModifierStateMessage struct {
	THeader                RequiredMessageHeader
	GbidSubzoneModifierTag DT_GBID
	SnoSubzone             DT_SNO
	DwStartTime            DT_INT64
	DwEndTime              DT_INT64
	SnoQuest               DT_SNO
	WpLocation             DT_VECTOR3D
	NWorldStateValue       DT_INT
	BShouldNotify          DT_INT
}

func (t *SubzoneModifierStateMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.GbidSubzoneModifierTag, r, &Options{
		Flags: 1,
		Group: 60,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.SnoSubzone, r, &Options{
		Flags: 1,
		Group: 80,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.DwStartTime, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.DwEndTime, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.SnoQuest, r, &Options{
		Flags: 1,
		Group: 31,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.WpLocation, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.NWorldStateValue, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+60, &t.BShouldNotify, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+64, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *SubzoneModifierStateMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("GbidSubzoneModifierTag", &t.GbidSubzoneModifierTag)
	cb.Do("SnoSubzone", &t.SnoSubzone)
	cb.Do("DwStartTime", &t.DwStartTime)
	cb.Do("DwEndTime", &t.DwEndTime)
	cb.Do("SnoQuest", &t.SnoQuest)
	cb.Do("WpLocation", &t.WpLocation)
	cb.Do("NWorldStateValue", &t.NWorldStateValue)
	cb.Do("BShouldNotify", &t.BShouldNotify)
}

type TriggerEventFoley struct {
	// Inherits TriggerEvent
	// Inherits PolymorphicBase
	DwType             DT_UINT
	DwPad              DT_UINT
	TConditions        TriggerConditions
	FGenerated         DT_INT
	Unk_6cba752        DT_INT
	DwParentActorID    DT_UINT
	THardpointLink     HardpointLink
	SzFoleyTypeTag     DT_UINT
	SnoFoleySoundTable DT_SNO
	Unk_e6137fe        DT_UINT
	FMustAttach        DT_INT
	DwID               DT_UINT
	TCleanup           TriggerCleanup
}

func (t *TriggerEventFoley) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.FGenerated, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_6cba752, r, &Options{Flags: 16}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.DwParentActorID, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.THardpointLink, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.SzFoleyTypeTag, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.SnoFoleySoundTable, r, &Options{
		Flags: 513,
		Group: 79,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.Unk_e6137fe, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+100, &t.FMustAttach, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+104, &t.DwID, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+108, &t.TCleanup, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+136, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TriggerEventFoley) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("TConditions", &t.TConditions)
	cb.Do("FGenerated", &t.FGenerated)
	cb.Do("Unk_6cba752", &t.Unk_6cba752)
	cb.Do("DwParentActorID", &t.DwParentActorID)
	cb.Do("THardpointLink", &t.THardpointLink)
	cb.Do("SzFoleyTypeTag", &t.SzFoleyTypeTag)
	cb.Do("SnoFoleySoundTable", &t.SnoFoleySoundTable)
	cb.Do("Unk_e6137fe", &t.Unk_e6137fe)
	cb.Do("FMustAttach", &t.FMustAttach)
	cb.Do("DwID", &t.DwID)
	cb.Do("TCleanup", &t.TCleanup)
}

type TexAnim struct {
	// Inherits PolymorphicBase
	DwType   DT_UINT
	DwPad    DT_UINT
	FlUScale DT_FLOAT
	FlVScale DT_FLOAT
}

func (t *TexAnim) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.FlUScale, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.FlVScale, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TexAnim) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("FlUScale", &t.FlUScale)
	cb.Do("FlVScale", &t.FlVScale)
}

type PowerConditionDungeonTier struct {
	// Inherits PowerConditionBase
	// Inherits PolymorphicBase
	DwType   DT_UINT
	BInverse DT_INT
	DwPad    DT_UINT
	ETier    DT_ENUM
}

func (t *PowerConditionDungeonTier) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BInverse, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ETier, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PowerConditionDungeonTier) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("BInverse", &t.BInverse)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("ETier", &t.ETier)
}

type CommandFrameSynchronizeMessage struct {
	THeader       RequiredMessageHeader
	UCommandFrame DT_UINT
	Unk_b0fd968   DT_UINT
	UFlags        DT_BYTE
}

func (t *CommandFrameSynchronizeMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.UCommandFrame, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.Unk_b0fd968, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.UFlags, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+28, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *CommandFrameSynchronizeMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("UCommandFrame", &t.UCommandFrame)
	cb.Do("Unk_b0fd968", &t.Unk_b0fd968)
	cb.Do("UFlags", &t.UFlags)
}

type ObjectiveRegionParams struct {
	TDefault           Type_8b736c4
	THover             Type_8b736c4
	TTracked           Type_8b736c4
	THoverTracked      Type_8b736c4
	FlFalloffThickness DT_FLOAT
	FlThickness        DT_FLOAT
	SnoPattern         DT_SNO
	FlPatternRepeats   DT_FLOAT
	FlPatternThickness DT_FLOAT
}

func (t *ObjectiveRegionParams) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.TDefault, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.THover, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.TTracked, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.THoverTracked, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.FlFalloffThickness, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.FlThickness, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.SnoPattern, r, &Options{
		Flags: 1,
		Group: 44,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.FlPatternRepeats, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.FlPatternThickness, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+84, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ObjectiveRegionParams) Walk(cb WalkCallback) {
	cb.Do("TDefault", &t.TDefault)
	cb.Do("THover", &t.THover)
	cb.Do("TTracked", &t.TTracked)
	cb.Do("THoverTracked", &t.THoverTracked)
	cb.Do("FlFalloffThickness", &t.FlFalloffThickness)
	cb.Do("FlThickness", &t.FlThickness)
	cb.Do("SnoPattern", &t.SnoPattern)
	cb.Do("FlPatternRepeats", &t.FlPatternRepeats)
	cb.Do("FlPatternThickness", &t.FlPatternThickness)
}

type TriggerEventMusic struct {
	// Inherits TriggerEvent
	// Inherits PolymorphicBase
	DwType          DT_UINT
	DwPad           DT_UINT
	TConditions     TriggerConditions
	FGenerated      DT_INT
	Unk_6cba752     DT_INT
	DwParentActorID DT_UINT
	SnoMusic        DT_SNO
}

func (t *TriggerEventMusic) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.FGenerated, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_6cba752, r, &Options{Flags: 16}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.DwParentActorID, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.SnoMusic, r, &Options{
		Flags: 1,
		Group: 62,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+88, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TriggerEventMusic) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("TConditions", &t.TConditions)
	cb.Do("FGenerated", &t.FGenerated)
	cb.Do("Unk_6cba752", &t.Unk_6cba752)
	cb.Do("DwParentActorID", &t.DwParentActorID)
	cb.Do("SnoMusic", &t.SnoMusic)
}

type ShaderDefinition struct {
	DwRenderLayers DT_UINT
	PtPasses       DT_VARIABLEARRAY[*RenderPass]
	Unk_860effa    DT_INT
	Unk_cee0ffd    DT_CHARARRAY
	PShaderData    DT_VARIABLEARRAY[*DT_BYTE]
}

func (t *ShaderDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwRenderLayers, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.PtPasses, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.Unk_860effa, r, &Options{Flags: 16}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.Unk_cee0ffd, r, &Options{ArrayLength: 256}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+296, &t.PShaderData, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if _, err := r.Seek(p+312, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ShaderDefinition) Walk(cb WalkCallback) {
	cb.Do("DwRenderLayers", &t.DwRenderLayers)
	cb.Do("PtPasses", &t.PtPasses)
	cb.Do("Unk_860effa", &t.Unk_860effa)
	cb.Do("Unk_cee0ffd", &t.Unk_cee0ffd)
	cb.Do("PShaderData", &t.PShaderData)
}

type BoolDataMessage struct {
	THeader RequiredMessageHeader
	BVal    DT_INT
}

func (t *BoolDataMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BVal, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+20, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *BoolDataMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("BVal", &t.BVal)
}

type TriggerEventVoice struct {
	// Inherits TriggerEvent
	// Inherits PolymorphicBase
	DwType             DT_UINT
	DwPad              DT_UINT
	TConditions        TriggerConditions
	FGenerated         DT_INT
	Unk_6cba752        DT_INT
	DwParentActorID    DT_UINT
	THardpointLink     HardpointLink
	SzVoiceTypeTag     DT_UINT
	SnoVoiceSoundTable DT_SNO
	DwID               DT_UINT
	TCleanup           TriggerCleanup
}

func (t *TriggerEventVoice) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.FGenerated, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_6cba752, r, &Options{Flags: 16}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.DwParentActorID, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.THardpointLink, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.SzVoiceTypeTag, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.SnoVoiceSoundTable, r, &Options{
		Flags: 513,
		Group: 79,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.DwID, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+100, &t.TCleanup, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+128, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TriggerEventVoice) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("TConditions", &t.TConditions)
	cb.Do("FGenerated", &t.FGenerated)
	cb.Do("Unk_6cba752", &t.Unk_6cba752)
	cb.Do("DwParentActorID", &t.DwParentActorID)
	cb.Do("THardpointLink", &t.THardpointLink)
	cb.Do("SzVoiceTypeTag", &t.SzVoiceTypeTag)
	cb.Do("SnoVoiceSoundTable", &t.SnoVoiceSoundTable)
	cb.Do("DwID", &t.DwID)
	cb.Do("TCleanup", &t.TCleanup)
}

type NpcLookEntry struct {
	GbidLookTag           DT_GBID
	SnoMaleComponentSet   DT_SNO
	SnoMaleAppearance     DT_SNO
	SnoFemaleComponentSet DT_SNO
	SnoFemaleAppearance   DT_SNO
	Unk_f54a1d            DT_SNO
	Unk_ca2e3e1           DT_SNO
	ArAnimSetOverrides    DT_VARIABLEARRAY[*AnimSetOverrideEntry]
	EActorVariantType     DT_ENUM
	SzToolTip             DT_CSTRING[*DT_BYTE]
	Unk_83f3d3e           DT_INT
	FHideIdles            DT_INT
	Unk_fd60c8f           DT_INT
	Unk_8711100           DT_INT
	Unk_d289db4           DT_INT
	Unk_c3784ea           DT_INT
}

func (t *NpcLookEntry) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.GbidLookTag, r, &Options{
		Flags: 1,
		Group: 52,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.SnoMaleComponentSet, r, &Options{
		Flags: 1,
		Group: 2,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.SnoMaleAppearance, r, &Options{
		Flags: 1,
		Group: 9,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.SnoFemaleComponentSet, r, &Options{
		Flags: 1,
		Group: 2,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoFemaleAppearance, r, &Options{
		Flags: 1,
		Group: 9,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.Unk_f54a1d, r, &Options{
		Flags: 1,
		Group: 8,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_ca2e3e1, r, &Options{
		Flags: 1,
		Group: 67,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.ArAnimSetOverrides, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.EActorVariantType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.SzToolTip, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_83f3d3e, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.FHideIdles, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.Unk_fd60c8f, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.Unk_8711100, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.Unk_d289db4, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.Unk_c3784ea, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+96, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *NpcLookEntry) Walk(cb WalkCallback) {
	cb.Do("GbidLookTag", &t.GbidLookTag)
	cb.Do("SnoMaleComponentSet", &t.SnoMaleComponentSet)
	cb.Do("SnoMaleAppearance", &t.SnoMaleAppearance)
	cb.Do("SnoFemaleComponentSet", &t.SnoFemaleComponentSet)
	cb.Do("SnoFemaleAppearance", &t.SnoFemaleAppearance)
	cb.Do("Unk_f54a1d", &t.Unk_f54a1d)
	cb.Do("Unk_ca2e3e1", &t.Unk_ca2e3e1)
	cb.Do("ArAnimSetOverrides", &t.ArAnimSetOverrides)
	cb.Do("EActorVariantType", &t.EActorVariantType)
	cb.Do("SzToolTip", &t.SzToolTip)
	cb.Do("Unk_83f3d3e", &t.Unk_83f3d3e)
	cb.Do("FHideIdles", &t.FHideIdles)
	cb.Do("Unk_fd60c8f", &t.Unk_fd60c8f)
	cb.Do("Unk_8711100", &t.Unk_8711100)
	cb.Do("Unk_d289db4", &t.Unk_d289db4)
	cb.Do("Unk_c3784ea", &t.Unk_c3784ea)
}

type UIHotbarButtonStyle struct {
	// Inherits UIButtonStyle
	// Inherits UITextStyle
	// Inherits UIWindowStyle
	// Inherits UIControlStyle
	// Inherits PolymorphicBase
	DwType                    DT_UINT
	DwPad                     DT_UINT
	HParentStyle              UIControlHandle
	Unk_441f783               DT_INT64
	M_eHasModifiedPowerTagMap DT_TAGMAP[*DT_ENUM]
	TConsoleInput             UIControlConsoleInput
	Unk_b4f614c               DT_TAGMAP[*DT_ENUM]
	TFont                     UIControlFont
	Unk_4741819               DT_TAGMAP[*DT_ENUM]
	TIcon                     UIControlIcon
	TClickSounds              UIControlClickSounds
	Unk_10f81f0               DT_TAGMAP[*DT_ENUM]
	Unk_3c001f0               DT_TAGMAP[*DT_ENUM]
}

func (t *UIHotbarButtonStyle) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.HParentStyle, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_441f783, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.M_eHasModifiedPowerTagMap, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.TConsoleInput, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.Unk_b4f614c, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.TFont, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.Unk_4741819, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.TIcon, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.TClickSounds, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+144, &t.Unk_10f81f0, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+160, &t.Unk_3c001f0, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+176, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *UIHotbarButtonStyle) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("HParentStyle", &t.HParentStyle)
	cb.Do("Unk_441f783", &t.Unk_441f783)
	cb.Do("M_eHasModifiedPowerTagMap", &t.M_eHasModifiedPowerTagMap)
	cb.Do("TConsoleInput", &t.TConsoleInput)
	cb.Do("Unk_b4f614c", &t.Unk_b4f614c)
	cb.Do("TFont", &t.TFont)
	cb.Do("Unk_4741819", &t.Unk_4741819)
	cb.Do("TIcon", &t.TIcon)
	cb.Do("TClickSounds", &t.TClickSounds)
	cb.Do("Unk_10f81f0", &t.Unk_10f81f0)
	cb.Do("Unk_3c001f0", &t.Unk_3c001f0)
}

type EmoteDefinition struct {
	SnoPower       DT_SNO
	HImageNormal   DT_UINT
	HImageHover    DT_UINT
	HImageDisabled DT_UINT
}

func (t *EmoteDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.SnoPower, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.HImageNormal, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.HImageHover, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.HImageDisabled, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *EmoteDefinition) Walk(cb WalkCallback) {
	cb.Do("SnoPower", &t.SnoPower)
	cb.Do("HImageNormal", &t.HImageNormal)
	cb.Do("HImageHover", &t.HImageHover)
	cb.Do("HImageDisabled", &t.HImageDisabled)
}

type MarkerLightData struct {
	// Inherits MarkerDataBase
	// Inherits PolymorphicBase
	DwType        DT_UINT
	DwPad         DT_UINT
	TInstanceData LightInstanceData
	Unk_ef69835   DT_INT
}

func (t *MarkerLightData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TInstanceData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+912, &t.Unk_ef69835, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+920, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *MarkerLightData) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("TInstanceData", &t.TInstanceData)
	cb.Do("Unk_ef69835", &t.Unk_ef69835)
}

type ListenerReaction struct {
	SnoListener DT_SNO
	SnonameAnim DT_SNO_NAME
}

func (t *ListenerReaction) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoListener, r, &Options{
		Flags: 1,
		Group: 72,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.SnonameAnim, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+12, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ListenerReaction) Walk(cb WalkCallback) {
	cb.Do("SnoListener", &t.SnoListener)
	cb.Do("SnonameAnim", &t.SnonameAnim)
}

type EnterKnownShaderMapOverrides struct {
	AShaderMapOverrides DT_FIXEDARRAY[*DT_UINT]
}

func (t *EnterKnownShaderMapOverrides) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.AShaderMapOverrides, r, &Options{
		ArrayLength: 6,
		Flags:       1,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *EnterKnownShaderMapOverrides) Walk(cb WalkCallback) {
	cb.Do("AShaderMapOverrides", &t.AShaderMapOverrides)
}

type NecroArmyUnitSpecializationSacrificeData struct {
	SnoSacrificePower DT_SNO
}

func (t *NecroArmyUnitSpecializationSacrificeData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoSacrificePower, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+4, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *NecroArmyUnitSpecializationSacrificeData) Walk(cb WalkCallback) {
	cb.Do("SnoSacrificePower", &t.SnoSacrificePower)
}

type AttackerEnemiesParam struct {
	EScalarFunction     DT_ENUM
	EWwiseGameParameter DT_ENUM
	UID                 DT_UINT
	UNameHash           DT_UINT
	FBypass             DT_INT
}

func (t *AttackerEnemiesParam) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.EScalarFunction, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.EWwiseGameParameter, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.UID, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.UNameHash, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.FBypass, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+20, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *AttackerEnemiesParam) Walk(cb WalkCallback) {
	cb.Do("EScalarFunction", &t.EScalarFunction)
	cb.Do("EWwiseGameParameter", &t.EWwiseGameParameter)
	cb.Do("UID", &t.UID)
	cb.Do("UNameHash", &t.UNameHash)
	cb.Do("FBypass", &t.FBypass)
}

type AnimTreeLayerName struct {
	DwHash DT_UINT
}

func (t *AnimTreeLayerName) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.DwHash, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+4, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *AnimTreeLayerName) Walk(cb WalkCallback) {
	cb.Do("DwHash", &t.DwHash)
}

type Type_381d5201 struct {
	Value                   DT_FLOAT
	BIsDungeonRewardMessage DT_INT
	Unk_411da82             Type_cbfdd2ea
}

func (t *Type_381d5201) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Value, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.BIsDungeonRewardMessage, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.Unk_411da82, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+64, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_381d5201) Walk(cb WalkCallback) {
	cb.Do("Value", &t.Value)
	cb.Do("BIsDungeonRewardMessage", &t.BIsDungeonRewardMessage)
	cb.Do("Unk_411da82", &t.Unk_411da82)
}

type Type_3854c35b struct {
	Value                   DT_INT
	BIsDungeonRewardMessage DT_INT
	Unk_411da82             Type_cc354444
}

func (t *Type_3854c35b) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Value, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.BIsDungeonRewardMessage, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.Unk_411da82, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+64, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_3854c35b) Walk(cb WalkCallback) {
	cb.Do("Value", &t.Value)
	cb.Do("BIsDungeonRewardMessage", &t.BIsDungeonRewardMessage)
	cb.Do("Unk_411da82", &t.Unk_411da82)
}

type DebugPlayerProcessHelpCodeMessage struct {
	THeader      RequiredMessageHeader
	Ann          DT_ACD_NETWORK_NAME
	GbidHelpCode DT_GBID
}

func (t *DebugPlayerProcessHelpCodeMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Ann, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.GbidHelpCode, r, &Options{
		Flags: 1,
		Group: 9,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+28, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *DebugPlayerProcessHelpCodeMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("Ann", &t.Ann)
	cb.Do("GbidHelpCode", &t.GbidHelpCode)
}

type NotLogicSubcondition struct {
	// Inherits Subcondition
	// Inherits PolymorphicBase
	DwType      DT_UINT
	BNegate     DT_INT
	DwPad       DT_UINT
	PtCondition DT_POLYMORPHIC_VARIABLEARRAY[*Subcondition]
}

func (t *NotLogicSubcondition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BNegate, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.PtCondition, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *NotLogicSubcondition) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("BNegate", &t.BNegate)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("PtCondition", &t.PtCondition)
}

type EffectGroupHardpoint struct {
	TInfo     HardpointInfo
	Transform PRTransform
}

func (t *EffectGroupHardpoint) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.TInfo, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.Transform, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+36, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *EffectGroupHardpoint) Walk(cb WalkCallback) {
	cb.Do("TInfo", &t.TInfo)
	cb.Do("Transform", &t.Transform)
}

type ParametricSettings struct {
	FCavity                        DT_INT
	ECavityMode                    DT_ENUM
	FlCavityTolerance              DT_FLOAT
	FlCavitySmoothness             DT_FLOAT
	FHeight                        DT_INT
	FlHeightMin                    DT_FLOAT
	FlHeightMinSmoothness          DT_FLOAT
	FlHeightMax                    DT_FLOAT
	FlHeightMaxSmoothness          DT_FLOAT
	FSlope                         DT_INT
	FlSlopeMin                     DT_FLOAT
	FlSlopeMinSmoothness           DT_FLOAT
	FlSlopeMax                     DT_FLOAT
	FlSlopeMaxSmoothness           DT_FLOAT
	FDirection                     DT_INT
	FlDirectionAltitude            DT_FLOAT
	FlDirectionAzimuth             DT_FLOAT
	FlDirectionTolerance           DT_FLOAT
	FlDirectionSmoothness          DT_FLOAT
	FNoise                         DT_INT
	FlNoiseFrequency               DT_FLOAT
	FlNoiseTileDistance            DT_FLOAT
	FlNoiseMin                     DT_FLOAT
	FlNoiseMax                     DT_FLOAT
	VNoiseOffset                   DT_VECTOR2D
	FDistanceToWater               DT_INT
	FlDistanceToWaterMin           DT_FLOAT
	FlDistanceToWaterMinSmoothness DT_FLOAT
	FlDistanceToWaterMax           DT_FLOAT
	FlDistanceToWaterMaxSmoothness DT_FLOAT
	FInvert                        DT_INT
}

func (t *ParametricSettings) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.FCavity, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.ECavityMode, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.FlCavityTolerance, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.FlCavitySmoothness, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.FHeight, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.FlHeightMin, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.FlHeightMinSmoothness, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.FlHeightMax, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.FlHeightMaxSmoothness, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.FSlope, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.FlSlopeMin, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.FlSlopeMinSmoothness, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.FlSlopeMax, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.FlSlopeMaxSmoothness, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.FDirection, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+60, &t.FlDirectionAltitude, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.FlDirectionAzimuth, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.FlDirectionTolerance, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.FlDirectionSmoothness, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.FNoise, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.FlNoiseFrequency, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.FlNoiseTileDistance, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.FlNoiseMin, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.FlNoiseMax, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.VNoiseOffset, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+104, &t.FDistanceToWater, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+108, &t.FlDistanceToWaterMin, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.FlDistanceToWaterMinSmoothness, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+116, &t.FlDistanceToWaterMax, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.FlDistanceToWaterMaxSmoothness, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+124, &t.FInvert, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+128, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ParametricSettings) Walk(cb WalkCallback) {
	cb.Do("FCavity", &t.FCavity)
	cb.Do("ECavityMode", &t.ECavityMode)
	cb.Do("FlCavityTolerance", &t.FlCavityTolerance)
	cb.Do("FlCavitySmoothness", &t.FlCavitySmoothness)
	cb.Do("FHeight", &t.FHeight)
	cb.Do("FlHeightMin", &t.FlHeightMin)
	cb.Do("FlHeightMinSmoothness", &t.FlHeightMinSmoothness)
	cb.Do("FlHeightMax", &t.FlHeightMax)
	cb.Do("FlHeightMaxSmoothness", &t.FlHeightMaxSmoothness)
	cb.Do("FSlope", &t.FSlope)
	cb.Do("FlSlopeMin", &t.FlSlopeMin)
	cb.Do("FlSlopeMinSmoothness", &t.FlSlopeMinSmoothness)
	cb.Do("FlSlopeMax", &t.FlSlopeMax)
	cb.Do("FlSlopeMaxSmoothness", &t.FlSlopeMaxSmoothness)
	cb.Do("FDirection", &t.FDirection)
	cb.Do("FlDirectionAltitude", &t.FlDirectionAltitude)
	cb.Do("FlDirectionAzimuth", &t.FlDirectionAzimuth)
	cb.Do("FlDirectionTolerance", &t.FlDirectionTolerance)
	cb.Do("FlDirectionSmoothness", &t.FlDirectionSmoothness)
	cb.Do("FNoise", &t.FNoise)
	cb.Do("FlNoiseFrequency", &t.FlNoiseFrequency)
	cb.Do("FlNoiseTileDistance", &t.FlNoiseTileDistance)
	cb.Do("FlNoiseMin", &t.FlNoiseMin)
	cb.Do("FlNoiseMax", &t.FlNoiseMax)
	cb.Do("VNoiseOffset", &t.VNoiseOffset)
	cb.Do("FDistanceToWater", &t.FDistanceToWater)
	cb.Do("FlDistanceToWaterMin", &t.FlDistanceToWaterMin)
	cb.Do("FlDistanceToWaterMinSmoothness", &t.FlDistanceToWaterMinSmoothness)
	cb.Do("FlDistanceToWaterMax", &t.FlDistanceToWaterMax)
	cb.Do("FlDistanceToWaterMaxSmoothness", &t.FlDistanceToWaterMaxSmoothness)
	cb.Do("FInvert", &t.FInvert)
}

type GeneratorToItemResponseMessage struct {
	THeader RequiredResponseMessageHeader
	TItemId Type_f5ac91bb
	Ann     DT_ACD_NETWORK_NAME
}

func (t *GeneratorToItemResponseMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.TItemId, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.Ann, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *GeneratorToItemResponseMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("TItemId", &t.TItemId)
	cb.Do("Ann", &t.Ann)
}

type OnHitSounds struct {
	Unk_85f3271 DT_SNO
	Unk_4588331 DT_SNO
	Unk_632d790 DT_SNO
}

func (t *OnHitSounds) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Unk_85f3271, r, &Options{
		Flags: 1,
		Group: 40,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.Unk_4588331, r, &Options{
		Flags: 1,
		Group: 40,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.Unk_632d790, r, &Options{
		Flags: 1,
		Group: 40,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+12, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *OnHitSounds) Walk(cb WalkCallback) {
	cb.Do("Unk_85f3271", &t.Unk_85f3271)
	cb.Do("Unk_4588331", &t.Unk_4588331)
	cb.Do("Unk_632d790", &t.Unk_632d790)
}

type CraftMultipleMessage struct {
	THeader   RequiredMessageHeader
	SnoRecipe DT_SNO
	UAmount   DT_INT64
}

func (t *CraftMultipleMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoRecipe, r, &Options{
		Flags: 1,
		Group: 49,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.UAmount, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *CraftMultipleMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("SnoRecipe", &t.SnoRecipe)
	cb.Do("UAmount", &t.UAmount)
}

type MarkerReflectionProbeData struct {
	// Inherits MarkerDataBase
	// Inherits PolymorphicBase
	DwType           DT_UINT
	DwPad            DT_UINT
	Unk_65aa6d9      DT_ENUM
	FlInnerScale     DT_FLOAT
	Unk_fb8100e      DT_FLOAT
	SnoTexture       DT_SNO
	QTextureRotation bcQuat
	Unk_340c842      DT_INT
	FHighQuality     DT_INT
	Unk_4f5b254      DT_VECTOR3D
	Unk_56127ed      DT_ENUM
}

func (t *MarkerReflectionProbeData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_65aa6d9, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.FlInnerScale, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_fb8100e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.SnoTexture, r, &Options{
		Flags: 1,
		Group: 44,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.QTextureRotation, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.Unk_340c842, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.FHighQuality, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.Unk_4f5b254, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.Unk_56127ed, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+72, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *MarkerReflectionProbeData) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("Unk_65aa6d9", &t.Unk_65aa6d9)
	cb.Do("FlInnerScale", &t.FlInnerScale)
	cb.Do("Unk_fb8100e", &t.Unk_fb8100e)
	cb.Do("SnoTexture", &t.SnoTexture)
	cb.Do("QTextureRotation", &t.QTextureRotation)
	cb.Do("Unk_340c842", &t.Unk_340c842)
	cb.Do("FHighQuality", &t.FHighQuality)
	cb.Do("Unk_4f5b254", &t.Unk_4f5b254)
	cb.Do("Unk_56127ed", &t.Unk_56127ed)
}

type HearthPortalInfoMessage struct {
	THeader      RequiredMessageHeader
	SnoLevelArea DT_SNO
	AnnPortal    DT_ACD_NETWORK_NAME
	BResetUI     DT_INT
}

func (t *HearthPortalInfoMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoLevelArea, r, &Options{
		Flags: 1,
		Group: 22,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.AnnPortal, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.BResetUI, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *HearthPortalInfoMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("SnoLevelArea", &t.SnoLevelArea)
	cb.Do("AnnPortal", &t.AnnPortal)
	cb.Do("BResetUI", &t.BResetUI)
}

type ScriptEventParamOwnerFollower struct {
	// Inherits ScriptEventParamBase
	// Inherits PolymorphicBase
	DwType     DT_UINT
	EParamType DT_ENUM
	DwPad      DT_UINT
	SnoActor   DT_SNO
}

func (t *ScriptEventParamOwnerFollower) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.EParamType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SnoActor, r, &Options{
		Flags: 513,
		Group: 1,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ScriptEventParamOwnerFollower) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("EParamType", &t.EParamType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("SnoActor", &t.SnoActor)
}

type ConditionalAudioState struct {
	TDefaultAudioState WwiseSwitchValue
	Unk_81dd55e        DT_VARIABLEARRAY[*Type_5e32bd3e]
}

func (t *ConditionalAudioState) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.TDefaultAudioState, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.Unk_81dd55e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ConditionalAudioState) Walk(cb WalkCallback) {
	cb.Do("TDefaultAudioState", &t.TDefaultAudioState)
	cb.Do("Unk_81dd55e", &t.Unk_81dd55e)
}

type PlayerWorldTierSubcondition struct {
	// Inherits Type_d3c3637f
	// Inherits Subcondition
	// Inherits PolymorphicBase
	DwType        DT_UINT
	BNegate       DT_INT
	EComparisonOp DT_ENUM
	DwPad         DT_UINT
	EWorldTier    DT_ENUM
}

func (t *PlayerWorldTierSubcondition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BNegate, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.EComparisonOp, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.EWorldTier, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+40, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PlayerWorldTierSubcondition) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("BNegate", &t.BNegate)
	cb.Do("EComparisonOp", &t.EComparisonOp)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("EWorldTier", &t.EWorldTier)
}

type AnimSetPowerEntry struct {
	SnoPower              DT_SNO
	SnoAnim               DT_SNO
	SnoFemaleOverrideAnim DT_SNO
}

func (t *AnimSetPowerEntry) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoPower, r, &Options{
		Flags: 513,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.SnoAnim, r, &Options{
		Flags: 1,
		Group: 6,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.SnoFemaleOverrideAnim, r, &Options{
		Flags: 1,
		Group: 6,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+12, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *AnimSetPowerEntry) Walk(cb WalkCallback) {
	cb.Do("SnoPower", &t.SnoPower)
	cb.Do("SnoAnim", &t.SnoAnim)
	cb.Do("SnoFemaleOverrideAnim", &t.SnoFemaleOverrideAnim)
}

type FreezeDirectionMessage struct {
	THeader           RequiredMessageHeader
	AnnTarget         DT_OPTIONAL[*DT_ACD_NETWORK_NAME]
	VLocalImpactPos   DT_OPTIONAL[*DT_VECTOR3D]
	FlImpactDirection DT_OPTIONAL[*DT_FLOAT]
	Unk_a6fef34       DT_OPTIONAL[*DT_VECTOR3D]
}

func (t *FreezeDirectionMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.AnnTarget, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.VLocalImpactPos, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.FlImpactDirection, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.Unk_a6fef34, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+68, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *FreezeDirectionMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("AnnTarget", &t.AnnTarget)
	cb.Do("VLocalImpactPos", &t.VLocalImpactPos)
	cb.Do("FlImpactDirection", &t.FlImpactDirection)
	cb.Do("Unk_a6fef34", &t.Unk_a6fef34)
}

type dmClothDataMirror struct {
	BindVertices      DT_INT64
	BindNormals       DT_INT64
	Unk_1655a99       DT_INT64
	BlendWeights      DT_INT64
	Unk_55f9a53       DT_INT64
	DeltaFrames       DT_INT64
	Levels            DT_INT64
	AttachmentLengths DT_INT64
	ParentIndices     DT_INT64
	KinematicRoots    DT_INT64
	TangentIndices    DT_INT64
	Weights           DT_INT64
	DriverInfluences  DT_INT64
	FollowerIndices   DT_INT64
	Triangles         DT_INT64
	ConstraintIndices DT_INT64
	ConstraintLengths DT_INT64
	Unk_d55a167       DT_INT64
	Unk_e5fff43       DT_INT64
	WarpClusters      DT_INT64
	Unk_b6736eb       DT_INT64
	ShearClusters     DT_INT64
	BendClusters      DT_INT64
	CapsuleDefs       DT_INT64
	PlaneDefs         DT_INT64
	DriverBindPose    DT_INT64
	DriverMap         DT_INT64
	Name              DT_FIXEDARRAY[*DT_BYTE]
	Density           DT_FLOAT
	VertexCount       DT_WORD
	VertexCapacity    DT_WORD
	KinematicCount    DT_WORD
	TriangleCount     DT_WORD
	Unk_1f1d125       DT_WORD
	Unk_588faa1       DT_WORD
	Unk_f4d15be       DT_WORD
	Unk_93e1424       DT_WORD
	ConstraintCount   DT_WORD
	Unk_9460e91       DT_WORD
	MaxLevel          DT_WORD
	BoneCount         DT_WORD
	DriverCount       DT_WORD
	CapsuleCount      DT_WORD
	PlaneCount        DT_WORD
}

func (t *dmClothDataMirror) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.BindVertices, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.BindNormals, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_1655a99, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.BlendWeights, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.Unk_55f9a53, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.DeltaFrames, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.Levels, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.AttachmentLengths, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.ParentIndices, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.KinematicRoots, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.TangentIndices, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.Weights, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.DriverInfluences, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+104, &t.FollowerIndices, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.Triangles, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.ConstraintIndices, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.ConstraintLengths, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+136, &t.Unk_d55a167, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+144, &t.Unk_e5fff43, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+152, &t.WarpClusters, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+160, &t.Unk_b6736eb, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+168, &t.ShearClusters, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+176, &t.BendClusters, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+184, &t.CapsuleDefs, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+192, &t.PlaneDefs, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+200, &t.DriverBindPose, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+208, &t.DriverMap, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+216, &t.Name, r, &Options{ArrayLength: 32}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+248, &t.Density, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+252, &t.VertexCount, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+254, &t.VertexCapacity, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+256, &t.KinematicCount, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+258, &t.TriangleCount, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+260, &t.Unk_1f1d125, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+262, &t.Unk_588faa1, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+264, &t.Unk_f4d15be, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+266, &t.Unk_93e1424, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+268, &t.ConstraintCount, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+270, &t.Unk_9460e91, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+272, &t.MaxLevel, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+274, &t.BoneCount, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+276, &t.DriverCount, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+278, &t.CapsuleCount, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+280, &t.PlaneCount, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+288, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *dmClothDataMirror) Walk(cb WalkCallback) {
	cb.Do("BindVertices", &t.BindVertices)
	cb.Do("BindNormals", &t.BindNormals)
	cb.Do("Unk_1655a99", &t.Unk_1655a99)
	cb.Do("BlendWeights", &t.BlendWeights)
	cb.Do("Unk_55f9a53", &t.Unk_55f9a53)
	cb.Do("DeltaFrames", &t.DeltaFrames)
	cb.Do("Levels", &t.Levels)
	cb.Do("AttachmentLengths", &t.AttachmentLengths)
	cb.Do("ParentIndices", &t.ParentIndices)
	cb.Do("KinematicRoots", &t.KinematicRoots)
	cb.Do("TangentIndices", &t.TangentIndices)
	cb.Do("Weights", &t.Weights)
	cb.Do("DriverInfluences", &t.DriverInfluences)
	cb.Do("FollowerIndices", &t.FollowerIndices)
	cb.Do("Triangles", &t.Triangles)
	cb.Do("ConstraintIndices", &t.ConstraintIndices)
	cb.Do("ConstraintLengths", &t.ConstraintLengths)
	cb.Do("Unk_d55a167", &t.Unk_d55a167)
	cb.Do("Unk_e5fff43", &t.Unk_e5fff43)
	cb.Do("WarpClusters", &t.WarpClusters)
	cb.Do("Unk_b6736eb", &t.Unk_b6736eb)
	cb.Do("ShearClusters", &t.ShearClusters)
	cb.Do("BendClusters", &t.BendClusters)
	cb.Do("CapsuleDefs", &t.CapsuleDefs)
	cb.Do("PlaneDefs", &t.PlaneDefs)
	cb.Do("DriverBindPose", &t.DriverBindPose)
	cb.Do("DriverMap", &t.DriverMap)
	cb.Do("Name", &t.Name)
	cb.Do("Density", &t.Density)
	cb.Do("VertexCount", &t.VertexCount)
	cb.Do("VertexCapacity", &t.VertexCapacity)
	cb.Do("KinematicCount", &t.KinematicCount)
	cb.Do("TriangleCount", &t.TriangleCount)
	cb.Do("Unk_1f1d125", &t.Unk_1f1d125)
	cb.Do("Unk_588faa1", &t.Unk_588faa1)
	cb.Do("Unk_f4d15be", &t.Unk_f4d15be)
	cb.Do("Unk_93e1424", &t.Unk_93e1424)
	cb.Do("ConstraintCount", &t.ConstraintCount)
	cb.Do("Unk_9460e91", &t.Unk_9460e91)
	cb.Do("MaxLevel", &t.MaxLevel)
	cb.Do("BoneCount", &t.BoneCount)
	cb.Do("DriverCount", &t.DriverCount)
	cb.Do("CapsuleCount", &t.CapsuleCount)
	cb.Do("PlaneCount", &t.PlaneCount)
}

type Type_3a9f0d72 struct {
	Unk_efe84b7 DT_TAGMAP[*DT_ENUM]
}

func (t *Type_3a9f0d72) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Unk_efe84b7, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_3a9f0d72) Walk(cb WalkCallback) {
	cb.Do("Unk_efe84b7", &t.Unk_efe84b7)
}

type NPCPreset struct {
	// Inherits CharacterPreset
	// Inherits PolymorphicBase
	DwType     DT_UINT
	DwPad      DT_UINT
	SzName     DT_CSTRING[*DT_BYTE]
	SnoWorld   DT_SNO
	NPadding1  DT_INT
	SnoActor   DT_SNO
	SHairColor DT_CSTRING[*DT_BYTE]
	SSkinColor DT_CSTRING[*DT_BYTE]
	ArrItems   DT_FIXEDARRAY[*PresetNPCComponent]
	ArrWeapons DT_FIXEDARRAY[*DT_SNO]
}

func (t *NPCPreset) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SzName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.SnoWorld, r, &Options{
		Flags: 513,
		Group: 48,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.NPadding1, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.SnoActor, r, &Options{
		Flags: 513,
		Group: 1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.SHairColor, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.SSkinColor, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.ArrItems, r, &Options{
		ArrayLength: 4,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+176, &t.ArrWeapons, r, &Options{
		ArrayLength: 2,
		Flags:       513,
		Group:       73,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+184, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *NPCPreset) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("SzName", &t.SzName)
	cb.Do("SnoWorld", &t.SnoWorld)
	cb.Do("NPadding1", &t.NPadding1)
	cb.Do("SnoActor", &t.SnoActor)
	cb.Do("SHairColor", &t.SHairColor)
	cb.Do("SSkinColor", &t.SSkinColor)
	cb.Do("ArrItems", &t.ArrItems)
	cb.Do("ArrWeapons", &t.ArrWeapons)
}

type NpcGenerationData struct {
	ArAnimSetOrder     DT_VARIABLEARRAY[*DT_GBID]
	SnoMountedAnimTree DT_SNO
	SnoMountedAnimSet  DT_SNO
	SnoDefaultMount    DT_SNO
	Unk_e9dd8e9        DT_UINT
	Unk_d42692e        DT_UINT
	Unk_1059e8c        DT_UINT
}

func (t *NpcGenerationData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.ArAnimSetOrder, r, &Options{
		Flags: 1,
		Group: 53,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoMountedAnimTree, r, &Options{
		Flags: 1,
		Group: 67,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.SnoMountedAnimSet, r, &Options{
		Flags: 1,
		Group: 8,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SnoDefaultMount, r, &Options{
		Flags: 1,
		Group: 1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.Unk_e9dd8e9, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.Unk_d42692e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.Unk_1059e8c, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+40, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *NpcGenerationData) Walk(cb WalkCallback) {
	cb.Do("ArAnimSetOrder", &t.ArAnimSetOrder)
	cb.Do("SnoMountedAnimTree", &t.SnoMountedAnimTree)
	cb.Do("SnoMountedAnimSet", &t.SnoMountedAnimSet)
	cb.Do("SnoDefaultMount", &t.SnoDefaultMount)
	cb.Do("Unk_e9dd8e9", &t.Unk_e9dd8e9)
	cb.Do("Unk_d42692e", &t.Unk_d42692e)
	cb.Do("Unk_1059e8c", &t.Unk_1059e8c)
}

type Type_3aef2e34 struct {
	// Inherits Type_d4213c9b
	DwType      DT_UINT
	Unk_9b2bc26 Type_80554fed
	Unk_77ed19a DT_ENUM
	DwPad       DT_UINT
}

func (t *Type_3aef2e34) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_9b2bc26, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.Unk_77ed19a, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+56, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_3aef2e34) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("Unk_9b2bc26", &t.Unk_9b2bc26)
	cb.Do("Unk_77ed19a", &t.Unk_77ed19a)
	cb.Do("DwPad", &t.DwPad)
}

type Type_3b00e8b9 struct {
	FlMinOffset              DT_FLOAT
	FlMaxCumulativeOffset    DT_FLOAT
	FlMaxPerpendicularOffset DT_FLOAT
	Unk_d07468e              DT_FLOAT
	Unk_d0f7bfd              DT_FLOAT
	Unk_4f8fc91              DT_FLOAT
}

func (t *Type_3b00e8b9) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.FlMinOffset, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.FlMaxCumulativeOffset, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.FlMaxPerpendicularOffset, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.Unk_d07468e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_d0f7bfd, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.Unk_4f8fc91, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_3b00e8b9) Walk(cb WalkCallback) {
	cb.Do("FlMinOffset", &t.FlMinOffset)
	cb.Do("FlMaxCumulativeOffset", &t.FlMaxCumulativeOffset)
	cb.Do("FlMaxPerpendicularOffset", &t.FlMaxPerpendicularOffset)
	cb.Do("Unk_d07468e", &t.Unk_d07468e)
	cb.Do("Unk_d0f7bfd", &t.Unk_d0f7bfd)
	cb.Do("Unk_4f8fc91", &t.Unk_4f8fc91)
}

type Cylinder struct {
	Wp1      DT_VECTOR3D
	Wp2      DT_VECTOR3D
	FlRadius DT_FLOAT
}

func (t *Cylinder) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Wp1, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.Wp2, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.FlRadius, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+28, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Cylinder) Walk(cb WalkCallback) {
	cb.Do("Wp1", &t.Wp1)
	cb.Do("Wp2", &t.Wp2)
	cb.Do("FlRadius", &t.FlRadius)
}

type InterpolationScalar struct {
	NScalarFunction DT_ENUM
	DwFlags         DT_UINT
	TInputRange     DT_RANGE[*DT_FLOAT]
	TRemapRange     DT_RANGE[*DT_FLOAT]
	ERemapEasing    DT_ENUM
	SzFormulaName   DT_UINT
}

func (t *InterpolationScalar) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.NScalarFunction, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.DwFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.TInputRange, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TRemapRange, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ERemapEasing, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.SzFormulaName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *InterpolationScalar) Walk(cb WalkCallback) {
	cb.Do("NScalarFunction", &t.NScalarFunction)
	cb.Do("DwFlags", &t.DwFlags)
	cb.Do("TInputRange", &t.TInputRange)
	cb.Do("TRemapRange", &t.TRemapRange)
	cb.Do("ERemapEasing", &t.ERemapEasing)
	cb.Do("SzFormulaName", &t.SzFormulaName)
}

type StoryboardPlayStoryboardNode struct {
	// Inherits StoryboardTimePointNode
	// Inherits PolymorphicBase
	DwType        DT_UINT
	FlTime        DT_FLOAT
	DwPad         DT_UINT
	SnoStoryboard DT_SNO
}

func (t *StoryboardPlayStoryboardNode) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.FlTime, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SnoStoryboard, r, &Options{
		Flags: 1,
		Group: 90,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *StoryboardPlayStoryboardNode) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("FlTime", &t.FlTime)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("SnoStoryboard", &t.SnoStoryboard)
}

type ParametricLayer struct {
	SnoLayer  DT_SNO
	TSettings ParametricSettings
}

func (t *ParametricLayer) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoLayer, r, &Options{
		Flags: 1,
		Group: 57,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.TSettings, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+132, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ParametricLayer) Walk(cb WalkCallback) {
	cb.Do("SnoLayer", &t.SnoLayer)
	cb.Do("TSettings", &t.TSettings)
}

type WorldStateDefinition struct {
	DwFlags DT_UINT
}

func (t *WorldStateDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwFlags, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+12, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *WorldStateDefinition) Walk(cb WalkCallback) {
	cb.Do("DwFlags", &t.DwFlags)
}

type ChangedPlayerMessage struct {
	THeader               RequiredMessageHeader
	DwPlayerGameAccountId DT_UINT
	UsHeroName            DT_CHARARRAY
	EClass                DT_ENUM
}

func (t *ChangedPlayerMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.DwPlayerGameAccountId, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.UsHeroName, r, &Options{
		ArrayLength: 49,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.EClass, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+76, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ChangedPlayerMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("DwPlayerGameAccountId", &t.DwPlayerGameAccountId)
	cb.Do("UsHeroName", &t.UsHeroName)
	cb.Do("EClass", &t.EClass)
}

type WallCornerPieces struct {
	ArPieces          DT_VARIABLEARRAY[*WallPiece]
	ArStartCapPieces  DT_VARIABLEARRAY[*WallPiece]
	ArEndCapPieces    DT_VARIABLEARRAY[*WallPiece]
	TScale            DT_RANGE[*DT_FLOAT]
	EPieceSelectMode  DT_ENUM
	THorizontalOffset DT_RANGE[*DT_FLOAT]
	TYaw              DT_RANGE[*DT_FLOAT]
	Unk_609e23d       DT_INT
	Unk_d8fcfe4       DT_INT
	Unk_435bdfd       DT_INT
	Unk_f2dbd17       DT_INT
	TVerticalOffset   DT_RANGE[*DT_FLOAT]
	Unk_2a8c4b6       DT_FLOAT
}

func (t *WallCornerPieces) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.ArPieces, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.ArStartCapPieces, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.ArEndCapPieces, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.TScale, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.EPieceSelectMode, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+60, &t.THorizontalOffset, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.TYaw, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.Unk_609e23d, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.Unk_d8fcfe4, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.Unk_435bdfd, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.Unk_f2dbd17, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.TVerticalOffset, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+100, &t.Unk_2a8c4b6, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+104, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *WallCornerPieces) Walk(cb WalkCallback) {
	cb.Do("ArPieces", &t.ArPieces)
	cb.Do("ArStartCapPieces", &t.ArStartCapPieces)
	cb.Do("ArEndCapPieces", &t.ArEndCapPieces)
	cb.Do("TScale", &t.TScale)
	cb.Do("EPieceSelectMode", &t.EPieceSelectMode)
	cb.Do("THorizontalOffset", &t.THorizontalOffset)
	cb.Do("TYaw", &t.TYaw)
	cb.Do("Unk_609e23d", &t.Unk_609e23d)
	cb.Do("Unk_d8fcfe4", &t.Unk_d8fcfe4)
	cb.Do("Unk_435bdfd", &t.Unk_435bdfd)
	cb.Do("Unk_f2dbd17", &t.Unk_f2dbd17)
	cb.Do("TVerticalOffset", &t.TVerticalOffset)
	cb.Do("Unk_2a8c4b6", &t.Unk_2a8c4b6)
}

type StoreCameraTransition struct {
	EEasing     DT_ENUM
	WdDuration  DT_FLOAT
	WdOffset    DT_FLOAT
	Unk_2c71308 PRTransform
}

func (t *StoreCameraTransition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.EEasing, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.WdDuration, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.WdOffset, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.Unk_2c71308, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+40, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *StoreCameraTransition) Walk(cb WalkCallback) {
	cb.Do("EEasing", &t.EEasing)
	cb.Do("WdDuration", &t.WdDuration)
	cb.Do("WdOffset", &t.WdOffset)
	cb.Do("Unk_2c71308", &t.Unk_2c71308)
}

type Type_3c468167 struct {
	// Inherits TexAnim
	// Inherits PolymorphicBase
	DwType           DT_UINT
	DwPad            DT_UINT
	FlUScale         DT_FLOAT
	FlVScale         DT_FLOAT
	TFrameAnim       FrameAnim
	FScaleUVsToFrame DT_INT
}

func (t *Type_3c468167) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.FlUScale, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.FlVScale, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.TFrameAnim, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+60, &t.FScaleUVsToFrame, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+64, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_3c468167) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("FlUScale", &t.FlUScale)
	cb.Do("FlVScale", &t.FlVScale)
	cb.Do("TFrameAnim", &t.TFrameAnim)
	cb.Do("FScaleUVsToFrame", &t.FScaleUVsToFrame)
}

type PlasmaAttachMessage struct {
	THeader     RequiredMessageHeader
	AnnPlasma   DT_ACD_NETWORK_NAME
	AnnAttachTo DT_ACD_NETWORK_NAME
}

func (t *PlasmaAttachMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.AnnPlasma, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.AnnAttachTo, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PlasmaAttachMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("AnnPlasma", &t.AnnPlasma)
	cb.Do("AnnAttachTo", &t.AnnAttachTo)
}

type Type_3c65a2a2 struct {
	Unk_4cb9610 DT_GBID
	DwWeight    DT_UINT
}

func (t *Type_3c65a2a2) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Unk_4cb9610, r, &Options{
		Flags: 1,
		Group: 63,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.DwWeight, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_3c65a2a2) Walk(cb WalkCallback) {
	cb.Do("Unk_4cb9610", &t.Unk_4cb9610)
	cb.Do("DwWeight", &t.DwWeight)
}

type TriggerEventDisableRagdollAnimationOverride struct {
	// Inherits TriggerEvent
	// Inherits PolymorphicBase
	DwType          DT_UINT
	DwPad           DT_UINT
	TConditions     TriggerConditions
	FGenerated      DT_INT
	Unk_6cba752     DT_INT
	DwParentActorID DT_UINT
}

func (t *TriggerEventDisableRagdollAnimationOverride) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.FGenerated, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_6cba752, r, &Options{Flags: 16}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.DwParentActorID, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+80, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TriggerEventDisableRagdollAnimationOverride) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("TConditions", &t.TConditions)
	cb.Do("FGenerated", &t.FGenerated)
	cb.Do("Unk_6cba752", &t.Unk_6cba752)
	cb.Do("DwParentActorID", &t.DwParentActorID)
}

type CancelGroupTransferMessage struct {
	THeader RequiredMessageHeader
}

func (t *CancelGroupTransferMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *CancelGroupTransferMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
}

type ConversationNodeReference struct {
	SnoConversation DT_SNO
	DwNodeID        DT_UINT
}

func (t *ConversationNodeReference) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoConversation, r, &Options{
		Flags: 1,
		Group: 12,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.DwNodeID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ConversationNodeReference) Walk(cb WalkCallback) {
	cb.Do("SnoConversation", &t.SnoConversation)
	cb.Do("DwNodeID", &t.DwNodeID)
}

type Type_3c7ce2a0 struct {
	// Inherits NamedGizmoData
	// Inherits ActorGizmoData
	// Inherits PolymorphicBase
	DwType                       DT_UINT
	DwPad                        DT_UINT
	FDisableNonFriendlyOperation DT_INT
	FWalkToCenter                DT_INT
	FGizmoStartsDisabled         DT_INT
	FUseStringListName           DT_INT
	FForceMinimapIcon            DT_INT
	FlOperationRadius            DT_FLOAT
	Unk_d0b1df5                  DT_FLOAT
	FlGizmoUseTime               DT_FLOAT
	SnoChannelingEffect          DT_SNO
	Unk_2767229                  DT_INT
	FGizmoShowProgressBar        DT_INT
	Unk_6d9ebe1                  DT_INT
	Unk_5456245                  DT_INT
	Unk_af5815a                  DT_INT
	SnoOnClickEffect             DT_SNO
	SnoPickedUpEffect            DT_SNO
	SnoDropOnGroundEffect        DT_SNO
	TConditionData               GizmoConditionData
	SnoPowerOperator             DT_SNO
	SnoPowerOperate              DT_SNO
	SnoPowerOperatorActive       DT_SNO
	SnoPowerOperateActive        DT_SNO
	Unk_359810e                  DT_INT
	NCooldown                    DT_UINT
	Unk_9c8478e                  DT_UINT
	Unk_d45ed2d                  DT_INT
	Unk_f6b20b7                  DT_INT
	Unk_54513b8                  DT_INT
	Unk_fd1f378                  DT_UINT
	Unk_487c14                   DT_UINT
	Unk_87f2609                  DT_UINT
	Unk_158eb4f                  DT_FLOAT
	Unk_ab58cd3                  DT_ENUM
	Unk_91a3966                  DT_UINT
	Unk_25312e5                  DT_UINT
	Unk_4be4371                  DT_INT
	Unk_4d0f6a9                  DT_UINT
}

func (t *Type_3c7ce2a0) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.FDisableNonFriendlyOperation, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.FWalkToCenter, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.FGizmoStartsDisabled, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.FUseStringListName, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.FForceMinimapIcon, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.FlOperationRadius, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.Unk_d0b1df5, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.FlGizmoUseTime, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.SnoChannelingEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.Unk_2767229, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.FGizmoShowProgressBar, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+60, &t.Unk_6d9ebe1, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.Unk_5456245, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.Unk_af5815a, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.SnoOnClickEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.SnoPickedUpEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.SnoDropOnGroundEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.TConditionData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.SnoPowerOperator, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.SnoPowerOperate, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.SnoPowerOperatorActive, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+100, &t.SnoPowerOperateActive, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+104, &t.Unk_359810e, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+108, &t.NCooldown, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.Unk_9c8478e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+116, &t.Unk_d45ed2d, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.Unk_f6b20b7, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+124, &t.Unk_54513b8, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.Unk_fd1f378, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+132, &t.Unk_487c14, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+136, &t.Unk_87f2609, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+140, &t.Unk_158eb4f, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+144, &t.Unk_ab58cd3, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+148, &t.Unk_91a3966, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+152, &t.Unk_25312e5, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+156, &t.Unk_4be4371, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+160, &t.Unk_4d0f6a9, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+168, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_3c7ce2a0) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("FDisableNonFriendlyOperation", &t.FDisableNonFriendlyOperation)
	cb.Do("FWalkToCenter", &t.FWalkToCenter)
	cb.Do("FGizmoStartsDisabled", &t.FGizmoStartsDisabled)
	cb.Do("FUseStringListName", &t.FUseStringListName)
	cb.Do("FForceMinimapIcon", &t.FForceMinimapIcon)
	cb.Do("FlOperationRadius", &t.FlOperationRadius)
	cb.Do("Unk_d0b1df5", &t.Unk_d0b1df5)
	cb.Do("FlGizmoUseTime", &t.FlGizmoUseTime)
	cb.Do("SnoChannelingEffect", &t.SnoChannelingEffect)
	cb.Do("Unk_2767229", &t.Unk_2767229)
	cb.Do("FGizmoShowProgressBar", &t.FGizmoShowProgressBar)
	cb.Do("Unk_6d9ebe1", &t.Unk_6d9ebe1)
	cb.Do("Unk_5456245", &t.Unk_5456245)
	cb.Do("Unk_af5815a", &t.Unk_af5815a)
	cb.Do("SnoOnClickEffect", &t.SnoOnClickEffect)
	cb.Do("SnoPickedUpEffect", &t.SnoPickedUpEffect)
	cb.Do("SnoDropOnGroundEffect", &t.SnoDropOnGroundEffect)
	cb.Do("TConditionData", &t.TConditionData)
	cb.Do("SnoPowerOperator", &t.SnoPowerOperator)
	cb.Do("SnoPowerOperate", &t.SnoPowerOperate)
	cb.Do("SnoPowerOperatorActive", &t.SnoPowerOperatorActive)
	cb.Do("SnoPowerOperateActive", &t.SnoPowerOperateActive)
	cb.Do("Unk_359810e", &t.Unk_359810e)
	cb.Do("NCooldown", &t.NCooldown)
	cb.Do("Unk_9c8478e", &t.Unk_9c8478e)
	cb.Do("Unk_d45ed2d", &t.Unk_d45ed2d)
	cb.Do("Unk_f6b20b7", &t.Unk_f6b20b7)
	cb.Do("Unk_54513b8", &t.Unk_54513b8)
	cb.Do("Unk_fd1f378", &t.Unk_fd1f378)
	cb.Do("Unk_487c14", &t.Unk_487c14)
	cb.Do("Unk_87f2609", &t.Unk_87f2609)
	cb.Do("Unk_158eb4f", &t.Unk_158eb4f)
	cb.Do("Unk_ab58cd3", &t.Unk_ab58cd3)
	cb.Do("Unk_91a3966", &t.Unk_91a3966)
	cb.Do("Unk_25312e5", &t.Unk_25312e5)
	cb.Do("Unk_4be4371", &t.Unk_4be4371)
	cb.Do("Unk_4d0f6a9", &t.Unk_4d0f6a9)
}

type ActorMountData struct {
	EMountRarity DT_ENUM
	Unk_40ae170  DT_SNO
}

func (t *ActorMountData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.EMountRarity, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.Unk_40ae170, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ActorMountData) Walk(cb WalkCallback) {
	cb.Do("EMountRarity", &t.EMountRarity)
	cb.Do("Unk_40ae170", &t.Unk_40ae170)
}

type PlayerACDInfo struct {
	FFemale         DT_INT
	EPlayerClass    DT_ENUM
	NSkinColorIndex DT_INT
	SnoFace         DT_SNO
	SnoMakeup       DT_SNO
	SnoMarkingShape DT_SNO
	SnoMarkingColor DT_SNO
	SnoHairColor    DT_SNO
	SnoEyeColor     DT_SNO
	SnoHairStyle    DT_SNO
	SnoFacialHair   DT_SNO
	SnoJewelry      DT_SNO
	SnoMount        DT_SNO
	SnoHeadstone    DT_SNO
	SnoItems        DT_FIXEDARRAY[*DT_SNO]
	SnoPowers       DT_FIXEDARRAY[*DT_SNO]
	SnoEmotePowers  DT_FIXEDARRAY[*DT_SNO]
	Unk_d96f751     DT_FIXEDARRAY[*DT_SNO_NAME]
}

func (t *PlayerACDInfo) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.FFemale, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.EPlayerClass, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.NSkinColorIndex, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.SnoFace, r, &Options{
		Flags: 1,
		Group: 140,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoMakeup, r, &Options{
		Flags: 1,
		Group: 132,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.SnoMarkingShape, r, &Options{
		Flags: 1,
		Group: 115,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SnoMarkingColor, r, &Options{
		Flags: 1,
		Group: 133,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.SnoHairColor, r, &Options{
		Flags: 1,
		Group: 134,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.SnoEyeColor, r, &Options{
		Flags: 1,
		Group: 131,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.SnoHairStyle, r, &Options{
		Flags: 1,
		Group: 138,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.SnoFacialHair, r, &Options{
		Flags: 1,
		Group: 139,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.SnoJewelry, r, &Options{
		Flags: 1,
		Group: 119,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.SnoMount, r, &Options{
		Flags: 1,
		Group: 1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.SnoHeadstone, r, &Options{
		Flags: 1,
		Group: 1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.SnoItems, r, &Options{
		ArrayLength: 18,
		Flags:       9,
		Group:       73,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+132, &t.SnoPowers, r, &Options{
		ArrayLength: 128,
		Flags:       9,
		Group:       29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+648, &t.SnoEmotePowers, r, &Options{
		ArrayLength: 24,
		Flags:       9,
		Group:       29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+748, &t.Unk_d96f751, r, &Options{
		ArrayLength: 16,
		Flags:       8,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+880, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PlayerACDInfo) Walk(cb WalkCallback) {
	cb.Do("FFemale", &t.FFemale)
	cb.Do("EPlayerClass", &t.EPlayerClass)
	cb.Do("NSkinColorIndex", &t.NSkinColorIndex)
	cb.Do("SnoFace", &t.SnoFace)
	cb.Do("SnoMakeup", &t.SnoMakeup)
	cb.Do("SnoMarkingShape", &t.SnoMarkingShape)
	cb.Do("SnoMarkingColor", &t.SnoMarkingColor)
	cb.Do("SnoHairColor", &t.SnoHairColor)
	cb.Do("SnoEyeColor", &t.SnoEyeColor)
	cb.Do("SnoHairStyle", &t.SnoHairStyle)
	cb.Do("SnoFacialHair", &t.SnoFacialHair)
	cb.Do("SnoJewelry", &t.SnoJewelry)
	cb.Do("SnoMount", &t.SnoMount)
	cb.Do("SnoHeadstone", &t.SnoHeadstone)
	cb.Do("SnoItems", &t.SnoItems)
	cb.Do("SnoPowers", &t.SnoPowers)
	cb.Do("SnoEmotePowers", &t.SnoEmotePowers)
	cb.Do("Unk_d96f751", &t.Unk_d96f751)
}

type PlayerSavedDataMessage struct {
	THeader               RequiredMessageHeader
	TSavedData            PlayerSavedData
	DwPlayerGameAccountId DT_UINT
}

func (t *PlayerSavedDataMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TSavedData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+3680, &t.DwPlayerGameAccountId, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+3688, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PlayerSavedDataMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("TSavedData", &t.TSavedData)
	cb.Do("DwPlayerGameAccountId", &t.DwPlayerGameAccountId)
}

type TransmogSlotMessage struct {
	THeader               RequiredMessageHeader
	ESlot                 DT_ENUM
	SnoTransmogSourceItem DT_SNO
	SnoDye                DT_SNO
}

func (t *TransmogSlotMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.ESlot, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.SnoTransmogSourceItem, r, &Options{
		Flags: 1,
		Group: 73,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SnoDye, r, &Options{
		Flags: 1,
		Group: 122,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+28, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TransmogSlotMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("ESlot", &t.ESlot)
	cb.Do("SnoTransmogSourceItem", &t.SnoTransmogSourceItem)
	cb.Do("SnoDye", &t.SnoDye)
}

type RecipeTier struct {
	NRequiredLevel DT_INT
	NGoldCost      DT_INT
	ArRecipes      DT_VARIABLEARRAY[*DT_SNO]
}

func (t *RecipeTier) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.NRequiredLevel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.NGoldCost, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.ArRecipes, r, &Options{
		Flags: 1,
		Group: 49,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *RecipeTier) Walk(cb WalkCallback) {
	cb.Do("NRequiredLevel", &t.NRequiredLevel)
	cb.Do("NGoldCost", &t.NGoldCost)
	cb.Do("ArRecipes", &t.ArRecipes)
}

type Type_3d4fd272 struct {
	SzBoneName      DT_UINT
	Unk_36bc3de     DT_FLOAT
	FlDuration      DT_FLOAT
	FlRotationSpeed DT_FLOAT
	FlRotationAngle DT_FLOAT
	Unk_92ce5f2     DT_INT
	Unk_10363a5     Type_cbfdd2ea
	Unk_afaabbe     DT_VARIABLEARRAY[*Type_e1a124f1]
}

func (t *Type_3d4fd272) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SzBoneName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.Unk_36bc3de, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.FlDuration, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.FlRotationSpeed, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.FlRotationAngle, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.Unk_92ce5f2, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_10363a5, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.Unk_afaabbe, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+96, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_3d4fd272) Walk(cb WalkCallback) {
	cb.Do("SzBoneName", &t.SzBoneName)
	cb.Do("Unk_36bc3de", &t.Unk_36bc3de)
	cb.Do("FlDuration", &t.FlDuration)
	cb.Do("FlRotationSpeed", &t.FlRotationSpeed)
	cb.Do("FlRotationAngle", &t.FlRotationAngle)
	cb.Do("Unk_92ce5f2", &t.Unk_92ce5f2)
	cb.Do("Unk_10363a5", &t.Unk_10363a5)
	cb.Do("Unk_afaabbe", &t.Unk_afaabbe)
}

type CollisionSettingsDefinition struct {
	TCollFlags  ActorCollisionFlags
	Unk_a882afd DT_INT
	Unk_54403ff DT_INT
}

func (t *CollisionSettingsDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.TCollFlags, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_a882afd, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.Unk_54403ff, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *CollisionSettingsDefinition) Walk(cb WalkCallback) {
	cb.Do("TCollFlags", &t.TCollFlags)
	cb.Do("Unk_a882afd", &t.Unk_a882afd)
	cb.Do("Unk_54403ff", &t.Unk_54403ff)
}

type PlayerVariableValueSubcondition struct {
	// Inherits Type_d3c3637f
	// Inherits Subcondition
	// Inherits PolymorphicBase
	DwType               DT_UINT
	BNegate              DT_INT
	EComparisonOp        DT_ENUM
	DwPad                DT_UINT
	GbidDesignerVariable DT_GBID
	NValue               DT_INT
}

func (t *PlayerVariableValueSubcondition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BNegate, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.EComparisonOp, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.GbidDesignerVariable, r, &Options{
		Flags: 1,
		Group: 45,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.NValue, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+40, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PlayerVariableValueSubcondition) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("BNegate", &t.BNegate)
	cb.Do("EComparisonOp", &t.EComparisonOp)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("GbidDesignerVariable", &t.GbidDesignerVariable)
	cb.Do("NValue", &t.NValue)
}

type AssetList struct {
	ArEntries DT_VARIABLEARRAY[*AssetListEntry]
}

func (t *AssetList) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.ArEntries, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *AssetList) Walk(cb WalkCallback) {
	cb.Do("ArEntries", &t.ArEntries)
}

type TriggerEventChangeClothParameters struct {
	// Inherits TriggerEvent
	// Inherits PolymorphicBase
	DwType          DT_UINT
	DwPad           DT_UINT
	TConditions     TriggerConditions
	FGenerated      DT_INT
	Unk_6cba752     DT_INT
	DwParentActorID DT_UINT
	Unk_4f25fc8     DT_SNO
	SzSubObjectName DT_UINT
	FlBlendTime     DT_FLOAT
}

func (t *TriggerEventChangeClothParameters) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.FGenerated, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_6cba752, r, &Options{Flags: 16}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.DwParentActorID, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.Unk_4f25fc8, r, &Options{
		Flags: 1,
		Group: 11,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.SzSubObjectName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.FlBlendTime, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+96, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TriggerEventChangeClothParameters) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("TConditions", &t.TConditions)
	cb.Do("FGenerated", &t.FGenerated)
	cb.Do("Unk_6cba752", &t.Unk_6cba752)
	cb.Do("DwParentActorID", &t.DwParentActorID)
	cb.Do("Unk_4f25fc8", &t.Unk_4f25fc8)
	cb.Do("SzSubObjectName", &t.SzSubObjectName)
	cb.Do("FlBlendTime", &t.FlBlendTime)
}

type Type_3ddf9693 struct {
	SnoActor            DT_SNO
	SzLookName          DT_UINT
	DwShaderMapOverride DT_UINT
	Unk_189be9b         DT_INT
	Unk_94a2b91         DT_INT
	Unk_d094b9a         DT_ENUM
	FlWeight            DT_FLOAT
	FlFootprint         DT_FLOAT
	EFadeMethod         DT_ENUM
	Unk_da5b372         DT_INT
	Unk_8dea4d9         DT_INT
	NFadeGroup          DT_INT
}

func (t *Type_3ddf9693) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoActor, r, &Options{
		Flags: 513,
		Group: 1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.SzLookName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwShaderMapOverride, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.Unk_189be9b, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_94a2b91, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.Unk_d094b9a, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.FlWeight, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.FlFootprint, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.EFadeMethod, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.Unk_da5b372, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.Unk_8dea4d9, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.NFadeGroup, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_3ddf9693) Walk(cb WalkCallback) {
	cb.Do("SnoActor", &t.SnoActor)
	cb.Do("SzLookName", &t.SzLookName)
	cb.Do("DwShaderMapOverride", &t.DwShaderMapOverride)
	cb.Do("Unk_189be9b", &t.Unk_189be9b)
	cb.Do("Unk_94a2b91", &t.Unk_94a2b91)
	cb.Do("Unk_d094b9a", &t.Unk_d094b9a)
	cb.Do("FlWeight", &t.FlWeight)
	cb.Do("FlFootprint", &t.FlFootprint)
	cb.Do("EFadeMethod", &t.EFadeMethod)
	cb.Do("Unk_da5b372", &t.Unk_da5b372)
	cb.Do("Unk_8dea4d9", &t.Unk_8dea4d9)
	cb.Do("NFadeGroup", &t.NFadeGroup)
}

type DebugDataBlockMessage struct {
	THeader     RequiredMessageHeader
	NType       DT_INT
	ArParams    DT_FIXEDARRAY[*DT_INT]
	Unk_2b2f2eb DT_INT
	TData       DT_FIXEDARRAY[*DT_BYTE]
}

func (t *DebugDataBlockMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.NType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.ArParams, r, &Options{
		ArrayLength: 2,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.Unk_2b2f2eb, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.TData, r, &Options{
		ArrayLength: 30000,
		Flags:       8,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+30036, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *DebugDataBlockMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("NType", &t.NType)
	cb.Do("ArParams", &t.ArParams)
	cb.Do("Unk_2b2f2eb", &t.Unk_2b2f2eb)
	cb.Do("TData", &t.TData)
}

type TrackedRewardDefinition struct {
	ESource   DT_ENUM
	EType     DT_ENUM
	EStatType DT_ENUM
	FlAmount  DT_FLOAT
	SnoAspect DT_SNO
}

func (t *TrackedRewardDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.ESource, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.EType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.EStatType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.FlAmount, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SnoAspect, r, &Options{
		Flags: 1,
		Group: 128,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+28, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TrackedRewardDefinition) Walk(cb WalkCallback) {
	cb.Do("ESource", &t.ESource)
	cb.Do("EType", &t.EType)
	cb.Do("EStatType", &t.EStatType)
	cb.Do("FlAmount", &t.FlAmount)
	cb.Do("SnoAspect", &t.SnoAspect)
}

type SpeedTreeWindParams struct {
	FStrengthResponse          DT_FLOAT
	FDirectionResponse         DT_FLOAT
	FAnchorOffset              DT_FLOAT
	FAnchorDistanceScale       DT_FLOAT
	Unk_824f481                DT_FIXEDARRAY[*DT_FLOAT]
	FGlobalHeight              DT_FLOAT
	FGlobalHeightExponent      DT_FLOAT
	AfGlobalDistance           DT_FIXEDARRAY[*DT_FLOAT]
	AfGlobalDirectionAdherence DT_FIXEDARRAY[*DT_FLOAT]
	AtBranch                   DT_FIXEDARRAY[*SpeedTreeBranchWindLevel]
	AtLeaf                     DT_FIXEDARRAY[*SpeedTreeWindGroup]
	Unk_3ee7b7                 DT_FIXEDARRAY[*DT_FLOAT]
	Unk_420899                 DT_FLOAT
	Unk_7c69197                DT_FLOAT
	Unk_9938ef6                DT_FLOAT
	Unk_c1eed76                DT_FLOAT
	Unk_ba61ab4                DT_FLOAT
	Unk_567053e                DT_FLOAT
	Unk_c08eb6c                DT_FLOAT
	Unk_233b257                DT_FLOAT
	Unk_ddcd73                 DT_FLOAT
	Unk_94608ec                DT_FLOAT
	Unk_210514c                DT_FLOAT
	Unk_b06b705                DT_FLOAT
	Unk_f7ea482                DT_FLOAT
	FGustFrequency             DT_FLOAT
	FGustStrengthMin           DT_FLOAT
	FGustStrengthMax           DT_FLOAT
	FGustDurationMin           DT_FLOAT
	FGustDurationMax           DT_FLOAT
	FGustRiseScalar            DT_FLOAT
	FGustFallScalar            DT_FLOAT
	Unk_5c5413                 DT_INT
	Unk_5c5414                 DT_INT
	Unk_22c4571                DT_VECTOR3D
	Unk_2e7a7c5                DT_FLOAT
}

func (t *SpeedTreeWindParams) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.FStrengthResponse, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.FDirectionResponse, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.FAnchorOffset, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.FAnchorDistanceScale, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_824f481, r, &Options{
		ArrayLength: 100,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+416, &t.FGlobalHeight, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+420, &t.FGlobalHeightExponent, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+424, &t.AfGlobalDistance, r, &Options{
		ArrayLength: 10,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+464, &t.AfGlobalDirectionAdherence, r, &Options{
		ArrayLength: 10,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+504, &t.AtBranch, r, &Options{
		ArrayLength: 2,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+768, &t.AtLeaf, r, &Options{
		ArrayLength: 2,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1216, &t.Unk_3ee7b7, r, &Options{
		ArrayLength: 10,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1256, &t.Unk_420899, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1260, &t.Unk_7c69197, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1264, &t.Unk_9938ef6, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1268, &t.Unk_c1eed76, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1272, &t.Unk_ba61ab4, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1276, &t.Unk_567053e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1280, &t.Unk_c08eb6c, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1284, &t.Unk_233b257, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1288, &t.Unk_ddcd73, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1292, &t.Unk_94608ec, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1296, &t.Unk_210514c, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1300, &t.Unk_b06b705, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1304, &t.Unk_f7ea482, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1308, &t.FGustFrequency, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1312, &t.FGustStrengthMin, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1316, &t.FGustStrengthMax, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1320, &t.FGustDurationMin, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1324, &t.FGustDurationMax, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1328, &t.FGustRiseScalar, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1332, &t.FGustFallScalar, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1336, &t.Unk_5c5413, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1340, &t.Unk_5c5414, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1344, &t.Unk_22c4571, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1356, &t.Unk_2e7a7c5, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+1360, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *SpeedTreeWindParams) Walk(cb WalkCallback) {
	cb.Do("FStrengthResponse", &t.FStrengthResponse)
	cb.Do("FDirectionResponse", &t.FDirectionResponse)
	cb.Do("FAnchorOffset", &t.FAnchorOffset)
	cb.Do("FAnchorDistanceScale", &t.FAnchorDistanceScale)
	cb.Do("Unk_824f481", &t.Unk_824f481)
	cb.Do("FGlobalHeight", &t.FGlobalHeight)
	cb.Do("FGlobalHeightExponent", &t.FGlobalHeightExponent)
	cb.Do("AfGlobalDistance", &t.AfGlobalDistance)
	cb.Do("AfGlobalDirectionAdherence", &t.AfGlobalDirectionAdherence)
	cb.Do("AtBranch", &t.AtBranch)
	cb.Do("AtLeaf", &t.AtLeaf)
	cb.Do("Unk_3ee7b7", &t.Unk_3ee7b7)
	cb.Do("Unk_420899", &t.Unk_420899)
	cb.Do("Unk_7c69197", &t.Unk_7c69197)
	cb.Do("Unk_9938ef6", &t.Unk_9938ef6)
	cb.Do("Unk_c1eed76", &t.Unk_c1eed76)
	cb.Do("Unk_ba61ab4", &t.Unk_ba61ab4)
	cb.Do("Unk_567053e", &t.Unk_567053e)
	cb.Do("Unk_c08eb6c", &t.Unk_c08eb6c)
	cb.Do("Unk_233b257", &t.Unk_233b257)
	cb.Do("Unk_ddcd73", &t.Unk_ddcd73)
	cb.Do("Unk_94608ec", &t.Unk_94608ec)
	cb.Do("Unk_210514c", &t.Unk_210514c)
	cb.Do("Unk_b06b705", &t.Unk_b06b705)
	cb.Do("Unk_f7ea482", &t.Unk_f7ea482)
	cb.Do("FGustFrequency", &t.FGustFrequency)
	cb.Do("FGustStrengthMin", &t.FGustStrengthMin)
	cb.Do("FGustStrengthMax", &t.FGustStrengthMax)
	cb.Do("FGustDurationMin", &t.FGustDurationMin)
	cb.Do("FGustDurationMax", &t.FGustDurationMax)
	cb.Do("FGustRiseScalar", &t.FGustRiseScalar)
	cb.Do("FGustFallScalar", &t.FGustFallScalar)
	cb.Do("Unk_5c5413", &t.Unk_5c5413)
	cb.Do("Unk_5c5414", &t.Unk_5c5414)
	cb.Do("Unk_22c4571", &t.Unk_22c4571)
	cb.Do("Unk_2e7a7c5", &t.Unk_2e7a7c5)
}

type Type_3ecfe93c struct {
	ArTiers DT_VARIABLEARRAY[*Type_95269030]
}

func (t *Type_3ecfe93c) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.ArTiers, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_3ecfe93c) Walk(cb WalkCallback) {
	cb.Do("ArTiers", &t.ArTiers)
}

type QuestDefinition struct {
	EQuestType                     DT_ENUM
	EPlayerQuestType               DT_ENUM
	EEventQuestType                DT_ENUM
	EInstanceQuestType             DT_ENUM
	ERepeatType                    DT_ENUM
	EVignetteType                  DT_ENUM
	Unk_43f3849                    DT_INT
	Unk_48a2b16                    DT_INT
	TMarkerHandleStartLocation     MarkerHandle
	VecStartLocation               DT_VECTOR3D
	SnoWorldStartLocation          DT_SNO
	TMarkerHandleDevStartLocation  MarkerHandle
	VecDevStartLocation            DT_VECTOR3D
	SnoWorldDevStartLocation       DT_SNO
	Unk_d2181f0                    DT_STARTLOC_NAME
	SnoLevelArea                   DT_SNO
	Unk_f956a05                    DT_INT
	Unk_14dee1b                    DT_INT
	FlParticipationRadius          DT_FLOAT
	Unk_8881b0e                    DT_FLOAT
	DwNextUID                      DT_UINT
	FPrioritySideQuest             DT_INT
	Unk_c18cabd                    DT_INT
	Unk_79f6e17                    DT_ENUM
	GbidSubzoneModifierTag         DT_GBID
	SnoBountySubzone               DT_SNO
	EBountyTier                    DT_ENUM
	EBountyType                    DT_ENUM
	Unk_313dbf6                    DT_INT
	DwRegionSourceCallbackUID      DT_UINT
	Unk_b83e7b1                    DT_ENUM
	Unk_942bcdb                    DT_INT
	DwFlags                        DT_UINT
	ArQuestPhases                  DT_POLYMORPHIC_VARIABLEARRAY[*DT_INT64]
	ArRequiredReputations          DT_VARIABLEARRAY[*ReputationValuePair]
	ArReputationRewards            DT_VARIABLEARRAY[*ReputationValuePair]
	ArRequiredCompletedQuests      DT_VARIABLEARRAY[*DT_SNO]
	SnoStartCondition              DT_SNO
	ArFollowers                    DT_VARIABLEARRAY[*QuestFollower]
	ArQuestItems                   DT_VARIABLEARRAY[*DT_SNO]
	ArQuestDungeons                DT_VARIABLEARRAY[*DT_SNO]
	Unk_2aa5f20                    DT_VARIABLEARRAY[*DT_SNO]
	Unk_b43b442                    DT_VARIABLEARRAY[*DT_GBID]
	GbidSurveyType                 DT_GBID
	GbidNightmareDungeonSurveyType DT_GBID
	Unk_f4b6cde                    Type_56ff7d6a
	SnoAudioContext                DT_SNO
	ArAllReferencedItems           DT_VARIABLEARRAY[*DT_SNO]
}

func (t *QuestDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.EQuestType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.EPlayerQuestType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.EEventQuestType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.EInstanceQuestType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ERepeatType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.EVignetteType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.Unk_43f3849, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.Unk_48a2b16, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.TMarkerHandleStartLocation, r, &Options{Flags: 513}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.VecStartLocation, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+60, &t.SnoWorldStartLocation, r, &Options{
		Flags: 512,
		Group: 48,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.TMarkerHandleDevStartLocation, r, &Options{Flags: 513}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.VecDevStartLocation, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.SnoWorldDevStartLocation, r, &Options{
		Flags: 512,
		Group: 48,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.Unk_d2181f0, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.SnoLevelArea, r, &Options{
		Flags: 513,
		Group: 22,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.Unk_f956a05, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+100, &t.Unk_14dee1b, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+104, &t.FlParticipationRadius, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+108, &t.Unk_8881b0e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.DwNextUID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+116, &t.FPrioritySideQuest, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.Unk_c18cabd, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+124, &t.Unk_79f6e17, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.GbidSubzoneModifierTag, r, &Options{
		Flags: 1,
		Group: 60,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+132, &t.SnoBountySubzone, r, &Options{
		Flags: 513,
		Group: 80,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+136, &t.EBountyTier, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+140, &t.EBountyType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+144, &t.Unk_313dbf6, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+148, &t.DwRegionSourceCallbackUID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+152, &t.Unk_b83e7b1, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+156, &t.Unk_942bcdb, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+160, &t.DwFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+168, &t.ArQuestPhases, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+192, &t.ArRequiredReputations, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+208, &t.ArReputationRewards, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+224, &t.ArRequiredCompletedQuests, r, &Options{
		Flags: 513,
		Group: 31,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+240, &t.SnoStartCondition, r, &Options{
		Flags: 1,
		Group: 51,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+248, &t.ArFollowers, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+264, &t.ArQuestItems, r, &Options{
		Flags: 1,
		Group: 73,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+280, &t.ArQuestDungeons, r, &Options{
		Flags: 1,
		Group: 48,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+296, &t.Unk_2aa5f20, r, &Options{
		Flags: 1,
		Group: 31,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+312, &t.Unk_b43b442, r, &Options{
		Flags: 1,
		Group: 45,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+328, &t.GbidSurveyType, r, &Options{
		Flags: 1,
		Group: 57,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+332, &t.GbidNightmareDungeonSurveyType, r, &Options{
		Flags: 1,
		Group: 57,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+336, &t.Unk_f4b6cde, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+352, &t.SnoAudioContext, r, &Options{
		Flags: 1,
		Group: 93,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+360, &t.ArAllReferencedItems, r, &Options{Group: 73}); err != nil {
		return err
	}
	if _, err := r.Seek(p+376, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *QuestDefinition) Walk(cb WalkCallback) {
	cb.Do("EQuestType", &t.EQuestType)
	cb.Do("EPlayerQuestType", &t.EPlayerQuestType)
	cb.Do("EEventQuestType", &t.EEventQuestType)
	cb.Do("EInstanceQuestType", &t.EInstanceQuestType)
	cb.Do("ERepeatType", &t.ERepeatType)
	cb.Do("EVignetteType", &t.EVignetteType)
	cb.Do("Unk_43f3849", &t.Unk_43f3849)
	cb.Do("Unk_48a2b16", &t.Unk_48a2b16)
	cb.Do("TMarkerHandleStartLocation", &t.TMarkerHandleStartLocation)
	cb.Do("VecStartLocation", &t.VecStartLocation)
	cb.Do("SnoWorldStartLocation", &t.SnoWorldStartLocation)
	cb.Do("TMarkerHandleDevStartLocation", &t.TMarkerHandleDevStartLocation)
	cb.Do("VecDevStartLocation", &t.VecDevStartLocation)
	cb.Do("SnoWorldDevStartLocation", &t.SnoWorldDevStartLocation)
	cb.Do("Unk_d2181f0", &t.Unk_d2181f0)
	cb.Do("SnoLevelArea", &t.SnoLevelArea)
	cb.Do("Unk_f956a05", &t.Unk_f956a05)
	cb.Do("Unk_14dee1b", &t.Unk_14dee1b)
	cb.Do("FlParticipationRadius", &t.FlParticipationRadius)
	cb.Do("Unk_8881b0e", &t.Unk_8881b0e)
	cb.Do("DwNextUID", &t.DwNextUID)
	cb.Do("FPrioritySideQuest", &t.FPrioritySideQuest)
	cb.Do("Unk_c18cabd", &t.Unk_c18cabd)
	cb.Do("Unk_79f6e17", &t.Unk_79f6e17)
	cb.Do("GbidSubzoneModifierTag", &t.GbidSubzoneModifierTag)
	cb.Do("SnoBountySubzone", &t.SnoBountySubzone)
	cb.Do("EBountyTier", &t.EBountyTier)
	cb.Do("EBountyType", &t.EBountyType)
	cb.Do("Unk_313dbf6", &t.Unk_313dbf6)
	cb.Do("DwRegionSourceCallbackUID", &t.DwRegionSourceCallbackUID)
	cb.Do("Unk_b83e7b1", &t.Unk_b83e7b1)
	cb.Do("Unk_942bcdb", &t.Unk_942bcdb)
	cb.Do("DwFlags", &t.DwFlags)
	cb.Do("ArQuestPhases", &t.ArQuestPhases)
	cb.Do("ArRequiredReputations", &t.ArRequiredReputations)
	cb.Do("ArReputationRewards", &t.ArReputationRewards)
	cb.Do("ArRequiredCompletedQuests", &t.ArRequiredCompletedQuests)
	cb.Do("SnoStartCondition", &t.SnoStartCondition)
	cb.Do("ArFollowers", &t.ArFollowers)
	cb.Do("ArQuestItems", &t.ArQuestItems)
	cb.Do("ArQuestDungeons", &t.ArQuestDungeons)
	cb.Do("Unk_2aa5f20", &t.Unk_2aa5f20)
	cb.Do("Unk_b43b442", &t.Unk_b43b442)
	cb.Do("GbidSurveyType", &t.GbidSurveyType)
	cb.Do("GbidNightmareDungeonSurveyType", &t.GbidNightmareDungeonSurveyType)
	cb.Do("Unk_f4b6cde", &t.Unk_f4b6cde)
	cb.Do("SnoAudioContext", &t.SnoAudioContext)
	cb.Do("ArAllReferencedItems", &t.ArAllReferencedItems)
}

type VendorInventory struct {
	ArInventories DT_VARIABLEARRAY[*DT_SNO]
}

func (t *VendorInventory) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.ArInventories, r, &Options{
		Flags: 513,
		Group: 52,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *VendorInventory) Walk(cb WalkCallback) {
	cb.Do("ArInventories", &t.ArInventories)
}

type Type_3ee2b992 struct {
	SnoParticle DT_SNO
	Unk_9644926 DT_FLOAT
}

func (t *Type_3ee2b992) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoParticle, r, &Options{
		Flags: 1,
		Group: 27,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.Unk_9644926, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_3ee2b992) Walk(cb WalkCallback) {
	cb.Do("SnoParticle", &t.SnoParticle)
	cb.Do("Unk_9644926", &t.Unk_9644926)
}

type ChallengeDefinition struct {
	DwNextID     DT_UINT
	ArCategories DT_VARIABLEARRAY[*ChallengeCategory]
}

func (t *ChallengeDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwNextID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.ArCategories, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ChallengeDefinition) Walk(cb WalkCallback) {
	cb.Do("DwNextID", &t.DwNextID)
	cb.Do("ArCategories", &t.ArCategories)
}

type LightStateParams struct {
	PathRadius          Type_cbfdd2ea
	PathSourceRadius    Type_cbfdd2ea
	Unk_d2a3cb0         Type_cbfdd2ea
	PathFalloffBias     Type_cbfdd2ea
	Unk_500fe1e         Type_cbfdd2ea
	PathWidth           Type_cbfdd2ea
	PathHotspot         Type_cbfdd2ea
	PathFalloff         Type_cbfdd2ea
	PathColor           Type_560ae4cf
	PathIntensity       Type_cbfdd2ea
	Unk_6634e3c         DT_FLOAT
	Unk_114300f         DT_FLOAT
	Unk_5803b69         Type_cbfdd2ea
	PathShadowIntensity Type_cbfdd2ea
	PathPivotOffset     VectorPath
}

func (t *LightStateParams) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.PathRadius, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.PathSourceRadius, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.Unk_d2a3cb0, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+168, &t.PathFalloffBias, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+224, &t.Unk_500fe1e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+280, &t.PathWidth, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+336, &t.PathHotspot, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+392, &t.PathFalloff, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+448, &t.PathColor, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+504, &t.PathIntensity, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+560, &t.Unk_6634e3c, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+564, &t.Unk_114300f, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+568, &t.Unk_5803b69, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+624, &t.PathShadowIntensity, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+680, &t.PathPivotOffset, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+736, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *LightStateParams) Walk(cb WalkCallback) {
	cb.Do("PathRadius", &t.PathRadius)
	cb.Do("PathSourceRadius", &t.PathSourceRadius)
	cb.Do("Unk_d2a3cb0", &t.Unk_d2a3cb0)
	cb.Do("PathFalloffBias", &t.PathFalloffBias)
	cb.Do("Unk_500fe1e", &t.Unk_500fe1e)
	cb.Do("PathWidth", &t.PathWidth)
	cb.Do("PathHotspot", &t.PathHotspot)
	cb.Do("PathFalloff", &t.PathFalloff)
	cb.Do("PathColor", &t.PathColor)
	cb.Do("PathIntensity", &t.PathIntensity)
	cb.Do("Unk_6634e3c", &t.Unk_6634e3c)
	cb.Do("Unk_114300f", &t.Unk_114300f)
	cb.Do("Unk_5803b69", &t.Unk_5803b69)
	cb.Do("PathShadowIntensity", &t.PathShadowIntensity)
	cb.Do("PathPivotOffset", &t.PathPivotOffset)
}

type MarkerHeightFieldClutter struct {
	Unk_cd39b27    DT_FIXEDARRAY[*DT_BYTE]
	DwClutterMasks DT_FIXEDARRAY[*DT_BYTE]
	NHeightValue   DT_WORD
	DwFlags        DT_BYTE
	Unk_d188924    DT_BYTE
}

func (t *MarkerHeightFieldClutter) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Unk_cd39b27, r, &Options{
		ArrayLength: 4,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.DwClutterMasks, r, &Options{
		ArrayLength: 4,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.NHeightValue, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+10, &t.DwFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+11, &t.Unk_d188924, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+12, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *MarkerHeightFieldClutter) Walk(cb WalkCallback) {
	cb.Do("Unk_cd39b27", &t.Unk_cd39b27)
	cb.Do("DwClutterMasks", &t.DwClutterMasks)
	cb.Do("NHeightValue", &t.NHeightValue)
	cb.Do("DwFlags", &t.DwFlags)
	cb.Do("Unk_d188924", &t.Unk_d188924)
}

type ParagonGlyphAffixAttributeMap struct {
	TDestinationAttribute ParagonGlyphAffixAttribute
	TSourceAttribute      ParagonGlyphAffixAttribute
}

func (t *ParagonGlyphAffixAttributeMap) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.TDestinationAttribute, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.TSourceAttribute, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ParagonGlyphAffixAttributeMap) Walk(cb WalkCallback) {
	cb.Do("TDestinationAttribute", &t.TDestinationAttribute)
	cb.Do("TSourceAttribute", &t.TSourceAttribute)
}

type ShrineGizmoData struct {
	// Inherits NamedGizmoData
	// Inherits ActorGizmoData
	// Inherits PolymorphicBase
	DwType                       DT_UINT
	DwPad                        DT_UINT
	FDisableNonFriendlyOperation DT_INT
	FWalkToCenter                DT_INT
	FGizmoStartsDisabled         DT_INT
	FUseStringListName           DT_INT
	FForceMinimapIcon            DT_INT
	FlOperationRadius            DT_FLOAT
	Unk_d0b1df5                  DT_FLOAT
	FlGizmoUseTime               DT_FLOAT
	SnoChannelingEffect          DT_SNO
	Unk_2767229                  DT_INT
	FGizmoShowProgressBar        DT_INT
	Unk_6d9ebe1                  DT_INT
	Unk_5456245                  DT_INT
	Unk_af5815a                  DT_INT
	SnoOnClickEffect             DT_SNO
	SnoPickedUpEffect            DT_SNO
	SnoDropOnGroundEffect        DT_SNO
	TConditionData               GizmoConditionData
	SnoPowerOperator             DT_SNO
	SnoPowerOperate              DT_SNO
	SnoPowerOperatorActive       DT_SNO
	SnoPowerOperateActive        DT_SNO
	Unk_359810e                  DT_INT
	NCooldown                    DT_UINT
	Unk_9c8478e                  DT_UINT
	Unk_d45ed2d                  DT_INT
	Unk_f6b20b7                  DT_INT
	Unk_54513b8                  DT_INT
	Unk_fd1f378                  DT_UINT
	Unk_487c14                   DT_UINT
	Unk_87f2609                  DT_UINT
	Unk_158eb4f                  DT_FLOAT
	Unk_ab58cd3                  DT_ENUM
	Unk_91a3966                  DT_UINT
	Unk_25312e5                  DT_UINT
	Unk_4be4371                  DT_INT
	SnoActivationPower           DT_SNO
}

func (t *ShrineGizmoData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.FDisableNonFriendlyOperation, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.FWalkToCenter, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.FGizmoStartsDisabled, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.FUseStringListName, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.FForceMinimapIcon, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.FlOperationRadius, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.Unk_d0b1df5, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.FlGizmoUseTime, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.SnoChannelingEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.Unk_2767229, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.FGizmoShowProgressBar, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+60, &t.Unk_6d9ebe1, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.Unk_5456245, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.Unk_af5815a, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.SnoOnClickEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.SnoPickedUpEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.SnoDropOnGroundEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.TConditionData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.SnoPowerOperator, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.SnoPowerOperate, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.SnoPowerOperatorActive, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+100, &t.SnoPowerOperateActive, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+104, &t.Unk_359810e, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+108, &t.NCooldown, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.Unk_9c8478e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+116, &t.Unk_d45ed2d, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.Unk_f6b20b7, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+124, &t.Unk_54513b8, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.Unk_fd1f378, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+132, &t.Unk_487c14, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+136, &t.Unk_87f2609, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+140, &t.Unk_158eb4f, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+144, &t.Unk_ab58cd3, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+148, &t.Unk_91a3966, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+152, &t.Unk_25312e5, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+156, &t.Unk_4be4371, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+160, &t.SnoActivationPower, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+168, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ShrineGizmoData) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("FDisableNonFriendlyOperation", &t.FDisableNonFriendlyOperation)
	cb.Do("FWalkToCenter", &t.FWalkToCenter)
	cb.Do("FGizmoStartsDisabled", &t.FGizmoStartsDisabled)
	cb.Do("FUseStringListName", &t.FUseStringListName)
	cb.Do("FForceMinimapIcon", &t.FForceMinimapIcon)
	cb.Do("FlOperationRadius", &t.FlOperationRadius)
	cb.Do("Unk_d0b1df5", &t.Unk_d0b1df5)
	cb.Do("FlGizmoUseTime", &t.FlGizmoUseTime)
	cb.Do("SnoChannelingEffect", &t.SnoChannelingEffect)
	cb.Do("Unk_2767229", &t.Unk_2767229)
	cb.Do("FGizmoShowProgressBar", &t.FGizmoShowProgressBar)
	cb.Do("Unk_6d9ebe1", &t.Unk_6d9ebe1)
	cb.Do("Unk_5456245", &t.Unk_5456245)
	cb.Do("Unk_af5815a", &t.Unk_af5815a)
	cb.Do("SnoOnClickEffect", &t.SnoOnClickEffect)
	cb.Do("SnoPickedUpEffect", &t.SnoPickedUpEffect)
	cb.Do("SnoDropOnGroundEffect", &t.SnoDropOnGroundEffect)
	cb.Do("TConditionData", &t.TConditionData)
	cb.Do("SnoPowerOperator", &t.SnoPowerOperator)
	cb.Do("SnoPowerOperate", &t.SnoPowerOperate)
	cb.Do("SnoPowerOperatorActive", &t.SnoPowerOperatorActive)
	cb.Do("SnoPowerOperateActive", &t.SnoPowerOperateActive)
	cb.Do("Unk_359810e", &t.Unk_359810e)
	cb.Do("NCooldown", &t.NCooldown)
	cb.Do("Unk_9c8478e", &t.Unk_9c8478e)
	cb.Do("Unk_d45ed2d", &t.Unk_d45ed2d)
	cb.Do("Unk_f6b20b7", &t.Unk_f6b20b7)
	cb.Do("Unk_54513b8", &t.Unk_54513b8)
	cb.Do("Unk_fd1f378", &t.Unk_fd1f378)
	cb.Do("Unk_487c14", &t.Unk_487c14)
	cb.Do("Unk_87f2609", &t.Unk_87f2609)
	cb.Do("Unk_158eb4f", &t.Unk_158eb4f)
	cb.Do("Unk_ab58cd3", &t.Unk_ab58cd3)
	cb.Do("Unk_91a3966", &t.Unk_91a3966)
	cb.Do("Unk_25312e5", &t.Unk_25312e5)
	cb.Do("Unk_4be4371", &t.Unk_4be4371)
	cb.Do("SnoActivationPower", &t.SnoActivationPower)
}

type Type_3f7811d2 struct {
	Unk_589fc97 DT_TAGMAP[*DT_ENUM]
}

func (t *Type_3f7811d2) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Unk_589fc97, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_3f7811d2) Walk(cb WalkCallback) {
	cb.Do("Unk_589fc97", &t.Unk_589fc97)
}

type TriggerEventChangeShaderMapOverride struct {
	// Inherits TriggerEvent
	// Inherits PolymorphicBase
	DwType              DT_UINT
	DwPad               DT_UINT
	TConditions         TriggerConditions
	FGenerated          DT_INT
	Unk_6cba752         DT_INT
	DwParentActorID     DT_UINT
	DwActorID           DT_UINT
	DwShaderMapOverride DT_UINT
	Unk_279aa5a         DT_INT
}

func (t *TriggerEventChangeShaderMapOverride) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.FGenerated, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_6cba752, r, &Options{Flags: 16}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.DwParentActorID, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.DwActorID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.DwShaderMapOverride, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.Unk_279aa5a, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+96, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TriggerEventChangeShaderMapOverride) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("TConditions", &t.TConditions)
	cb.Do("FGenerated", &t.FGenerated)
	cb.Do("Unk_6cba752", &t.Unk_6cba752)
	cb.Do("DwParentActorID", &t.DwParentActorID)
	cb.Do("DwActorID", &t.DwActorID)
	cb.Do("DwShaderMapOverride", &t.DwShaderMapOverride)
	cb.Do("Unk_279aa5a", &t.Unk_279aa5a)
}

type FrameAnim struct {
	EPlaybackMode        DT_ENUM
	TFrameRateRange      DT_RANGE[*DT_FLOAT]
	TStartFrameRange     DT_RANGE[*DT_UINT]
	Unk_98a3c88          DT_UINT
	TAnimationDelayRange DT_RANGE[*DT_FLOAT]
	Unk_ca71af4          DT_INT
}

func (t *FrameAnim) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.EPlaybackMode, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.TFrameRateRange, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.TStartFrameRange, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.Unk_98a3c88, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.TAnimationDelayRange, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.Unk_ca71af4, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+36, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *FrameAnim) Walk(cb WalkCallback) {
	cb.Do("EPlaybackMode", &t.EPlaybackMode)
	cb.Do("TFrameRateRange", &t.TFrameRateRange)
	cb.Do("TStartFrameRange", &t.TStartFrameRange)
	cb.Do("Unk_98a3c88", &t.Unk_98a3c88)
	cb.Do("TAnimationDelayRange", &t.TAnimationDelayRange)
	cb.Do("Unk_ca71af4", &t.Unk_ca71af4)
}

type PowerBuffDefinition struct {
	DwID             DT_UINT
	DwBuffId         DT_UINT
	BHarmful         DT_INT
	BInfinite        DT_INT
	TDuration        DT_STRING_FORMULA
	TMaxStackCount   DT_STRING_FORMULA
	Unk_89134c5      DT_INT
	BShowDuration    DT_INT
	BCancellable     DT_INT
	Unk_99b5752      DT_INT
	Unk_93cd85f      DT_INT
	Unk_5c11505      DT_INT
	Unk_9eb6fb0      DT_INT
	Unk_e8f1e19      DT_INT
	Unk_9cb4832      DT_INT
	Unk_71ba554      DT_INT
	HIcon            DT_UINT
	HFloatingIcon    DT_UINT
	Unk_78b0ca1      DT_UINT
	Unk_c35001       DT_FLOAT
	Unk_395ccd6      DT_INT
	Unk_200bd12      DT_INT
	TDOT             Type_e3f28f16
	Unk_dcb22bd      DT_INT
	TCrowdControl    PowerBuffCrowdControl
	BHasDamageShield DT_INT
	TDamageShield    HitpointSpecifier
}

func (t *PowerBuffDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.DwID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.DwBuffId, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.BHarmful, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.BInfinite, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TDuration, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.TMaxStackCount, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.Unk_89134c5, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.BShowDuration, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.BCancellable, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.Unk_99b5752, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.Unk_93cd85f, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+100, &t.Unk_5c11505, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+104, &t.Unk_9eb6fb0, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+108, &t.Unk_e8f1e19, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.Unk_9cb4832, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+116, &t.Unk_71ba554, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.HIcon, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+124, &t.HFloatingIcon, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.Unk_78b0ca1, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+132, &t.Unk_c35001, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+136, &t.Unk_395ccd6, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+140, &t.Unk_200bd12, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+144, &t.TDOT, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+296, &t.Unk_dcb22bd, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+304, &t.TCrowdControl, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+408, &t.BHasDamageShield, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+416, &t.TDamageShield, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+488, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PowerBuffDefinition) Walk(cb WalkCallback) {
	cb.Do("DwID", &t.DwID)
	cb.Do("DwBuffId", &t.DwBuffId)
	cb.Do("BHarmful", &t.BHarmful)
	cb.Do("BInfinite", &t.BInfinite)
	cb.Do("TDuration", &t.TDuration)
	cb.Do("TMaxStackCount", &t.TMaxStackCount)
	cb.Do("Unk_89134c5", &t.Unk_89134c5)
	cb.Do("BShowDuration", &t.BShowDuration)
	cb.Do("BCancellable", &t.BCancellable)
	cb.Do("Unk_99b5752", &t.Unk_99b5752)
	cb.Do("Unk_93cd85f", &t.Unk_93cd85f)
	cb.Do("Unk_5c11505", &t.Unk_5c11505)
	cb.Do("Unk_9eb6fb0", &t.Unk_9eb6fb0)
	cb.Do("Unk_e8f1e19", &t.Unk_e8f1e19)
	cb.Do("Unk_9cb4832", &t.Unk_9cb4832)
	cb.Do("Unk_71ba554", &t.Unk_71ba554)
	cb.Do("HIcon", &t.HIcon)
	cb.Do("HFloatingIcon", &t.HFloatingIcon)
	cb.Do("Unk_78b0ca1", &t.Unk_78b0ca1)
	cb.Do("Unk_c35001", &t.Unk_c35001)
	cb.Do("Unk_395ccd6", &t.Unk_395ccd6)
	cb.Do("Unk_200bd12", &t.Unk_200bd12)
	cb.Do("TDOT", &t.TDOT)
	cb.Do("Unk_dcb22bd", &t.Unk_dcb22bd)
	cb.Do("TCrowdControl", &t.TCrowdControl)
	cb.Do("BHasDamageShield", &t.BHasDamageShield)
	cb.Do("TDamageShield", &t.TDamageShield)
}

type CollSettingsParam struct {
	NFrameStart DT_INT
	NFrameEnd   DT_INT
}

func (t *CollSettingsParam) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.NFrameStart, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.NFrameEnd, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *CollSettingsParam) Walk(cb WalkCallback) {
	cb.Do("NFrameStart", &t.NFrameStart)
	cb.Do("NFrameEnd", &t.NFrameEnd)
}

type TriggerEventHitFlashDuration struct {
	// Inherits TriggerEventRangedDuration
	// Inherits TriggerEvent
	// Inherits PolymorphicBase
	DwType                      DT_UINT
	TConditions                 TriggerConditions
	FGenerated                  DT_INT
	Unk_6cba752                 DT_INT
	DwParentActorID             DT_UINT
	TDuration                   DT_FLOAT
	DwTriggerFlags              DT_UINT
	DwTriggerFlagsEx            DT_UINT
	TCleanup                    TriggerCleanup
	Unk_49e9257                 DT_INT
	Unk_5490979                 DT_INT
	DwPad                       DT_UINT
	RgbaColorAdd                DT_RGBACOLOR
	NHitFlashAddDuration        DT_FLOAT
	RgbaColorMul                DT_RGBACOLOR
	NHitFlashMulDuration        DT_FLOAT
	FlHitFlashIntensity         DT_FLOAT
	Unk_622a853                 DT_FLOAT
	FlHitFlashIntensityDuration DT_FLOAT
	Unk_135c4d0                 DT_ENUM
	Unk_6ba75                   DT_ENUM
	EHitFlashCurve              DT_ENUM
	DwID                        DT_UINT
	NMaxHitFlash                DT_UINT
	Unk_17f7deb                 DT_INT
	Unk_b19da4b                 DT_INT
}

func (t *TriggerEventHitFlashDuration) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.FGenerated, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_6cba752, r, &Options{Flags: 16}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.DwParentActorID, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.TDuration, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.DwTriggerFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.DwTriggerFlagsEx, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.TCleanup, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+116, &t.Unk_49e9257, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.Unk_5490979, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+124, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.RgbaColorAdd, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+132, &t.NHitFlashAddDuration, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+136, &t.RgbaColorMul, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+140, &t.NHitFlashMulDuration, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+144, &t.FlHitFlashIntensity, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+148, &t.Unk_622a853, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+152, &t.FlHitFlashIntensityDuration, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+156, &t.Unk_135c4d0, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+160, &t.Unk_6ba75, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+164, &t.EHitFlashCurve, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+168, &t.DwID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+172, &t.NMaxHitFlash, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+176, &t.Unk_17f7deb, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+180, &t.Unk_b19da4b, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+184, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TriggerEventHitFlashDuration) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("TConditions", &t.TConditions)
	cb.Do("FGenerated", &t.FGenerated)
	cb.Do("Unk_6cba752", &t.Unk_6cba752)
	cb.Do("DwParentActorID", &t.DwParentActorID)
	cb.Do("TDuration", &t.TDuration)
	cb.Do("DwTriggerFlags", &t.DwTriggerFlags)
	cb.Do("DwTriggerFlagsEx", &t.DwTriggerFlagsEx)
	cb.Do("TCleanup", &t.TCleanup)
	cb.Do("Unk_49e9257", &t.Unk_49e9257)
	cb.Do("Unk_5490979", &t.Unk_5490979)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("RgbaColorAdd", &t.RgbaColorAdd)
	cb.Do("NHitFlashAddDuration", &t.NHitFlashAddDuration)
	cb.Do("RgbaColorMul", &t.RgbaColorMul)
	cb.Do("NHitFlashMulDuration", &t.NHitFlashMulDuration)
	cb.Do("FlHitFlashIntensity", &t.FlHitFlashIntensity)
	cb.Do("Unk_622a853", &t.Unk_622a853)
	cb.Do("FlHitFlashIntensityDuration", &t.FlHitFlashIntensityDuration)
	cb.Do("Unk_135c4d0", &t.Unk_135c4d0)
	cb.Do("Unk_6ba75", &t.Unk_6ba75)
	cb.Do("EHitFlashCurve", &t.EHitFlashCurve)
	cb.Do("DwID", &t.DwID)
	cb.Do("NMaxHitFlash", &t.NMaxHitFlash)
	cb.Do("Unk_17f7deb", &t.Unk_17f7deb)
	cb.Do("Unk_b19da4b", &t.Unk_b19da4b)
}

type TextureContent struct {
	TTexture SerialDataInfo
}

func (t *TextureContent) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.TTexture, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TextureContent) Walk(cb WalkCallback) {
	cb.Do("TTexture", &t.TTexture)
}

type PlayerTitleDefinition struct {
	BIsSeasonal DT_INT
}

func (t *PlayerTitleDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.BIsSeasonal, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+12, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PlayerTitleDefinition) Walk(cb WalkCallback) {
	cb.Do("BIsSeasonal", &t.BIsSeasonal)
}

type PreloadSceneDataMessage struct {
	THeader  RequiredMessageHeader
	IdSScene DT_SHARED_SERVER_DATA_ID
	SnoScene DT_SNO
}

func (t *PreloadSceneDataMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.IdSScene, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SnoScene, r, &Options{
		Flags: 1,
		Group: 33,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+28, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PreloadSceneDataMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("IdSScene", &t.IdSScene)
	cb.Do("SnoScene", &t.SnoScene)
}

type DWordDataMessage struct {
	THeader RequiredMessageHeader
	DwData  DT_UINT
}

func (t *DWordDataMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.DwData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+20, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *DWordDataMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("DwData", &t.DwData)
}

type AlwaysFalseSubcondition struct {
	// Inherits Subcondition
	// Inherits PolymorphicBase
	DwType  DT_UINT
	BNegate DT_INT
	DwPad   DT_UINT
}

func (t *AlwaysFalseSubcondition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BNegate, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *AlwaysFalseSubcondition) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("BNegate", &t.BNegate)
	cb.Do("DwPad", &t.DwPad)
}

type ParagonThresholdDefinition struct {
	PtThresholds    DT_VARIABLEARRAY[*ParagonThresholdEntry]
	ArUsableByClass DT_FIXEDARRAY[*DT_INT]
}

func (t *ParagonThresholdDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.PtThresholds, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ArUsableByClass, r, &Options{
		ArrayLength: 5,
		Flags:       1,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ParagonThresholdDefinition) Walk(cb WalkCallback) {
	cb.Do("PtThresholds", &t.PtThresholds)
	cb.Do("ArUsableByClass", &t.ArUsableByClass)
}

type StaggerDefinition struct{}

func (t *StaggerDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *StaggerDefinition) Walk(cb WalkCallback) {}

type Type_4174a154 struct {
	Unk_322049a WwiseName
	FlValue     DT_FLOAT
}

func (t *Type_4174a154) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Unk_322049a, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.FlValue, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_4174a154) Walk(cb WalkCallback) {
	cb.Do("Unk_322049a", &t.Unk_322049a)
	cb.Do("FlValue", &t.FlValue)
}

type OpenDungeonForLFDMessage struct {
	THeader RequiredMessageHeader
	IsOpen  DT_INT
}

func (t *OpenDungeonForLFDMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.IsOpen, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+20, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *OpenDungeonForLFDMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("IsOpen", &t.IsOpen)
}

type Type_41b30aaa struct {
	THeader      InterpolationPathHeader
	PtArrayNodes DT_VARIABLEARRAY[*Type_63010143]
}

func (t *Type_41b30aaa) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.PtArrayNodes, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+56, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_41b30aaa) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("PtArrayNodes", &t.PtArrayNodes)
}

type Type_41b30aab struct {
	THeader      InterpolationPathHeader
	PtArrayNodes DT_VARIABLEARRAY[*Type_63010144]
}

func (t *Type_41b30aab) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.PtArrayNodes, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+56, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_41b30aab) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("PtArrayNodes", &t.PtArrayNodes)
}

type FlagSetDefinition struct {
	ArFlagLookups DT_VARIABLEARRAY[*FlagLookup]
}

func (t *FlagSetDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.ArFlagLookups, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *FlagSetDefinition) Walk(cb WalkCallback) {
	cb.Do("ArFlagLookups", &t.ArFlagLookups)
}

type DemonSummoningQuestBucket struct {
	THeader  GBIDHeader
	ArQuests DT_VARIABLEARRAY[*DemonSummoningRitualQuests]
}

func (t *DemonSummoningQuestBucket) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+264, &t.ArQuests, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+280, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *DemonSummoningQuestBucket) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("ArQuests", &t.ArQuests)
}

type Type_41e68f26 struct {
	DwType  DT_UINT
	FlTime  DT_FLOAT
	DwPad   DT_UINT
	TValue  DT_RGBACOLOR
	EEasing DT_ENUM
}

func (t *Type_41e68f26) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.FlTime, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.TValue, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.EEasing, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_41e68f26) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("FlTime", &t.FlTime)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("TValue", &t.TValue)
	cb.Do("EEasing", &t.EEasing)
}

type AnimTreeNodeOverrideWrapper struct {
	TChildOverride AnimTreeNodeOverride
}

func (t *AnimTreeNodeOverrideWrapper) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.TChildOverride, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+120, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *AnimTreeNodeOverrideWrapper) Walk(cb WalkCallback) {
	cb.Do("TChildOverride", &t.TChildOverride)
}

type TriggerEventFrostBreath struct {
	// Inherits TriggerEvent
	// Inherits PolymorphicBase
	DwType          DT_UINT
	DwPad           DT_UINT
	TConditions     TriggerConditions
	FGenerated      DT_INT
	Unk_6cba752     DT_INT
	DwParentActorID DT_UINT
	THardpointLink  HardpointLink
}

func (t *TriggerEventFrostBreath) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.FGenerated, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_6cba752, r, &Options{Flags: 16}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.DwParentActorID, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.THardpointLink, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+88, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TriggerEventFrostBreath) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("TConditions", &t.TConditions)
	cb.Do("FGenerated", &t.FGenerated)
	cb.Do("Unk_6cba752", &t.Unk_6cba752)
	cb.Do("DwParentActorID", &t.DwParentActorID)
	cb.Do("THardpointLink", &t.THardpointLink)
}

type SubzoneWorldMarkerSetEntry struct {
	SnoWorld     DT_SNO
	SnoMarkerSet DT_SNO
}

func (t *SubzoneWorldMarkerSetEntry) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoWorld, r, &Options{
		Flags: 513,
		Group: 48,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.SnoMarkerSet, r, &Options{
		Flags: 1,
		Group: 24,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *SubzoneWorldMarkerSetEntry) Walk(cb WalkCallback) {
	cb.Do("SnoWorld", &t.SnoWorld)
	cb.Do("SnoMarkerSet", &t.SnoMarkerSet)
}

type TriggerEventDeleteAllObjects struct {
	// Inherits TriggerEvent
	// Inherits PolymorphicBase
	DwType          DT_UINT
	DwPad           DT_UINT
	TConditions     TriggerConditions
	FGenerated      DT_INT
	Unk_6cba752     DT_INT
	DwParentActorID DT_UINT
}

func (t *TriggerEventDeleteAllObjects) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.FGenerated, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_6cba752, r, &Options{Flags: 16}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.DwParentActorID, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+80, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TriggerEventDeleteAllObjects) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("TConditions", &t.TConditions)
	cb.Do("FGenerated", &t.FGenerated)
	cb.Do("Unk_6cba752", &t.Unk_6cba752)
	cb.Do("DwParentActorID", &t.DwParentActorID)
}

type Type_42378b43 struct {
	FlGridSize    DT_FLOAT
	VecGridOffset DT_VECTOR3D
	Unk_1e8e20d   DT_INT
}

func (t *Type_42378b43) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.FlGridSize, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.VecGridOffset, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_1e8e20d, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+20, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_42378b43) Walk(cb WalkCallback) {
	cb.Do("FlGridSize", &t.FlGridSize)
	cb.Do("VecGridOffset", &t.VecGridOffset)
	cb.Do("Unk_1e8e20d", &t.Unk_1e8e20d)
}

type Type_42605528 struct {
	// Inherits Type_d4213c9b
	DwType      DT_UINT
	Unk_9b2bc26 Type_80554fed
	Unk_77ed19a DT_ENUM
	DwPad       DT_UINT
}

func (t *Type_42605528) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_9b2bc26, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.Unk_77ed19a, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+56, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_42605528) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("Unk_9b2bc26", &t.Unk_9b2bc26)
	cb.Do("Unk_77ed19a", &t.Unk_77ed19a)
	cb.Do("DwPad", &t.DwPad)
}

type BiomeObject struct {
	// Inherits BiomeItem
	// Inherits PolymorphicBase
	DwType                 DT_UINT
	FlRadius               DT_FLOAT
	Unk_2fd1cdb            DT_FLOAT
	TAllowedScaleRange     DT_RANGE[*DT_FLOAT]
	Unk_87acb69            DT_RANGE[*DT_FLOAT]
	Unk_87acb6a            DT_RANGE[*DT_FLOAT]
	Unk_87acb6b            DT_RANGE[*DT_FLOAT]
	Unk_9854b6a            DT_RANGE[*DT_FLOAT]
	FlChance               DT_FLOAT
	DwFlags                DT_UINT
	Unk_2a8c4b6            DT_FLOAT
	AAzimuthAngle          DT_FLOAT
	AAltitudeAngle         DT_FLOAT
	Unk_6ead041            DT_RANGE[*DT_FLOAT]
	TParametricSettings    ParametricSettings
	ArProximityAdjustments DT_VARIABLEARRAY[*ProximityAdjustment]
	SnonameObject          DT_SNO_NAME
	Unk_d094b9a            DT_ENUM
	QInitialOrientation    bcQuat
	SzLookName             DT_UINT
	DwShaderMapOverride    DT_UINT
	DwPad                  DT_UINT
}

func (t *BiomeObject) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.FlRadius, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.Unk_2fd1cdb, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.TAllowedScaleRange, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.Unk_87acb69, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.Unk_87acb6a, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.Unk_87acb6b, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.Unk_9854b6a, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.FlChance, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.DwFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_2a8c4b6, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.AAzimuthAngle, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.AAltitudeAngle, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.Unk_6ead041, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.TParametricSettings, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+224, &t.ArProximityAdjustments, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+240, &t.SnonameObject, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+248, &t.Unk_d094b9a, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+252, &t.QInitialOrientation, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+268, &t.SzLookName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+272, &t.DwShaderMapOverride, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+276, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+280, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *BiomeObject) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("FlRadius", &t.FlRadius)
	cb.Do("Unk_2fd1cdb", &t.Unk_2fd1cdb)
	cb.Do("TAllowedScaleRange", &t.TAllowedScaleRange)
	cb.Do("Unk_87acb69", &t.Unk_87acb69)
	cb.Do("Unk_87acb6a", &t.Unk_87acb6a)
	cb.Do("Unk_87acb6b", &t.Unk_87acb6b)
	cb.Do("Unk_9854b6a", &t.Unk_9854b6a)
	cb.Do("FlChance", &t.FlChance)
	cb.Do("DwFlags", &t.DwFlags)
	cb.Do("Unk_2a8c4b6", &t.Unk_2a8c4b6)
	cb.Do("AAzimuthAngle", &t.AAzimuthAngle)
	cb.Do("AAltitudeAngle", &t.AAltitudeAngle)
	cb.Do("Unk_6ead041", &t.Unk_6ead041)
	cb.Do("TParametricSettings", &t.TParametricSettings)
	cb.Do("ArProximityAdjustments", &t.ArProximityAdjustments)
	cb.Do("SnonameObject", &t.SnonameObject)
	cb.Do("Unk_d094b9a", &t.Unk_d094b9a)
	cb.Do("QInitialOrientation", &t.QInitialOrientation)
	cb.Do("SzLookName", &t.SzLookName)
	cb.Do("DwShaderMapOverride", &t.DwShaderMapOverride)
	cb.Do("DwPad", &t.DwPad)
}

type ConversationCooldown struct {
	SnoConversation DT_SNO
	UExpirationTime DT_INT64
}

func (t *ConversationCooldown) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoConversation, r, &Options{
		Flags: 1,
		Group: 12,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.UExpirationTime, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ConversationCooldown) Walk(cb WalkCallback) {
	cb.Do("SnoConversation", &t.SnoConversation)
	cb.Do("UExpirationTime", &t.UExpirationTime)
}

type PowerConditionHasModPoints struct {
	// Inherits PowerConditionBase
	// Inherits PolymorphicBase
	DwType     DT_UINT
	BInverse   DT_INT
	DwPad      DT_UINT
	ESubject   DT_ENUM
	SnoPower   DT_SNO
	SzPowerMod DT_UINT
}

func (t *PowerConditionHasModPoints) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BInverse, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ESubject, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.SnoPower, r, &Options{
		Flags: 513,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.SzPowerMod, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+40, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PowerConditionHasModPoints) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("BInverse", &t.BInverse)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("ESubject", &t.ESubject)
	cb.Do("SnoPower", &t.SnoPower)
	cb.Do("SzPowerMod", &t.SzPowerMod)
}

type Type_42dac75f struct {
	// Inherits Type_7e418ba8
	// Inherits PolymorphicBase
	DwType       DT_UINT
	Unk_2de4987  DT_UINT
	ArConditions DT_POLYMORPHIC_VARIABLEARRAY[*DT_INT64]
	BEnd         DT_INT
	DwPad        DT_UINT
	FlSeconds    DT_FLOAT
}

func (t *Type_42dac75f) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_2de4987, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ArConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.BEnd, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.FlSeconds, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+64, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_42dac75f) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("Unk_2de4987", &t.Unk_2de4987)
	cb.Do("ArConditions", &t.ArConditions)
	cb.Do("BEnd", &t.BEnd)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("FlSeconds", &t.FlSeconds)
}

type MountPreset struct {
	// Inherits CharacterPreset
	// Inherits PolymorphicBase
	DwType           DT_UINT
	DwPad            DT_UINT
	SzName           DT_CSTRING[*DT_BYTE]
	SnoWorld         DT_SNO
	NPadding1        DT_INT
	SnoActor         DT_SNO
	ArrItems         DT_FIXEDARRAY[*Type_8c33d728]
	ArrCosmeticItems DT_FIXEDARRAY[*DT_SNO]
}

func (t *MountPreset) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SzName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.SnoWorld, r, &Options{
		Flags: 513,
		Group: 48,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.NPadding1, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.SnoActor, r, &Options{
		Flags: 513,
		Group: 1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.ArrItems, r, &Options{
		ArrayLength: 1,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.ArrCosmeticItems, r, &Options{
		ArrayLength: 1,
		Flags:       513,
		Group:       73,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+56, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *MountPreset) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("SzName", &t.SzName)
	cb.Do("SnoWorld", &t.SnoWorld)
	cb.Do("NPadding1", &t.NPadding1)
	cb.Do("SnoActor", &t.SnoActor)
	cb.Do("ArrItems", &t.ArrItems)
	cb.Do("ArrCosmeticItems", &t.ArrCosmeticItems)
}

type Type_431a27f7 struct {
	Unk_969150a DT_INT
	Unk_da72bf0 DT_INT
	Unk_3c20112 DT_INT
	Unk_37f7400 DT_INT
	Unk_600caa4 DT_INT
	Unk_e3a4bd0 DT_INT
	Unk_cdf78ca DT_INT
	Unk_325b9c6 DT_FLOAT
	Unk_4f4cf59 DT_INT
	Unk_84da688 DT_INT
	Unk_824f045 DT_INT
	Unk_59d4467 DT_INT
	Unk_bb62dfe DT_INT
	Unk_4ce57f1 DT_INT
	Unk_4d254c2 DT_INT
	Unk_62c245b DT_INT
	Unk_c159e29 DT_INT
	Unk_5a0096e DT_INT
	Unk_85c6e8f DT_INT
	Unk_4474d8f DT_INT
	Unk_ccf1401 DT_INT
	Unk_ea5fbdd DT_INT
	Unk_bf1747b DT_INT
	Unk_fe04400 DT_INT
	Unk_1d1c5f5 DT_ENUM
	Unk_8b203ad DT_ENUM
	Unk_c1aab5e DT_ENUM
	Unk_c1aab5f DT_ENUM
	Unk_4a7db7a DT_INT
	Unk_ffc104e DT_INT
	Unk_332634b DT_INT
	Unk_66865b3 DT_INT
	Unk_49f34f5 DT_INT
	Unk_562eea5 DT_INT
	Unk_cddfc14 DT_INT
	Unk_d731da9 DT_INT
	Unk_fab7790 DT_INT
	Unk_49dc685 DT_INT
	Unk_4ab8fbb DT_INT
	Unk_a3587ec DT_INT
	Unk_bc87fa3 DT_INT
	Unk_3e22e69 DT_INT
	Unk_4894c35 DT_INT
	Unk_98f68dd DT_INT
	Unk_8fe8a78 DT_INT
	Unk_5897d0d DT_INT
	Unk_3f60c57 DT_INT
	Unk_e1f2170 DT_INT
	Unk_74273ac DT_INT
	Unk_f1ecc65 DT_INT
	Unk_f7d4a46 DT_ENUM
	Unk_c742a40 DT_INT
	Unk_97c5063 DT_INT
	Unk_91b66d0 DT_INT
	Unk_109905  DT_INT
	Unk_66a9220 DT_INT
	Unk_8bf73b0 DT_INT
	Unk_7a124ce DT_INT
	Unk_17363d1 DT_INT
	Unk_318eef  DT_INT
	Unk_4ecdccc DT_INT
	Unk_636a751 DT_INT
	Unk_f056e4d DT_INT
	Unk_a4ae492 DT_INT
	Unk_8257cf  DT_INT
	Unk_3953748 DT_INT
	Unk_d364ba9 DT_INT
	Unk_1f19986 DT_INT
	Unk_390ed8b DT_INT
	Unk_27c7d1e DT_INT
	Unk_b1023b5 DT_INT
	Unk_9ee4396 DT_INT
	Unk_85f21c9 DT_INT
	Unk_73d41aa DT_INT
	Unk_5b5ba50 DT_INT
	Unk_198d14  DT_INT
	Unk_3f5eba8 DT_INT
	Unk_4ca89f2 DT_INT
	Unk_896a40e DT_INT
	Unk_c13a0c0 DT_INT
	Unk_e5c3ecd DT_INT
	Unk_b4bbc51 DT_INT
	Unk_b4fb094 DT_INT
	Unk_3a61fd9 DT_INT
	Unk_fe7f4ba DT_INT
	Unk_ce57789 DT_INT
	Unk_2301c1c DT_INT
	Unk_f4251fb DT_INT
	Unk_f5a0fff DT_INT
	Unk_e5c3ece DT_INT
	Unk_b4bbc52 DT_INT
	Unk_ce5778a DT_INT
	Unk_2301c1d DT_INT
	Unk_f4251fc DT_INT
	Unk_f5a1000 DT_INT
	Unk_831d89e DT_INT
	Unk_49e93b9 DT_INT
	Unk_375ae36 DT_INT
	Unk_5565ba0 DT_INT
	Unk_8fcbebc DT_INT
	Unk_831d89f DT_INT
	Unk_49e93ba DT_INT
	Unk_375ae37 DT_INT
	Unk_5565ba1 DT_INT
	Unk_8fcbebd DT_INT
	Unk_1808c53 DT_INT
	Unk_8059ccb DT_INT
	Unk_bf32a89 DT_INT
	Unk_14596d1 DT_INT
	Unk_1da53ed DT_INT
	Unk_e279c83 DT_ENUM
	Unk_33f5202 DT_ENUM
	Unk_cf50d72 DT_INT
}

func (t *Type_431a27f7) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Unk_969150a, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.Unk_da72bf0, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.Unk_3c20112, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.Unk_37f7400, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_600caa4, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.Unk_e3a4bd0, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_cdf78ca, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.Unk_325b9c6, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.Unk_4f4cf59, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.Unk_84da688, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.Unk_824f045, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.Unk_59d4467, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.Unk_bb62dfe, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.Unk_4ce57f1, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.Unk_4d254c2, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+60, &t.Unk_62c245b, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.Unk_c159e29, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.Unk_5a0096e, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_85c6e8f, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.Unk_4474d8f, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.Unk_ccf1401, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.Unk_ea5fbdd, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.Unk_bf1747b, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.Unk_fe04400, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.Unk_1d1c5f5, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+100, &t.Unk_8b203ad, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+104, &t.Unk_c1aab5e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+108, &t.Unk_c1aab5f, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.Unk_4a7db7a, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+116, &t.Unk_ffc104e, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.Unk_332634b, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+124, &t.Unk_66865b3, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.Unk_49f34f5, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+132, &t.Unk_562eea5, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+136, &t.Unk_cddfc14, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+140, &t.Unk_d731da9, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+144, &t.Unk_fab7790, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+148, &t.Unk_49dc685, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+152, &t.Unk_4ab8fbb, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+156, &t.Unk_a3587ec, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+160, &t.Unk_bc87fa3, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+164, &t.Unk_3e22e69, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+168, &t.Unk_4894c35, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+172, &t.Unk_98f68dd, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+176, &t.Unk_8fe8a78, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+180, &t.Unk_5897d0d, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+184, &t.Unk_3f60c57, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+188, &t.Unk_e1f2170, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+192, &t.Unk_74273ac, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+196, &t.Unk_f1ecc65, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+200, &t.Unk_f7d4a46, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+204, &t.Unk_c742a40, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+208, &t.Unk_97c5063, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+212, &t.Unk_91b66d0, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+216, &t.Unk_109905, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+220, &t.Unk_66a9220, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+224, &t.Unk_8bf73b0, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+228, &t.Unk_7a124ce, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+232, &t.Unk_17363d1, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+236, &t.Unk_318eef, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+240, &t.Unk_4ecdccc, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+244, &t.Unk_636a751, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+248, &t.Unk_f056e4d, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+252, &t.Unk_a4ae492, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+256, &t.Unk_8257cf, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+260, &t.Unk_3953748, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+264, &t.Unk_d364ba9, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+268, &t.Unk_1f19986, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+272, &t.Unk_390ed8b, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+276, &t.Unk_27c7d1e, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+280, &t.Unk_b1023b5, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+284, &t.Unk_9ee4396, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+288, &t.Unk_85f21c9, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+292, &t.Unk_73d41aa, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+296, &t.Unk_5b5ba50, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+300, &t.Unk_198d14, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+304, &t.Unk_3f5eba8, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+308, &t.Unk_4ca89f2, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+312, &t.Unk_896a40e, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+316, &t.Unk_c13a0c0, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+320, &t.Unk_e5c3ecd, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+324, &t.Unk_b4bbc51, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+328, &t.Unk_b4fb094, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+332, &t.Unk_3a61fd9, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+336, &t.Unk_fe7f4ba, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+340, &t.Unk_ce57789, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+344, &t.Unk_2301c1c, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+348, &t.Unk_f4251fb, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+352, &t.Unk_f5a0fff, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+356, &t.Unk_e5c3ece, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+360, &t.Unk_b4bbc52, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+364, &t.Unk_ce5778a, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+368, &t.Unk_2301c1d, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+372, &t.Unk_f4251fc, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+376, &t.Unk_f5a1000, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+380, &t.Unk_831d89e, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+384, &t.Unk_49e93b9, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+388, &t.Unk_375ae36, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+392, &t.Unk_5565ba0, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+396, &t.Unk_8fcbebc, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+400, &t.Unk_831d89f, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+404, &t.Unk_49e93ba, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+408, &t.Unk_375ae37, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+412, &t.Unk_5565ba1, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+416, &t.Unk_8fcbebd, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+420, &t.Unk_1808c53, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+424, &t.Unk_8059ccb, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+428, &t.Unk_bf32a89, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+432, &t.Unk_14596d1, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+436, &t.Unk_1da53ed, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+440, &t.Unk_e279c83, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+444, &t.Unk_33f5202, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+448, &t.Unk_cf50d72, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+452, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_431a27f7) Walk(cb WalkCallback) {
	cb.Do("Unk_969150a", &t.Unk_969150a)
	cb.Do("Unk_da72bf0", &t.Unk_da72bf0)
	cb.Do("Unk_3c20112", &t.Unk_3c20112)
	cb.Do("Unk_37f7400", &t.Unk_37f7400)
	cb.Do("Unk_600caa4", &t.Unk_600caa4)
	cb.Do("Unk_e3a4bd0", &t.Unk_e3a4bd0)
	cb.Do("Unk_cdf78ca", &t.Unk_cdf78ca)
	cb.Do("Unk_325b9c6", &t.Unk_325b9c6)
	cb.Do("Unk_4f4cf59", &t.Unk_4f4cf59)
	cb.Do("Unk_84da688", &t.Unk_84da688)
	cb.Do("Unk_824f045", &t.Unk_824f045)
	cb.Do("Unk_59d4467", &t.Unk_59d4467)
	cb.Do("Unk_bb62dfe", &t.Unk_bb62dfe)
	cb.Do("Unk_4ce57f1", &t.Unk_4ce57f1)
	cb.Do("Unk_4d254c2", &t.Unk_4d254c2)
	cb.Do("Unk_62c245b", &t.Unk_62c245b)
	cb.Do("Unk_c159e29", &t.Unk_c159e29)
	cb.Do("Unk_5a0096e", &t.Unk_5a0096e)
	cb.Do("Unk_85c6e8f", &t.Unk_85c6e8f)
	cb.Do("Unk_4474d8f", &t.Unk_4474d8f)
	cb.Do("Unk_ccf1401", &t.Unk_ccf1401)
	cb.Do("Unk_ea5fbdd", &t.Unk_ea5fbdd)
	cb.Do("Unk_bf1747b", &t.Unk_bf1747b)
	cb.Do("Unk_fe04400", &t.Unk_fe04400)
	cb.Do("Unk_1d1c5f5", &t.Unk_1d1c5f5)
	cb.Do("Unk_8b203ad", &t.Unk_8b203ad)
	cb.Do("Unk_c1aab5e", &t.Unk_c1aab5e)
	cb.Do("Unk_c1aab5f", &t.Unk_c1aab5f)
	cb.Do("Unk_4a7db7a", &t.Unk_4a7db7a)
	cb.Do("Unk_ffc104e", &t.Unk_ffc104e)
	cb.Do("Unk_332634b", &t.Unk_332634b)
	cb.Do("Unk_66865b3", &t.Unk_66865b3)
	cb.Do("Unk_49f34f5", &t.Unk_49f34f5)
	cb.Do("Unk_562eea5", &t.Unk_562eea5)
	cb.Do("Unk_cddfc14", &t.Unk_cddfc14)
	cb.Do("Unk_d731da9", &t.Unk_d731da9)
	cb.Do("Unk_fab7790", &t.Unk_fab7790)
	cb.Do("Unk_49dc685", &t.Unk_49dc685)
	cb.Do("Unk_4ab8fbb", &t.Unk_4ab8fbb)
	cb.Do("Unk_a3587ec", &t.Unk_a3587ec)
	cb.Do("Unk_bc87fa3", &t.Unk_bc87fa3)
	cb.Do("Unk_3e22e69", &t.Unk_3e22e69)
	cb.Do("Unk_4894c35", &t.Unk_4894c35)
	cb.Do("Unk_98f68dd", &t.Unk_98f68dd)
	cb.Do("Unk_8fe8a78", &t.Unk_8fe8a78)
	cb.Do("Unk_5897d0d", &t.Unk_5897d0d)
	cb.Do("Unk_3f60c57", &t.Unk_3f60c57)
	cb.Do("Unk_e1f2170", &t.Unk_e1f2170)
	cb.Do("Unk_74273ac", &t.Unk_74273ac)
	cb.Do("Unk_f1ecc65", &t.Unk_f1ecc65)
	cb.Do("Unk_f7d4a46", &t.Unk_f7d4a46)
	cb.Do("Unk_c742a40", &t.Unk_c742a40)
	cb.Do("Unk_97c5063", &t.Unk_97c5063)
	cb.Do("Unk_91b66d0", &t.Unk_91b66d0)
	cb.Do("Unk_109905", &t.Unk_109905)
	cb.Do("Unk_66a9220", &t.Unk_66a9220)
	cb.Do("Unk_8bf73b0", &t.Unk_8bf73b0)
	cb.Do("Unk_7a124ce", &t.Unk_7a124ce)
	cb.Do("Unk_17363d1", &t.Unk_17363d1)
	cb.Do("Unk_318eef", &t.Unk_318eef)
	cb.Do("Unk_4ecdccc", &t.Unk_4ecdccc)
	cb.Do("Unk_636a751", &t.Unk_636a751)
	cb.Do("Unk_f056e4d", &t.Unk_f056e4d)
	cb.Do("Unk_a4ae492", &t.Unk_a4ae492)
	cb.Do("Unk_8257cf", &t.Unk_8257cf)
	cb.Do("Unk_3953748", &t.Unk_3953748)
	cb.Do("Unk_d364ba9", &t.Unk_d364ba9)
	cb.Do("Unk_1f19986", &t.Unk_1f19986)
	cb.Do("Unk_390ed8b", &t.Unk_390ed8b)
	cb.Do("Unk_27c7d1e", &t.Unk_27c7d1e)
	cb.Do("Unk_b1023b5", &t.Unk_b1023b5)
	cb.Do("Unk_9ee4396", &t.Unk_9ee4396)
	cb.Do("Unk_85f21c9", &t.Unk_85f21c9)
	cb.Do("Unk_73d41aa", &t.Unk_73d41aa)
	cb.Do("Unk_5b5ba50", &t.Unk_5b5ba50)
	cb.Do("Unk_198d14", &t.Unk_198d14)
	cb.Do("Unk_3f5eba8", &t.Unk_3f5eba8)
	cb.Do("Unk_4ca89f2", &t.Unk_4ca89f2)
	cb.Do("Unk_896a40e", &t.Unk_896a40e)
	cb.Do("Unk_c13a0c0", &t.Unk_c13a0c0)
	cb.Do("Unk_e5c3ecd", &t.Unk_e5c3ecd)
	cb.Do("Unk_b4bbc51", &t.Unk_b4bbc51)
	cb.Do("Unk_b4fb094", &t.Unk_b4fb094)
	cb.Do("Unk_3a61fd9", &t.Unk_3a61fd9)
	cb.Do("Unk_fe7f4ba", &t.Unk_fe7f4ba)
	cb.Do("Unk_ce57789", &t.Unk_ce57789)
	cb.Do("Unk_2301c1c", &t.Unk_2301c1c)
	cb.Do("Unk_f4251fb", &t.Unk_f4251fb)
	cb.Do("Unk_f5a0fff", &t.Unk_f5a0fff)
	cb.Do("Unk_e5c3ece", &t.Unk_e5c3ece)
	cb.Do("Unk_b4bbc52", &t.Unk_b4bbc52)
	cb.Do("Unk_ce5778a", &t.Unk_ce5778a)
	cb.Do("Unk_2301c1d", &t.Unk_2301c1d)
	cb.Do("Unk_f4251fc", &t.Unk_f4251fc)
	cb.Do("Unk_f5a1000", &t.Unk_f5a1000)
	cb.Do("Unk_831d89e", &t.Unk_831d89e)
	cb.Do("Unk_49e93b9", &t.Unk_49e93b9)
	cb.Do("Unk_375ae36", &t.Unk_375ae36)
	cb.Do("Unk_5565ba0", &t.Unk_5565ba0)
	cb.Do("Unk_8fcbebc", &t.Unk_8fcbebc)
	cb.Do("Unk_831d89f", &t.Unk_831d89f)
	cb.Do("Unk_49e93ba", &t.Unk_49e93ba)
	cb.Do("Unk_375ae37", &t.Unk_375ae37)
	cb.Do("Unk_5565ba1", &t.Unk_5565ba1)
	cb.Do("Unk_8fcbebd", &t.Unk_8fcbebd)
	cb.Do("Unk_1808c53", &t.Unk_1808c53)
	cb.Do("Unk_8059ccb", &t.Unk_8059ccb)
	cb.Do("Unk_bf32a89", &t.Unk_bf32a89)
	cb.Do("Unk_14596d1", &t.Unk_14596d1)
	cb.Do("Unk_1da53ed", &t.Unk_1da53ed)
	cb.Do("Unk_e279c83", &t.Unk_e279c83)
	cb.Do("Unk_33f5202", &t.Unk_33f5202)
	cb.Do("Unk_cf50d72", &t.Unk_cf50d72)
}

type EffectGroupPreloadHelper struct {
	SnoEffectGroup DT_SNO
	Unk_34956e3    DT_INT
	Unk_7eb10c0    SerialDataInfo
	Unk_9ffef5e    SerialDataInfo
	Unk_82f1fc7    SerialDataInfo
}

func (t *EffectGroupPreloadHelper) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoEffectGroup, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.Unk_34956e3, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.Unk_7eb10c0, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_9ffef5e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_82f1fc7, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *EffectGroupPreloadHelper) Walk(cb WalkCallback) {
	cb.Do("SnoEffectGroup", &t.SnoEffectGroup)
	cb.Do("Unk_34956e3", &t.Unk_34956e3)
	cb.Do("Unk_7eb10c0", &t.Unk_7eb10c0)
	cb.Do("Unk_9ffef5e", &t.Unk_9ffef5e)
	cb.Do("Unk_82f1fc7", &t.Unk_82f1fc7)
}

type BoneStructureInfoData struct {
	PtBoneStructureInfo DT_VARIABLEARRAY[*BoneStructureInfo]
}

func (t *BoneStructureInfoData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.PtBoneStructureInfo, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *BoneStructureInfoData) Walk(cb WalkCallback) {
	cb.Do("PtBoneStructureInfo", &t.PtBoneStructureInfo)
}

type RopeEffectMessageACDToPlace struct {
	THeader           RequiredMessageHeader
	SnoRope           DT_SNO
	AnnFrom           DT_ACD_NETWORK_NAME
	EPositionFrom     DT_ENUM
	TPlaceTo          SharedServerWorldPlace
	BIgnoreOwnerAlpha DT_INT
}

func (t *RopeEffectMessageACDToPlace) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoRope, r, &Options{
		Flags: 1,
		Group: 32,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.AnnFrom, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.EPositionFrom, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.TPlaceTo, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.BIgnoreOwnerAlpha, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+56, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *RopeEffectMessageACDToPlace) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("SnoRope", &t.SnoRope)
	cb.Do("AnnFrom", &t.AnnFrom)
	cb.Do("EPositionFrom", &t.EPositionFrom)
	cb.Do("TPlaceTo", &t.TPlaceTo)
	cb.Do("BIgnoreOwnerAlpha", &t.BIgnoreOwnerAlpha)
}

type TriggerEventAddBaseMountLoadout struct {
	// Inherits TriggerEvent
	// Inherits PolymorphicBase
	DwType          DT_UINT
	DwPad           DT_UINT
	TConditions     TriggerConditions
	FGenerated      DT_INT
	Unk_6cba752     DT_INT
	DwParentActorID DT_UINT
}

func (t *TriggerEventAddBaseMountLoadout) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.FGenerated, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_6cba752, r, &Options{Flags: 16}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.DwParentActorID, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+80, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TriggerEventAddBaseMountLoadout) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("TConditions", &t.TConditions)
	cb.Do("FGenerated", &t.FGenerated)
	cb.Do("Unk_6cba752", &t.Unk_6cba752)
	cb.Do("DwParentActorID", &t.DwParentActorID)
}

type TriggerEventSubObjectVisibility struct {
	// Inherits TriggerEvent
	// Inherits PolymorphicBase
	DwType          DT_UINT
	DwPad           DT_UINT
	TConditions     TriggerConditions
	FGenerated      DT_INT
	Unk_6cba752     DT_INT
	DwParentActorID DT_UINT
	SzSubObjectName DT_UINT
	BVisible        DT_INT
}

func (t *TriggerEventSubObjectVisibility) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.FGenerated, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_6cba752, r, &Options{Flags: 16}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.DwParentActorID, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.SzSubObjectName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.BVisible, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+88, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TriggerEventSubObjectVisibility) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("TConditions", &t.TConditions)
	cb.Do("FGenerated", &t.FGenerated)
	cb.Do("Unk_6cba752", &t.Unk_6cba752)
	cb.Do("DwParentActorID", &t.DwParentActorID)
	cb.Do("SzSubObjectName", &t.SzSubObjectName)
	cb.Do("BVisible", &t.BVisible)
}

type PvPChestGizmoData struct {
	// Inherits ChestGizmoData
	// Inherits NamedGizmoData
	// Inherits ActorGizmoData
	// Inherits PolymorphicBase
	DwType                            DT_UINT
	FDisableNonFriendlyOperation      DT_INT
	FWalkToCenter                     DT_INT
	FGizmoStartsDisabled              DT_INT
	FUseStringListName                DT_INT
	FForceMinimapIcon                 DT_INT
	FlOperationRadius                 DT_FLOAT
	Unk_d0b1df5                       DT_FLOAT
	FlGizmoUseTime                    DT_FLOAT
	SnoChannelingEffect               DT_SNO
	Unk_2767229                       DT_INT
	FGizmoShowProgressBar             DT_INT
	Unk_6d9ebe1                       DT_INT
	Unk_5456245                       DT_INT
	Unk_af5815a                       DT_INT
	SnoOnClickEffect                  DT_SNO
	SnoPickedUpEffect                 DT_SNO
	SnoDropOnGroundEffect             DT_SNO
	TConditionData                    GizmoConditionData
	SnoPowerOperator                  DT_SNO
	SnoPowerOperate                   DT_SNO
	SnoPowerOperatorActive            DT_SNO
	SnoPowerOperateActive             DT_SNO
	Unk_359810e                       DT_INT
	NCooldown                         DT_UINT
	Unk_9c8478e                       DT_UINT
	Unk_d45ed2d                       DT_INT
	Unk_f6b20b7                       DT_INT
	Unk_54513b8                       DT_INT
	Unk_fd1f378                       DT_UINT
	Unk_487c14                        DT_UINT
	Unk_87f2609                       DT_UINT
	Unk_158eb4f                       DT_FLOAT
	Unk_ab58cd3                       DT_ENUM
	Unk_91a3966                       DT_UINT
	Unk_25312e5                       DT_UINT
	Unk_4be4371                       DT_INT
	SnoTreasureClass                  DT_SNO
	TLockData                         LockingGizmoData
	FChestRemovesCollisionOnOperation DT_INT
	FChestOperatesOnProximity         DT_INT
	FChestLight                       DT_INT
	Unk_51b0c11                       DT_INT
	Unk_6b4a81d                       DT_FLOAT
	DwPad                             DT_UINT
	Unk_58318b6                       DT_FLOAT
}

func (t *PvPChestGizmoData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.FDisableNonFriendlyOperation, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.FWalkToCenter, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.FGizmoStartsDisabled, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.FUseStringListName, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.FForceMinimapIcon, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.FlOperationRadius, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.Unk_d0b1df5, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.FlGizmoUseTime, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.SnoChannelingEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.Unk_2767229, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.FGizmoShowProgressBar, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+60, &t.Unk_6d9ebe1, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.Unk_5456245, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.Unk_af5815a, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.SnoOnClickEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.SnoPickedUpEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.SnoDropOnGroundEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.TConditionData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.SnoPowerOperator, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.SnoPowerOperate, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.SnoPowerOperatorActive, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+100, &t.SnoPowerOperateActive, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+104, &t.Unk_359810e, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+108, &t.NCooldown, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.Unk_9c8478e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+116, &t.Unk_d45ed2d, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.Unk_f6b20b7, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+124, &t.Unk_54513b8, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.Unk_fd1f378, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+132, &t.Unk_487c14, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+136, &t.Unk_87f2609, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+140, &t.Unk_158eb4f, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+144, &t.Unk_ab58cd3, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+148, &t.Unk_91a3966, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+152, &t.Unk_25312e5, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+156, &t.Unk_4be4371, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+160, &t.SnoTreasureClass, r, &Options{
		Flags: 1,
		Group: 52,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+164, &t.TLockData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+200, &t.FChestRemovesCollisionOnOperation, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+204, &t.FChestOperatesOnProximity, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+208, &t.FChestLight, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+212, &t.Unk_51b0c11, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+216, &t.Unk_6b4a81d, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+220, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+224, &t.Unk_58318b6, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+232, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PvPChestGizmoData) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("FDisableNonFriendlyOperation", &t.FDisableNonFriendlyOperation)
	cb.Do("FWalkToCenter", &t.FWalkToCenter)
	cb.Do("FGizmoStartsDisabled", &t.FGizmoStartsDisabled)
	cb.Do("FUseStringListName", &t.FUseStringListName)
	cb.Do("FForceMinimapIcon", &t.FForceMinimapIcon)
	cb.Do("FlOperationRadius", &t.FlOperationRadius)
	cb.Do("Unk_d0b1df5", &t.Unk_d0b1df5)
	cb.Do("FlGizmoUseTime", &t.FlGizmoUseTime)
	cb.Do("SnoChannelingEffect", &t.SnoChannelingEffect)
	cb.Do("Unk_2767229", &t.Unk_2767229)
	cb.Do("FGizmoShowProgressBar", &t.FGizmoShowProgressBar)
	cb.Do("Unk_6d9ebe1", &t.Unk_6d9ebe1)
	cb.Do("Unk_5456245", &t.Unk_5456245)
	cb.Do("Unk_af5815a", &t.Unk_af5815a)
	cb.Do("SnoOnClickEffect", &t.SnoOnClickEffect)
	cb.Do("SnoPickedUpEffect", &t.SnoPickedUpEffect)
	cb.Do("SnoDropOnGroundEffect", &t.SnoDropOnGroundEffect)
	cb.Do("TConditionData", &t.TConditionData)
	cb.Do("SnoPowerOperator", &t.SnoPowerOperator)
	cb.Do("SnoPowerOperate", &t.SnoPowerOperate)
	cb.Do("SnoPowerOperatorActive", &t.SnoPowerOperatorActive)
	cb.Do("SnoPowerOperateActive", &t.SnoPowerOperateActive)
	cb.Do("Unk_359810e", &t.Unk_359810e)
	cb.Do("NCooldown", &t.NCooldown)
	cb.Do("Unk_9c8478e", &t.Unk_9c8478e)
	cb.Do("Unk_d45ed2d", &t.Unk_d45ed2d)
	cb.Do("Unk_f6b20b7", &t.Unk_f6b20b7)
	cb.Do("Unk_54513b8", &t.Unk_54513b8)
	cb.Do("Unk_fd1f378", &t.Unk_fd1f378)
	cb.Do("Unk_487c14", &t.Unk_487c14)
	cb.Do("Unk_87f2609", &t.Unk_87f2609)
	cb.Do("Unk_158eb4f", &t.Unk_158eb4f)
	cb.Do("Unk_ab58cd3", &t.Unk_ab58cd3)
	cb.Do("Unk_91a3966", &t.Unk_91a3966)
	cb.Do("Unk_25312e5", &t.Unk_25312e5)
	cb.Do("Unk_4be4371", &t.Unk_4be4371)
	cb.Do("SnoTreasureClass", &t.SnoTreasureClass)
	cb.Do("TLockData", &t.TLockData)
	cb.Do("FChestRemovesCollisionOnOperation", &t.FChestRemovesCollisionOnOperation)
	cb.Do("FChestOperatesOnProximity", &t.FChestOperatesOnProximity)
	cb.Do("FChestLight", &t.FChestLight)
	cb.Do("Unk_51b0c11", &t.Unk_51b0c11)
	cb.Do("Unk_6b4a81d", &t.Unk_6b4a81d)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("Unk_58318b6", &t.Unk_58318b6)
}

type Type_44293b37 struct {
	Unk_a64fa3e   DT_ENUM
	SzIDScrollbar DT_CSTRING[*DT_BYTE]
}

func (t *Type_44293b37) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Unk_a64fa3e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.SzIDScrollbar, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_44293b37) Walk(cb WalkCallback) {
	cb.Do("Unk_a64fa3e", &t.Unk_a64fa3e)
	cb.Do("SzIDScrollbar", &t.SzIDScrollbar)
}

type TriggerEventHideWarpUI struct {
	// Inherits TriggerEvent
	// Inherits PolymorphicBase
	DwType          DT_UINT
	DwPad           DT_UINT
	TConditions     TriggerConditions
	FGenerated      DT_INT
	Unk_6cba752     DT_INT
	DwParentActorID DT_UINT
	SnoUI           DT_SNO
}

func (t *TriggerEventHideWarpUI) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.FGenerated, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_6cba752, r, &Options{Flags: 16}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.DwParentActorID, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.SnoUI, r, &Options{
		Flags: 1,
		Group: 46,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+88, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TriggerEventHideWarpUI) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("TConditions", &t.TConditions)
	cb.Do("FGenerated", &t.FGenerated)
	cb.Do("Unk_6cba752", &t.Unk_6cba752)
	cb.Do("DwParentActorID", &t.DwParentActorID)
	cb.Do("SnoUI", &t.SnoUI)
}

type MusicDefinition struct {
	Unk_1a7272c        DT_SNO
	DwFlags            DT_UINT
	FlCooldownDuration DT_FLOAT
	FlMinimumDuration  DT_FLOAT
	PtStateValues      DT_VARIABLEARRAY[*WwiseSwitchValue]
	PtGameParameters   DT_VARIABLEARRAY[*WwiseGameParameter]
	Unk_6e07e26        MusicTransition
}

func (t *MusicDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.Unk_1a7272c, r, &Options{
		Flags: 1,
		Group: 40,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.FlCooldownDuration, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.FlMinimumDuration, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.PtStateValues, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.PtGameParameters, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.Unk_6e07e26, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+72, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *MusicDefinition) Walk(cb WalkCallback) {
	cb.Do("Unk_1a7272c", &t.Unk_1a7272c)
	cb.Do("DwFlags", &t.DwFlags)
	cb.Do("FlCooldownDuration", &t.FlCooldownDuration)
	cb.Do("FlMinimumDuration", &t.FlMinimumDuration)
	cb.Do("PtStateValues", &t.PtStateValues)
	cb.Do("PtGameParameters", &t.PtGameParameters)
	cb.Do("Unk_6e07e26", &t.Unk_6e07e26)
}

type Type_44575aca struct {
	// Inherits TriggerEventRangedDuration
	// Inherits TriggerEvent
	// Inherits PolymorphicBase
	DwType           DT_UINT
	TConditions      TriggerConditions
	FGenerated       DT_INT
	Unk_6cba752      DT_INT
	DwParentActorID  DT_UINT
	TDuration        DT_FLOAT
	DwTriggerFlags   DT_UINT
	DwTriggerFlagsEx DT_UINT
	TCleanup         TriggerCleanup
	Unk_49e9257      DT_INT
	Unk_5490979      DT_INT
	DwPad            DT_UINT
	Unk_279aa5a      DT_INT
	DwActorID        DT_UINT
	Unk_154cedd      DT_FLOAT
}

func (t *Type_44575aca) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.FGenerated, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_6cba752, r, &Options{Flags: 16}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.DwParentActorID, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.TDuration, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.DwTriggerFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.DwTriggerFlagsEx, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.TCleanup, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+116, &t.Unk_49e9257, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.Unk_5490979, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+124, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.Unk_279aa5a, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+132, &t.DwActorID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+136, &t.Unk_154cedd, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+144, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_44575aca) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("TConditions", &t.TConditions)
	cb.Do("FGenerated", &t.FGenerated)
	cb.Do("Unk_6cba752", &t.Unk_6cba752)
	cb.Do("DwParentActorID", &t.DwParentActorID)
	cb.Do("TDuration", &t.TDuration)
	cb.Do("DwTriggerFlags", &t.DwTriggerFlags)
	cb.Do("DwTriggerFlagsEx", &t.DwTriggerFlagsEx)
	cb.Do("TCleanup", &t.TCleanup)
	cb.Do("Unk_49e9257", &t.Unk_49e9257)
	cb.Do("Unk_5490979", &t.Unk_5490979)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("Unk_279aa5a", &t.Unk_279aa5a)
	cb.Do("DwActorID", &t.DwActorID)
	cb.Do("Unk_154cedd", &t.Unk_154cedd)
}

type PlayerCurrentWorldSubcondition struct {
	// Inherits Subcondition
	// Inherits PolymorphicBase
	DwType   DT_UINT
	BNegate  DT_INT
	DwPad    DT_UINT
	SnoWorld DT_SNO
}

func (t *PlayerCurrentWorldSubcondition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BNegate, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SnoWorld, r, &Options{
		Flags: 513,
		Group: 48,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PlayerCurrentWorldSubcondition) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("BNegate", &t.BNegate)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("SnoWorld", &t.SnoWorld)
}

type ProximityAdjustment struct {
	SnonameObject    DT_SNO_NAME
	SnoAppearance    DT_SNO
	AWanderPlane     DT_FLOAT
	FlChanceOverride DT_FLOAT
	FlInnerRadius    DT_FLOAT
	FlOuterRadius    DT_FLOAT
}

func (t *ProximityAdjustment) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnonameObject, r, &Options{Flags: 513}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.SnoAppearance, r, &Options{
		Flags: 512,
		Group: 9,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.AWanderPlane, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.FlChanceOverride, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.FlInnerRadius, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.FlOuterRadius, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+28, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ProximityAdjustment) Walk(cb WalkCallback) {
	cb.Do("SnonameObject", &t.SnonameObject)
	cb.Do("SnoAppearance", &t.SnoAppearance)
	cb.Do("AWanderPlane", &t.AWanderPlane)
	cb.Do("FlChanceOverride", &t.FlChanceOverride)
	cb.Do("FlInnerRadius", &t.FlInnerRadius)
	cb.Do("FlOuterRadius", &t.FlOuterRadius)
}

type VisualEquipment struct {
	TVisualItem DT_FIXEDARRAY[*VisualItem]
}

func (t *VisualEquipment) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.TVisualItem, r, &Options{
		ArrayLength: 15,
		Flags:       1,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+120, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *VisualEquipment) Walk(cb WalkCallback) {
	cb.Do("TVisualItem", &t.TVisualItem)
}

type TraversalGizmoData struct {
	// Inherits NamedGizmoData
	// Inherits ActorGizmoData
	// Inherits PolymorphicBase
	DwType                       DT_UINT
	DwPad                        DT_UINT
	FDisableNonFriendlyOperation DT_INT
	FWalkToCenter                DT_INT
	FGizmoStartsDisabled         DT_INT
	FUseStringListName           DT_INT
	FForceMinimapIcon            DT_INT
	FlOperationRadius            DT_FLOAT
	Unk_d0b1df5                  DT_FLOAT
	FlGizmoUseTime               DT_FLOAT
	SnoChannelingEffect          DT_SNO
	Unk_2767229                  DT_INT
	FGizmoShowProgressBar        DT_INT
	Unk_6d9ebe1                  DT_INT
	Unk_5456245                  DT_INT
	Unk_af5815a                  DT_INT
	SnoOnClickEffect             DT_SNO
	SnoPickedUpEffect            DT_SNO
	SnoDropOnGroundEffect        DT_SNO
	TConditionData               GizmoConditionData
	SnoPowerOperator             DT_SNO
	SnoPowerOperate              DT_SNO
	SnoPowerOperatorActive       DT_SNO
	SnoPowerOperateActive        DT_SNO
	Unk_359810e                  DT_INT
	NCooldown                    DT_UINT
	Unk_9c8478e                  DT_UINT
	Unk_d45ed2d                  DT_INT
	Unk_f6b20b7                  DT_INT
	Unk_54513b8                  DT_INT
	Unk_fd1f378                  DT_UINT
	Unk_487c14                   DT_UINT
	Unk_87f2609                  DT_UINT
	Unk_158eb4f                  DT_FLOAT
	Unk_ab58cd3                  DT_ENUM
	Unk_91a3966                  DT_UINT
	Unk_25312e5                  DT_UINT
	Unk_4be4371                  DT_INT
	TTraversalData               TraversalInstanceData
	BAmbientInteract             DT_INT
	Unk_33bc35b                  DT_FLOAT
}

func (t *TraversalGizmoData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.FDisableNonFriendlyOperation, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.FWalkToCenter, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.FGizmoStartsDisabled, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.FUseStringListName, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.FForceMinimapIcon, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.FlOperationRadius, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.Unk_d0b1df5, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.FlGizmoUseTime, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.SnoChannelingEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.Unk_2767229, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.FGizmoShowProgressBar, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+60, &t.Unk_6d9ebe1, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.Unk_5456245, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.Unk_af5815a, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.SnoOnClickEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.SnoPickedUpEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.SnoDropOnGroundEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.TConditionData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.SnoPowerOperator, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.SnoPowerOperate, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.SnoPowerOperatorActive, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+100, &t.SnoPowerOperateActive, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+104, &t.Unk_359810e, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+108, &t.NCooldown, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.Unk_9c8478e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+116, &t.Unk_d45ed2d, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.Unk_f6b20b7, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+124, &t.Unk_54513b8, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.Unk_fd1f378, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+132, &t.Unk_487c14, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+136, &t.Unk_87f2609, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+140, &t.Unk_158eb4f, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+144, &t.Unk_ab58cd3, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+148, &t.Unk_91a3966, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+152, &t.Unk_25312e5, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+156, &t.Unk_4be4371, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+160, &t.TTraversalData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+172, &t.BAmbientInteract, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+176, &t.Unk_33bc35b, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+184, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TraversalGizmoData) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("FDisableNonFriendlyOperation", &t.FDisableNonFriendlyOperation)
	cb.Do("FWalkToCenter", &t.FWalkToCenter)
	cb.Do("FGizmoStartsDisabled", &t.FGizmoStartsDisabled)
	cb.Do("FUseStringListName", &t.FUseStringListName)
	cb.Do("FForceMinimapIcon", &t.FForceMinimapIcon)
	cb.Do("FlOperationRadius", &t.FlOperationRadius)
	cb.Do("Unk_d0b1df5", &t.Unk_d0b1df5)
	cb.Do("FlGizmoUseTime", &t.FlGizmoUseTime)
	cb.Do("SnoChannelingEffect", &t.SnoChannelingEffect)
	cb.Do("Unk_2767229", &t.Unk_2767229)
	cb.Do("FGizmoShowProgressBar", &t.FGizmoShowProgressBar)
	cb.Do("Unk_6d9ebe1", &t.Unk_6d9ebe1)
	cb.Do("Unk_5456245", &t.Unk_5456245)
	cb.Do("Unk_af5815a", &t.Unk_af5815a)
	cb.Do("SnoOnClickEffect", &t.SnoOnClickEffect)
	cb.Do("SnoPickedUpEffect", &t.SnoPickedUpEffect)
	cb.Do("SnoDropOnGroundEffect", &t.SnoDropOnGroundEffect)
	cb.Do("TConditionData", &t.TConditionData)
	cb.Do("SnoPowerOperator", &t.SnoPowerOperator)
	cb.Do("SnoPowerOperate", &t.SnoPowerOperate)
	cb.Do("SnoPowerOperatorActive", &t.SnoPowerOperatorActive)
	cb.Do("SnoPowerOperateActive", &t.SnoPowerOperateActive)
	cb.Do("Unk_359810e", &t.Unk_359810e)
	cb.Do("NCooldown", &t.NCooldown)
	cb.Do("Unk_9c8478e", &t.Unk_9c8478e)
	cb.Do("Unk_d45ed2d", &t.Unk_d45ed2d)
	cb.Do("Unk_f6b20b7", &t.Unk_f6b20b7)
	cb.Do("Unk_54513b8", &t.Unk_54513b8)
	cb.Do("Unk_fd1f378", &t.Unk_fd1f378)
	cb.Do("Unk_487c14", &t.Unk_487c14)
	cb.Do("Unk_87f2609", &t.Unk_87f2609)
	cb.Do("Unk_158eb4f", &t.Unk_158eb4f)
	cb.Do("Unk_ab58cd3", &t.Unk_ab58cd3)
	cb.Do("Unk_91a3966", &t.Unk_91a3966)
	cb.Do("Unk_25312e5", &t.Unk_25312e5)
	cb.Do("Unk_4be4371", &t.Unk_4be4371)
	cb.Do("TTraversalData", &t.TTraversalData)
	cb.Do("BAmbientInteract", &t.BAmbientInteract)
	cb.Do("Unk_33bc35b", &t.Unk_33bc35b)
}

type Type_4533ccd1 struct {
	// Inherits ScriptEventParamBase
	// Inherits PolymorphicBase
	DwType         DT_UINT
	EParamType     DT_ENUM
	DwPad          DT_UINT
	SnoAchievement DT_SNO
}

func (t *Type_4533ccd1) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.EParamType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SnoAchievement, r, &Options{
		Flags: 1,
		Group: 99,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_4533ccd1) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("EParamType", &t.EParamType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("SnoAchievement", &t.SnoAchievement)
}

type OnDeathBuffCallback struct {
	// Inherits BuffCallbackBase
	// Inherits PolymorphicBase
	DwType                DT_UINT
	DwPad                 DT_UINT
	SnoTriggerEffectGroup DT_SNO
	ArConditions          DT_POLYMORPHIC_VARIABLEARRAY[*DT_INT64]
}

func (t *OnDeathBuffCallback) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoTriggerEffectGroup, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ArConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *OnDeathBuffCallback) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("SnoTriggerEffectGroup", &t.SnoTriggerEffectGroup)
	cb.Do("ArConditions", &t.ArConditions)
}

type ParagonThresholdEntry struct {
	TThresholdAttribute    ParagonGlyphAffixAttribute
	TThresholdValueFormula DT_STRING_FORMULA
}

func (t *ParagonThresholdEntry) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.TThresholdAttribute, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.TThresholdValueFormula, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+40, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ParagonThresholdEntry) Walk(cb WalkCallback) {
	cb.Do("TThresholdAttribute", &t.TThresholdAttribute)
	cb.Do("TThresholdValueFormula", &t.TThresholdValueFormula)
}

type ClothDefinition struct {
	SnoAmbientSound DT_SNO
	DwFlags         DT_UINT
	NPurchaseGizmo  DT_INT
	Unk_be5c463     Type_aced015b
	Unk_570fcff     DT_FLOAT
	Unk_b8886b      DT_FLOAT
	Unk_a3b3e2      DT_FLOAT
	Unk_c5496ae     DT_FLOAT
	Unk_fc18a85     DT_FLOAT
	Unk_643f5b      DT_FLOAT
	Unk_5f96b22     DT_RANGE[*DT_FLOAT]
	Unk_4848e0f     DT_RANGE[*DT_FLOAT]
}

func (t *ClothDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.SnoAmbientSound, r, &Options{
		Flags: 8388608,
		Group: 5,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwFlags, r, &Options{Flags: 8912896}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.NPurchaseGizmo, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.Unk_be5c463, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+204, &t.Unk_570fcff, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+208, &t.Unk_b8886b, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+212, &t.Unk_a3b3e2, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+216, &t.Unk_c5496ae, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+220, &t.Unk_fc18a85, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+224, &t.Unk_643f5b, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+228, &t.Unk_5f96b22, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+236, &t.Unk_4848e0f, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if _, err := r.Seek(p+244, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ClothDefinition) Walk(cb WalkCallback) {
	cb.Do("SnoAmbientSound", &t.SnoAmbientSound)
	cb.Do("DwFlags", &t.DwFlags)
	cb.Do("NPurchaseGizmo", &t.NPurchaseGizmo)
	cb.Do("Unk_be5c463", &t.Unk_be5c463)
	cb.Do("Unk_570fcff", &t.Unk_570fcff)
	cb.Do("Unk_b8886b", &t.Unk_b8886b)
	cb.Do("Unk_a3b3e2", &t.Unk_a3b3e2)
	cb.Do("Unk_c5496ae", &t.Unk_c5496ae)
	cb.Do("Unk_fc18a85", &t.Unk_fc18a85)
	cb.Do("Unk_643f5b", &t.Unk_643f5b)
	cb.Do("Unk_5f96b22", &t.Unk_5f96b22)
	cb.Do("Unk_4848e0f", &t.Unk_4848e0f)
}

type GameTestingCloseVendor struct {
	THeader RequiredMessageHeader
}

func (t *GameTestingCloseVendor) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *GameTestingCloseVendor) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
}

type UIItemButtonStyle struct {
	// Inherits UIButtonStyle
	// Inherits UITextStyle
	// Inherits UIWindowStyle
	// Inherits UIControlStyle
	// Inherits PolymorphicBase
	DwType                    DT_UINT
	DwPad                     DT_UINT
	HParentStyle              UIControlHandle
	Unk_441f783               DT_INT64
	M_eHasModifiedPowerTagMap DT_TAGMAP[*DT_ENUM]
	TConsoleInput             UIControlConsoleInput
	Unk_b4f614c               DT_TAGMAP[*DT_ENUM]
	TFont                     UIControlFont
	Unk_4741819               DT_TAGMAP[*DT_ENUM]
	TIcon                     UIControlIcon
	TClickSounds              UIControlClickSounds
	Unk_10f81f0               DT_TAGMAP[*DT_ENUM]
	Unk_adf9a5f               DT_TAGMAP[*DT_ENUM]
}

func (t *UIItemButtonStyle) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.HParentStyle, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_441f783, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.M_eHasModifiedPowerTagMap, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.TConsoleInput, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.Unk_b4f614c, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.TFont, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.Unk_4741819, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.TIcon, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.TClickSounds, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+144, &t.Unk_10f81f0, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+160, &t.Unk_adf9a5f, r, &Options{Flags: 513}); err != nil {
		return err
	}
	if _, err := r.Seek(p+176, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *UIItemButtonStyle) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("HParentStyle", &t.HParentStyle)
	cb.Do("Unk_441f783", &t.Unk_441f783)
	cb.Do("M_eHasModifiedPowerTagMap", &t.M_eHasModifiedPowerTagMap)
	cb.Do("TConsoleInput", &t.TConsoleInput)
	cb.Do("Unk_b4f614c", &t.Unk_b4f614c)
	cb.Do("TFont", &t.TFont)
	cb.Do("Unk_4741819", &t.Unk_4741819)
	cb.Do("TIcon", &t.TIcon)
	cb.Do("TClickSounds", &t.TClickSounds)
	cb.Do("Unk_10f81f0", &t.Unk_10f81f0)
	cb.Do("Unk_adf9a5f", &t.Unk_adf9a5f)
}

type Quaternion16 struct {
	X DT_WORD
	Y DT_WORD
	Z DT_WORD
	W DT_WORD
}

func (t *Quaternion16) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.X, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2, &t.Y, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.Z, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+6, &t.W, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Quaternion16) Walk(cb WalkCallback) {
	cb.Do("X", &t.X)
	cb.Do("Y", &t.Y)
	cb.Do("Z", &t.Z)
	cb.Do("W", &t.W)
}

type HitpointSpecifier struct {
	EType           DT_ENUM
	THitpointScalar DT_STRING_FORMULA
	TFlatLevel      DT_STRING_FORMULA
}

func (t *HitpointSpecifier) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.EType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.THitpointScalar, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.TFlatLevel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+72, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *HitpointSpecifier) Walk(cb WalkCallback) {
	cb.Do("EType", &t.EType)
	cb.Do("THitpointScalar", &t.THitpointScalar)
	cb.Do("TFlatLevel", &t.TFlatLevel)
}

type AssetListEntry struct {
	NID    DT_INT
	NIndex DT_UINT
}

func (t *AssetListEntry) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.NID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.NIndex, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *AssetListEntry) Walk(cb WalkCallback) {
	cb.Do("NID", &t.NID)
	cb.Do("NIndex", &t.NIndex)
}

type Type_46c720bc struct {
	// Inherits Type_f67f903d
	// Inherits StoryboardTrack
	// Inherits PolymorphicBase
	DwType      DT_UINT
	DwPad       DT_UINT
	Unk_9b2bc26 Type_7fb46e7a
}

func (t *Type_46c720bc) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_9b2bc26, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_46c720bc) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("Unk_9b2bc26", &t.Unk_9b2bc26)
}

type EffectGroupActorTrack struct {
	// Inherits EffectGroupTrack
	// Inherits PolymorphicBase
	DwType      DT_UINT
	DwPad       DT_UINT
	Unk_5d2c092 DT_INT
}

func (t *EffectGroupActorTrack) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_5d2c092, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *EffectGroupActorTrack) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("Unk_5d2c092", &t.Unk_5d2c092)
}

type DefaultMaterialValueDefinition struct {
	// Inherits PolymorphicBase
	DwType DT_UINT
	DwPad  DT_UINT
	VValue DT_VECTOR4D
}

func (t *DefaultMaterialValueDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.VValue, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *DefaultMaterialValueDefinition) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("VValue", &t.VValue)
}

type TriggerEventAddTrail struct {
	// Inherits TriggerEventRangedDuration
	// Inherits TriggerEvent
	// Inherits PolymorphicBase
	DwType              DT_UINT
	TConditions         TriggerConditions
	FGenerated          DT_INT
	Unk_6cba752         DT_INT
	DwParentActorID     DT_UINT
	TDuration           DT_FLOAT
	DwTriggerFlags      DT_UINT
	DwTriggerFlagsEx    DT_UINT
	TCleanup            TriggerCleanup
	Unk_49e9257         DT_INT
	Unk_5490979         DT_INT
	DwPad               DT_UINT
	DwID                DT_UINT
	SnoTrail            DT_SNO
	VecScalar           DT_VECTOR2D
	Unk_53ae317         HardpointLink
	SnoPowerEffectParam DT_SNO
	Unk_526c582         DT_VARIABLEARRAY[*HardpointLink]
}

func (t *TriggerEventAddTrail) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.FGenerated, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_6cba752, r, &Options{Flags: 16}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.DwParentActorID, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.TDuration, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.DwTriggerFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.DwTriggerFlagsEx, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.TCleanup, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+116, &t.Unk_49e9257, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.Unk_5490979, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+124, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.DwID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+132, &t.SnoTrail, r, &Options{
		Flags: 1,
		Group: 45,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+136, &t.VecScalar, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+144, &t.Unk_53ae317, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+152, &t.SnoPowerEffectParam, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+160, &t.Unk_526c582, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+176, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TriggerEventAddTrail) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("TConditions", &t.TConditions)
	cb.Do("FGenerated", &t.FGenerated)
	cb.Do("Unk_6cba752", &t.Unk_6cba752)
	cb.Do("DwParentActorID", &t.DwParentActorID)
	cb.Do("TDuration", &t.TDuration)
	cb.Do("DwTriggerFlags", &t.DwTriggerFlags)
	cb.Do("DwTriggerFlagsEx", &t.DwTriggerFlagsEx)
	cb.Do("TCleanup", &t.TCleanup)
	cb.Do("Unk_49e9257", &t.Unk_49e9257)
	cb.Do("Unk_5490979", &t.Unk_5490979)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("DwID", &t.DwID)
	cb.Do("SnoTrail", &t.SnoTrail)
	cb.Do("VecScalar", &t.VecScalar)
	cb.Do("Unk_53ae317", &t.Unk_53ae317)
	cb.Do("SnoPowerEffectParam", &t.SnoPowerEffectParam)
	cb.Do("Unk_526c582", &t.Unk_526c582)
}

type PowerConditionDistanceToTarget struct {
	// Inherits PowerConditionBase
	// Inherits PolymorphicBase
	DwType     DT_UINT
	BInverse   DT_INT
	DwPad      DT_UINT
	FlDistance DT_FLOAT
}

func (t *PowerConditionDistanceToTarget) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BInverse, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.FlDistance, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PowerConditionDistanceToTarget) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("BInverse", &t.BInverse)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("FlDistance", &t.FlDistance)
}

type EngagedMessage struct {
	THeader               RequiredMessageHeader
	DwPlayerGameAccountId DT_UINT
	SnoActorMonster       DT_SNO
	EMonsterRarity        DT_ENUM
	BUseAlternateName     DT_INT
	PRareNameGBIDs        DT_FIXEDARRAY[*DT_GBID]
	SnoMonsterAffixes     DT_FIXEDARRAY[*DT_SNO]
}

func (t *EngagedMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.DwPlayerGameAccountId, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.SnoActorMonster, r, &Options{
		Flags: 1,
		Group: 1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.EMonsterRarity, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.BUseAlternateName, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.PRareNameGBIDs, r, &Options{
		ArrayLength: 2,
		Flags:       1,
		Group:       7,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.SnoMonsterAffixes, r, &Options{
		ArrayLength: 4,
		Flags:       1,
		Group:       107,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+56, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *EngagedMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("DwPlayerGameAccountId", &t.DwPlayerGameAccountId)
	cb.Do("SnoActorMonster", &t.SnoActorMonster)
	cb.Do("EMonsterRarity", &t.EMonsterRarity)
	cb.Do("BUseAlternateName", &t.BUseAlternateName)
	cb.Do("PRareNameGBIDs", &t.PRareNameGBIDs)
	cb.Do("SnoMonsterAffixes", &t.SnoMonsterAffixes)
}

type MarkerSavePointGizmoData struct {
	Unk_e0ddd0  DT_INT
	Unk_e192692 DT_INT
}

func (t *MarkerSavePointGizmoData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Unk_e0ddd0, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.Unk_e192692, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *MarkerSavePointGizmoData) Walk(cb WalkCallback) {
	cb.Do("Unk_e0ddd0", &t.Unk_e0ddd0)
	cb.Do("Unk_e192692", &t.Unk_e192692)
}

type DestroyableObjectGizmoData struct {
	// Inherits NamedGizmoData
	// Inherits ActorGizmoData
	// Inherits PolymorphicBase
	DwType                       DT_UINT
	DwPad                        DT_UINT
	FDisableNonFriendlyOperation DT_INT
	FWalkToCenter                DT_INT
	FGizmoStartsDisabled         DT_INT
	FUseStringListName           DT_INT
	FForceMinimapIcon            DT_INT
	FlOperationRadius            DT_FLOAT
	Unk_d0b1df5                  DT_FLOAT
	FlGizmoUseTime               DT_FLOAT
	SnoChannelingEffect          DT_SNO
	Unk_2767229                  DT_INT
	FGizmoShowProgressBar        DT_INT
	Unk_6d9ebe1                  DT_INT
	Unk_5456245                  DT_INT
	Unk_af5815a                  DT_INT
	SnoOnClickEffect             DT_SNO
	SnoPickedUpEffect            DT_SNO
	SnoDropOnGroundEffect        DT_SNO
	TConditionData               GizmoConditionData
	SnoPowerOperator             DT_SNO
	SnoPowerOperate              DT_SNO
	SnoPowerOperatorActive       DT_SNO
	SnoPowerOperateActive        DT_SNO
	Unk_359810e                  DT_INT
	NCooldown                    DT_UINT
	Unk_9c8478e                  DT_UINT
	Unk_d45ed2d                  DT_INT
	Unk_f6b20b7                  DT_INT
	Unk_54513b8                  DT_INT
	Unk_fd1f378                  DT_UINT
	Unk_487c14                   DT_UINT
	Unk_87f2609                  DT_UINT
	Unk_158eb4f                  DT_FLOAT
	Unk_ab58cd3                  DT_ENUM
	Unk_91a3966                  DT_UINT
	Unk_25312e5                  DT_UINT
	Unk_4be4371                  DT_INT
	EWreckableStrength           DT_ENUM
	SnoRequiredPower             DT_SNO
	Unk_c0f7c                    DT_INT
	Unk_4d93264                  DT_ENUM
}

func (t *DestroyableObjectGizmoData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.FDisableNonFriendlyOperation, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.FWalkToCenter, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.FGizmoStartsDisabled, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.FUseStringListName, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.FForceMinimapIcon, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.FlOperationRadius, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.Unk_d0b1df5, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.FlGizmoUseTime, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.SnoChannelingEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.Unk_2767229, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.FGizmoShowProgressBar, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+60, &t.Unk_6d9ebe1, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.Unk_5456245, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.Unk_af5815a, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.SnoOnClickEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.SnoPickedUpEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.SnoDropOnGroundEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.TConditionData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.SnoPowerOperator, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.SnoPowerOperate, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.SnoPowerOperatorActive, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+100, &t.SnoPowerOperateActive, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+104, &t.Unk_359810e, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+108, &t.NCooldown, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.Unk_9c8478e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+116, &t.Unk_d45ed2d, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.Unk_f6b20b7, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+124, &t.Unk_54513b8, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.Unk_fd1f378, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+132, &t.Unk_487c14, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+136, &t.Unk_87f2609, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+140, &t.Unk_158eb4f, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+144, &t.Unk_ab58cd3, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+148, &t.Unk_91a3966, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+152, &t.Unk_25312e5, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+156, &t.Unk_4be4371, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+160, &t.EWreckableStrength, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+164, &t.SnoRequiredPower, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+168, &t.Unk_c0f7c, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+172, &t.Unk_4d93264, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+176, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *DestroyableObjectGizmoData) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("FDisableNonFriendlyOperation", &t.FDisableNonFriendlyOperation)
	cb.Do("FWalkToCenter", &t.FWalkToCenter)
	cb.Do("FGizmoStartsDisabled", &t.FGizmoStartsDisabled)
	cb.Do("FUseStringListName", &t.FUseStringListName)
	cb.Do("FForceMinimapIcon", &t.FForceMinimapIcon)
	cb.Do("FlOperationRadius", &t.FlOperationRadius)
	cb.Do("Unk_d0b1df5", &t.Unk_d0b1df5)
	cb.Do("FlGizmoUseTime", &t.FlGizmoUseTime)
	cb.Do("SnoChannelingEffect", &t.SnoChannelingEffect)
	cb.Do("Unk_2767229", &t.Unk_2767229)
	cb.Do("FGizmoShowProgressBar", &t.FGizmoShowProgressBar)
	cb.Do("Unk_6d9ebe1", &t.Unk_6d9ebe1)
	cb.Do("Unk_5456245", &t.Unk_5456245)
	cb.Do("Unk_af5815a", &t.Unk_af5815a)
	cb.Do("SnoOnClickEffect", &t.SnoOnClickEffect)
	cb.Do("SnoPickedUpEffect", &t.SnoPickedUpEffect)
	cb.Do("SnoDropOnGroundEffect", &t.SnoDropOnGroundEffect)
	cb.Do("TConditionData", &t.TConditionData)
	cb.Do("SnoPowerOperator", &t.SnoPowerOperator)
	cb.Do("SnoPowerOperate", &t.SnoPowerOperate)
	cb.Do("SnoPowerOperatorActive", &t.SnoPowerOperatorActive)
	cb.Do("SnoPowerOperateActive", &t.SnoPowerOperateActive)
	cb.Do("Unk_359810e", &t.Unk_359810e)
	cb.Do("NCooldown", &t.NCooldown)
	cb.Do("Unk_9c8478e", &t.Unk_9c8478e)
	cb.Do("Unk_d45ed2d", &t.Unk_d45ed2d)
	cb.Do("Unk_f6b20b7", &t.Unk_f6b20b7)
	cb.Do("Unk_54513b8", &t.Unk_54513b8)
	cb.Do("Unk_fd1f378", &t.Unk_fd1f378)
	cb.Do("Unk_487c14", &t.Unk_487c14)
	cb.Do("Unk_87f2609", &t.Unk_87f2609)
	cb.Do("Unk_158eb4f", &t.Unk_158eb4f)
	cb.Do("Unk_ab58cd3", &t.Unk_ab58cd3)
	cb.Do("Unk_91a3966", &t.Unk_91a3966)
	cb.Do("Unk_25312e5", &t.Unk_25312e5)
	cb.Do("Unk_4be4371", &t.Unk_4be4371)
	cb.Do("EWreckableStrength", &t.EWreckableStrength)
	cb.Do("SnoRequiredPower", &t.SnoRequiredPower)
	cb.Do("Unk_c0f7c", &t.Unk_c0f7c)
	cb.Do("Unk_4d93264", &t.Unk_4d93264)
}

type WeaponExpertiseRanks struct {
	THeader GBIDHeader
	ArRanks DT_VARIABLEARRAY[*WeaponExpertiseRank]
}

func (t *WeaponExpertiseRanks) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+264, &t.ArRanks, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+280, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *WeaponExpertiseRanks) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("ArRanks", &t.ArRanks)
}

type TriggerEventCameraMoveToCameraMarker struct {
	// Inherits TriggerEventRangedDuration
	// Inherits TriggerEvent
	// Inherits PolymorphicBase
	DwType              DT_UINT
	TConditions         TriggerConditions
	FGenerated          DT_INT
	Unk_6cba752         DT_INT
	DwParentActorID     DT_UINT
	TDuration           DT_FLOAT
	DwTriggerFlags      DT_UINT
	DwTriggerFlagsEx    DT_UINT
	TCleanup            TriggerCleanup
	Unk_49e9257         DT_INT
	Unk_5490979         DT_INT
	DwPad               DT_UINT
	SzCameraMarker      DT_UINT
	Unk_8f65c3f         DT_INT
	EOrientationMode    DT_ENUM
	Unk_daebe18         DT_ENUM
	Unk_6101673         DT_UINT
	Unk_8470ffc         HardpointLink
	Unk_46c8459         DT_UINT
	VecTargetOffset     DT_VECTOR3D
	EMicrophoneMode     DT_ENUM
	VecMicrophoneOffset DT_VECTOR3D
	EBlendEasing        DT_ENUM
}

func (t *TriggerEventCameraMoveToCameraMarker) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.FGenerated, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_6cba752, r, &Options{Flags: 16}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.DwParentActorID, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.TDuration, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.DwTriggerFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.DwTriggerFlagsEx, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.TCleanup, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+116, &t.Unk_49e9257, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.Unk_5490979, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+124, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.SzCameraMarker, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+132, &t.Unk_8f65c3f, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+136, &t.EOrientationMode, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+140, &t.Unk_daebe18, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+144, &t.Unk_6101673, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+148, &t.Unk_8470ffc, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+156, &t.Unk_46c8459, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+160, &t.VecTargetOffset, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+172, &t.EMicrophoneMode, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+176, &t.VecMicrophoneOffset, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+188, &t.EBlendEasing, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+192, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TriggerEventCameraMoveToCameraMarker) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("TConditions", &t.TConditions)
	cb.Do("FGenerated", &t.FGenerated)
	cb.Do("Unk_6cba752", &t.Unk_6cba752)
	cb.Do("DwParentActorID", &t.DwParentActorID)
	cb.Do("TDuration", &t.TDuration)
	cb.Do("DwTriggerFlags", &t.DwTriggerFlags)
	cb.Do("DwTriggerFlagsEx", &t.DwTriggerFlagsEx)
	cb.Do("TCleanup", &t.TCleanup)
	cb.Do("Unk_49e9257", &t.Unk_49e9257)
	cb.Do("Unk_5490979", &t.Unk_5490979)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("SzCameraMarker", &t.SzCameraMarker)
	cb.Do("Unk_8f65c3f", &t.Unk_8f65c3f)
	cb.Do("EOrientationMode", &t.EOrientationMode)
	cb.Do("Unk_daebe18", &t.Unk_daebe18)
	cb.Do("Unk_6101673", &t.Unk_6101673)
	cb.Do("Unk_8470ffc", &t.Unk_8470ffc)
	cb.Do("Unk_46c8459", &t.Unk_46c8459)
	cb.Do("VecTargetOffset", &t.VecTargetOffset)
	cb.Do("EMicrophoneMode", &t.EMicrophoneMode)
	cb.Do("VecMicrophoneOffset", &t.VecMicrophoneOffset)
	cb.Do("EBlendEasing", &t.EBlendEasing)
}

type ScriptEventParamBase struct {
	// Inherits PolymorphicBase
	DwType     DT_UINT
	EParamType DT_ENUM
	DwPad      DT_UINT
}

func (t *ScriptEventParamBase) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.EParamType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ScriptEventParamBase) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("EParamType", &t.EParamType)
	cb.Do("DwPad", &t.DwPad)
}

type WorldStateUpdateMessage struct {
	THeader       RequiredMessageHeader
	SnoWorldState DT_SNO
	NValue        DT_INT
}

func (t *WorldStateUpdateMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoWorldState, r, &Options{
		Flags: 1,
		Group: 86,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.NValue, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *WorldStateUpdateMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("SnoWorldState", &t.SnoWorldState)
	cb.Do("NValue", &t.NValue)
}

type ScriptEventParamItem struct {
	// Inherits ScriptEventParamBase
	// Inherits PolymorphicBase
	DwType     DT_UINT
	EParamType DT_ENUM
	DwPad      DT_UINT
	SnoItem    DT_SNO
}

func (t *ScriptEventParamItem) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.EParamType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SnoItem, r, &Options{
		Flags: 513,
		Group: 73,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ScriptEventParamItem) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("EParamType", &t.EParamType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("SnoItem", &t.SnoItem)
}

type ScriptEventParamSelf struct {
	// Inherits ScriptEventParamBase
	// Inherits PolymorphicBase
	DwType     DT_UINT
	EParamType DT_ENUM
	DwPad      DT_UINT
	IdValue    DT_INT
}

func (t *ScriptEventParamSelf) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.EParamType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.IdValue, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ScriptEventParamSelf) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("EParamType", &t.EParamType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("IdValue", &t.IdValue)
}

type ScaleKey struct {
	NFrame DT_INT
	VScale DT_VECTOR3D
}

func (t *ScaleKey) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.NFrame, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.VScale, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ScaleKey) Walk(cb WalkCallback) {
	cb.Do("NFrame", &t.NFrame)
	cb.Do("VScale", &t.VScale)
}

type DungeonAffixDefinition struct {
	NWeight         DT_INT
	EAffixCategory  DT_ENUM
	BIsHiddenAffix  DT_INT
	GbidAffixFamily DT_GBID
	Unk_7f8b6b7     DT_VARIABLEARRAY[*DungeonAffixRange]
}

func (t *DungeonAffixDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.NWeight, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.EAffixCategory, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BIsHiddenAffix, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.GbidAffixFamily, r, &Options{
		Flags: 1,
		Group: 30,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_7f8b6b7, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+40, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *DungeonAffixDefinition) Walk(cb WalkCallback) {
	cb.Do("NWeight", &t.NWeight)
	cb.Do("EAffixCategory", &t.EAffixCategory)
	cb.Do("BIsHiddenAffix", &t.BIsHiddenAffix)
	cb.Do("GbidAffixFamily", &t.GbidAffixFamily)
	cb.Do("Unk_7f8b6b7", &t.Unk_7f8b6b7)
}

type UIWrapPanelStyle struct {
	// Inherits UIWindowStyle
	// Inherits UIControlStyle
	// Inherits PolymorphicBase
	DwType                    DT_UINT
	DwPad                     DT_UINT
	HParentStyle              UIControlHandle
	Unk_441f783               DT_INT64
	M_eHasModifiedPowerTagMap DT_TAGMAP[*DT_ENUM]
	TConsoleInput             UIControlConsoleInput
	Unk_b4f614c               DT_TAGMAP[*DT_ENUM]
	Unk_725129e               DT_TAGMAP[*DT_ENUM]
}

func (t *UIWrapPanelStyle) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.HParentStyle, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_441f783, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.M_eHasModifiedPowerTagMap, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.TConsoleInput, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.Unk_b4f614c, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.Unk_725129e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+96, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *UIWrapPanelStyle) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("HParentStyle", &t.HParentStyle)
	cb.Do("Unk_441f783", &t.Unk_441f783)
	cb.Do("M_eHasModifiedPowerTagMap", &t.M_eHasModifiedPowerTagMap)
	cb.Do("TConsoleInput", &t.TConsoleInput)
	cb.Do("Unk_b4f614c", &t.Unk_b4f614c)
	cb.Do("Unk_725129e", &t.Unk_725129e)
}

type DynamicMovementData_Table struct {
	// Inherits GameBalanceTable
	// Inherits PolymorphicBase
	DwType   DT_UINT
	DwPad    DT_UINT
	TEntries DT_VARIABLEARRAY[*DynamicMovementData]
}

func (t *DynamicMovementData_Table) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TEntries, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *DynamicMovementData_Table) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("TEntries", &t.TEntries)
}

type InventoryRequestUseMessage struct {
	THeader      RequiredMessageHeader
	AnnItemToUse DT_ACD_NETWORK_NAME
	SnoItem      DT_SNO
	EType        DT_ENUM
	AnnTarget    DT_ACD_NETWORK_NAME
	TPlace       SharedServerWorldPlace
}

func (t *InventoryRequestUseMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.AnnItemToUse, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SnoItem, r, &Options{
		Flags: 1,
		Group: 73,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.EType, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.AnnTarget, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.TPlace, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+60, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *InventoryRequestUseMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("AnnItemToUse", &t.AnnItemToUse)
	cb.Do("SnoItem", &t.SnoItem)
	cb.Do("EType", &t.EType)
	cb.Do("AnnTarget", &t.AnnTarget)
	cb.Do("TPlace", &t.TPlace)
}

type ParagonEquipBoardMessage struct {
	THeader         RequiredMessageHeader
	SnoBoard        DT_SNO
	ERotation       DT_ENUM
	DwGateNodeIndex DT_UINT
}

func (t *ParagonEquipBoardMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoBoard, r, &Options{
		Flags: 1,
		Group: 108,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.ERotation, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.DwGateNodeIndex, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+28, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ParagonEquipBoardMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("SnoBoard", &t.SnoBoard)
	cb.Do("ERotation", &t.ERotation)
	cb.Do("DwGateNodeIndex", &t.DwGateNodeIndex)
}

type VibrationDefinition struct {
	DwFlags         DT_UINT
	TSystemDuration DT_FLOAT
	TOutroDuration  DT_FLOAT
	WdMinRange      DT_FLOAT
	WdMaxRange      DT_FLOAT
	FlPriority      DT_FLOAT
	Unk_b7a52c1     DT_INT
	Unk_d131223     Type_cbfdd2ea
	Unk_7bb3b91     Type_cbfdd2ea
}

func (t *VibrationDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.TSystemDuration, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TOutroDuration, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.WdMinRange, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.WdMaxRange, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.FlPriority, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.Unk_b7a52c1, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.Unk_d131223, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.Unk_7bb3b91, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+152, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *VibrationDefinition) Walk(cb WalkCallback) {
	cb.Do("DwFlags", &t.DwFlags)
	cb.Do("TSystemDuration", &t.TSystemDuration)
	cb.Do("TOutroDuration", &t.TOutroDuration)
	cb.Do("WdMinRange", &t.WdMinRange)
	cb.Do("WdMaxRange", &t.WdMaxRange)
	cb.Do("FlPriority", &t.FlPriority)
	cb.Do("Unk_b7a52c1", &t.Unk_b7a52c1)
	cb.Do("Unk_d131223", &t.Unk_d131223)
	cb.Do("Unk_7bb3b91", &t.Unk_7bb3b91)
}

type ConnectionEstablishedMessage struct {
	THeader          RequiredMessageHeader
	DwGameAccountId  DT_UINT
	DwAnimSyncedSeed DT_UINT
	TTrace           TraceMessage
}

func (t *ConnectionEstablishedMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.DwGameAccountId, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwAnimSyncedSeed, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.TTrace, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+104, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ConnectionEstablishedMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("DwGameAccountId", &t.DwGameAccountId)
	cb.Do("DwAnimSyncedSeed", &t.DwAnimSyncedSeed)
	cb.Do("TTrace", &t.TTrace)
}

type EffectGroupTrack struct {
	// Inherits PolymorphicBase
	DwType DT_UINT
	DwPad  DT_UINT
}

func (t *EffectGroupTrack) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *EffectGroupTrack) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
}

type SceneSubzoneMarkerSetPreloadHelper struct {
	SnoScene           DT_SNO
	TSubzoneMarkerSets SerialDataInfo
}

func (t *SceneSubzoneMarkerSetPreloadHelper) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoScene, r, &Options{
		Flags: 1,
		Group: 33,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.TSubzoneMarkerSets, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+12, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *SceneSubzoneMarkerSetPreloadHelper) Walk(cb WalkCallback) {
	cb.Do("SnoScene", &t.SnoScene)
	cb.Do("TSubzoneMarkerSets", &t.TSubzoneMarkerSets)
}

type Type_49d4b843 struct {
	THeader   RequiredMessageHeader
	SnoAffix  DT_SNO
	BIsAdding DT_INT
}

func (t *Type_49d4b843) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoAffix, r, &Options{
		Flags: 1,
		Group: 104,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.BIsAdding, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_49d4b843) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("SnoAffix", &t.SnoAffix)
	cb.Do("BIsAdding", &t.BIsAdding)
}

type Type_4a3c7431 struct {
	FlMax DT_FLOAT
	FlMin DT_FLOAT
}

func (t *Type_4a3c7431) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.FlMax, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.FlMin, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_4a3c7431) Walk(cb WalkCallback) {
	cb.Do("FlMax", &t.FlMax)
	cb.Do("FlMin", &t.FlMin)
}

type ActorPropData struct {
	FIsCorpse        DT_INT
	FIsTraversalExit DT_INT
	ECrafterType     DT_ENUM
	FIsTraversalRope DT_INT
	Unk_49ab5de      DT_FLOAT
}

func (t *ActorPropData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.FIsCorpse, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.FIsTraversalExit, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.ECrafterType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.FIsTraversalRope, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_49ab5de, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+20, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ActorPropData) Walk(cb WalkCallback) {
	cb.Do("FIsCorpse", &t.FIsCorpse)
	cb.Do("FIsTraversalExit", &t.FIsTraversalExit)
	cb.Do("ECrafterType", &t.ECrafterType)
	cb.Do("FIsTraversalRope", &t.FIsTraversalRope)
	cb.Do("Unk_49ab5de", &t.Unk_49ab5de)
}

type OnGetHitBuffCallback struct {
	// Inherits BuffCallbackBase
	// Inherits PolymorphicBase
	DwType                DT_UINT
	DwPad                 DT_UINT
	SnoTriggerEffectGroup DT_SNO
	ArConditions          DT_POLYMORPHIC_VARIABLEARRAY[*DT_INT64]
	Unk_99e97f7           DT_INT
}

func (t *OnGetHitBuffCallback) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoTriggerEffectGroup, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ArConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.Unk_99e97f7, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+56, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *OnGetHitBuffCallback) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("SnoTriggerEffectGroup", &t.SnoTriggerEffectGroup)
	cb.Do("ArConditions", &t.ArConditions)
	cb.Do("Unk_99e97f7", &t.Unk_99e97f7)
}

type HeightFieldWaveSettings struct {
	Unk_f4522ab      DT_FLOAT
	Unk_d494c2d      DT_FLOAT
	FlAmplitudeRatio DT_FLOAT
	Unk_12070ce      DT_FLOAT
}

func (t *HeightFieldWaveSettings) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Unk_f4522ab, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.Unk_d494c2d, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.FlAmplitudeRatio, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.Unk_12070ce, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *HeightFieldWaveSettings) Walk(cb WalkCallback) {
	cb.Do("Unk_f4522ab", &t.Unk_f4522ab)
	cb.Do("Unk_d494c2d", &t.Unk_d494c2d)
	cb.Do("FlAmplitudeRatio", &t.FlAmplitudeRatio)
	cb.Do("Unk_12070ce", &t.Unk_12070ce)
}

type DemonScrollDefinition struct {
	ArRewards DT_FIXEDARRAY[*DemonScrollReward]
}

func (t *DemonScrollDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.ArRewards, r, &Options{
		ArrayLength: 5,
		Flags:       1,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+548, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *DemonScrollDefinition) Walk(cb WalkCallback) {
	cb.Do("ArRewards", &t.ArRewards)
}

type ScaleCurve struct {
	PtKeysComp DT_VARIABLEARRAY[*DT_BYTE]
}

func (t *ScaleCurve) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.PtKeysComp, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ScaleCurve) Walk(cb WalkCallback) {
	cb.Do("PtKeysComp", &t.PtKeysComp)
}

type AIStateDebugTestPowerMessage struct {
	THeader       RequiredMessageHeader
	AnnActor      DT_ACD_NETWORK_NAME
	SnoPower      DT_SNO
	DwCooldownKey DT_INT64
}

func (t *AIStateDebugTestPowerMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.AnnActor, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SnoPower, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.DwCooldownKey, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+40, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *AIStateDebugTestPowerMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("AnnActor", &t.AnnActor)
	cb.Do("SnoPower", &t.SnoPower)
	cb.Do("DwCooldownKey", &t.DwCooldownKey)
}

type LookVariantMaterialMap struct {
	DwLookVariant                  DT_UINT
	ArLookVariantMaterialOverrides DT_VARIABLEARRAY[*LookVariantMaterialOverride]
}

func (t *LookVariantMaterialMap) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.DwLookVariant, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.ArLookVariantMaterialOverrides, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *LookVariantMaterialMap) Walk(cb WalkCallback) {
	cb.Do("DwLookVariant", &t.DwLookVariant)
	cb.Do("ArLookVariantMaterialOverrides", &t.ArLookVariantMaterialOverrides)
}

type TryUnlockRecipeTierMessage struct {
	THeader      RequiredMessageHeader
	ECrafterType DT_ENUM
}

func (t *TryUnlockRecipeTierMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.ECrafterType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+20, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TryUnlockRecipeTierMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("ECrafterType", &t.ECrafterType)
}

type PlayerIntValMessage struct {
	THeader               RequiredMessageHeader
	DwPlayerGameAccountId DT_UINT
	NVal                  DT_INT
}

func (t *PlayerIntValMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.DwPlayerGameAccountId, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.NVal, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PlayerIntValMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("DwPlayerGameAccountId", &t.DwPlayerGameAccountId)
	cb.Do("NVal", &t.NVal)
}

type GroundNormalTests struct {
	BEnabled      DT_INT
	PtGroundTests DT_VARIABLEARRAY[*GroundTestPosition]
}

func (t *GroundNormalTests) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.BEnabled, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.PtGroundTests, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *GroundNormalTests) Walk(cb WalkCallback) {
	cb.Do("BEnabled", &t.BEnabled)
	cb.Do("PtGroundTests", &t.PtGroundTests)
}

type Type_4b8dbccd struct {
	FlNoSpawnRadius DT_FLOAT
}

func (t *Type_4b8dbccd) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.FlNoSpawnRadius, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+4, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_4b8dbccd) Walk(cb WalkCallback) {
	cb.Do("FlNoSpawnRadius", &t.FlNoSpawnRadius)
}

type MarkerHeightFieldTexture struct {
	NWidth     DT_INT
	NHeight    DT_INT
	EFormat    DT_ENUM
	ArTexels   DT_VARIABLEARRAY[*DT_BYTE]
	SnoTexture DT_SNO
}

func (t *MarkerHeightFieldTexture) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.NWidth, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.NHeight, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.EFormat, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.ArTexels, r, &Options{Flags: 2097153}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.SnoTexture, r, &Options{Group: 44}); err != nil {
		return err
	}
	if _, err := r.Seek(p+40, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *MarkerHeightFieldTexture) Walk(cb WalkCallback) {
	cb.Do("NWidth", &t.NWidth)
	cb.Do("NHeight", &t.NHeight)
	cb.Do("EFormat", &t.EFormat)
	cb.Do("ArTexels", &t.ArTexels)
	cb.Do("SnoTexture", &t.SnoTexture)
}

type StringWrapper struct {
	SzValue DT_CSTRING[*DT_BYTE]
}

func (t *StringWrapper) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SzValue, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *StringWrapper) Walk(cb WalkCallback) {
	cb.Do("SzValue", &t.SzValue)
}

type Type_4bd0bef6 struct {
	EHairState    DT_ENUM
	EBeardState   DT_ENUM
	EJewelryState DT_ENUM
	Unk_72fdc3e   DT_ENUM
	Unk_6d5ee89   DT_ENUM
	Unk_ae7b673   DT_ENUM
}

func (t *Type_4bd0bef6) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.EHairState, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.EBeardState, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.EJewelryState, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.Unk_72fdc3e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_6d5ee89, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.Unk_ae7b673, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_4bd0bef6) Walk(cb WalkCallback) {
	cb.Do("EHairState", &t.EHairState)
	cb.Do("EBeardState", &t.EBeardState)
	cb.Do("EJewelryState", &t.EJewelryState)
	cb.Do("Unk_72fdc3e", &t.Unk_72fdc3e)
	cb.Do("Unk_6d5ee89", &t.Unk_6d5ee89)
	cb.Do("Unk_ae7b673", &t.Unk_ae7b673)
}

type StoryboardPlaySoundTrack struct {
	// Inherits StoryboardGenericTrack
	// Inherits StoryboardTrack
	// Inherits PolymorphicBase
	DwType      DT_UINT
	DwPad       DT_UINT
	Unk_9b2bc26 Type_642fc25a
}

func (t *StoryboardPlaySoundTrack) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_9b2bc26, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *StoryboardPlaySoundTrack) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("Unk_9b2bc26", &t.Unk_9b2bc26)
}

type DebugDataHeaderMessage struct {
	THeader     RequiredMessageHeader
	NType       DT_INT
	ArParams    DT_FIXEDARRAY[*DT_INT]
	NDataBlocks DT_INT
}

func (t *DebugDataHeaderMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.NType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.ArParams, r, &Options{
		ArrayLength: 2,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.NDataBlocks, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *DebugDataHeaderMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("NType", &t.NType)
	cb.Do("ArParams", &t.ArParams)
	cb.Do("NDataBlocks", &t.NDataBlocks)
}

type UInt64DataMessage struct {
	THeader RequiredMessageHeader
	UData   DT_INT64
}

func (t *UInt64DataMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.UData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *UInt64DataMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("UData", &t.UData)
}

type RareMonsterNamesMessage struct {
	THeader           RequiredMessageHeader
	Ann               DT_ACD_NETWORK_NAME
	PgbidRareNames    DT_FIXEDARRAY[*DT_GBID]
	SnoMonsterAffixes DT_FIXEDARRAY[*DT_SNO]
}

func (t *RareMonsterNamesMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Ann, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.PgbidRareNames, r, &Options{
		ArrayLength: 2,
		Flags:       1,
		Group:       7,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.SnoMonsterAffixes, r, &Options{
		ArrayLength: 4,
		Flags:       1,
		Group:       107,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *RareMonsterNamesMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("Ann", &t.Ann)
	cb.Do("PgbidRareNames", &t.PgbidRareNames)
	cb.Do("SnoMonsterAffixes", &t.SnoMonsterAffixes)
}

type QuestTrackedQuestChangedMessage struct {
	THeader               RequiredMessageHeader
	DwPlayerGameAccountId DT_UINT
	SnoQuest              DT_SNO
	BManuallyTracked      DT_INT
}

func (t *QuestTrackedQuestChangedMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.DwPlayerGameAccountId, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.SnoQuest, r, &Options{
		Flags: 1,
		Group: 31,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.BManuallyTracked, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+28, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *QuestTrackedQuestChangedMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("DwPlayerGameAccountId", &t.DwPlayerGameAccountId)
	cb.Do("SnoQuest", &t.SnoQuest)
	cb.Do("BManuallyTracked", &t.BManuallyTracked)
}

type PVPMonsterMessage struct {
	THeader        RequiredMessageHeader
	AnnMonsterName DT_ACD_NETWORK_NAME
	SnoMonster     DT_SNO
	WpLocation     DT_VECTOR3D
	BRemove        DT_INT
}

func (t *PVPMonsterMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.AnnMonsterName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SnoMonster, r, &Options{
		Flags: 1,
		Group: 1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.WpLocation, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.BRemove, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+44, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PVPMonsterMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("AnnMonsterName", &t.AnnMonsterName)
	cb.Do("SnoMonster", &t.SnoMonster)
	cb.Do("WpLocation", &t.WpLocation)
	cb.Do("BRemove", &t.BRemove)
}

type ScriptEventParamActor struct {
	// Inherits ScriptEventParamBase
	// Inherits PolymorphicBase
	DwType     DT_UINT
	EParamType DT_ENUM
	DwPad      DT_UINT
	SnoActor   DT_SNO
}

func (t *ScriptEventParamActor) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.EParamType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SnoActor, r, &Options{
		Flags: 513,
		Group: 1,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ScriptEventParamActor) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("EParamType", &t.EParamType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("SnoActor", &t.SnoActor)
}

type TriggerEventDisableConstraint struct {
	// Inherits TriggerEvent
	// Inherits PolymorphicBase
	DwType          DT_UINT
	DwPad           DT_UINT
	TConditions     TriggerConditions
	FGenerated      DT_INT
	Unk_6cba752     DT_INT
	DwParentActorID DT_UINT
	TConstraintLink ConstraintLink
	THardpointLink  HardpointLink
}

func (t *TriggerEventDisableConstraint) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.FGenerated, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_6cba752, r, &Options{Flags: 16}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.DwParentActorID, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.TConstraintLink, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.THardpointLink, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+96, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TriggerEventDisableConstraint) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("TConditions", &t.TConditions)
	cb.Do("FGenerated", &t.FGenerated)
	cb.Do("Unk_6cba752", &t.Unk_6cba752)
	cb.Do("DwParentActorID", &t.DwParentActorID)
	cb.Do("TConstraintLink", &t.TConstraintLink)
	cb.Do("THardpointLink", &t.THardpointLink)
}

type Triangle2D struct {
	Wp0 DT_VECTOR2D
	Wp1 DT_VECTOR2D
	Wp2 DT_VECTOR2D
}

func (t *Triangle2D) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Wp0, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.Wp1, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Wp2, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Triangle2D) Walk(cb WalkCallback) {
	cb.Do("Wp0", &t.Wp0)
	cb.Do("Wp1", &t.Wp1)
	cb.Do("Wp2", &t.Wp2)
}

type Triangle3D struct {
	Wp0 DT_VECTOR3D
	Wp1 DT_VECTOR3D
	Wp2 DT_VECTOR3D
}

func (t *Triangle3D) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Wp0, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.Wp1, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Wp2, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+36, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Triangle3D) Walk(cb WalkCallback) {
	cb.Do("Wp0", &t.Wp0)
	cb.Do("Wp1", &t.Wp1)
	cb.Do("Wp2", &t.Wp2)
}

type PowerConditionSkillRankCompare struct {
	// Inherits PowerConditionBase
	// Inherits PolymorphicBase
	DwType   DT_UINT
	BInverse DT_INT
	DwPad    DT_UINT
	ECompare DT_ENUM
	NValue   DT_INT
}

func (t *PowerConditionSkillRankCompare) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BInverse, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ECompare, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.NValue, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PowerConditionSkillRankCompare) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("BInverse", &t.BInverse)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("ECompare", &t.ECompare)
	cb.Do("NValue", &t.NValue)
}

type ScriptEventParamDWORD struct {
	// Inherits ScriptEventParamBase
	// Inherits PolymorphicBase
	DwType     DT_UINT
	EParamType DT_ENUM
	DwPad      DT_UINT
	DwValue    DT_UINT
}

func (t *ScriptEventParamDWORD) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.EParamType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.DwValue, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ScriptEventParamDWORD) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("EParamType", &t.EParamType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("DwValue", &t.DwValue)
}

type ScriptEventParamFloat struct {
	// Inherits ScriptEventParamBase
	// Inherits PolymorphicBase
	DwType     DT_UINT
	EParamType DT_ENUM
	DwPad      DT_UINT
	FlValue    DT_FLOAT
}

func (t *ScriptEventParamFloat) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.EParamType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.FlValue, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ScriptEventParamFloat) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("EParamType", &t.EParamType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("FlValue", &t.FlValue)
}

type ScriptEventParamAllowAny struct {
	// Inherits ScriptEventParamBase
	// Inherits PolymorphicBase
	DwType     DT_UINT
	EParamType DT_ENUM
	DwPad      DT_UINT
}

func (t *ScriptEventParamAllowAny) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.EParamType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ScriptEventParamAllowAny) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("EParamType", &t.EParamType)
	cb.Do("DwPad", &t.DwPad)
}

type RunTimeMaterialValues struct {
	ArMaterialScalarValues DT_VARIABLEARRAY[*RunTimeMaterialScalarValueEntry]
	ArMaterialScalarGraphs DT_VARIABLEARRAY[*RunTimeMaterialScalarGraphEntry]
	ArMaterialVectorValues DT_VARIABLEARRAY[*RunTimeMaterialVectorValueEntry]
	ArMaterialVectorGraphs DT_VARIABLEARRAY[*RunTimeMaterialVectorGraphEntry]
}

func (t *RunTimeMaterialValues) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.ArMaterialScalarValues, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.ArMaterialScalarGraphs, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.ArMaterialVectorValues, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.ArMaterialVectorGraphs, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+64, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *RunTimeMaterialValues) Walk(cb WalkCallback) {
	cb.Do("ArMaterialScalarValues", &t.ArMaterialScalarValues)
	cb.Do("ArMaterialScalarGraphs", &t.ArMaterialScalarGraphs)
	cb.Do("ArMaterialVectorValues", &t.ArMaterialVectorValues)
	cb.Do("ArMaterialVectorGraphs", &t.ArMaterialVectorGraphs)
}

type ScriptEventParamPower struct {
	// Inherits ScriptEventParamBase
	// Inherits PolymorphicBase
	DwType     DT_UINT
	EParamType DT_ENUM
	DwPad      DT_UINT
	SnoPower   DT_SNO
}

func (t *ScriptEventParamPower) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.EParamType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SnoPower, r, &Options{
		Flags: 513,
		Group: 29,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ScriptEventParamPower) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("EParamType", &t.EParamType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("SnoPower", &t.SnoPower)
}

type Type_4dd6cf41 struct {
	// Inherits GameBalanceTable
	// Inherits PolymorphicBase
	DwType   DT_UINT
	DwPad    DT_UINT
	TEntries DT_VARIABLEARRAY[*Type_98c7edba]
}

func (t *Type_4dd6cf41) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TEntries, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_4dd6cf41) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("TEntries", &t.TEntries)
}

type ScriptEventParamQuest struct {
	// Inherits ScriptEventParamBase
	// Inherits PolymorphicBase
	DwType     DT_UINT
	EParamType DT_ENUM
	DwPad      DT_UINT
	SnoQuest   DT_SNO
}

func (t *ScriptEventParamQuest) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.EParamType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SnoQuest, r, &Options{
		Flags: 513,
		Group: 31,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ScriptEventParamQuest) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("EParamType", &t.EParamType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("SnoQuest", &t.SnoQuest)
}

type TraversalInstanceData struct {
	ETraversalType  DT_ENUM
	Unk_df09d6a     DT_INT
	SnoCameraEffect DT_SNO
}

func (t *TraversalInstanceData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.ETraversalType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.Unk_df09d6a, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.SnoCameraEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+12, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TraversalInstanceData) Walk(cb WalkCallback) {
	cb.Do("ETraversalType", &t.ETraversalType)
	cb.Do("Unk_df09d6a", &t.Unk_df09d6a)
	cb.Do("SnoCameraEffect", &t.SnoCameraEffect)
}

type VersionsMessage struct {
	THeader       RequiredMessageHeader
	UProtocolHash DT_UINT
	SzBuildVer    DT_CHARARRAY
	UServiceHash  DT_INT64
}

func (t *VersionsMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.UProtocolHash, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.SzBuildVer, r, &Options{
		ArrayLength: 32,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.UServiceHash, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+64, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *VersionsMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("UProtocolHash", &t.UProtocolHash)
	cb.Do("SzBuildVer", &t.SzBuildVer)
	cb.Do("UServiceHash", &t.UServiceHash)
}

type ScriptEventParamScene struct {
	// Inherits ScriptEventParamBase
	// Inherits PolymorphicBase
	DwType     DT_UINT
	EParamType DT_ENUM
	DwPad      DT_UINT
	SnoScene   DT_SNO
}

func (t *ScriptEventParamScene) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.EParamType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SnoScene, r, &Options{
		Flags: 513,
		Group: 33,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ScriptEventParamScene) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("EParamType", &t.EParamType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("SnoScene", &t.SnoScene)
}

type SpawnLocType struct {
	THeader   GBIDHeader
	ECategory DT_ENUM
}

func (t *SpawnLocType) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+260, &t.ECategory, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+264, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *SpawnLocType) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("ECategory", &t.ECategory)
}

type TriggerEventCancelLook struct {
	// Inherits TriggerEvent
	// Inherits PolymorphicBase
	DwType          DT_UINT
	DwPad           DT_UINT
	TConditions     TriggerConditions
	FGenerated      DT_INT
	Unk_6cba752     DT_INT
	DwParentActorID DT_UINT
	DwActorID       DT_UINT
	SnoAppearance   DT_SNO
	TLookLink       LookLink
	Unk_279aa5a     DT_INT
}

func (t *TriggerEventCancelLook) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.FGenerated, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_6cba752, r, &Options{Flags: 16}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.DwParentActorID, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.DwActorID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.SnoAppearance, r, &Options{
		Flags: 513,
		Group: 9,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.TLookLink, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.Unk_279aa5a, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+96, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TriggerEventCancelLook) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("TConditions", &t.TConditions)
	cb.Do("FGenerated", &t.FGenerated)
	cb.Do("Unk_6cba752", &t.Unk_6cba752)
	cb.Do("DwParentActorID", &t.DwParentActorID)
	cb.Do("DwActorID", &t.DwActorID)
	cb.Do("SnoAppearance", &t.SnoAppearance)
	cb.Do("TLookLink", &t.TLookLink)
	cb.Do("Unk_279aa5a", &t.Unk_279aa5a)
}

type Type_4e43aa7a struct {
	DwType      DT_UINT
	Unk_9b2bc26 Type_80fa280c
	Unk_77ed19a DT_ENUM
	DwPad       DT_UINT
}

func (t *Type_4e43aa7a) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_9b2bc26, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.Unk_77ed19a, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+56, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_4e43aa7a) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("Unk_9b2bc26", &t.Unk_9b2bc26)
	cb.Do("Unk_77ed19a", &t.Unk_77ed19a)
	cb.Do("DwPad", &t.DwPad)
}

type ScriptEventParamWorld struct {
	// Inherits ScriptEventParamBase
	// Inherits PolymorphicBase
	DwType     DT_UINT
	EParamType DT_ENUM
	DwPad      DT_UINT
	SnoWorld   DT_SNO
}

func (t *ScriptEventParamWorld) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.EParamType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SnoWorld, r, &Options{
		Flags: 513,
		Group: 48,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ScriptEventParamWorld) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("EParamType", &t.EParamType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("SnoWorld", &t.SnoWorld)
}

type MarkerHeightFieldTextureInfo struct {
	NTextureIndex DT_INT
	NXOffset      DT_INT
	NWidth        DT_INT
}

func (t *MarkerHeightFieldTextureInfo) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.NTextureIndex, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.NXOffset, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.NWidth, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+12, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *MarkerHeightFieldTextureInfo) Walk(cb WalkCallback) {
	cb.Do("NTextureIndex", &t.NTextureIndex)
	cb.Do("NXOffset", &t.NXOffset)
	cb.Do("NWidth", &t.NWidth)
}

type GameBalanceDefinition struct {
	EGameBalanceType DT_ENUM
	BIgnoreOnLoad    DT_INT
	PtData           DT_POLYMORPHIC_VARIABLEARRAY[*GameBalanceTable]
	PtPostprocessed  DT_INT64
}

func (t *GameBalanceDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.EGameBalanceType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.BIgnoreOnLoad, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.PtData, r, &Options{Flags: 262145}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.PtPostprocessed, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *GameBalanceDefinition) Walk(cb WalkCallback) {
	cb.Do("EGameBalanceType", &t.EGameBalanceType)
	cb.Do("BIgnoreOnLoad", &t.BIgnoreOnLoad)
	cb.Do("PtData", &t.PtData)
	cb.Do("PtPostprocessed", &t.PtPostprocessed)
}

type StartingAllowedWeather struct {
	SnoSubzone  DT_SNO
	Unk_efcdea5 DT_ENUM
}

func (t *StartingAllowedWeather) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoSubzone, r, &Options{
		Flags: 1,
		Group: 80,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.Unk_efcdea5, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *StartingAllowedWeather) Walk(cb WalkCallback) {
	cb.Do("SnoSubzone", &t.SnoSubzone)
	cb.Do("Unk_efcdea5", &t.Unk_efcdea5)
}

type BlockingActorLoadMessage struct {
	THeader     RequiredMessageHeader
	Ann         DT_ACD_NETWORK_NAME
	SnoActor    DT_SNO
	Unk_73c20e  DT_SNO_NAME
	Unk_b51bb90 DT_ENUM
}

func (t *BlockingActorLoadMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Ann, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SnoActor, r, &Options{
		Flags: 1,
		Group: 1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.Unk_73c20e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.Unk_b51bb90, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+40, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *BlockingActorLoadMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("Ann", &t.Ann)
	cb.Do("SnoActor", &t.SnoActor)
	cb.Do("Unk_73c20e", &t.Unk_73c20e)
	cb.Do("Unk_b51bb90", &t.Unk_b51bb90)
}

type RareMonsterNamesEntry struct {
	THeader              GBIDHeader
	FPrefix              DT_INT
	SnoAffixEffect       DT_SNO
	ArFamilyRestrictions DT_VARIABLEARRAY[*DT_SNO]
	Unk_47bc829          DT_ENUM
	SnoCondition         DT_SNO
	Unk_340ed93          DT_INT
}

func (t *RareMonsterNamesEntry) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+260, &t.FPrefix, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+264, &t.SnoAffixEffect, r, &Options{
		Flags: 1,
		Group: 107,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+272, &t.ArFamilyRestrictions, r, &Options{
		Flags: 1,
		Group: 82,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+288, &t.Unk_47bc829, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+292, &t.SnoCondition, r, &Options{
		Flags: 1,
		Group: 51,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+296, &t.Unk_340ed93, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+304, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *RareMonsterNamesEntry) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("FPrefix", &t.FPrefix)
	cb.Do("SnoAffixEffect", &t.SnoAffixEffect)
	cb.Do("ArFamilyRestrictions", &t.ArFamilyRestrictions)
	cb.Do("Unk_47bc829", &t.Unk_47bc829)
	cb.Do("SnoCondition", &t.SnoCondition)
	cb.Do("Unk_340ed93", &t.Unk_340ed93)
}

type WorldStateUpdateData struct {
	SnoWorldState DT_SNO
	NValue        DT_INT
}

func (t *WorldStateUpdateData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoWorldState, r, &Options{
		Flags: 1,
		Group: 86,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.NValue, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *WorldStateUpdateData) Walk(cb WalkCallback) {
	cb.Do("SnoWorldState", &t.SnoWorldState)
	cb.Do("NValue", &t.NValue)
}

type TriggerEventFootstep struct {
	// Inherits TriggerEvent
	// Inherits PolymorphicBase
	DwType                DT_UINT
	DwPad                 DT_UINT
	TConditions           TriggerConditions
	FGenerated            DT_INT
	Unk_6cba752           DT_INT
	DwParentActorID       DT_UINT
	THardpointLink        HardpointLink
	EFootstepType         DT_ENUM
	EFootstepSide         DT_ENUM
	SnoFootstepSoundTable DT_SNO
	SnoFootstepSurface    DT_SNO
}

func (t *TriggerEventFootstep) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.FGenerated, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_6cba752, r, &Options{Flags: 16}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.DwParentActorID, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.THardpointLink, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.EFootstepType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.EFootstepSide, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.SnoFootstepSoundTable, r, &Options{
		Flags: 513,
		Group: 79,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+100, &t.SnoFootstepSurface, r, &Options{
		Flags: 513,
		Group: 43,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+104, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TriggerEventFootstep) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("TConditions", &t.TConditions)
	cb.Do("FGenerated", &t.FGenerated)
	cb.Do("Unk_6cba752", &t.Unk_6cba752)
	cb.Do("DwParentActorID", &t.DwParentActorID)
	cb.Do("THardpointLink", &t.THardpointLink)
	cb.Do("EFootstepType", &t.EFootstepType)
	cb.Do("EFootstepSide", &t.EFootstepSide)
	cb.Do("SnoFootstepSoundTable", &t.SnoFootstepSoundTable)
	cb.Do("SnoFootstepSurface", &t.SnoFootstepSurface)
}

type WwiseAudioBus struct {
	TName   WwiseName
	TParent WwiseName
}

func (t *WwiseAudioBus) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.TName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.TParent, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *WwiseAudioBus) Walk(cb WalkCallback) {
	cb.Do("TName", &t.TName)
	cb.Do("TParent", &t.TParent)
}

type ActorGroupSubcondition struct {
	// Inherits Subcondition
	// Inherits PolymorphicBase
	DwType         DT_UINT
	BNegate        DT_INT
	DwPad          DT_UINT
	GbidActorGroup DT_GBID
	Unk_c7b2b18    DT_ENUM
}

func (t *ActorGroupSubcondition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BNegate, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.GbidActorGroup, r, &Options{
		Flags: 1,
		Group: 24,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.Unk_c7b2b18, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ActorGroupSubcondition) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("BNegate", &t.BNegate)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("GbidActorGroup", &t.GbidActorGroup)
	cb.Do("Unk_c7b2b18", &t.Unk_c7b2b18)
}

type OnOtherBuffAddedCallback struct {
	// Inherits BuffCallbackBase
	// Inherits PolymorphicBase
	DwType                DT_UINT
	DwPad                 DT_UINT
	SnoTriggerEffectGroup DT_SNO
	ArConditions          DT_POLYMORPHIC_VARIABLEARRAY[*DT_INT64]
	Unk_880879b           DT_VARIABLEARRAY[*Type_82280ff3]
}

func (t *OnOtherBuffAddedCallback) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoTriggerEffectGroup, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ArConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.Unk_880879b, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+64, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *OnOtherBuffAddedCallback) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("SnoTriggerEffectGroup", &t.SnoTriggerEffectGroup)
	cb.Do("ArConditions", &t.ArConditions)
	cb.Do("Unk_880879b", &t.Unk_880879b)
}

type TriggerEventCameraTransitionToObserver struct {
	// Inherits TriggerEventRangedDuration
	// Inherits TriggerEvent
	// Inherits PolymorphicBase
	DwType               DT_UINT
	TConditions          TriggerConditions
	FGenerated           DT_INT
	Unk_6cba752          DT_INT
	DwParentActorID      DT_UINT
	TDuration            DT_FLOAT
	DwTriggerFlags       DT_UINT
	DwTriggerFlagsEx     DT_UINT
	TCleanup             TriggerCleanup
	Unk_49e9257          DT_INT
	Unk_5490979          DT_INT
	DwPad                DT_UINT
	SnoObserver          DT_SNO
	Unk_74b7ed1          DT_INT
	ETargetType          DT_ENUM
	SzTargetLocatorName  DT_UINT
	THardpointLinkTarget HardpointLink
	DwTargetID           DT_UINT
	ArAdditionalTargets  DT_VARIABLEARRAY[*Type_5eb6ade]
	EBlendEasing         DT_ENUM
	FlRadiusConstraint   DT_FLOAT
}

func (t *TriggerEventCameraTransitionToObserver) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.FGenerated, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_6cba752, r, &Options{Flags: 16}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.DwParentActorID, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.TDuration, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.DwTriggerFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.DwTriggerFlagsEx, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.TCleanup, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+116, &t.Unk_49e9257, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.Unk_5490979, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+124, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.SnoObserver, r, &Options{
		Flags: 1,
		Group: 26,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+132, &t.Unk_74b7ed1, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+136, &t.ETargetType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+140, &t.SzTargetLocatorName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+144, &t.THardpointLinkTarget, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+152, &t.DwTargetID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+160, &t.ArAdditionalTargets, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+176, &t.EBlendEasing, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+180, &t.FlRadiusConstraint, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+184, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TriggerEventCameraTransitionToObserver) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("TConditions", &t.TConditions)
	cb.Do("FGenerated", &t.FGenerated)
	cb.Do("Unk_6cba752", &t.Unk_6cba752)
	cb.Do("DwParentActorID", &t.DwParentActorID)
	cb.Do("TDuration", &t.TDuration)
	cb.Do("DwTriggerFlags", &t.DwTriggerFlags)
	cb.Do("DwTriggerFlagsEx", &t.DwTriggerFlagsEx)
	cb.Do("TCleanup", &t.TCleanup)
	cb.Do("Unk_49e9257", &t.Unk_49e9257)
	cb.Do("Unk_5490979", &t.Unk_5490979)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("SnoObserver", &t.SnoObserver)
	cb.Do("Unk_74b7ed1", &t.Unk_74b7ed1)
	cb.Do("ETargetType", &t.ETargetType)
	cb.Do("SzTargetLocatorName", &t.SzTargetLocatorName)
	cb.Do("THardpointLinkTarget", &t.THardpointLinkTarget)
	cb.Do("DwTargetID", &t.DwTargetID)
	cb.Do("ArAdditionalTargets", &t.ArAdditionalTargets)
	cb.Do("EBlendEasing", &t.EBlendEasing)
	cb.Do("FlRadiusConstraint", &t.FlRadiusConstraint)
}

type HirelingSwapMessage struct {
	THeader   RequiredMessageHeader
	ENewClass DT_ENUM
}

func (t *HirelingSwapMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.ENewClass, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+20, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *HirelingSwapMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("ENewClass", &t.ENewClass)
}

type ActivityMetadata struct{}

func (t *ActivityMetadata) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if _, err := r.Seek(p+1, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ActivityMetadata) Walk(cb WalkCallback) {}

type Material struct {
	NSortPri DT_INT
}

func (t *Material) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.NSortPri, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+4, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Material) Walk(cb WalkCallback) {
	cb.Do("NSortPri", &t.NSortPri)
}

type Type_50b285a4 struct {
	THeader  RequiredMessageHeader
	Ann      DT_ACD_NETWORK_NAME
	SnoPower DT_SNO
}

func (t *Type_50b285a4) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Ann, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SnoPower, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+28, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_50b285a4) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("Ann", &t.Ann)
	cb.Do("SnoPower", &t.SnoPower)
}

type SalvagedItemLabelSubcondition struct {
	// Inherits Subcondition
	// Inherits PolymorphicBase
	DwType     DT_UINT
	BNegate    DT_INT
	DwPad      DT_UINT
	EItemLabel DT_ENUM
}

func (t *SalvagedItemLabelSubcondition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BNegate, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.EItemLabel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *SalvagedItemLabelSubcondition) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("BNegate", &t.BNegate)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("EItemLabel", &t.EItemLabel)
}

type AnimPermutation struct {
	UID                     DT_UINT
	DwFlags                 DT_UINT
	FlFrameRate             DT_FLOAT
	FlCompression           DT_FLOAT
	DwBlendTime             DT_FLOAT
	Unk_fe5755e             DT_FLOAT
	EBlendCurve             DT_ENUM
	DwWeight                DT_UINT
	TSpeedMultRange         DT_RANGE[*DT_FLOAT]
	NBoneCount              DT_INT
	PtPayloadData           DT_VARIABLEARRAY[*AnimPayloadData]
	TPhaseName              DT_UINT
	EPhasePlaybackMode      DT_ENUM
	ArContactFrames         DT_FIXEDARRAY[*AnimContactFrame]
	ArFacingWindows         DT_VARIABLEARRAY[*AnimFacingWindow]
	ArIKFrames              DT_VARIABLEARRAY[*IKFrames]
	Unk_c61b9d1             DT_FLOAT
	ArInterruptFrames       DT_FIXEDARRAY[*DT_INT]
	Unk_75e1ebe             DT_RANGE[*DT_INT]
	Unk_f14b63c             DT_RANGE[*DT_INT]
	Unk_ddce6df             DT_INT
	EAnimationScalingType   DT_ENUM
	FlMinimumAnimationScale DT_FLOAT
	FlMaximumAnimationScale DT_FLOAT
	Unk_4f89e54             DT_FLOAT
	Unk_40c83b5             DT_FLOAT
	Unk_41ae864             DT_FLOAT
	Unk_f219e46             DT_ENUM
	Unk_acf4ed5             DT_INT
	Unk_779d247             DT_INT
	NPermutationGroup       DT_BYTE
	NKeyframeCount          DT_INT
	Unk_3068b27             DT_UINT
	SnoEffectGroup          DT_SNO
	Unk_2e355dd             DT_INT
	Unk_536659a             DT_INT
	Unk_b4c58a6             DT_INT
	Unk_4b39bee             DT_VARIABLEARRAY[*Type_9e8134dc]
	WvAvgVel                DT_VECTOR3D
	Unk_57d4879             PRTransform
	THardpointLink          HardpointLink
	Unk_bd4a157             DT_FLOAT
	Unk_a3acec8             DT_UINT
	PnAnimToStructure       DT_INT64
}

func (t *AnimPermutation) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.UID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.DwFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.FlFrameRate, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.FlCompression, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.DwBlendTime, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.Unk_fe5755e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.EBlendCurve, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.DwWeight, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.TSpeedMultRange, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.NBoneCount, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.PtPayloadData, r, &Options{Flags: 2097152}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.TPhaseName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.EPhasePlaybackMode, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.ArContactFrames, r, &Options{
		ArrayLength: 4,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+136, &t.ArFacingWindows, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+152, &t.ArIKFrames, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+168, &t.Unk_c61b9d1, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+172, &t.ArInterruptFrames, r, &Options{
		ArrayLength: 4,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+188, &t.Unk_75e1ebe, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+196, &t.Unk_f14b63c, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+204, &t.Unk_ddce6df, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+208, &t.EAnimationScalingType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+212, &t.FlMinimumAnimationScale, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+216, &t.FlMaximumAnimationScale, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+220, &t.Unk_4f89e54, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+224, &t.Unk_40c83b5, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+228, &t.Unk_41ae864, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+232, &t.Unk_f219e46, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+236, &t.Unk_acf4ed5, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+240, &t.Unk_779d247, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+244, &t.NPermutationGroup, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+248, &t.NKeyframeCount, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+252, &t.Unk_3068b27, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+256, &t.SnoEffectGroup, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+260, &t.Unk_2e355dd, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+264, &t.Unk_536659a, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+268, &t.Unk_b4c58a6, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+272, &t.Unk_4b39bee, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+288, &t.WvAvgVel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+300, &t.Unk_57d4879, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+328, &t.THardpointLink, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+336, &t.Unk_bd4a157, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+340, &t.Unk_a3acec8, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+344, &t.PnAnimToStructure, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if _, err := r.Seek(p+352, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *AnimPermutation) Walk(cb WalkCallback) {
	cb.Do("UID", &t.UID)
	cb.Do("DwFlags", &t.DwFlags)
	cb.Do("FlFrameRate", &t.FlFrameRate)
	cb.Do("FlCompression", &t.FlCompression)
	cb.Do("DwBlendTime", &t.DwBlendTime)
	cb.Do("Unk_fe5755e", &t.Unk_fe5755e)
	cb.Do("EBlendCurve", &t.EBlendCurve)
	cb.Do("DwWeight", &t.DwWeight)
	cb.Do("TSpeedMultRange", &t.TSpeedMultRange)
	cb.Do("NBoneCount", &t.NBoneCount)
	cb.Do("PtPayloadData", &t.PtPayloadData)
	cb.Do("TPhaseName", &t.TPhaseName)
	cb.Do("EPhasePlaybackMode", &t.EPhasePlaybackMode)
	cb.Do("ArContactFrames", &t.ArContactFrames)
	cb.Do("ArFacingWindows", &t.ArFacingWindows)
	cb.Do("ArIKFrames", &t.ArIKFrames)
	cb.Do("Unk_c61b9d1", &t.Unk_c61b9d1)
	cb.Do("ArInterruptFrames", &t.ArInterruptFrames)
	cb.Do("Unk_75e1ebe", &t.Unk_75e1ebe)
	cb.Do("Unk_f14b63c", &t.Unk_f14b63c)
	cb.Do("Unk_ddce6df", &t.Unk_ddce6df)
	cb.Do("EAnimationScalingType", &t.EAnimationScalingType)
	cb.Do("FlMinimumAnimationScale", &t.FlMinimumAnimationScale)
	cb.Do("FlMaximumAnimationScale", &t.FlMaximumAnimationScale)
	cb.Do("Unk_4f89e54", &t.Unk_4f89e54)
	cb.Do("Unk_40c83b5", &t.Unk_40c83b5)
	cb.Do("Unk_41ae864", &t.Unk_41ae864)
	cb.Do("Unk_f219e46", &t.Unk_f219e46)
	cb.Do("Unk_acf4ed5", &t.Unk_acf4ed5)
	cb.Do("Unk_779d247", &t.Unk_779d247)
	cb.Do("NPermutationGroup", &t.NPermutationGroup)
	cb.Do("NKeyframeCount", &t.NKeyframeCount)
	cb.Do("Unk_3068b27", &t.Unk_3068b27)
	cb.Do("SnoEffectGroup", &t.SnoEffectGroup)
	cb.Do("Unk_2e355dd", &t.Unk_2e355dd)
	cb.Do("Unk_536659a", &t.Unk_536659a)
	cb.Do("Unk_b4c58a6", &t.Unk_b4c58a6)
	cb.Do("Unk_4b39bee", &t.Unk_4b39bee)
	cb.Do("WvAvgVel", &t.WvAvgVel)
	cb.Do("Unk_57d4879", &t.Unk_57d4879)
	cb.Do("THardpointLink", &t.THardpointLink)
	cb.Do("Unk_bd4a157", &t.Unk_bd4a157)
	cb.Do("Unk_a3acec8", &t.Unk_a3acec8)
	cb.Do("PnAnimToStructure", &t.PnAnimToStructure)
}

type ACDPrimaryPowerMessage struct {
	THeader             RequiredMessageHeader
	Ann                 DT_ACD_NETWORK_NAME
	SnoPower            DT_SNO
	UCommandFrame       DT_UINT
	Unk_f4fb70          DT_VECTOR3D
	BForceOverride      DT_INT
	EInterruptReason    DT_OPTIONAL[*DT_ENUM]
	DwFlags             DT_OPTIONAL[*DT_UINT]
	AnnTargetName       DT_OPTIONAL[*DT_ACD_NETWORK_NAME]
	WpTarget            DT_OPTIONAL[*SharedServerWorldPlace]
	WpTargetOffset      DT_OPTIONAL[*DT_VECTOR3D]
	Unk_81cd99f         DT_OPTIONAL[*DT_ACD_NETWORK_NAME]
	SnoTraversalSurface DT_OPTIONAL[*DT_SNO]
	DwPhaseNameHash     DT_OPTIONAL[*DT_UINT]
	DwPhasesFinished    DT_OPTIONAL[*DT_UINT]
	ESlot               DT_OPTIONAL[*DT_ENUM]
	TLocalSyncTransform DT_OPTIONAL[*PRTransform]
	Unk_c69d3ef         DT_OPTIONAL[*DT_FLOAT]
	Unk_f6c2065         DT_OPTIONAL[*DT_INT]
	SnoPowerInterrupted DT_OPTIONAL[*DT_SNO]
}

func (t *ACDPrimaryPowerMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Ann, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SnoPower, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.UCommandFrame, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.Unk_f4fb70, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.BForceOverride, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.EInterruptReason, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.DwFlags, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.AnnTargetName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.WpTarget, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+100, &t.WpTargetOffset, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+116, &t.Unk_81cd99f, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.SnoTraversalSurface, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+136, &t.DwPhaseNameHash, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+144, &t.DwPhasesFinished, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+152, &t.ESlot, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+160, &t.TLocalSyncTransform, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+192, &t.Unk_c69d3ef, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+200, &t.Unk_f6c2065, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+208, &t.SnoPowerInterrupted, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+216, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ACDPrimaryPowerMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("Ann", &t.Ann)
	cb.Do("SnoPower", &t.SnoPower)
	cb.Do("UCommandFrame", &t.UCommandFrame)
	cb.Do("Unk_f4fb70", &t.Unk_f4fb70)
	cb.Do("BForceOverride", &t.BForceOverride)
	cb.Do("EInterruptReason", &t.EInterruptReason)
	cb.Do("DwFlags", &t.DwFlags)
	cb.Do("AnnTargetName", &t.AnnTargetName)
	cb.Do("WpTarget", &t.WpTarget)
	cb.Do("WpTargetOffset", &t.WpTargetOffset)
	cb.Do("Unk_81cd99f", &t.Unk_81cd99f)
	cb.Do("SnoTraversalSurface", &t.SnoTraversalSurface)
	cb.Do("DwPhaseNameHash", &t.DwPhaseNameHash)
	cb.Do("DwPhasesFinished", &t.DwPhasesFinished)
	cb.Do("ESlot", &t.ESlot)
	cb.Do("TLocalSyncTransform", &t.TLocalSyncTransform)
	cb.Do("Unk_c69d3ef", &t.Unk_c69d3ef)
	cb.Do("Unk_f6c2065", &t.Unk_f6c2065)
	cb.Do("SnoPowerInterrupted", &t.SnoPowerInterrupted)
}

type TriggerData struct {
	TTriggerProxData       TriggerProximityData
	SnoTriggerEnteredPower DT_SNO
	SnoTriggerPulsePower   DT_SNO
	FLogicMust             DT_INT
	SnoTriggerExitedPower  DT_SNO
}

func (t *TriggerData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.TTriggerProxData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.SnoTriggerEnteredPower, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.SnoTriggerPulsePower, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.FLogicMust, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.SnoTriggerExitedPower, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+80, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TriggerData) Walk(cb WalkCallback) {
	cb.Do("TTriggerProxData", &t.TTriggerProxData)
	cb.Do("SnoTriggerEnteredPower", &t.SnoTriggerEnteredPower)
	cb.Do("SnoTriggerPulsePower", &t.SnoTriggerPulsePower)
	cb.Do("FLogicMust", &t.FLogicMust)
	cb.Do("SnoTriggerExitedPower", &t.SnoTriggerExitedPower)
}

type DRLGDungeonState struct {
	GbidDungeonState DT_GBID
	BNegate          DT_INT
}

func (t *DRLGDungeonState) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.GbidDungeonState, r, &Options{
		Flags: 1,
		Group: 31,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.BNegate, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *DRLGDungeonState) Walk(cb WalkCallback) {
	cb.Do("GbidDungeonState", &t.GbidDungeonState)
	cb.Do("BNegate", &t.BNegate)
}

type ActorPhysicsData struct {
	SnoPhysics                     DT_SNO
	Unk_49cf485                    DT_SNO
	EMaterial                      DT_ENUM
	FlExplosionFactor              DT_FLOAT
	FlWindFactor                   DT_FLOAT
	FlPartialRagdollResponsiveness DT_FLOAT
	Unk_fdc1015                    DT_UINT
}

func (t *ActorPhysicsData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoPhysics, r, &Options{
		Flags: 1,
		Group: 28,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.Unk_49cf485, r, &Options{
		Flags: 1,
		Group: 28,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.EMaterial, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.FlExplosionFactor, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.FlWindFactor, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.FlPartialRagdollResponsiveness, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_fdc1015, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+28, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ActorPhysicsData) Walk(cb WalkCallback) {
	cb.Do("SnoPhysics", &t.SnoPhysics)
	cb.Do("Unk_49cf485", &t.Unk_49cf485)
	cb.Do("EMaterial", &t.EMaterial)
	cb.Do("FlExplosionFactor", &t.FlExplosionFactor)
	cb.Do("FlWindFactor", &t.FlWindFactor)
	cb.Do("FlPartialRagdollResponsiveness", &t.FlPartialRagdollResponsiveness)
	cb.Do("Unk_fdc1015", &t.Unk_fdc1015)
}

type BoneData struct {
	Unk_a3acec8                      DT_UINT
	NBaseBoneCount                   DT_INT
	PtBoneStructure                  DT_VARIABLEARRAY[*BoneStructure]
	NClothBoneCount                  DT_INT
	Unk_ad025d8                      DT_INT
	Unk_4118a82                      DT_FIXEDARRAY[*Type_dbcb04f3]
	Unk_73d52a2                      DT_VARIABLEARRAY[*Type_f5cd87eb]
	TLookAtData                      LookAtData
	TIKData                          IKData
	Unk_42b03b4                      Type_fbdf1440
	TGroundNormalTests               GroundNormalTests
	PtHardpoints                     DT_VARIABLEARRAY[*Hardpoint]
	PtLoopConstraints                DT_VARIABLEARRAY[*ConstraintParameters]
	Unk_eb48138                      DT_VARIABLEARRAY[*HardpointLink]
	PtNPCComponentHardpointOverrides DT_VARIABLEARRAY[*NPCComponentHardpointOverride]
	Unk_b6507e3                      DT_VARIABLEARRAY[*HardpointOffset]
	Unk_214010b                      DT_VARIABLEARRAY[*Type_e1ac09b4]
	Unk_b98787b                      DT_INT
	URagdollDegrade                  DT_UINT
}

func (t *BoneData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Unk_a3acec8, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.NBaseBoneCount, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.PtBoneStructure, r, &Options{Flags: 2097152}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.NClothBoneCount, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.Unk_ad025d8, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.Unk_4118a82, r, &Options{ArrayLength: 7}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+144, &t.Unk_73d52a2, r, &Options{Flags: 2097152}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+160, &t.TLookAtData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+208, &t.TIKData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+272, &t.Unk_42b03b4, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+288, &t.TGroundNormalTests, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+312, &t.PtHardpoints, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+328, &t.PtLoopConstraints, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+344, &t.Unk_eb48138, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+360, &t.PtNPCComponentHardpointOverrides, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+376, &t.Unk_b6507e3, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+392, &t.Unk_214010b, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+408, &t.Unk_b98787b, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+412, &t.URagdollDegrade, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+416, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *BoneData) Walk(cb WalkCallback) {
	cb.Do("Unk_a3acec8", &t.Unk_a3acec8)
	cb.Do("NBaseBoneCount", &t.NBaseBoneCount)
	cb.Do("PtBoneStructure", &t.PtBoneStructure)
	cb.Do("NClothBoneCount", &t.NClothBoneCount)
	cb.Do("Unk_ad025d8", &t.Unk_ad025d8)
	cb.Do("Unk_4118a82", &t.Unk_4118a82)
	cb.Do("Unk_73d52a2", &t.Unk_73d52a2)
	cb.Do("TLookAtData", &t.TLookAtData)
	cb.Do("TIKData", &t.TIKData)
	cb.Do("Unk_42b03b4", &t.Unk_42b03b4)
	cb.Do("TGroundNormalTests", &t.TGroundNormalTests)
	cb.Do("PtHardpoints", &t.PtHardpoints)
	cb.Do("PtLoopConstraints", &t.PtLoopConstraints)
	cb.Do("Unk_eb48138", &t.Unk_eb48138)
	cb.Do("PtNPCComponentHardpointOverrides", &t.PtNPCComponentHardpointOverrides)
	cb.Do("Unk_b6507e3", &t.Unk_b6507e3)
	cb.Do("Unk_214010b", &t.Unk_214010b)
	cb.Do("Unk_b98787b", &t.Unk_b98787b)
	cb.Do("URagdollDegrade", &t.URagdollDegrade)
}

type RecipeIngredient struct {
	SnoCondition   DT_SNO
	SnoItem        DT_SNO
	NQuantity      DT_UINT
	BIgnoreScaling DT_INT
	Unk_20e0a16    DT_INT
	Unk_a6432a8    DT_RANGE[*DT_FLOAT]
	Unk_86b80f6    DT_GBID
}

func (t *RecipeIngredient) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoCondition, r, &Options{
		Flags: 1,
		Group: 51,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.SnoItem, r, &Options{
		Flags: 513,
		Group: 73,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.NQuantity, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.BIgnoreScaling, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_20e0a16, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.Unk_a6432a8, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.Unk_86b80f6, r, &Options{
		Flags: 1,
		Group: 22,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *RecipeIngredient) Walk(cb WalkCallback) {
	cb.Do("SnoCondition", &t.SnoCondition)
	cb.Do("SnoItem", &t.SnoItem)
	cb.Do("NQuantity", &t.NQuantity)
	cb.Do("BIgnoreScaling", &t.BIgnoreScaling)
	cb.Do("Unk_20e0a16", &t.Unk_20e0a16)
	cb.Do("Unk_a6432a8", &t.Unk_a6432a8)
	cb.Do("Unk_86b80f6", &t.Unk_86b80f6)
}

type BoneName struct {
	SzName DT_UINT
}

func (t *BoneName) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SzName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+4, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *BoneName) Walk(cb WalkCallback) {
	cb.Do("SzName", &t.SzName)
}

type TriggerEventHideCaptionUI struct {
	// Inherits TriggerEvent
	// Inherits PolymorphicBase
	DwType          DT_UINT
	DwPad           DT_UINT
	TConditions     TriggerConditions
	FGenerated      DT_INT
	Unk_6cba752     DT_INT
	DwParentActorID DT_UINT
}

func (t *TriggerEventHideCaptionUI) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.FGenerated, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_6cba752, r, &Options{Flags: 16}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.DwParentActorID, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+80, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TriggerEventHideCaptionUI) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("TConditions", &t.TConditions)
	cb.Do("FGenerated", &t.FGenerated)
	cb.Do("Unk_6cba752", &t.Unk_6cba752)
	cb.Do("DwParentActorID", &t.DwParentActorID)
}

type PlayerPossessActorMessage struct {
	THeader               RequiredMessageHeader
	DwPlayerGameAccountId DT_UINT
	AnnACD                DT_ACD_NETWORK_NAME
}

func (t *PlayerPossessActorMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.DwPlayerGameAccountId, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.AnnACD, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+28, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PlayerPossessActorMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("DwPlayerGameAccountId", &t.DwPlayerGameAccountId)
	cb.Do("AnnACD", &t.AnnACD)
}

type SubObjectSegment struct {
	PBoneIDs     DT_VARIABLEARRAY[*DT_INT]
	NVertCount   DT_INT
	NVertOffset  DT_INT
	NIndexCount  DT_INT
	NIndexOffset DT_INT
}

func (t *SubObjectSegment) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.PBoneIDs, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.NVertCount, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.NVertOffset, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.NIndexCount, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.NIndexOffset, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *SubObjectSegment) Walk(cb WalkCallback) {
	cb.Do("PBoneIDs", &t.PBoneIDs)
	cb.Do("NVertCount", &t.NVertCount)
	cb.Do("NVertOffset", &t.NVertOffset)
	cb.Do("NIndexCount", &t.NIndexCount)
	cb.Do("NIndexOffset", &t.NIndexOffset)
}

type OnFirstHitAttemptBuffCallback struct {
	// Inherits BuffCallbackBase
	// Inherits PolymorphicBase
	DwType                DT_UINT
	DwPad                 DT_UINT
	SnoTriggerEffectGroup DT_SNO
	ArConditions          DT_POLYMORPHIC_VARIABLEARRAY[*DT_INT64]
}

func (t *OnFirstHitAttemptBuffCallback) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoTriggerEffectGroup, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ArConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *OnFirstHitAttemptBuffCallback) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("SnoTriggerEffectGroup", &t.SnoTriggerEffectGroup)
	cb.Do("ArConditions", &t.ArConditions)
}

type PowerMod struct {
	SzName             DT_UINT
	NMaxPoints         DT_INT
	DwModId            DT_UINT
	DwModMask          DT_UINT
	Unk_94cc84e        DT_UINT
	BAppendDescription DT_INT
	Unk_7b47c37        DT_INT
	ArSkillTags        DT_VARIABLEARRAY[*DT_GBID]
}

func (t *PowerMod) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SzName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.NMaxPoints, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwModId, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwModMask, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_94cc84e, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.BAppendDescription, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_7b47c37, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.ArSkillTags, r, &Options{
		Flags: 1,
		Group: 56,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PowerMod) Walk(cb WalkCallback) {
	cb.Do("SzName", &t.SzName)
	cb.Do("NMaxPoints", &t.NMaxPoints)
	cb.Do("DwModId", &t.DwModId)
	cb.Do("DwModMask", &t.DwModMask)
	cb.Do("Unk_94cc84e", &t.Unk_94cc84e)
	cb.Do("BAppendDescription", &t.BAppendDescription)
	cb.Do("Unk_7b47c37", &t.Unk_7b47c37)
	cb.Do("ArSkillTags", &t.ArSkillTags)
}

type Type_52314c2f struct {
	Bones DT_VARIABLEARRAY[*Type_6f18c43c]
}

func (t *Type_52314c2f) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Bones, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_52314c2f) Walk(cb WalkCallback) {
	cb.Do("Bones", &t.Bones)
}

type WorldLocationMessageData struct {
	VScale    DT_VECTOR3D
	Transform PRTransform
	IdSWorld  DT_SHARED_SERVER_DATA_ID
}

func (t *WorldLocationMessageData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.VScale, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.Transform, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.IdSWorld, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *WorldLocationMessageData) Walk(cb WalkCallback) {
	cb.Do("VScale", &t.VScale)
	cb.Do("Transform", &t.Transform)
	cb.Do("IdSWorld", &t.IdSWorld)
}

type Type_525de28e struct {
	Unk_1c4f058      DT_UINT
	TUnlockCondition ConditionWrapper
}

func (t *Type_525de28e) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Unk_1c4f058, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.TUnlockCondition, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+40, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_525de28e) Walk(cb WalkCallback) {
	cb.Do("Unk_1c4f058", &t.Unk_1c4f058)
	cb.Do("TUnlockCondition", &t.TUnlockCondition)
}

type TriggerEventAddEffectGroup struct {
	// Inherits TriggerEvent
	// Inherits PolymorphicBase
	DwType                         DT_UINT
	DwPad                          DT_UINT
	TConditions                    TriggerConditions
	FGenerated                     DT_INT
	Unk_6cba752                    DT_INT
	DwParentActorID                DT_UINT
	Unk_85269a4                    DT_INT
	Unk_b9368ac                    DT_INT
	Unk_f50537b                    DT_INT
	Unk_6fd6f47                    DT_INT
	Unk_f22bb26                    DT_INT
	Unk_4102322                    DT_INT
	Unk_9a2c9a0                    DT_INT
	Unk_ab8c139                    DT_INT
	FOverrideHardpoint             DT_INT
	Unk_edec5ed                    DT_INT
	Unk_e312e34                    DT_UINT
	DwActorID                      DT_UINT
	DwID                           DT_UINT
	SnoEffectGroup                 DT_SNO
	THardpointLinks                DT_FIXEDARRAY[*HardpointLink]
	DwTriggerFlags                 DT_UINT
	DwTriggerFlagsEx               DT_UINT
	SzSpawnLocatorName             DT_UINT
	Transform                      PRTransform
	TEffectGroupHardpointLink      HardpointLink
	SnoPowerEffectParam            DT_SNO
	VecScale                       DT_VECTOR3D
	VecScalar                      DT_VECTOR2D
	FlPowerEffectSizeOverride      DT_FLOAT
	FlPowerEffectIntensityOverride DT_FLOAT
	FlPowerEffectDurationOverride  DT_FLOAT
	FlPowerEffectLengthOverride    DT_FLOAT
	FlPowerEffectWidthOverride     DT_FLOAT
	FlPowerEffectHeightOverride    DT_FLOAT
	DwUniqueID                     DT_UINT
}

func (t *TriggerEventAddEffectGroup) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.FGenerated, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_6cba752, r, &Options{Flags: 16}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.DwParentActorID, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.Unk_85269a4, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.Unk_b9368ac, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.Unk_f50537b, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.Unk_6fd6f47, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.Unk_f22bb26, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+100, &t.Unk_4102322, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+104, &t.Unk_9a2c9a0, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+108, &t.Unk_ab8c139, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.FOverrideHardpoint, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+116, &t.Unk_edec5ed, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.Unk_e312e34, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+124, &t.DwActorID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.DwID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+132, &t.SnoEffectGroup, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+136, &t.THardpointLinks, r, &Options{
		ArrayLength: 2,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+152, &t.DwTriggerFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+156, &t.DwTriggerFlagsEx, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+160, &t.SzSpawnLocatorName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+164, &t.Transform, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+192, &t.TEffectGroupHardpointLink, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+200, &t.SnoPowerEffectParam, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+204, &t.VecScale, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+216, &t.VecScalar, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+224, &t.FlPowerEffectSizeOverride, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+228, &t.FlPowerEffectIntensityOverride, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+232, &t.FlPowerEffectDurationOverride, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+236, &t.FlPowerEffectLengthOverride, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+240, &t.FlPowerEffectWidthOverride, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+244, &t.FlPowerEffectHeightOverride, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+248, &t.DwUniqueID, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+256, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TriggerEventAddEffectGroup) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("TConditions", &t.TConditions)
	cb.Do("FGenerated", &t.FGenerated)
	cb.Do("Unk_6cba752", &t.Unk_6cba752)
	cb.Do("DwParentActorID", &t.DwParentActorID)
	cb.Do("Unk_85269a4", &t.Unk_85269a4)
	cb.Do("Unk_b9368ac", &t.Unk_b9368ac)
	cb.Do("Unk_f50537b", &t.Unk_f50537b)
	cb.Do("Unk_6fd6f47", &t.Unk_6fd6f47)
	cb.Do("Unk_f22bb26", &t.Unk_f22bb26)
	cb.Do("Unk_4102322", &t.Unk_4102322)
	cb.Do("Unk_9a2c9a0", &t.Unk_9a2c9a0)
	cb.Do("Unk_ab8c139", &t.Unk_ab8c139)
	cb.Do("FOverrideHardpoint", &t.FOverrideHardpoint)
	cb.Do("Unk_edec5ed", &t.Unk_edec5ed)
	cb.Do("Unk_e312e34", &t.Unk_e312e34)
	cb.Do("DwActorID", &t.DwActorID)
	cb.Do("DwID", &t.DwID)
	cb.Do("SnoEffectGroup", &t.SnoEffectGroup)
	cb.Do("THardpointLinks", &t.THardpointLinks)
	cb.Do("DwTriggerFlags", &t.DwTriggerFlags)
	cb.Do("DwTriggerFlagsEx", &t.DwTriggerFlagsEx)
	cb.Do("SzSpawnLocatorName", &t.SzSpawnLocatorName)
	cb.Do("Transform", &t.Transform)
	cb.Do("TEffectGroupHardpointLink", &t.TEffectGroupHardpointLink)
	cb.Do("SnoPowerEffectParam", &t.SnoPowerEffectParam)
	cb.Do("VecScale", &t.VecScale)
	cb.Do("VecScalar", &t.VecScalar)
	cb.Do("FlPowerEffectSizeOverride", &t.FlPowerEffectSizeOverride)
	cb.Do("FlPowerEffectIntensityOverride", &t.FlPowerEffectIntensityOverride)
	cb.Do("FlPowerEffectDurationOverride", &t.FlPowerEffectDurationOverride)
	cb.Do("FlPowerEffectLengthOverride", &t.FlPowerEffectLengthOverride)
	cb.Do("FlPowerEffectWidthOverride", &t.FlPowerEffectWidthOverride)
	cb.Do("FlPowerEffectHeightOverride", &t.FlPowerEffectHeightOverride)
	cb.Do("DwUniqueID", &t.DwUniqueID)
}

type ExtractAffixResultMessage struct {
	THeader     RequiredMessageHeader
	NResultCode DT_INT
	AnnItem     DT_ACD_NETWORK_NAME
}

func (t *ExtractAffixResultMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.NResultCode, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.AnnItem, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+28, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ExtractAffixResultMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("NResultCode", &t.NResultCode)
	cb.Do("AnnItem", &t.AnnItem)
}

type MarkerEffectGroupData struct {
	// Inherits MarkerDataBase
	// Inherits PolymorphicBase
	DwType                  DT_UINT
	DwPad                   DT_UINT
	Unk_90afea4             DT_UINT
	Unk_4bf3f6b             DT_FLOAT
	Unk_9411612             DT_FLOAT
	PtRunTimeMaterialValues DT_VARIABLEARRAY[*RunTimeMaterialValues]
}

func (t *MarkerEffectGroupData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_90afea4, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.Unk_4bf3f6b, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_9411612, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.PtRunTimeMaterialValues, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *MarkerEffectGroupData) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("Unk_90afea4", &t.Unk_90afea4)
	cb.Do("Unk_4bf3f6b", &t.Unk_4bf3f6b)
	cb.Do("Unk_9411612", &t.Unk_9411612)
	cb.Do("PtRunTimeMaterialValues", &t.PtRunTimeMaterialValues)
}

type EnchantAffixChooseMessage struct {
	THeader              RequiredMessageHeader
	AnnItem              DT_ACD_NETWORK_NAME
	TEnchantAffixChoices DT_FIXEDARRAY[*EnchantAffixChoice]
}

func (t *EnchantAffixChooseMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.AnnItem, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.TEnchantAffixChoices, r, &Options{
		ArrayLength: 5,
		Flags:       8,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+68, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *EnchantAffixChooseMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("AnnItem", &t.AnnItem)
	cb.Do("TEnchantAffixChoices", &t.TEnchantAffixChoices)
}

type SimpleRequest struct {
	THeader RequiredRequestMessageHeader
}

func (t *SimpleRequest) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+20, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *SimpleRequest) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
}

type AdditionalStatistic struct{}

func (t *AdditionalStatistic) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if _, err := r.Seek(p+1, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *AdditionalStatistic) Walk(cb WalkCallback) {}

type Type_53844691 struct {
	Key         Type_fbb7557a
	TDebugName  WwiseName
	Unk_a08b499 DT_INT
}

func (t *Type_53844691) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Key, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.TDebugName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.Unk_a08b499, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_53844691) Walk(cb WalkCallback) {
	cb.Do("Key", &t.Key)
	cb.Do("TDebugName", &t.TDebugName)
	cb.Do("Unk_a08b499", &t.Unk_a08b499)
}

type AIPathData struct {
	M_cellData   DT_VARIABLEARRAY[*AICellData]
	M_cellBytes  DT_VARIABLEARRAY[*AICellBytes]
	Unk_5d4c076  DT_VARIABLEARRAY[*Type_5f1859b4]
	Unk_14f08f0  DT_INT64
	Unk_7a5d20a  DT_INT
	M_cellWidth  DT_FLOAT
	M_cellHeight DT_FLOAT
}

func (t *AIPathData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.M_cellData, r, &Options{Flags: 262144}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.M_cellBytes, r, &Options{Flags: 262144}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.Unk_5d4c076, r, &Options{Flags: 262144}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.Unk_14f08f0, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.Unk_7a5d20a, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+60, &t.M_cellWidth, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.M_cellHeight, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+72, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *AIPathData) Walk(cb WalkCallback) {
	cb.Do("M_cellData", &t.M_cellData)
	cb.Do("M_cellBytes", &t.M_cellBytes)
	cb.Do("Unk_5d4c076", &t.Unk_5d4c076)
	cb.Do("Unk_14f08f0", &t.Unk_14f08f0)
	cb.Do("Unk_7a5d20a", &t.Unk_7a5d20a)
	cb.Do("M_cellWidth", &t.M_cellWidth)
	cb.Do("M_cellHeight", &t.M_cellHeight)
}

type OnContactFramePowerCallback struct {
	// Inherits PowerCallbackBase
	// Inherits PolymorphicBase
	DwType                DT_UINT
	DwPad                 DT_UINT
	SnoTriggerEffectGroup DT_SNO
	BCouldHaveRagdolled   DT_INT
	EContactFrame         DT_ENUM
	BOptional             DT_INT
}

func (t *OnContactFramePowerCallback) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoTriggerEffectGroup, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.BCouldHaveRagdolled, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.EContactFrame, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.BOptional, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *OnContactFramePowerCallback) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("SnoTriggerEffectGroup", &t.SnoTriggerEffectGroup)
	cb.Do("BCouldHaveRagdolled", &t.BCouldHaveRagdolled)
	cb.Do("EContactFrame", &t.EContactFrame)
	cb.Do("BOptional", &t.BOptional)
}

type ConditionData struct {
	SnoCondition   DT_SNO
	HConditionText StringLabelHandleEx
}

func (t *ConditionData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoCondition, r, &Options{
		Flags: 1,
		Group: 51,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.HConditionText, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+12, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ConditionData) Walk(cb WalkCallback) {
	cb.Do("SnoCondition", &t.SnoCondition)
	cb.Do("HConditionText", &t.HConditionText)
}

type GoToWaypointMessage struct {
	THeader        RequiredMessageHeader
	SnoLevelArea   DT_SNO
	AnnWaypointSrc DT_ACD_NETWORK_NAME
}

func (t *GoToWaypointMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoLevelArea, r, &Options{
		Flags: 1,
		Group: 22,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.AnnWaypointSrc, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+28, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *GoToWaypointMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("SnoLevelArea", &t.SnoLevelArea)
	cb.Do("AnnWaypointSrc", &t.AnnWaypointSrc)
}

type MonsterExtRaritySubcondition struct {
	// Inherits Subcondition
	// Inherits PolymorphicBase
	DwType      DT_UINT
	BNegate     DT_INT
	DwPad       DT_UINT
	ERarity     DT_ENUM
	Unk_c7b2b18 DT_ENUM
}

func (t *MonsterExtRaritySubcondition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BNegate, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ERarity, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.Unk_c7b2b18, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *MonsterExtRaritySubcondition) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("BNegate", &t.BNegate)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("ERarity", &t.ERarity)
	cb.Do("Unk_c7b2b18", &t.Unk_c7b2b18)
}

type ScriptEventInvalidType struct {
	// Inherits ScriptEventParamBase
	// Inherits PolymorphicBase
	DwType     DT_UINT
	EParamType DT_ENUM
	DwPad      DT_UINT
}

func (t *ScriptEventInvalidType) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.EParamType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ScriptEventInvalidType) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("EParamType", &t.EParamType)
	cb.Do("DwPad", &t.DwPad)
}

type POICameraGizmoData struct {
	// Inherits NamedGizmoData
	// Inherits ActorGizmoData
	// Inherits PolymorphicBase
	DwType                       DT_UINT
	DwPad                        DT_UINT
	FDisableNonFriendlyOperation DT_INT
	FWalkToCenter                DT_INT
	FGizmoStartsDisabled         DT_INT
	FUseStringListName           DT_INT
	FForceMinimapIcon            DT_INT
	FlOperationRadius            DT_FLOAT
	Unk_d0b1df5                  DT_FLOAT
	FlGizmoUseTime               DT_FLOAT
	SnoChannelingEffect          DT_SNO
	Unk_2767229                  DT_INT
	FGizmoShowProgressBar        DT_INT
	Unk_6d9ebe1                  DT_INT
	Unk_5456245                  DT_INT
	Unk_af5815a                  DT_INT
	SnoOnClickEffect             DT_SNO
	SnoPickedUpEffect            DT_SNO
	SnoDropOnGroundEffect        DT_SNO
	TConditionData               GizmoConditionData
	SnoPowerOperator             DT_SNO
	SnoPowerOperate              DT_SNO
	SnoPowerOperatorActive       DT_SNO
	SnoPowerOperateActive        DT_SNO
	Unk_359810e                  DT_INT
	NCooldown                    DT_UINT
	Unk_9c8478e                  DT_UINT
	Unk_d45ed2d                  DT_INT
	Unk_f6b20b7                  DT_INT
	Unk_54513b8                  DT_INT
	Unk_fd1f378                  DT_UINT
	Unk_487c14                   DT_UINT
	Unk_87f2609                  DT_UINT
	Unk_158eb4f                  DT_FLOAT
	Unk_ab58cd3                  DT_ENUM
	Unk_91a3966                  DT_UINT
	Unk_25312e5                  DT_UINT
	Unk_4be4371                  DT_INT
	Unk_2f154ff                  POICameraInstanceData
}

func (t *POICameraGizmoData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.FDisableNonFriendlyOperation, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.FWalkToCenter, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.FGizmoStartsDisabled, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.FUseStringListName, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.FForceMinimapIcon, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.FlOperationRadius, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.Unk_d0b1df5, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.FlGizmoUseTime, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.SnoChannelingEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.Unk_2767229, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.FGizmoShowProgressBar, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+60, &t.Unk_6d9ebe1, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.Unk_5456245, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.Unk_af5815a, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.SnoOnClickEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.SnoPickedUpEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.SnoDropOnGroundEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.TConditionData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.SnoPowerOperator, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.SnoPowerOperate, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.SnoPowerOperatorActive, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+100, &t.SnoPowerOperateActive, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+104, &t.Unk_359810e, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+108, &t.NCooldown, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.Unk_9c8478e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+116, &t.Unk_d45ed2d, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.Unk_f6b20b7, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+124, &t.Unk_54513b8, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.Unk_fd1f378, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+132, &t.Unk_487c14, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+136, &t.Unk_87f2609, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+140, &t.Unk_158eb4f, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+144, &t.Unk_ab58cd3, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+148, &t.Unk_91a3966, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+152, &t.Unk_25312e5, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+156, &t.Unk_4be4371, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+160, &t.Unk_2f154ff, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+208, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *POICameraGizmoData) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("FDisableNonFriendlyOperation", &t.FDisableNonFriendlyOperation)
	cb.Do("FWalkToCenter", &t.FWalkToCenter)
	cb.Do("FGizmoStartsDisabled", &t.FGizmoStartsDisabled)
	cb.Do("FUseStringListName", &t.FUseStringListName)
	cb.Do("FForceMinimapIcon", &t.FForceMinimapIcon)
	cb.Do("FlOperationRadius", &t.FlOperationRadius)
	cb.Do("Unk_d0b1df5", &t.Unk_d0b1df5)
	cb.Do("FlGizmoUseTime", &t.FlGizmoUseTime)
	cb.Do("SnoChannelingEffect", &t.SnoChannelingEffect)
	cb.Do("Unk_2767229", &t.Unk_2767229)
	cb.Do("FGizmoShowProgressBar", &t.FGizmoShowProgressBar)
	cb.Do("Unk_6d9ebe1", &t.Unk_6d9ebe1)
	cb.Do("Unk_5456245", &t.Unk_5456245)
	cb.Do("Unk_af5815a", &t.Unk_af5815a)
	cb.Do("SnoOnClickEffect", &t.SnoOnClickEffect)
	cb.Do("SnoPickedUpEffect", &t.SnoPickedUpEffect)
	cb.Do("SnoDropOnGroundEffect", &t.SnoDropOnGroundEffect)
	cb.Do("TConditionData", &t.TConditionData)
	cb.Do("SnoPowerOperator", &t.SnoPowerOperator)
	cb.Do("SnoPowerOperate", &t.SnoPowerOperate)
	cb.Do("SnoPowerOperatorActive", &t.SnoPowerOperatorActive)
	cb.Do("SnoPowerOperateActive", &t.SnoPowerOperateActive)
	cb.Do("Unk_359810e", &t.Unk_359810e)
	cb.Do("NCooldown", &t.NCooldown)
	cb.Do("Unk_9c8478e", &t.Unk_9c8478e)
	cb.Do("Unk_d45ed2d", &t.Unk_d45ed2d)
	cb.Do("Unk_f6b20b7", &t.Unk_f6b20b7)
	cb.Do("Unk_54513b8", &t.Unk_54513b8)
	cb.Do("Unk_fd1f378", &t.Unk_fd1f378)
	cb.Do("Unk_487c14", &t.Unk_487c14)
	cb.Do("Unk_87f2609", &t.Unk_87f2609)
	cb.Do("Unk_158eb4f", &t.Unk_158eb4f)
	cb.Do("Unk_ab58cd3", &t.Unk_ab58cd3)
	cb.Do("Unk_91a3966", &t.Unk_91a3966)
	cb.Do("Unk_25312e5", &t.Unk_25312e5)
	cb.Do("Unk_4be4371", &t.Unk_4be4371)
	cb.Do("Unk_2f154ff", &t.Unk_2f154ff)
}

type SupportedServices struct {
	FVendor       DT_FIXEDARRAY[*DT_INT]
	FCrafter      DT_FIXEDARRAY[*DT_INT]
	FClanBank     DT_INT
	FClassPassive DT_INT
	FHealer       DT_INT
	FStash        DT_INT
	FWardrobe     DT_INT
}

func (t *SupportedServices) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.FVendor, r, &Options{
		ArrayLength: 12,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.FCrafter, r, &Options{
		ArrayLength: 6,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.FClanBank, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.FClassPassive, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.FHealer, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.FStash, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.FWardrobe, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+92, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *SupportedServices) Walk(cb WalkCallback) {
	cb.Do("FVendor", &t.FVendor)
	cb.Do("FCrafter", &t.FCrafter)
	cb.Do("FClanBank", &t.FClanBank)
	cb.Do("FClassPassive", &t.FClassPassive)
	cb.Do("FHealer", &t.FHealer)
	cb.Do("FStash", &t.FStash)
	cb.Do("FWardrobe", &t.FWardrobe)
}

type ScriptEventParamFloatGreaterThan struct {
	// Inherits ScriptEventParamBase
	// Inherits PolymorphicBase
	DwType     DT_UINT
	EParamType DT_ENUM
	DwPad      DT_UINT
	FlValue    DT_FLOAT
}

func (t *ScriptEventParamFloatGreaterThan) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.EParamType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.FlValue, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ScriptEventParamFloatGreaterThan) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("EParamType", &t.EParamType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("FlValue", &t.FlValue)
}

type Type_54534723 struct {
	Unk_460eda3 DT_CSTRING[*DT_BYTE]
}

func (t *Type_54534723) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Unk_460eda3, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_54534723) Walk(cb WalkCallback) {
	cb.Do("Unk_460eda3", &t.Unk_460eda3)
}

type EnterWorldMessage struct {
	THeader   RequiredMessageHeader
	IdSWorld  DT_SHARED_SERVER_DATA_ID
	SnoWorld  DT_SNO
	AtPlayers DT_FIXEDARRAY[*EnterWorldPlayer]
}

func (t *EnterWorldMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.IdSWorld, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SnoWorld, r, &Options{
		Flags: 1,
		Group: 48,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.AtPlayers, r, &Options{
		ArrayLength: 2,
		Flags:       8,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+224, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *EnterWorldMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("IdSWorld", &t.IdSWorld)
	cb.Do("SnoWorld", &t.SnoWorld)
	cb.Do("AtPlayers", &t.AtPlayers)
}

type PowerBlendOverrideList struct {
	SnoPowerFrom           DT_SNO
	PtBlendOverrideEntries DT_VARIABLEARRAY[*BlendTimeOverrideEntry]
}

func (t *PowerBlendOverrideList) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoPowerFrom, r, &Options{
		Flags: 513,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.PtBlendOverrideEntries, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PowerBlendOverrideList) Walk(cb WalkCallback) {
	cb.Do("SnoPowerFrom", &t.SnoPowerFrom)
	cb.Do("PtBlendOverrideEntries", &t.PtBlendOverrideEntries)
}

type BiomeItem struct {
	// Inherits PolymorphicBase
	DwType                 DT_UINT
	DwPad                  DT_UINT
	FlRadius               DT_FLOAT
	Unk_2fd1cdb            DT_FLOAT
	TAllowedScaleRange     DT_RANGE[*DT_FLOAT]
	Unk_87acb69            DT_RANGE[*DT_FLOAT]
	Unk_87acb6a            DT_RANGE[*DT_FLOAT]
	Unk_87acb6b            DT_RANGE[*DT_FLOAT]
	Unk_9854b6a            DT_RANGE[*DT_FLOAT]
	FlChance               DT_FLOAT
	DwFlags                DT_UINT
	Unk_2a8c4b6            DT_FLOAT
	AAzimuthAngle          DT_FLOAT
	AAltitudeAngle         DT_FLOAT
	Unk_6ead041            DT_RANGE[*DT_FLOAT]
	TParametricSettings    ParametricSettings
	ArProximityAdjustments DT_VARIABLEARRAY[*ProximityAdjustment]
}

func (t *BiomeItem) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.FlRadius, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.Unk_2fd1cdb, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.TAllowedScaleRange, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.Unk_87acb69, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.Unk_87acb6a, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.Unk_87acb6b, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.Unk_9854b6a, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.FlChance, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.DwFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_2a8c4b6, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.AAzimuthAngle, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.AAltitudeAngle, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.Unk_6ead041, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.TParametricSettings, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+224, &t.ArProximityAdjustments, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+240, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *BiomeItem) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("FlRadius", &t.FlRadius)
	cb.Do("Unk_2fd1cdb", &t.Unk_2fd1cdb)
	cb.Do("TAllowedScaleRange", &t.TAllowedScaleRange)
	cb.Do("Unk_87acb69", &t.Unk_87acb69)
	cb.Do("Unk_87acb6a", &t.Unk_87acb6a)
	cb.Do("Unk_87acb6b", &t.Unk_87acb6b)
	cb.Do("Unk_9854b6a", &t.Unk_9854b6a)
	cb.Do("FlChance", &t.FlChance)
	cb.Do("DwFlags", &t.DwFlags)
	cb.Do("Unk_2a8c4b6", &t.Unk_2a8c4b6)
	cb.Do("AAzimuthAngle", &t.AAzimuthAngle)
	cb.Do("AAltitudeAngle", &t.AAltitudeAngle)
	cb.Do("Unk_6ead041", &t.Unk_6ead041)
	cb.Do("TParametricSettings", &t.TParametricSettings)
	cb.Do("ArProximityAdjustments", &t.ArProximityAdjustments)
}

type GlobalRoadSpline struct {
	SnoWorld       DT_SNO
	DwMarkerPathID DT_UINT
	ERoadType      DT_ENUM
	ArWorldPoints  DT_VARIABLEARRAY[*DT_VECTOR3D]
}

func (t *GlobalRoadSpline) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoWorld, r, &Options{
		Flags: 513,
		Group: 48,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.DwMarkerPathID, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.ERoadType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.ArWorldPoints, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *GlobalRoadSpline) Walk(cb WalkCallback) {
	cb.Do("SnoWorld", &t.SnoWorld)
	cb.Do("DwMarkerPathID", &t.DwMarkerPathID)
	cb.Do("ERoadType", &t.ERoadType)
	cb.Do("ArWorldPoints", &t.ArWorldPoints)
}

type OnKnockbackEndPowerCallback struct {
	// Inherits PowerCallbackBase
	// Inherits PolymorphicBase
	DwType                DT_UINT
	DwPad                 DT_UINT
	SnoTriggerEffectGroup DT_SNO
	BCouldHaveRagdolled   DT_INT
}

func (t *OnKnockbackEndPowerCallback) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoTriggerEffectGroup, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.BCouldHaveRagdolled, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *OnKnockbackEndPowerCallback) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("SnoTriggerEffectGroup", &t.SnoTriggerEffectGroup)
	cb.Do("BCouldHaveRagdolled", &t.BCouldHaveRagdolled)
}

type GameTestingWorldSamplingStartMessage struct {
	THeader        RequiredMessageHeader
	SnoWorld       DT_SNO
	SnoSubzone     DT_SNO
	SnoScene       DT_SNO
	SnoQuest       DT_SNO
	SzTileSetName  DT_CHARARRAY
	SzLocationName DT_CHARARRAY
	TimeOfDay      DT_FLOAT
	VecChunkIndex  DT_BCVEC2I
	GbidLabel      DT_GBID
	Unk_8d446c9    DT_INT
}

func (t *GameTestingWorldSamplingStartMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoWorld, r, &Options{
		Flags: 1,
		Group: 48,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.SnoSubzone, r, &Options{
		Flags: 1,
		Group: 80,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SnoScene, r, &Options{
		Flags: 1,
		Group: 33,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.SnoQuest, r, &Options{
		Flags: 1,
		Group: 31,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.SzTileSetName, r, &Options{
		ArrayLength: 64,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.SzLocationName, r, &Options{
		ArrayLength: 64,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+160, &t.TimeOfDay, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+164, &t.VecChunkIndex, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+172, &t.GbidLabel, r, &Options{
		Flags: 1,
		Group: 4,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+176, &t.Unk_8d446c9, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+180, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *GameTestingWorldSamplingStartMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("SnoWorld", &t.SnoWorld)
	cb.Do("SnoSubzone", &t.SnoSubzone)
	cb.Do("SnoScene", &t.SnoScene)
	cb.Do("SnoQuest", &t.SnoQuest)
	cb.Do("SzTileSetName", &t.SzTileSetName)
	cb.Do("SzLocationName", &t.SzLocationName)
	cb.Do("TimeOfDay", &t.TimeOfDay)
	cb.Do("VecChunkIndex", &t.VecChunkIndex)
	cb.Do("GbidLabel", &t.GbidLabel)
	cb.Do("Unk_8d446c9", &t.Unk_8d446c9)
}

type Type_55ee8277 struct {
	Unk_3a75ef1 ConnectorProperties
	Unk_68e0239 DT_SNO
	Unk_a8bd38a DT_FLOAT
}

func (t *Type_55ee8277) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Unk_3a75ef1, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.Unk_68e0239, r, &Options{
		Flags: 1,
		Group: 44,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.Unk_a8bd38a, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+36, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_55ee8277) Walk(cb WalkCallback) {
	cb.Do("Unk_3a75ef1", &t.Unk_3a75ef1)
	cb.Do("Unk_68e0239", &t.Unk_68e0239)
	cb.Do("Unk_a8bd38a", &t.Unk_a8bd38a)
}

type TriggerEventShowSubtitle struct {
	// Inherits TriggerEventRangedDuration
	// Inherits TriggerEvent
	// Inherits PolymorphicBase
	DwType           DT_UINT
	TConditions      TriggerConditions
	FGenerated       DT_INT
	Unk_6cba752      DT_INT
	DwParentActorID  DT_UINT
	TDuration        DT_FLOAT
	DwTriggerFlags   DT_UINT
	DwTriggerFlagsEx DT_UINT
	TCleanup         TriggerCleanup
	Unk_49e9257      DT_INT
	Unk_5490979      DT_INT
	DwPad            DT_UINT
	HSubtitle        StringLabelHandleEx
}

func (t *TriggerEventShowSubtitle) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.FGenerated, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_6cba752, r, &Options{Flags: 16}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.DwParentActorID, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.TDuration, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.DwTriggerFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.DwTriggerFlagsEx, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.TCleanup, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+116, &t.Unk_49e9257, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.Unk_5490979, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+124, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.HSubtitle, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+136, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TriggerEventShowSubtitle) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("TConditions", &t.TConditions)
	cb.Do("FGenerated", &t.FGenerated)
	cb.Do("Unk_6cba752", &t.Unk_6cba752)
	cb.Do("DwParentActorID", &t.DwParentActorID)
	cb.Do("TDuration", &t.TDuration)
	cb.Do("DwTriggerFlags", &t.DwTriggerFlags)
	cb.Do("DwTriggerFlagsEx", &t.DwTriggerFlagsEx)
	cb.Do("TCleanup", &t.TCleanup)
	cb.Do("Unk_49e9257", &t.Unk_49e9257)
	cb.Do("Unk_5490979", &t.Unk_5490979)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("HSubtitle", &t.HSubtitle)
}

type AnimSetOrderTagEntry_Table struct {
	// Inherits GameBalanceTable
	// Inherits PolymorphicBase
	DwType   DT_UINT
	DwPad    DT_UINT
	TEntries DT_VARIABLEARRAY[*AnimSetOrderTagEntry]
}

func (t *AnimSetOrderTagEntry_Table) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TEntries, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *AnimSetOrderTagEntry_Table) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("TEntries", &t.TEntries)
}

type Type_560ae4cf struct {
	THeader      InterpolationPathHeader
	PtArrayNodes DT_VARIABLEARRAY[*Type_977100c8]
}

func (t *Type_560ae4cf) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.PtArrayNodes, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+56, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_560ae4cf) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("PtArrayNodes", &t.PtArrayNodes)
}

type Type_562c888c struct {
	Unk_238a70d       DT_CSTRING[*DT_BYTE]
	SzSelectionCursor DT_CSTRING[*DT_BYTE]
}

func (t *Type_562c888c) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Unk_238a70d, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SzSelectionCursor, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_562c888c) Walk(cb WalkCallback) {
	cb.Do("Unk_238a70d", &t.Unk_238a70d)
	cb.Do("SzSelectionCursor", &t.SzSelectionCursor)
}

type MarkerObserverVolumeData struct {
	// Inherits MarkerDataBase
	// Inherits PolymorphicBase
	DwType                 DT_UINT
	DwPad                  DT_UINT
	Unk_3017b36            DT_ENUM
	SnoObserver            DT_SNO
	SnoObserverMount       DT_SNO
	SnoActivationCondition DT_SNO
	Unk_fef4192            DT_FLOAT
	Unk_838ae70            DT_INT
}

func (t *MarkerObserverVolumeData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_3017b36, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.SnoObserver, r, &Options{
		Flags: 1,
		Group: 26,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SnoObserverMount, r, &Options{
		Flags: 1,
		Group: 26,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.SnoActivationCondition, r, &Options{
		Flags: 1,
		Group: 51,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.Unk_fef4192, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.Unk_838ae70, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+40, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *MarkerObserverVolumeData) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("Unk_3017b36", &t.Unk_3017b36)
	cb.Do("SnoObserver", &t.SnoObserver)
	cb.Do("SnoObserverMount", &t.SnoObserverMount)
	cb.Do("SnoActivationCondition", &t.SnoActivationCondition)
	cb.Do("Unk_fef4192", &t.Unk_fef4192)
	cb.Do("Unk_838ae70", &t.Unk_838ae70)
}

type PrefabCustomization struct {
	SnoPrefab           DT_SNO
	ArCustomizedMarkers DT_VARIABLEARRAY[*PrefabCustomizedMarker]
}

func (t *PrefabCustomization) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoPrefab, r, &Options{
		Flags: 1,
		Group: 24,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.ArCustomizedMarkers, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PrefabCustomization) Walk(cb WalkCallback) {
	cb.Do("SnoPrefab", &t.SnoPrefab)
	cb.Do("ArCustomizedMarkers", &t.ArCustomizedMarkers)
}

type PowerStartVariant struct {
	TName               DT_UINT
	Unk_73750d7         DT_INT
	BAutoCast           DT_INT
	BIgnoreRange        DT_INT
	BForceCast          DT_INT
	Unk_fca3b69         DT_INT
	ArPowerScriptParams DT_VARIABLEARRAY[*PowerScriptParam]
}

func (t *PowerStartVariant) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.TName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.Unk_73750d7, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.BAutoCast, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.BIgnoreRange, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BForceCast, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.Unk_fca3b69, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ArPowerScriptParams, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+40, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PowerStartVariant) Walk(cb WalkCallback) {
	cb.Do("TName", &t.TName)
	cb.Do("Unk_73750d7", &t.Unk_73750d7)
	cb.Do("BAutoCast", &t.BAutoCast)
	cb.Do("BIgnoreRange", &t.BIgnoreRange)
	cb.Do("BForceCast", &t.BForceCast)
	cb.Do("Unk_fca3b69", &t.Unk_fca3b69)
	cb.Do("ArPowerScriptParams", &t.ArPowerScriptParams)
}

type Type_56dcc16f struct {
	// Inherits Type_d4213c9b
	DwType      DT_UINT
	Unk_9b2bc26 Type_80554fed
	Unk_77ed19a DT_ENUM
	DwPad       DT_UINT
}

func (t *Type_56dcc16f) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_9b2bc26, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.Unk_77ed19a, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+56, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_56dcc16f) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("Unk_9b2bc26", &t.Unk_9b2bc26)
	cb.Do("Unk_77ed19a", &t.Unk_77ed19a)
	cb.Do("DwPad", &t.DwPad)
}

type ActorItemData struct {
	SnoItemInventorySound                DT_SNO
	SnoSalvageSound                      DT_SNO
	SnoRepairSound                       DT_SNO
	SnoCraftedSound                      DT_SNO
	SnoPickupOverrideSound               DT_SNO
	Unk_9aa038d                          DT_SNO
	SnoFlippyLandingSound                DT_SNO
	SnoFlippyMouseoverSound              DT_SNO
	ArFoleyMaterialTags                  DT_FIXEDARRAY[*FoleyMaterialTag]
	Unk_472eb5b                          DT_SNO
	SnoLootFlippyParticle                DT_SNO
	SnoLootSpecialFlippyActor            DT_SNO
	FLootLaunchFlippyForwards            DT_INT
	FLootFlippyDontOverrideParticleActor DT_INT
	Unk_13d073c                          DT_INT
	Unk_8fb3d30                          DT_INT
	Unk_842ce3a                          DT_INT
	FlLootFlippyLandingHeight            DT_FLOAT
	Unk_62f6313                          DT_SNO
	Unk_221fdb7                          DT_SNO
	SnoPickupEffectGroup                 DT_SNO
	TAttachmentHardpointLink             HardpointLink
	Unk_204fa35                          DT_ENUM
	Unk_28e7959                          DT_INT
	Unk_1427368                          DT_INT
	Unk_62c39fe                          Type_4bd0bef6
	Unk_98050e1                          DT_INT
	Unk_17c40c2                          DT_FIXEDARRAY[*Type_4bd0bef6]
	SnoAttachedActor                     DT_SNO
	HDefaultImage                        DT_UINT
	HSocketedImage                       DT_UINT
	HSocketedActiveImage                 DT_UINT
	FMustKeepInInventory                 DT_INT
	FBottomless                          DT_INT
	EItemUseType                         DT_ENUM
	SnoPowerUpPower                      DT_SNO
	SnoItemUseLevelAreaRequirement       DT_SNO
	THardpointOffsets                    DT_FIXEDARRAY[*HardpointOffsets]
	Unk_c0b773                           DT_FIXEDARRAY[*HardpointOffsets]
	Unk_def7f43                          DT_VARIABLEARRAY[*HardpointOffset]
	TWeaponData                          ActorWeaponData
	Unk_3b0050f                          ActorVisualInventoryData
	Unk_e133e62                          DT_INT
	Unk_6990c4a                          DT_ENUM
}

func (t *ActorItemData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoItemInventorySound, r, &Options{
		Flags: 1,
		Group: 40,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.SnoSalvageSound, r, &Options{
		Flags: 1,
		Group: 40,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.SnoRepairSound, r, &Options{
		Flags: 1,
		Group: 40,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.SnoCraftedSound, r, &Options{
		Flags: 1,
		Group: 40,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoPickupOverrideSound, r, &Options{
		Flags: 1,
		Group: 40,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.Unk_9aa038d, r, &Options{
		Flags: 1,
		Group: 40,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SnoFlippyLandingSound, r, &Options{
		Flags: 1,
		Group: 40,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.SnoFlippyMouseoverSound, r, &Options{
		Flags: 1,
		Group: 40,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.ArFoleyMaterialTags, r, &Options{
		ArrayLength: 5,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.Unk_472eb5b, r, &Options{
		Flags: 1,
		Group: 79,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.SnoLootFlippyParticle, r, &Options{
		Flags: 1,
		Group: 27,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+60, &t.SnoLootSpecialFlippyActor, r, &Options{
		Flags: 1,
		Group: 1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.FLootLaunchFlippyForwards, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.FLootFlippyDontOverrideParticleActor, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_13d073c, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.Unk_8fb3d30, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.Unk_842ce3a, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.FlLootFlippyLandingHeight, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.Unk_62f6313, r, &Options{
		Flags: 1,
		Group: 27,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.Unk_221fdb7, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.SnoPickupEffectGroup, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+100, &t.TAttachmentHardpointLink, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+108, &t.Unk_204fa35, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.Unk_28e7959, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+116, &t.Unk_1427368, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.Unk_62c39fe, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+144, &t.Unk_98050e1, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+148, &t.Unk_17c40c2, r, &Options{
		ArrayLength: 5,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+268, &t.SnoAttachedActor, r, &Options{
		Flags: 1,
		Group: 1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+272, &t.HDefaultImage, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+276, &t.HSocketedImage, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+280, &t.HSocketedActiveImage, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+284, &t.FMustKeepInInventory, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+288, &t.FBottomless, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+292, &t.EItemUseType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+296, &t.SnoPowerUpPower, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+300, &t.SnoItemUseLevelAreaRequirement, r, &Options{
		Flags: 513,
		Group: 22,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+304, &t.THardpointOffsets, r, &Options{
		ArrayLength: 5,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+464, &t.Unk_c0b773, r, &Options{
		ArrayLength: 5,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+624, &t.Unk_def7f43, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+640, &t.TWeaponData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+656, &t.Unk_3b0050f, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+740, &t.Unk_e133e62, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+744, &t.Unk_6990c4a, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+752, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ActorItemData) Walk(cb WalkCallback) {
	cb.Do("SnoItemInventorySound", &t.SnoItemInventorySound)
	cb.Do("SnoSalvageSound", &t.SnoSalvageSound)
	cb.Do("SnoRepairSound", &t.SnoRepairSound)
	cb.Do("SnoCraftedSound", &t.SnoCraftedSound)
	cb.Do("SnoPickupOverrideSound", &t.SnoPickupOverrideSound)
	cb.Do("Unk_9aa038d", &t.Unk_9aa038d)
	cb.Do("SnoFlippyLandingSound", &t.SnoFlippyLandingSound)
	cb.Do("SnoFlippyMouseoverSound", &t.SnoFlippyMouseoverSound)
	cb.Do("ArFoleyMaterialTags", &t.ArFoleyMaterialTags)
	cb.Do("Unk_472eb5b", &t.Unk_472eb5b)
	cb.Do("SnoLootFlippyParticle", &t.SnoLootFlippyParticle)
	cb.Do("SnoLootSpecialFlippyActor", &t.SnoLootSpecialFlippyActor)
	cb.Do("FLootLaunchFlippyForwards", &t.FLootLaunchFlippyForwards)
	cb.Do("FLootFlippyDontOverrideParticleActor", &t.FLootFlippyDontOverrideParticleActor)
	cb.Do("Unk_13d073c", &t.Unk_13d073c)
	cb.Do("Unk_8fb3d30", &t.Unk_8fb3d30)
	cb.Do("Unk_842ce3a", &t.Unk_842ce3a)
	cb.Do("FlLootFlippyLandingHeight", &t.FlLootFlippyLandingHeight)
	cb.Do("Unk_62f6313", &t.Unk_62f6313)
	cb.Do("Unk_221fdb7", &t.Unk_221fdb7)
	cb.Do("SnoPickupEffectGroup", &t.SnoPickupEffectGroup)
	cb.Do("TAttachmentHardpointLink", &t.TAttachmentHardpointLink)
	cb.Do("Unk_204fa35", &t.Unk_204fa35)
	cb.Do("Unk_28e7959", &t.Unk_28e7959)
	cb.Do("Unk_1427368", &t.Unk_1427368)
	cb.Do("Unk_62c39fe", &t.Unk_62c39fe)
	cb.Do("Unk_98050e1", &t.Unk_98050e1)
	cb.Do("Unk_17c40c2", &t.Unk_17c40c2)
	cb.Do("SnoAttachedActor", &t.SnoAttachedActor)
	cb.Do("HDefaultImage", &t.HDefaultImage)
	cb.Do("HSocketedImage", &t.HSocketedImage)
	cb.Do("HSocketedActiveImage", &t.HSocketedActiveImage)
	cb.Do("FMustKeepInInventory", &t.FMustKeepInInventory)
	cb.Do("FBottomless", &t.FBottomless)
	cb.Do("EItemUseType", &t.EItemUseType)
	cb.Do("SnoPowerUpPower", &t.SnoPowerUpPower)
	cb.Do("SnoItemUseLevelAreaRequirement", &t.SnoItemUseLevelAreaRequirement)
	cb.Do("THardpointOffsets", &t.THardpointOffsets)
	cb.Do("Unk_c0b773", &t.Unk_c0b773)
	cb.Do("Unk_def7f43", &t.Unk_def7f43)
	cb.Do("TWeaponData", &t.TWeaponData)
	cb.Do("Unk_3b0050f", &t.Unk_3b0050f)
	cb.Do("Unk_e133e62", &t.Unk_e133e62)
	cb.Do("Unk_6990c4a", &t.Unk_6990c4a)
}

type Type_56ff7d6a struct {
	ArSeasons DT_VARIABLEARRAY[*DT_SNO]
}

func (t *Type_56ff7d6a) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.ArSeasons, r, &Options{
		Flags: 513,
		Group: 137,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_56ff7d6a) Walk(cb WalkCallback) {
	cb.Do("ArSeasons", &t.ArSeasons)
}

type TrackedQuestChangedMessage struct {
	THeader         RequiredMessageHeader
	AnnPlayer       DT_ACD_NETWORK_NAME
	SnoTrackedQuest DT_SNO
}

func (t *TrackedQuestChangedMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.AnnPlayer, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SnoTrackedQuest, r, &Options{
		Flags: 1,
		Group: 31,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+28, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TrackedQuestChangedMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("AnnPlayer", &t.AnnPlayer)
	cb.Do("SnoTrackedQuest", &t.SnoTrackedQuest)
}

type ParagonGlyphDefinition struct {
	HIcon               DT_UINT
	NStartingSize       DT_UINT
	ArSizeUpgradeLevels DT_VARIABLEARRAY[*DT_UINT]
	NMaxLevel           DT_UINT
	ERarity             DT_ENUM
	FUsableByClass      DT_FIXEDARRAY[*DT_INT]
	ArAffixes           DT_VARIABLEARRAY[*DT_SNO]
}

func (t *ParagonGlyphDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.HIcon, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.NStartingSize, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.ArSizeUpgradeLevels, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.NMaxLevel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.ERarity, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.FUsableByClass, r, &Options{
		ArrayLength: 5,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.ArAffixes, r, &Options{
		Flags: 1,
		Group: 112,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+80, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ParagonGlyphDefinition) Walk(cb WalkCallback) {
	cb.Do("HIcon", &t.HIcon)
	cb.Do("NStartingSize", &t.NStartingSize)
	cb.Do("ArSizeUpgradeLevels", &t.ArSizeUpgradeLevels)
	cb.Do("NMaxLevel", &t.NMaxLevel)
	cb.Do("ERarity", &t.ERarity)
	cb.Do("FUsableByClass", &t.FUsableByClass)
	cb.Do("ArAffixes", &t.ArAffixes)
}

type Type_572f201c struct {
	// Inherits PowerPhaseBase
	// Inherits PolymorphicBase
	DwType      DT_UINT
	DwPad       DT_UINT
	TPhaseName  DT_UINT
	Unk_fcb7313 DT_POLYMORPHIC_VARIABLEARRAY[*DT_INT64]
	Unk_d0d932b DT_INT
	Unk_9a8200e DT_INT
}

func (t *Type_572f201c) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TPhaseName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_fcb7313, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.Unk_d0d932b, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.Unk_9a8200e, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+56, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_572f201c) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("TPhaseName", &t.TPhaseName)
	cb.Do("Unk_fcb7313", &t.Unk_fcb7313)
	cb.Do("Unk_d0d932b", &t.Unk_d0d932b)
	cb.Do("Unk_9a8200e", &t.Unk_9a8200e)
}

type ACDSyncBuffsMessage struct {
	THeader                       RequiredMessageHeader
	Ann                           DT_ACD_NETWORK_NAME
	Unk_35403b1                   DT_INT
	ArBuffs                       DT_FIXEDARRAY[*Type_a539118b]
	TEnterKnownLookOverrides      DT_OPTIONAL[*EnterKnownLookOverrides]
	TEnterKnownShaderMapOverrides DT_OPTIONAL[*EnterKnownShaderMapOverrides]
}

func (t *ACDSyncBuffsMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Ann, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_35403b1, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.ArBuffs, r, &Options{
		ArrayLength: 15,
		Flags:       8,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1652, &t.TEnterKnownLookOverrides, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1704, &t.TEnterKnownShaderMapOverrides, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+1732, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ACDSyncBuffsMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("Ann", &t.Ann)
	cb.Do("Unk_35403b1", &t.Unk_35403b1)
	cb.Do("ArBuffs", &t.ArBuffs)
	cb.Do("TEnterKnownLookOverrides", &t.TEnterKnownLookOverrides)
	cb.Do("TEnterKnownShaderMapOverrides", &t.TEnterKnownShaderMapOverrides)
}

type AllLogicSubcondition struct {
	// Inherits LogicSubcondition
	// Inherits Subcondition
	// Inherits PolymorphicBase
	DwType       DT_UINT
	BNegate      DT_INT
	DwPad        DT_UINT
	ArConditions DT_POLYMORPHIC_VARIABLEARRAY[*DT_INT64]
}

func (t *AllLogicSubcondition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BNegate, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ArConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *AllLogicSubcondition) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("BNegate", &t.BNegate)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("ArConditions", &t.ArConditions)
}

type MonsterFamilySubcondition struct {
	// Inherits Subcondition
	// Inherits PolymorphicBase
	DwType           DT_UINT
	BNegate          DT_INT
	DwPad            DT_UINT
	SnoMonsterFamily DT_SNO
	SzArchetype      DT_UINT
	Unk_c7b2b18      DT_ENUM
}

func (t *MonsterFamilySubcondition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BNegate, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SnoMonsterFamily, r, &Options{
		Flags: 513,
		Group: 82,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.SzArchetype, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.Unk_c7b2b18, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+40, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *MonsterFamilySubcondition) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("BNegate", &t.BNegate)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("SnoMonsterFamily", &t.SnoMonsterFamily)
	cb.Do("SzArchetype", &t.SzArchetype)
	cb.Do("Unk_c7b2b18", &t.Unk_c7b2b18)
}

type GizmoMessage struct {
	THeader        RequiredCommandFrameMessageHeader
	AnnGizmo       DT_ACD_NETWORK_NAME
	DwGizmoContext DT_OPTIONAL[*DT_UINT]
}

func (t *GizmoMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.AnnGizmo, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.DwGizmoContext, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+36, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *GizmoMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("AnnGizmo", &t.AnnGizmo)
	cb.Do("DwGizmoContext", &t.DwGizmoContext)
}

type ActorGroupData_Table struct {
	// Inherits GameBalanceTable
	// Inherits PolymorphicBase
	DwType   DT_UINT
	DwPad    DT_UINT
	TEntries DT_VARIABLEARRAY[*ActorGroupData]
}

func (t *ActorGroupData_Table) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TEntries, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ActorGroupData_Table) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("TEntries", &t.TEntries)
}

type TraceMessage struct {
	TTraceId        Type_f5ac91bb
	SzSpanId        DT_CHARARRAY
	DwGameAccountId DT_UINT
	SzName          DT_CHARARRAY
	FIsTracked      DT_INT
}

func (t *TraceMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.TTraceId, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SzSpanId, r, &Options{
		ArrayLength: 17,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.DwGameAccountId, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.SzName, r, &Options{
		ArrayLength: 33,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.FIsTracked, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+80, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TraceMessage) Walk(cb WalkCallback) {
	cb.Do("TTraceId", &t.TTraceId)
	cb.Do("SzSpanId", &t.SzSpanId)
	cb.Do("DwGameAccountId", &t.DwGameAccountId)
	cb.Do("SzName", &t.SzName)
	cb.Do("FIsTracked", &t.FIsTracked)
}

type Type_5887daa1 struct {
	Unk_52f2d9  StringLabelHandleEx
	Unk_bb31b91 DT_CSTRING[*DT_BYTE]
	Unk_a1d8ccf DT_CSTRING[*DT_BYTE]
}

func (t *Type_5887daa1) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Unk_52f2d9, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.Unk_bb31b91, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_a1d8ccf, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+40, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_5887daa1) Walk(cb WalkCallback) {
	cb.Do("Unk_52f2d9", &t.Unk_52f2d9)
	cb.Do("Unk_bb31b91", &t.Unk_bb31b91)
	cb.Do("Unk_a1d8ccf", &t.Unk_a1d8ccf)
}

type TriggerEventActorPlayAnimation struct {
	// Inherits TriggerEventRangedDuration
	// Inherits TriggerEvent
	// Inherits PolymorphicBase
	DwType             DT_UINT
	TConditions        TriggerConditions
	FGenerated         DT_INT
	Unk_6cba752        DT_INT
	DwParentActorID    DT_UINT
	TDuration          DT_FLOAT
	DwTriggerFlags     DT_UINT
	DwTriggerFlagsEx   DT_UINT
	TCleanup           TriggerCleanup
	Unk_49e9257        DT_INT
	Unk_5490979        DT_INT
	DwPad              DT_UINT
	Unk_f3d6423        DT_ENUM
	Unk_478755b        DT_ENUM
	Unk_4d01218        DT_FLOAT
	Unk_84dd910        DT_FLOAT
	DwActorID          DT_UINT
	EAnimLayerMode     DT_ENUM
	Unk_9209538        DT_ENUM
	Unk_a5153a1        DT_INT
	Unk_5ed01be        DT_INT
	Unk_9b2ead         DT_INT
	SnonameAnim        DT_SNO_NAME
	Unk_85269a4        DT_INT
	FRandomPermutation DT_INT
	NPermutationIndex  DT_INT
	Unk_32a328c        DT_INT
	FlAnimSpeedScale   DT_FLOAT
	DwAnimWeight       DT_BYTE
	EAnimLoopMode      DT_ENUM
	Unk_c86af88        DT_FLOAT
	Unk_396c7d1        DT_FLOAT
	Unk_515279b        DT_INT
	SzLocatorName      DT_UINT
	FlLocatorBlend     DT_FLOAT
}

func (t *TriggerEventActorPlayAnimation) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.FGenerated, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_6cba752, r, &Options{Flags: 16}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.DwParentActorID, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.TDuration, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.DwTriggerFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.DwTriggerFlagsEx, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.TCleanup, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+116, &t.Unk_49e9257, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.Unk_5490979, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+124, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.Unk_f3d6423, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+132, &t.Unk_478755b, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+136, &t.Unk_4d01218, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+140, &t.Unk_84dd910, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+144, &t.DwActorID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+148, &t.EAnimLayerMode, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+152, &t.Unk_9209538, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+156, &t.Unk_a5153a1, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+160, &t.Unk_5ed01be, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+164, &t.Unk_9b2ead, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+168, &t.SnonameAnim, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+176, &t.Unk_85269a4, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+180, &t.FRandomPermutation, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+184, &t.NPermutationIndex, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+188, &t.Unk_32a328c, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+192, &t.FlAnimSpeedScale, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+196, &t.DwAnimWeight, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+200, &t.EAnimLoopMode, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+204, &t.Unk_c86af88, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+208, &t.Unk_396c7d1, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+212, &t.Unk_515279b, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+216, &t.SzLocatorName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+220, &t.FlLocatorBlend, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+224, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TriggerEventActorPlayAnimation) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("TConditions", &t.TConditions)
	cb.Do("FGenerated", &t.FGenerated)
	cb.Do("Unk_6cba752", &t.Unk_6cba752)
	cb.Do("DwParentActorID", &t.DwParentActorID)
	cb.Do("TDuration", &t.TDuration)
	cb.Do("DwTriggerFlags", &t.DwTriggerFlags)
	cb.Do("DwTriggerFlagsEx", &t.DwTriggerFlagsEx)
	cb.Do("TCleanup", &t.TCleanup)
	cb.Do("Unk_49e9257", &t.Unk_49e9257)
	cb.Do("Unk_5490979", &t.Unk_5490979)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("Unk_f3d6423", &t.Unk_f3d6423)
	cb.Do("Unk_478755b", &t.Unk_478755b)
	cb.Do("Unk_4d01218", &t.Unk_4d01218)
	cb.Do("Unk_84dd910", &t.Unk_84dd910)
	cb.Do("DwActorID", &t.DwActorID)
	cb.Do("EAnimLayerMode", &t.EAnimLayerMode)
	cb.Do("Unk_9209538", &t.Unk_9209538)
	cb.Do("Unk_a5153a1", &t.Unk_a5153a1)
	cb.Do("Unk_5ed01be", &t.Unk_5ed01be)
	cb.Do("Unk_9b2ead", &t.Unk_9b2ead)
	cb.Do("SnonameAnim", &t.SnonameAnim)
	cb.Do("Unk_85269a4", &t.Unk_85269a4)
	cb.Do("FRandomPermutation", &t.FRandomPermutation)
	cb.Do("NPermutationIndex", &t.NPermutationIndex)
	cb.Do("Unk_32a328c", &t.Unk_32a328c)
	cb.Do("FlAnimSpeedScale", &t.FlAnimSpeedScale)
	cb.Do("DwAnimWeight", &t.DwAnimWeight)
	cb.Do("EAnimLoopMode", &t.EAnimLoopMode)
	cb.Do("Unk_c86af88", &t.Unk_c86af88)
	cb.Do("Unk_396c7d1", &t.Unk_396c7d1)
	cb.Do("Unk_515279b", &t.Unk_515279b)
	cb.Do("SzLocatorName", &t.SzLocatorName)
	cb.Do("FlLocatorBlend", &t.FlLocatorBlend)
}

type DemonSummoningQuestBucket_Table struct {
	// Inherits GameBalanceTable
	// Inherits PolymorphicBase
	DwType   DT_UINT
	DwPad    DT_UINT
	TEntries DT_VARIABLEARRAY[*DemonSummoningQuestBucket]
}

func (t *DemonSummoningQuestBucket_Table) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TEntries, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *DemonSummoningQuestBucket_Table) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("TEntries", &t.TEntries)
}

type ScriptEventParamSpawnerParentName struct {
	// Inherits ScriptEventParamBase
	// Inherits PolymorphicBase
	DwType       DT_UINT
	EParamType   DT_ENUM
	DwPad        DT_UINT
	DwParentHash DT_UINT
	SzParent     DT_CSTRING[*DT_BYTE]
}

func (t *ScriptEventParamSpawnerParentName) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.EParamType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.DwParentHash, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.SzParent, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ScriptEventParamSpawnerParentName) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("EParamType", &t.EParamType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("DwParentHash", &t.DwParentHash)
	cb.Do("SzParent", &t.SzParent)
}

type ScriptEventParamSpawnerParentSelf struct {
	// Inherits ScriptEventParamBase
	// Inherits PolymorphicBase
	DwType     DT_UINT
	EParamType DT_ENUM
	DwPad      DT_UINT
}

func (t *ScriptEventParamSpawnerParentSelf) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.EParamType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ScriptEventParamSpawnerParentSelf) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("EParamType", &t.EParamType)
	cb.Do("DwPad", &t.DwPad)
}

type MarkerSplineData struct {
	// Inherits MarkerDataBase
	// Inherits PolymorphicBase
	DwType             DT_UINT
	DwPad              DT_UINT
	EInterpolationMode DT_ENUM
	Unk_a3f1699        DT_FLOAT
}

func (t *MarkerSplineData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.EInterpolationMode, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.Unk_a3f1699, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *MarkerSplineData) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("EInterpolationMode", &t.EInterpolationMode)
	cb.Do("Unk_a3f1699", &t.Unk_a3f1699)
}

type ClassPassiveSkillSlotData struct {
	TUnlockCondition ConditionWrapper
}

func (t *ClassPassiveSkillSlotData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.TUnlockCondition, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ClassPassiveSkillSlotData) Walk(cb WalkCallback) {
	cb.Do("TUnlockCondition", &t.TUnlockCondition)
}

type UIThumbButtonStyle struct {
	// Inherits UIButtonStyle
	// Inherits UITextStyle
	// Inherits UIWindowStyle
	// Inherits UIControlStyle
	// Inherits PolymorphicBase
	DwType                    DT_UINT
	DwPad                     DT_UINT
	HParentStyle              UIControlHandle
	Unk_441f783               DT_INT64
	M_eHasModifiedPowerTagMap DT_TAGMAP[*DT_ENUM]
	TConsoleInput             UIControlConsoleInput
	Unk_b4f614c               DT_TAGMAP[*DT_ENUM]
	TFont                     UIControlFont
	Unk_4741819               DT_TAGMAP[*DT_ENUM]
	TIcon                     UIControlIcon
	TClickSounds              UIControlClickSounds
	Unk_10f81f0               DT_TAGMAP[*DT_ENUM]
}

func (t *UIThumbButtonStyle) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.HParentStyle, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_441f783, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.M_eHasModifiedPowerTagMap, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.TConsoleInput, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.Unk_b4f614c, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.TFont, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.Unk_4741819, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.TIcon, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.TClickSounds, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+144, &t.Unk_10f81f0, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+160, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *UIThumbButtonStyle) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("HParentStyle", &t.HParentStyle)
	cb.Do("Unk_441f783", &t.Unk_441f783)
	cb.Do("M_eHasModifiedPowerTagMap", &t.M_eHasModifiedPowerTagMap)
	cb.Do("TConsoleInput", &t.TConsoleInput)
	cb.Do("Unk_b4f614c", &t.Unk_b4f614c)
	cb.Do("TFont", &t.TFont)
	cb.Do("Unk_4741819", &t.Unk_4741819)
	cb.Do("TIcon", &t.TIcon)
	cb.Do("TClickSounds", &t.TClickSounds)
	cb.Do("Unk_10f81f0", &t.Unk_10f81f0)
}

type NPCComponentSetDefinition struct {
	ArAppearances   DT_VARIABLEARRAY[*DT_SNO]
	ArSkinColors    DT_VARIABLEARRAY[*DT_INT]
	ArHairColors    DT_VARIABLEARRAY[*DT_INT]
	ArEquipmentDyes DT_VARIABLEARRAY[*DT_SNO]
	Unk_e8ad810     DT_VARIABLEARRAY[*Type_1b652647]
	Unk_be478b4     DT_VARIABLEARRAY[*Type_993e31cf]
	Unk_7cdd390     DT_FIXEDARRAY[*DT_VARIABLEARRAY[*DT_UINT]]
	Unk_8bee334     DT_FIXEDARRAY[*DT_VARIABLEARRAY[*DT_INT]]
	Unk_2e94cee     DT_VARIABLEARRAY[*Type_9b106a7f]
	Unk_395e53      DT_VARIABLEARRAY[*Type_1109bb04]
	Unk_3810f4      DT_VARIABLEARRAY[*Type_1f34a5e5]
	Unk_80d753b     FoleyMaterialTag
	Unk_1ae0e98     DT_ENUM
}

func (t *NPCComponentSetDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.ArAppearances, r, &Options{
		Flags: 1,
		Group: 9,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ArSkinColors, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.ArHairColors, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.ArEquipmentDyes, r, &Options{
		Flags: 1,
		Group: 122,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_e8ad810, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.Unk_be478b4, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+104, &t.Unk_7cdd390, r, &Options{ArrayLength: 4}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+168, &t.Unk_8bee334, r, &Options{ArrayLength: 4}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+232, &t.Unk_2e94cee, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+248, &t.Unk_395e53, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+264, &t.Unk_3810f4, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+280, &t.Unk_80d753b, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+284, &t.Unk_1ae0e98, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+288, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *NPCComponentSetDefinition) Walk(cb WalkCallback) {
	cb.Do("ArAppearances", &t.ArAppearances)
	cb.Do("ArSkinColors", &t.ArSkinColors)
	cb.Do("ArHairColors", &t.ArHairColors)
	cb.Do("ArEquipmentDyes", &t.ArEquipmentDyes)
	cb.Do("Unk_e8ad810", &t.Unk_e8ad810)
	cb.Do("Unk_be478b4", &t.Unk_be478b4)
	cb.Do("Unk_7cdd390", &t.Unk_7cdd390)
	cb.Do("Unk_8bee334", &t.Unk_8bee334)
	cb.Do("Unk_2e94cee", &t.Unk_2e94cee)
	cb.Do("Unk_395e53", &t.Unk_395e53)
	cb.Do("Unk_3810f4", &t.Unk_3810f4)
	cb.Do("Unk_80d753b", &t.Unk_80d753b)
	cb.Do("Unk_1ae0e98", &t.Unk_1ae0e98)
}

type ParagonGlyphUpgradeMessage struct {
	THeader     RequiredMessageHeader
	SnoGlyph    DT_SNO
	Unk_6499985 DT_UINT
}

func (t *ParagonGlyphUpgradeMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoGlyph, r, &Options{
		Flags: 1,
		Group: 111,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.Unk_6499985, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ParagonGlyphUpgradeMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("SnoGlyph", &t.SnoGlyph)
	cb.Do("Unk_6499985", &t.Unk_6499985)
}

type HorizontalTiledWindowPieces struct {
	// Inherits WindowPiecesBase
	// Inherits PolymorphicBase
	DwType       DT_UINT
	DwPad        DT_UINT
	FlImageScale DT_FLOAT
	NPadding     DT_UINT
	HPieceLeft   DT_UINT
	HPieceRight  DT_UINT
	HPieceMiddle DT_UINT
}

func (t *HorizontalTiledWindowPieces) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.FlImageScale, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.NPadding, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.HPieceLeft, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.HPieceRight, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.HPieceMiddle, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+40, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *HorizontalTiledWindowPieces) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("FlImageScale", &t.FlImageScale)
	cb.Do("NPadding", &t.NPadding)
	cb.Do("HPieceLeft", &t.HPieceLeft)
	cb.Do("HPieceRight", &t.HPieceRight)
	cb.Do("HPieceMiddle", &t.HPieceMiddle)
}

type ClanLabel struct {
	SzName     DT_UINT
	ELabelType DT_ENUM
	BEnabled   DT_INT
}

func (t *ClanLabel) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SzName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.ELabelType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.BEnabled, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+12, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ClanLabel) Walk(cb WalkCallback) {
	cb.Do("SzName", &t.SzName)
	cb.Do("ELabelType", &t.ELabelType)
	cb.Do("BEnabled", &t.BEnabled)
}

type TerritoryRegionParams struct {
	SnoTexPattern DT_SNO
	RgbaColor     DT_RGBACOLOR
	Unk_4b95c37   DT_FLOAT
	Unk_be4fdf8   DT_FLOAT
	Unk_74b9406   DT_FLOAT
	FlFadeInTime  DT_FLOAT
}

func (t *TerritoryRegionParams) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoTexPattern, r, &Options{
		Flags: 1,
		Group: 44,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.RgbaColor, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.Unk_4b95c37, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.Unk_be4fdf8, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_74b9406, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.FlFadeInTime, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TerritoryRegionParams) Walk(cb WalkCallback) {
	cb.Do("SnoTexPattern", &t.SnoTexPattern)
	cb.Do("RgbaColor", &t.RgbaColor)
	cb.Do("Unk_4b95c37", &t.Unk_4b95c37)
	cb.Do("Unk_be4fdf8", &t.Unk_be4fdf8)
	cb.Do("Unk_74b9406", &t.Unk_74b9406)
	cb.Do("FlFadeInTime", &t.FlFadeInTime)
}

type AccountDefinition struct {
	PProtoData DT_VARIABLEARRAY[*DT_BYTE]
}

func (t *AccountDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.PProtoData, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *AccountDefinition) Walk(cb WalkCallback) {
	cb.Do("PProtoData", &t.PProtoData)
}

type UIComboBoxStyle struct {
	// Inherits UIWindowStyle
	// Inherits UIControlStyle
	// Inherits PolymorphicBase
	DwType                    DT_UINT
	DwPad                     DT_UINT
	HParentStyle              UIControlHandle
	Unk_441f783               DT_INT64
	M_eHasModifiedPowerTagMap DT_TAGMAP[*DT_ENUM]
	TConsoleInput             UIControlConsoleInput
	Unk_b4f614c               DT_TAGMAP[*DT_ENUM]
	TClickSounds              UIControlClickSounds
	TFont                     UIControlFont
	Unk_6657a4d               DT_TAGMAP[*DT_ENUM]
}

func (t *UIComboBoxStyle) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.HParentStyle, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_441f783, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.M_eHasModifiedPowerTagMap, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.TConsoleInput, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.Unk_b4f614c, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.TClickSounds, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.TFont, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.Unk_6657a4d, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+128, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *UIComboBoxStyle) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("HParentStyle", &t.HParentStyle)
	cb.Do("Unk_441f783", &t.Unk_441f783)
	cb.Do("M_eHasModifiedPowerTagMap", &t.M_eHasModifiedPowerTagMap)
	cb.Do("TConsoleInput", &t.TConsoleInput)
	cb.Do("Unk_b4f614c", &t.Unk_b4f614c)
	cb.Do("TClickSounds", &t.TClickSounds)
	cb.Do("TFont", &t.TFont)
	cb.Do("Unk_6657a4d", &t.Unk_6657a4d)
}

type SwitchGizmoData struct {
	// Inherits NamedGizmoData
	// Inherits ActorGizmoData
	// Inherits PolymorphicBase
	DwType                         DT_UINT
	DwPad                          DT_UINT
	FDisableNonFriendlyOperation   DT_INT
	FWalkToCenter                  DT_INT
	FGizmoStartsDisabled           DT_INT
	FUseStringListName             DT_INT
	FForceMinimapIcon              DT_INT
	FlOperationRadius              DT_FLOAT
	Unk_d0b1df5                    DT_FLOAT
	FlGizmoUseTime                 DT_FLOAT
	SnoChannelingEffect            DT_SNO
	Unk_2767229                    DT_INT
	FGizmoShowProgressBar          DT_INT
	Unk_6d9ebe1                    DT_INT
	Unk_5456245                    DT_INT
	Unk_af5815a                    DT_INT
	SnoOnClickEffect               DT_SNO
	SnoPickedUpEffect              DT_SNO
	SnoDropOnGroundEffect          DT_SNO
	TConditionData                 GizmoConditionData
	SnoPowerOperator               DT_SNO
	SnoPowerOperate                DT_SNO
	SnoPowerOperatorActive         DT_SNO
	SnoPowerOperateActive          DT_SNO
	Unk_359810e                    DT_INT
	NCooldown                      DT_UINT
	Unk_9c8478e                    DT_UINT
	Unk_d45ed2d                    DT_INT
	Unk_f6b20b7                    DT_INT
	Unk_54513b8                    DT_INT
	Unk_fd1f378                    DT_UINT
	Unk_487c14                     DT_UINT
	Unk_87f2609                    DT_UINT
	Unk_158eb4f                    DT_FLOAT
	Unk_ab58cd3                    DT_ENUM
	Unk_91a3966                    DT_UINT
	Unk_25312e5                    DT_UINT
	Unk_4be4371                    DT_INT
	TLockData                      LockingGizmoData
	TSwitchBehaviorData            SwitchBehaviorGizmoData
	FSwitchCanOperateMultipleTimes DT_INT
}

func (t *SwitchGizmoData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.FDisableNonFriendlyOperation, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.FWalkToCenter, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.FGizmoStartsDisabled, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.FUseStringListName, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.FForceMinimapIcon, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.FlOperationRadius, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.Unk_d0b1df5, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.FlGizmoUseTime, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.SnoChannelingEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.Unk_2767229, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.FGizmoShowProgressBar, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+60, &t.Unk_6d9ebe1, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.Unk_5456245, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.Unk_af5815a, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.SnoOnClickEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.SnoPickedUpEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.SnoDropOnGroundEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.TConditionData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.SnoPowerOperator, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.SnoPowerOperate, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.SnoPowerOperatorActive, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+100, &t.SnoPowerOperateActive, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+104, &t.Unk_359810e, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+108, &t.NCooldown, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.Unk_9c8478e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+116, &t.Unk_d45ed2d, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.Unk_f6b20b7, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+124, &t.Unk_54513b8, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.Unk_fd1f378, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+132, &t.Unk_487c14, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+136, &t.Unk_87f2609, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+140, &t.Unk_158eb4f, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+144, &t.Unk_ab58cd3, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+148, &t.Unk_91a3966, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+152, &t.Unk_25312e5, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+156, &t.Unk_4be4371, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+160, &t.TLockData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+196, &t.TSwitchBehaviorData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+200, &t.FSwitchCanOperateMultipleTimes, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+208, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *SwitchGizmoData) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("FDisableNonFriendlyOperation", &t.FDisableNonFriendlyOperation)
	cb.Do("FWalkToCenter", &t.FWalkToCenter)
	cb.Do("FGizmoStartsDisabled", &t.FGizmoStartsDisabled)
	cb.Do("FUseStringListName", &t.FUseStringListName)
	cb.Do("FForceMinimapIcon", &t.FForceMinimapIcon)
	cb.Do("FlOperationRadius", &t.FlOperationRadius)
	cb.Do("Unk_d0b1df5", &t.Unk_d0b1df5)
	cb.Do("FlGizmoUseTime", &t.FlGizmoUseTime)
	cb.Do("SnoChannelingEffect", &t.SnoChannelingEffect)
	cb.Do("Unk_2767229", &t.Unk_2767229)
	cb.Do("FGizmoShowProgressBar", &t.FGizmoShowProgressBar)
	cb.Do("Unk_6d9ebe1", &t.Unk_6d9ebe1)
	cb.Do("Unk_5456245", &t.Unk_5456245)
	cb.Do("Unk_af5815a", &t.Unk_af5815a)
	cb.Do("SnoOnClickEffect", &t.SnoOnClickEffect)
	cb.Do("SnoPickedUpEffect", &t.SnoPickedUpEffect)
	cb.Do("SnoDropOnGroundEffect", &t.SnoDropOnGroundEffect)
	cb.Do("TConditionData", &t.TConditionData)
	cb.Do("SnoPowerOperator", &t.SnoPowerOperator)
	cb.Do("SnoPowerOperate", &t.SnoPowerOperate)
	cb.Do("SnoPowerOperatorActive", &t.SnoPowerOperatorActive)
	cb.Do("SnoPowerOperateActive", &t.SnoPowerOperateActive)
	cb.Do("Unk_359810e", &t.Unk_359810e)
	cb.Do("NCooldown", &t.NCooldown)
	cb.Do("Unk_9c8478e", &t.Unk_9c8478e)
	cb.Do("Unk_d45ed2d", &t.Unk_d45ed2d)
	cb.Do("Unk_f6b20b7", &t.Unk_f6b20b7)
	cb.Do("Unk_54513b8", &t.Unk_54513b8)
	cb.Do("Unk_fd1f378", &t.Unk_fd1f378)
	cb.Do("Unk_487c14", &t.Unk_487c14)
	cb.Do("Unk_87f2609", &t.Unk_87f2609)
	cb.Do("Unk_158eb4f", &t.Unk_158eb4f)
	cb.Do("Unk_ab58cd3", &t.Unk_ab58cd3)
	cb.Do("Unk_91a3966", &t.Unk_91a3966)
	cb.Do("Unk_25312e5", &t.Unk_25312e5)
	cb.Do("Unk_4be4371", &t.Unk_4be4371)
	cb.Do("TLockData", &t.TLockData)
	cb.Do("TSwitchBehaviorData", &t.TSwitchBehaviorData)
	cb.Do("FSwitchCanOperateMultipleTimes", &t.FSwitchCanOperateMultipleTimes)
}

type Type_59996094 struct {
	THeader     RequiredMessageHeader
	Ann         DT_ACD_NETWORK_NAME
	Unk_bfd00e5 DT_INT
}

func (t *Type_59996094) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Ann, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_bfd00e5, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+28, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_59996094) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("Ann", &t.Ann)
	cb.Do("Unk_bfd00e5", &t.Unk_bfd00e5)
}

type MonsterACDInfo struct {
	EActorVariantType  DT_ENUM
	EGender            DT_ENUM
	EWeaponClass       DT_ENUM
	SnoAnimSetOverride DT_SNO
	SnoMonsterAffixes  DT_FIXEDARRAY[*DT_SNO]
	Unk_bec65ae        DT_FIXEDARRAY[*DT_SNO]
}

func (t *MonsterACDInfo) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.EActorVariantType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.EGender, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.EWeaponClass, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.SnoAnimSetOverride, r, &Options{
		Flags: 1,
		Group: 8,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoMonsterAffixes, r, &Options{
		ArrayLength: 4,
		Flags:       9,
		Group:       107,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.Unk_bec65ae, r, &Options{
		ArrayLength: 4,
		Flags:       9,
		Group:       107,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+56, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *MonsterACDInfo) Walk(cb WalkCallback) {
	cb.Do("EActorVariantType", &t.EActorVariantType)
	cb.Do("EGender", &t.EGender)
	cb.Do("EWeaponClass", &t.EWeaponClass)
	cb.Do("SnoAnimSetOverride", &t.SnoAnimSetOverride)
	cb.Do("SnoMonsterAffixes", &t.SnoMonsterAffixes)
	cb.Do("Unk_bec65ae", &t.Unk_bec65ae)
}

type GlobalCrafterEvents struct {
	SnoConversations DT_FIXEDARRAY[*DT_SNO]
}

func (t *GlobalCrafterEvents) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoConversations, r, &Options{
		ArrayLength: 7,
		Flags:       1,
		Group:       12,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+28, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *GlobalCrafterEvents) Walk(cb WalkCallback) {
	cb.Do("SnoConversations", &t.SnoConversations)
}

type DemonSummoningRitualQuests struct {
	SnoStartQuest      DT_SNO
	ArActivityQuests   DT_VARIABLEARRAY[*DT_SNO]
	ArCompletionQuests DT_VARIABLEARRAY[*DT_SNO]
	SnoRitualItem      DT_SNO
	Unk_9f4512f        DT_FIXEDARRAY[*DT_UINT]
	Unk_8649a3e        DT_FIXEDARRAY[*DT_UINT]
	Unk_85f303c        DT_FIXEDARRAY[*DT_UINT]
}

func (t *DemonSummoningRitualQuests) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoStartQuest, r, &Options{
		Flags: 1,
		Group: 31,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.ArActivityQuests, r, &Options{
		Flags: 1,
		Group: 31,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ArCompletionQuests, r, &Options{
		Flags: 1,
		Group: 31,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.SnoRitualItem, r, &Options{
		Flags: 1,
		Group: 73,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.Unk_9f4512f, r, &Options{
		ArrayLength: 3,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.Unk_8649a3e, r, &Options{
		ArrayLength: 3,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.Unk_85f303c, r, &Options{
		ArrayLength: 3,
		Flags:       1,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+80, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *DemonSummoningRitualQuests) Walk(cb WalkCallback) {
	cb.Do("SnoStartQuest", &t.SnoStartQuest)
	cb.Do("ArActivityQuests", &t.ArActivityQuests)
	cb.Do("ArCompletionQuests", &t.ArCompletionQuests)
	cb.Do("SnoRitualItem", &t.SnoRitualItem)
	cb.Do("Unk_9f4512f", &t.Unk_9f4512f)
	cb.Do("Unk_8649a3e", &t.Unk_8649a3e)
	cb.Do("Unk_85f303c", &t.Unk_85f303c)
}

type GameTestingPersonaSamplingStartMessage struct {
	THeader       RequiredMessageHeader
	SnoClass      DT_SNO
	SnoFacialHair DT_SNO
	SnoHairStyle  DT_SNO
	SnoJewelry    DT_SNO
	BFemale       DT_INT
}

func (t *GameTestingPersonaSamplingStartMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoClass, r, &Options{
		Flags: 1,
		Group: 74,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.SnoFacialHair, r, &Options{
		Flags: 1,
		Group: 139,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SnoHairStyle, r, &Options{
		Flags: 1,
		Group: 138,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.SnoJewelry, r, &Options{
		Flags: 1,
		Group: 119,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.BFemale, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+36, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *GameTestingPersonaSamplingStartMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("SnoClass", &t.SnoClass)
	cb.Do("SnoFacialHair", &t.SnoFacialHair)
	cb.Do("SnoHairStyle", &t.SnoHairStyle)
	cb.Do("SnoJewelry", &t.SnoJewelry)
	cb.Do("BFemale", &t.BFemale)
}

type SurveyTypeEntry_Table struct {
	// Inherits GameBalanceTable
	// Inherits PolymorphicBase
	DwType   DT_UINT
	DwPad    DT_UINT
	TEntries DT_VARIABLEARRAY[*SurveyTypeEntry]
}

func (t *SurveyTypeEntry_Table) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TEntries, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *SurveyTypeEntry_Table) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("TEntries", &t.TEntries)
}

type SoundTableEntry struct {
	DwID                DT_UINT
	SzTag               DT_UINT
	SnoSound            DT_SNO
	SnoSoundFriendly    DT_SNO
	SnoSoundNotFriendly DT_SNO
	DwFlags             DT_UINT
}

func (t *SoundTableEntry) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.DwID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.SzTag, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.SnoSound, r, &Options{
		Flags: 1,
		Group: 40,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.SnoSoundFriendly, r, &Options{
		Flags: 1,
		Group: 40,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoSoundNotFriendly, r, &Options{
		Flags: 1,
		Group: 40,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *SoundTableEntry) Walk(cb WalkCallback) {
	cb.Do("DwID", &t.DwID)
	cb.Do("SzTag", &t.SzTag)
	cb.Do("SnoSound", &t.SnoSound)
	cb.Do("SnoSoundFriendly", &t.SnoSoundFriendly)
	cb.Do("SnoSoundNotFriendly", &t.SnoSoundNotFriendly)
	cb.Do("DwFlags", &t.DwFlags)
}

type PlayerLevelSubcondition struct {
	// Inherits Type_d3c3637f
	// Inherits Subcondition
	// Inherits PolymorphicBase
	DwType        DT_UINT
	BNegate       DT_INT
	EComparisonOp DT_ENUM
	DwPad         DT_UINT
	NLevel        DT_INT
}

func (t *PlayerLevelSubcondition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BNegate, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.EComparisonOp, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.NLevel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+40, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PlayerLevelSubcondition) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("BNegate", &t.BNegate)
	cb.Do("EComparisonOp", &t.EComparisonOp)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("NLevel", &t.NLevel)
}

type MaterialScalarValueDefinition struct {
	// Inherits DefaultMaterialValueDefinition
	// Inherits PolymorphicBase
	DwType DT_UINT
	DwPad  DT_UINT
	VValue DT_VECTOR4D
}

func (t *MaterialScalarValueDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.VValue, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *MaterialScalarValueDefinition) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("VValue", &t.VValue)
}

type TriggerEventFadeRemotePlayers struct {
	// Inherits TriggerEventRangedDuration
	// Inherits TriggerEvent
	// Inherits PolymorphicBase
	DwType           DT_UINT
	TConditions      TriggerConditions
	FGenerated       DT_INT
	Unk_6cba752      DT_INT
	DwParentActorID  DT_UINT
	TDuration        DT_FLOAT
	DwTriggerFlags   DT_UINT
	DwTriggerFlagsEx DT_UINT
	TCleanup         TriggerCleanup
	Unk_49e9257      DT_INT
	Unk_5490979      DT_INT
	DwPad            DT_UINT
}

func (t *TriggerEventFadeRemotePlayers) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.FGenerated, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_6cba752, r, &Options{Flags: 16}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.DwParentActorID, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.TDuration, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.DwTriggerFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.DwTriggerFlagsEx, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.TCleanup, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+116, &t.Unk_49e9257, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.Unk_5490979, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+124, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+128, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TriggerEventFadeRemotePlayers) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("TConditions", &t.TConditions)
	cb.Do("FGenerated", &t.FGenerated)
	cb.Do("Unk_6cba752", &t.Unk_6cba752)
	cb.Do("DwParentActorID", &t.DwParentActorID)
	cb.Do("TDuration", &t.TDuration)
	cb.Do("DwTriggerFlags", &t.DwTriggerFlags)
	cb.Do("DwTriggerFlagsEx", &t.DwTriggerFlagsEx)
	cb.Do("TCleanup", &t.TCleanup)
	cb.Do("Unk_49e9257", &t.Unk_49e9257)
	cb.Do("Unk_5490979", &t.Unk_5490979)
	cb.Do("DwPad", &t.DwPad)
}

type VertInfluences struct {
	TBoneInfluence DT_FIXEDARRAY[*Influence]
}

func (t *VertInfluences) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.TBoneInfluence, r, &Options{
		ArrayLength: 4,
		Flags:       1,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *VertInfluences) Walk(cb WalkCallback) {
	cb.Do("TBoneInfluence", &t.TBoneInfluence)
}

type EnterKnownLookOverrides struct {
	ALookOverrides DT_FIXEDARRAY[*DT_UINT]
	Unk_3fb7293    DT_FIXEDARRAY[*DT_INT]
}

func (t *EnterKnownLookOverrides) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.ALookOverrides, r, &Options{
		ArrayLength: 6,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_3fb7293, r, &Options{
		ArrayLength: 6,
		Flags:       1,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *EnterKnownLookOverrides) Walk(cb WalkCallback) {
	cb.Do("ALookOverrides", &t.ALookOverrides)
	cb.Do("Unk_3fb7293", &t.Unk_3fb7293)
}

type AIStateDebugSetEntryStateMessage struct {
	THeader       RequiredMessageHeader
	AnnActor      DT_ACD_NETWORK_NAME
	BEnabled      DT_INT
	DwCooldownKey DT_INT64
}

func (t *AIStateDebugSetEntryStateMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.AnnActor, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.BEnabled, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.DwCooldownKey, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+40, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *AIStateDebugSetEntryStateMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("AnnActor", &t.AnnActor)
	cb.Do("BEnabled", &t.BEnabled)
	cb.Do("DwCooldownKey", &t.DwCooldownKey)
}

type GlobalNPCCustomizationData struct {
	// Inherits GlobalBase
	// Inherits PolymorphicBase
	DwType          DT_UINT
	DwPad           DT_UINT
	ArHairColorList DT_VARIABLEARRAY[*NPCHairColors]
	ArSkinColorList DT_VARIABLEARRAY[*PersonaSkinColor]
	ArDyeList       DT_VARIABLEARRAY[*DT_SNO]
}

func (t *GlobalNPCCustomizationData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.ArHairColorList, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.ArSkinColorList, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.ArDyeList, r, &Options{
		Flags: 1,
		Group: 122,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+64, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *GlobalNPCCustomizationData) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("ArHairColorList", &t.ArHairColorList)
	cb.Do("ArSkinColorList", &t.ArSkinColorList)
	cb.Do("ArDyeList", &t.ArDyeList)
}

type PowerConditionDamageIsCrit struct {
	// Inherits PowerConditionBase
	// Inherits PolymorphicBase
	DwType   DT_UINT
	BInverse DT_INT
	DwPad    DT_UINT
}

func (t *PowerConditionDamageIsCrit) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BInverse, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PowerConditionDamageIsCrit) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("BInverse", &t.BInverse)
	cb.Do("DwPad", &t.DwPad)
}

type Type_5b51ca15 struct {
	// Inherits PowerConditionBase
	// Inherits PolymorphicBase
	DwType   DT_UINT
	BInverse DT_INT
	DwPad    DT_UINT
}

func (t *Type_5b51ca15) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BInverse, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_5b51ca15) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("BInverse", &t.BInverse)
	cb.Do("DwPad", &t.DwPad)
}

type VertexElem struct {
	ESemantic DT_ENUM
	EFormat   DT_ENUM
	NOffset   DT_INT
}

func (t *VertexElem) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.ESemantic, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.EFormat, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.NOffset, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+12, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *VertexElem) Walk(cb WalkCallback) {
	cb.Do("ESemantic", &t.ESemantic)
	cb.Do("EFormat", &t.EFormat)
	cb.Do("NOffset", &t.NOffset)
}

type PostApplyBuffCallback struct {
	// Inherits BuffCallbackBase
	// Inherits PolymorphicBase
	DwType                DT_UINT
	DwPad                 DT_UINT
	SnoTriggerEffectGroup DT_SNO
	ArConditions          DT_POLYMORPHIC_VARIABLEARRAY[*DT_INT64]
}

func (t *PostApplyBuffCallback) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoTriggerEffectGroup, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ArConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PostApplyBuffCallback) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("SnoTriggerEffectGroup", &t.SnoTriggerEffectGroup)
	cb.Do("ArConditions", &t.ArConditions)
}

type HoudiniParticlesSimDefinition struct {
	Unk_ce1c03c      DT_UINT
	DwRopeFragment   DT_UINT
	Unk_82df211      DT_FLOAT
	Unk_728cb31      DT_UINT
	FlRadius         DT_FLOAT
	BHasRotation     DT_INT
	FlFps            DT_FLOAT
	FlCompression    DT_FLOAT
	Unk_ab79e60      DT_VARIABLEARRAY[*ParticleLifeEvent]
	ArDetailUpgraded DT_VARIABLEARRAY[*ParticleKeyFrames]
}

func (t *HoudiniParticlesSimDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.Unk_ce1c03c, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwRopeFragment, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_82df211, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.Unk_728cb31, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.FlRadius, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.BHasRotation, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.FlFps, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.FlCompression, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.Unk_ab79e60, r, &Options{Flags: 2097152}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.ArDetailUpgraded, r, &Options{Flags: 2097152}); err != nil {
		return err
	}
	if _, err := r.Seek(p+72, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *HoudiniParticlesSimDefinition) Walk(cb WalkCallback) {
	cb.Do("Unk_ce1c03c", &t.Unk_ce1c03c)
	cb.Do("DwRopeFragment", &t.DwRopeFragment)
	cb.Do("Unk_82df211", &t.Unk_82df211)
	cb.Do("Unk_728cb31", &t.Unk_728cb31)
	cb.Do("FlRadius", &t.FlRadius)
	cb.Do("BHasRotation", &t.BHasRotation)
	cb.Do("FlFps", &t.FlFps)
	cb.Do("FlCompression", &t.FlCompression)
	cb.Do("Unk_ab79e60", &t.Unk_ab79e60)
	cb.Do("ArDetailUpgraded", &t.ArDetailUpgraded)
}

type InventoryLocationMessageData struct {
	AnnContainer DT_ACD_NETWORK_NAME
	ESlot        DT_ENUM
	Pt           DT_BCVEC2I
}

func (t *InventoryLocationMessageData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.AnnContainer, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.ESlot, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.Pt, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+20, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *InventoryLocationMessageData) Walk(cb WalkCallback) {
	cb.Do("AnnContainer", &t.AnnContainer)
	cb.Do("ESlot", &t.ESlot)
	cb.Do("Pt", &t.Pt)
}

type NecroArmyUnitSpecializationData struct {
	SnoActor         DT_SNO
	TUnlockCondition ConditionWrapper
	ArUpgradeOptions DT_VARIABLEARRAY[*NecroArmyUnitSpecializationUpgradeData]
	TSacrifice       NecroArmyUnitSpecializationSacrificeData
	Unk_efc6d7a      DT_VARIABLEARRAY[*DT_SNO]
	Unk_4901f66      DT_ENUM
}

func (t *NecroArmyUnitSpecializationData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoActor, r, &Options{
		Flags: 513,
		Group: 1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.TUnlockCondition, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.ArUpgradeOptions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.TSacrifice, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.Unk_efc6d7a, r, &Options{
		Flags: 1,
		Group: 1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.Unk_4901f66, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+88, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *NecroArmyUnitSpecializationData) Walk(cb WalkCallback) {
	cb.Do("SnoActor", &t.SnoActor)
	cb.Do("TUnlockCondition", &t.TUnlockCondition)
	cb.Do("ArUpgradeOptions", &t.ArUpgradeOptions)
	cb.Do("TSacrifice", &t.TSacrifice)
	cb.Do("Unk_efc6d7a", &t.Unk_efc6d7a)
	cb.Do("Unk_4901f66", &t.Unk_4901f66)
}

type Type_5c24b1a8 struct {
	Unk_d197453             DT_INT
	Unk_d04c24c             DT_INT
	EButtonIconAlignment    DT_ENUM
	NButtonIconTextPaddingX DT_INT
	Unk_57295f6             DT_FLOAT
	Unk_57295f7             DT_FLOAT
	HImageFrameIcon         UIImageHandleReference
	Unk_a2c2344             UIImageHandleReference
	HImageFrameIconPressed  UIImageHandleReference
	HImageFrameIconDisable  UIImageHandleReference
	Unk_fca1727             DT_INT
	FLeft                   DT_FLOAT
	FTop                    DT_FLOAT
}

func (t *Type_5c24b1a8) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Unk_d197453, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.Unk_d04c24c, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.EButtonIconAlignment, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.NButtonIconTextPaddingX, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_57295f6, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.Unk_57295f7, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.HImageFrameIcon, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.Unk_a2c2344, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.HImageFrameIconPressed, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.HImageFrameIconDisable, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.Unk_fca1727, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.FLeft, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.FTop, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+52, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_5c24b1a8) Walk(cb WalkCallback) {
	cb.Do("Unk_d197453", &t.Unk_d197453)
	cb.Do("Unk_d04c24c", &t.Unk_d04c24c)
	cb.Do("EButtonIconAlignment", &t.EButtonIconAlignment)
	cb.Do("NButtonIconTextPaddingX", &t.NButtonIconTextPaddingX)
	cb.Do("Unk_57295f6", &t.Unk_57295f6)
	cb.Do("Unk_57295f7", &t.Unk_57295f7)
	cb.Do("HImageFrameIcon", &t.HImageFrameIcon)
	cb.Do("Unk_a2c2344", &t.Unk_a2c2344)
	cb.Do("HImageFrameIconPressed", &t.HImageFrameIconPressed)
	cb.Do("HImageFrameIconDisable", &t.HImageFrameIconDisable)
	cb.Do("Unk_fca1727", &t.Unk_fca1727)
	cb.Do("FLeft", &t.FLeft)
	cb.Do("FTop", &t.FTop)
}

type Type_5c44ae48 struct {
	EBreaksOn   DT_ENUM
	Unk_e714dff DT_FLOAT
	SnoEffect   DT_SNO
	Transform   PRTransform
}

func (t *Type_5c44ae48) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.EBreaksOn, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.Unk_e714dff, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.SnoEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.Transform, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+40, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_5c44ae48) Walk(cb WalkCallback) {
	cb.Do("EBreaksOn", &t.EBreaksOn)
	cb.Do("Unk_e714dff", &t.Unk_e714dff)
	cb.Do("SnoEffect", &t.SnoEffect)
	cb.Do("Transform", &t.Transform)
}

type MapImageHandleReference struct {
	HImageHandle DT_UINT
}

func (t *MapImageHandleReference) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.HImageHandle, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+4, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *MapImageHandleReference) Walk(cb WalkCallback) {
	cb.Do("HImageHandle", &t.HImageHandle)
}

type OnHitBuffCallback struct {
	// Inherits ProcChanceBuffCallbackBase
	// Inherits BuffCallbackBase
	// Inherits PolymorphicBase
	DwType                DT_UINT
	DwPad                 DT_UINT
	SnoTriggerEffectGroup DT_SNO
	ArConditions          DT_POLYMORPHIC_VARIABLEARRAY[*DT_INT64]
	BAlwaysProcs          DT_INT
	DwPadding             DT_UINT
	TProcChance           DT_STRING_FORMULA
	Unk_b52872c           DT_INT
	Unk_ac0bfbc           DT_INT
	Unk_99e97f7           DT_INT
}

func (t *OnHitBuffCallback) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoTriggerEffectGroup, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ArConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.BAlwaysProcs, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.DwPadding, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.TProcChance, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.Unk_b52872c, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.Unk_ac0bfbc, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.Unk_99e97f7, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+104, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *OnHitBuffCallback) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("SnoTriggerEffectGroup", &t.SnoTriggerEffectGroup)
	cb.Do("ArConditions", &t.ArConditions)
	cb.Do("BAlwaysProcs", &t.BAlwaysProcs)
	cb.Do("DwPadding", &t.DwPadding)
	cb.Do("TProcChance", &t.TProcChance)
	cb.Do("Unk_b52872c", &t.Unk_b52872c)
	cb.Do("Unk_ac0bfbc", &t.Unk_ac0bfbc)
	cb.Do("Unk_99e97f7", &t.Unk_99e97f7)
}

type FogOfWarDefinition struct {
	NDummy      DT_INT
	Unk_f1e2551 DT_CSTRING[*DT_BYTE]
}

func (t *FogOfWarDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.NDummy, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_f1e2551, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *FogOfWarDefinition) Walk(cb WalkCallback) {
	cb.Do("NDummy", &t.NDummy)
	cb.Do("Unk_f1e2551", &t.Unk_f1e2551)
}

type Type_5c83eb6c struct {
	// Inherits ScriptEventParamBase
	// Inherits PolymorphicBase
	DwType     DT_UINT
	EParamType DT_ENUM
	DwPad      DT_UINT
	DwHash     DT_UINT
	SzString   DT_CSTRING[*DT_BYTE]
}

func (t *Type_5c83eb6c) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.EParamType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.DwHash, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.SzString, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_5c83eb6c) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("EParamType", &t.EParamType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("DwHash", &t.DwHash)
	cb.Do("SzString", &t.SzString)
}

type VisualItem struct {
	SnoItem DT_SNO
	SnoDye  DT_SNO
}

func (t *VisualItem) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoItem, r, &Options{
		Flags: 1,
		Group: 73,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.SnoDye, r, &Options{
		Flags: 1,
		Group: 122,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *VisualItem) Walk(cb WalkCallback) {
	cb.Do("SnoItem", &t.SnoItem)
	cb.Do("SnoDye", &t.SnoDye)
}

type PlayerClassNecroData struct {
	Unk_4a28fe           DT_FLOAT
	NUnlockLevel         DT_INT
	ArNecroArmyUnitTypes DT_FIXEDARRAY[*NecroArmyUnitTypeData]
}

func (t *PlayerClassNecroData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Unk_4a28fe, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.NUnlockLevel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.ArNecroArmyUnitTypes, r, &Options{
		ArrayLength: 3,
		Flags:       1,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+848, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PlayerClassNecroData) Walk(cb WalkCallback) {
	cb.Do("Unk_4a28fe", &t.Unk_4a28fe)
	cb.Do("NUnlockLevel", &t.NUnlockLevel)
	cb.Do("ArNecroArmyUnitTypes", &t.ArNecroArmyUnitTypes)
}

type InventoryRequestSocketMessage struct {
	THeader         RequiredMessageHeader
	AnnItemToSocket DT_ACD_NETWORK_NAME
	Unk_fa7e312     DT_ACD_NETWORK_NAME
	NSocketIndex    DT_OPTIONAL[*DT_INT]
}

func (t *InventoryRequestSocketMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.AnnItemToSocket, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_fa7e312, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.NSocketIndex, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+40, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *InventoryRequestSocketMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("AnnItemToSocket", &t.AnnItemToSocket)
	cb.Do("Unk_fa7e312", &t.Unk_fa7e312)
	cb.Do("NSocketIndex", &t.NSocketIndex)
}

type OnResourceSpentBuffCallback struct {
	// Inherits BuffCallbackBase
	// Inherits PolymorphicBase
	DwType                DT_UINT
	DwPad                 DT_UINT
	SnoTriggerEffectGroup DT_SNO
	ArConditions          DT_POLYMORPHIC_VARIABLEARRAY[*DT_INT64]
}

func (t *OnResourceSpentBuffCallback) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoTriggerEffectGroup, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ArConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *OnResourceSpentBuffCallback) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("SnoTriggerEffectGroup", &t.SnoTriggerEffectGroup)
	cb.Do("ArConditions", &t.ArConditions)
}

type SceneCommonSpecification struct {
	DwFlags                      DT_UINT
	SnoLevelArea                 DT_SNO
	SnoLevelAreaDungeonAlternate DT_SNO
	Unk_989f2d7                  DT_ENUM
	Unk_74a9537                  DT_STARTLOC_NAME
	SnoPrevWorld                 DT_SNO
	UPrevEntranceGUID            DT_UINT
	SnoPrevLevelArea             DT_SNO
	TAudioVisual                 Type_78854e88
	Unk_babb0a                   Type_78854e88
	SnoPresetWorld               DT_SNO
	NSceneChunk                  DT_INT
	Unk_1e9ef9d                  DT_OPTIONAL[*DT_UINT]
	Unk_bcb06ca                  DT_FIXEDARRAY[*StartingAllowedWeather]
	Unk_5215067                  DT_FIXEDARRAY[*DT_GBID]
	TDRLGCreationInfo            DT_OPTIONAL[*Type_95119e98]
}

func (t *SceneCommonSpecification) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.DwFlags, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.SnoLevelArea, r, &Options{
		Flags: 1,
		Group: 22,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.SnoLevelAreaDungeonAlternate, r, &Options{
		Flags: 1,
		Group: 22,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.Unk_989f2d7, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_74a9537, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.SnoPrevWorld, r, &Options{
		Flags: 1,
		Group: 48,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.UPrevEntranceGUID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.SnoPrevLevelArea, r, &Options{
		Flags: 1,
		Group: 22,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.TAudioVisual, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.Unk_babb0a, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.SnoPresetWorld, r, &Options{
		Flags: 1,
		Group: 48,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.NSceneChunk, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_1e9ef9d, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.Unk_bcb06ca, r, &Options{
		ArrayLength: 16,
		Flags:       8,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+212, &t.Unk_5215067, r, &Options{
		ArrayLength: 16,
		Flags:       9,
		Group:       20,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+280, &t.TDRLGCreationInfo, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+308, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *SceneCommonSpecification) Walk(cb WalkCallback) {
	cb.Do("DwFlags", &t.DwFlags)
	cb.Do("SnoLevelArea", &t.SnoLevelArea)
	cb.Do("SnoLevelAreaDungeonAlternate", &t.SnoLevelAreaDungeonAlternate)
	cb.Do("Unk_989f2d7", &t.Unk_989f2d7)
	cb.Do("Unk_74a9537", &t.Unk_74a9537)
	cb.Do("SnoPrevWorld", &t.SnoPrevWorld)
	cb.Do("UPrevEntranceGUID", &t.UPrevEntranceGUID)
	cb.Do("SnoPrevLevelArea", &t.SnoPrevLevelArea)
	cb.Do("TAudioVisual", &t.TAudioVisual)
	cb.Do("Unk_babb0a", &t.Unk_babb0a)
	cb.Do("SnoPresetWorld", &t.SnoPresetWorld)
	cb.Do("NSceneChunk", &t.NSceneChunk)
	cb.Do("Unk_1e9ef9d", &t.Unk_1e9ef9d)
	cb.Do("Unk_bcb06ca", &t.Unk_bcb06ca)
	cb.Do("Unk_5215067", &t.Unk_5215067)
	cb.Do("TDRLGCreationInfo", &t.TDRLGCreationInfo)
}

type PlayerSavedData struct {
	THotbarBtnAssignments     DT_FIXEDARRAY[*HotbarButtonData]
	TPotionBtn                HotbarButtonData
	USecondsPlayed            DT_UINT
	THirelingSavedData        HirelingSavedData
	ArWaypointsActivated      DT_FIXEDARRAY[*DT_SNO]
	UTimeLastLevel            DT_UINT
	TActiveSkills             DT_FIXEDARRAY[*ActiveSkillSavedData]
	TEnchantSkills            DT_FIXEDARRAY[*SkillEnchantSavedData]
	TSkillPassiveData         Type_7bed253b
	ArSkillExtraAndArsenals   DT_FIXEDARRAY[*SkillExtraAndArsenalEntry]
	ArPurchasedSkillTreeNodes DT_FIXEDARRAY[*SkillTreeNodeEntry]
	Unk_4968c70               DT_UINT
	BUnlockedTownPortal       DT_INT
	ArTransmogSlots           DT_FIXEDARRAY[*TransmogSlot]
	ArSavedTransmogs          DT_FIXEDARRAY[*SavedTransmog]
	TSavedPlayerTitle         SavedPlayerTitle
}

func (t *PlayerSavedData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THotbarBtnAssignments, r, &Options{
		ArrayLength: 6,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.TPotionBtn, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.USecondsPlayed, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+116, &t.THirelingSavedData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+220, &t.ArWaypointsActivated, r, &Options{
		ArrayLength: 64,
		Flags:       9,
		Group:       22,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+480, &t.UTimeLastLevel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+484, &t.TActiveSkills, r, &Options{
		ArrayLength: 6,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+532, &t.TEnchantSkills, r, &Options{
		ArrayLength: 6,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+556, &t.TSkillPassiveData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+576, &t.ArSkillExtraAndArsenals, r, &Options{
		ArrayLength: 50,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+976, &t.ArPurchasedSkillTreeNodes, r, &Options{
		ArrayLength: 128,
		Flags:       8,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2004, &t.Unk_4968c70, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2008, &t.BUnlockedTownPortal, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2012, &t.ArTransmogSlots, r, &Options{
		ArrayLength: 15,
		Flags:       8,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2256, &t.ArSavedTransmogs, r, &Options{
		ArrayLength: 5,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+3496, &t.TSavedPlayerTitle, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+3664, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PlayerSavedData) Walk(cb WalkCallback) {
	cb.Do("THotbarBtnAssignments", &t.THotbarBtnAssignments)
	cb.Do("TPotionBtn", &t.TPotionBtn)
	cb.Do("USecondsPlayed", &t.USecondsPlayed)
	cb.Do("THirelingSavedData", &t.THirelingSavedData)
	cb.Do("ArWaypointsActivated", &t.ArWaypointsActivated)
	cb.Do("UTimeLastLevel", &t.UTimeLastLevel)
	cb.Do("TActiveSkills", &t.TActiveSkills)
	cb.Do("TEnchantSkills", &t.TEnchantSkills)
	cb.Do("TSkillPassiveData", &t.TSkillPassiveData)
	cb.Do("ArSkillExtraAndArsenals", &t.ArSkillExtraAndArsenals)
	cb.Do("ArPurchasedSkillTreeNodes", &t.ArPurchasedSkillTreeNodes)
	cb.Do("Unk_4968c70", &t.Unk_4968c70)
	cb.Do("BUnlockedTownPortal", &t.BUnlockedTownPortal)
	cb.Do("ArTransmogSlots", &t.ArTransmogSlots)
	cb.Do("ArSavedTransmogs", &t.ArSavedTransmogs)
	cb.Do("TSavedPlayerTitle", &t.TSavedPlayerTitle)
}

type PolymorphicBase struct {
	DwType DT_UINT
	DwPad  DT_UINT
}

func (t *PolymorphicBase) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PolymorphicBase) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
}

type PolytopeData struct {
	Unk_e96f671    dmPolytopeDataMirror
	PtVertices     DT_VARIABLEARRAY[*DT_VECTOR3D]
	PtPlanes       DT_VARIABLEARRAY[*dmPlaneMirror]
	PtSubEdges     DT_VARIABLEARRAY[*dmSubEdgeMirror]
	PtFaceSubEdges DT_VARIABLEARRAY[*DT_BYTE]
}

func (t *PolytopeData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Unk_e96f671, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.PtVertices, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.PtPlanes, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.PtSubEdges, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.PtFaceSubEdges, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+128, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PolytopeData) Walk(cb WalkCallback) {
	cb.Do("Unk_e96f671", &t.Unk_e96f671)
	cb.Do("PtVertices", &t.PtVertices)
	cb.Do("PtPlanes", &t.PtPlanes)
	cb.Do("PtSubEdges", &t.PtSubEdges)
	cb.Do("PtFaceSubEdges", &t.PtFaceSubEdges)
}

type PrefetchSceneMessage struct {
	THeader    RequiredMessageHeader
	SnoScene   DT_SNO
	Unk_a61d97 DT_INT
}

func (t *PrefetchSceneMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoScene, r, &Options{
		Flags: 1,
		Group: 33,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.Unk_a61d97, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PrefetchSceneMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("SnoScene", &t.SnoScene)
	cb.Do("Unk_a61d97", &t.Unk_a61d97)
}

type NpcTemplate struct {
	SzName    DT_CSTRING[*DT_BYTE]
	SnoMale   DT_SNO
	SnoFemale DT_SNO
}

func (t *NpcTemplate) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SzName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoMale, r, &Options{
		Flags: 1,
		Group: 1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.SnoFemale, r, &Options{
		Flags: 1,
		Group: 1,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *NpcTemplate) Walk(cb WalkCallback) {
	cb.Do("SzName", &t.SzName)
	cb.Do("SnoMale", &t.SnoMale)
	cb.Do("SnoFemale", &t.SnoFemale)
}

type PowerConditionIsSkillSlot struct {
	// Inherits PowerConditionBase
	// Inherits PolymorphicBase
	DwType         DT_UINT
	BInverse       DT_INT
	DwPad          DT_UINT
	EPowerCategory DT_ENUM
}

func (t *PowerConditionIsSkillSlot) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BInverse, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.EPowerCategory, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PowerConditionIsSkillSlot) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("BInverse", &t.BInverse)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("EPowerCategory", &t.EPowerCategory)
}

type TriggerEventShowClosedCaption struct {
	// Inherits TriggerEventRangedDuration
	// Inherits TriggerEvent
	// Inherits PolymorphicBase
	DwType           DT_UINT
	TConditions      TriggerConditions
	FGenerated       DT_INT
	Unk_6cba752      DT_INT
	DwParentActorID  DT_UINT
	TDuration        DT_FLOAT
	DwTriggerFlags   DT_UINT
	DwTriggerFlagsEx DT_UINT
	TCleanup         TriggerCleanup
	Unk_49e9257      DT_INT
	Unk_5490979      DT_INT
	DwPad            DT_UINT
	HClosedCaption   StringLabelHandleEx
}

func (t *TriggerEventShowClosedCaption) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.FGenerated, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_6cba752, r, &Options{Flags: 16}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.DwParentActorID, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.TDuration, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.DwTriggerFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.DwTriggerFlagsEx, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.TCleanup, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+116, &t.Unk_49e9257, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.Unk_5490979, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+124, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.HClosedCaption, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+136, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TriggerEventShowClosedCaption) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("TConditions", &t.TConditions)
	cb.Do("FGenerated", &t.FGenerated)
	cb.Do("Unk_6cba752", &t.Unk_6cba752)
	cb.Do("DwParentActorID", &t.DwParentActorID)
	cb.Do("TDuration", &t.TDuration)
	cb.Do("DwTriggerFlags", &t.DwTriggerFlags)
	cb.Do("DwTriggerFlagsEx", &t.DwTriggerFlagsEx)
	cb.Do("TCleanup", &t.TCleanup)
	cb.Do("Unk_49e9257", &t.Unk_49e9257)
	cb.Do("Unk_5490979", &t.Unk_5490979)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("HClosedCaption", &t.HClosedCaption)
}

type AssignTechniqueSlotMessage struct {
	THeader     RequiredMessageHeader
	SnoItemType DT_SNO
}

func (t *AssignTechniqueSlotMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoItemType, r, &Options{
		Flags: 1,
		Group: 98,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+20, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *AssignTechniqueSlotMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("SnoItemType", &t.SnoItemType)
}

type GroundTestPosition struct {
	TBone            IKBone
	WpPosOffset      DT_VECTOR3D
	FlGroundDistance DT_FLOAT
}

func (t *GroundTestPosition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.TBone, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.WpPosOffset, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.FlGroundDistance, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+20, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *GroundTestPosition) Walk(cb WalkCallback) {
	cb.Do("TBone", &t.TBone)
	cb.Do("WpPosOffset", &t.WpPosOffset)
	cb.Do("FlGroundDistance", &t.FlGroundDistance)
}

type ScriptEventParamMonsterFamily struct {
	// Inherits ScriptEventParamBase
	// Inherits PolymorphicBase
	DwType           DT_UINT
	EParamType       DT_ENUM
	DwPad            DT_UINT
	SnoMonsterFamily DT_SNO
}

func (t *ScriptEventParamMonsterFamily) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.EParamType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SnoMonsterFamily, r, &Options{
		Flags: 513,
		Group: 82,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ScriptEventParamMonsterFamily) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("EParamType", &t.EParamType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("SnoMonsterFamily", &t.SnoMonsterFamily)
}

type Type_5e32bd3e struct {
	TCondition        ConditionWrapper
	Unk_dd101c8       DT_INT
	TAudioState       WwiseSwitchValue
	FlMinimumDuration DT_FLOAT
}

func (t *Type_5e32bd3e) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.TCondition, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.Unk_dd101c8, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.TAudioState, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.FlMinimumDuration, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_5e32bd3e) Walk(cb WalkCallback) {
	cb.Do("TCondition", &t.TCondition)
	cb.Do("Unk_dd101c8", &t.Unk_dd101c8)
	cb.Do("TAudioState", &t.TAudioState)
	cb.Do("FlMinimumDuration", &t.FlMinimumDuration)
}

type SpeedTreeWindGroup struct {
	Unk_c874a5e      DT_FIXEDARRAY[*DT_FLOAT]
	Unk_289ce5b      DT_FIXEDARRAY[*DT_FLOAT]
	Unk_4c6f9cb      DT_FIXEDARRAY[*DT_FLOAT]
	Unk_35f98b0      DT_FIXEDARRAY[*DT_FLOAT]
	Unk_9b6930e      DT_FIXEDARRAY[*DT_FLOAT]
	FTwitchSharpness DT_FLOAT
	FRollMaxScale    DT_FLOAT
	FRollMinScale    DT_FLOAT
	FRollSpeed       DT_FLOAT
	FRollSeparation  DT_FLOAT
	FLeewardScalar   DT_FLOAT
}

func (t *SpeedTreeWindGroup) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Unk_c874a5e, r, &Options{
		ArrayLength: 10,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.Unk_289ce5b, r, &Options{
		ArrayLength: 10,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.Unk_4c6f9cb, r, &Options{
		ArrayLength: 10,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.Unk_35f98b0, r, &Options{
		ArrayLength: 10,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+160, &t.Unk_9b6930e, r, &Options{
		ArrayLength: 10,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+200, &t.FTwitchSharpness, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+204, &t.FRollMaxScale, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+208, &t.FRollMinScale, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+212, &t.FRollSpeed, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+216, &t.FRollSeparation, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+220, &t.FLeewardScalar, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+224, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *SpeedTreeWindGroup) Walk(cb WalkCallback) {
	cb.Do("Unk_c874a5e", &t.Unk_c874a5e)
	cb.Do("Unk_289ce5b", &t.Unk_289ce5b)
	cb.Do("Unk_4c6f9cb", &t.Unk_4c6f9cb)
	cb.Do("Unk_35f98b0", &t.Unk_35f98b0)
	cb.Do("Unk_9b6930e", &t.Unk_9b6930e)
	cb.Do("FTwitchSharpness", &t.FTwitchSharpness)
	cb.Do("FRollMaxScale", &t.FRollMaxScale)
	cb.Do("FRollMinScale", &t.FRollMinScale)
	cb.Do("FRollSpeed", &t.FRollSpeed)
	cb.Do("FRollSeparation", &t.FRollSeparation)
	cb.Do("FLeewardScalar", &t.FLeewardScalar)
}

type MusicTransition struct {
	Unk_cc9e7d         DT_ENUM
	Unk_647bd69        DT_FLOAT
	SnoTransitionEvent DT_SNO
}

func (t *MusicTransition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Unk_cc9e7d, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.Unk_647bd69, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.SnoTransitionEvent, r, &Options{
		Flags: 1,
		Group: 40,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+12, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *MusicTransition) Walk(cb WalkCallback) {
	cb.Do("Unk_cc9e7d", &t.Unk_cc9e7d)
	cb.Do("Unk_647bd69", &t.Unk_647bd69)
	cb.Do("SnoTransitionEvent", &t.SnoTransitionEvent)
}

type Type_5e7f9b79 struct{}

func (t *Type_5e7f9b79) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if _, err := r.Seek(p+1, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_5e7f9b79) Walk(cb WalkCallback) {}

type PowerConditionIsStealthed struct {
	// Inherits PowerConditionBase
	// Inherits PolymorphicBase
	DwType   DT_UINT
	BInverse DT_INT
	DwPad    DT_UINT
	ESubject DT_ENUM
}

func (t *PowerConditionIsStealthed) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BInverse, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ESubject, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PowerConditionIsStealthed) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("BInverse", &t.BInverse)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("ESubject", &t.ESubject)
}

type DecalLookVariantMap struct {
	DwLookVariant       DT_UINT
	SnoMaterialOverride DT_SNO
}

func (t *DecalLookVariantMap) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.DwLookVariant, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.SnoMaterialOverride, r, &Options{
		Flags: 1,
		Group: 57,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *DecalLookVariantMap) Walk(cb WalkCallback) {
	cb.Do("DwLookVariant", &t.DwLookVariant)
	cb.Do("SnoMaterialOverride", &t.SnoMaterialOverride)
}

type Type_5f1859b4 struct {
	M_cellId    DT_INT64
	Unk_179f850 DT_INT64
	Unk_39da905 DT_FIXEDARRAY[*DT_INT64]
	Unk_6897d68 DT_FIXEDARRAY[*DT_INT64]
	Unk_f18728c DT_INT64
	Unk_a2d413a DT_BYTE
	Unk_cd14700 AABB
	Unk_215e5a4 AABB
}

func (t *Type_5f1859b4) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.M_cellId, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.Unk_179f850, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_39da905, r, &Options{ArrayLength: 4608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36880, &t.Unk_6897d68, r, &Options{ArrayLength: 4608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+73744, &t.Unk_f18728c, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+73752, &t.Unk_a2d413a, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+73756, &t.Unk_cd14700, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+73780, &t.Unk_215e5a4, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+73808, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_5f1859b4) Walk(cb WalkCallback) {
	cb.Do("M_cellId", &t.M_cellId)
	cb.Do("Unk_179f850", &t.Unk_179f850)
	cb.Do("Unk_39da905", &t.Unk_39da905)
	cb.Do("Unk_6897d68", &t.Unk_6897d68)
	cb.Do("Unk_f18728c", &t.Unk_f18728c)
	cb.Do("Unk_a2d413a", &t.Unk_a2d413a)
	cb.Do("Unk_cd14700", &t.Unk_cd14700)
	cb.Do("Unk_215e5a4", &t.Unk_215e5a4)
}

type HeroDefinition struct {
	PProtoData DT_VARIABLEARRAY[*DT_BYTE]
}

func (t *HeroDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.PProtoData, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *HeroDefinition) Walk(cb WalkCallback) {
	cb.Do("PProtoData", &t.PProtoData)
}

type RareMonsterNamesEntry_Table struct {
	// Inherits GameBalanceTable
	// Inherits PolymorphicBase
	DwType   DT_UINT
	DwPad    DT_UINT
	TEntries DT_VARIABLEARRAY[*RareMonsterNamesEntry]
}

func (t *RareMonsterNamesEntry_Table) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TEntries, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *RareMonsterNamesEntry_Table) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("TEntries", &t.TEntries)
}

type dmTransformMirror struct {
	Q DT_VECTOR4D
	P DT_VECTOR4D
}

func (t *dmTransformMirror) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Q, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.P, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *dmTransformMirror) Walk(cb WalkCallback) {
	cb.Do("Q", &t.Q)
	cb.Do("P", &t.P)
}

type PowerFacingWindow struct {
	NFrameStart DT_INT
	NFrameEnd   DT_INT
	Unk_f28aa5a DT_FLOAT
	Unk_963cba8 DT_INT
	Unk_65d9350 DT_INT
	Unk_6ebf840 DT_UINT
}

func (t *PowerFacingWindow) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.NFrameStart, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.NFrameEnd, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.Unk_f28aa5a, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.Unk_963cba8, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_65d9350, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.Unk_6ebf840, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PowerFacingWindow) Walk(cb WalkCallback) {
	cb.Do("NFrameStart", &t.NFrameStart)
	cb.Do("NFrameEnd", &t.NFrameEnd)
	cb.Do("Unk_f28aa5a", &t.Unk_f28aa5a)
	cb.Do("Unk_963cba8", &t.Unk_963cba8)
	cb.Do("Unk_65d9350", &t.Unk_65d9350)
	cb.Do("Unk_6ebf840", &t.Unk_6ebf840)
}

type UIScrollableTextStyle struct {
	// Inherits UITextStyle
	// Inherits UIWindowStyle
	// Inherits UIControlStyle
	// Inherits PolymorphicBase
	DwType                    DT_UINT
	DwPad                     DT_UINT
	HParentStyle              UIControlHandle
	Unk_441f783               DT_INT64
	M_eHasModifiedPowerTagMap DT_TAGMAP[*DT_ENUM]
	TConsoleInput             UIControlConsoleInput
	Unk_b4f614c               DT_TAGMAP[*DT_ENUM]
	TFont                     UIControlFont
	Unk_4741819               DT_TAGMAP[*DT_ENUM]
	HArtificiallyOwnedTagMap  DT_TAGMAP[*DT_ENUM]
}

func (t *UIScrollableTextStyle) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.HParentStyle, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_441f783, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.M_eHasModifiedPowerTagMap, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.TConsoleInput, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.Unk_b4f614c, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.TFont, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.Unk_4741819, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.HArtificiallyOwnedTagMap, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+128, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *UIScrollableTextStyle) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("HParentStyle", &t.HParentStyle)
	cb.Do("Unk_441f783", &t.Unk_441f783)
	cb.Do("M_eHasModifiedPowerTagMap", &t.M_eHasModifiedPowerTagMap)
	cb.Do("TConsoleInput", &t.TConsoleInput)
	cb.Do("Unk_b4f614c", &t.Unk_b4f614c)
	cb.Do("TFont", &t.TFont)
	cb.Do("Unk_4741819", &t.Unk_4741819)
	cb.Do("HArtificiallyOwnedTagMap", &t.HArtificiallyOwnedTagMap)
}

type SNONameDataMessage struct {
	THeader RequiredMessageHeader
	SnoName DT_SNO_NAME
}

func (t *SNONameDataMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *SNONameDataMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("SnoName", &t.SnoName)
}

type MarkerWallData struct {
	// Inherits MarkerSplineData
	// Inherits MarkerDataBase
	// Inherits PolymorphicBase
	DwType                         DT_UINT
	DwPad                          DT_UINT
	EInterpolationMode             DT_ENUM
	Unk_a3f1699                    DT_FLOAT
	DwFlags                        DT_UINT
	NSeed                          DT_INT
	SzLookOverride                 DT_UINT
	DwShaderMapOverride            DT_UINT
	Unk_d094b9a                    DT_ENUM
	SnoCampaignVisibilityCondition DT_SNO
	SnoAmbientSound                DT_SNO
}

func (t *MarkerWallData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.EInterpolationMode, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.Unk_a3f1699, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.DwFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.NSeed, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.SzLookOverride, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.DwShaderMapOverride, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.Unk_d094b9a, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.SnoCampaignVisibilityCondition, r, &Options{
		Flags: 1,
		Group: 51,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.SnoAmbientSound, r, &Options{
		Flags: 1,
		Group: 5,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+56, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *MarkerWallData) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("EInterpolationMode", &t.EInterpolationMode)
	cb.Do("Unk_a3f1699", &t.Unk_a3f1699)
	cb.Do("DwFlags", &t.DwFlags)
	cb.Do("NSeed", &t.NSeed)
	cb.Do("SzLookOverride", &t.SzLookOverride)
	cb.Do("DwShaderMapOverride", &t.DwShaderMapOverride)
	cb.Do("Unk_d094b9a", &t.Unk_d094b9a)
	cb.Do("SnoCampaignVisibilityCondition", &t.SnoCampaignVisibilityCondition)
	cb.Do("SnoAmbientSound", &t.SnoAmbientSound)
}

type ScriptEventParamLinkedMarkerAny struct {
	// Inherits ScriptEventParamBase
	// Inherits PolymorphicBase
	DwType     DT_UINT
	EParamType DT_ENUM
	DwPad      DT_UINT
	IdValue    DT_INT
}

func (t *ScriptEventParamLinkedMarkerAny) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.EParamType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.IdValue, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ScriptEventParamLinkedMarkerAny) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("EParamType", &t.EParamType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("IdValue", &t.IdValue)
}

type PS5ConsoleAwardDefinition struct {
	// Inherits SonyConsoleAwardDefinition
	// Inherits ConsoleAwardDefinition
	// Inherits PolymorphicBase
	DwType          DT_UINT
	UProfileAwardId DT_UINT
	DwPad           DT_UINT
}

func (t *PS5ConsoleAwardDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.UProfileAwardId, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PS5ConsoleAwardDefinition) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("UProfileAwardId", &t.UProfileAwardId)
	cb.Do("DwPad", &t.DwPad)
}

type LookVariant struct {
	SzName  DT_UINT
	DwValue DT_UINT
}

func (t *LookVariant) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SzName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.DwValue, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *LookVariant) Walk(cb WalkCallback) {
	cb.Do("SzName", &t.SzName)
	cb.Do("DwValue", &t.DwValue)
}

type EmitterCylinderData struct {
	// Inherits EmitterDataBase
	// Inherits PolymorphicBase
	DwType            DT_UINT
	DwPad             DT_UINT
	EFacing           DT_ENUM
	AWedge            DT_FLOAT
	FEvenDistribution DT_INT
	PathRadius        Type_cbfdd2ea
	PathHeight        Type_cbfdd2ea
}

func (t *EmitterCylinderData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.EFacing, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.AWedge, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.FEvenDistribution, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.PathRadius, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.PathHeight, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+144, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *EmitterCylinderData) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("EFacing", &t.EFacing)
	cb.Do("AWedge", &t.AWedge)
	cb.Do("FEvenDistribution", &t.FEvenDistribution)
	cb.Do("PathRadius", &t.PathRadius)
	cb.Do("PathHeight", &t.PathHeight)
}

type RunTimeMaterialScalarGraphEntry struct {
	Unk_411da82 Type_cbfdd2ea
}

func (t *RunTimeMaterialScalarGraphEntry) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Unk_411da82, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+56, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *RunTimeMaterialScalarGraphEntry) Walk(cb WalkCallback) {
	cb.Do("Unk_411da82", &t.Unk_411da82)
}

type Type_6105185b struct {
	// Inherits PowerConditionBase
	// Inherits PolymorphicBase
	DwType   DT_UINT
	BInverse DT_INT
	DwPad    DT_UINT
	ESubject DT_ENUM
	SnoAffix DT_SNO
}

func (t *Type_6105185b) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BInverse, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ESubject, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.SnoAffix, r, &Options{
		Flags: 513,
		Group: 104,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_6105185b) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("BInverse", &t.BInverse)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("ESubject", &t.ESubject)
	cb.Do("SnoAffix", &t.SnoAffix)
}

type AbortPowerMessage struct {
	THeader  RequiredCommandFrameMessageHeader
	SnoPower DT_SNO
}

func (t *AbortPowerMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.SnoPower, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *AbortPowerMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("SnoPower", &t.SnoPower)
}

type CheckpointGizmoData struct {
	// Inherits ActorGizmoData
	// Inherits PolymorphicBase
	DwType                       DT_UINT
	DwPad                        DT_UINT
	FDisableNonFriendlyOperation DT_INT
	FWalkToCenter                DT_INT
	FGizmoStartsDisabled         DT_INT
	FUseStringListName           DT_INT
	FForceMinimapIcon            DT_INT
	FlOperationRadius            DT_FLOAT
	Unk_d0b1df5                  DT_FLOAT
	FlGizmoUseTime               DT_FLOAT
	SnoChannelingEffect          DT_SNO
	Unk_2767229                  DT_INT
	FGizmoShowProgressBar        DT_INT
	Unk_6d9ebe1                  DT_INT
	Unk_5456245                  DT_INT
	Unk_af5815a                  DT_INT
	SnoOnClickEffect             DT_SNO
	SnoPickedUpEffect            DT_SNO
	SnoDropOnGroundEffect        DT_SNO
	TConditionData               GizmoConditionData
	SnoPowerOperator             DT_SNO
	SnoPowerOperate              DT_SNO
	SnoPowerOperatorActive       DT_SNO
	SnoPowerOperateActive        DT_SNO
	Unk_359810e                  DT_INT
	NCooldown                    DT_UINT
	Unk_9c8478e                  DT_UINT
	Unk_d45ed2d                  DT_INT
	Unk_f6b20b7                  DT_INT
	Unk_54513b8                  DT_INT
	Unk_fd1f378                  DT_UINT
	Unk_487c14                   DT_UINT
	Unk_87f2609                  DT_UINT
	Unk_158eb4f                  DT_FLOAT
	Unk_ab58cd3                  DT_ENUM
	Unk_91a3966                  DT_UINT
	Unk_25312e5                  DT_UINT
	Unk_4be4371                  DT_INT
	PtProxData                   DT_POLYMORPHIC_VARIABLEARRAY[*ProximityDataBase]
}

func (t *CheckpointGizmoData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.FDisableNonFriendlyOperation, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.FWalkToCenter, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.FGizmoStartsDisabled, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.FUseStringListName, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.FForceMinimapIcon, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.FlOperationRadius, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.Unk_d0b1df5, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.FlGizmoUseTime, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.SnoChannelingEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.Unk_2767229, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.FGizmoShowProgressBar, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+60, &t.Unk_6d9ebe1, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.Unk_5456245, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.Unk_af5815a, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.SnoOnClickEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.SnoPickedUpEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.SnoDropOnGroundEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.TConditionData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.SnoPowerOperator, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.SnoPowerOperate, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.SnoPowerOperatorActive, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+100, &t.SnoPowerOperateActive, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+104, &t.Unk_359810e, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+108, &t.NCooldown, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.Unk_9c8478e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+116, &t.Unk_d45ed2d, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.Unk_f6b20b7, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+124, &t.Unk_54513b8, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.Unk_fd1f378, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+132, &t.Unk_487c14, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+136, &t.Unk_87f2609, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+140, &t.Unk_158eb4f, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+144, &t.Unk_ab58cd3, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+148, &t.Unk_91a3966, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+152, &t.Unk_25312e5, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+156, &t.Unk_4be4371, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+160, &t.PtProxData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+184, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *CheckpointGizmoData) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("FDisableNonFriendlyOperation", &t.FDisableNonFriendlyOperation)
	cb.Do("FWalkToCenter", &t.FWalkToCenter)
	cb.Do("FGizmoStartsDisabled", &t.FGizmoStartsDisabled)
	cb.Do("FUseStringListName", &t.FUseStringListName)
	cb.Do("FForceMinimapIcon", &t.FForceMinimapIcon)
	cb.Do("FlOperationRadius", &t.FlOperationRadius)
	cb.Do("Unk_d0b1df5", &t.Unk_d0b1df5)
	cb.Do("FlGizmoUseTime", &t.FlGizmoUseTime)
	cb.Do("SnoChannelingEffect", &t.SnoChannelingEffect)
	cb.Do("Unk_2767229", &t.Unk_2767229)
	cb.Do("FGizmoShowProgressBar", &t.FGizmoShowProgressBar)
	cb.Do("Unk_6d9ebe1", &t.Unk_6d9ebe1)
	cb.Do("Unk_5456245", &t.Unk_5456245)
	cb.Do("Unk_af5815a", &t.Unk_af5815a)
	cb.Do("SnoOnClickEffect", &t.SnoOnClickEffect)
	cb.Do("SnoPickedUpEffect", &t.SnoPickedUpEffect)
	cb.Do("SnoDropOnGroundEffect", &t.SnoDropOnGroundEffect)
	cb.Do("TConditionData", &t.TConditionData)
	cb.Do("SnoPowerOperator", &t.SnoPowerOperator)
	cb.Do("SnoPowerOperate", &t.SnoPowerOperate)
	cb.Do("SnoPowerOperatorActive", &t.SnoPowerOperatorActive)
	cb.Do("SnoPowerOperateActive", &t.SnoPowerOperateActive)
	cb.Do("Unk_359810e", &t.Unk_359810e)
	cb.Do("NCooldown", &t.NCooldown)
	cb.Do("Unk_9c8478e", &t.Unk_9c8478e)
	cb.Do("Unk_d45ed2d", &t.Unk_d45ed2d)
	cb.Do("Unk_f6b20b7", &t.Unk_f6b20b7)
	cb.Do("Unk_54513b8", &t.Unk_54513b8)
	cb.Do("Unk_fd1f378", &t.Unk_fd1f378)
	cb.Do("Unk_487c14", &t.Unk_487c14)
	cb.Do("Unk_87f2609", &t.Unk_87f2609)
	cb.Do("Unk_158eb4f", &t.Unk_158eb4f)
	cb.Do("Unk_ab58cd3", &t.Unk_ab58cd3)
	cb.Do("Unk_91a3966", &t.Unk_91a3966)
	cb.Do("Unk_25312e5", &t.Unk_25312e5)
	cb.Do("Unk_4be4371", &t.Unk_4be4371)
	cb.Do("PtProxData", &t.PtProxData)
}

type Type_61698cea struct {
	SzOnEnd DT_CSTRING[*DT_BYTE]
}

func (t *Type_61698cea) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SzOnEnd, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_61698cea) Walk(cb WalkCallback) {
	cb.Do("SzOnEnd", &t.SzOnEnd)
}

type PetMessage struct {
	THeader     RequiredMessageHeader
	Unk_70bf7e7 DT_UINT
	NIndex      DT_INT
	AnnPet      DT_ACD_NETWORK_NAME
	GbidPetType DT_GBID
	TNecroPet   DT_OPTIONAL[*NecroPetData]
	Unk_9e938b5 DT_OPTIONAL[*DT_INT64]
}

func (t *PetMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_70bf7e7, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.NIndex, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.AnnPet, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.GbidPetType, r, &Options{
		Flags: 1,
		Group: 23,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.TNecroPet, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.Unk_9e938b5, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+64, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PetMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("Unk_70bf7e7", &t.Unk_70bf7e7)
	cb.Do("NIndex", &t.NIndex)
	cb.Do("AnnPet", &t.AnnPet)
	cb.Do("GbidPetType", &t.GbidPetType)
	cb.Do("TNecroPet", &t.TNecroPet)
	cb.Do("Unk_9e938b5", &t.Unk_9e938b5)
}

type Type_619110a4 struct {
	NIsFemale        DT_INT
	SnoFace          DT_SNO
	SnoMakeup        DT_SNO
	SnoMarkingShape  DT_SNO
	SnoMarkingColor  DT_SNO
	SnoEyeColor      DT_SNO
	NSkinColorChoice DT_INT
	SnoHairColor     DT_SNO
	SnoHairStyle     DT_SNO
	SnoFacialHair    DT_SNO
	SnoJewelry       DT_SNO
	Unk_23f8995      DT_INT
	Unk_35e41c8      DT_INT
}

func (t *Type_619110a4) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.NIsFemale, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.SnoFace, r, &Options{
		Flags: 1,
		Group: 140,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.SnoMakeup, r, &Options{
		Flags: 1,
		Group: 132,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.SnoMarkingShape, r, &Options{
		Flags: 1,
		Group: 115,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoMarkingColor, r, &Options{
		Flags: 1,
		Group: 133,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.SnoEyeColor, r, &Options{
		Flags: 1,
		Group: 131,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.NSkinColorChoice, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.SnoHairColor, r, &Options{
		Flags: 1,
		Group: 134,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.SnoHairStyle, r, &Options{
		Flags: 1,
		Group: 138,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.SnoFacialHair, r, &Options{
		Flags: 1,
		Group: 139,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.SnoJewelry, r, &Options{
		Flags: 1,
		Group: 119,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.Unk_23f8995, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.Unk_35e41c8, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+52, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_619110a4) Walk(cb WalkCallback) {
	cb.Do("NIsFemale", &t.NIsFemale)
	cb.Do("SnoFace", &t.SnoFace)
	cb.Do("SnoMakeup", &t.SnoMakeup)
	cb.Do("SnoMarkingShape", &t.SnoMarkingShape)
	cb.Do("SnoMarkingColor", &t.SnoMarkingColor)
	cb.Do("SnoEyeColor", &t.SnoEyeColor)
	cb.Do("NSkinColorChoice", &t.NSkinColorChoice)
	cb.Do("SnoHairColor", &t.SnoHairColor)
	cb.Do("SnoHairStyle", &t.SnoHairStyle)
	cb.Do("SnoFacialHair", &t.SnoFacialHair)
	cb.Do("SnoJewelry", &t.SnoJewelry)
	cb.Do("Unk_23f8995", &t.Unk_23f8995)
	cb.Do("Unk_35e41c8", &t.Unk_35e41c8)
}

type AnimTreeBlendTriangle struct {
	NChildIndex1     DT_UINT
	NChildIndex2     DT_UINT
	DwDisintegrative DT_UINT
	TTriangle        Triangle2D
}

func (t *AnimTreeBlendTriangle) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.NChildIndex1, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.NChildIndex2, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwDisintegrative, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.TTriangle, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+36, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *AnimTreeBlendTriangle) Walk(cb WalkCallback) {
	cb.Do("NChildIndex1", &t.NChildIndex1)
	cb.Do("NChildIndex2", &t.NChildIndex2)
	cb.Do("DwDisintegrative", &t.DwDisintegrative)
	cb.Do("TTriangle", &t.TTriangle)
}

type PowerConditionIsInActorGroup struct {
	// Inherits PowerConditionBase
	// Inherits PolymorphicBase
	DwType         DT_UINT
	BInverse       DT_INT
	DwPad          DT_UINT
	ESubject       DT_ENUM
	GbidActorGroup DT_GBID
}

func (t *PowerConditionIsInActorGroup) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BInverse, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ESubject, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.GbidActorGroup, r, &Options{
		Flags: 1,
		Group: 24,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PowerConditionIsInActorGroup) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("BInverse", &t.BInverse)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("ESubject", &t.ESubject)
	cb.Do("GbidActorGroup", &t.GbidActorGroup)
}

type LargeBiomeObject struct {
	// Inherits BiomeObject
	// Inherits BiomeItem
	// Inherits PolymorphicBase
	DwType                 DT_UINT
	FlRadius               DT_FLOAT
	Unk_2fd1cdb            DT_FLOAT
	TAllowedScaleRange     DT_RANGE[*DT_FLOAT]
	Unk_87acb69            DT_RANGE[*DT_FLOAT]
	Unk_87acb6a            DT_RANGE[*DT_FLOAT]
	Unk_87acb6b            DT_RANGE[*DT_FLOAT]
	Unk_9854b6a            DT_RANGE[*DT_FLOAT]
	FlChance               DT_FLOAT
	DwFlags                DT_UINT
	Unk_2a8c4b6            DT_FLOAT
	AAzimuthAngle          DT_FLOAT
	AAltitudeAngle         DT_FLOAT
	Unk_6ead041            DT_RANGE[*DT_FLOAT]
	TParametricSettings    ParametricSettings
	ArProximityAdjustments DT_VARIABLEARRAY[*ProximityAdjustment]
	SnonameObject          DT_SNO_NAME
	Unk_d094b9a            DT_ENUM
	QInitialOrientation    bcQuat
	SzLookName             DT_UINT
	DwShaderMapOverride    DT_UINT
	DwPad                  DT_UINT
}

func (t *LargeBiomeObject) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.FlRadius, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.Unk_2fd1cdb, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.TAllowedScaleRange, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.Unk_87acb69, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.Unk_87acb6a, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.Unk_87acb6b, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.Unk_9854b6a, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.FlChance, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.DwFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_2a8c4b6, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.AAzimuthAngle, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.AAltitudeAngle, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.Unk_6ead041, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.TParametricSettings, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+224, &t.ArProximityAdjustments, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+240, &t.SnonameObject, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+248, &t.Unk_d094b9a, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+252, &t.QInitialOrientation, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+268, &t.SzLookName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+272, &t.DwShaderMapOverride, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+276, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+280, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *LargeBiomeObject) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("FlRadius", &t.FlRadius)
	cb.Do("Unk_2fd1cdb", &t.Unk_2fd1cdb)
	cb.Do("TAllowedScaleRange", &t.TAllowedScaleRange)
	cb.Do("Unk_87acb69", &t.Unk_87acb69)
	cb.Do("Unk_87acb6a", &t.Unk_87acb6a)
	cb.Do("Unk_87acb6b", &t.Unk_87acb6b)
	cb.Do("Unk_9854b6a", &t.Unk_9854b6a)
	cb.Do("FlChance", &t.FlChance)
	cb.Do("DwFlags", &t.DwFlags)
	cb.Do("Unk_2a8c4b6", &t.Unk_2a8c4b6)
	cb.Do("AAzimuthAngle", &t.AAzimuthAngle)
	cb.Do("AAltitudeAngle", &t.AAltitudeAngle)
	cb.Do("Unk_6ead041", &t.Unk_6ead041)
	cb.Do("TParametricSettings", &t.TParametricSettings)
	cb.Do("ArProximityAdjustments", &t.ArProximityAdjustments)
	cb.Do("SnonameObject", &t.SnonameObject)
	cb.Do("Unk_d094b9a", &t.Unk_d094b9a)
	cb.Do("QInitialOrientation", &t.QInitialOrientation)
	cb.Do("SzLookName", &t.SzLookName)
	cb.Do("DwShaderMapOverride", &t.DwShaderMapOverride)
	cb.Do("DwPad", &t.DwPad)
}

type MonsterFamilyDefinition struct {
	ArArchetypes DT_VARIABLEARRAY[*MonsterFamilyArchetype]
}

func (t *MonsterFamilyDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.ArArchetypes, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *MonsterFamilyDefinition) Walk(cb WalkCallback) {
	cb.Do("ArArchetypes", &t.ArArchetypes)
}

type TriggerEventHitFlash struct {
	// Inherits TriggerEvent
	// Inherits PolymorphicBase
	DwType                      DT_UINT
	DwPad                       DT_UINT
	TConditions                 TriggerConditions
	FGenerated                  DT_INT
	Unk_6cba752                 DT_INT
	DwParentActorID             DT_UINT
	DwTriggerFlags              DT_UINT
	DwTriggerFlagsEx            DT_UINT
	RgbaColorAdd                DT_RGBACOLOR
	NHitFlashAddDuration        DT_FLOAT
	RgbaColorMul                DT_RGBACOLOR
	NHitFlashMulDuration        DT_FLOAT
	FlHitFlashIntensity         DT_FLOAT
	Unk_622a853                 DT_FLOAT
	FlHitFlashIntensityDuration DT_FLOAT
	Unk_135c4d0                 DT_ENUM
	Unk_6ba75                   DT_ENUM
	EHitFlashCurve              DT_ENUM
	DwID                        DT_UINT
	NMaxHitFlash                DT_UINT
	Unk_17f7deb                 DT_INT
	Unk_b19da4b                 DT_INT
}

func (t *TriggerEventHitFlash) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.FGenerated, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_6cba752, r, &Options{Flags: 16}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.DwParentActorID, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.DwTriggerFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.DwTriggerFlagsEx, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.RgbaColorAdd, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.NHitFlashAddDuration, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.RgbaColorMul, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+100, &t.NHitFlashMulDuration, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+104, &t.FlHitFlashIntensity, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+108, &t.Unk_622a853, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.FlHitFlashIntensityDuration, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+116, &t.Unk_135c4d0, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.Unk_6ba75, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+124, &t.EHitFlashCurve, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.DwID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+132, &t.NMaxHitFlash, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+136, &t.Unk_17f7deb, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+140, &t.Unk_b19da4b, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+144, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TriggerEventHitFlash) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("TConditions", &t.TConditions)
	cb.Do("FGenerated", &t.FGenerated)
	cb.Do("Unk_6cba752", &t.Unk_6cba752)
	cb.Do("DwParentActorID", &t.DwParentActorID)
	cb.Do("DwTriggerFlags", &t.DwTriggerFlags)
	cb.Do("DwTriggerFlagsEx", &t.DwTriggerFlagsEx)
	cb.Do("RgbaColorAdd", &t.RgbaColorAdd)
	cb.Do("NHitFlashAddDuration", &t.NHitFlashAddDuration)
	cb.Do("RgbaColorMul", &t.RgbaColorMul)
	cb.Do("NHitFlashMulDuration", &t.NHitFlashMulDuration)
	cb.Do("FlHitFlashIntensity", &t.FlHitFlashIntensity)
	cb.Do("Unk_622a853", &t.Unk_622a853)
	cb.Do("FlHitFlashIntensityDuration", &t.FlHitFlashIntensityDuration)
	cb.Do("Unk_135c4d0", &t.Unk_135c4d0)
	cb.Do("Unk_6ba75", &t.Unk_6ba75)
	cb.Do("EHitFlashCurve", &t.EHitFlashCurve)
	cb.Do("DwID", &t.DwID)
	cb.Do("NMaxHitFlash", &t.NMaxHitFlash)
	cb.Do("Unk_17f7deb", &t.Unk_17f7deb)
	cb.Do("Unk_b19da4b", &t.Unk_b19da4b)
}

type Type_63010143 struct {
	TValueMin DT_VECTOR3D
	TValueMax DT_VECTOR3D
	TTime     DT_FLOAT
}

func (t *Type_63010143) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.TValueMin, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.TValueMax, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.TTime, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+28, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_63010143) Walk(cb WalkCallback) {
	cb.Do("TValueMin", &t.TValueMin)
	cb.Do("TValueMax", &t.TValueMax)
	cb.Do("TTime", &t.TTime)
}

type Type_63010144 struct {
	TValueMin DT_VECTOR4D
	TValueMax DT_VECTOR4D
	TTime     DT_FLOAT
}

func (t *Type_63010144) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.TValueMin, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TValueMax, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.TTime, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+36, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_63010144) Walk(cb WalkCallback) {
	cb.Do("TValueMin", &t.TValueMin)
	cb.Do("TValueMax", &t.TValueMax)
	cb.Do("TTime", &t.TTime)
}

type QuestPhase struct {
	// Inherits PolymorphicBase
	DwType          DT_UINT
	DwPad           DT_UINT
	DwUID           DT_UINT
	DwFlags         DT_UINT
	EType           DT_ENUM
	ArCallbackSets  DT_VARIABLEARRAY[*QuestObjectiveSet]
	Unk_4b2de13     DT_UINT
	Unk_188a07a     DT_VARIABLEARRAY[*DT_SNO]
	Unk_61c2846     DT_INT
	Unk_951ad2a     DT_SNO
	SnoReward       DT_SNO
	Unk_189b89b     DT_INT
	NTimerDuration  DT_UINT
	Unk_2bde7b6     DT_INT
	Unk_d3b7ed7     DT_VARIABLEARRAY[*DT_SNO]
	Unk_8280b0e     DT_INT
	Unk_eff642d     DT_INT
	Unk_fc27941     DT_INT
	Unk_d9a8a05     DT_UINT
	Unk_5d4cfc0     DT_UINT
	Unk_669bcf8     DT_UINT
	Unk_287ecb5     DT_UINT
	Unk_6344bd7     DT_FLOAT
	Unk_fab6e45     MarkerHandle
	Unk_47f8481     DT_VECTOR3D
	Unk_ed8215b     DT_SNO
	Unk_f6ded77     UIImageHandleReference
	Unk_f84da79     UIImageHandleReference
	SnoAudioContext DT_SNO
}

func (t *QuestPhase) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.DwUID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.EType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.ArCallbackSets, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.Unk_4b2de13, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.Unk_188a07a, r, &Options{
		Flags: 1,
		Group: 73,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_61c2846, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.Unk_951ad2a, r, &Options{
		Flags: 1,
		Group: 51,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.SnoReward, r, &Options{
		Flags: 1,
		Group: 52,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.Unk_189b89b, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.NTimerDuration, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.Unk_2bde7b6, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.Unk_d3b7ed7, r, &Options{
		Flags: 513,
		Group: 22,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.Unk_8280b0e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+116, &t.Unk_eff642d, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.Unk_fc27941, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+124, &t.Unk_d9a8a05, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.Unk_5d4cfc0, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+132, &t.Unk_669bcf8, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+136, &t.Unk_287ecb5, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+140, &t.Unk_6344bd7, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+144, &t.Unk_fab6e45, r, &Options{Flags: 513}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+152, &t.Unk_47f8481, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+164, &t.Unk_ed8215b, r, &Options{
		Flags: 512,
		Group: 48,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+168, &t.Unk_f6ded77, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+172, &t.Unk_f84da79, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+176, &t.SnoAudioContext, r, &Options{
		Flags: 1,
		Group: 93,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+184, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *QuestPhase) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("DwUID", &t.DwUID)
	cb.Do("DwFlags", &t.DwFlags)
	cb.Do("EType", &t.EType)
	cb.Do("ArCallbackSets", &t.ArCallbackSets)
	cb.Do("Unk_4b2de13", &t.Unk_4b2de13)
	cb.Do("Unk_188a07a", &t.Unk_188a07a)
	cb.Do("Unk_61c2846", &t.Unk_61c2846)
	cb.Do("Unk_951ad2a", &t.Unk_951ad2a)
	cb.Do("SnoReward", &t.SnoReward)
	cb.Do("Unk_189b89b", &t.Unk_189b89b)
	cb.Do("NTimerDuration", &t.NTimerDuration)
	cb.Do("Unk_2bde7b6", &t.Unk_2bde7b6)
	cb.Do("Unk_d3b7ed7", &t.Unk_d3b7ed7)
	cb.Do("Unk_8280b0e", &t.Unk_8280b0e)
	cb.Do("Unk_eff642d", &t.Unk_eff642d)
	cb.Do("Unk_fc27941", &t.Unk_fc27941)
	cb.Do("Unk_d9a8a05", &t.Unk_d9a8a05)
	cb.Do("Unk_5d4cfc0", &t.Unk_5d4cfc0)
	cb.Do("Unk_669bcf8", &t.Unk_669bcf8)
	cb.Do("Unk_287ecb5", &t.Unk_287ecb5)
	cb.Do("Unk_6344bd7", &t.Unk_6344bd7)
	cb.Do("Unk_fab6e45", &t.Unk_fab6e45)
	cb.Do("Unk_47f8481", &t.Unk_47f8481)
	cb.Do("Unk_ed8215b", &t.Unk_ed8215b)
	cb.Do("Unk_f6ded77", &t.Unk_f6ded77)
	cb.Do("Unk_f84da79", &t.Unk_f84da79)
	cb.Do("SnoAudioContext", &t.SnoAudioContext)
}

type ImbueAffixResultMessage struct {
	THeader     RequiredMessageHeader
	NResultCode DT_INT
}

func (t *ImbueAffixResultMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.NResultCode, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+20, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ImbueAffixResultMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("NResultCode", &t.NResultCode)
}

type AnimSetAnimPreloadHelper struct {
	SnoAnimSet  DT_SNO
	Unk_aa12873 DT_FIXEDARRAY[*SerialDataInfo]
	Unk_781e07e DT_FIXEDARRAY[*SerialDataInfo]
}

func (t *AnimSetAnimPreloadHelper) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoAnimSet, r, &Options{
		Flags: 1,
		Group: 8,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.Unk_aa12873, r, &Options{
		ArrayLength: 33,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+268, &t.Unk_781e07e, r, &Options{
		ArrayLength: 33,
		Flags:       1,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+532, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *AnimSetAnimPreloadHelper) Walk(cb WalkCallback) {
	cb.Do("SnoAnimSet", &t.SnoAnimSet)
	cb.Do("Unk_aa12873", &t.Unk_aa12873)
	cb.Do("Unk_781e07e", &t.Unk_781e07e)
}

type Type_63701e68 struct {
	// Inherits GlobalMarkerActorData
	// Inherits PolymorphicBase
	DwType         DT_UINT
	DwPad          DT_UINT
	DwEntranceName DT_STARTLOC_NAME
	DwPortalType   DT_UINT
}

func (t *Type_63701e68) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.DwEntranceName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPortalType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_63701e68) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("DwEntranceName", &t.DwEntranceName)
	cb.Do("DwPortalType", &t.DwPortalType)
}

type TriggerEventFootstepDrag struct {
	// Inherits TriggerEventRangedDuration
	// Inherits TriggerEvent
	// Inherits PolymorphicBase
	DwType           DT_UINT
	TConditions      TriggerConditions
	FGenerated       DT_INT
	Unk_6cba752      DT_INT
	DwParentActorID  DT_UINT
	TDuration        DT_FLOAT
	DwTriggerFlags   DT_UINT
	DwTriggerFlagsEx DT_UINT
	TCleanup         TriggerCleanup
	Unk_49e9257      DT_INT
	Unk_5490979      DT_INT
	DwPad            DT_UINT
	THardpointLink   HardpointLink
}

func (t *TriggerEventFootstepDrag) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.FGenerated, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_6cba752, r, &Options{Flags: 16}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.DwParentActorID, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.TDuration, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.DwTriggerFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.DwTriggerFlagsEx, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.TCleanup, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+116, &t.Unk_49e9257, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.Unk_5490979, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+124, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.THardpointLink, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+136, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TriggerEventFootstepDrag) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("TConditions", &t.TConditions)
	cb.Do("FGenerated", &t.FGenerated)
	cb.Do("Unk_6cba752", &t.Unk_6cba752)
	cb.Do("DwParentActorID", &t.DwParentActorID)
	cb.Do("TDuration", &t.TDuration)
	cb.Do("DwTriggerFlags", &t.DwTriggerFlags)
	cb.Do("DwTriggerFlagsEx", &t.DwTriggerFlagsEx)
	cb.Do("TCleanup", &t.TCleanup)
	cb.Do("Unk_49e9257", &t.Unk_49e9257)
	cb.Do("Unk_5490979", &t.Unk_5490979)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("THardpointLink", &t.THardpointLink)
}

type TriggerEventFootstepLift struct {
	// Inherits TriggerEvent
	// Inherits PolymorphicBase
	DwType          DT_UINT
	DwPad           DT_UINT
	TConditions     TriggerConditions
	FGenerated      DT_INT
	Unk_6cba752     DT_INT
	DwParentActorID DT_UINT
	THardpointLink  HardpointLink
}

func (t *TriggerEventFootstepLift) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.FGenerated, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_6cba752, r, &Options{Flags: 16}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.DwParentActorID, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.THardpointLink, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+88, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TriggerEventFootstepLift) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("TConditions", &t.TConditions)
	cb.Do("FGenerated", &t.FGenerated)
	cb.Do("Unk_6cba752", &t.Unk_6cba752)
	cb.Do("DwParentActorID", &t.DwParentActorID)
	cb.Do("THardpointLink", &t.THardpointLink)
}

type ConversationSpeakerCaseNode struct {
	// Inherits ConversationScopeNode
	// Inherits ConversationTreeNode
	// Inherits PolymorphicBase
	DwType         DT_UINT
	DwPad          DT_UINT
	DwNodeID       DT_UINT
	DwNextNodeID   DT_UINT
	DwParentNodeID DT_UINT
	PtNextNode     DT_INT64
	DwFlags        DT_UINT
	SzComment      DT_CSTRING[*DT_BYTE]
	ArChildNodes   DT_POLYMORPHIC_VARIABLEARRAY[*DT_INT64]
	SnoCondition   DT_SNO
	Unk_d8bf9e4    DT_INT
	SnoSpeaker     DT_SNO
}

func (t *ConversationSpeakerCaseNode) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.DwNodeID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwNextNodeID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.DwParentNodeID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.PtNextNode, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.DwFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.SzComment, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.ArChildNodes, r, &Options{Flags: 262145}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.SnoCondition, r, &Options{
		Flags: 1,
		Group: 51,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.Unk_d8bf9e4, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.SnoSpeaker, r, &Options{
		Flags: 1,
		Group: 72,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+104, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ConversationSpeakerCaseNode) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("DwNodeID", &t.DwNodeID)
	cb.Do("DwNextNodeID", &t.DwNextNodeID)
	cb.Do("DwParentNodeID", &t.DwParentNodeID)
	cb.Do("PtNextNode", &t.PtNextNode)
	cb.Do("DwFlags", &t.DwFlags)
	cb.Do("SzComment", &t.SzComment)
	cb.Do("ArChildNodes", &t.ArChildNodes)
	cb.Do("SnoCondition", &t.SnoCondition)
	cb.Do("Unk_d8bf9e4", &t.Unk_d8bf9e4)
	cb.Do("SnoSpeaker", &t.SnoSpeaker)
}

type PlayerTalentRankSubcondition struct {
	// Inherits Type_d3c3637f
	// Inherits Subcondition
	// Inherits PolymorphicBase
	DwType         DT_UINT
	BNegate        DT_INT
	EComparisonOp  DT_ENUM
	DwPad          DT_UINT
	SnoTalentPower DT_SNO
	DwTalentRank   DT_UINT
}

func (t *PlayerTalentRankSubcondition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BNegate, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.EComparisonOp, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.SnoTalentPower, r, &Options{
		Flags: 513,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.DwTalentRank, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+40, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PlayerTalentRankSubcondition) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("BNegate", &t.BNegate)
	cb.Do("EComparisonOp", &t.EComparisonOp)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("SnoTalentPower", &t.SnoTalentPower)
	cb.Do("DwTalentRank", &t.DwTalentRank)
}

type BoostDefinition struct {
	SzBoostName        DT_CSTRING[*DT_BYTE]
	SzBoostDescription DT_CSTRING[*DT_BYTE]
	Unk_99de476        DT_CSTRING[*DT_BYTE]
	NGold              DT_INT64
	Unk_19a8c24        DT_VARIABLEARRAY[*BoostCheatEntry]
	Unk_fd3ff28        DT_VARIABLEARRAY[*DT_BYTE]
	DwBoostHash        DT_UINT
}

func (t *BoostDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.SzBoostName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SzBoostDescription, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.Unk_99de476, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.NGold, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.Unk_19a8c24, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.Unk_fd3ff28, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.DwBoostHash, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+104, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *BoostDefinition) Walk(cb WalkCallback) {
	cb.Do("SzBoostName", &t.SzBoostName)
	cb.Do("SzBoostDescription", &t.SzBoostDescription)
	cb.Do("Unk_99de476", &t.Unk_99de476)
	cb.Do("NGold", &t.NGold)
	cb.Do("Unk_19a8c24", &t.Unk_19a8c24)
	cb.Do("Unk_fd3ff28", &t.Unk_fd3ff28)
	cb.Do("DwBoostHash", &t.DwBoostHash)
}

type Type_642fc25a struct {
	ArNodes     DT_VARIABLEARRAY[*StoryboardPlaySoundNode]
	Unk_36cc429 DT_VARIABLEARRAY[*DT_INT]
}

func (t *Type_642fc25a) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.ArNodes, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_36cc429, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_642fc25a) Walk(cb WalkCallback) {
	cb.Do("ArNodes", &t.ArNodes)
	cb.Do("Unk_36cc429", &t.Unk_36cc429)
}

type Type_64372b14 struct {
	// Inherits BuffCallbackBase
	// Inherits PolymorphicBase
	DwType                DT_UINT
	DwPad                 DT_UINT
	SnoTriggerEffectGroup DT_SNO
	ArConditions          DT_POLYMORPHIC_VARIABLEARRAY[*DT_INT64]
	Unk_7f4b6d5           DT_INT
	Unk_a639294           DT_INT
	DwCCTypes             DT_UINT
}

func (t *Type_64372b14) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoTriggerEffectGroup, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ArConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.Unk_7f4b6d5, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.Unk_a639294, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.DwCCTypes, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if _, err := r.Seek(p+64, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_64372b14) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("SnoTriggerEffectGroup", &t.SnoTriggerEffectGroup)
	cb.Do("ArConditions", &t.ArConditions)
	cb.Do("Unk_7f4b6d5", &t.Unk_7f4b6d5)
	cb.Do("Unk_a639294", &t.Unk_a639294)
	cb.Do("DwCCTypes", &t.DwCCTypes)
}

type TriggerEventDisableCollisionMessages struct {
	// Inherits TriggerEvent
	// Inherits PolymorphicBase
	DwType          DT_UINT
	DwPad           DT_UINT
	TConditions     TriggerConditions
	FGenerated      DT_INT
	Unk_6cba752     DT_INT
	DwParentActorID DT_UINT
	DwTriggerFlags  DT_UINT
}

func (t *TriggerEventDisableCollisionMessages) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.FGenerated, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_6cba752, r, &Options{Flags: 16}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.DwParentActorID, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.DwTriggerFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if _, err := r.Seek(p+88, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TriggerEventDisableCollisionMessages) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("TConditions", &t.TConditions)
	cb.Do("FGenerated", &t.FGenerated)
	cb.Do("Unk_6cba752", &t.Unk_6cba752)
	cb.Do("DwParentActorID", &t.DwParentActorID)
	cb.Do("DwTriggerFlags", &t.DwTriggerFlags)
}

type UIScrollBoxStyle struct {
	// Inherits UIWindowStyle
	// Inherits UIControlStyle
	// Inherits PolymorphicBase
	DwType                    DT_UINT
	DwPad                     DT_UINT
	HParentStyle              UIControlHandle
	Unk_441f783               DT_INT64
	M_eHasModifiedPowerTagMap DT_TAGMAP[*DT_ENUM]
	TConsoleInput             UIControlConsoleInput
	Unk_b4f614c               DT_TAGMAP[*DT_ENUM]
	Unk_651714c               DT_TAGMAP[*DT_ENUM]
}

func (t *UIScrollBoxStyle) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.HParentStyle, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_441f783, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.M_eHasModifiedPowerTagMap, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.TConsoleInput, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.Unk_b4f614c, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.Unk_651714c, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+96, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *UIScrollBoxStyle) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("HParentStyle", &t.HParentStyle)
	cb.Do("Unk_441f783", &t.Unk_441f783)
	cb.Do("M_eHasModifiedPowerTagMap", &t.M_eHasModifiedPowerTagMap)
	cb.Do("TConsoleInput", &t.TConsoleInput)
	cb.Do("Unk_b4f614c", &t.Unk_b4f614c)
	cb.Do("Unk_651714c", &t.Unk_651714c)
}

type InventorySplitStackMessage struct {
	THeader   RequiredMessageHeader
	AnnItem   DT_ACD_NETWORK_NAME
	UAmount   DT_INT64
	TLocation InvLoc
}

func (t *InventorySplitStackMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.AnnItem, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.UAmount, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.TLocation, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+56, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *InventorySplitStackMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("AnnItem", &t.AnnItem)
	cb.Do("UAmount", &t.UAmount)
	cb.Do("TLocation", &t.TLocation)
}

type PlayerWorldTierEligibilityMessage struct {
	THeader               RequiredMessageHeader
	EWorldTierEligibility DT_INT
}

func (t *PlayerWorldTierEligibilityMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.EWorldTierEligibility, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+20, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PlayerWorldTierEligibilityMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("EWorldTierEligibility", &t.EWorldTierEligibility)
}

type AIPropType struct {
	THeader    GBIDHeader
	Unk_766f08 DT_VARIABLEARRAY[*Type_674e5442]
}

func (t *AIPropType) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+264, &t.Unk_766f08, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+280, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *AIPropType) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("Unk_766f08", &t.Unk_766f08)
}

type UIControlFont struct {
	Unk_86d67b DT_TAGMAP[*DT_ENUM]
}

func (t *UIControlFont) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Unk_86d67b, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *UIControlFont) Walk(cb WalkCallback) {
	cb.Do("Unk_86d67b", &t.Unk_86d67b)
}

type UIControlIcon struct {
	Unk_535a62d DT_TAGMAP[*DT_ENUM]
}

func (t *UIControlIcon) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Unk_535a62d, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *UIControlIcon) Walk(cb WalkCallback) {
	cb.Do("Unk_535a62d", &t.Unk_535a62d)
}

type PortalGizmoData struct {
	// Inherits ActorGizmoData
	// Inherits PolymorphicBase
	DwType                       DT_UINT
	DwPad                        DT_UINT
	FDisableNonFriendlyOperation DT_INT
	FWalkToCenter                DT_INT
	FGizmoStartsDisabled         DT_INT
	FUseStringListName           DT_INT
	FForceMinimapIcon            DT_INT
	FlOperationRadius            DT_FLOAT
	Unk_d0b1df5                  DT_FLOAT
	FlGizmoUseTime               DT_FLOAT
	SnoChannelingEffect          DT_SNO
	Unk_2767229                  DT_INT
	FGizmoShowProgressBar        DT_INT
	Unk_6d9ebe1                  DT_INT
	Unk_5456245                  DT_INT
	Unk_af5815a                  DT_INT
	SnoOnClickEffect             DT_SNO
	SnoPickedUpEffect            DT_SNO
	SnoDropOnGroundEffect        DT_SNO
	TConditionData               GizmoConditionData
	SnoPowerOperator             DT_SNO
	SnoPowerOperate              DT_SNO
	SnoPowerOperatorActive       DT_SNO
	SnoPowerOperateActive        DT_SNO
	Unk_359810e                  DT_INT
	NCooldown                    DT_UINT
	Unk_9c8478e                  DT_UINT
	Unk_d45ed2d                  DT_INT
	Unk_f6b20b7                  DT_INT
	Unk_54513b8                  DT_INT
	Unk_fd1f378                  DT_UINT
	Unk_487c14                   DT_UINT
	Unk_87f2609                  DT_UINT
	Unk_158eb4f                  DT_FLOAT
	Unk_ab58cd3                  DT_ENUM
	Unk_91a3966                  DT_UINT
	Unk_25312e5                  DT_UINT
	Unk_4be4371                  DT_INT
	TCommonPortalData            CommonPortalGizmoData
	FSetsDynamicReturnLocation   DT_INT
}

func (t *PortalGizmoData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.FDisableNonFriendlyOperation, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.FWalkToCenter, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.FGizmoStartsDisabled, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.FUseStringListName, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.FForceMinimapIcon, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.FlOperationRadius, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.Unk_d0b1df5, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.FlGizmoUseTime, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.SnoChannelingEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.Unk_2767229, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.FGizmoShowProgressBar, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+60, &t.Unk_6d9ebe1, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.Unk_5456245, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.Unk_af5815a, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.SnoOnClickEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.SnoPickedUpEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.SnoDropOnGroundEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.TConditionData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.SnoPowerOperator, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.SnoPowerOperate, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.SnoPowerOperatorActive, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+100, &t.SnoPowerOperateActive, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+104, &t.Unk_359810e, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+108, &t.NCooldown, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.Unk_9c8478e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+116, &t.Unk_d45ed2d, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.Unk_f6b20b7, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+124, &t.Unk_54513b8, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.Unk_fd1f378, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+132, &t.Unk_487c14, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+136, &t.Unk_87f2609, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+140, &t.Unk_158eb4f, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+144, &t.Unk_ab58cd3, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+148, &t.Unk_91a3966, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+152, &t.Unk_25312e5, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+156, &t.Unk_4be4371, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+160, &t.TCommonPortalData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+192, &t.FSetsDynamicReturnLocation, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+200, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PortalGizmoData) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("FDisableNonFriendlyOperation", &t.FDisableNonFriendlyOperation)
	cb.Do("FWalkToCenter", &t.FWalkToCenter)
	cb.Do("FGizmoStartsDisabled", &t.FGizmoStartsDisabled)
	cb.Do("FUseStringListName", &t.FUseStringListName)
	cb.Do("FForceMinimapIcon", &t.FForceMinimapIcon)
	cb.Do("FlOperationRadius", &t.FlOperationRadius)
	cb.Do("Unk_d0b1df5", &t.Unk_d0b1df5)
	cb.Do("FlGizmoUseTime", &t.FlGizmoUseTime)
	cb.Do("SnoChannelingEffect", &t.SnoChannelingEffect)
	cb.Do("Unk_2767229", &t.Unk_2767229)
	cb.Do("FGizmoShowProgressBar", &t.FGizmoShowProgressBar)
	cb.Do("Unk_6d9ebe1", &t.Unk_6d9ebe1)
	cb.Do("Unk_5456245", &t.Unk_5456245)
	cb.Do("Unk_af5815a", &t.Unk_af5815a)
	cb.Do("SnoOnClickEffect", &t.SnoOnClickEffect)
	cb.Do("SnoPickedUpEffect", &t.SnoPickedUpEffect)
	cb.Do("SnoDropOnGroundEffect", &t.SnoDropOnGroundEffect)
	cb.Do("TConditionData", &t.TConditionData)
	cb.Do("SnoPowerOperator", &t.SnoPowerOperator)
	cb.Do("SnoPowerOperate", &t.SnoPowerOperate)
	cb.Do("SnoPowerOperatorActive", &t.SnoPowerOperatorActive)
	cb.Do("SnoPowerOperateActive", &t.SnoPowerOperateActive)
	cb.Do("Unk_359810e", &t.Unk_359810e)
	cb.Do("NCooldown", &t.NCooldown)
	cb.Do("Unk_9c8478e", &t.Unk_9c8478e)
	cb.Do("Unk_d45ed2d", &t.Unk_d45ed2d)
	cb.Do("Unk_f6b20b7", &t.Unk_f6b20b7)
	cb.Do("Unk_54513b8", &t.Unk_54513b8)
	cb.Do("Unk_fd1f378", &t.Unk_fd1f378)
	cb.Do("Unk_487c14", &t.Unk_487c14)
	cb.Do("Unk_87f2609", &t.Unk_87f2609)
	cb.Do("Unk_158eb4f", &t.Unk_158eb4f)
	cb.Do("Unk_ab58cd3", &t.Unk_ab58cd3)
	cb.Do("Unk_91a3966", &t.Unk_91a3966)
	cb.Do("Unk_25312e5", &t.Unk_25312e5)
	cb.Do("Unk_4be4371", &t.Unk_4be4371)
	cb.Do("TCommonPortalData", &t.TCommonPortalData)
	cb.Do("FSetsDynamicReturnLocation", &t.FSetsDynamicReturnLocation)
}

type TelemetryBugEnteredMessage struct {
	THeader     RequiredMessageHeader
	DwTimeStamp DT_INT64
}

func (t *TelemetryBugEnteredMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.DwTimeStamp, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TelemetryBugEnteredMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("DwTimeStamp", &t.DwTimeStamp)
}

type SalvageResultItem struct {
	SnoItem DT_SNO
	NCount  DT_INT
}

func (t *SalvageResultItem) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoItem, r, &Options{
		Flags: 1,
		Group: 73,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.NCount, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *SalvageResultItem) Walk(cb WalkCallback) {
	cb.Do("SnoItem", &t.SnoItem)
	cb.Do("NCount", &t.NCount)
}

type ItemUpgradeResultMessage struct {
	THeader   RequiredMessageHeader
	NNewLevel DT_INT
	NMaxLevel DT_INT
	SnoItem   DT_SNO
}

func (t *ItemUpgradeResultMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.NNewLevel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.NMaxLevel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SnoItem, r, &Options{
		Flags: 1,
		Group: 73,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+28, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ItemUpgradeResultMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("NNewLevel", &t.NNewLevel)
	cb.Do("NMaxLevel", &t.NMaxLevel)
	cb.Do("SnoItem", &t.SnoItem)
}

type FoliageGrid struct {
	Grid       DT_VARIABLEARRAY[*DT_UINT]
	AabbBounds AABB
	DwRows     DT_UINT
	DwColumns  DT_UINT
}

func (t *FoliageGrid) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Grid, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.AabbBounds, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.DwRows, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.DwColumns, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *FoliageGrid) Walk(cb WalkCallback) {
	cb.Do("Grid", &t.Grid)
	cb.Do("AabbBounds", &t.AabbBounds)
	cb.Do("DwRows", &t.DwRows)
	cb.Do("DwColumns", &t.DwColumns)
}

type GlobalVendorEvents struct {
	SnoConversations DT_FIXEDARRAY[*DT_SNO]
}

func (t *GlobalVendorEvents) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoConversations, r, &Options{
		ArrayLength: 5,
		Flags:       1,
		Group:       12,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+20, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *GlobalVendorEvents) Walk(cb WalkCallback) {
	cb.Do("SnoConversations", &t.SnoConversations)
}

type PlayerQuestMessage struct {
	THeader               RequiredMessageHeader
	DwPlayerGameAccountId DT_UINT
	SnoQuest              DT_SNO
	SnoLevelArea          DT_SNO
}

func (t *PlayerQuestMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.DwPlayerGameAccountId, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.SnoQuest, r, &Options{
		Flags: 1,
		Group: 31,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SnoLevelArea, r, &Options{
		Flags: 1,
		Group: 22,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+28, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PlayerQuestMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("DwPlayerGameAccountId", &t.DwPlayerGameAccountId)
	cb.Do("SnoQuest", &t.SnoQuest)
	cb.Do("SnoLevelArea", &t.SnoLevelArea)
}

type Type_660b81d5 struct {
	SnoTextCursorAnim DT_SNO
	SzOnChange        DT_CSTRING[*DT_BYTE]
	BIMEDisabled      DT_INT
	BNumbersOnly      DT_INT
	Freshness         DT_INT
	SzOnReturnEndEdit DT_CSTRING[*DT_BYTE]
	SzOnGainedFocus   DT_CSTRING[*DT_BYTE]
	SzOnLostFocus     DT_CSTRING[*DT_BYTE]
	Unk_a9baaf6       StringLabelHandleEx
	Unk_d60a445       DT_RGBACOLOR
	Unk_d57dba5       DT_RGBACOLOR
	NMaxEditChars     DT_INT
	Unk_a4c0376       DT_CSTRING[*DT_BYTE]
	Unk_5b06d35       StringLabelHandleEx
	NMaxEditBytes     DT_INT
	NNumDecimalPlaces DT_INT
	BAcceptsReturn    DT_INT
	Unk_75dc498       DT_INT
	Unk_16b847e       StringLabelHandleEx
	Unk_6240b01       StringLabelHandleEx
}

func (t *Type_660b81d5) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoTextCursorAnim, r, &Options{
		Flags: 1,
		Group: 7,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.SzOnChange, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.BIMEDisabled, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.BNumbersOnly, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.Freshness, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.SzOnReturnEndEdit, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.SzOnGainedFocus, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.SzOnLostFocus, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.Unk_a9baaf6, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.Unk_d60a445, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+100, &t.Unk_d57dba5, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+104, &t.NMaxEditChars, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.Unk_a4c0376, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.Unk_5b06d35, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+136, &t.NMaxEditBytes, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+140, &t.NNumDecimalPlaces, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+144, &t.BAcceptsReturn, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+148, &t.Unk_75dc498, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+152, &t.Unk_16b847e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+160, &t.Unk_6240b01, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+168, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_660b81d5) Walk(cb WalkCallback) {
	cb.Do("SnoTextCursorAnim", &t.SnoTextCursorAnim)
	cb.Do("SzOnChange", &t.SzOnChange)
	cb.Do("BIMEDisabled", &t.BIMEDisabled)
	cb.Do("BNumbersOnly", &t.BNumbersOnly)
	cb.Do("Freshness", &t.Freshness)
	cb.Do("SzOnReturnEndEdit", &t.SzOnReturnEndEdit)
	cb.Do("SzOnGainedFocus", &t.SzOnGainedFocus)
	cb.Do("SzOnLostFocus", &t.SzOnLostFocus)
	cb.Do("Unk_a9baaf6", &t.Unk_a9baaf6)
	cb.Do("Unk_d60a445", &t.Unk_d60a445)
	cb.Do("Unk_d57dba5", &t.Unk_d57dba5)
	cb.Do("NMaxEditChars", &t.NMaxEditChars)
	cb.Do("Unk_a4c0376", &t.Unk_a4c0376)
	cb.Do("Unk_5b06d35", &t.Unk_5b06d35)
	cb.Do("NMaxEditBytes", &t.NMaxEditBytes)
	cb.Do("NNumDecimalPlaces", &t.NNumDecimalPlaces)
	cb.Do("BAcceptsReturn", &t.BAcceptsReturn)
	cb.Do("Unk_75dc498", &t.Unk_75dc498)
	cb.Do("Unk_16b847e", &t.Unk_16b847e)
	cb.Do("Unk_6240b01", &t.Unk_6240b01)
}

type DebugProjectileDetPathData struct {
	EDetPathType DT_ENUM
	WpStartPos   DT_VECTOR3D
	WpTargetPos  DT_VECTOR3D
	AOriginalYaw DT_FLOAT
	Unk_36073a3  DT_INT
	FlFloatData0 DT_FLOAT
	FlFloatData1 DT_FLOAT
	FlFloatData2 DT_FLOAT
	FlFloatData3 DT_FLOAT
	FlFloatData4 DT_FLOAT
}

func (t *DebugProjectileDetPathData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.EDetPathType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.WpStartPos, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.WpTargetPos, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.AOriginalYaw, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.Unk_36073a3, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.FlFloatData0, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.FlFloatData1, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.FlFloatData2, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.FlFloatData3, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.FlFloatData4, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+56, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *DebugProjectileDetPathData) Walk(cb WalkCallback) {
	cb.Do("EDetPathType", &t.EDetPathType)
	cb.Do("WpStartPos", &t.WpStartPos)
	cb.Do("WpTargetPos", &t.WpTargetPos)
	cb.Do("AOriginalYaw", &t.AOriginalYaw)
	cb.Do("Unk_36073a3", &t.Unk_36073a3)
	cb.Do("FlFloatData0", &t.FlFloatData0)
	cb.Do("FlFloatData1", &t.FlFloatData1)
	cb.Do("FlFloatData2", &t.FlFloatData2)
	cb.Do("FlFloatData3", &t.FlFloatData3)
	cb.Do("FlFloatData4", &t.FlFloatData4)
}

type Type_666e5231 struct {
	FlTime  DT_FLOAT
	FlValue DT_FLOAT
}

func (t *Type_666e5231) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.FlTime, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.FlValue, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_666e5231) Walk(cb WalkCallback) {
	cb.Do("FlTime", &t.FlTime)
	cb.Do("FlValue", &t.FlValue)
}

type NecroArmyUnitSpecializationUpgradeData struct {
	SnoUpgradePower DT_SNO
}

func (t *NecroArmyUnitSpecializationUpgradeData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoUpgradePower, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+4, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *NecroArmyUnitSpecializationUpgradeData) Walk(cb WalkCallback) {
	cb.Do("SnoUpgradePower", &t.SnoUpgradePower)
}

type TriggerEventSequenceEnded struct {
	// Inherits TriggerEvent
	// Inherits PolymorphicBase
	DwType          DT_UINT
	DwPad           DT_UINT
	TConditions     TriggerConditions
	FGenerated      DT_INT
	Unk_6cba752     DT_INT
	DwParentActorID DT_UINT
	IdEffectGroup   DT_UINT
	FLoop           DT_INT
}

func (t *TriggerEventSequenceEnded) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.FGenerated, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_6cba752, r, &Options{Flags: 16}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.DwParentActorID, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.IdEffectGroup, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.FLoop, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+88, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TriggerEventSequenceEnded) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("TConditions", &t.TConditions)
	cb.Do("FGenerated", &t.FGenerated)
	cb.Do("Unk_6cba752", &t.Unk_6cba752)
	cb.Do("DwParentActorID", &t.DwParentActorID)
	cb.Do("IdEffectGroup", &t.IdEffectGroup)
	cb.Do("FLoop", &t.FLoop)
}

type UIMinimapRoadsStyle struct {
	// Inherits UIWindowStyle
	// Inherits UIControlStyle
	// Inherits PolymorphicBase
	DwType                    DT_UINT
	DwPad                     DT_UINT
	HParentStyle              UIControlHandle
	Unk_441f783               DT_INT64
	M_eHasModifiedPowerTagMap DT_TAGMAP[*DT_ENUM]
	TConsoleInput             UIControlConsoleInput
	Unk_b4f614c               DT_TAGMAP[*DT_ENUM]
}

func (t *UIMinimapRoadsStyle) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.HParentStyle, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_441f783, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.M_eHasModifiedPowerTagMap, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.TConsoleInput, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.Unk_b4f614c, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+80, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *UIMinimapRoadsStyle) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("HParentStyle", &t.HParentStyle)
	cb.Do("Unk_441f783", &t.Unk_441f783)
	cb.Do("M_eHasModifiedPowerTagMap", &t.M_eHasModifiedPowerTagMap)
	cb.Do("TConsoleInput", &t.TConsoleInput)
	cb.Do("Unk_b4f614c", &t.Unk_b4f614c)
}

type Type_674e5442 struct {
	Unk_c4cbeaa                       DT_SNO
	SnoPowerSelf                      DT_SNO
	SnoSummonedEncounterOverridePower DT_SNO
	Unk_87c7255                       DT_FLOAT
	EPowerSyncType                    DT_ENUM
	Unk_c0c1492                       DT_INT
	Unk_57d67bf                       DT_UINT
	Unk_c7bd259                       DT_UINT
}

func (t *Type_674e5442) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Unk_c4cbeaa, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.SnoPowerSelf, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.SnoSummonedEncounterOverridePower, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.Unk_87c7255, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.EPowerSyncType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.Unk_c0c1492, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_57d67bf, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.Unk_c7bd259, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_674e5442) Walk(cb WalkCallback) {
	cb.Do("Unk_c4cbeaa", &t.Unk_c4cbeaa)
	cb.Do("SnoPowerSelf", &t.SnoPowerSelf)
	cb.Do("SnoSummonedEncounterOverridePower", &t.SnoSummonedEncounterOverridePower)
	cb.Do("Unk_87c7255", &t.Unk_87c7255)
	cb.Do("EPowerSyncType", &t.EPowerSyncType)
	cb.Do("Unk_c0c1492", &t.Unk_c0c1492)
	cb.Do("Unk_57d67bf", &t.Unk_57d67bf)
	cb.Do("Unk_c7bd259", &t.Unk_c7bd259)
}

type MarkerMonsterActorData struct {
	ETeamIndex              DT_ENUM
	EMonsterRarity          DT_ENUM
	SnoConversationList     DT_SNO
	FAIDisabled             DT_INT
	Unk_84adee7             DT_INT
	FAIStartsInSpecialState DT_INT
	Unk_b5afb08             DT_INT
	Unk_2a0e071             DT_INT
	Unk_1c56441             DT_ENUM
	Unk_a497096             DT_SNO
	Unk_7a5aecd             DT_SNO
	Unk_e86679d             DT_FLOAT
	Unk_8e70eff             DT_ENUM
}

func (t *MarkerMonsterActorData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.ETeamIndex, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.EMonsterRarity, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.SnoConversationList, r, &Options{
		Flags: 1,
		Group: 13,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.FAIDisabled, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_84adee7, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.FAIStartsInSpecialState, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_b5afb08, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.Unk_2a0e071, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.Unk_1c56441, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.Unk_a497096, r, &Options{
		Flags: 1,
		Group: 3,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.Unk_7a5aecd, r, &Options{
		Flags: 1,
		Group: 8,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.Unk_e86679d, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.Unk_8e70eff, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+52, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *MarkerMonsterActorData) Walk(cb WalkCallback) {
	cb.Do("ETeamIndex", &t.ETeamIndex)
	cb.Do("EMonsterRarity", &t.EMonsterRarity)
	cb.Do("SnoConversationList", &t.SnoConversationList)
	cb.Do("FAIDisabled", &t.FAIDisabled)
	cb.Do("Unk_84adee7", &t.Unk_84adee7)
	cb.Do("FAIStartsInSpecialState", &t.FAIStartsInSpecialState)
	cb.Do("Unk_b5afb08", &t.Unk_b5afb08)
	cb.Do("Unk_2a0e071", &t.Unk_2a0e071)
	cb.Do("Unk_1c56441", &t.Unk_1c56441)
	cb.Do("Unk_a497096", &t.Unk_a497096)
	cb.Do("Unk_7a5aecd", &t.Unk_7a5aecd)
	cb.Do("Unk_e86679d", &t.Unk_e86679d)
	cb.Do("Unk_8e70eff", &t.Unk_8e70eff)
}

type PowerConditionDamageIsDot struct {
	// Inherits PowerConditionBase
	// Inherits PolymorphicBase
	DwType   DT_UINT
	BInverse DT_INT
	DwPad    DT_UINT
}

func (t *PowerConditionDamageIsDot) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BInverse, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PowerConditionDamageIsDot) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("BInverse", &t.BInverse)
	cb.Do("DwPad", &t.DwPad)
}

type Type_679d7ec8 struct {
	// Inherits PowerConditionBase
	// Inherits PolymorphicBase
	DwType   DT_UINT
	BInverse DT_INT
	DwPad    DT_UINT
}

func (t *Type_679d7ec8) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BInverse, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_679d7ec8) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("BInverse", &t.BInverse)
	cb.Do("DwPad", &t.DwPad)
}

type Type_67a0bff3 struct {
	// Inherits Subcondition
	// Inherits PolymorphicBase
	DwType      DT_UINT
	BNegate     DT_INT
	DwPad       DT_UINT
	Unk_4cb9610 DT_GBID
	Unk_c7b2b18 DT_ENUM
}

func (t *Type_67a0bff3) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BNegate, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_4cb9610, r, &Options{
		Flags: 1,
		Group: 63,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.Unk_c7b2b18, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_67a0bff3) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("BNegate", &t.BNegate)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("Unk_4cb9610", &t.Unk_4cb9610)
	cb.Do("Unk_c7b2b18", &t.Unk_c7b2b18)
}

type Type_67a817a6 struct {
	// Inherits Subcondition
	// Inherits PolymorphicBase
	DwType  DT_UINT
	BNegate DT_INT
	DwPad   DT_UINT
}

func (t *Type_67a817a6) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BNegate, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_67a817a6) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("BNegate", &t.BNegate)
	cb.Do("DwPad", &t.DwPad)
}

type Type_67c548b3 struct {
	THeader               RequiredRequestMessageHeader
	DwPlayerGameAccountId DT_UINT
}

func (t *Type_67c548b3) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPlayerGameAccountId, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_67c548b3) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("DwPlayerGameAccountId", &t.DwPlayerGameAccountId)
}

type ActorSlotHelper struct {
	TComponent SerialDataInfo
}

func (t *ActorSlotHelper) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.TComponent, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ActorSlotHelper) Walk(cb WalkCallback) {
	cb.Do("TComponent", &t.TComponent)
}

type Type_6808914a struct {
	NHeightFieldCount       DT_INT
	FlHeightTexturesSize    DT_FLOAT
	FlMaskTexturesSize      DT_FLOAT
	FlFlowMapTexturesSize   DT_FLOAT
	FlClutterBuffersSize    DT_FLOAT
	FlIndexBuffersSize      DT_FLOAT
	FlFogMaskBuffersSize    DT_FLOAT
	FlOceanMaskBuffersSize  DT_FLOAT
	FlSphericalHarmonicSize DT_FLOAT
	FlVertexAOSize          DT_FLOAT
}

func (t *Type_6808914a) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.NHeightFieldCount, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.FlHeightTexturesSize, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.FlMaskTexturesSize, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.FlFlowMapTexturesSize, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.FlClutterBuffersSize, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.FlIndexBuffersSize, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.FlFogMaskBuffersSize, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.FlOceanMaskBuffersSize, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.FlSphericalHarmonicSize, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.FlVertexAOSize, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+40, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_6808914a) Walk(cb WalkCallback) {
	cb.Do("NHeightFieldCount", &t.NHeightFieldCount)
	cb.Do("FlHeightTexturesSize", &t.FlHeightTexturesSize)
	cb.Do("FlMaskTexturesSize", &t.FlMaskTexturesSize)
	cb.Do("FlFlowMapTexturesSize", &t.FlFlowMapTexturesSize)
	cb.Do("FlClutterBuffersSize", &t.FlClutterBuffersSize)
	cb.Do("FlIndexBuffersSize", &t.FlIndexBuffersSize)
	cb.Do("FlFogMaskBuffersSize", &t.FlFogMaskBuffersSize)
	cb.Do("FlOceanMaskBuffersSize", &t.FlOceanMaskBuffersSize)
	cb.Do("FlSphericalHarmonicSize", &t.FlSphericalHarmonicSize)
	cb.Do("FlVertexAOSize", &t.FlVertexAOSize)
}

type PreloadSpawnMarkerData struct {
	TSNOName   DT_SNO_NAME
	EActorType DT_ENUM
	EGender    DT_ENUM
}

func (t *PreloadSpawnMarkerData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.TSNOName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.EActorType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.EGender, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PreloadSpawnMarkerData) Walk(cb WalkCallback) {
	cb.Do("TSNOName", &t.TSNOName)
	cb.Do("EActorType", &t.EActorType)
	cb.Do("EGender", &t.EGender)
}

type UInt64DataResponse struct {
	THeader RequiredResponseMessageHeader
	UData   DT_INT64
}

func (t *UInt64DataResponse) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.UData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *UInt64DataResponse) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("UData", &t.UData)
}

type WaypointEffectInfo struct {
	SnoIntroEffect        DT_SNO
	SnoLoopIntroEffect    DT_SNO
	SnoLoopEffect         DT_SNO
	SnoLoopOutroEffect    DT_SNO
	SnoLoopSkipEffect     DT_SNO
	Unk_7bc440d           DT_FLOAT
	Unk_b8b4636           DT_FLOAT
	Unk_86403ef           DT_INT
	Unk_f0eaae5           DT_INT
	Unk_e0a3943           DT_INT
	Unk_9c071e3           DT_INT
	Unk_4bd94b4           DT_INT
	Unk_69b2ec7           DT_INT
	Unk_449111f           DT_INT
	SnoLoopingWorld       DT_SNO
	SzCameraMarkerName    DT_CHARARRAY
	SnoOutroEffect        DT_SNO
	SnoSkippedOutroEffect DT_SNO
	Unk_bdd12d            DT_INT
	Unk_f8d8170           DT_FLOAT
	Unk_188141b           DT_FLOAT
	Unk_66ebec            DT_FLOAT
	Unk_e660d97           DT_FLOAT
}

func (t *WaypointEffectInfo) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoIntroEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.SnoLoopIntroEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.SnoLoopEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.SnoLoopOutroEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoLoopSkipEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.Unk_7bc440d, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_b8b4636, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.Unk_86403ef, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.Unk_f0eaae5, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.Unk_e0a3943, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.Unk_9c071e3, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.Unk_4bd94b4, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.Unk_69b2ec7, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.Unk_449111f, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.SnoLoopingWorld, r, &Options{
		Flags: 513,
		Group: 48,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+60, &t.SzCameraMarkerName, r, &Options{
		ArrayLength: 128,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+188, &t.SnoOutroEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+192, &t.SnoSkippedOutroEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+196, &t.Unk_bdd12d, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+200, &t.Unk_f8d8170, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+204, &t.Unk_188141b, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+208, &t.Unk_66ebec, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+212, &t.Unk_e660d97, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+216, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *WaypointEffectInfo) Walk(cb WalkCallback) {
	cb.Do("SnoIntroEffect", &t.SnoIntroEffect)
	cb.Do("SnoLoopIntroEffect", &t.SnoLoopIntroEffect)
	cb.Do("SnoLoopEffect", &t.SnoLoopEffect)
	cb.Do("SnoLoopOutroEffect", &t.SnoLoopOutroEffect)
	cb.Do("SnoLoopSkipEffect", &t.SnoLoopSkipEffect)
	cb.Do("Unk_7bc440d", &t.Unk_7bc440d)
	cb.Do("Unk_b8b4636", &t.Unk_b8b4636)
	cb.Do("Unk_86403ef", &t.Unk_86403ef)
	cb.Do("Unk_f0eaae5", &t.Unk_f0eaae5)
	cb.Do("Unk_e0a3943", &t.Unk_e0a3943)
	cb.Do("Unk_9c071e3", &t.Unk_9c071e3)
	cb.Do("Unk_4bd94b4", &t.Unk_4bd94b4)
	cb.Do("Unk_69b2ec7", &t.Unk_69b2ec7)
	cb.Do("Unk_449111f", &t.Unk_449111f)
	cb.Do("SnoLoopingWorld", &t.SnoLoopingWorld)
	cb.Do("SzCameraMarkerName", &t.SzCameraMarkerName)
	cb.Do("SnoOutroEffect", &t.SnoOutroEffect)
	cb.Do("SnoSkippedOutroEffect", &t.SnoSkippedOutroEffect)
	cb.Do("Unk_bdd12d", &t.Unk_bdd12d)
	cb.Do("Unk_f8d8170", &t.Unk_f8d8170)
	cb.Do("Unk_188141b", &t.Unk_188141b)
	cb.Do("Unk_66ebec", &t.Unk_66ebec)
	cb.Do("Unk_e660d97", &t.Unk_e660d97)
}

type HardpointOffsets struct {
	ArMaleOffsets   DT_VARIABLEARRAY[*HardpointOffset]
	ArFemaleOffsets DT_VARIABLEARRAY[*HardpointOffset]
}

func (t *HardpointOffsets) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.ArMaleOffsets, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.ArFemaleOffsets, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *HardpointOffsets) Walk(cb WalkCallback) {
	cb.Do("ArMaleOffsets", &t.ArMaleOffsets)
	cb.Do("ArFemaleOffsets", &t.ArFemaleOffsets)
}

type RevealTeamMessage struct {
	THeader       RequiredMessageHeader
	ETeam         DT_ENUM
	DwTeamFlags   DT_UINT
	ETeamColoring DT_ENUM
}

func (t *RevealTeamMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.ETeam, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwTeamFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ETeamColoring, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+28, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *RevealTeamMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("ETeam", &t.ETeam)
	cb.Do("DwTeamFlags", &t.DwTeamFlags)
	cb.Do("ETeamColoring", &t.ETeamColoring)
}

type IKLegBoneChain struct {
	// Inherits IKBoneChainBase
	// Inherits PolymorphicBase
	DwType             DT_UINT
	DwPad              DT_UINT
	EIKLimb            DT_ENUM
	EIKTarget          DT_ENUM
	PtIKBones          DT_VARIABLEARRAY[*IKBone]
	BUseAnimatedOffset DT_INT
	FlOffsetHeight     DT_FLOAT
	TAlternateBone     IKBone
	Unk_978714f        DT_FLOAT
}

func (t *IKLegBoneChain) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.EIKLimb, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.EIKTarget, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.PtIKBones, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.BUseAnimatedOffset, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.FlOffsetHeight, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.TAlternateBone, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.Unk_978714f, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+56, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *IKLegBoneChain) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("EIKLimb", &t.EIKLimb)
	cb.Do("EIKTarget", &t.EIKTarget)
	cb.Do("PtIKBones", &t.PtIKBones)
	cb.Do("BUseAnimatedOffset", &t.BUseAnimatedOffset)
	cb.Do("FlOffsetHeight", &t.FlOffsetHeight)
	cb.Do("TAlternateBone", &t.TAlternateBone)
	cb.Do("Unk_978714f", &t.Unk_978714f)
}

type Type_6909dd52 struct {
	Unk_3c1684f           Type_ac30acdf
	PtVertices            DT_VARIABLEARRAY[*Type_c2ce8583]
	PtFaces               DT_VARIABLEARRAY[*Type_7ff0fb14]
	PtDistanceConstraints DT_VARIABLEARRAY[*Type_a5c62f55]
	PtBendingConstraints  DT_VARIABLEARRAY[*Type_8d06aec1]
	PtVertexMap           DT_VARIABLEARRAY[*DT_WORD]
	PtCapsules            DT_VARIABLEARRAY[*Type_e1f41032]
	PtPlanes              DT_VARIABLEARRAY[*Type_b76a31b5]
	PtFollowerIndices     DT_VARIABLEARRAY[*DT_WORD]
	PtAnchorMap           DT_VARIABLEARRAY[*DT_WORD]
}

func (t *Type_6909dd52) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Unk_3c1684f, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+152, &t.PtVertices, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+168, &t.PtFaces, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+184, &t.PtDistanceConstraints, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+200, &t.PtBendingConstraints, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+216, &t.PtVertexMap, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+232, &t.PtCapsules, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+248, &t.PtPlanes, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+264, &t.PtFollowerIndices, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+280, &t.PtAnchorMap, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+296, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_6909dd52) Walk(cb WalkCallback) {
	cb.Do("Unk_3c1684f", &t.Unk_3c1684f)
	cb.Do("PtVertices", &t.PtVertices)
	cb.Do("PtFaces", &t.PtFaces)
	cb.Do("PtDistanceConstraints", &t.PtDistanceConstraints)
	cb.Do("PtBendingConstraints", &t.PtBendingConstraints)
	cb.Do("PtVertexMap", &t.PtVertexMap)
	cb.Do("PtCapsules", &t.PtCapsules)
	cb.Do("PtPlanes", &t.PtPlanes)
	cb.Do("PtFollowerIndices", &t.PtFollowerIndices)
	cb.Do("PtAnchorMap", &t.PtAnchorMap)
}

type SNOFileHeader struct {
	DwSignature  DT_UINT
	DwFormatHash DT_UINT
	DwDummy      DT_UINT
	DwXMLHash    DT_UINT
}

func (t *SNOFileHeader) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.DwSignature, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.DwFormatHash, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwDummy, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwXMLHash, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *SNOFileHeader) Walk(cb WalkCallback) {
	cb.Do("DwSignature", &t.DwSignature)
	cb.Do("DwFormatHash", &t.DwFormatHash)
	cb.Do("DwDummy", &t.DwDummy)
	cb.Do("DwXMLHash", &t.DwXMLHash)
}

type ShortcutKey struct {
	EKey           DT_ENUM
	DwModifiers    DT_UINT
	EKeyAlt        DT_ENUM
	DwModifiersAlt DT_UINT
}

func (t *ShortcutKey) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.EKey, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.DwModifiers, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.EKeyAlt, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwModifiersAlt, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ShortcutKey) Walk(cb WalkCallback) {
	cb.Do("EKey", &t.EKey)
	cb.Do("DwModifiers", &t.DwModifiers)
	cb.Do("EKeyAlt", &t.EKeyAlt)
	cb.Do("DwModifiersAlt", &t.DwModifiersAlt)
}

type UITimerStyle struct {
	// Inherits UIWindowStyle
	// Inherits UIControlStyle
	// Inherits PolymorphicBase
	DwType                    DT_UINT
	DwPad                     DT_UINT
	HParentStyle              UIControlHandle
	Unk_441f783               DT_INT64
	M_eHasModifiedPowerTagMap DT_TAGMAP[*DT_ENUM]
	TConsoleInput             UIControlConsoleInput
	Unk_b4f614c               DT_TAGMAP[*DT_ENUM]
}

func (t *UITimerStyle) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.HParentStyle, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_441f783, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.M_eHasModifiedPowerTagMap, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.TConsoleInput, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.Unk_b4f614c, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+80, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *UITimerStyle) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("HParentStyle", &t.HParentStyle)
	cb.Do("Unk_441f783", &t.Unk_441f783)
	cb.Do("M_eHasModifiedPowerTagMap", &t.M_eHasModifiedPowerTagMap)
	cb.Do("TConsoleInput", &t.TConsoleInput)
	cb.Do("Unk_b4f614c", &t.Unk_b4f614c)
}

type OnStartPowerCallback struct {
	// Inherits PowerCallbackBase
	// Inherits PolymorphicBase
	DwType                DT_UINT
	DwPad                 DT_UINT
	SnoTriggerEffectGroup DT_SNO
	BCouldHaveRagdolled   DT_INT
}

func (t *OnStartPowerCallback) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoTriggerEffectGroup, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.BCouldHaveRagdolled, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *OnStartPowerCallback) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("SnoTriggerEffectGroup", &t.SnoTriggerEffectGroup)
	cb.Do("BCouldHaveRagdolled", &t.BCouldHaveRagdolled)
}

type Type_699e5b54 struct {
	// Inherits PowerConditionBase
	// Inherits PolymorphicBase
	DwType      DT_UINT
	BInverse    DT_INT
	DwPad       DT_UINT
	ESubject    DT_ENUM
	Unk_120030a DT_VARIABLEARRAY[*DT_GBID]
}

func (t *Type_699e5b54) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BInverse, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ESubject, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.Unk_120030a, r, &Options{
		Flags: 1,
		Group: 66,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_699e5b54) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("BInverse", &t.BInverse)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("ESubject", &t.ESubject)
	cb.Do("Unk_120030a", &t.Unk_120030a)
}

type AtLeastLogicSubcondition struct {
	// Inherits LogicSubcondition
	// Inherits Subcondition
	// Inherits PolymorphicBase
	DwType       DT_UINT
	BNegate      DT_INT
	DwPad        DT_UINT
	ArConditions DT_POLYMORPHIC_VARIABLEARRAY[*DT_INT64]
	NMinimum     DT_INT
}

func (t *AtLeastLogicSubcondition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BNegate, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ArConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.NMinimum, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+56, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *AtLeastLogicSubcondition) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("BNegate", &t.BNegate)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("ArConditions", &t.ArConditions)
	cb.Do("NMinimum", &t.NMinimum)
}

type ItemCountSubcondition struct {
	// Inherits Type_d3c3637f
	// Inherits Subcondition
	// Inherits PolymorphicBase
	DwType        DT_UINT
	BNegate       DT_INT
	EComparisonOp DT_ENUM
	DwPad         DT_UINT
	SnoItem       DT_SNO
	NItemCount    DT_INT
}

func (t *ItemCountSubcondition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BNegate, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.EComparisonOp, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.SnoItem, r, &Options{
		Flags: 513,
		Group: 73,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.NItemCount, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+40, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ItemCountSubcondition) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("BNegate", &t.BNegate)
	cb.Do("EComparisonOp", &t.EComparisonOp)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("SnoItem", &t.SnoItem)
	cb.Do("NItemCount", &t.NItemCount)
}

type NecroPetData struct {
	EUnitType DT_ENUM
}

func (t *NecroPetData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.EUnitType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+4, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *NecroPetData) Walk(cb WalkCallback) {
	cb.Do("EUnitType", &t.EUnitType)
}

type EffectGroupActorAnimationTrack struct {
	// Inherits EffectGroupTrack
	// Inherits PolymorphicBase
	DwType DT_UINT
	DwPad  DT_UINT
}

func (t *EffectGroupActorAnimationTrack) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *EffectGroupActorAnimationTrack) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
}

type ScriptEventParamLevelArea struct {
	// Inherits ScriptEventParamBase
	// Inherits PolymorphicBase
	DwType       DT_UINT
	EParamType   DT_ENUM
	DwPad        DT_UINT
	SnoLevelArea DT_SNO
}

func (t *ScriptEventParamLevelArea) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.EParamType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SnoLevelArea, r, &Options{
		Flags: 513,
		Group: 22,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ScriptEventParamLevelArea) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("EParamType", &t.EParamType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("SnoLevelArea", &t.SnoLevelArea)
}

type ItemQualityModifierSubcondition struct {
	// Inherits Type_d3c3637f
	// Inherits Subcondition
	// Inherits PolymorphicBase
	DwType               DT_UINT
	BNegate              DT_INT
	EComparisonOp        DT_ENUM
	DwPad                DT_UINT
	EItemQualityModifier DT_ENUM
}

func (t *ItemQualityModifierSubcondition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BNegate, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.EComparisonOp, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.EItemQualityModifier, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+40, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ItemQualityModifierSubcondition) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("BNegate", &t.BNegate)
	cb.Do("EComparisonOp", &t.EComparisonOp)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("EItemQualityModifier", &t.EItemQualityModifier)
}

type UIContextMenuStyle struct {
	// Inherits UIStackPanelStyle
	// Inherits UIWindowStyle
	// Inherits UIControlStyle
	// Inherits PolymorphicBase
	DwType                    DT_UINT
	DwPad                     DT_UINT
	HParentStyle              UIControlHandle
	Unk_441f783               DT_INT64
	M_eHasModifiedPowerTagMap DT_TAGMAP[*DT_ENUM]
	TConsoleInput             UIControlConsoleInput
	Unk_b4f614c               DT_TAGMAP[*DT_ENUM]
	Unk_8e594da               DT_TAGMAP[*DT_ENUM]
}

func (t *UIContextMenuStyle) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.HParentStyle, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_441f783, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.M_eHasModifiedPowerTagMap, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.TConsoleInput, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.Unk_b4f614c, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.Unk_8e594da, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+96, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *UIContextMenuStyle) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("HParentStyle", &t.HParentStyle)
	cb.Do("Unk_441f783", &t.Unk_441f783)
	cb.Do("M_eHasModifiedPowerTagMap", &t.M_eHasModifiedPowerTagMap)
	cb.Do("TConsoleInput", &t.TConsoleInput)
	cb.Do("Unk_b4f614c", &t.Unk_b4f614c)
	cb.Do("Unk_8e594da", &t.Unk_8e594da)
}

type CraftingMatCategory struct {
	THeader GBIDHeader
}

func (t *CraftingMatCategory) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+260, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *CraftingMatCategory) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
}

type DeathMaterialTemplate struct{}

func (t *DeathMaterialTemplate) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if _, err := r.Seek(p+1, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *DeathMaterialTemplate) Walk(cb WalkCallback) {}

type Type_6a8a63e0 struct {
	Unk_1b85e9d DT_ENUM
	TSettings   ParametricSettings
}

func (t *Type_6a8a63e0) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Unk_1b85e9d, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.TSettings, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+132, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_6a8a63e0) Walk(cb WalkCallback) {
	cb.Do("Unk_1b85e9d", &t.Unk_1b85e9d)
	cb.Do("TSettings", &t.TSettings)
}

type RunTimeMaterialVectorGraphEntry struct {
	Unk_411da82 Type_41b30aab
}

func (t *RunTimeMaterialVectorGraphEntry) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Unk_411da82, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+56, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *RunTimeMaterialVectorGraphEntry) Walk(cb WalkCallback) {
	cb.Do("Unk_411da82", &t.Unk_411da82)
}

type GameTestingActorUseSkill struct {
	THeader      RequiredMessageHeader
	AnnKey       DT_ACD_NETWORK_NAME
	SnoSkill     DT_SNO
	WpLocation   DT_VECTOR3D
	SearchRadius DT_FLOAT
	BForce       DT_INT
}

func (t *GameTestingActorUseSkill) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.AnnKey, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SnoSkill, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.WpLocation, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.SearchRadius, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.BForce, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *GameTestingActorUseSkill) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("AnnKey", &t.AnnKey)
	cb.Do("SnoSkill", &t.SnoSkill)
	cb.Do("WpLocation", &t.WpLocation)
	cb.Do("SearchRadius", &t.SearchRadius)
	cb.Do("BForce", &t.BForce)
}

type Type_6b03fc60 struct {
	DwType  DT_UINT
	FlTime  DT_FLOAT
	DwPad   DT_UINT
	TValue  DT_VECTOR2D
	EEasing DT_ENUM
}

func (t *Type_6b03fc60) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.FlTime, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.TValue, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.EEasing, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+40, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_6b03fc60) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("FlTime", &t.FlTime)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("TValue", &t.TValue)
	cb.Do("EEasing", &t.EEasing)
}

type UIImageHandleReference struct {
	HImageHandle DT_UINT
}

func (t *UIImageHandleReference) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.HImageHandle, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+4, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *UIImageHandleReference) Walk(cb WalkCallback) {
	cb.Do("HImageHandle", &t.HImageHandle)
}

type PlayerWeaponExpertiseLevelMessage struct {
	THeader               RequiredMessageHeader
	DwPlayerGameAccountId DT_UINT
	SnoItemType           DT_SNO
	NNewLevel             DT_INT
}

func (t *PlayerWeaponExpertiseLevelMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.DwPlayerGameAccountId, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.SnoItemType, r, &Options{
		Flags: 1,
		Group: 98,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.NNewLevel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+28, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PlayerWeaponExpertiseLevelMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("DwPlayerGameAccountId", &t.DwPlayerGameAccountId)
	cb.Do("SnoItemType", &t.SnoItemType)
	cb.Do("NNewLevel", &t.NNewLevel)
}

type SphereProximityData struct {
	// Inherits ProximityDataBase
	// Inherits PolymorphicBase
	DwType   DT_UINT
	DwPad    DT_UINT
	FlRadius DT_FLOAT
}

func (t *SphereProximityData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.FlRadius, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *SphereProximityData) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("FlRadius", &t.FlRadius)
}

type Type_6b603dda struct {
	PShaderProgram DT_VARIABLEARRAY[*DT_BYTE]
	DwKey          DT_INT64
	Unk_8e5f439    DT_VARIABLEARRAY[*DT_UINT]
	Unk_d4d5dbb    DT_VARIABLEARRAY[*DT_INT]
	PtResourceSlot DT_VARIABLEARRAY[*DT_ENUM]
	Unk_6f6dbab    DT_VARIABLEARRAY[*DT_ENUM]
}

func (t *Type_6b603dda) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.PShaderProgram, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.DwKey, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_8e5f439, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.Unk_d4d5dbb, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.PtResourceSlot, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_6f6dbab, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+88, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_6b603dda) Walk(cb WalkCallback) {
	cb.Do("PShaderProgram", &t.PShaderProgram)
	cb.Do("DwKey", &t.DwKey)
	cb.Do("Unk_8e5f439", &t.Unk_8e5f439)
	cb.Do("Unk_d4d5dbb", &t.Unk_d4d5dbb)
	cb.Do("PtResourceSlot", &t.PtResourceSlot)
	cb.Do("Unk_6f6dbab", &t.Unk_6f6dbab)
}

type DebugDataFinishedMessage struct {
	THeader  RequiredMessageHeader
	NType    DT_INT
	ArParams DT_FIXEDARRAY[*DT_INT]
}

func (t *DebugDataFinishedMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.NType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.ArParams, r, &Options{
		ArrayLength: 2,
		Flags:       1,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+28, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *DebugDataFinishedMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("NType", &t.NType)
	cb.Do("ArParams", &t.ArParams)
}

type ACDTranslateNormalMessage struct {
	THeader                 RequiredMessageHeader
	Ann                     DT_ACD_NETWORK_NAME
	VDest                   DT_OPTIONAL[*DT_VECTOR3D]
	ADesiredYaw             DT_OPTIONAL[*DT_FLOAT]
	BSnapFacing             DT_OPTIONAL[*DT_INT]
	FlMovementSpeed         DT_OPTIONAL[*DT_FLOAT]
	UMoveFlags              DT_OPTIONAL[*DT_UINT]
	SnoPowerAnimKeyOverride DT_OPTIONAL[*DT_SNO]
	SnoPowerPassability     DT_OPTIONAL[*DT_SNO]
	UAckValue               DT_OPTIONAL[*DT_UINT]
	EMoveType               DT_OPTIONAL[*DT_UINT]
}

func (t *ACDTranslateNormalMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Ann, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.VDest, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.ADesiredYaw, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.BSnapFacing, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.FlMovementSpeed, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.UMoveFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.SnoPowerAnimKeyOverride, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.SnoPowerPassability, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.UAckValue, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.EMoveType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+104, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ACDTranslateNormalMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("Ann", &t.Ann)
	cb.Do("VDest", &t.VDest)
	cb.Do("ADesiredYaw", &t.ADesiredYaw)
	cb.Do("BSnapFacing", &t.BSnapFacing)
	cb.Do("FlMovementSpeed", &t.FlMovementSpeed)
	cb.Do("UMoveFlags", &t.UMoveFlags)
	cb.Do("SnoPowerAnimKeyOverride", &t.SnoPowerAnimKeyOverride)
	cb.Do("SnoPowerPassability", &t.SnoPowerPassability)
	cb.Do("UAckValue", &t.UAckValue)
	cb.Do("EMoveType", &t.EMoveType)
}

type GameFlagSubcondition struct {
	// Inherits Subcondition
	// Inherits PolymorphicBase
	DwType  DT_UINT
	BNegate DT_INT
	DwPad   DT_UINT
	SzLabel DT_CHARARRAY
}

func (t *GameFlagSubcondition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BNegate, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SzLabel, r, &Options{
		ArrayLength: 128,
		Flags:       1,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+152, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *GameFlagSubcondition) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("BNegate", &t.BNegate)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("SzLabel", &t.SzLabel)
}

type Influence struct {
	NBoneIndex DT_INT
	FlWeight   DT_FLOAT
}

func (t *Influence) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.NBoneIndex, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.FlWeight, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Influence) Walk(cb WalkCallback) {
	cb.Do("NBoneIndex", &t.NBoneIndex)
	cb.Do("FlWeight", &t.FlWeight)
}

type VertTiledWindowPieces struct {
	// Inherits WindowPiecesBase
	// Inherits PolymorphicBase
	DwType       DT_UINT
	DwPad        DT_UINT
	FlImageScale DT_FLOAT
	NPadding     DT_UINT
	HPieceTop    DT_UINT
	HPieceBottom DT_UINT
	HPieceMiddle DT_UINT
}

func (t *VertTiledWindowPieces) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.FlImageScale, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.NPadding, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.HPieceTop, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.HPieceBottom, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.HPieceMiddle, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+40, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *VertTiledWindowPieces) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("FlImageScale", &t.FlImageScale)
	cb.Do("NPadding", &t.NPadding)
	cb.Do("HPieceTop", &t.HPieceTop)
	cb.Do("HPieceBottom", &t.HPieceBottom)
	cb.Do("HPieceMiddle", &t.HPieceMiddle)
}

type LayerVertexAO struct {
	SnoLayer DT_SNO
	PtChunks DT_VARIABLEARRAY[*LayerInstanceChunk]
}

func (t *LayerVertexAO) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoLayer, r, &Options{
		Flags: 513,
		Group: 24,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.PtChunks, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *LayerVertexAO) Walk(cb WalkCallback) {
	cb.Do("SnoLayer", &t.SnoLayer)
	cb.Do("PtChunks", &t.PtChunks)
}

type ParagonGlyphObtainedMessage struct {
	THeader                 RequiredMessageHeader
	SnoParagonGlyphObtained DT_SNO
}

func (t *ParagonGlyphObtainedMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoParagonGlyphObtained, r, &Options{
		Flags: 1,
		Group: 111,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+20, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ParagonGlyphObtainedMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("SnoParagonGlyphObtained", &t.SnoParagonGlyphObtained)
}

type DemonScrollNodeMessage struct {
	THeader   RequiredMessageHeader
	SnoScroll DT_SNO
	NNodeUID  DT_INT
}

func (t *DemonScrollNodeMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoScroll, r, &Options{
		Flags: 1,
		Group: 95,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.NNodeUID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *DemonScrollNodeMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("SnoScroll", &t.SnoScroll)
	cb.Do("NNodeUID", &t.NNodeUID)
}

type Type_6c318664 struct {
	THeader    RequiredMessageHeader
	ESoundType DT_ENUM
}

func (t *Type_6c318664) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.ESoundType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+20, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_6c318664) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("ESoundType", &t.ESoundType)
}

type PvPResurrectTriggeredBuffCallback struct {
	// Inherits BuffCallbackBase
	// Inherits PolymorphicBase
	DwType                DT_UINT
	DwPad                 DT_UINT
	SnoTriggerEffectGroup DT_SNO
	ArConditions          DT_POLYMORPHIC_VARIABLEARRAY[*DT_INT64]
}

func (t *PvPResurrectTriggeredBuffCallback) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoTriggerEffectGroup, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ArConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PvPResurrectTriggeredBuffCallback) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("SnoTriggerEffectGroup", &t.SnoTriggerEffectGroup)
	cb.Do("ArConditions", &t.ArConditions)
}

type ConditionProperty struct{}

func (t *ConditionProperty) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if _, err := r.Seek(p+1, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ConditionProperty) Walk(cb WalkCallback) {}

type ParagonUnequipSocketMessage struct {
	THeader     RequiredMessageHeader
	DwNodeIndex DT_UINT
}

func (t *ParagonUnequipSocketMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.DwNodeIndex, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+20, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ParagonUnequipSocketMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("DwNodeIndex", &t.DwNodeIndex)
}

type Type_6ce32aa3 struct {
	TItemTier   ItemTier
	Unk_14f575e Type_619110a4
}

func (t *Type_6ce32aa3) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.TItemTier, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.Unk_14f575e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+108, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_6ce32aa3) Walk(cb WalkCallback) {
	cb.Do("TItemTier", &t.TItemTier)
	cb.Do("Unk_14f575e", &t.Unk_14f575e)
}

type MaterialValueSetDefinition struct{}

func (t *MaterialValueSetDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *MaterialValueSetDefinition) Walk(cb WalkCallback) {}

type SkillTreeReward_Table struct {
	// Inherits GameBalanceTable
	// Inherits PolymorphicBase
	DwType   DT_UINT
	DwPad    DT_UINT
	TEntries DT_VARIABLEARRAY[*SkillTreeReward]
}

func (t *SkillTreeReward_Table) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TEntries, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *SkillTreeReward_Table) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("TEntries", &t.TEntries)
}

type WorldRevealedPortalInfo struct {
	WpPosition                    DT_VECTOR3D
	UEntranceGUID                 DT_UINT
	SnoWorld                      DT_SNO
	SnoLevelArea                  DT_SNO
	Unk_38c174                    DT_INT
	SnoPhasingVisibilityCondition DT_SNO
	Unk_e5c224a                   DT_INT
	HMinimapIcon                  DT_UINT
}

func (t *WorldRevealedPortalInfo) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.WpPosition, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.UEntranceGUID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoWorld, r, &Options{
		Flags: 1,
		Group: 48,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.SnoLevelArea, r, &Options{
		Flags: 1,
		Group: 22,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_38c174, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.SnoPhasingVisibilityCondition, r, &Options{
		Flags: 1,
		Group: 51,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.Unk_e5c224a, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.HMinimapIcon, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+40, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *WorldRevealedPortalInfo) Walk(cb WalkCallback) {
	cb.Do("WpPosition", &t.WpPosition)
	cb.Do("UEntranceGUID", &t.UEntranceGUID)
	cb.Do("SnoWorld", &t.SnoWorld)
	cb.Do("SnoLevelArea", &t.SnoLevelArea)
	cb.Do("Unk_38c174", &t.Unk_38c174)
	cb.Do("SnoPhasingVisibilityCondition", &t.SnoPhasingVisibilityCondition)
	cb.Do("Unk_e5c224a", &t.Unk_e5c224a)
	cb.Do("HMinimapIcon", &t.HMinimapIcon)
}

type PlayCutsceneMessage struct {
	THeader RequiredMessageHeader
	NIndex  DT_INT
}

func (t *PlayCutsceneMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.NIndex, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+20, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PlayCutsceneMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("NIndex", &t.NIndex)
}

type Type_6de8333b struct {
	SnoSourceAppearance DT_SNO
	Unk_38cc238         SharedChildFile
	Unk_68e4d62         DT_CHARARRAY
	Unk_9bec2e          SharedChildFile
	Unk_f0e97d8         DT_CHARARRAY
	SnoSourceAnimation  DT_SNO
	Unk_2b8dba4         DT_UINT
}

func (t *Type_6de8333b) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoSourceAppearance, r, &Options{
		Flags: 513,
		Group: 9,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.Unk_38cc238, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+54, &t.Unk_68e4d62, r, &Options{
		ArrayLength: 256,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+310, &t.Unk_9bec2e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+360, &t.Unk_f0e97d8, r, &Options{
		ArrayLength: 256,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+616, &t.SnoSourceAnimation, r, &Options{
		Flags: 513,
		Group: 6,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+620, &t.Unk_2b8dba4, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+624, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_6de8333b) Walk(cb WalkCallback) {
	cb.Do("SnoSourceAppearance", &t.SnoSourceAppearance)
	cb.Do("Unk_38cc238", &t.Unk_38cc238)
	cb.Do("Unk_68e4d62", &t.Unk_68e4d62)
	cb.Do("Unk_9bec2e", &t.Unk_9bec2e)
	cb.Do("Unk_f0e97d8", &t.Unk_f0e97d8)
	cb.Do("SnoSourceAnimation", &t.SnoSourceAnimation)
	cb.Do("Unk_2b8dba4", &t.Unk_2b8dba4)
}

type PowerConditionDamageIsFromPayload struct {
	// Inherits PowerConditionBase
	// Inherits PolymorphicBase
	DwType        DT_UINT
	BInverse      DT_INT
	DwPad         DT_UINT
	SnoPower      DT_SNO
	SzPayloadName DT_UINT
}

func (t *PowerConditionDamageIsFromPayload) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BInverse, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SnoPower, r, &Options{
		Flags: 513,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.SzPayloadName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PowerConditionDamageIsFromPayload) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("BInverse", &t.BInverse)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("SnoPower", &t.SnoPower)
	cb.Do("SzPayloadName", &t.SzPayloadName)
}

type MapPinMessage struct {
	THeader           RequiredMessageHeader
	SnoWorld          DT_SNO
	VecPos            DT_VECTOR3D
	Unk_c819eef       DT_UINT
	SnoDestStringList DT_SNO
}

func (t *MapPinMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoWorld, r, &Options{
		Flags: 1,
		Group: 48,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.VecPos, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.Unk_c819eef, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.SnoDestStringList, r, &Options{
		Flags: 1,
		Group: 42,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+40, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *MapPinMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("SnoWorld", &t.SnoWorld)
	cb.Do("VecPos", &t.VecPos)
	cb.Do("Unk_c819eef", &t.Unk_c819eef)
	cb.Do("SnoDestStringList", &t.SnoDestStringList)
}

type ActorVariantPreloadHelper struct {
	SnoActor        DT_SNO
	EDefaultVariant DT_ENUM
	TVariant        SerialDataInfo
}

func (t *ActorVariantPreloadHelper) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoActor, r, &Options{
		Flags: 1,
		Group: 1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.EDefaultVariant, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.TVariant, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ActorVariantPreloadHelper) Walk(cb WalkCallback) {
	cb.Do("SnoActor", &t.SnoActor)
	cb.Do("EDefaultVariant", &t.EDefaultVariant)
	cb.Do("TVariant", &t.TVariant)
}

type Type_6e7f0459 struct {
	THeader      InterpolationPathHeader
	PtArrayNodes DT_VARIABLEARRAY[*Type_8fccfaf2]
}

func (t *Type_6e7f0459) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.PtArrayNodes, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+56, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_6e7f0459) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("PtArrayNodes", &t.PtArrayNodes)
}

type AttributeSetValueMessage struct {
	THeader RequiredMessageHeader
	Ann     DT_ACD_NETWORK_NAME
	TKeyVal NetAttributeKeyValue
}

func (t *AttributeSetValueMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Ann, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.TKeyVal, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+40, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *AttributeSetValueMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("Ann", &t.Ann)
	cb.Do("TKeyVal", &t.TKeyVal)
}

type Type_6ee9427a struct {
	Unk_334eb2d          DT_INT
	PtMsgTriggeredEvents DT_VARIABLEARRAY[*MsgTriggeredEvent]
}

func (t *Type_6ee9427a) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Unk_334eb2d, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.PtMsgTriggeredEvents, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_6ee9427a) Walk(cb WalkCallback) {
	cb.Do("Unk_334eb2d", &t.Unk_334eb2d)
	cb.Do("PtMsgTriggeredEvents", &t.PtMsgTriggeredEvents)
}

type Type_6f18c43c struct {
	SzBoneName    DT_CHARARRAY
	FlBlendWeight DT_FLOAT
	Unk_3be99f4   DT_INT
}

func (t *Type_6f18c43c) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SzBoneName, r, &Options{
		ArrayLength: 64,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.FlBlendWeight, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.Unk_3be99f4, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+72, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_6f18c43c) Walk(cb WalkCallback) {
	cb.Do("SzBoneName", &t.SzBoneName)
	cb.Do("FlBlendWeight", &t.FlBlendWeight)
	cb.Do("Unk_3be99f4", &t.Unk_3be99f4)
}

type LockingGizmoData struct {
	NGizmoLockItemCountRequiredToOperate   DT_INT
	SnoGizmoLockItemRequiredToOperate      DT_SNO
	FGizmoLockItemConsumedOnOperation      DT_INT
	Unk_496ba25                            DT_INT
	FGizmoLockShowVagueItemRequiredMessage DT_INT
	Unk_dce555f                            DT_INT
	ECurrencyType                          DT_ENUM
	DwCurrencyAmount                       DT_UINT
	Unk_c605c30                            DT_UINT
}

func (t *LockingGizmoData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.NGizmoLockItemCountRequiredToOperate, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.SnoGizmoLockItemRequiredToOperate, r, &Options{
		Flags: 1,
		Group: 73,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.FGizmoLockItemConsumedOnOperation, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.Unk_496ba25, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.FGizmoLockShowVagueItemRequiredMessage, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.Unk_dce555f, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ECurrencyType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.DwCurrencyAmount, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.Unk_c605c30, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+36, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *LockingGizmoData) Walk(cb WalkCallback) {
	cb.Do("NGizmoLockItemCountRequiredToOperate", &t.NGizmoLockItemCountRequiredToOperate)
	cb.Do("SnoGizmoLockItemRequiredToOperate", &t.SnoGizmoLockItemRequiredToOperate)
	cb.Do("FGizmoLockItemConsumedOnOperation", &t.FGizmoLockItemConsumedOnOperation)
	cb.Do("Unk_496ba25", &t.Unk_496ba25)
	cb.Do("FGizmoLockShowVagueItemRequiredMessage", &t.FGizmoLockShowVagueItemRequiredMessage)
	cb.Do("Unk_dce555f", &t.Unk_dce555f)
	cb.Do("ECurrencyType", &t.ECurrencyType)
	cb.Do("DwCurrencyAmount", &t.DwCurrencyAmount)
	cb.Do("Unk_c605c30", &t.Unk_c605c30)
}

type GameTestingCloseCrafter struct {
	THeader RequiredMessageHeader
}

func (t *GameTestingCloseCrafter) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *GameTestingCloseCrafter) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
}

type HitReactionOverride struct {
	// Inherits PowerOverride
	// Inherits PolymorphicBase
	DwType           DT_UINT
	DwPad            DT_UINT
	SnoInputPower    DT_SNO
	SnoOverridePower DT_SNO
}

func (t *HitReactionOverride) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoInputPower, r, &Options{
		Flags: 513,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.SnoOverridePower, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *HitReactionOverride) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("SnoInputPower", &t.SnoInputPower)
	cb.Do("SnoOverridePower", &t.SnoOverridePower)
}

type IconLayout struct {
	SzName      DT_UINT
	Unk_e6f1de0 DT_VARIABLEARRAY[*DT_UINT]
	Unk_9b8c777 DT_CSTRING[*DT_BYTE]
}

func (t *IconLayout) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SzName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.Unk_e6f1de0, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_9b8c777, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+40, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *IconLayout) Walk(cb WalkCallback) {
	cb.Do("SzName", &t.SzName)
	cb.Do("Unk_e6f1de0", &t.Unk_e6f1de0)
	cb.Do("Unk_9b8c777", &t.Unk_9b8c777)
}

type TriggerEventChangePhysicsParameters struct {
	// Inherits TriggerEvent
	// Inherits PolymorphicBase
	DwType          DT_UINT
	DwPad           DT_UINT
	TConditions     TriggerConditions
	FGenerated      DT_INT
	Unk_6cba752     DT_INT
	DwParentActorID DT_UINT
	Unk_668d971     DT_SNO
	FlBlendTime     DT_FLOAT
	DwActorID       DT_UINT
	Unk_279aa5a     DT_INT
}

func (t *TriggerEventChangePhysicsParameters) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.FGenerated, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_6cba752, r, &Options{Flags: 16}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.DwParentActorID, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.Unk_668d971, r, &Options{
		Flags: 1,
		Group: 28,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.FlBlendTime, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.DwActorID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.Unk_279aa5a, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+96, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TriggerEventChangePhysicsParameters) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("TConditions", &t.TConditions)
	cb.Do("FGenerated", &t.FGenerated)
	cb.Do("Unk_6cba752", &t.Unk_6cba752)
	cb.Do("DwParentActorID", &t.DwParentActorID)
	cb.Do("Unk_668d971", &t.Unk_668d971)
	cb.Do("FlBlendTime", &t.FlBlendTime)
	cb.Do("DwActorID", &t.DwActorID)
	cb.Do("Unk_279aa5a", &t.Unk_279aa5a)
}

type ClanBankMoveItemMessage struct {
	THeader     RequiredRequestMessageHeader
	TItemId     Type_f5ac91bb
	Unk_cc95a19 DT_INT
}

func (t *ClanBankMoveItemMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.TItemId, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.Unk_cc95a19, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ClanBankMoveItemMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("TItemId", &t.TItemId)
	cb.Do("Unk_cc95a19", &t.Unk_cc95a19)
}

type PlayerCurrentLevelAreaSubcondition struct {
	// Inherits Subcondition
	// Inherits PolymorphicBase
	DwType       DT_UINT
	BNegate      DT_INT
	DwPad        DT_UINT
	SnoLevelArea DT_SNO
}

func (t *PlayerCurrentLevelAreaSubcondition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BNegate, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SnoLevelArea, r, &Options{
		Flags: 513,
		Group: 22,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PlayerCurrentLevelAreaSubcondition) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("BNegate", &t.BNegate)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("SnoLevelArea", &t.SnoLevelArea)
}

type Type_6ff50068 struct {
	THeader               RequiredCommandFrameMessageHeader
	DwPlayerGameAccountId DT_UINT
	SnoLevelArea          DT_SNO
	Unk_fcdc6f6           DT_ENUM
}

func (t *Type_6ff50068) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPlayerGameAccountId, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SnoLevelArea, r, &Options{
		Flags: 1,
		Group: 22,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.Unk_fcdc6f6, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_6ff50068) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("DwPlayerGameAccountId", &t.DwPlayerGameAccountId)
	cb.Do("SnoLevelArea", &t.SnoLevelArea)
	cb.Do("Unk_fcdc6f6", &t.Unk_fcdc6f6)
}

type TriggerEventTransparency struct {
	// Inherits TriggerEvent
	// Inherits PolymorphicBase
	DwType           DT_UINT
	DwPad            DT_UINT
	TConditions      TriggerConditions
	FGenerated       DT_INT
	Unk_6cba752      DT_INT
	DwParentActorID  DT_UINT
	DwTriggerFlags   DT_UINT
	DwTriggerFlagsEx DT_UINT
	FlAlpha          DT_FLOAT
}

func (t *TriggerEventTransparency) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.FGenerated, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_6cba752, r, &Options{Flags: 16}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.DwParentActorID, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.DwTriggerFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.DwTriggerFlagsEx, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.FlAlpha, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+96, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TriggerEventTransparency) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("TConditions", &t.TConditions)
	cb.Do("FGenerated", &t.FGenerated)
	cb.Do("Unk_6cba752", &t.Unk_6cba752)
	cb.Do("DwParentActorID", &t.DwParentActorID)
	cb.Do("DwTriggerFlags", &t.DwTriggerFlags)
	cb.Do("DwTriggerFlagsEx", &t.DwTriggerFlagsEx)
	cb.Do("FlAlpha", &t.FlAlpha)
}

type TriggerEventObjectLookAt struct {
	// Inherits TriggerEventRangedDuration
	// Inherits TriggerEvent
	// Inherits PolymorphicBase
	DwType           DT_UINT
	TConditions      TriggerConditions
	FGenerated       DT_INT
	Unk_6cba752      DT_INT
	DwParentActorID  DT_UINT
	TDuration        DT_FLOAT
	DwTriggerFlags   DT_UINT
	DwTriggerFlagsEx DT_UINT
	TCleanup         TriggerCleanup
	Unk_49e9257      DT_INT
	Unk_5490979      DT_INT
	DwPad            DT_UINT
	DwObjectID       DT_UINT
	DwTargetID       DT_UINT
}

func (t *TriggerEventObjectLookAt) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.FGenerated, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_6cba752, r, &Options{Flags: 16}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.DwParentActorID, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.TDuration, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.DwTriggerFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.DwTriggerFlagsEx, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.TCleanup, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+116, &t.Unk_49e9257, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.Unk_5490979, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+124, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.DwObjectID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+132, &t.DwTargetID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+136, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TriggerEventObjectLookAt) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("TConditions", &t.TConditions)
	cb.Do("FGenerated", &t.FGenerated)
	cb.Do("Unk_6cba752", &t.Unk_6cba752)
	cb.Do("DwParentActorID", &t.DwParentActorID)
	cb.Do("TDuration", &t.TDuration)
	cb.Do("DwTriggerFlags", &t.DwTriggerFlags)
	cb.Do("DwTriggerFlagsEx", &t.DwTriggerFlagsEx)
	cb.Do("TCleanup", &t.TCleanup)
	cb.Do("Unk_49e9257", &t.Unk_49e9257)
	cb.Do("Unk_5490979", &t.Unk_5490979)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("DwObjectID", &t.DwObjectID)
	cb.Do("DwTargetID", &t.DwTargetID)
}

type CraftingRecipeResultMessage struct {
	THeader   RequiredMessageHeader
	SnoRecipe DT_SNO
	UAmount   DT_INT64
}

func (t *CraftingRecipeResultMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoRecipe, r, &Options{
		Flags: 1,
		Group: 49,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.UAmount, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *CraftingRecipeResultMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("SnoRecipe", &t.SnoRecipe)
	cb.Do("UAmount", &t.UAmount)
}

type ScriptEventParamSecondaryGroup struct {
	// Inherits ScriptEventParamBase
	// Inherits PolymorphicBase
	DwType          DT_UINT
	EParamType      DT_ENUM
	DwPad           DT_UINT
	TSecondaryGroup ActorGroup
}

func (t *ScriptEventParamSecondaryGroup) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.EParamType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.TSecondaryGroup, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+96, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ScriptEventParamSecondaryGroup) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("EParamType", &t.EParamType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("TSecondaryGroup", &t.TSecondaryGroup)
}

type HeroPreset struct {
	// Inherits CharacterPreset
	// Inherits PolymorphicBase
	DwType           DT_UINT
	DwPad            DT_UINT
	SzName           DT_CSTRING[*DT_BYTE]
	SnoWorld         DT_SNO
	NPadding1        DT_INT
	EGender          DT_ENUM
	EClass           DT_ENUM
	SnoFace          DT_SNO
	SnoHairColor     DT_SNO
	SnoHairStyle     DT_SNO
	SnoFacialHair    DT_SNO
	SSkinColor       DT_CSTRING[*DT_BYTE]
	SnoEyeColor      DT_SNO
	SnoMakeup        DT_SNO
	SnoMarkingShape  DT_SNO
	SnoMarkingColor  DT_SNO
	SnoJewelry       DT_SNO
	ArrItems         DT_FIXEDARRAY[*Type_8c33d728]
	ArrWeapons       DT_FIXEDARRAY[*DT_SNO]
	ArrCosmeticItems DT_FIXEDARRAY[*DT_SNO]
	Unk_b1142bf      DT_CSTRING[*DT_BYTE]
	SnoAnimOverride  DT_SNO
}

func (t *HeroPreset) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SzName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.SnoWorld, r, &Options{
		Flags: 513,
		Group: 48,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.NPadding1, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.EGender, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.EClass, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.SnoFace, r, &Options{
		Flags: 513,
		Group: 140,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.SnoHairColor, r, &Options{
		Flags: 513,
		Group: 134,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.SnoHairStyle, r, &Options{
		Flags: 513,
		Group: 138,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+60, &t.SnoFacialHair, r, &Options{
		Flags: 513,
		Group: 139,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.SSkinColor, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.SnoEyeColor, r, &Options{
		Flags: 513,
		Group: 131,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.SnoMakeup, r, &Options{
		Flags: 513,
		Group: 132,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.SnoMarkingShape, r, &Options{
		Flags: 513,
		Group: 115,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.SnoMarkingColor, r, &Options{
		Flags: 513,
		Group: 133,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.SnoJewelry, r, &Options{
		Flags: 513,
		Group: 119,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+100, &t.ArrItems, r, &Options{
		ArrayLength: 5,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+140, &t.ArrWeapons, r, &Options{
		ArrayLength: 7,
		Flags:       513,
		Group:       73,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+168, &t.ArrCosmeticItems, r, &Options{
		ArrayLength: 1,
		Flags:       513,
		Group:       73,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+176, &t.Unk_b1142bf, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+192, &t.SnoAnimOverride, r, &Options{
		Flags: 513,
		Group: 6,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+200, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *HeroPreset) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("SzName", &t.SzName)
	cb.Do("SnoWorld", &t.SnoWorld)
	cb.Do("NPadding1", &t.NPadding1)
	cb.Do("EGender", &t.EGender)
	cb.Do("EClass", &t.EClass)
	cb.Do("SnoFace", &t.SnoFace)
	cb.Do("SnoHairColor", &t.SnoHairColor)
	cb.Do("SnoHairStyle", &t.SnoHairStyle)
	cb.Do("SnoFacialHair", &t.SnoFacialHair)
	cb.Do("SSkinColor", &t.SSkinColor)
	cb.Do("SnoEyeColor", &t.SnoEyeColor)
	cb.Do("SnoMakeup", &t.SnoMakeup)
	cb.Do("SnoMarkingShape", &t.SnoMarkingShape)
	cb.Do("SnoMarkingColor", &t.SnoMarkingColor)
	cb.Do("SnoJewelry", &t.SnoJewelry)
	cb.Do("ArrItems", &t.ArrItems)
	cb.Do("ArrWeapons", &t.ArrWeapons)
	cb.Do("ArrCosmeticItems", &t.ArrCosmeticItems)
	cb.Do("Unk_b1142bf", &t.Unk_b1142bf)
	cb.Do("SnoAnimOverride", &t.SnoAnimOverride)
}

type PrefabDataInfo struct {
	DwMarkerPathID DT_UINT
	TPrefabData    PrefabData
}

func (t *PrefabDataInfo) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.DwMarkerPathID, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.TPrefabData, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+64, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PrefabDataInfo) Walk(cb WalkCallback) {
	cb.Do("DwMarkerPathID", &t.DwMarkerPathID)
	cb.Do("TPrefabData", &t.TPrefabData)
}

type PrefabScopedActorGroupData struct {
	THeader GBIDHeader
}

func (t *PrefabScopedActorGroupData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+260, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PrefabScopedActorGroupData) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
}

type UIAutoScrollingTextStyle struct {
	// Inherits UITextStyle
	// Inherits UIWindowStyle
	// Inherits UIControlStyle
	// Inherits PolymorphicBase
	DwType                    DT_UINT
	DwPad                     DT_UINT
	HParentStyle              UIControlHandle
	Unk_441f783               DT_INT64
	M_eHasModifiedPowerTagMap DT_TAGMAP[*DT_ENUM]
	TConsoleInput             UIControlConsoleInput
	Unk_b4f614c               DT_TAGMAP[*DT_ENUM]
	TFont                     UIControlFont
	Unk_4741819               DT_TAGMAP[*DT_ENUM]
	Unk_a88ab5f               DT_TAGMAP[*DT_ENUM]
}

func (t *UIAutoScrollingTextStyle) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.HParentStyle, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_441f783, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.M_eHasModifiedPowerTagMap, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.TConsoleInput, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.Unk_b4f614c, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.TFont, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.Unk_4741819, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.Unk_a88ab5f, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+128, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *UIAutoScrollingTextStyle) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("HParentStyle", &t.HParentStyle)
	cb.Do("Unk_441f783", &t.Unk_441f783)
	cb.Do("M_eHasModifiedPowerTagMap", &t.M_eHasModifiedPowerTagMap)
	cb.Do("TConsoleInput", &t.TConsoleInput)
	cb.Do("Unk_b4f614c", &t.Unk_b4f614c)
	cb.Do("TFont", &t.TFont)
	cb.Do("Unk_4741819", &t.Unk_4741819)
	cb.Do("Unk_a88ab5f", &t.Unk_a88ab5f)
}

type BarbWeaponExpertiseData struct {
	SnoItemType     DT_SNO
	SnoPassivePower DT_SNO
	GbidRanks       DT_GBID
	ArRankRewards   DT_VARIABLEARRAY[*WeaponExpertiseRankReward]
}

func (t *BarbWeaponExpertiseData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoItemType, r, &Options{
		Flags: 1,
		Group: 98,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.SnoPassivePower, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.GbidRanks, r, &Options{
		Flags: 1,
		Group: 47,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.ArRankRewards, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *BarbWeaponExpertiseData) Walk(cb WalkCallback) {
	cb.Do("SnoItemType", &t.SnoItemType)
	cb.Do("SnoPassivePower", &t.SnoPassivePower)
	cb.Do("GbidRanks", &t.GbidRanks)
	cb.Do("ArRankRewards", &t.ArRankRewards)
}

type PlayerNonAuthoritativePositionMessage struct {
	THeader        RequiredMessageHeader
	WpPos          DT_VECTOR3D
	BMounted       DT_INT
	BMountSummoned DT_INT
}

func (t *PlayerNonAuthoritativePositionMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.WpPos, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.BMounted, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.BMountSummoned, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+36, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PlayerNonAuthoritativePositionMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("WpPos", &t.WpPos)
	cb.Do("BMounted", &t.BMounted)
	cb.Do("BMountSummoned", &t.BMountSummoned)
}

type GeneratorToItemMessage struct {
	THeader         RequiredRequestMessageHeader
	UsItemGenerator DT_CHARARRAY
}

func (t *GeneratorToItemMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.UsItemGenerator, r, &Options{
		ArrayLength: 1024,
		Flags:       1,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+1044, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *GeneratorToItemMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("UsItemGenerator", &t.UsItemGenerator)
}

type Type_7146a43a struct {
	THeader       RequiredMessageHeader
	Unk_601d5c7   DT_FLOAT
	UCommandFrame DT_UINT
}

func (t *Type_7146a43a) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_601d5c7, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.UCommandFrame, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_7146a43a) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("Unk_601d5c7", &t.Unk_601d5c7)
	cb.Do("UCommandFrame", &t.UCommandFrame)
}

type ItemPowerSubcondition struct {
	// Inherits Type_d3c3637f
	// Inherits Subcondition
	// Inherits PolymorphicBase
	DwType        DT_UINT
	BNegate       DT_INT
	EComparisonOp DT_ENUM
	DwPad         DT_UINT
	NIPower       DT_INT
}

func (t *ItemPowerSubcondition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BNegate, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.EComparisonOp, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.NIPower, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+40, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ItemPowerSubcondition) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("BNegate", &t.BNegate)
	cb.Do("EComparisonOp", &t.EComparisonOp)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("NIPower", &t.NIPower)
}

type PersonaSkinColor struct {
	EBase        DT_ENUM
	FlHue        DT_FLOAT
	FlSaturation DT_FLOAT
	FlValue      DT_FLOAT
	FlDarken     DT_FLOAT
	Unk_509016f  DT_RGBACOLOR
	SzLabel      DT_CSTRING[*DT_BYTE]
}

func (t *PersonaSkinColor) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.EBase, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.FlHue, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.FlSaturation, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.FlValue, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.FlDarken, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.Unk_509016f, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SzLabel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+40, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PersonaSkinColor) Walk(cb WalkCallback) {
	cb.Do("EBase", &t.EBase)
	cb.Do("FlHue", &t.FlHue)
	cb.Do("FlSaturation", &t.FlSaturation)
	cb.Do("FlValue", &t.FlValue)
	cb.Do("FlDarken", &t.FlDarken)
	cb.Do("Unk_509016f", &t.Unk_509016f)
	cb.Do("SzLabel", &t.SzLabel)
}

type ActorCollisionData struct {
	TCollisionSettings CollisionSettings
	ECollisionShape    DT_ENUM
	WcylCollision      AxialCylinder
	AabbCollision      AABB
	Unk_3d328de        DT_INT
	Unk_7a83a6d        DT_INT
	Unk_7078ee3        DT_INT
	FlStepUpHeight     DT_FLOAT
	Unk_d094b9a        DT_ENUM
	Unk_c5b3851        DT_FLOAT
	Unk_523b9d9        DT_VARIABLEARRAY[*ActorHitCollisionShape]
	Unk_ce78a30        ActorHitCollisionShape
	Unk_f26505b        ActorHitCollisionShape
	Unk_c627b16        DT_INT
}

func (t *ActorCollisionData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.TCollisionSettings, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.ECollisionShape, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.WcylCollision, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.AabbCollision, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.Unk_3d328de, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_7a83a6d, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.Unk_7078ee3, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.FlStepUpHeight, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.Unk_d094b9a, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.Unk_c5b3851, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.Unk_523b9d9, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.Unk_ce78a30, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+148, &t.Unk_f26505b, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+184, &t.Unk_c627b16, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+192, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ActorCollisionData) Walk(cb WalkCallback) {
	cb.Do("TCollisionSettings", &t.TCollisionSettings)
	cb.Do("ECollisionShape", &t.ECollisionShape)
	cb.Do("WcylCollision", &t.WcylCollision)
	cb.Do("AabbCollision", &t.AabbCollision)
	cb.Do("Unk_3d328de", &t.Unk_3d328de)
	cb.Do("Unk_7a83a6d", &t.Unk_7a83a6d)
	cb.Do("Unk_7078ee3", &t.Unk_7078ee3)
	cb.Do("FlStepUpHeight", &t.FlStepUpHeight)
	cb.Do("Unk_d094b9a", &t.Unk_d094b9a)
	cb.Do("Unk_c5b3851", &t.Unk_c5b3851)
	cb.Do("Unk_523b9d9", &t.Unk_523b9d9)
	cb.Do("Unk_ce78a30", &t.Unk_ce78a30)
	cb.Do("Unk_f26505b", &t.Unk_f26505b)
	cb.Do("Unk_c627b16", &t.Unk_c627b16)
}

type Type_71d9d83e struct {
	FlStarsDensity    DT_FLOAT
	FlStarsDistance   DT_FLOAT
	FlStarsScale      DT_FLOAT
	Unk_9f7f279       DT_FLOAT
	FlStarsBrightness DT_FLOAT
	FlStarsColor      DT_RGBACOLOR
}

func (t *Type_71d9d83e) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.FlStarsDensity, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.FlStarsDistance, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.FlStarsScale, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.Unk_9f7f279, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.FlStarsBrightness, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.FlStarsColor, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_71d9d83e) Walk(cb WalkCallback) {
	cb.Do("FlStarsDensity", &t.FlStarsDensity)
	cb.Do("FlStarsDistance", &t.FlStarsDistance)
	cb.Do("FlStarsScale", &t.FlStarsScale)
	cb.Do("Unk_9f7f279", &t.Unk_9f7f279)
	cb.Do("FlStarsBrightness", &t.FlStarsBrightness)
	cb.Do("FlStarsColor", &t.FlStarsColor)
}

type Type_72081710 struct {
	Unk_9807ffc DT_FLOAT
	Unk_e3bcdd9 DT_FLOAT
	Unk_959fcde DT_FLOAT
	Unk_8ea8e1a DT_FLOAT
	Unk_129b8df DT_FLOAT
	Unk_38138dc DT_FLOAT
	Unk_d04ea13 DT_FLOAT
	Unk_15de174 DT_FLOAT
	Unk_6192f51 DT_FLOAT
	Unk_d00a056 DT_FLOAT
	Unk_2ed848a DT_FLOAT
	Unk_f597cdf DT_FLOAT
	Unk_db72561 DT_FLOAT
	Unk_8f70873 DT_FLOAT
	Unk_754b0f5 DT_FLOAT
	Unk_4ce8a9b DT_FLOAT
	Unk_cbaf386 DT_FLOAT
	Unk_e7daef4 DT_FLOAT
	Unk_497f7bf DT_FLOAT
	Unk_d19c35c DT_FLOAT
	Unk_5456aec DT_FLOAT
	Unk_b918f5a DT_FLOAT
	Unk_57d4c7e DT_FLOAT
	Unk_8a373c0 DT_FLOAT
	Unk_a1812c5 DT_FLOAT
	Unk_7124f86 DT_FLOAT
	Unk_2e0c8f7 DT_FLOAT
	Unk_7d8fd49 DT_FLOAT
	Unk_8a6d88  DT_FLOAT
	Unk_aeea64d DT_FLOAT
	Unk_b918f5b DT_FLOAT
	Unk_57d4c7f DT_FLOAT
	Unk_2e0c8f8 DT_FLOAT
	Unk_7d8fd4a DT_FLOAT
	Unk_8a6d89  DT_FLOAT
	Unk_aeea64e DT_FLOAT
	Unk_a09e1ed DT_FLOAT
	Unk_d28a307 DT_FLOAT
	Unk_cc5d963 DT_FLOAT
	Unk_131818d DT_FLOAT
	Unk_2352a09 DT_FLOAT
	Unk_a09e1ee DT_FLOAT
	Unk_d28a308 DT_FLOAT
	Unk_cc5d964 DT_FLOAT
	Unk_131818e DT_FLOAT
	Unk_2352a0a DT_FLOAT
	Unk_8522f61 DT_FLOAT
	Unk_1bb10d9 DT_FLOAT
	Unk_426ab57 DT_FLOAT
	FlPad0      DT_FLOAT
	FlPad1      DT_FLOAT
	FlPad2      DT_FLOAT
}

func (t *Type_72081710) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Unk_9807ffc, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.Unk_e3bcdd9, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.Unk_959fcde, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.Unk_8ea8e1a, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_129b8df, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.Unk_38138dc, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_d04ea13, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.Unk_15de174, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.Unk_6192f51, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.Unk_d00a056, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.Unk_2ed848a, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.Unk_f597cdf, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.Unk_db72561, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.Unk_8f70873, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.Unk_754b0f5, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+60, &t.Unk_4ce8a9b, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.Unk_cbaf386, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.Unk_e7daef4, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_497f7bf, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.Unk_d19c35c, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.Unk_5456aec, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.Unk_b918f5a, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.Unk_57d4c7e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.Unk_8a373c0, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.Unk_a1812c5, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+100, &t.Unk_7124f86, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+104, &t.Unk_2e0c8f7, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+108, &t.Unk_7d8fd49, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.Unk_8a6d88, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+116, &t.Unk_aeea64d, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.Unk_b918f5b, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+124, &t.Unk_57d4c7f, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.Unk_2e0c8f8, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+132, &t.Unk_7d8fd4a, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+136, &t.Unk_8a6d89, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+140, &t.Unk_aeea64e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+144, &t.Unk_a09e1ed, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+148, &t.Unk_d28a307, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+152, &t.Unk_cc5d963, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+156, &t.Unk_131818d, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+160, &t.Unk_2352a09, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+164, &t.Unk_a09e1ee, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+168, &t.Unk_d28a308, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+172, &t.Unk_cc5d964, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+176, &t.Unk_131818e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+180, &t.Unk_2352a0a, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+184, &t.Unk_8522f61, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+188, &t.Unk_1bb10d9, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+192, &t.Unk_426ab57, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+196, &t.FlPad0, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+200, &t.FlPad1, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+204, &t.FlPad2, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+208, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_72081710) Walk(cb WalkCallback) {
	cb.Do("Unk_9807ffc", &t.Unk_9807ffc)
	cb.Do("Unk_e3bcdd9", &t.Unk_e3bcdd9)
	cb.Do("Unk_959fcde", &t.Unk_959fcde)
	cb.Do("Unk_8ea8e1a", &t.Unk_8ea8e1a)
	cb.Do("Unk_129b8df", &t.Unk_129b8df)
	cb.Do("Unk_38138dc", &t.Unk_38138dc)
	cb.Do("Unk_d04ea13", &t.Unk_d04ea13)
	cb.Do("Unk_15de174", &t.Unk_15de174)
	cb.Do("Unk_6192f51", &t.Unk_6192f51)
	cb.Do("Unk_d00a056", &t.Unk_d00a056)
	cb.Do("Unk_2ed848a", &t.Unk_2ed848a)
	cb.Do("Unk_f597cdf", &t.Unk_f597cdf)
	cb.Do("Unk_db72561", &t.Unk_db72561)
	cb.Do("Unk_8f70873", &t.Unk_8f70873)
	cb.Do("Unk_754b0f5", &t.Unk_754b0f5)
	cb.Do("Unk_4ce8a9b", &t.Unk_4ce8a9b)
	cb.Do("Unk_cbaf386", &t.Unk_cbaf386)
	cb.Do("Unk_e7daef4", &t.Unk_e7daef4)
	cb.Do("Unk_497f7bf", &t.Unk_497f7bf)
	cb.Do("Unk_d19c35c", &t.Unk_d19c35c)
	cb.Do("Unk_5456aec", &t.Unk_5456aec)
	cb.Do("Unk_b918f5a", &t.Unk_b918f5a)
	cb.Do("Unk_57d4c7e", &t.Unk_57d4c7e)
	cb.Do("Unk_8a373c0", &t.Unk_8a373c0)
	cb.Do("Unk_a1812c5", &t.Unk_a1812c5)
	cb.Do("Unk_7124f86", &t.Unk_7124f86)
	cb.Do("Unk_2e0c8f7", &t.Unk_2e0c8f7)
	cb.Do("Unk_7d8fd49", &t.Unk_7d8fd49)
	cb.Do("Unk_8a6d88", &t.Unk_8a6d88)
	cb.Do("Unk_aeea64d", &t.Unk_aeea64d)
	cb.Do("Unk_b918f5b", &t.Unk_b918f5b)
	cb.Do("Unk_57d4c7f", &t.Unk_57d4c7f)
	cb.Do("Unk_2e0c8f8", &t.Unk_2e0c8f8)
	cb.Do("Unk_7d8fd4a", &t.Unk_7d8fd4a)
	cb.Do("Unk_8a6d89", &t.Unk_8a6d89)
	cb.Do("Unk_aeea64e", &t.Unk_aeea64e)
	cb.Do("Unk_a09e1ed", &t.Unk_a09e1ed)
	cb.Do("Unk_d28a307", &t.Unk_d28a307)
	cb.Do("Unk_cc5d963", &t.Unk_cc5d963)
	cb.Do("Unk_131818d", &t.Unk_131818d)
	cb.Do("Unk_2352a09", &t.Unk_2352a09)
	cb.Do("Unk_a09e1ee", &t.Unk_a09e1ee)
	cb.Do("Unk_d28a308", &t.Unk_d28a308)
	cb.Do("Unk_cc5d964", &t.Unk_cc5d964)
	cb.Do("Unk_131818e", &t.Unk_131818e)
	cb.Do("Unk_2352a0a", &t.Unk_2352a0a)
	cb.Do("Unk_8522f61", &t.Unk_8522f61)
	cb.Do("Unk_1bb10d9", &t.Unk_1bb10d9)
	cb.Do("Unk_426ab57", &t.Unk_426ab57)
	cb.Do("FlPad0", &t.FlPad0)
	cb.Do("FlPad1", &t.FlPad1)
	cb.Do("FlPad2", &t.FlPad2)
}

type AssignClassPassiveSkillSlotMessage struct {
	THeader               RequiredMessageHeader
	SnoPower              DT_SNO
	NSlot                 DT_INT
	DwPlayerGameAccountId DT_UINT
}

func (t *AssignClassPassiveSkillSlotMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoPower, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.NSlot, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.DwPlayerGameAccountId, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+28, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *AssignClassPassiveSkillSlotMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("SnoPower", &t.SnoPower)
	cb.Do("NSlot", &t.NSlot)
	cb.Do("DwPlayerGameAccountId", &t.DwPlayerGameAccountId)
}

type MediumBiomeObject struct {
	// Inherits BiomeObject
	// Inherits BiomeItem
	// Inherits PolymorphicBase
	DwType                 DT_UINT
	FlRadius               DT_FLOAT
	Unk_2fd1cdb            DT_FLOAT
	TAllowedScaleRange     DT_RANGE[*DT_FLOAT]
	Unk_87acb69            DT_RANGE[*DT_FLOAT]
	Unk_87acb6a            DT_RANGE[*DT_FLOAT]
	Unk_87acb6b            DT_RANGE[*DT_FLOAT]
	Unk_9854b6a            DT_RANGE[*DT_FLOAT]
	FlChance               DT_FLOAT
	DwFlags                DT_UINT
	Unk_2a8c4b6            DT_FLOAT
	AAzimuthAngle          DT_FLOAT
	AAltitudeAngle         DT_FLOAT
	Unk_6ead041            DT_RANGE[*DT_FLOAT]
	TParametricSettings    ParametricSettings
	ArProximityAdjustments DT_VARIABLEARRAY[*ProximityAdjustment]
	SnonameObject          DT_SNO_NAME
	Unk_d094b9a            DT_ENUM
	QInitialOrientation    bcQuat
	SzLookName             DT_UINT
	DwShaderMapOverride    DT_UINT
	DwPad                  DT_UINT
}

func (t *MediumBiomeObject) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.FlRadius, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.Unk_2fd1cdb, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.TAllowedScaleRange, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.Unk_87acb69, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.Unk_87acb6a, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.Unk_87acb6b, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.Unk_9854b6a, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.FlChance, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.DwFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_2a8c4b6, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.AAzimuthAngle, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.AAltitudeAngle, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.Unk_6ead041, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.TParametricSettings, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+224, &t.ArProximityAdjustments, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+240, &t.SnonameObject, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+248, &t.Unk_d094b9a, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+252, &t.QInitialOrientation, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+268, &t.SzLookName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+272, &t.DwShaderMapOverride, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+276, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+280, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *MediumBiomeObject) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("FlRadius", &t.FlRadius)
	cb.Do("Unk_2fd1cdb", &t.Unk_2fd1cdb)
	cb.Do("TAllowedScaleRange", &t.TAllowedScaleRange)
	cb.Do("Unk_87acb69", &t.Unk_87acb69)
	cb.Do("Unk_87acb6a", &t.Unk_87acb6a)
	cb.Do("Unk_87acb6b", &t.Unk_87acb6b)
	cb.Do("Unk_9854b6a", &t.Unk_9854b6a)
	cb.Do("FlChance", &t.FlChance)
	cb.Do("DwFlags", &t.DwFlags)
	cb.Do("Unk_2a8c4b6", &t.Unk_2a8c4b6)
	cb.Do("AAzimuthAngle", &t.AAzimuthAngle)
	cb.Do("AAltitudeAngle", &t.AAltitudeAngle)
	cb.Do("Unk_6ead041", &t.Unk_6ead041)
	cb.Do("TParametricSettings", &t.TParametricSettings)
	cb.Do("ArProximityAdjustments", &t.ArProximityAdjustments)
	cb.Do("SnonameObject", &t.SnonameObject)
	cb.Do("Unk_d094b9a", &t.Unk_d094b9a)
	cb.Do("QInitialOrientation", &t.QInitialOrientation)
	cb.Do("SzLookName", &t.SzLookName)
	cb.Do("DwShaderMapOverride", &t.DwShaderMapOverride)
	cb.Do("DwPad", &t.DwPad)
}

type NightmareDungeonGlobalSpawn struct {
	GbidSpawnLocTypes     DT_VARIABLEARRAY[*DT_GBID]
	TSpawnPopulationGroup PopGroupHandle
	TSpawnCountRange      DT_RANGE[*DT_INT]
	FlSpawnCountPercent   DT_FLOAT
	FlNoSpawnChance       DT_FLOAT
}

func (t *NightmareDungeonGlobalSpawn) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.GbidSpawnLocTypes, r, &Options{
		Flags: 1,
		Group: 20,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TSpawnPopulationGroup, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.TSpawnCountRange, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.FlSpawnCountPercent, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.FlNoSpawnChance, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *NightmareDungeonGlobalSpawn) Walk(cb WalkCallback) {
	cb.Do("GbidSpawnLocTypes", &t.GbidSpawnLocTypes)
	cb.Do("TSpawnPopulationGroup", &t.TSpawnPopulationGroup)
	cb.Do("TSpawnCountRange", &t.TSpawnCountRange)
	cb.Do("FlSpawnCountPercent", &t.FlSpawnCountPercent)
	cb.Do("FlNoSpawnChance", &t.FlNoSpawnChance)
}

type LooteeLevelRangeSubcondition struct {
	// Inherits Subcondition
	// Inherits PolymorphicBase
	DwType    DT_UINT
	BNegate   DT_INT
	DwPad     DT_UINT
	NMinLevel DT_INT
	NMaxLevel DT_INT
}

func (t *LooteeLevelRangeSubcondition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BNegate, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.NMinLevel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.NMaxLevel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *LooteeLevelRangeSubcondition) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("BNegate", &t.BNegate)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("NMinLevel", &t.NMinLevel)
	cb.Do("NMaxLevel", &t.NMaxLevel)
}

type TriggerEventMsg struct {
	// Inherits TriggerEvent
	// Inherits PolymorphicBase
	DwType          DT_UINT
	DwPad           DT_UINT
	TConditions     TriggerConditions
	FGenerated      DT_INT
	Unk_6cba752     DT_INT
	DwParentActorID DT_UINT
	EMsgPassMethod  DT_ENUM
	DwMsgKey        DT_ENUM
}

func (t *TriggerEventMsg) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.FGenerated, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_6cba752, r, &Options{Flags: 16}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.DwParentActorID, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.EMsgPassMethod, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.DwMsgKey, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+88, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TriggerEventMsg) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("TConditions", &t.TConditions)
	cb.Do("FGenerated", &t.FGenerated)
	cb.Do("Unk_6cba752", &t.Unk_6cba752)
	cb.Do("DwParentActorID", &t.DwParentActorID)
	cb.Do("EMsgPassMethod", &t.EMsgPassMethod)
	cb.Do("DwMsgKey", &t.DwMsgKey)
}

type StencilParams struct {
	FStencilBufferEnable    DT_INT
	DwStencilBufferRefValue DT_UINT
	Unk_125c5d5             DT_UINT
	Unk_a6ffe64             DT_UINT
	Unk_ab3262d             DT_ENUM
	Unk_35ab896             DT_ENUM
	Unk_3553b7b             DT_ENUM
	Unk_f57a4b5             DT_ENUM
	Unk_d5bbf15             DT_ENUM
	Unk_4c8527e             DT_ENUM
	Unk_4c2d563             DT_ENUM
	Unk_e787b9d             DT_ENUM
}

func (t *StencilParams) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.FStencilBufferEnable, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.DwStencilBufferRefValue, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.Unk_125c5d5, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.Unk_a6ffe64, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_ab3262d, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.Unk_35ab896, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_3553b7b, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.Unk_f57a4b5, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.Unk_d5bbf15, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.Unk_4c8527e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.Unk_4c2d563, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.Unk_e787b9d, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *StencilParams) Walk(cb WalkCallback) {
	cb.Do("FStencilBufferEnable", &t.FStencilBufferEnable)
	cb.Do("DwStencilBufferRefValue", &t.DwStencilBufferRefValue)
	cb.Do("Unk_125c5d5", &t.Unk_125c5d5)
	cb.Do("Unk_a6ffe64", &t.Unk_a6ffe64)
	cb.Do("Unk_ab3262d", &t.Unk_ab3262d)
	cb.Do("Unk_35ab896", &t.Unk_35ab896)
	cb.Do("Unk_3553b7b", &t.Unk_3553b7b)
	cb.Do("Unk_f57a4b5", &t.Unk_f57a4b5)
	cb.Do("Unk_d5bbf15", &t.Unk_d5bbf15)
	cb.Do("Unk_4c8527e", &t.Unk_4c8527e)
	cb.Do("Unk_4c2d563", &t.Unk_4c2d563)
	cb.Do("Unk_e787b9d", &t.Unk_e787b9d)
}

type RequiredRequestMessageHeader struct {
	THeader RequiredMessageHeader
	UToken  DT_UINT
}

func (t *RequiredRequestMessageHeader) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.UToken, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+20, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *RequiredRequestMessageHeader) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("UToken", &t.UToken)
}

type GlobalMarkerActorPortalData struct {
	// Inherits GlobalMarkerActorData
	// Inherits PolymorphicBase
	DwType                        DT_UINT
	DwPad                         DT_UINT
	EWorldToChoose                DT_ENUM
	SnoSpecifiedWorld             DT_SNO
	DwEntranceNameToFind          DT_STARTLOC_NAME
	DwPortalType                  DT_UINT
	SnoPortalDestSubzone          DT_SNO
	EPortalDestSubzoneType        DT_ENUM
	DwPortalDestSubzoneFlags      DT_UINT
	DwWorldAppearanceFlags        DT_UINT
	EDungeonFlavorType            DT_ENUM
	SnoPortalDestLevelArea        DT_SNO
	SnoPhasingVisibilityCondition DT_SNO
	SnoGizmoCondition             DT_SNO
	Unk_8acbebf                   DT_SNO
	Unk_8755612                   DT_SNO
	Unk_4908570                   DT_SNO
	Unk_9799a99                   DT_INT
}

func (t *GlobalMarkerActorPortalData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.EWorldToChoose, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.SnoSpecifiedWorld, r, &Options{
		Flags: 513,
		Group: 48,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.DwEntranceNameToFind, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.DwPortalType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.SnoPortalDestSubzone, r, &Options{
		Flags: 513,
		Group: 80,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.EPortalDestSubzoneType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.DwPortalDestSubzoneFlags, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.DwWorldAppearanceFlags, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.EDungeonFlavorType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.SnoPortalDestLevelArea, r, &Options{
		Flags: 513,
		Group: 22,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.SnoPhasingVisibilityCondition, r, &Options{
		Flags: 513,
		Group: 51,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+60, &t.SnoGizmoCondition, r, &Options{
		Flags: 513,
		Group: 51,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.Unk_8acbebf, r, &Options{
		Flags: 513,
		Group: 31,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.Unk_8755612, r, &Options{
		Flags: 513,
		Group: 73,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_4908570, r, &Options{
		Flags: 513,
		Group: 126,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.Unk_9799a99, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+80, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *GlobalMarkerActorPortalData) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("EWorldToChoose", &t.EWorldToChoose)
	cb.Do("SnoSpecifiedWorld", &t.SnoSpecifiedWorld)
	cb.Do("DwEntranceNameToFind", &t.DwEntranceNameToFind)
	cb.Do("DwPortalType", &t.DwPortalType)
	cb.Do("SnoPortalDestSubzone", &t.SnoPortalDestSubzone)
	cb.Do("EPortalDestSubzoneType", &t.EPortalDestSubzoneType)
	cb.Do("DwPortalDestSubzoneFlags", &t.DwPortalDestSubzoneFlags)
	cb.Do("DwWorldAppearanceFlags", &t.DwWorldAppearanceFlags)
	cb.Do("EDungeonFlavorType", &t.EDungeonFlavorType)
	cb.Do("SnoPortalDestLevelArea", &t.SnoPortalDestLevelArea)
	cb.Do("SnoPhasingVisibilityCondition", &t.SnoPhasingVisibilityCondition)
	cb.Do("SnoGizmoCondition", &t.SnoGizmoCondition)
	cb.Do("Unk_8acbebf", &t.Unk_8acbebf)
	cb.Do("Unk_8755612", &t.Unk_8755612)
	cb.Do("Unk_4908570", &t.Unk_4908570)
	cb.Do("Unk_9799a99", &t.Unk_9799a99)
}

type ChangeAppearanceMessage struct {
	THeader         RequiredMessageHeader
	SnoMarkingShape DT_SNO
	SnoMarkingColor DT_SNO
	SnoJewelry      DT_SNO
	SnoMakeup       DT_SNO
}

func (t *ChangeAppearanceMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoMarkingShape, r, &Options{
		Flags: 1,
		Group: 115,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.SnoMarkingColor, r, &Options{
		Flags: 1,
		Group: 133,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SnoJewelry, r, &Options{
		Flags: 1,
		Group: 119,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.SnoMakeup, r, &Options{
		Flags: 1,
		Group: 132,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ChangeAppearanceMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("SnoMarkingShape", &t.SnoMarkingShape)
	cb.Do("SnoMarkingColor", &t.SnoMarkingColor)
	cb.Do("SnoJewelry", &t.SnoJewelry)
	cb.Do("SnoMakeup", &t.SnoMakeup)
}

type Type_72ffea44 struct {
	SnoActor       DT_SNO
	PRareNameGBIDs DT_FIXEDARRAY[*DT_GBID]
	ERarity        DT_ENUM
	BUseAltName    DT_INT
}

func (t *Type_72ffea44) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoActor, r, &Options{
		Flags: 1,
		Group: 1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.PRareNameGBIDs, r, &Options{
		ArrayLength: 2,
		Flags:       1,
		Group:       7,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.ERarity, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BUseAltName, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+20, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_72ffea44) Walk(cb WalkCallback) {
	cb.Do("SnoActor", &t.SnoActor)
	cb.Do("PRareNameGBIDs", &t.PRareNameGBIDs)
	cb.Do("ERarity", &t.ERarity)
	cb.Do("BUseAltName", &t.BUseAltName)
}

type GameTestingStatusTextMessage struct {
	THeader RequiredMessageHeader
	SzText  DT_CHARARRAY
}

func (t *GameTestingStatusTextMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SzText, r, &Options{
		ArrayLength: 256,
		Flags:       1,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+272, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *GameTestingStatusTextMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("SzText", &t.SzText)
}

type MarkerDestroyableObjectGizmoData struct {
	Unk_54513b8 DT_INT
}

func (t *MarkerDestroyableObjectGizmoData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Unk_54513b8, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+4, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *MarkerDestroyableObjectGizmoData) Walk(cb WalkCallback) {
	cb.Do("Unk_54513b8", &t.Unk_54513b8)
}

type ForcedPrefetchData struct {
	VTargetPosition   DT_VECTOR3D
	FPrefetchRadius   DT_FLOAT
	ArPrefetchEntries DT_VARIABLEARRAY[*ForcedPrefetchEntry]
}

func (t *ForcedPrefetchData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.VTargetPosition, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.FPrefetchRadius, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.ArPrefetchEntries, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ForcedPrefetchData) Walk(cb WalkCallback) {
	cb.Do("VTargetPosition", &t.VTargetPosition)
	cb.Do("FPrefetchRadius", &t.FPrefetchRadius)
	cb.Do("ArPrefetchEntries", &t.ArPrefetchEntries)
}

type OnInitializeDamageBuffCallback struct {
	// Inherits ProcChanceBuffCallbackBase
	// Inherits BuffCallbackBase
	// Inherits PolymorphicBase
	DwType                DT_UINT
	DwPad                 DT_UINT
	SnoTriggerEffectGroup DT_SNO
	ArConditions          DT_POLYMORPHIC_VARIABLEARRAY[*DT_INT64]
	BAlwaysProcs          DT_INT
	DwPadding             DT_UINT
	TProcChance           DT_STRING_FORMULA
}

func (t *OnInitializeDamageBuffCallback) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoTriggerEffectGroup, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ArConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.BAlwaysProcs, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.DwPadding, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.TProcChance, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+88, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *OnInitializeDamageBuffCallback) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("SnoTriggerEffectGroup", &t.SnoTriggerEffectGroup)
	cb.Do("ArConditions", &t.ArConditions)
	cb.Do("BAlwaysProcs", &t.BAlwaysProcs)
	cb.Do("DwPadding", &t.DwPadding)
	cb.Do("TProcChance", &t.TProcChance)
}

type VoteKickMessage struct {
	THeader     RequiredMessageHeader
	Unk_390da21 DT_UINT
	Unk_1d54bcc DT_UINT
	UsMessage   DT_CHARARRAY
}

func (t *VoteKickMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_390da21, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.Unk_1d54bcc, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.UsMessage, r, &Options{
		ArrayLength: 1024,
		Flags:       1,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+1048, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *VoteKickMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("Unk_390da21", &t.Unk_390da21)
	cb.Do("Unk_1d54bcc", &t.Unk_1d54bcc)
	cb.Do("UsMessage", &t.UsMessage)
}

type Type_737898bc struct {
	// Inherits BuffCallbackBase
	// Inherits PolymorphicBase
	DwType                DT_UINT
	DwPad                 DT_UINT
	SnoTriggerEffectGroup DT_SNO
	ArConditions          DT_POLYMORPHIC_VARIABLEARRAY[*DT_INT64]
}

func (t *Type_737898bc) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoTriggerEffectGroup, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ArConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_737898bc) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("SnoTriggerEffectGroup", &t.SnoTriggerEffectGroup)
	cb.Do("ArConditions", &t.ArConditions)
}

type SkillTreeNodeEntry struct {
	DwNodeId DT_UINT
	DwRank   DT_UINT
}

func (t *SkillTreeNodeEntry) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.DwNodeId, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.DwRank, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *SkillTreeNodeEntry) Walk(cb WalkCallback) {
	cb.Do("DwNodeId", &t.DwNodeId)
	cb.Do("DwRank", &t.DwRank)
}

type ChangedHeroIdMessage struct {
	THeader     RequiredMessageHeader
	Unk_13bbc12 DT_CHARARRAY
}

func (t *ChangedHeroIdMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_13bbc12, r, &Options{
		ArrayLength: 37,
		Flags:       1,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+56, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ChangedHeroIdMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("Unk_13bbc12", &t.Unk_13bbc12)
}

type PowerConditionHasActorTarget struct {
	// Inherits PowerConditionBase
	// Inherits PolymorphicBase
	DwType   DT_UINT
	BInverse DT_INT
	DwPad    DT_UINT
}

func (t *PowerConditionHasActorTarget) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BInverse, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PowerConditionHasActorTarget) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("BInverse", &t.BInverse)
	cb.Do("DwPad", &t.DwPad)
}

type LogicSubcondition struct {
	// Inherits Subcondition
	// Inherits PolymorphicBase
	DwType       DT_UINT
	BNegate      DT_INT
	DwPad        DT_UINT
	ArConditions DT_POLYMORPHIC_VARIABLEARRAY[*DT_INT64]
}

func (t *LogicSubcondition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BNegate, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ArConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *LogicSubcondition) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("BNegate", &t.BNegate)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("ArConditions", &t.ArConditions)
}

type UIConsoleEditStyle struct {
	// Inherits UIEditStyle
	// Inherits UITextStyle
	// Inherits UIWindowStyle
	// Inherits UIControlStyle
	// Inherits PolymorphicBase
	DwType                    DT_UINT
	DwPad                     DT_UINT
	HParentStyle              UIControlHandle
	Unk_441f783               DT_INT64
	M_eHasModifiedPowerTagMap DT_TAGMAP[*DT_ENUM]
	TConsoleInput             UIControlConsoleInput
	Unk_b4f614c               DT_TAGMAP[*DT_ENUM]
	TFont                     UIControlFont
	Unk_4741819               DT_TAGMAP[*DT_ENUM]
	Unk_172e19a               DT_TAGMAP[*DT_ENUM]
}

func (t *UIConsoleEditStyle) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.HParentStyle, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_441f783, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.M_eHasModifiedPowerTagMap, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.TConsoleInput, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.Unk_b4f614c, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.TFont, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.Unk_4741819, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.Unk_172e19a, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+128, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *UIConsoleEditStyle) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("HParentStyle", &t.HParentStyle)
	cb.Do("Unk_441f783", &t.Unk_441f783)
	cb.Do("M_eHasModifiedPowerTagMap", &t.M_eHasModifiedPowerTagMap)
	cb.Do("TConsoleInput", &t.TConsoleInput)
	cb.Do("Unk_b4f614c", &t.Unk_b4f614c)
	cb.Do("TFont", &t.TFont)
	cb.Do("Unk_4741819", &t.Unk_4741819)
	cb.Do("Unk_172e19a", &t.Unk_172e19a)
}

type DRLGPortalInfo struct {
	EResolveMethod       DT_ENUM
	SnoSpecifiedWorld    DT_SNO
	DwEntranceNameToFind DT_STARTLOC_NAME
	SnoDestLevelArea     DT_SNO
}

func (t *DRLGPortalInfo) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.EResolveMethod, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.SnoSpecifiedWorld, r, &Options{
		Flags: 513,
		Group: 48,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwEntranceNameToFind, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.SnoDestLevelArea, r, &Options{
		Flags: 513,
		Group: 22,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *DRLGPortalInfo) Walk(cb WalkCallback) {
	cb.Do("EResolveMethod", &t.EResolveMethod)
	cb.Do("SnoSpecifiedWorld", &t.SnoSpecifiedWorld)
	cb.Do("DwEntranceNameToFind", &t.DwEntranceNameToFind)
	cb.Do("SnoDestLevelArea", &t.SnoDestLevelArea)
}

type JoinExistingGamePlayer struct {
	UGameAccountId DT_UINT
	UAuthToken     DT_INT64
	Unk_2f5806b    DT_INT
	TSessionKey    DT_FIXEDARRAY[*DT_BYTE]
}

func (t *JoinExistingGamePlayer) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.UGameAccountId, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.UAuthToken, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_2f5806b, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.TSessionKey, r, &Options{
		ArrayLength: 128,
		Flags:       8,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+152, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *JoinExistingGamePlayer) Walk(cb WalkCallback) {
	cb.Do("UGameAccountId", &t.UGameAccountId)
	cb.Do("UAuthToken", &t.UAuthToken)
	cb.Do("Unk_2f5806b", &t.Unk_2f5806b)
	cb.Do("TSessionKey", &t.TSessionKey)
}

type BoostCheatEntry struct {
	SzCheatString DT_CSTRING[*DT_BYTE]
}

func (t *BoostCheatEntry) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SzCheatString, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *BoostCheatEntry) Walk(cb WalkCallback) {
	cb.Do("SzCheatString", &t.SzCheatString)
}

type NpcLookTagEntry_Table struct {
	// Inherits GameBalanceTable
	// Inherits PolymorphicBase
	DwType   DT_UINT
	DwPad    DT_UINT
	TEntries DT_VARIABLEARRAY[*NpcLookTagEntry]
}

func (t *NpcLookTagEntry_Table) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TEntries, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *NpcLookTagEntry_Table) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("TEntries", &t.TEntries)
}

type CameraModeSetMessage struct {
	THeader    RequiredMessageHeader
	FAVMode    DT_INT
	TTransform PRTransform
}

func (t *CameraModeSetMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.FAVMode, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.TTransform, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *CameraModeSetMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("FAVMode", &t.FAVMode)
	cb.Do("TTransform", &t.TTransform)
}

type ExperienceLevelAlt struct {
	NDeltaXP DT_INT64
}

func (t *ExperienceLevelAlt) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.NDeltaXP, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ExperienceLevelAlt) Walk(cb WalkCallback) {
	cb.Do("NDeltaXP", &t.NDeltaXP)
}

type Type_7535b2ad struct {
	ETier       DT_ENUM
	Unk_395d1e7 DT_INT
}

func (t *Type_7535b2ad) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.ETier, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.Unk_395d1e7, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_7535b2ad) Walk(cb WalkCallback) {
	cb.Do("ETier", &t.ETier)
	cb.Do("Unk_395d1e7", &t.Unk_395d1e7)
}

type ColorCorrectionParams struct {
	Unk_ba29200 DT_TAGMAP[*DT_ENUM]
}

func (t *ColorCorrectionParams) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Unk_ba29200, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ColorCorrectionParams) Walk(cb WalkCallback) {
	cb.Do("Unk_ba29200", &t.Unk_ba29200)
}

type UIMinimapArtStyle struct {
	// Inherits UIWindowStyle
	// Inherits UIControlStyle
	// Inherits PolymorphicBase
	DwType                    DT_UINT
	DwPad                     DT_UINT
	HParentStyle              UIControlHandle
	Unk_441f783               DT_INT64
	M_eHasModifiedPowerTagMap DT_TAGMAP[*DT_ENUM]
	TConsoleInput             UIControlConsoleInput
	Unk_b4f614c               DT_TAGMAP[*DT_ENUM]
}

func (t *UIMinimapArtStyle) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.HParentStyle, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_441f783, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.M_eHasModifiedPowerTagMap, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.TConsoleInput, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.Unk_b4f614c, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+80, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *UIMinimapArtStyle) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("HParentStyle", &t.HParentStyle)
	cb.Do("Unk_441f783", &t.Unk_441f783)
	cb.Do("M_eHasModifiedPowerTagMap", &t.M_eHasModifiedPowerTagMap)
	cb.Do("TConsoleInput", &t.TConsoleInput)
	cb.Do("Unk_b4f614c", &t.Unk_b4f614c)
}

type Type_75ca18d0 struct {
	HTemplate           UIControlHandle
	BActive             DT_INT
	BAcceptInitialFocus DT_INT
	BIgnoreInputFocus   DT_INT
	SzOnInit            DT_CSTRING[*DT_BYTE]
	SzOnOpen            DT_CSTRING[*DT_BYTE]
	SzOnClose           DT_CSTRING[*DT_BYTE]
	SzOnDispose         DT_CSTRING[*DT_BYTE]
	SzOnUpdate          DT_CSTRING[*DT_BYTE]
	SzOnSelChange       DT_CSTRING[*DT_BYTE]
	SzIDNext            DT_CSTRING[*DT_BYTE]
	SnoOnOpenSound      DT_SNO
	Unk_33fa5cf         DT_SNO
	SnoOnCloseSound     DT_SNO
	Unk_8ab8d6          DT_CSTRING[*DT_BYTE]
	Unk_2509b49         DT_CSTRING[*DT_BYTE]
	Unk_a2ead70         DT_CSTRING[*DT_BYTE]
	Unk_868283          DT_CSTRING[*DT_BYTE]
	Unk_785d371         DT_INT
	Unk_192fb51         DT_INT
	Unk_5251749         DT_INT
	Unk_1cfa0b8         DT_CSTRING[*DT_BYTE]
	Unk_1cfa0b9         DT_CSTRING[*DT_BYTE]
	Unk_513b522         DT_ENUM
	Unk_f0a3845         DT_INT
	Unk_40ae369         DT_INT
	Unk_7d6fa47         DT_INT
}

func (t *Type_75ca18d0) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.HTemplate, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.BActive, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.BAcceptInitialFocus, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BIgnoreInputFocus, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SzOnInit, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.SzOnOpen, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.SzOnClose, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.SzOnDispose, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.SzOnUpdate, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+104, &t.SzOnSelChange, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.SzIDNext, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+136, &t.SnoOnOpenSound, r, &Options{
		Flags: 1,
		Group: 40,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+140, &t.Unk_33fa5cf, r, &Options{
		Flags: 1,
		Group: 40,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+144, &t.SnoOnCloseSound, r, &Options{
		Flags: 1,
		Group: 40,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+152, &t.Unk_8ab8d6, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+168, &t.Unk_2509b49, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+184, &t.Unk_a2ead70, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+200, &t.Unk_868283, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+216, &t.Unk_785d371, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+220, &t.Unk_192fb51, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+224, &t.Unk_5251749, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+232, &t.Unk_1cfa0b8, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+248, &t.Unk_1cfa0b9, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+264, &t.Unk_513b522, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+268, &t.Unk_f0a3845, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+272, &t.Unk_40ae369, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+276, &t.Unk_7d6fa47, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+280, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_75ca18d0) Walk(cb WalkCallback) {
	cb.Do("HTemplate", &t.HTemplate)
	cb.Do("BActive", &t.BActive)
	cb.Do("BAcceptInitialFocus", &t.BAcceptInitialFocus)
	cb.Do("BIgnoreInputFocus", &t.BIgnoreInputFocus)
	cb.Do("SzOnInit", &t.SzOnInit)
	cb.Do("SzOnOpen", &t.SzOnOpen)
	cb.Do("SzOnClose", &t.SzOnClose)
	cb.Do("SzOnDispose", &t.SzOnDispose)
	cb.Do("SzOnUpdate", &t.SzOnUpdate)
	cb.Do("SzOnSelChange", &t.SzOnSelChange)
	cb.Do("SzIDNext", &t.SzIDNext)
	cb.Do("SnoOnOpenSound", &t.SnoOnOpenSound)
	cb.Do("Unk_33fa5cf", &t.Unk_33fa5cf)
	cb.Do("SnoOnCloseSound", &t.SnoOnCloseSound)
	cb.Do("Unk_8ab8d6", &t.Unk_8ab8d6)
	cb.Do("Unk_2509b49", &t.Unk_2509b49)
	cb.Do("Unk_a2ead70", &t.Unk_a2ead70)
	cb.Do("Unk_868283", &t.Unk_868283)
	cb.Do("Unk_785d371", &t.Unk_785d371)
	cb.Do("Unk_192fb51", &t.Unk_192fb51)
	cb.Do("Unk_5251749", &t.Unk_5251749)
	cb.Do("Unk_1cfa0b8", &t.Unk_1cfa0b8)
	cb.Do("Unk_1cfa0b9", &t.Unk_1cfa0b9)
	cb.Do("Unk_513b522", &t.Unk_513b522)
	cb.Do("Unk_f0a3845", &t.Unk_f0a3845)
	cb.Do("Unk_40ae369", &t.Unk_40ae369)
	cb.Do("Unk_7d6fa47", &t.Unk_7d6fa47)
}

type TriggerEvent struct {
	// Inherits PolymorphicBase
	DwType          DT_UINT
	DwPad           DT_UINT
	TConditions     TriggerConditions
	FGenerated      DT_INT
	Unk_6cba752     DT_INT
	DwParentActorID DT_UINT
}

func (t *TriggerEvent) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.FGenerated, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_6cba752, r, &Options{Flags: 16}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.DwParentActorID, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+80, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TriggerEvent) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("TConditions", &t.TConditions)
	cb.Do("FGenerated", &t.FGenerated)
	cb.Do("Unk_6cba752", &t.Unk_6cba752)
	cb.Do("DwParentActorID", &t.DwParentActorID)
}

type AICellData struct {
	Unk_f169594 AABB
	Unk_9a685b8 AABB
	Unk_c225718 DT_UINT
	M_cellId    DT_INT64
	Unk_179f850 DT_INT64
}

func (t *AICellData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Unk_f169594, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_9a685b8, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.Unk_c225718, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.M_cellId, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.Unk_179f850, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+72, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *AICellData) Walk(cb WalkCallback) {
	cb.Do("Unk_f169594", &t.Unk_f169594)
	cb.Do("Unk_9a685b8", &t.Unk_9a685b8)
	cb.Do("Unk_c225718", &t.Unk_c225718)
	cb.Do("M_cellId", &t.M_cellId)
	cb.Do("Unk_179f850", &t.Unk_179f850)
}

type PlayMusicOverlayMessage struct {
	THeader  RequiredMessageHeader
	SnoMusic DT_SNO
}

func (t *PlayMusicOverlayMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoMusic, r, &Options{
		Flags: 1,
		Group: 62,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+20, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PlayMusicOverlayMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("SnoMusic", &t.SnoMusic)
}

type BannerMaskOnly struct {
	SzName  DT_UINT
	HLabel  StringLabelHandleEx
	SnoMask DT_SNO
	HIcon   UIImageHandleReference
}

func (t *BannerMaskOnly) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SzName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.HLabel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.SnoMask, r, &Options{
		Flags: 1,
		Group: 44,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.HIcon, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+20, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *BannerMaskOnly) Walk(cb WalkCallback) {
	cb.Do("SzName", &t.SzName)
	cb.Do("HLabel", &t.HLabel)
	cb.Do("SnoMask", &t.SnoMask)
	cb.Do("HIcon", &t.HIcon)
}

type DeathFadeTimeMessage struct {
	THeader                RequiredMessageHeader
	Ann                    DT_ACD_NETWORK_NAME
	NTimeUntilFade         DT_INT
	NFadeTime              DT_INT
	BRecurseForAttachments DT_INT
}

func (t *DeathFadeTimeMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Ann, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.NTimeUntilFade, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.NFadeTime, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.BRecurseForAttachments, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+36, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *DeathFadeTimeMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("Ann", &t.Ann)
	cb.Do("NTimeUntilFade", &t.NTimeUntilFade)
	cb.Do("NFadeTime", &t.NFadeTime)
	cb.Do("BRecurseForAttachments", &t.BRecurseForAttachments)
}

type ActorGizmoData struct {
	// Inherits PolymorphicBase
	DwType                       DT_UINT
	DwPad                        DT_UINT
	FDisableNonFriendlyOperation DT_INT
	FWalkToCenter                DT_INT
	FGizmoStartsDisabled         DT_INT
	FUseStringListName           DT_INT
	FForceMinimapIcon            DT_INT
	FlOperationRadius            DT_FLOAT
	Unk_d0b1df5                  DT_FLOAT
	FlGizmoUseTime               DT_FLOAT
	SnoChannelingEffect          DT_SNO
	Unk_2767229                  DT_INT
	FGizmoShowProgressBar        DT_INT
	Unk_6d9ebe1                  DT_INT
	Unk_5456245                  DT_INT
	Unk_af5815a                  DT_INT
	SnoOnClickEffect             DT_SNO
	SnoPickedUpEffect            DT_SNO
	SnoDropOnGroundEffect        DT_SNO
	TConditionData               GizmoConditionData
	SnoPowerOperator             DT_SNO
	SnoPowerOperate              DT_SNO
	SnoPowerOperatorActive       DT_SNO
	SnoPowerOperateActive        DT_SNO
	Unk_359810e                  DT_INT
	NCooldown                    DT_UINT
	Unk_9c8478e                  DT_UINT
	Unk_d45ed2d                  DT_INT
	Unk_f6b20b7                  DT_INT
	Unk_54513b8                  DT_INT
	Unk_fd1f378                  DT_UINT
	Unk_487c14                   DT_UINT
	Unk_87f2609                  DT_UINT
	Unk_158eb4f                  DT_FLOAT
	Unk_ab58cd3                  DT_ENUM
	Unk_91a3966                  DT_UINT
	Unk_25312e5                  DT_UINT
	Unk_4be4371                  DT_INT
}

func (t *ActorGizmoData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.FDisableNonFriendlyOperation, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.FWalkToCenter, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.FGizmoStartsDisabled, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.FUseStringListName, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.FForceMinimapIcon, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.FlOperationRadius, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.Unk_d0b1df5, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.FlGizmoUseTime, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.SnoChannelingEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.Unk_2767229, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.FGizmoShowProgressBar, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+60, &t.Unk_6d9ebe1, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.Unk_5456245, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.Unk_af5815a, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.SnoOnClickEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.SnoPickedUpEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.SnoDropOnGroundEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.TConditionData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.SnoPowerOperator, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.SnoPowerOperate, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.SnoPowerOperatorActive, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+100, &t.SnoPowerOperateActive, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+104, &t.Unk_359810e, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+108, &t.NCooldown, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.Unk_9c8478e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+116, &t.Unk_d45ed2d, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.Unk_f6b20b7, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+124, &t.Unk_54513b8, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.Unk_fd1f378, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+132, &t.Unk_487c14, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+136, &t.Unk_87f2609, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+140, &t.Unk_158eb4f, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+144, &t.Unk_ab58cd3, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+148, &t.Unk_91a3966, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+152, &t.Unk_25312e5, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+156, &t.Unk_4be4371, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+160, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ActorGizmoData) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("FDisableNonFriendlyOperation", &t.FDisableNonFriendlyOperation)
	cb.Do("FWalkToCenter", &t.FWalkToCenter)
	cb.Do("FGizmoStartsDisabled", &t.FGizmoStartsDisabled)
	cb.Do("FUseStringListName", &t.FUseStringListName)
	cb.Do("FForceMinimapIcon", &t.FForceMinimapIcon)
	cb.Do("FlOperationRadius", &t.FlOperationRadius)
	cb.Do("Unk_d0b1df5", &t.Unk_d0b1df5)
	cb.Do("FlGizmoUseTime", &t.FlGizmoUseTime)
	cb.Do("SnoChannelingEffect", &t.SnoChannelingEffect)
	cb.Do("Unk_2767229", &t.Unk_2767229)
	cb.Do("FGizmoShowProgressBar", &t.FGizmoShowProgressBar)
	cb.Do("Unk_6d9ebe1", &t.Unk_6d9ebe1)
	cb.Do("Unk_5456245", &t.Unk_5456245)
	cb.Do("Unk_af5815a", &t.Unk_af5815a)
	cb.Do("SnoOnClickEffect", &t.SnoOnClickEffect)
	cb.Do("SnoPickedUpEffect", &t.SnoPickedUpEffect)
	cb.Do("SnoDropOnGroundEffect", &t.SnoDropOnGroundEffect)
	cb.Do("TConditionData", &t.TConditionData)
	cb.Do("SnoPowerOperator", &t.SnoPowerOperator)
	cb.Do("SnoPowerOperate", &t.SnoPowerOperate)
	cb.Do("SnoPowerOperatorActive", &t.SnoPowerOperatorActive)
	cb.Do("SnoPowerOperateActive", &t.SnoPowerOperateActive)
	cb.Do("Unk_359810e", &t.Unk_359810e)
	cb.Do("NCooldown", &t.NCooldown)
	cb.Do("Unk_9c8478e", &t.Unk_9c8478e)
	cb.Do("Unk_d45ed2d", &t.Unk_d45ed2d)
	cb.Do("Unk_f6b20b7", &t.Unk_f6b20b7)
	cb.Do("Unk_54513b8", &t.Unk_54513b8)
	cb.Do("Unk_fd1f378", &t.Unk_fd1f378)
	cb.Do("Unk_487c14", &t.Unk_487c14)
	cb.Do("Unk_87f2609", &t.Unk_87f2609)
	cb.Do("Unk_158eb4f", &t.Unk_158eb4f)
	cb.Do("Unk_ab58cd3", &t.Unk_ab58cd3)
	cb.Do("Unk_91a3966", &t.Unk_91a3966)
	cb.Do("Unk_25312e5", &t.Unk_25312e5)
	cb.Do("Unk_4be4371", &t.Unk_4be4371)
}

type FlagLookup struct {
	NIndex        DT_INT
	SzLabel       DT_CHARARRAY
	SzDescription DT_CHARARRAY
}

func (t *FlagLookup) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.NIndex, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.SzLabel, r, &Options{
		ArrayLength: 128,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+132, &t.SzDescription, r, &Options{
		ArrayLength: 256,
		Flags:       1,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+388, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *FlagLookup) Walk(cb WalkCallback) {
	cb.Do("NIndex", &t.NIndex)
	cb.Do("SzLabel", &t.SzLabel)
	cb.Do("SzDescription", &t.SzDescription)
}

type TriggerEventAddRope struct {
	// Inherits TriggerEventRangedDuration
	// Inherits TriggerEvent
	// Inherits PolymorphicBase
	DwType              DT_UINT
	TConditions         TriggerConditions
	FGenerated          DT_INT
	Unk_6cba752         DT_INT
	DwParentActorID     DT_UINT
	TDuration           DT_FLOAT
	DwTriggerFlags      DT_UINT
	DwTriggerFlagsEx    DT_UINT
	TCleanup            TriggerCleanup
	Unk_49e9257         DT_INT
	Unk_5490979         DT_INT
	DwPad               DT_UINT
	DwID                DT_UINT
	SnoRope             DT_SNO
	SnoPowerEffectParam DT_SNO
	Unk_f0a4c41         DT_FIXEDARRAY[*Type_1f843277]
	Unk_825667e         DT_VARIABLEARRAY[*Type_1f843277]
	VecScalar           DT_VECTOR2D
}

func (t *TriggerEventAddRope) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.FGenerated, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_6cba752, r, &Options{Flags: 16}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.DwParentActorID, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.TDuration, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.DwTriggerFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.DwTriggerFlagsEx, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.TCleanup, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+116, &t.Unk_49e9257, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.Unk_5490979, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+124, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.DwID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+132, &t.SnoRope, r, &Options{
		Flags: 1,
		Group: 32,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+136, &t.SnoPowerEffectParam, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+140, &t.Unk_f0a4c41, r, &Options{
		ArrayLength: 2,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+184, &t.Unk_825667e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+200, &t.VecScalar, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+208, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TriggerEventAddRope) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("TConditions", &t.TConditions)
	cb.Do("FGenerated", &t.FGenerated)
	cb.Do("Unk_6cba752", &t.Unk_6cba752)
	cb.Do("DwParentActorID", &t.DwParentActorID)
	cb.Do("TDuration", &t.TDuration)
	cb.Do("DwTriggerFlags", &t.DwTriggerFlags)
	cb.Do("DwTriggerFlagsEx", &t.DwTriggerFlagsEx)
	cb.Do("TCleanup", &t.TCleanup)
	cb.Do("Unk_49e9257", &t.Unk_49e9257)
	cb.Do("Unk_5490979", &t.Unk_5490979)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("DwID", &t.DwID)
	cb.Do("SnoRope", &t.SnoRope)
	cb.Do("SnoPowerEffectParam", &t.SnoPowerEffectParam)
	cb.Do("Unk_f0a4c41", &t.Unk_f0a4c41)
	cb.Do("Unk_825667e", &t.Unk_825667e)
	cb.Do("VecScalar", &t.VecScalar)
}

type GenericBlobResponseMessage struct {
	THeader   RequiredResponseMessageHeader
	UBlobSize DT_WORD
}

func (t *GenericBlobResponseMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.UBlobSize, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+28, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *GenericBlobResponseMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("UBlobSize", &t.UBlobSize)
}

type EffectGroupActorPositionTrack struct {
	// Inherits EffectGroupTrack
	// Inherits PolymorphicBase
	DwType DT_UINT
	DwPad  DT_UINT
}

func (t *EffectGroupActorPositionTrack) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *EffectGroupActorPositionTrack) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
}

type WorldEventStartingMessage struct {
	THeader        RequiredMessageHeader
	SnoQuest       DT_SNO
	BIsWorldEvent  DT_INT
	SnoWorld       DT_SNO
	SnoSubzone     DT_SNO
	SnoReward      DT_SNO
	ERewardQuality DT_ENUM
	Unk_576b41d    DT_INT64
	WpLocation     DT_VECTOR3D
}

func (t *WorldEventStartingMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoQuest, r, &Options{
		Flags: 1,
		Group: 31,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.BIsWorldEvent, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SnoWorld, r, &Options{
		Flags: 1,
		Group: 48,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.SnoSubzone, r, &Options{
		Flags: 1,
		Group: 80,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.SnoReward, r, &Options{
		Flags: 1,
		Group: 73,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.ERewardQuality, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.Unk_576b41d, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.WpLocation, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+64, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *WorldEventStartingMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("SnoQuest", &t.SnoQuest)
	cb.Do("BIsWorldEvent", &t.BIsWorldEvent)
	cb.Do("SnoWorld", &t.SnoWorld)
	cb.Do("SnoSubzone", &t.SnoSubzone)
	cb.Do("SnoReward", &t.SnoReward)
	cb.Do("ERewardQuality", &t.ERewardQuality)
	cb.Do("Unk_576b41d", &t.Unk_576b41d)
	cb.Do("WpLocation", &t.WpLocation)
}

type ImbueRecipe struct {
	Unk_c3af77b          DT_ENUM
	EItemQualityModifier DT_ENUM
	Unk_7f93f1d          DT_ENUM
	SnoRecipe            DT_SNO
}

func (t *ImbueRecipe) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Unk_c3af77b, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.EItemQualityModifier, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.Unk_7f93f1d, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.SnoRecipe, r, &Options{
		Flags: 1,
		Group: 49,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ImbueRecipe) Walk(cb WalkCallback) {
	cb.Do("Unk_c3af77b", &t.Unk_c3af77b)
	cb.Do("EItemQualityModifier", &t.EItemQualityModifier)
	cb.Do("Unk_7f93f1d", &t.Unk_7f93f1d)
	cb.Do("SnoRecipe", &t.SnoRecipe)
}

type NecroArmyUnitMessage struct {
	THeader   RequiredMessageHeader
	EUnitType DT_ENUM
}

func (t *NecroArmyUnitMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.EUnitType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+20, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *NecroArmyUnitMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("EUnitType", &t.EUnitType)
}

type SpeakerDefinition struct {
	Unk_ca1a658    DT_INT
	PtVOParameters DT_VARIABLEARRAY[*WwiseGameParameter]
}

func (t *SpeakerDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.Unk_ca1a658, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.PtVOParameters, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *SpeakerDefinition) Walk(cb WalkCallback) {
	cb.Do("Unk_ca1a658", &t.Unk_ca1a658)
	cb.Do("PtVOParameters", &t.PtVOParameters)
}

type TriggerEventSetWeaponSheathed struct {
	// Inherits TriggerEvent
	// Inherits PolymorphicBase
	DwType          DT_UINT
	DwPad           DT_UINT
	TConditions     TriggerConditions
	FGenerated      DT_INT
	Unk_6cba752     DT_INT
	DwParentActorID DT_UINT
	Unk_279aa5a     DT_INT
	DwActorID       DT_UINT
	BSheathed       DT_INT
}

func (t *TriggerEventSetWeaponSheathed) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.FGenerated, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_6cba752, r, &Options{Flags: 16}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.DwParentActorID, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.Unk_279aa5a, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.DwActorID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.BSheathed, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+96, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TriggerEventSetWeaponSheathed) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("TConditions", &t.TConditions)
	cb.Do("FGenerated", &t.FGenerated)
	cb.Do("Unk_6cba752", &t.Unk_6cba752)
	cb.Do("DwParentActorID", &t.DwParentActorID)
	cb.Do("Unk_279aa5a", &t.Unk_279aa5a)
	cb.Do("DwActorID", &t.DwActorID)
	cb.Do("BSheathed", &t.BSheathed)
}

type Type_77a79111 struct {
	Unk_ca89bd3       DT_FLOAT
	Unk_fb082e6       DT_FLOAT
	Unk_eb94539       DT_UINT
	Unk_bcdffc9       DT_FLOAT
	Unk_bb3a1d        DT_FLOAT
	FlCompressorSlope DT_FLOAT
	Unk_fcaf78b       DT_FLOAT
	Unk_eb919f7       DT_FLOAT
	Unk_ba7b0e0       DT_FLOAT
	Unk_5419989       DT_FLOAT
	ECompressorMode   DT_ENUM
	Unk_34d0352       DT_ENUM
}

func (t *Type_77a79111) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Unk_ca89bd3, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.Unk_fb082e6, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.Unk_eb94539, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.Unk_bcdffc9, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_bb3a1d, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.FlCompressorSlope, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_fcaf78b, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.Unk_eb919f7, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.Unk_ba7b0e0, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.Unk_5419989, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.ECompressorMode, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.Unk_34d0352, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_77a79111) Walk(cb WalkCallback) {
	cb.Do("Unk_ca89bd3", &t.Unk_ca89bd3)
	cb.Do("Unk_fb082e6", &t.Unk_fb082e6)
	cb.Do("Unk_eb94539", &t.Unk_eb94539)
	cb.Do("Unk_bcdffc9", &t.Unk_bcdffc9)
	cb.Do("Unk_bb3a1d", &t.Unk_bb3a1d)
	cb.Do("FlCompressorSlope", &t.FlCompressorSlope)
	cb.Do("Unk_fcaf78b", &t.Unk_fcaf78b)
	cb.Do("Unk_eb919f7", &t.Unk_eb919f7)
	cb.Do("Unk_ba7b0e0", &t.Unk_ba7b0e0)
	cb.Do("Unk_5419989", &t.Unk_5419989)
	cb.Do("ECompressorMode", &t.ECompressorMode)
	cb.Do("Unk_34d0352", &t.Unk_34d0352)
}

type Type_77aada63 struct {
	TValueMin DT_FLOAT
	TValueMax DT_FLOAT
	TTime     DT_FLOAT
}

func (t *Type_77aada63) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.TValueMin, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.TValueMax, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.TTime, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+12, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_77aada63) Walk(cb WalkCallback) {
	cb.Do("TValueMin", &t.TValueMin)
	cb.Do("TValueMax", &t.TValueMax)
	cb.Do("TTime", &t.TTime)
}

type Type_77e24bbd struct {
	TValueMin DT_INT
	TValueMax DT_INT
	TTime     DT_FLOAT
}

func (t *Type_77e24bbd) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.TValueMin, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.TValueMax, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.TTime, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+12, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_77e24bbd) Walk(cb WalkCallback) {
	cb.Do("TValueMin", &t.TValueMin)
	cb.Do("TValueMax", &t.TValueMax)
	cb.Do("TTime", &t.TTime)
}

type OnInterruptPowerCallback struct {
	// Inherits PowerCallbackBase
	// Inherits PolymorphicBase
	DwType                DT_UINT
	DwPad                 DT_UINT
	SnoTriggerEffectGroup DT_SNO
	BCouldHaveRagdolled   DT_INT
}

func (t *OnInterruptPowerCallback) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoTriggerEffectGroup, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.BCouldHaveRagdolled, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *OnInterruptPowerCallback) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("SnoTriggerEffectGroup", &t.SnoTriggerEffectGroup)
	cb.Do("BCouldHaveRagdolled", &t.BCouldHaveRagdolled)
}

type Type_78541b1a struct {
	Unk_70a927c DT_INT
	FlDelta     DT_FLOAT
}

func (t *Type_78541b1a) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Unk_70a927c, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.FlDelta, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_78541b1a) Walk(cb WalkCallback) {
	cb.Do("Unk_70a927c", &t.Unk_70a927c)
	cb.Do("FlDelta", &t.FlDelta)
}

type OnCreatePowerCallback struct {
	// Inherits PowerCallbackBase
	// Inherits PolymorphicBase
	DwType                DT_UINT
	DwPad                 DT_UINT
	SnoTriggerEffectGroup DT_SNO
	BCouldHaveRagdolled   DT_INT
}

func (t *OnCreatePowerCallback) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoTriggerEffectGroup, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.BCouldHaveRagdolled, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *OnCreatePowerCallback) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("SnoTriggerEffectGroup", &t.SnoTriggerEffectGroup)
	cb.Do("BCouldHaveRagdolled", &t.BCouldHaveRagdolled)
}

type ACDGroupMessage struct {
	THeader RequiredMessageHeader
	Ann     DT_ACD_NETWORK_NAME
	AGroups DT_FIXEDARRAY[*DT_GBID]
}

func (t *ACDGroupMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Ann, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.AGroups, r, &Options{
		ArrayLength: 8,
		Flags:       9,
		Group:       24,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+60, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ACDGroupMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("Ann", &t.Ann)
	cb.Do("AGroups", &t.AGroups)
}

type Type_78854e88 struct {
	SnoMusic   DT_SNO
	SnoAmbient DT_SNO
	SnoReverb  DT_SNO
	SnoWeather DT_SNO
}

func (t *Type_78854e88) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoMusic, r, &Options{
		Flags: 1,
		Group: 62,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.SnoAmbient, r, &Options{
		Flags: 1,
		Group: 5,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.SnoReverb, r, &Options{
		Flags: 1,
		Group: 60,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.SnoWeather, r, &Options{
		Flags: 1,
		Group: 47,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_78854e88) Walk(cb WalkCallback) {
	cb.Do("SnoMusic", &t.SnoMusic)
	cb.Do("SnoAmbient", &t.SnoAmbient)
	cb.Do("SnoReverb", &t.SnoReverb)
	cb.Do("SnoWeather", &t.SnoWeather)
}

type ClassPassiveSkillData struct {
	ArSlots  DT_VARIABLEARRAY[*ClassPassiveSkillSlotData]
	ArPowers DT_VARIABLEARRAY[*ClassPassiveSkillPowerData]
}

func (t *ClassPassiveSkillData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.ArSlots, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.ArPowers, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ClassPassiveSkillData) Walk(cb WalkCallback) {
	cb.Do("ArSlots", &t.ArSlots)
	cb.Do("ArPowers", &t.ArPowers)
}

type PlayerClassResourceData struct {
	EType                      DT_ENUM
	FlBase                     DT_FLOAT
	FlRegen                    DT_FLOAT
	FlPowerFormulaTablesResult DT_FLOAT
	Unk_171732b                DT_FLOAT
	Unk_8694d05                DT_FLOAT
	Unk_b19aa73                DT_FLOAT
	Unk_bf2b603                DT_FLOAT
}

func (t *PlayerClassResourceData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.EType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.FlBase, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.FlRegen, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.FlPowerFormulaTablesResult, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_171732b, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.Unk_8694d05, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_b19aa73, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.Unk_bf2b603, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PlayerClassResourceData) Walk(cb WalkCallback) {
	cb.Do("EType", &t.EType)
	cb.Do("FlBase", &t.FlBase)
	cb.Do("FlRegen", &t.FlRegen)
	cb.Do("FlPowerFormulaTablesResult", &t.FlPowerFormulaTablesResult)
	cb.Do("Unk_171732b", &t.Unk_171732b)
	cb.Do("Unk_8694d05", &t.Unk_8694d05)
	cb.Do("Unk_b19aa73", &t.Unk_b19aa73)
	cb.Do("Unk_bf2b603", &t.Unk_bf2b603)
}

type TriggerCleanup struct {
	Unk_80dc73  DT_ENUM
	Unk_f216739 DT_ENUM
	Unk_8047af2 DT_ENUM
	Unk_4690732 DT_ENUM
	Unk_2041ce1 DT_ENUM
	Unk_c5ce3af DT_ENUM
}

func (t *TriggerCleanup) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Unk_80dc73, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.Unk_f216739, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.Unk_8047af2, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.Unk_4690732, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_2041ce1, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.Unk_c5ce3af, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TriggerCleanup) Walk(cb WalkCallback) {
	cb.Do("Unk_80dc73", &t.Unk_80dc73)
	cb.Do("Unk_f216739", &t.Unk_f216739)
	cb.Do("Unk_8047af2", &t.Unk_8047af2)
	cb.Do("Unk_4690732", &t.Unk_4690732)
	cb.Do("Unk_2041ce1", &t.Unk_2041ce1)
	cb.Do("Unk_c5ce3af", &t.Unk_c5ce3af)
}

type ClientDebugLogMessage struct {
	THeader     RequiredMessageHeader
	SzLogString DT_CHARARRAY
}

func (t *ClientDebugLogMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SzLogString, r, &Options{
		ArrayLength: 1000,
		Flags:       1,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+1016, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ClientDebugLogMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("SzLogString", &t.SzLogString)
}

type ActivityReward struct{}

func (t *ActivityReward) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if _, err := r.Seek(p+1, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ActivityReward) Walk(cb WalkCallback) {}

type PowerPhasePreplay struct {
	// Inherits PowerPhaseBase
	// Inherits PolymorphicBase
	DwType      DT_UINT
	DwPad       DT_UINT
	TPhaseName  DT_UINT
	Unk_fcb7313 DT_POLYMORPHIC_VARIABLEARRAY[*DT_INT64]
	Unk_d0d932b DT_INT
	Unk_9a8200e DT_INT
}

func (t *PowerPhasePreplay) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TPhaseName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_fcb7313, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.Unk_d0d932b, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.Unk_9a8200e, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+56, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PowerPhasePreplay) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("TPhaseName", &t.TPhaseName)
	cb.Do("Unk_fcb7313", &t.Unk_fcb7313)
	cb.Do("Unk_d0d932b", &t.Unk_d0d932b)
	cb.Do("Unk_9a8200e", &t.Unk_9a8200e)
}

type ScriptEventParamQuestName struct {
	// Inherits ScriptEventParamBase
	// Inherits PolymorphicBase
	DwType      DT_UINT
	EParamType  DT_ENUM
	DwPad       DT_UINT
	DwQuestHash DT_UINT
	SzQuest     DT_CSTRING[*DT_BYTE]
}

func (t *ScriptEventParamQuestName) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.EParamType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.DwQuestHash, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.SzQuest, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ScriptEventParamQuestName) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("EParamType", &t.EParamType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("DwQuestHash", &t.DwQuestHash)
	cb.Do("SzQuest", &t.SzQuest)
}

type CurrentLevelAreaSubcondition struct {
	// Inherits Subcondition
	// Inherits PolymorphicBase
	DwType       DT_UINT
	BNegate      DT_INT
	DwPad        DT_UINT
	SnoLevelArea DT_SNO
	Unk_c7b2b18  DT_ENUM
}

func (t *CurrentLevelAreaSubcondition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BNegate, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SnoLevelArea, r, &Options{
		Flags: 513,
		Group: 22,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.Unk_c7b2b18, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *CurrentLevelAreaSubcondition) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("BNegate", &t.BNegate)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("SnoLevelArea", &t.SnoLevelArea)
	cb.Do("Unk_c7b2b18", &t.Unk_c7b2b18)
}

type GlobalMarkerActorWaypointData struct {
	// Inherits GlobalMarkerActorData
	// Inherits PolymorphicBase
	DwType            DT_UINT
	DwPad             DT_UINT
	DwEntranceName    DT_STARTLOC_NAME
	HZoneLabel        DT_UINT
	Unk_92edf50       DT_SNO
	ArWaypointEffects DT_FIXEDARRAY[*WaypointEffectInfo]
}

func (t *GlobalMarkerActorWaypointData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.DwEntranceName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.HZoneLabel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_92edf50, r, &Options{
		Flags: 513,
		Group: 31,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.ArWaypointEffects, r, &Options{
		ArrayLength: 4,
		Flags:       1,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+896, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *GlobalMarkerActorWaypointData) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("DwEntranceName", &t.DwEntranceName)
	cb.Do("HZoneLabel", &t.HZoneLabel)
	cb.Do("Unk_92edf50", &t.Unk_92edf50)
	cb.Do("ArWaypointEffects", &t.ArWaypointEffects)
}

type PrivateGameSubcondition struct {
	// Inherits Subcondition
	// Inherits PolymorphicBase
	DwType  DT_UINT
	BNegate DT_INT
	DwPad   DT_UINT
}

func (t *PrivateGameSubcondition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BNegate, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PrivateGameSubcondition) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("BNegate", &t.BNegate)
	cb.Do("DwPad", &t.DwPad)
}

type MarkerInstanceChunk struct {
	PtInstanceGroups DT_VARIABLEARRAY[*MarkerInstanceGroup]
	Unk_7934bc2      Type_cd5b4347
	Unk_2f217b0      DT_INT
	AabbBounds       AABB
}

func (t *MarkerInstanceChunk) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.PtInstanceGroups, r, &Options{Flags: 2097152}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_7934bc2, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.Unk_2f217b0, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.AabbBounds, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+64, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *MarkerInstanceChunk) Walk(cb WalkCallback) {
	cb.Do("PtInstanceGroups", &t.PtInstanceGroups)
	cb.Do("Unk_7934bc2", &t.Unk_7934bc2)
	cb.Do("Unk_2f217b0", &t.Unk_2f217b0)
	cb.Do("AabbBounds", &t.AabbBounds)
}

type Type_7a02a8d6 struct {
	NLevel           DT_INT
	SnoCondition     DT_SNO
	HDisplayedString DT_UINT
}

func (t *Type_7a02a8d6) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.NLevel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.SnoCondition, r, &Options{
		Flags: 1,
		Group: 51,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.HDisplayedString, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+12, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_7a02a8d6) Walk(cb WalkCallback) {
	cb.Do("NLevel", &t.NLevel)
	cb.Do("SnoCondition", &t.SnoCondition)
	cb.Do("HDisplayedString", &t.HDisplayedString)
}

type ScriptEventParamMonsterRarity struct {
	// Inherits ScriptEventParamBase
	// Inherits PolymorphicBase
	DwType         DT_UINT
	EParamType     DT_ENUM
	DwPad          DT_UINT
	EMonsterRarity DT_ENUM
}

func (t *ScriptEventParamMonsterRarity) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.EParamType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.EMonsterRarity, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ScriptEventParamMonsterRarity) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("EParamType", &t.EParamType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("EMonsterRarity", &t.EMonsterRarity)
}

type MarkerInstanceGroup struct {
	SnoAppearance           DT_SNO
	SzLookName              DT_UINT
	DwShaderMapOverride     DT_UINT
	ECullingLevel           DT_ENUM
	EInstanceType           DT_ENUM
	PtInstances             DT_VARIABLEARRAY[*Type_8b32a937]
	Unk_7934bc2             Type_2d02bd94
	DwFlags                 DT_UINT
	PtRunTimeMaterialValues DT_VARIABLEARRAY[*RunTimeMaterialValues]
}

func (t *MarkerInstanceGroup) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoAppearance, r, &Options{
		Flags: 1,
		Group: 9,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.SzLookName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwShaderMapOverride, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.ECullingLevel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.EInstanceType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.PtInstances, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.Unk_7934bc2, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.DwFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.PtRunTimeMaterialValues, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+72, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *MarkerInstanceGroup) Walk(cb WalkCallback) {
	cb.Do("SnoAppearance", &t.SnoAppearance)
	cb.Do("SzLookName", &t.SzLookName)
	cb.Do("DwShaderMapOverride", &t.DwShaderMapOverride)
	cb.Do("ECullingLevel", &t.ECullingLevel)
	cb.Do("EInstanceType", &t.EInstanceType)
	cb.Do("PtInstances", &t.PtInstances)
	cb.Do("Unk_7934bc2", &t.Unk_7934bc2)
	cb.Do("DwFlags", &t.DwFlags)
	cb.Do("PtRunTimeMaterialValues", &t.PtRunTimeMaterialValues)
}

type PrefetchQuestMessage struct {
	THeader    RequiredMessageHeader
	SnoQuest   DT_SNO
	Unk_a61d97 DT_INT
}

func (t *PrefetchQuestMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoQuest, r, &Options{
		Flags: 1,
		Group: 31,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.Unk_a61d97, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PrefetchQuestMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("SnoQuest", &t.SnoQuest)
	cb.Do("Unk_a61d97", &t.Unk_a61d97)
}

type Type_7a954650 struct {
	TComponent SerialDataInfo
}

func (t *Type_7a954650) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.TComponent, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_7a954650) Walk(cb WalkCallback) {
	cb.Do("TComponent", &t.TComponent)
}

type EffectGroupDefinition struct {
	FlDuration          DT_FLOAT
	DwEffectFlags       DT_UINT
	Unk_4327903         DT_FLOAT
	Unk_9cf7635         DT_FLOAT
	Unk_30364bd         DT_FLOAT
	Unk_e8602d3         DT_FLOAT
	Unk_7d5553e         DT_FLOAT
	Unk_19bdc57         DT_FLOAT
	Unk_7c79fc2         DT_FLOAT
	Unk_43960c1         DT_ENUM
	TFallbackEffect     EffectItem
	PtEffects           DT_VARIABLEARRAY[*EffectItem]
	Unk_50a2c90         DT_VARIABLEARRAY[*DT_INT]
	NEffectWeightMethod DT_ENUM
	SnoPower            DT_SNO
	SnoPowerEffectParam DT_SNO
	SnoConversation     DT_SNO
	Unk_e7c25e0         DT_ENUM
	Unk_51077dd         DT_RANGE[*DT_FLOAT]
	FPlayedBit          DT_FIXEDARRAY[*DT_UINT]
	PtHardpoints        DT_VARIABLEARRAY[*EffectGroupHardpoint]
	Unk_4f7a18a         DT_UINT
	Unk_adf7def         DT_ENUM
}

func (t *EffectGroupDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.FlDuration, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwEffectFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_4327903, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.Unk_9cf7635, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_30364bd, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.Unk_e8602d3, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.Unk_7d5553e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.Unk_19bdc57, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.Unk_7c79fc2, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.Unk_43960c1, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.TFallbackEffect, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+200, &t.PtEffects, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+216, &t.Unk_50a2c90, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+232, &t.NEffectWeightMethod, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+236, &t.SnoPower, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+240, &t.SnoPowerEffectParam, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+244, &t.SnoConversation, r, &Options{
		Flags: 1,
		Group: 12,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+248, &t.Unk_e7c25e0, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+252, &t.Unk_51077dd, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+260, &t.FPlayedBit, r, &Options{ArrayLength: 16}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+328, &t.PtHardpoints, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+344, &t.Unk_4f7a18a, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+348, &t.Unk_adf7def, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+352, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *EffectGroupDefinition) Walk(cb WalkCallback) {
	cb.Do("FlDuration", &t.FlDuration)
	cb.Do("DwEffectFlags", &t.DwEffectFlags)
	cb.Do("Unk_4327903", &t.Unk_4327903)
	cb.Do("Unk_9cf7635", &t.Unk_9cf7635)
	cb.Do("Unk_30364bd", &t.Unk_30364bd)
	cb.Do("Unk_e8602d3", &t.Unk_e8602d3)
	cb.Do("Unk_7d5553e", &t.Unk_7d5553e)
	cb.Do("Unk_19bdc57", &t.Unk_19bdc57)
	cb.Do("Unk_7c79fc2", &t.Unk_7c79fc2)
	cb.Do("Unk_43960c1", &t.Unk_43960c1)
	cb.Do("TFallbackEffect", &t.TFallbackEffect)
	cb.Do("PtEffects", &t.PtEffects)
	cb.Do("Unk_50a2c90", &t.Unk_50a2c90)
	cb.Do("NEffectWeightMethod", &t.NEffectWeightMethod)
	cb.Do("SnoPower", &t.SnoPower)
	cb.Do("SnoPowerEffectParam", &t.SnoPowerEffectParam)
	cb.Do("SnoConversation", &t.SnoConversation)
	cb.Do("Unk_e7c25e0", &t.Unk_e7c25e0)
	cb.Do("Unk_51077dd", &t.Unk_51077dd)
	cb.Do("FPlayedBit", &t.FPlayedBit)
	cb.Do("PtHardpoints", &t.PtHardpoints)
	cb.Do("Unk_4f7a18a", &t.Unk_4f7a18a)
	cb.Do("Unk_adf7def", &t.Unk_adf7def)
}

type CurrencyModifiedMessage struct {
	THeader       RequiredMessageHeader
	BPlayEffects  DT_INT
	NAmount       DT_INT64
	ECurrencyType DT_ENUM
	EReason       DT_ENUM
}

func (t *CurrencyModifiedMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BPlayEffects, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.NAmount, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.ECurrencyType, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.EReason, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+40, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *CurrencyModifiedMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("BPlayEffects", &t.BPlayEffects)
	cb.Do("NAmount", &t.NAmount)
	cb.Do("ECurrencyType", &t.ECurrencyType)
	cb.Do("EReason", &t.EReason)
}

type Type_7ab1e0b4 struct {
	EListBoxStyle        DT_ENUM
	SnoHighlightAnim     DT_SNO
	SnoHoverAnim         DT_SNO
	Unk_62dd471          DT_INT
	Unk_8aa16e           DT_INT
	TMargins             UIMargins
	Unk_4ce228f          UIControlHandle
	BToggleSelection     DT_INT
	Unk_ccb7997          DT_CSTRING[*DT_BYTE]
	Unk_53e61d6          DT_ENUM
	FlScrollbarBlendTime DT_FLOAT
	EBlendEasing         DT_ENUM
	Unk_ba769f2          DT_FLOAT
	Unk_7111989          DT_ENUM
	Unk_784f6fe          DT_INT
	Unk_b91b721          DT_INT
	Unk_1e24eb1          DT_INT
	NPageIncrement       DT_INT
	Unk_f28083a          DT_INT
}

func (t *Type_7ab1e0b4) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.EListBoxStyle, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.SnoHighlightAnim, r, &Options{
		Flags: 1,
		Group: 7,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.SnoHoverAnim, r, &Options{
		Flags: 1,
		Group: 7,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.Unk_62dd471, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_8aa16e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.TMargins, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.Unk_4ce228f, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.BToggleSelection, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.Unk_ccb7997, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.Unk_53e61d6, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.FlScrollbarBlendTime, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.EBlendEasing, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.Unk_ba769f2, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.Unk_7111989, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.Unk_784f6fe, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.Unk_b91b721, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.Unk_1e24eb1, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.NPageIncrement, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+100, &t.Unk_f28083a, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+104, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_7ab1e0b4) Walk(cb WalkCallback) {
	cb.Do("EListBoxStyle", &t.EListBoxStyle)
	cb.Do("SnoHighlightAnim", &t.SnoHighlightAnim)
	cb.Do("SnoHoverAnim", &t.SnoHoverAnim)
	cb.Do("Unk_62dd471", &t.Unk_62dd471)
	cb.Do("Unk_8aa16e", &t.Unk_8aa16e)
	cb.Do("TMargins", &t.TMargins)
	cb.Do("Unk_4ce228f", &t.Unk_4ce228f)
	cb.Do("BToggleSelection", &t.BToggleSelection)
	cb.Do("Unk_ccb7997", &t.Unk_ccb7997)
	cb.Do("Unk_53e61d6", &t.Unk_53e61d6)
	cb.Do("FlScrollbarBlendTime", &t.FlScrollbarBlendTime)
	cb.Do("EBlendEasing", &t.EBlendEasing)
	cb.Do("Unk_ba769f2", &t.Unk_ba769f2)
	cb.Do("Unk_7111989", &t.Unk_7111989)
	cb.Do("Unk_784f6fe", &t.Unk_784f6fe)
	cb.Do("Unk_b91b721", &t.Unk_b91b721)
	cb.Do("Unk_1e24eb1", &t.Unk_1e24eb1)
	cb.Do("NPageIncrement", &t.NPageIncrement)
	cb.Do("Unk_f28083a", &t.Unk_f28083a)
}

type Type_7aba675a struct {
	SnoItem         DT_SNO
	BDrawSockets    DT_INT
	Unk_6ca9d52     DT_INT
	BDrawBackground DT_INT
	Unk_c67f281     DT_INT
	Unk_ce38d55     DT_INT
	Unk_a29eae9     DT_INT
}

func (t *Type_7aba675a) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoItem, r, &Options{
		Flags: 513,
		Group: 73,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.BDrawSockets, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.Unk_6ca9d52, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.BDrawBackground, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_c67f281, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.Unk_ce38d55, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_a29eae9, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+28, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_7aba675a) Walk(cb WalkCallback) {
	cb.Do("SnoItem", &t.SnoItem)
	cb.Do("BDrawSockets", &t.BDrawSockets)
	cb.Do("Unk_6ca9d52", &t.Unk_6ca9d52)
	cb.Do("BDrawBackground", &t.BDrawBackground)
	cb.Do("Unk_c67f281", &t.Unk_c67f281)
	cb.Do("Unk_ce38d55", &t.Unk_ce38d55)
	cb.Do("Unk_a29eae9", &t.Unk_a29eae9)
}

type Type_7ac3d650 struct {
	THeader      RequiredMessageHeader
	NCrafterType DT_INT
}

func (t *Type_7ac3d650) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.NCrafterType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+20, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_7ac3d650) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("NCrafterType", &t.NCrafterType)
}

type Type_7acab63b struct {
	Unk_f28e177            DT_SNO
	Unk_da03493            DT_SNO
	PathVignetteColor      Type_560ae4cf
	PathVignetteIntensity  Type_cbfdd2ea
	PathVignetteSmoothness Type_cbfdd2ea
	VecVignetteCenter      DT_VECTOR2D
	Unk_af3caab            DT_VECTOR2D
}

func (t *Type_7acab63b) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Unk_f28e177, r, &Options{
		Flags: 1,
		Group: 44,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.Unk_da03493, r, &Options{
		Flags: 1,
		Group: 44,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.PathVignetteColor, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.PathVignetteIntensity, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.PathVignetteSmoothness, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+176, &t.VecVignetteCenter, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+184, &t.Unk_af3caab, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+192, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_7acab63b) Walk(cb WalkCallback) {
	cb.Do("Unk_f28e177", &t.Unk_f28e177)
	cb.Do("Unk_da03493", &t.Unk_da03493)
	cb.Do("PathVignetteColor", &t.PathVignetteColor)
	cb.Do("PathVignetteIntensity", &t.PathVignetteIntensity)
	cb.Do("PathVignetteSmoothness", &t.PathVignetteSmoothness)
	cb.Do("VecVignetteCenter", &t.VecVignetteCenter)
	cb.Do("Unk_af3caab", &t.Unk_af3caab)
}

type OctreePrimitive struct {
	UUserData DT_INT64
}

func (t *OctreePrimitive) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.UUserData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *OctreePrimitive) Walk(cb WalkCallback) {
	cb.Do("UUserData", &t.UUserData)
}

type DebugProjectileCollisionCheck struct {
	FlRadius DT_OPTIONAL[*DT_FLOAT]
	BOverlap DT_OPTIONAL[*DT_INT]
	Wp1      DT_OPTIONAL[*DT_VECTOR3D]
	Wp2      DT_OPTIONAL[*DT_VECTOR3D]
}

func (t *DebugProjectileCollisionCheck) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.FlRadius, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.BOverlap, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Wp1, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.Wp2, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *DebugProjectileCollisionCheck) Walk(cb WalkCallback) {
	cb.Do("FlRadius", &t.FlRadius)
	cb.Do("BOverlap", &t.BOverlap)
	cb.Do("Wp1", &t.Wp1)
	cb.Do("Wp2", &t.Wp2)
}

type MarkerPortalDestGizmoData struct {
	DwEntranceName DT_STARTLOC_NAME
	Unk_7d1b2c3    DT_INT
	Unk_eb1dc3b    DT_SNO
	DwPortalType   DT_UINT
}

func (t *MarkerPortalDestGizmoData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.DwEntranceName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.Unk_7d1b2c3, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.Unk_eb1dc3b, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPortalType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *MarkerPortalDestGizmoData) Walk(cb WalkCallback) {
	cb.Do("DwEntranceName", &t.DwEntranceName)
	cb.Do("Unk_7d1b2c3", &t.Unk_7d1b2c3)
	cb.Do("Unk_eb1dc3b", &t.Unk_eb1dc3b)
	cb.Do("DwPortalType", &t.DwPortalType)
}

type ItemSourceWorldTierSubcondition struct {
	// Inherits Type_d3c3637f
	// Inherits Subcondition
	// Inherits PolymorphicBase
	DwType        DT_UINT
	BNegate       DT_INT
	EComparisonOp DT_ENUM
	DwPad         DT_UINT
	EWorldTier    DT_ENUM
}

func (t *ItemSourceWorldTierSubcondition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BNegate, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.EComparisonOp, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.EWorldTier, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+40, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ItemSourceWorldTierSubcondition) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("BNegate", &t.BNegate)
	cb.Do("EComparisonOp", &t.EComparisonOp)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("EWorldTier", &t.EWorldTier)
}

type ItemUpgradeCountSubcondition struct {
	// Inherits Type_d3c3637f
	// Inherits Subcondition
	// Inherits PolymorphicBase
	DwType        DT_UINT
	BNegate       DT_INT
	EComparisonOp DT_ENUM
	DwPad         DT_UINT
	NUpgradeCount DT_INT
}

func (t *ItemUpgradeCountSubcondition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BNegate, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.EComparisonOp, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.NUpgradeCount, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+40, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ItemUpgradeCountSubcondition) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("BNegate", &t.BNegate)
	cb.Do("EComparisonOp", &t.EComparisonOp)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("NUpgradeCount", &t.NUpgradeCount)
}

type NPCHairColors struct {
	DwID                 DT_UINT
	RgbaColors           DT_FIXEDARRAY[*DT_RGBACOLOR]
	FlHairColorInfluence DT_FLOAT
	SzLabel              DT_CSTRING[*DT_BYTE]
}

func (t *NPCHairColors) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.DwID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.RgbaColors, r, &Options{
		ArrayLength: 3,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.FlHairColorInfluence, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SzLabel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+40, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *NPCHairColors) Walk(cb WalkCallback) {
	cb.Do("DwID", &t.DwID)
	cb.Do("RgbaColors", &t.RgbaColors)
	cb.Do("FlHairColorInfluence", &t.FlHairColorInfluence)
	cb.Do("SzLabel", &t.SzLabel)
}

type OnResourceGainedBuffCallback struct {
	// Inherits BuffCallbackBase
	// Inherits PolymorphicBase
	DwType                DT_UINT
	DwPad                 DT_UINT
	SnoTriggerEffectGroup DT_SNO
	ArConditions          DT_POLYMORPHIC_VARIABLEARRAY[*DT_INT64]
}

func (t *OnResourceGainedBuffCallback) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoTriggerEffectGroup, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ArConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *OnResourceGainedBuffCallback) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("SnoTriggerEffectGroup", &t.SnoTriggerEffectGroup)
	cb.Do("ArConditions", &t.ArConditions)
}

type ScriptEventParamSpawnerParentMarkerHandle struct {
	// Inherits ScriptEventParamBase
	// Inherits PolymorphicBase
	DwType        DT_UINT
	EParamType    DT_ENUM
	DwPad         DT_UINT
	TMarkerHandle MarkerHandle
}

func (t *ScriptEventParamSpawnerParentMarkerHandle) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.EParamType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.TMarkerHandle, r, &Options{Flags: 513}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ScriptEventParamSpawnerParentMarkerHandle) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("EParamType", &t.EParamType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("TMarkerHandle", &t.TMarkerHandle)
}

type Type_7ba7c20f struct {
	// Inherits GlobalMarkerActorData
	// Inherits PolymorphicBase
	DwType       DT_UINT
	DwPad        DT_UINT
	SnoSubzone   DT_SNO
	SnoLevelArea DT_SNO
}

func (t *Type_7ba7c20f) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoSubzone, r, &Options{
		Flags: 513,
		Group: 80,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.SnoLevelArea, r, &Options{
		Flags: 513,
		Group: 22,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_7ba7c20f) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("SnoSubzone", &t.SnoSubzone)
	cb.Do("SnoLevelArea", &t.SnoLevelArea)
}

type FoleyMaterialTag struct {
	SzTag DT_UINT
}

func (t *FoleyMaterialTag) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SzTag, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+4, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *FoleyMaterialTag) Walk(cb WalkCallback) {
	cb.Do("SzTag", &t.SzTag)
}

type Type_7bed253b struct {
	Unk_a73baf8 DT_FIXEDARRAY[*Type_197fc9d9]
}

func (t *Type_7bed253b) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Unk_a73baf8, r, &Options{
		ArrayLength: 5,
		Flags:       1,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+20, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_7bed253b) Walk(cb WalkCallback) {
	cb.Do("Unk_a73baf8", &t.Unk_a73baf8)
}

type ScriptEventParamConversation struct {
	// Inherits ScriptEventParamBase
	// Inherits PolymorphicBase
	DwType          DT_UINT
	EParamType      DT_ENUM
	DwPad           DT_UINT
	SnoConversation DT_SNO
}

func (t *ScriptEventParamConversation) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.EParamType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SnoConversation, r, &Options{
		Flags: 513,
		Group: 12,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ScriptEventParamConversation) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("EParamType", &t.EParamType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("SnoConversation", &t.SnoConversation)
}

type SubObjectAppearance struct {
	DwFlags             DT_UINT
	SnoMaterial         DT_SNO
	SnoOverrideMaterial DT_SNO
	SnoCloth            DT_SNO
	Unk_3ca0753         DT_SNO
	Unk_1f70f66         DT_SNO
	SnoEffectGroup      DT_SNO
	Unk_3f71565         DT_VARIABLEARRAY[*AnimationClothOverride]
	ArVariantMaterials  DT_VARIABLEARRAY[*DT_SNO]
}

func (t *SubObjectAppearance) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.DwFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.SnoMaterial, r, &Options{
		Flags: 1,
		Group: 57,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.SnoOverrideMaterial, r, &Options{
		Flags: 1,
		Group: 57,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.SnoCloth, r, &Options{
		Flags: 1,
		Group: 11,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_3ca0753, r, &Options{
		Flags: 1,
		Group: 11,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.Unk_1f70f66, r, &Options{
		Flags: 1,
		Group: 11,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SnoEffectGroup, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.Unk_3f71565, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.ArVariantMaterials, r, &Options{Group: 57}); err != nil {
		return err
	}
	if _, err := r.Seek(p+64, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *SubObjectAppearance) Walk(cb WalkCallback) {
	cb.Do("DwFlags", &t.DwFlags)
	cb.Do("SnoMaterial", &t.SnoMaterial)
	cb.Do("SnoOverrideMaterial", &t.SnoOverrideMaterial)
	cb.Do("SnoCloth", &t.SnoCloth)
	cb.Do("Unk_3ca0753", &t.Unk_3ca0753)
	cb.Do("Unk_1f70f66", &t.Unk_1f70f66)
	cb.Do("SnoEffectGroup", &t.SnoEffectGroup)
	cb.Do("Unk_3f71565", &t.Unk_3f71565)
	cb.Do("ArVariantMaterials", &t.ArVariantMaterials)
}

type PowerConditionIsValidForWeaponExpertise struct {
	// Inherits PowerConditionBase
	// Inherits PolymorphicBase
	DwType      DT_UINT
	BInverse    DT_INT
	DwPad       DT_UINT
	SnoItemType DT_SNO
	Unk_882d30e DT_INT
}

func (t *PowerConditionIsValidForWeaponExpertise) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BInverse, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SnoItemType, r, &Options{
		Flags: 513,
		Group: 98,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.Unk_882d30e, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PowerConditionIsValidForWeaponExpertise) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("BInverse", &t.BInverse)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("SnoItemType", &t.SnoItemType)
	cb.Do("Unk_882d30e", &t.Unk_882d30e)
}

type OnBerserkRemovedCallback struct {
	// Inherits BuffCallbackBase
	// Inherits PolymorphicBase
	DwType                DT_UINT
	DwPad                 DT_UINT
	SnoTriggerEffectGroup DT_SNO
	ArConditions          DT_POLYMORPHIC_VARIABLEARRAY[*DT_INT64]
	Unk_224db6f           DT_ENUM
	DwRemovalReasons      DT_UINT
}

func (t *OnBerserkRemovedCallback) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoTriggerEffectGroup, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ArConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.Unk_224db6f, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.DwRemovalReasons, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if _, err := r.Seek(p+56, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *OnBerserkRemovedCallback) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("SnoTriggerEffectGroup", &t.SnoTriggerEffectGroup)
	cb.Do("ArConditions", &t.ArConditions)
	cb.Do("Unk_224db6f", &t.Unk_224db6f)
	cb.Do("DwRemovalReasons", &t.DwRemovalReasons)
}

type AnimSetOverrideEntry struct {
	Unk_8c0de6e        DT_GBID
	SnoAnimSetOverride DT_SNO
}

func (t *AnimSetOverrideEntry) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Unk_8c0de6e, r, &Options{
		Flags: 1,
		Group: 53,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.SnoAnimSetOverride, r, &Options{
		Flags: 1,
		Group: 8,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *AnimSetOverrideEntry) Walk(cb WalkCallback) {
	cb.Do("Unk_8c0de6e", &t.Unk_8c0de6e)
	cb.Do("SnoAnimSetOverride", &t.SnoAnimSetOverride)
}

type CollisionMesh struct {
	Unk_fb873e2       dmMeshDataMirror
	PtDominoVertices  DT_VARIABLEARRAY[*dmFloat4Mirror]
	PtDominoTriangles DT_VARIABLEARRAY[*dmMeshTriangleMirror]
	PtDominoNodes     DT_VARIABLEARRAY[*dmMeshNodeMirror]
	Unk_b2f6ec8       DT_INT
	UFlags            DT_UINT
	UMaterial         DT_UINT
	UGroupIndex       DT_WORD
	Unk_732e0b0       DT_VARIABLEARRAY[*DT_UINT]
}

func (t *CollisionMesh) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Unk_fb873e2, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.PtDominoVertices, r, &Options{Flags: 2097153}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.PtDominoTriangles, r, &Options{Flags: 2097153}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.PtDominoNodes, r, &Options{Flags: 2097153}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.Unk_b2f6ec8, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+100, &t.UFlags, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+104, &t.UMaterial, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+108, &t.UGroupIndex, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.Unk_732e0b0, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+128, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *CollisionMesh) Walk(cb WalkCallback) {
	cb.Do("Unk_fb873e2", &t.Unk_fb873e2)
	cb.Do("PtDominoVertices", &t.PtDominoVertices)
	cb.Do("PtDominoTriangles", &t.PtDominoTriangles)
	cb.Do("PtDominoNodes", &t.PtDominoNodes)
	cb.Do("Unk_b2f6ec8", &t.Unk_b2f6ec8)
	cb.Do("UFlags", &t.UFlags)
	cb.Do("UMaterial", &t.UMaterial)
	cb.Do("UGroupIndex", &t.UGroupIndex)
	cb.Do("Unk_732e0b0", &t.Unk_732e0b0)
}

type SkillTreeNode struct {
	DwID                        DT_UINT
	GbidReward                  DT_GBID
	NExclusiveGroupId           DT_INT
	VPosition                   DT_VECTOR2D
	BRootNode                   DT_INT
	DwTalentAbilitiesSpentPoint DT_UINT
	Unk_bb82ad1                 DT_INT
	ArConnections               DT_VARIABLEARRAY[*SkillTreeNodePersonalConnection]
	ArSkillTreeSkillRankMods    DT_VARIABLEARRAY[*SkillTreeSkillRankMod]
}

func (t *SkillTreeNode) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.DwID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.GbidReward, r, &Options{
		Flags: 1,
		Group: 43,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.NExclusiveGroupId, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.VPosition, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.BRootNode, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.DwTalentAbilitiesSpentPoint, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.Unk_bb82ad1, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.ArConnections, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.ArSkillTreeSkillRankMods, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+64, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *SkillTreeNode) Walk(cb WalkCallback) {
	cb.Do("DwID", &t.DwID)
	cb.Do("GbidReward", &t.GbidReward)
	cb.Do("NExclusiveGroupId", &t.NExclusiveGroupId)
	cb.Do("VPosition", &t.VPosition)
	cb.Do("BRootNode", &t.BRootNode)
	cb.Do("DwTalentAbilitiesSpentPoint", &t.DwTalentAbilitiesSpentPoint)
	cb.Do("Unk_bb82ad1", &t.Unk_bb82ad1)
	cb.Do("ArConnections", &t.ArConnections)
	cb.Do("ArSkillTreeSkillRankMods", &t.ArSkillTreeSkillRankMods)
}

type Type_7d803492 struct {
	THeader RequiredMessageHeader
	AnnKey  DT_ACD_NETWORK_NAME
	BLeader DT_INT
}

func (t *Type_7d803492) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.AnnKey, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.BLeader, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+28, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_7d803492) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("AnnKey", &t.AnnKey)
	cb.Do("BLeader", &t.BLeader)
}

type ScriptEventParamFloatRangeEntered struct {
	// Inherits ScriptEventParamBase
	// Inherits PolymorphicBase
	DwType     DT_UINT
	EParamType DT_ENUM
	DwPad      DT_UINT
	FlMinValue DT_FLOAT
	FlMaxValue DT_FLOAT
}

func (t *ScriptEventParamFloatRangeEntered) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.EParamType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.FlMinValue, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.FlMaxValue, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ScriptEventParamFloatRangeEntered) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("EParamType", &t.EParamType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("FlMinValue", &t.FlMinValue)
	cb.Do("FlMaxValue", &t.FlMaxValue)
}

type Type_7de8fcbd struct {
	TDropRange      DT_RANGE[*DT_INT]
	Unk_6a86924     DT_FLOAT
	FlExpectedValue DT_FLOAT
	Unk_6a86826     DT_FLOAT
	NWeights        DT_FIXEDARRAY[*DT_INT]
}

func (t *Type_7de8fcbd) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.TDropRange, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.Unk_6a86924, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.FlExpectedValue, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_6a86826, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.NWeights, r, &Options{
		ArrayLength: 4,
		Flags:       1,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+36, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_7de8fcbd) Walk(cb WalkCallback) {
	cb.Do("TDropRange", &t.TDropRange)
	cb.Do("Unk_6a86924", &t.Unk_6a86924)
	cb.Do("FlExpectedValue", &t.FlExpectedValue)
	cb.Do("Unk_6a86826", &t.Unk_6a86826)
	cb.Do("NWeights", &t.NWeights)
}

type ActorCombatData struct {
	Unk_f13a861            DT_SNO
	EWeaponHitsound        DT_ENUM
	ArHitReactionOverrides DT_VARIABLEARRAY[*HitReactionOverride]
	Unk_5909501            DT_FLOAT
	ArJitterJoints         DT_VARIABLEARRAY[*ActorJitterJoint]
	ArRotationJoints       DT_VARIABLEARRAY[*Type_3d4fd272]
}

func (t *ActorCombatData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Unk_f13a861, r, &Options{
		Flags: 1,
		Group: 79,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.EWeaponHitsound, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.ArHitReactionOverrides, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_5909501, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.ArJitterJoints, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.ArRotationJoints, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+64, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ActorCombatData) Walk(cb WalkCallback) {
	cb.Do("Unk_f13a861", &t.Unk_f13a861)
	cb.Do("EWeaponHitsound", &t.EWeaponHitsound)
	cb.Do("ArHitReactionOverrides", &t.ArHitReactionOverrides)
	cb.Do("Unk_5909501", &t.Unk_5909501)
	cb.Do("ArJitterJoints", &t.ArJitterJoints)
	cb.Do("ArRotationJoints", &t.ArRotationJoints)
}

type GameSyncedDebugData struct {
	Unk_180e380 DT_UINT
	Unk_11cfeb2 DT_UINT
	Unk_8c3326b DT_UINT
	Unk_31f2130 DT_CHARARRAY
	Unk_e1de6e4 DT_INT64
	Unk_35d179b DT_INT64
	Unk_eb81e70 DT_UINT
	NGiftsPoint DT_INT
	SzDebugMsg  DT_CHARARRAY
	DwFlags     DT_UINT
}

func (t *GameSyncedDebugData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Unk_180e380, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.Unk_11cfeb2, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.Unk_8c3326b, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.Unk_31f2130, r, &Options{
		ArrayLength: 100,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.Unk_e1de6e4, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.Unk_35d179b, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.Unk_eb81e70, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+132, &t.NGiftsPoint, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+136, &t.SzDebugMsg, r, &Options{
		ArrayLength: 256,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+392, &t.DwFlags, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+400, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *GameSyncedDebugData) Walk(cb WalkCallback) {
	cb.Do("Unk_180e380", &t.Unk_180e380)
	cb.Do("Unk_11cfeb2", &t.Unk_11cfeb2)
	cb.Do("Unk_8c3326b", &t.Unk_8c3326b)
	cb.Do("Unk_31f2130", &t.Unk_31f2130)
	cb.Do("Unk_e1de6e4", &t.Unk_e1de6e4)
	cb.Do("Unk_35d179b", &t.Unk_35d179b)
	cb.Do("Unk_eb81e70", &t.Unk_eb81e70)
	cb.Do("NGiftsPoint", &t.NGiftsPoint)
	cb.Do("SzDebugMsg", &t.SzDebugMsg)
	cb.Do("DwFlags", &t.DwFlags)
}

type Type_7e418ba8 struct {
	// Inherits PolymorphicBase
	DwType       DT_UINT
	Unk_2de4987  DT_UINT
	ArConditions DT_POLYMORPHIC_VARIABLEARRAY[*DT_INT64]
	BEnd         DT_INT
	DwPad        DT_UINT
}

func (t *Type_7e418ba8) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_2de4987, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ArConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.BEnd, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+56, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_7e418ba8) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("Unk_2de4987", &t.Unk_2de4987)
	cb.Do("ArConditions", &t.ArConditions)
	cb.Do("BEnd", &t.BEnd)
	cb.Do("DwPad", &t.DwPad)
}

type GameTestingActorDeathSamplingStartMessage struct {
	THeader          RequiredMessageHeader
	SnoActor         DT_SNO
	SnoDeathOverride DT_SNO
	UCount           DT_UINT
}

func (t *GameTestingActorDeathSamplingStartMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoActor, r, &Options{
		Flags: 1,
		Group: 1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.SnoDeathOverride, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.UCount, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+28, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *GameTestingActorDeathSamplingStartMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("SnoActor", &t.SnoActor)
	cb.Do("SnoDeathOverride", &t.SnoDeathOverride)
	cb.Do("UCount", &t.UCount)
}

type Type_7ec2173f struct {
	Unk_5c85ae2 DT_FLOAT
	Unk_6536471 DT_VARIABLEARRAY[*Type_3c65a2a2]
}

func (t *Type_7ec2173f) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Unk_5c85ae2, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.Unk_6536471, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_7ec2173f) Walk(cb WalkCallback) {
	cb.Do("Unk_5c85ae2", &t.Unk_5c85ae2)
	cb.Do("Unk_6536471", &t.Unk_6536471)
}

type WorldEvent struct {
	TMarkerHandle MarkerHandle
	SnoWorldState DT_SNO
	NValue        DT_INT
	SnoScene      DT_SNO
}

func (t *WorldEvent) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.TMarkerHandle, r, &Options{Flags: 513}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.SnoWorldState, r, &Options{
		Flags: 1,
		Group: 86,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.NValue, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoScene, r, &Options{
		Flags: 513,
		Group: 33,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+20, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *WorldEvent) Walk(cb WalkCallback) {
	cb.Do("TMarkerHandle", &t.TMarkerHandle)
	cb.Do("SnoWorldState", &t.SnoWorldState)
	cb.Do("NValue", &t.NValue)
	cb.Do("SnoScene", &t.SnoScene)
}

type DeathLookTemplate struct{}

func (t *DeathLookTemplate) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if _, err := r.Seek(p+1, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *DeathLookTemplate) Walk(cb WalkCallback) {}

type Type_7fb46e7a struct {
	ArNodes     DT_VARIABLEARRAY[*StoryboardPlayStoryboardNode]
	Unk_36cc429 DT_VARIABLEARRAY[*DT_INT]
}

func (t *Type_7fb46e7a) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.ArNodes, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_36cc429, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_7fb46e7a) Walk(cb WalkCallback) {
	cb.Do("ArNodes", &t.ArNodes)
	cb.Do("Unk_36cc429", &t.Unk_36cc429)
}

type HirelingInfo struct {
	EClass           DT_ENUM
	GbidName         DT_GBID
	FDead            DT_INT
	ArnPowerKeyParam DT_FIXEDARRAY[*DT_INT]
}

func (t *HirelingInfo) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.EClass, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.GbidName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.FDead, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.ArnPowerKeyParam, r, &Options{
		ArrayLength: 5,
		Flags:       1,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *HirelingInfo) Walk(cb WalkCallback) {
	cb.Do("EClass", &t.EClass)
	cb.Do("GbidName", &t.GbidName)
	cb.Do("FDead", &t.FDead)
	cb.Do("ArnPowerKeyParam", &t.ArnPowerKeyParam)
}

type Type_7fc234c1 struct {
	LocalTransform dmTransformMirror
	Scale          DT_VECTOR4D
	Radius1        DT_FLOAT
	Radius2        DT_FLOAT
	Height         DT_FLOAT
	Stiffness      DT_FLOAT
	BoneIndex      DT_WORD
	Padding        DT_FIXEDARRAY[*DT_WORD]
}

func (t *Type_7fc234c1) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.LocalTransform, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.Scale, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.Radius1, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.Radius2, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.Height, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+60, &t.Stiffness, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.BoneIndex, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+66, &t.Padding, r, &Options{ArrayLength: 7}); err != nil {
		return err
	}
	if _, err := r.Seek(p+80, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_7fc234c1) Walk(cb WalkCallback) {
	cb.Do("LocalTransform", &t.LocalTransform)
	cb.Do("Scale", &t.Scale)
	cb.Do("Radius1", &t.Radius1)
	cb.Do("Radius2", &t.Radius2)
	cb.Do("Height", &t.Height)
	cb.Do("Stiffness", &t.Stiffness)
	cb.Do("BoneIndex", &t.BoneIndex)
	cb.Do("Padding", &t.Padding)
}

type HiddenCacheGizmoData struct {
	// Inherits NamedGizmoData
	// Inherits ActorGizmoData
	// Inherits PolymorphicBase
	DwType                       DT_UINT
	DwPad                        DT_UINT
	FDisableNonFriendlyOperation DT_INT
	FWalkToCenter                DT_INT
	FGizmoStartsDisabled         DT_INT
	FUseStringListName           DT_INT
	FForceMinimapIcon            DT_INT
	FlOperationRadius            DT_FLOAT
	Unk_d0b1df5                  DT_FLOAT
	FlGizmoUseTime               DT_FLOAT
	SnoChannelingEffect          DT_SNO
	Unk_2767229                  DT_INT
	FGizmoShowProgressBar        DT_INT
	Unk_6d9ebe1                  DT_INT
	Unk_5456245                  DT_INT
	Unk_af5815a                  DT_INT
	SnoOnClickEffect             DT_SNO
	SnoPickedUpEffect            DT_SNO
	SnoDropOnGroundEffect        DT_SNO
	TConditionData               GizmoConditionData
	SnoPowerOperator             DT_SNO
	SnoPowerOperate              DT_SNO
	SnoPowerOperatorActive       DT_SNO
	SnoPowerOperateActive        DT_SNO
	Unk_359810e                  DT_INT
	NCooldown                    DT_UINT
	Unk_9c8478e                  DT_UINT
	Unk_d45ed2d                  DT_INT
	Unk_f6b20b7                  DT_INT
	Unk_54513b8                  DT_INT
	Unk_fd1f378                  DT_UINT
	Unk_487c14                   DT_UINT
	Unk_87f2609                  DT_UINT
	Unk_158eb4f                  DT_FLOAT
	Unk_ab58cd3                  DT_ENUM
	Unk_91a3966                  DT_UINT
	Unk_25312e5                  DT_UINT
	Unk_4be4371                  DT_INT
	SnoTreasureClass             DT_SNO
	NXPTier                      DT_INT
	Unk_3592260                  DT_INT
	GbidHiddenCache              DT_GBID
}

func (t *HiddenCacheGizmoData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.FDisableNonFriendlyOperation, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.FWalkToCenter, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.FGizmoStartsDisabled, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.FUseStringListName, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.FForceMinimapIcon, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.FlOperationRadius, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.Unk_d0b1df5, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.FlGizmoUseTime, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.SnoChannelingEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.Unk_2767229, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.FGizmoShowProgressBar, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+60, &t.Unk_6d9ebe1, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.Unk_5456245, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.Unk_af5815a, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.SnoOnClickEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.SnoPickedUpEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.SnoDropOnGroundEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.TConditionData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.SnoPowerOperator, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.SnoPowerOperate, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.SnoPowerOperatorActive, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+100, &t.SnoPowerOperateActive, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+104, &t.Unk_359810e, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+108, &t.NCooldown, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.Unk_9c8478e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+116, &t.Unk_d45ed2d, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.Unk_f6b20b7, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+124, &t.Unk_54513b8, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.Unk_fd1f378, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+132, &t.Unk_487c14, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+136, &t.Unk_87f2609, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+140, &t.Unk_158eb4f, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+144, &t.Unk_ab58cd3, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+148, &t.Unk_91a3966, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+152, &t.Unk_25312e5, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+156, &t.Unk_4be4371, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+160, &t.SnoTreasureClass, r, &Options{
		Flags: 1,
		Group: 52,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+164, &t.NXPTier, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+168, &t.Unk_3592260, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+172, &t.GbidHiddenCache, r, &Options{
		Flags: 1,
		Group: 28,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+176, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *HiddenCacheGizmoData) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("FDisableNonFriendlyOperation", &t.FDisableNonFriendlyOperation)
	cb.Do("FWalkToCenter", &t.FWalkToCenter)
	cb.Do("FGizmoStartsDisabled", &t.FGizmoStartsDisabled)
	cb.Do("FUseStringListName", &t.FUseStringListName)
	cb.Do("FForceMinimapIcon", &t.FForceMinimapIcon)
	cb.Do("FlOperationRadius", &t.FlOperationRadius)
	cb.Do("Unk_d0b1df5", &t.Unk_d0b1df5)
	cb.Do("FlGizmoUseTime", &t.FlGizmoUseTime)
	cb.Do("SnoChannelingEffect", &t.SnoChannelingEffect)
	cb.Do("Unk_2767229", &t.Unk_2767229)
	cb.Do("FGizmoShowProgressBar", &t.FGizmoShowProgressBar)
	cb.Do("Unk_6d9ebe1", &t.Unk_6d9ebe1)
	cb.Do("Unk_5456245", &t.Unk_5456245)
	cb.Do("Unk_af5815a", &t.Unk_af5815a)
	cb.Do("SnoOnClickEffect", &t.SnoOnClickEffect)
	cb.Do("SnoPickedUpEffect", &t.SnoPickedUpEffect)
	cb.Do("SnoDropOnGroundEffect", &t.SnoDropOnGroundEffect)
	cb.Do("TConditionData", &t.TConditionData)
	cb.Do("SnoPowerOperator", &t.SnoPowerOperator)
	cb.Do("SnoPowerOperate", &t.SnoPowerOperate)
	cb.Do("SnoPowerOperatorActive", &t.SnoPowerOperatorActive)
	cb.Do("SnoPowerOperateActive", &t.SnoPowerOperateActive)
	cb.Do("Unk_359810e", &t.Unk_359810e)
	cb.Do("NCooldown", &t.NCooldown)
	cb.Do("Unk_9c8478e", &t.Unk_9c8478e)
	cb.Do("Unk_d45ed2d", &t.Unk_d45ed2d)
	cb.Do("Unk_f6b20b7", &t.Unk_f6b20b7)
	cb.Do("Unk_54513b8", &t.Unk_54513b8)
	cb.Do("Unk_fd1f378", &t.Unk_fd1f378)
	cb.Do("Unk_487c14", &t.Unk_487c14)
	cb.Do("Unk_87f2609", &t.Unk_87f2609)
	cb.Do("Unk_158eb4f", &t.Unk_158eb4f)
	cb.Do("Unk_ab58cd3", &t.Unk_ab58cd3)
	cb.Do("Unk_91a3966", &t.Unk_91a3966)
	cb.Do("Unk_25312e5", &t.Unk_25312e5)
	cb.Do("Unk_4be4371", &t.Unk_4be4371)
	cb.Do("SnoTreasureClass", &t.SnoTreasureClass)
	cb.Do("NXPTier", &t.NXPTier)
	cb.Do("Unk_3592260", &t.Unk_3592260)
	cb.Do("GbidHiddenCache", &t.GbidHiddenCache)
}

type SurfaceWorldConstraints struct {
	// Inherits Type_7e418ba8
	// Inherits PolymorphicBase
	DwType       DT_UINT
	Unk_2de4987  DT_UINT
	ArConditions DT_POLYMORPHIC_VARIABLEARRAY[*DT_INT64]
	BEnd         DT_INT
	DwPad        DT_UINT
}

func (t *SurfaceWorldConstraints) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_2de4987, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ArConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.BEnd, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+56, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *SurfaceWorldConstraints) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("Unk_2de4987", &t.Unk_2de4987)
	cb.Do("ArConditions", &t.ArConditions)
	cb.Do("BEnd", &t.BEnd)
	cb.Do("DwPad", &t.DwPad)
}

type TriggerEventCameraStayOnSpline struct {
	// Inherits TriggerEventRangedDuration
	// Inherits TriggerEvent
	// Inherits PolymorphicBase
	DwType                 DT_UINT
	TConditions            TriggerConditions
	FGenerated             DT_INT
	Unk_6cba752            DT_INT
	DwParentActorID        DT_UINT
	TDuration              DT_FLOAT
	DwTriggerFlags         DT_UINT
	DwTriggerFlagsEx       DT_UINT
	TCleanup               TriggerCleanup
	Unk_49e9257            DT_INT
	Unk_5490979            DT_INT
	DwPad                  DT_UINT
	SzSplineName           DT_UINT
	Unk_30b49c2            DT_ENUM
	Unk_8781d26            DT_UINT
	Unk_9a31592            DT_UINT
	FlFirstPercent         DT_FLOAT
	FlLastPercent          DT_FLOAT
	FlFirstDistance        DT_FLOAT
	FlLastDistance         DT_FLOAT
	Unk_71c05df            DT_INT
	Unk_325b1ab            DT_INT
	EProximityType         DT_ENUM
	SzProximityLocatorName DT_UINT
	Unk_ed13c17            HardpointLink
	DwProximityObjectID    DT_UINT
	VecProximityOffset     DT_VECTOR3D
	Unk_8ff6495            DT_INT
	Unk_983a265            DT_INT
	FlNodeDistance         DT_FLOAT
	FlMaxMovementSpeed     DT_FLOAT
	Unk_802b7b             DT_INT
	Unk_e27112b            DT_SNO
	EOrientationMode       DT_ENUM
	Unk_daebe18            DT_ENUM
	Unk_6101673            DT_UINT
	Unk_8470ffc            HardpointLink
	Unk_46c8459            DT_UINT
	VecTargetOffset        DT_VECTOR3D
	EMicrophoneMode        DT_ENUM
	VecMicrophoneOffset    DT_VECTOR3D
	EBlendEasing           DT_ENUM
}

func (t *TriggerEventCameraStayOnSpline) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.FGenerated, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_6cba752, r, &Options{Flags: 16}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.DwParentActorID, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.TDuration, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.DwTriggerFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.DwTriggerFlagsEx, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.TCleanup, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+116, &t.Unk_49e9257, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.Unk_5490979, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+124, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.SzSplineName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+132, &t.Unk_30b49c2, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+136, &t.Unk_8781d26, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+140, &t.Unk_9a31592, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+144, &t.FlFirstPercent, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+148, &t.FlLastPercent, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+152, &t.FlFirstDistance, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+156, &t.FlLastDistance, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+160, &t.Unk_71c05df, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+164, &t.Unk_325b1ab, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+168, &t.EProximityType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+172, &t.SzProximityLocatorName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+176, &t.Unk_ed13c17, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+184, &t.DwProximityObjectID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+188, &t.VecProximityOffset, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+200, &t.Unk_8ff6495, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+204, &t.Unk_983a265, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+208, &t.FlNodeDistance, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+212, &t.FlMaxMovementSpeed, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+216, &t.Unk_802b7b, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+220, &t.Unk_e27112b, r, &Options{
		Flags: 1,
		Group: 26,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+224, &t.EOrientationMode, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+228, &t.Unk_daebe18, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+232, &t.Unk_6101673, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+236, &t.Unk_8470ffc, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+244, &t.Unk_46c8459, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+248, &t.VecTargetOffset, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+260, &t.EMicrophoneMode, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+264, &t.VecMicrophoneOffset, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+276, &t.EBlendEasing, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+280, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TriggerEventCameraStayOnSpline) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("TConditions", &t.TConditions)
	cb.Do("FGenerated", &t.FGenerated)
	cb.Do("Unk_6cba752", &t.Unk_6cba752)
	cb.Do("DwParentActorID", &t.DwParentActorID)
	cb.Do("TDuration", &t.TDuration)
	cb.Do("DwTriggerFlags", &t.DwTriggerFlags)
	cb.Do("DwTriggerFlagsEx", &t.DwTriggerFlagsEx)
	cb.Do("TCleanup", &t.TCleanup)
	cb.Do("Unk_49e9257", &t.Unk_49e9257)
	cb.Do("Unk_5490979", &t.Unk_5490979)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("SzSplineName", &t.SzSplineName)
	cb.Do("Unk_30b49c2", &t.Unk_30b49c2)
	cb.Do("Unk_8781d26", &t.Unk_8781d26)
	cb.Do("Unk_9a31592", &t.Unk_9a31592)
	cb.Do("FlFirstPercent", &t.FlFirstPercent)
	cb.Do("FlLastPercent", &t.FlLastPercent)
	cb.Do("FlFirstDistance", &t.FlFirstDistance)
	cb.Do("FlLastDistance", &t.FlLastDistance)
	cb.Do("Unk_71c05df", &t.Unk_71c05df)
	cb.Do("Unk_325b1ab", &t.Unk_325b1ab)
	cb.Do("EProximityType", &t.EProximityType)
	cb.Do("SzProximityLocatorName", &t.SzProximityLocatorName)
	cb.Do("Unk_ed13c17", &t.Unk_ed13c17)
	cb.Do("DwProximityObjectID", &t.DwProximityObjectID)
	cb.Do("VecProximityOffset", &t.VecProximityOffset)
	cb.Do("Unk_8ff6495", &t.Unk_8ff6495)
	cb.Do("Unk_983a265", &t.Unk_983a265)
	cb.Do("FlNodeDistance", &t.FlNodeDistance)
	cb.Do("FlMaxMovementSpeed", &t.FlMaxMovementSpeed)
	cb.Do("Unk_802b7b", &t.Unk_802b7b)
	cb.Do("Unk_e27112b", &t.Unk_e27112b)
	cb.Do("EOrientationMode", &t.EOrientationMode)
	cb.Do("Unk_daebe18", &t.Unk_daebe18)
	cb.Do("Unk_6101673", &t.Unk_6101673)
	cb.Do("Unk_8470ffc", &t.Unk_8470ffc)
	cb.Do("Unk_46c8459", &t.Unk_46c8459)
	cb.Do("VecTargetOffset", &t.VecTargetOffset)
	cb.Do("EMicrophoneMode", &t.EMicrophoneMode)
	cb.Do("VecMicrophoneOffset", &t.VecMicrophoneOffset)
	cb.Do("EBlendEasing", &t.EBlendEasing)
}

type ParticleDefinition struct {
	EType                             DT_ENUM
	DwFlags                           DT_UINT
	DwFlagsEx                         DT_UINT
	DwFlagsEx2                        DT_UINT
	TSystemDuration                   DT_FLOAT
	TOutroDuration                    DT_FLOAT
	TPrepumpDuration                  DT_FLOAT
	ERenderDistance                   DT_ENUM
	Unk_d59152e                       DT_ENUM
	TSystemDurationScalar             InterpolationScalar
	PathSystemScale                   DT_VARIABLEARRAY[*Type_cbfdd2ea]
	PathSystemCount                   DT_VARIABLEARRAY[*Type_cc354444]
	Unk_63560e2                       DT_VARIABLEARRAY[*Type_cc354444]
	PathSystemAlpha                   DT_VARIABLEARRAY[*Type_cbfdd2ea]
	PathSystemAlphaAux                DT_VARIABLEARRAY[*Type_cbfdd2ea]
	PathParticleDuration              DT_VARIABLEARRAY[*Type_cbfdd2ea]
	PathInitialScale                  DT_VARIABLEARRAY[*Type_cbfdd2ea]
	PathInitialSourceRelativeSpread   DT_VARIABLEARRAY[*Type_cbfdd2ea]
	PathInitialSourceRelativeVelocity DT_VARIABLEARRAY[*VectorPath]
	PathInitialWorldRelativeVelocity  DT_VARIABLEARRAY[*VectorPath]
	PathInitialAngularVelocity        DT_VARIABLEARRAY[*VectorPath]
	PathSystemSpawnRate               DT_VARIABLEARRAY[*Type_cbfdd2ea]
	PathSystemSpeedSpawnRate          DT_VARIABLEARRAY[*Type_cbfdd2ea]
	PathSystemSpeedDurationFactor     DT_VARIABLEARRAY[*Type_cbfdd2ea]
	Unk_e44919                        DT_VARIABLEARRAY[*Type_cbfdd2ea]
	PathNoiseFrequency                DT_VARIABLEARRAY[*Type_cbfdd2ea]
	PathNoiseSmoothness               DT_VARIABLEARRAY[*Type_cbfdd2ea]
	PathNoiseAmplitude                DT_VARIABLEARRAY[*Type_cbfdd2ea]
	PathNoiseAmplitudeRange           DT_VARIABLEARRAY[*VectorPath]
	PathCameraOffset                  DT_VARIABLEARRAY[*Type_cbfdd2ea]
	SnoMaterial                       DT_SNO
	SnoHoudini                        DT_SNO
	SnoPhysics                        DT_SNO
	Unk_172022                        DT_SNO
	FlNormalBias                      DT_FLOAT
	FlWindFactor                      DT_FLOAT
	FlExplosionFactor                 DT_FLOAT
	FlExplosionFriction               DT_FLOAT
	FlMass                            DT_FLOAT
	DwMaxSystems                      DT_UINT
	Unk_12ce589                       DT_FLOAT
	FlClutterZOffset                  DT_FLOAT
	SnoActor                          DT_SNO
	TLookLink                         LookLink
	DwShaderMapOverride               DT_UINT
	Unk_fabd80a                       bcQuat
	PtEmitter                         DT_POLYMORPHIC_VARIABLEARRAY[*EmitterDataBase]
	PathParticleColor                 DT_VARIABLEARRAY[*Type_560ae4cf]
	Unk_a748ce7                       DT_VARIABLEARRAY[*Type_cbfdd2ea]
	PathParticleAlpha                 DT_VARIABLEARRAY[*Type_cbfdd2ea]
	PathParticleAlphaAux              DT_VARIABLEARRAY[*Type_cbfdd2ea]
	Unk_ed6436f                       DT_VARIABLEARRAY[*Type_cbfdd2ea]
	Unk_68b6b45                       DT_VARIABLEARRAY[*Type_cbfdd2ea]
	PathParticleScale                 DT_VARIABLEARRAY[*Type_cbfdd2ea]
	Unk_b92bb9a                       DT_VARIABLEARRAY[*VectorPath]
	PathAngularPosition               DT_VARIABLEARRAY[*Type_cbfdd2ea]
	PathAngularVelocity               DT_VARIABLEARRAY[*Type_cbfdd2ea]
	PathOrientationVelocity           DT_VARIABLEARRAY[*Type_cbfdd2ea]
	Unk_2d865ba                       DT_VARIABLEARRAY[*Type_cbfdd2ea]
	PathOrientationPosition           DT_VARIABLEARRAY[*Type_cbfdd2ea]
	Unk_8c4fe0                        DT_VARIABLEARRAY[*Type_cbfdd2ea]
	PathOrientationAxis               DT_VARIABLEARRAY[*VectorPath]
	Unk_a68a7e0                       DT_VARIABLEARRAY[*VectorPath]
	Unk_a8c5217                       DT_VARIABLEARRAY[*Type_cbfdd2ea]
	PathMotionCylinderRadialPos       DT_VARIABLEARRAY[*Type_cbfdd2ea]
	PathMotionCylinderRadialVel       DT_VARIABLEARRAY[*Type_cbfdd2ea]
	PathMotionCylinderAngleVel        DT_VARIABLEARRAY[*Type_cbfdd2ea]
	PathMotionCylinderAxis            DT_VARIABLEARRAY[*VectorPath]
	PathMotionSphereRadialPos         DT_VARIABLEARRAY[*Type_cbfdd2ea]
	PathMotionSphereRadialVel         DT_VARIABLEARRAY[*Type_cbfdd2ea]
	PathMotionWorldPos                DT_VARIABLEARRAY[*VectorPath]
	PathMotionWorldVel                DT_VARIABLEARRAY[*VectorPath]
	PathMotionWorldAcc                DT_VARIABLEARRAY[*VectorPath]
	PathMotionRelativeCartesianPos    DT_VARIABLEARRAY[*VectorPath]
	PathMotionRelativeCartesianVel    DT_VARIABLEARRAY[*VectorPath]
	PathMotionRelativeCartesianAcc    DT_VARIABLEARRAY[*VectorPath]
	PathMotionAttractorVel            DT_VARIABLEARRAY[*Type_cbfdd2ea]
	PathMotionAttractorPos            DT_VARIABLEARRAY[*Type_cbfdd2ea]
	Unk_15ea201                       DT_VARIABLEARRAY[*Type_cbfdd2ea]
	Unk_afccc6                        DT_VARIABLEARRAY[*VectorPath]
	Unk_8dc0a2c                       DT_VARIABLEARRAY[*VectorPath]
	NFacing                           DT_ENUM
	EAlignment                        DT_ENUM
	WdBoundingRadius                  DT_FLOAT
	Unk_a79a409                       DT_FLOAT
	Unk_daaa964                       DT_FLOAT
	DwMinSize                         DT_UINT
	DwMaxSize                         DT_UINT
	Unk_3e0459a                       DT_FLOAT
	Unk_a0877a9                       DT_FLOAT
	Unk_63d7722                       DT_FLOAT
	SnoVectorField                    DT_SNO
	VecVectorFieldDim                 DT_VECTOR3D
	EVectorFieldAddressMode           DT_ENUM
	FlVectorFieldScrollSpeed          DT_FLOAT
	ArrFlowIdenticalVectorField       DT_VARIABLEARRAY[*Type_cbfdd2ea]
	Unk_cddc4fd                       DT_VARIABLEARRAY[*VectorPath]
	PathVectorFieldRotation           DT_VARIABLEARRAY[*VectorPath]
	Unk_da1d404                       DT_FLOAT
	Unk_5a7f188                       DT_FLOAT
}

func (t *ParticleDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.EType, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwFlags, r, &Options{Flags: 8912896}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.DwFlagsEx, r, &Options{Flags: 8912896}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwFlagsEx2, r, &Options{Flags: 8912896}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.TSystemDuration, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.TOutroDuration, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.TPrepumpDuration, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.ERenderDistance, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.Unk_d59152e, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.TSystemDurationScalar, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.PathSystemScale, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.PathSystemCount, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.Unk_63560e2, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.PathSystemAlpha, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+144, &t.PathSystemAlphaAux, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+160, &t.PathParticleDuration, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+176, &t.PathInitialScale, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+192, &t.PathInitialSourceRelativeSpread, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+208, &t.PathInitialSourceRelativeVelocity, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+224, &t.PathInitialWorldRelativeVelocity, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+240, &t.PathInitialAngularVelocity, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+256, &t.PathSystemSpawnRate, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+272, &t.PathSystemSpeedSpawnRate, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+288, &t.PathSystemSpeedDurationFactor, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+304, &t.Unk_e44919, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+320, &t.PathNoiseFrequency, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+336, &t.PathNoiseSmoothness, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+352, &t.PathNoiseAmplitude, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+368, &t.PathNoiseAmplitudeRange, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+384, &t.PathCameraOffset, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+400, &t.SnoMaterial, r, &Options{
		Flags: 8388608,
		Group: 57,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+404, &t.SnoHoudini, r, &Options{
		Flags: 8388608,
		Group: 101,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+408, &t.SnoPhysics, r, &Options{
		Flags: 8388608,
		Group: 28,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+412, &t.Unk_172022, r, &Options{
		Flags: 8388608,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+416, &t.FlNormalBias, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+420, &t.FlWindFactor, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+424, &t.FlExplosionFactor, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+428, &t.FlExplosionFriction, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+432, &t.FlMass, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+436, &t.DwMaxSystems, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+440, &t.Unk_12ce589, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+444, &t.FlClutterZOffset, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+448, &t.SnoActor, r, &Options{
		Flags: 8388608,
		Group: 1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+452, &t.TLookLink, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+456, &t.DwShaderMapOverride, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+460, &t.Unk_fabd80a, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+480, &t.PtEmitter, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+504, &t.PathParticleColor, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+520, &t.Unk_a748ce7, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+536, &t.PathParticleAlpha, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+552, &t.PathParticleAlphaAux, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+568, &t.Unk_ed6436f, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+584, &t.Unk_68b6b45, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+600, &t.PathParticleScale, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+616, &t.Unk_b92bb9a, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+632, &t.PathAngularPosition, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+648, &t.PathAngularVelocity, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+664, &t.PathOrientationVelocity, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+680, &t.Unk_2d865ba, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+696, &t.PathOrientationPosition, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+712, &t.Unk_8c4fe0, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+728, &t.PathOrientationAxis, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+744, &t.Unk_a68a7e0, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+760, &t.Unk_a8c5217, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+776, &t.PathMotionCylinderRadialPos, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+792, &t.PathMotionCylinderRadialVel, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+808, &t.PathMotionCylinderAngleVel, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+824, &t.PathMotionCylinderAxis, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+840, &t.PathMotionSphereRadialPos, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+856, &t.PathMotionSphereRadialVel, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+872, &t.PathMotionWorldPos, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+888, &t.PathMotionWorldVel, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+904, &t.PathMotionWorldAcc, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+920, &t.PathMotionRelativeCartesianPos, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+936, &t.PathMotionRelativeCartesianVel, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+952, &t.PathMotionRelativeCartesianAcc, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+968, &t.PathMotionAttractorVel, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+984, &t.PathMotionAttractorPos, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1000, &t.Unk_15ea201, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1016, &t.Unk_afccc6, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1032, &t.Unk_8dc0a2c, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1048, &t.NFacing, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1052, &t.EAlignment, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1056, &t.WdBoundingRadius, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1060, &t.Unk_a79a409, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1064, &t.Unk_daaa964, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1068, &t.DwMinSize, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1072, &t.DwMaxSize, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1076, &t.Unk_3e0459a, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1080, &t.Unk_a0877a9, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1084, &t.Unk_63d7722, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1088, &t.SnoVectorField, r, &Options{
		Flags: 8388608,
		Group: 88,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1092, &t.VecVectorFieldDim, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1104, &t.EVectorFieldAddressMode, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1108, &t.FlVectorFieldScrollSpeed, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1112, &t.ArrFlowIdenticalVectorField, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1128, &t.Unk_cddc4fd, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1144, &t.PathVectorFieldRotation, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1160, &t.Unk_da1d404, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1164, &t.Unk_5a7f188, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if _, err := r.Seek(p+1168, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ParticleDefinition) Walk(cb WalkCallback) {
	cb.Do("EType", &t.EType)
	cb.Do("DwFlags", &t.DwFlags)
	cb.Do("DwFlagsEx", &t.DwFlagsEx)
	cb.Do("DwFlagsEx2", &t.DwFlagsEx2)
	cb.Do("TSystemDuration", &t.TSystemDuration)
	cb.Do("TOutroDuration", &t.TOutroDuration)
	cb.Do("TPrepumpDuration", &t.TPrepumpDuration)
	cb.Do("ERenderDistance", &t.ERenderDistance)
	cb.Do("Unk_d59152e", &t.Unk_d59152e)
	cb.Do("TSystemDurationScalar", &t.TSystemDurationScalar)
	cb.Do("PathSystemScale", &t.PathSystemScale)
	cb.Do("PathSystemCount", &t.PathSystemCount)
	cb.Do("Unk_63560e2", &t.Unk_63560e2)
	cb.Do("PathSystemAlpha", &t.PathSystemAlpha)
	cb.Do("PathSystemAlphaAux", &t.PathSystemAlphaAux)
	cb.Do("PathParticleDuration", &t.PathParticleDuration)
	cb.Do("PathInitialScale", &t.PathInitialScale)
	cb.Do("PathInitialSourceRelativeSpread", &t.PathInitialSourceRelativeSpread)
	cb.Do("PathInitialSourceRelativeVelocity", &t.PathInitialSourceRelativeVelocity)
	cb.Do("PathInitialWorldRelativeVelocity", &t.PathInitialWorldRelativeVelocity)
	cb.Do("PathInitialAngularVelocity", &t.PathInitialAngularVelocity)
	cb.Do("PathSystemSpawnRate", &t.PathSystemSpawnRate)
	cb.Do("PathSystemSpeedSpawnRate", &t.PathSystemSpeedSpawnRate)
	cb.Do("PathSystemSpeedDurationFactor", &t.PathSystemSpeedDurationFactor)
	cb.Do("Unk_e44919", &t.Unk_e44919)
	cb.Do("PathNoiseFrequency", &t.PathNoiseFrequency)
	cb.Do("PathNoiseSmoothness", &t.PathNoiseSmoothness)
	cb.Do("PathNoiseAmplitude", &t.PathNoiseAmplitude)
	cb.Do("PathNoiseAmplitudeRange", &t.PathNoiseAmplitudeRange)
	cb.Do("PathCameraOffset", &t.PathCameraOffset)
	cb.Do("SnoMaterial", &t.SnoMaterial)
	cb.Do("SnoHoudini", &t.SnoHoudini)
	cb.Do("SnoPhysics", &t.SnoPhysics)
	cb.Do("Unk_172022", &t.Unk_172022)
	cb.Do("FlNormalBias", &t.FlNormalBias)
	cb.Do("FlWindFactor", &t.FlWindFactor)
	cb.Do("FlExplosionFactor", &t.FlExplosionFactor)
	cb.Do("FlExplosionFriction", &t.FlExplosionFriction)
	cb.Do("FlMass", &t.FlMass)
	cb.Do("DwMaxSystems", &t.DwMaxSystems)
	cb.Do("Unk_12ce589", &t.Unk_12ce589)
	cb.Do("FlClutterZOffset", &t.FlClutterZOffset)
	cb.Do("SnoActor", &t.SnoActor)
	cb.Do("TLookLink", &t.TLookLink)
	cb.Do("DwShaderMapOverride", &t.DwShaderMapOverride)
	cb.Do("Unk_fabd80a", &t.Unk_fabd80a)
	cb.Do("PtEmitter", &t.PtEmitter)
	cb.Do("PathParticleColor", &t.PathParticleColor)
	cb.Do("Unk_a748ce7", &t.Unk_a748ce7)
	cb.Do("PathParticleAlpha", &t.PathParticleAlpha)
	cb.Do("PathParticleAlphaAux", &t.PathParticleAlphaAux)
	cb.Do("Unk_ed6436f", &t.Unk_ed6436f)
	cb.Do("Unk_68b6b45", &t.Unk_68b6b45)
	cb.Do("PathParticleScale", &t.PathParticleScale)
	cb.Do("Unk_b92bb9a", &t.Unk_b92bb9a)
	cb.Do("PathAngularPosition", &t.PathAngularPosition)
	cb.Do("PathAngularVelocity", &t.PathAngularVelocity)
	cb.Do("PathOrientationVelocity", &t.PathOrientationVelocity)
	cb.Do("Unk_2d865ba", &t.Unk_2d865ba)
	cb.Do("PathOrientationPosition", &t.PathOrientationPosition)
	cb.Do("Unk_8c4fe0", &t.Unk_8c4fe0)
	cb.Do("PathOrientationAxis", &t.PathOrientationAxis)
	cb.Do("Unk_a68a7e0", &t.Unk_a68a7e0)
	cb.Do("Unk_a8c5217", &t.Unk_a8c5217)
	cb.Do("PathMotionCylinderRadialPos", &t.PathMotionCylinderRadialPos)
	cb.Do("PathMotionCylinderRadialVel", &t.PathMotionCylinderRadialVel)
	cb.Do("PathMotionCylinderAngleVel", &t.PathMotionCylinderAngleVel)
	cb.Do("PathMotionCylinderAxis", &t.PathMotionCylinderAxis)
	cb.Do("PathMotionSphereRadialPos", &t.PathMotionSphereRadialPos)
	cb.Do("PathMotionSphereRadialVel", &t.PathMotionSphereRadialVel)
	cb.Do("PathMotionWorldPos", &t.PathMotionWorldPos)
	cb.Do("PathMotionWorldVel", &t.PathMotionWorldVel)
	cb.Do("PathMotionWorldAcc", &t.PathMotionWorldAcc)
	cb.Do("PathMotionRelativeCartesianPos", &t.PathMotionRelativeCartesianPos)
	cb.Do("PathMotionRelativeCartesianVel", &t.PathMotionRelativeCartesianVel)
	cb.Do("PathMotionRelativeCartesianAcc", &t.PathMotionRelativeCartesianAcc)
	cb.Do("PathMotionAttractorVel", &t.PathMotionAttractorVel)
	cb.Do("PathMotionAttractorPos", &t.PathMotionAttractorPos)
	cb.Do("Unk_15ea201", &t.Unk_15ea201)
	cb.Do("Unk_afccc6", &t.Unk_afccc6)
	cb.Do("Unk_8dc0a2c", &t.Unk_8dc0a2c)
	cb.Do("NFacing", &t.NFacing)
	cb.Do("EAlignment", &t.EAlignment)
	cb.Do("WdBoundingRadius", &t.WdBoundingRadius)
	cb.Do("Unk_a79a409", &t.Unk_a79a409)
	cb.Do("Unk_daaa964", &t.Unk_daaa964)
	cb.Do("DwMinSize", &t.DwMinSize)
	cb.Do("DwMaxSize", &t.DwMaxSize)
	cb.Do("Unk_3e0459a", &t.Unk_3e0459a)
	cb.Do("Unk_a0877a9", &t.Unk_a0877a9)
	cb.Do("Unk_63d7722", &t.Unk_63d7722)
	cb.Do("SnoVectorField", &t.SnoVectorField)
	cb.Do("VecVectorFieldDim", &t.VecVectorFieldDim)
	cb.Do("EVectorFieldAddressMode", &t.EVectorFieldAddressMode)
	cb.Do("FlVectorFieldScrollSpeed", &t.FlVectorFieldScrollSpeed)
	cb.Do("ArrFlowIdenticalVectorField", &t.ArrFlowIdenticalVectorField)
	cb.Do("Unk_cddc4fd", &t.Unk_cddc4fd)
	cb.Do("PathVectorFieldRotation", &t.PathVectorFieldRotation)
	cb.Do("Unk_da1d404", &t.Unk_da1d404)
	cb.Do("Unk_5a7f188", &t.Unk_5a7f188)
}

type Type_7ff0fb14 struct {
	Normal    DT_VECTOR4D
	Area      DT_FLOAT
	I1        DT_WORD
	I2        DT_WORD
	I3        DT_WORD
	Breakable DT_WORD
	Padding   DT_FIXEDARRAY[*DT_WORD]
}

func (t *Type_7ff0fb14) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Normal, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Area, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.I1, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+22, &t.I2, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.I3, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+26, &t.Breakable, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.Padding, r, &Options{ArrayLength: 2}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_7ff0fb14) Walk(cb WalkCallback) {
	cb.Do("Normal", &t.Normal)
	cb.Do("Area", &t.Area)
	cb.Do("I1", &t.I1)
	cb.Do("I2", &t.I2)
	cb.Do("I3", &t.I3)
	cb.Do("Breakable", &t.Breakable)
	cb.Do("Padding", &t.Padding)
}

type TriggerEventSetWeaponVisibility struct {
	// Inherits TriggerEvent
	// Inherits PolymorphicBase
	DwType          DT_UINT
	DwPad           DT_UINT
	TConditions     TriggerConditions
	FGenerated      DT_INT
	Unk_6cba752     DT_INT
	DwParentActorID DT_UINT
	Unk_279aa5a     DT_INT
	DwActorID       DT_UINT
	BHideMainHand   DT_INT
	Unk_4bec6d2     DT_INT
	BHideSheathed   DT_INT
}

func (t *TriggerEventSetWeaponVisibility) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.FGenerated, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_6cba752, r, &Options{Flags: 16}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.DwParentActorID, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.Unk_279aa5a, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.DwActorID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.BHideMainHand, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.Unk_4bec6d2, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.BHideSheathed, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+104, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TriggerEventSetWeaponVisibility) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("TConditions", &t.TConditions)
	cb.Do("FGenerated", &t.FGenerated)
	cb.Do("Unk_6cba752", &t.Unk_6cba752)
	cb.Do("DwParentActorID", &t.DwParentActorID)
	cb.Do("Unk_279aa5a", &t.Unk_279aa5a)
	cb.Do("DwActorID", &t.DwActorID)
	cb.Do("BHideMainHand", &t.BHideMainHand)
	cb.Do("Unk_4bec6d2", &t.Unk_4bec6d2)
	cb.Do("BHideSheathed", &t.BHideSheathed)
}

type SonyConsoleAwardDefinition struct {
	// Inherits ConsoleAwardDefinition
	// Inherits PolymorphicBase
	DwType          DT_UINT
	UProfileAwardId DT_UINT
	DwPad           DT_UINT
}

func (t *SonyConsoleAwardDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.UProfileAwardId, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *SonyConsoleAwardDefinition) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("UProfileAwardId", &t.UProfileAwardId)
	cb.Do("DwPad", &t.DwPad)
}

type Type_803e808c struct {
	THeader     RequiredMessageHeader
	Unk_9104406 DT_FIXEDARRAY[*DT_SNO]
	Unk_6ef22d  DT_FIXEDARRAY[*DT_VECTOR3D]
	Unk_b8ec161 DT_FIXEDARRAY[*DT_INT]
	SnoWorld    DT_SNO
}

func (t *Type_803e808c) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_9104406, r, &Options{
		ArrayLength: 16,
		Flags:       9,
		Group:       31,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.Unk_6ef22d, r, &Options{
		ArrayLength: 16,
		Flags:       8,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+280, &t.Unk_b8ec161, r, &Options{
		ArrayLength: 16,
		Flags:       8,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+348, &t.SnoWorld, r, &Options{
		Flags: 1,
		Group: 48,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+352, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_803e808c) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("Unk_9104406", &t.Unk_9104406)
	cb.Do("Unk_6ef22d", &t.Unk_6ef22d)
	cb.Do("Unk_b8ec161", &t.Unk_b8ec161)
	cb.Do("SnoWorld", &t.SnoWorld)
}

type Type_80554fed struct {
	ArNodes     DT_VARIABLEARRAY[*Type_38be9c1]
	Unk_36cc429 DT_VARIABLEARRAY[*DT_INT]
}

func (t *Type_80554fed) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.ArNodes, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_36cc429, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_80554fed) Walk(cb WalkCallback) {
	cb.Do("ArNodes", &t.ArNodes)
	cb.Do("Unk_36cc429", &t.Unk_36cc429)
}

type AnimPreplayData struct {
	DwAnimPrePlayDataFlags  DT_UINT
	DwServerTimeAnimStarted DT_UINT
	DwSyncedSeed            DT_UINT
	FlPowerAnimSpeed        DT_OPTIONAL[*DT_FLOAT]
}

func (t *AnimPreplayData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.DwAnimPrePlayDataFlags, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.DwServerTimeAnimStarted, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwSyncedSeed, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.FlPowerAnimSpeed, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+20, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *AnimPreplayData) Walk(cb WalkCallback) {
	cb.Do("DwAnimPrePlayDataFlags", &t.DwAnimPrePlayDataFlags)
	cb.Do("DwServerTimeAnimStarted", &t.DwServerTimeAnimStarted)
	cb.Do("DwSyncedSeed", &t.DwSyncedSeed)
	cb.Do("FlPowerAnimSpeed", &t.FlPowerAnimSpeed)
}

type ConversationSpeakerSwitchNode struct {
	// Inherits ConversationScopeNode
	// Inherits ConversationTreeNode
	// Inherits PolymorphicBase
	DwType         DT_UINT
	DwPad          DT_UINT
	DwNodeID       DT_UINT
	DwNextNodeID   DT_UINT
	DwParentNodeID DT_UINT
	PtNextNode     DT_INT64
	DwFlags        DT_UINT
	SzComment      DT_CSTRING[*DT_BYTE]
	ArChildNodes   DT_POLYMORPHIC_VARIABLEARRAY[*DT_INT64]
	SnoCondition   DT_SNO
	Unk_d8bf9e4    DT_INT
}

func (t *ConversationSpeakerSwitchNode) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.DwNodeID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwNextNodeID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.DwParentNodeID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.PtNextNode, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.DwFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.SzComment, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.ArChildNodes, r, &Options{Flags: 262145}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.SnoCondition, r, &Options{
		Flags: 1,
		Group: 51,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.Unk_d8bf9e4, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+96, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ConversationSpeakerSwitchNode) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("DwNodeID", &t.DwNodeID)
	cb.Do("DwNextNodeID", &t.DwNextNodeID)
	cb.Do("DwParentNodeID", &t.DwParentNodeID)
	cb.Do("PtNextNode", &t.PtNextNode)
	cb.Do("DwFlags", &t.DwFlags)
	cb.Do("SzComment", &t.SzComment)
	cb.Do("ArChildNodes", &t.ArChildNodes)
	cb.Do("SnoCondition", &t.SnoCondition)
	cb.Do("Unk_d8bf9e4", &t.Unk_d8bf9e4)
}

type Hardpoint struct {
	TInfo                    HardpointInfo
	NBoneIndex               DT_INT
	BIgnoreParentOrientation DT_INT
	Transform                PRTransform
}

func (t *Hardpoint) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.TInfo, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.NBoneIndex, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.BIgnoreParentOrientation, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Transform, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+44, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Hardpoint) Walk(cb WalkCallback) {
	cb.Do("TInfo", &t.TInfo)
	cb.Do("NBoneIndex", &t.NBoneIndex)
	cb.Do("BIgnoreParentOrientation", &t.BIgnoreParentOrientation)
	cb.Do("Transform", &t.Transform)
}

type Type_80fa280c struct {
	ArNodes     DT_VARIABLEARRAY[*Type_6b03fc60]
	Unk_36cc429 DT_VARIABLEARRAY[*DT_INT]
}

func (t *Type_80fa280c) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.ArNodes, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_36cc429, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_80fa280c) Walk(cb WalkCallback) {
	cb.Do("ArNodes", &t.ArNodes)
	cb.Do("Unk_36cc429", &t.Unk_36cc429)
}

type Type_80fa3567 struct {
	BWrapSelection DT_INT
	Unk_a27d70b    DT_INT
	Unk_f110353    DT_INT
	Unk_72a545b    DT_INT
	Unk_3f72ed9    DT_INT
	Unk_707e4bc    DT_INT
	Unk_a321618    DT_CSTRING[*DT_BYTE]
	Unk_74f3f9     DT_CSTRING[*DT_BYTE]
}

func (t *Type_80fa3567) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.BWrapSelection, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.Unk_a27d70b, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.Unk_f110353, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.Unk_72a545b, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_3f72ed9, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.Unk_707e4bc, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_a321618, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.Unk_74f3f9, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+56, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_80fa3567) Walk(cb WalkCallback) {
	cb.Do("BWrapSelection", &t.BWrapSelection)
	cb.Do("Unk_a27d70b", &t.Unk_a27d70b)
	cb.Do("Unk_f110353", &t.Unk_f110353)
	cb.Do("Unk_72a545b", &t.Unk_72a545b)
	cb.Do("Unk_3f72ed9", &t.Unk_3f72ed9)
	cb.Do("Unk_707e4bc", &t.Unk_707e4bc)
	cb.Do("Unk_a321618", &t.Unk_a321618)
	cb.Do("Unk_74f3f9", &t.Unk_74f3f9)
}

type LineSeg2D struct {
	Wr       Ray2D
	WdLength DT_FLOAT
}

func (t *LineSeg2D) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Wr, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.WdLength, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+20, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *LineSeg2D) Walk(cb WalkCallback) {
	cb.Do("Wr", &t.Wr)
	cb.Do("WdLength", &t.WdLength)
}

type LineSeg3D struct {
	Wr       Ray3D
	WdLength DT_FLOAT
}

func (t *LineSeg3D) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Wr, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.WdLength, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+28, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *LineSeg3D) Walk(cb WalkCallback) {
	cb.Do("Wr", &t.Wr)
	cb.Do("WdLength", &t.WdLength)
}

type Matrix3x3 struct {
	_11 DT_FLOAT
	_12 DT_FLOAT
	_13 DT_FLOAT
	_21 DT_FLOAT
	_22 DT_FLOAT
	_23 DT_FLOAT
	_31 DT_FLOAT
	_32 DT_FLOAT
	_33 DT_FLOAT
}

func (t *Matrix3x3) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t._11, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t._12, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t._13, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t._21, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t._22, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t._23, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t._31, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t._32, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t._33, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+36, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Matrix3x3) Walk(cb WalkCallback) {
	cb.Do("_11", &t._11)
	cb.Do("_12", &t._12)
	cb.Do("_13", &t._13)
	cb.Do("_21", &t._21)
	cb.Do("_22", &t._22)
	cb.Do("_23", &t._23)
	cb.Do("_31", &t._31)
	cb.Do("_32", &t._32)
	cb.Do("_33", &t._33)
}

type Matrix4x4 struct {
	_11 DT_FLOAT
	_12 DT_FLOAT
	_13 DT_FLOAT
	_14 DT_FLOAT
	_21 DT_FLOAT
	_22 DT_FLOAT
	_23 DT_FLOAT
	_24 DT_FLOAT
	_31 DT_FLOAT
	_32 DT_FLOAT
	_33 DT_FLOAT
	_34 DT_FLOAT
	_41 DT_FLOAT
	_42 DT_FLOAT
	_43 DT_FLOAT
	_44 DT_FLOAT
}

func (t *Matrix4x4) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t._11, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t._12, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t._13, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t._14, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t._21, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t._22, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t._23, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t._24, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t._31, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t._32, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t._33, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t._34, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t._41, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t._42, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t._43, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+60, &t._44, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+64, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Matrix4x4) Walk(cb WalkCallback) {
	cb.Do("_11", &t._11)
	cb.Do("_12", &t._12)
	cb.Do("_13", &t._13)
	cb.Do("_14", &t._14)
	cb.Do("_21", &t._21)
	cb.Do("_22", &t._22)
	cb.Do("_23", &t._23)
	cb.Do("_24", &t._24)
	cb.Do("_31", &t._31)
	cb.Do("_32", &t._32)
	cb.Do("_33", &t._33)
	cb.Do("_34", &t._34)
	cb.Do("_41", &t._41)
	cb.Do("_42", &t._42)
	cb.Do("_43", &t._43)
	cb.Do("_44", &t._44)
}

type PeriodicBuffCallback struct {
	// Inherits BuffCallbackBase
	// Inherits PolymorphicBase
	DwType                DT_UINT
	DwPad                 DT_UINT
	SnoTriggerEffectGroup DT_SNO
	ArConditions          DT_POLYMORPHIC_VARIABLEARRAY[*DT_INT64]
	TInterval             DT_STRING_FORMULA
	TIntervalDelta        DT_STRING_FORMULA
	BTriggersImmediately  DT_INT
}

func (t *PeriodicBuffCallback) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoTriggerEffectGroup, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ArConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.TInterval, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.TIntervalDelta, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.BTriggersImmediately, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+120, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PeriodicBuffCallback) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("SnoTriggerEffectGroup", &t.SnoTriggerEffectGroup)
	cb.Do("ArConditions", &t.ArConditions)
	cb.Do("TInterval", &t.TInterval)
	cb.Do("TIntervalDelta", &t.TIntervalDelta)
	cb.Do("BTriggersImmediately", &t.BTriggersImmediately)
}

type Type_816e8b4c struct {
	TCapsule         CollisionCapsule
	NAppearanceIndex DT_INT
}

func (t *Type_816e8b4c) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.TCapsule, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.NAppearanceIndex, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+68, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_816e8b4c) Walk(cb WalkCallback) {
	cb.Do("TCapsule", &t.TCapsule)
	cb.Do("NAppearanceIndex", &t.NAppearanceIndex)
}

type RandomNumberGenerator struct {
	DwSeed  DT_UINT
	DwCarry DT_UINT
}

func (t *RandomNumberGenerator) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.DwSeed, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.DwCarry, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *RandomNumberGenerator) Walk(cb WalkCallback) {
	cb.Do("DwSeed", &t.DwSeed)
	cb.Do("DwCarry", &t.DwCarry)
}

type Type_81807f39 struct {
	// Inherits TriggerEventRangedDuration
	// Inherits TriggerEvent
	// Inherits PolymorphicBase
	DwType           DT_UINT
	TConditions      TriggerConditions
	FGenerated       DT_INT
	Unk_6cba752      DT_INT
	DwParentActorID  DT_UINT
	TDuration        DT_FLOAT
	DwTriggerFlags   DT_UINT
	DwTriggerFlagsEx DT_UINT
	TCleanup         TriggerCleanup
	Unk_49e9257      DT_INT
	Unk_5490979      DT_INT
	DwPad            DT_UINT
	Unk_7903775      DT_INT
	Unk_2c69731      DT_FLOAT
	AEndFOV          DT_FLOAT
	EBlendEasing     DT_ENUM
}

func (t *Type_81807f39) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.FGenerated, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_6cba752, r, &Options{Flags: 16}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.DwParentActorID, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.TDuration, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.DwTriggerFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.DwTriggerFlagsEx, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.TCleanup, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+116, &t.Unk_49e9257, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.Unk_5490979, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+124, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.Unk_7903775, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+132, &t.Unk_2c69731, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+136, &t.AEndFOV, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+140, &t.EBlendEasing, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+144, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_81807f39) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("TConditions", &t.TConditions)
	cb.Do("FGenerated", &t.FGenerated)
	cb.Do("Unk_6cba752", &t.Unk_6cba752)
	cb.Do("DwParentActorID", &t.DwParentActorID)
	cb.Do("TDuration", &t.TDuration)
	cb.Do("DwTriggerFlags", &t.DwTriggerFlags)
	cb.Do("DwTriggerFlagsEx", &t.DwTriggerFlagsEx)
	cb.Do("TCleanup", &t.TCleanup)
	cb.Do("Unk_49e9257", &t.Unk_49e9257)
	cb.Do("Unk_5490979", &t.Unk_5490979)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("Unk_7903775", &t.Unk_7903775)
	cb.Do("Unk_2c69731", &t.Unk_2c69731)
	cb.Do("AEndFOV", &t.AEndFOV)
	cb.Do("EBlendEasing", &t.EBlendEasing)
}

type ANNDataMessage struct {
	THeader RequiredMessageHeader
	Ann     DT_ACD_NETWORK_NAME
}

func (t *ANNDataMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Ann, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ANNDataMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("Ann", &t.Ann)
}

type RunTimeMaterialScalarValueEntry struct {
	TValue Type_a8e85f45
}

func (t *RunTimeMaterialScalarValueEntry) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.TValue, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+12, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *RunTimeMaterialScalarValueEntry) Walk(cb WalkCallback) {
	cb.Do("TValue", &t.TValue)
}

type CrowdControlEffects struct {
	SnoEffectGroup      DT_SNO
	DwShaderMapOverride DT_UINT
	SzLookSwitch        DT_UINT
}

func (t *CrowdControlEffects) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoEffectGroup, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.DwShaderMapOverride, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.SzLookSwitch, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+12, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *CrowdControlEffects) Walk(cb WalkCallback) {
	cb.Do("SnoEffectGroup", &t.SnoEffectGroup)
	cb.Do("DwShaderMapOverride", &t.DwShaderMapOverride)
	cb.Do("SzLookSwitch", &t.SzLookSwitch)
}

type Type_82008b02 struct {
	DwSeed  DT_UINT
	DwCarry DT_UINT
}

func (t *Type_82008b02) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.DwSeed, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.DwCarry, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_82008b02) Walk(cb WalkCallback) {
	cb.Do("DwSeed", &t.DwSeed)
	cb.Do("DwCarry", &t.DwCarry)
}

type ScriptEventParamPlayerAlly struct {
	// Inherits ScriptEventParamBase
	// Inherits PolymorphicBase
	DwType        DT_UINT
	EParamType    DT_ENUM
	DwPad         DT_UINT
	BIsPlayerAlly DT_INT
}

func (t *ScriptEventParamPlayerAlly) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.EParamType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.BIsPlayerAlly, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ScriptEventParamPlayerAlly) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("EParamType", &t.EParamType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("BIsPlayerAlly", &t.BIsPlayerAlly)
}

type Type_82280ff3 struct {
	SnoPower     DT_SNO
	DwBuffDataID DT_UINT
}

func (t *Type_82280ff3) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoPower, r, &Options{
		Flags: 513,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.DwBuffDataID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_82280ff3) Walk(cb WalkCallback) {
	cb.Do("SnoPower", &t.SnoPower)
	cb.Do("DwBuffDataID", &t.DwBuffDataID)
}

type Type_822e2895 struct {
	FIsFogged                    DT_INT
	PathFogColor                 Type_560ae4cf
	Unk_626bdd1                  Type_560ae4cf
	Unk_b6d6da5                  Type_cbfdd2ea
	PathFogIntensityBias         Type_cbfdd2ea
	PathFogStart                 Type_cbfdd2ea
	Unk_74cb27e                  Type_cbfdd2ea
	Unk_a788b48                  Type_cbfdd2ea
	PathFogExponent              Type_cbfdd2ea
	Unk_b2aba89                  Type_cbfdd2ea
	Unk_72030bc                  Type_cbfdd2ea
	Unk_7204f87                  Type_cbfdd2ea
	Unk_32d918a                  Type_cbfdd2ea
	Unk_f95c9b0                  Type_cbfdd2ea
	Unk_aef59b6                  Type_560ae4cf
	Unk_f5edab3                  Type_cbfdd2ea
	Unk_5014cdd                  Type_cbfdd2ea
	Unk_647fc8                   Type_cbfdd2ea
	Unk_a8a3bbf                  DT_INT
	PathGroundFogFogColor        Type_560ae4cf
	PathGroundFogHeight          Type_cbfdd2ea
	PathGroundFogDensityScale    Type_cbfdd2ea
	Unk_35f6be9                  Type_cbfdd2ea
	Unk_3db80f1                  Type_cbfdd2ea
	PathGroundFogAbsorptionCoeff Type_cbfdd2ea
	Unk_49c7577                  DT_FLOAT
	Unk_2ba647c                  DT_FLOAT
	Unk_babc18b                  Type_cbfdd2ea
	PathWind                     VectorPath
}

func (t *Type_822e2895) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.FIsFogged, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.PathFogColor, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.Unk_626bdd1, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.Unk_b6d6da5, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+176, &t.PathFogIntensityBias, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+232, &t.PathFogStart, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+288, &t.Unk_74cb27e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+344, &t.Unk_a788b48, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+400, &t.PathFogExponent, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+456, &t.Unk_b2aba89, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+512, &t.Unk_72030bc, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+568, &t.Unk_7204f87, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+624, &t.Unk_32d918a, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+680, &t.Unk_f95c9b0, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+736, &t.Unk_aef59b6, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+792, &t.Unk_f5edab3, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+848, &t.Unk_5014cdd, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+904, &t.Unk_647fc8, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+960, &t.Unk_a8a3bbf, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+968, &t.PathGroundFogFogColor, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1024, &t.PathGroundFogHeight, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1080, &t.PathGroundFogDensityScale, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1136, &t.Unk_35f6be9, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1192, &t.Unk_3db80f1, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1248, &t.PathGroundFogAbsorptionCoeff, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1304, &t.Unk_49c7577, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1308, &t.Unk_2ba647c, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1312, &t.Unk_babc18b, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1368, &t.PathWind, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+1424, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_822e2895) Walk(cb WalkCallback) {
	cb.Do("FIsFogged", &t.FIsFogged)
	cb.Do("PathFogColor", &t.PathFogColor)
	cb.Do("Unk_626bdd1", &t.Unk_626bdd1)
	cb.Do("Unk_b6d6da5", &t.Unk_b6d6da5)
	cb.Do("PathFogIntensityBias", &t.PathFogIntensityBias)
	cb.Do("PathFogStart", &t.PathFogStart)
	cb.Do("Unk_74cb27e", &t.Unk_74cb27e)
	cb.Do("Unk_a788b48", &t.Unk_a788b48)
	cb.Do("PathFogExponent", &t.PathFogExponent)
	cb.Do("Unk_b2aba89", &t.Unk_b2aba89)
	cb.Do("Unk_72030bc", &t.Unk_72030bc)
	cb.Do("Unk_7204f87", &t.Unk_7204f87)
	cb.Do("Unk_32d918a", &t.Unk_32d918a)
	cb.Do("Unk_f95c9b0", &t.Unk_f95c9b0)
	cb.Do("Unk_aef59b6", &t.Unk_aef59b6)
	cb.Do("Unk_f5edab3", &t.Unk_f5edab3)
	cb.Do("Unk_5014cdd", &t.Unk_5014cdd)
	cb.Do("Unk_647fc8", &t.Unk_647fc8)
	cb.Do("Unk_a8a3bbf", &t.Unk_a8a3bbf)
	cb.Do("PathGroundFogFogColor", &t.PathGroundFogFogColor)
	cb.Do("PathGroundFogHeight", &t.PathGroundFogHeight)
	cb.Do("PathGroundFogDensityScale", &t.PathGroundFogDensityScale)
	cb.Do("Unk_35f6be9", &t.Unk_35f6be9)
	cb.Do("Unk_3db80f1", &t.Unk_3db80f1)
	cb.Do("PathGroundFogAbsorptionCoeff", &t.PathGroundFogAbsorptionCoeff)
	cb.Do("Unk_49c7577", &t.Unk_49c7577)
	cb.Do("Unk_2ba647c", &t.Unk_2ba647c)
	cb.Do("Unk_babc18b", &t.Unk_babc18b)
	cb.Do("PathWind", &t.PathWind)
}

type BlizzconSubcondition struct {
	// Inherits Subcondition
	// Inherits PolymorphicBase
	DwType  DT_UINT
	BNegate DT_INT
	DwPad   DT_UINT
}

func (t *BlizzconSubcondition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BNegate, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *BlizzconSubcondition) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("BNegate", &t.BNegate)
	cb.Do("DwPad", &t.DwPad)
}

type ParticleLifeEvent struct {
	DwParticleIndex DT_WORD
	DwType          DT_WORD
	FlSystemTime    DT_FLOAT
}

func (t *ParticleLifeEvent) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.DwParticleIndex, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2, &t.DwType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.FlSystemTime, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ParticleLifeEvent) Walk(cb WalkCallback) {
	cb.Do("DwParticleIndex", &t.DwParticleIndex)
	cb.Do("DwType", &t.DwType)
	cb.Do("FlSystemTime", &t.FlSystemTime)
}

type Type_82ee66c1 struct {
	// Inherits PowerConditionBase
	// Inherits PolymorphicBase
	DwType   DT_UINT
	BInverse DT_INT
	DwPad    DT_UINT
	ESubject DT_ENUM
}

func (t *Type_82ee66c1) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BInverse, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ESubject, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_82ee66c1) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("BInverse", &t.BInverse)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("ESubject", &t.ESubject)
}

type QuestItemCountSubcondition struct {
	// Inherits Type_d3c3637f
	// Inherits Subcondition
	// Inherits PolymorphicBase
	DwType        DT_UINT
	BNegate       DT_INT
	EComparisonOp DT_ENUM
	DwPad         DT_UINT
	SnoItem       DT_SNO
	NItemCount    DT_INT
	Unk_f0998ad   DT_INT
}

func (t *QuestItemCountSubcondition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BNegate, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.EComparisonOp, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.SnoItem, r, &Options{
		Flags: 513,
		Group: 73,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.NItemCount, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.Unk_f0998ad, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *QuestItemCountSubcondition) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("BNegate", &t.BNegate)
	cb.Do("EComparisonOp", &t.EComparisonOp)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("SnoItem", &t.SnoItem)
	cb.Do("NItemCount", &t.NItemCount)
	cb.Do("Unk_f0998ad", &t.Unk_f0998ad)
}

type PowerConditionDamageHasFortified struct {
	// Inherits PowerConditionBase
	// Inherits PolymorphicBase
	DwType   DT_UINT
	BInverse DT_INT
	DwPad    DT_UINT
}

func (t *PowerConditionDamageHasFortified) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BInverse, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PowerConditionDamageHasFortified) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("BInverse", &t.BInverse)
	cb.Do("DwPad", &t.DwPad)
}

type Type_835c1731 struct {
	Coeff DT_FIXEDARRAY[*DT_VECTOR4D]
}

func (t *Type_835c1731) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Coeff, r, &Options{
		ArrayLength: 3,
		Flags:       1,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_835c1731) Walk(cb WalkCallback) {
	cb.Do("Coeff", &t.Coeff)
}

type Type_836c8dab struct {
	BRound      DT_INT
	Unk_a9f149e DT_INT
}

func (t *Type_836c8dab) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.BRound, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.Unk_a9f149e, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_836c8dab) Walk(cb WalkCallback) {
	cb.Do("BRound", &t.BRound)
	cb.Do("Unk_a9f149e", &t.Unk_a9f149e)
}

type InitiateGroupTransferMessage struct {
	THeader RequiredMessageHeader
}

func (t *InitiateGroupTransferMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *InitiateGroupTransferMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
}

type AppearanceDefinition struct {
	TStructure            Structure
	DwFlags               DT_UINT
	PtAppearanceLooks     DT_VARIABLEARRAY[*AppearanceLook]
	PtAppearanceMaterials DT_VARIABLEARRAY[*AppearanceMaterial]
	Unk_e79217            DT_SNO
	ArLookVariantMap      DT_VARIABLEARRAY[*LookVariantMap]
	DwLookVariant         DT_UINT
	TFoliageSettings      FoliageSettings
	PtSpeedTreeWind       DT_POLYMORPHIC_VARIABLEARRAY[*SpeedTreeWindBase]
	ArLayersVertexAO      DT_VARIABLEARRAY[*LayerVertexAO]
	Unk_9a6abe3           DT_FLOAT
	FlDeformationScale    DT_FLOAT
}

func (t *AppearanceDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.TStructure, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+152, &t.DwFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+160, &t.PtAppearanceLooks, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+176, &t.PtAppearanceMaterials, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+192, &t.Unk_e79217, r, &Options{
		Flags: 1,
		Group: 24,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+200, &t.ArLookVariantMap, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+216, &t.DwLookVariant, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+220, &t.TFoliageSettings, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+264, &t.PtSpeedTreeWind, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+288, &t.ArLayersVertexAO, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+304, &t.Unk_9a6abe3, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+308, &t.FlDeformationScale, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+312, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *AppearanceDefinition) Walk(cb WalkCallback) {
	cb.Do("TStructure", &t.TStructure)
	cb.Do("DwFlags", &t.DwFlags)
	cb.Do("PtAppearanceLooks", &t.PtAppearanceLooks)
	cb.Do("PtAppearanceMaterials", &t.PtAppearanceMaterials)
	cb.Do("Unk_e79217", &t.Unk_e79217)
	cb.Do("ArLookVariantMap", &t.ArLookVariantMap)
	cb.Do("DwLookVariant", &t.DwLookVariant)
	cb.Do("TFoliageSettings", &t.TFoliageSettings)
	cb.Do("PtSpeedTreeWind", &t.PtSpeedTreeWind)
	cb.Do("ArLayersVertexAO", &t.ArLayersVertexAO)
	cb.Do("Unk_9a6abe3", &t.Unk_9a6abe3)
	cb.Do("FlDeformationScale", &t.FlDeformationScale)
}

type WwiseExternalSource struct {
	DwSourceCookie DT_UINT
}

func (t *WwiseExternalSource) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.DwSourceCookie, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+4, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *WwiseExternalSource) Walk(cb WalkCallback) {
	cb.Do("DwSourceCookie", &t.DwSourceCookie)
}

type Type_841ba26f struct {
	PathRadius      Type_cbfdd2ea
	PathHeight      Type_cbfdd2ea
	PathBoxExtents  VectorPath
	EType           DT_ENUM
	SzSubObjectName DT_CHARARRAY
}

func (t *Type_841ba26f) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.PathRadius, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.PathHeight, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.PathBoxExtents, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+168, &t.EType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+172, &t.SzSubObjectName, r, &Options{
		ArrayLength: 128,
		Flags:       1,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+304, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_841ba26f) Walk(cb WalkCallback) {
	cb.Do("PathRadius", &t.PathRadius)
	cb.Do("PathHeight", &t.PathHeight)
	cb.Do("PathBoxExtents", &t.PathBoxExtents)
	cb.Do("EType", &t.EType)
	cb.Do("SzSubObjectName", &t.SzSubObjectName)
}

type TriggerEventChangeLookDuration struct {
	// Inherits TriggerEventRangedDuration
	// Inherits TriggerEvent
	// Inherits PolymorphicBase
	DwType           DT_UINT
	TConditions      TriggerConditions
	FGenerated       DT_INT
	Unk_6cba752      DT_INT
	DwParentActorID  DT_UINT
	TDuration        DT_FLOAT
	DwTriggerFlags   DT_UINT
	DwTriggerFlagsEx DT_UINT
	TCleanup         TriggerCleanup
	Unk_49e9257      DT_INT
	Unk_5490979      DT_INT
	DwPad            DT_UINT
	DwActorID        DT_UINT
	SnoAppearance    DT_SNO
	TLookLink        LookLink
	Unk_279aa5a      DT_INT
}

func (t *TriggerEventChangeLookDuration) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.FGenerated, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_6cba752, r, &Options{Flags: 16}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.DwParentActorID, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.TDuration, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.DwTriggerFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.DwTriggerFlagsEx, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.TCleanup, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+116, &t.Unk_49e9257, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.Unk_5490979, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+124, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.DwActorID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+132, &t.SnoAppearance, r, &Options{
		Flags: 513,
		Group: 9,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+136, &t.TLookLink, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+140, &t.Unk_279aa5a, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+144, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TriggerEventChangeLookDuration) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("TConditions", &t.TConditions)
	cb.Do("FGenerated", &t.FGenerated)
	cb.Do("Unk_6cba752", &t.Unk_6cba752)
	cb.Do("DwParentActorID", &t.DwParentActorID)
	cb.Do("TDuration", &t.TDuration)
	cb.Do("DwTriggerFlags", &t.DwTriggerFlags)
	cb.Do("DwTriggerFlagsEx", &t.DwTriggerFlagsEx)
	cb.Do("TCleanup", &t.TCleanup)
	cb.Do("Unk_49e9257", &t.Unk_49e9257)
	cb.Do("Unk_5490979", &t.Unk_5490979)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("DwActorID", &t.DwActorID)
	cb.Do("SnoAppearance", &t.SnoAppearance)
	cb.Do("TLookLink", &t.TLookLink)
	cb.Do("Unk_279aa5a", &t.Unk_279aa5a)
}

type LocalPlayerNetEvent struct {
	USig           DT_UINT
	EEvent         DT_ENUM
	UAccountId     DT_UINT
	UGameAccountId DT_UINT
}

func (t *LocalPlayerNetEvent) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.USig, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.EEvent, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.UAccountId, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.UGameAccountId, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *LocalPlayerNetEvent) Walk(cb WalkCallback) {
	cb.Do("USig", &t.USig)
	cb.Do("EEvent", &t.EEvent)
	cb.Do("UAccountId", &t.UAccountId)
	cb.Do("UGameAccountId", &t.UGameAccountId)
}

type DRLGTileDebugInfo struct {
	SnoScene                     DT_SNO
	IdSScene                     DT_SHARED_SERVER_DATA_ID
	VWorldPos                    DT_VECTOR3D
	TAABB                        AABB
	TDRLGCreationInfo            Type_95119e98
	SnoLevelArea                 DT_SNO
	SnoLevelAreaDungeonAlternate DT_SNO
	Unk_989f2d7                  DT_ENUM
	ArLabels                     DT_FIXEDARRAY[*DT_GBID]
	ArElevations                 DT_FIXEDARRAY[*DT_INT]
	NElevationsCount             DT_INT
}

func (t *DRLGTileDebugInfo) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoScene, r, &Options{
		Flags: 1,
		Group: 33,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.IdSScene, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.VWorldPos, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.TAABB, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.TDRLGCreationInfo, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.SnoLevelArea, r, &Options{
		Flags: 1,
		Group: 22,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.SnoLevelAreaDungeonAlternate, r, &Options{
		Flags: 1,
		Group: 22,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.Unk_989f2d7, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.ArLabels, r, &Options{
		ArrayLength: 4,
		Flags:       9,
		Group:       4,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+104, &t.ArElevations, r, &Options{
		ArrayLength: 2,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.NElevationsCount, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+116, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *DRLGTileDebugInfo) Walk(cb WalkCallback) {
	cb.Do("SnoScene", &t.SnoScene)
	cb.Do("IdSScene", &t.IdSScene)
	cb.Do("VWorldPos", &t.VWorldPos)
	cb.Do("TAABB", &t.TAABB)
	cb.Do("TDRLGCreationInfo", &t.TDRLGCreationInfo)
	cb.Do("SnoLevelArea", &t.SnoLevelArea)
	cb.Do("SnoLevelAreaDungeonAlternate", &t.SnoLevelAreaDungeonAlternate)
	cb.Do("Unk_989f2d7", &t.Unk_989f2d7)
	cb.Do("ArLabels", &t.ArLabels)
	cb.Do("ArElevations", &t.ArElevations)
	cb.Do("NElevationsCount", &t.NElevationsCount)
}

type ConvexHull struct {
	NVertexCount   DT_INT
	PtVertices     DT_VARIABLEARRAY[*DT_VECTOR3D]
	NTriangleCount DT_INT
	PtTriangles    DT_VARIABLEARRAY[*IndexedTriangle]
	NPlaneCount    DT_INT
	PtPlanes       DT_VARIABLEARRAY[*Plane]
	MInertiaTensor Matrix3x3
	WvCenterOfMass DT_VECTOR3D
	FlArea         DT_FLOAT
	FlVolume       DT_FLOAT
}

func (t *ConvexHull) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.NVertexCount, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.PtVertices, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.NTriangleCount, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.PtTriangles, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.NPlaneCount, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.PtPlanes, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.MInertiaTensor, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+108, &t.WvCenterOfMass, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.FlArea, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+124, &t.FlVolume, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+128, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ConvexHull) Walk(cb WalkCallback) {
	cb.Do("NVertexCount", &t.NVertexCount)
	cb.Do("PtVertices", &t.PtVertices)
	cb.Do("NTriangleCount", &t.NTriangleCount)
	cb.Do("PtTriangles", &t.PtTriangles)
	cb.Do("NPlaneCount", &t.NPlaneCount)
	cb.Do("PtPlanes", &t.PtPlanes)
	cb.Do("MInertiaTensor", &t.MInertiaTensor)
	cb.Do("WvCenterOfMass", &t.WvCenterOfMass)
	cb.Do("FlArea", &t.FlArea)
	cb.Do("FlVolume", &t.FlVolume)
}

type ActorWeaponData struct {
	EWeaponHitsound  DT_ENUM
	SnoExplosionSno  DT_SNO
	SnoProjectileSno DT_SNO
	Unk_9c45777      DT_SNO
}

func (t *ActorWeaponData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.EWeaponHitsound, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.SnoExplosionSno, r, &Options{
		Flags: 1,
		Group: 1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.SnoProjectileSno, r, &Options{
		Flags: 1,
		Group: 1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.Unk_9c45777, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ActorWeaponData) Walk(cb WalkCallback) {
	cb.Do("EWeaponHitsound", &t.EWeaponHitsound)
	cb.Do("SnoExplosionSno", &t.SnoExplosionSno)
	cb.Do("SnoProjectileSno", &t.SnoProjectileSno)
	cb.Do("Unk_9c45777", &t.Unk_9c45777)
}

type ConditionalMaterialOverride struct {
	SnoCondition                   DT_SNO
	ArLookVariantMaterialOverrides DT_VARIABLEARRAY[*LookVariantMaterialOverride]
}

func (t *ConditionalMaterialOverride) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoCondition, r, &Options{
		Flags: 513,
		Group: 51,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.ArLookVariantMaterialOverrides, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ConditionalMaterialOverride) Walk(cb WalkCallback) {
	cb.Do("SnoCondition", &t.SnoCondition)
	cb.Do("ArLookVariantMaterialOverrides", &t.ArLookVariantMaterialOverrides)
}

type BasicGizmoData struct {
	// Inherits ActorGizmoData
	// Inherits PolymorphicBase
	DwType                       DT_UINT
	DwPad                        DT_UINT
	FDisableNonFriendlyOperation DT_INT
	FWalkToCenter                DT_INT
	FGizmoStartsDisabled         DT_INT
	FUseStringListName           DT_INT
	FForceMinimapIcon            DT_INT
	FlOperationRadius            DT_FLOAT
	Unk_d0b1df5                  DT_FLOAT
	FlGizmoUseTime               DT_FLOAT
	SnoChannelingEffect          DT_SNO
	Unk_2767229                  DT_INT
	FGizmoShowProgressBar        DT_INT
	Unk_6d9ebe1                  DT_INT
	Unk_5456245                  DT_INT
	Unk_af5815a                  DT_INT
	SnoOnClickEffect             DT_SNO
	SnoPickedUpEffect            DT_SNO
	SnoDropOnGroundEffect        DT_SNO
	TConditionData               GizmoConditionData
	SnoPowerOperator             DT_SNO
	SnoPowerOperate              DT_SNO
	SnoPowerOperatorActive       DT_SNO
	SnoPowerOperateActive        DT_SNO
	Unk_359810e                  DT_INT
	NCooldown                    DT_UINT
	Unk_9c8478e                  DT_UINT
	Unk_d45ed2d                  DT_INT
	Unk_f6b20b7                  DT_INT
	Unk_54513b8                  DT_INT
	Unk_fd1f378                  DT_UINT
	Unk_487c14                   DT_UINT
	Unk_87f2609                  DT_UINT
	Unk_158eb4f                  DT_FLOAT
	Unk_ab58cd3                  DT_ENUM
	Unk_91a3966                  DT_UINT
	Unk_25312e5                  DT_UINT
	Unk_4be4371                  DT_INT
}

func (t *BasicGizmoData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.FDisableNonFriendlyOperation, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.FWalkToCenter, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.FGizmoStartsDisabled, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.FUseStringListName, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.FForceMinimapIcon, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.FlOperationRadius, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.Unk_d0b1df5, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.FlGizmoUseTime, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.SnoChannelingEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.Unk_2767229, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.FGizmoShowProgressBar, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+60, &t.Unk_6d9ebe1, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.Unk_5456245, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.Unk_af5815a, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.SnoOnClickEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.SnoPickedUpEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.SnoDropOnGroundEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.TConditionData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.SnoPowerOperator, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.SnoPowerOperate, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.SnoPowerOperatorActive, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+100, &t.SnoPowerOperateActive, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+104, &t.Unk_359810e, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+108, &t.NCooldown, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.Unk_9c8478e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+116, &t.Unk_d45ed2d, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.Unk_f6b20b7, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+124, &t.Unk_54513b8, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.Unk_fd1f378, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+132, &t.Unk_487c14, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+136, &t.Unk_87f2609, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+140, &t.Unk_158eb4f, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+144, &t.Unk_ab58cd3, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+148, &t.Unk_91a3966, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+152, &t.Unk_25312e5, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+156, &t.Unk_4be4371, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+160, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *BasicGizmoData) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("FDisableNonFriendlyOperation", &t.FDisableNonFriendlyOperation)
	cb.Do("FWalkToCenter", &t.FWalkToCenter)
	cb.Do("FGizmoStartsDisabled", &t.FGizmoStartsDisabled)
	cb.Do("FUseStringListName", &t.FUseStringListName)
	cb.Do("FForceMinimapIcon", &t.FForceMinimapIcon)
	cb.Do("FlOperationRadius", &t.FlOperationRadius)
	cb.Do("Unk_d0b1df5", &t.Unk_d0b1df5)
	cb.Do("FlGizmoUseTime", &t.FlGizmoUseTime)
	cb.Do("SnoChannelingEffect", &t.SnoChannelingEffect)
	cb.Do("Unk_2767229", &t.Unk_2767229)
	cb.Do("FGizmoShowProgressBar", &t.FGizmoShowProgressBar)
	cb.Do("Unk_6d9ebe1", &t.Unk_6d9ebe1)
	cb.Do("Unk_5456245", &t.Unk_5456245)
	cb.Do("Unk_af5815a", &t.Unk_af5815a)
	cb.Do("SnoOnClickEffect", &t.SnoOnClickEffect)
	cb.Do("SnoPickedUpEffect", &t.SnoPickedUpEffect)
	cb.Do("SnoDropOnGroundEffect", &t.SnoDropOnGroundEffect)
	cb.Do("TConditionData", &t.TConditionData)
	cb.Do("SnoPowerOperator", &t.SnoPowerOperator)
	cb.Do("SnoPowerOperate", &t.SnoPowerOperate)
	cb.Do("SnoPowerOperatorActive", &t.SnoPowerOperatorActive)
	cb.Do("SnoPowerOperateActive", &t.SnoPowerOperateActive)
	cb.Do("Unk_359810e", &t.Unk_359810e)
	cb.Do("NCooldown", &t.NCooldown)
	cb.Do("Unk_9c8478e", &t.Unk_9c8478e)
	cb.Do("Unk_d45ed2d", &t.Unk_d45ed2d)
	cb.Do("Unk_f6b20b7", &t.Unk_f6b20b7)
	cb.Do("Unk_54513b8", &t.Unk_54513b8)
	cb.Do("Unk_fd1f378", &t.Unk_fd1f378)
	cb.Do("Unk_487c14", &t.Unk_487c14)
	cb.Do("Unk_87f2609", &t.Unk_87f2609)
	cb.Do("Unk_158eb4f", &t.Unk_158eb4f)
	cb.Do("Unk_ab58cd3", &t.Unk_ab58cd3)
	cb.Do("Unk_91a3966", &t.Unk_91a3966)
	cb.Do("Unk_25312e5", &t.Unk_25312e5)
	cb.Do("Unk_4be4371", &t.Unk_4be4371)
}

type LabelGBID struct {
	THeader GBIDHeader
	NIndex  DT_INT
}

func (t *LabelGBID) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+260, &t.NIndex, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+264, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *LabelGBID) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("NIndex", &t.NIndex)
}

type FoleyMaterialTagInfo struct {
	SzTag                DT_UINT
	SnoDefaultSoundTable DT_SNO
}

func (t *FoleyMaterialTagInfo) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SzTag, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.SnoDefaultSoundTable, r, &Options{
		Flags: 1,
		Group: 79,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *FoleyMaterialTagInfo) Walk(cb WalkCallback) {
	cb.Do("SzTag", &t.SzTag)
	cb.Do("SnoDefaultSoundTable", &t.SnoDefaultSoundTable)
}

type LabelRule struct {
	SzRuleName   DT_CHARARRAY
	NNumToChoose DT_INT
	ArEntries    DT_VARIABLEARRAY[*LabelEntry]
}

func (t *LabelRule) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SzRuleName, r, &Options{
		ArrayLength: 128,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.NNumToChoose, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+136, &t.ArEntries, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+152, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *LabelRule) Walk(cb WalkCallback) {
	cb.Do("SzRuleName", &t.SzRuleName)
	cb.Do("NNumToChoose", &t.NNumToChoose)
	cb.Do("ArEntries", &t.ArEntries)
}

type PowerConditionIsInCombat struct {
	// Inherits PowerConditionBase
	// Inherits PolymorphicBase
	DwType   DT_UINT
	BInverse DT_INT
	DwPad    DT_UINT
	ESubject DT_ENUM
}

func (t *PowerConditionIsInCombat) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BInverse, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ESubject, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PowerConditionIsInCombat) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("BInverse", &t.BInverse)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("ESubject", &t.ESubject)
}

type InventoryRequestQuickMoveMessage struct {
	THeader   RequiredMessageHeader
	AnnItem   DT_ACD_NETWORK_NAME
	AnnOwner  DT_ACD_NETWORK_NAME
	ESlot     DT_ENUM
	NSlotMinY DT_INT
	NSlotMaxY DT_INT
}

func (t *InventoryRequestQuickMoveMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.AnnItem, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.AnnOwner, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.ESlot, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.NSlotMinY, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.NSlotMaxY, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+44, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *InventoryRequestQuickMoveMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("AnnItem", &t.AnnItem)
	cb.Do("AnnOwner", &t.AnnOwner)
	cb.Do("ESlot", &t.ESlot)
	cb.Do("NSlotMinY", &t.NSlotMinY)
	cb.Do("NSlotMaxY", &t.NSlotMaxY)
}

type Type_857c89cd struct {
	// Inherits TriggerEvent
	// Inherits PolymorphicBase
	DwType          DT_UINT
	DwPad           DT_UINT
	TConditions     TriggerConditions
	FGenerated      DT_INT
	Unk_6cba752     DT_INT
	DwParentActorID DT_UINT
	BHide           DT_INT
}

func (t *Type_857c89cd) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.FGenerated, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_6cba752, r, &Options{Flags: 16}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.DwParentActorID, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.BHide, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+88, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_857c89cd) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("TConditions", &t.TConditions)
	cb.Do("FGenerated", &t.FGenerated)
	cb.Do("Unk_6cba752", &t.Unk_6cba752)
	cb.Do("DwParentActorID", &t.DwParentActorID)
	cb.Do("BHide", &t.BHide)
}

type WwiseInitSoundBank struct {
	// Inherits WwiseSoundBankContentBase
	// Inherits PolymorphicBase
	DwType           DT_UINT
	DwPad            DT_UINT
	PtInitBank       DT_VARIABLEARRAY[*DT_BYTE]
	PtGameParameters DT_VARIABLEARRAY[*WwiseGameParameter]
	PtStateValues    DT_VARIABLEARRAY[*WwiseSwitchValue]
	PtAudioBusses    DT_VARIABLEARRAY[*WwiseAudioBus]
	Unk_b0f69e7      DT_VARIABLEARRAY[*Type_e1291b50]
}

func (t *WwiseInitSoundBank) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.PtInitBank, r, &Options{Flags: 2097152}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.PtGameParameters, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.PtStateValues, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.PtAudioBusses, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.Unk_b0f69e7, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+96, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *WwiseInitSoundBank) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("PtInitBank", &t.PtInitBank)
	cb.Do("PtGameParameters", &t.PtGameParameters)
	cb.Do("PtStateValues", &t.PtStateValues)
	cb.Do("PtAudioBusses", &t.PtAudioBusses)
	cb.Do("Unk_b0f69e7", &t.Unk_b0f69e7)
}

type WardrobeGizmoData struct {
	// Inherits NamedGizmoData
	// Inherits ActorGizmoData
	// Inherits PolymorphicBase
	DwType                       DT_UINT
	DwPad                        DT_UINT
	FDisableNonFriendlyOperation DT_INT
	FWalkToCenter                DT_INT
	FGizmoStartsDisabled         DT_INT
	FUseStringListName           DT_INT
	FForceMinimapIcon            DT_INT
	FlOperationRadius            DT_FLOAT
	Unk_d0b1df5                  DT_FLOAT
	FlGizmoUseTime               DT_FLOAT
	SnoChannelingEffect          DT_SNO
	Unk_2767229                  DT_INT
	FGizmoShowProgressBar        DT_INT
	Unk_6d9ebe1                  DT_INT
	Unk_5456245                  DT_INT
	Unk_af5815a                  DT_INT
	SnoOnClickEffect             DT_SNO
	SnoPickedUpEffect            DT_SNO
	SnoDropOnGroundEffect        DT_SNO
	TConditionData               GizmoConditionData
	SnoPowerOperator             DT_SNO
	SnoPowerOperate              DT_SNO
	SnoPowerOperatorActive       DT_SNO
	SnoPowerOperateActive        DT_SNO
	Unk_359810e                  DT_INT
	NCooldown                    DT_UINT
	Unk_9c8478e                  DT_UINT
	Unk_d45ed2d                  DT_INT
	Unk_f6b20b7                  DT_INT
	Unk_54513b8                  DT_INT
	Unk_fd1f378                  DT_UINT
	Unk_487c14                   DT_UINT
	Unk_87f2609                  DT_UINT
	Unk_158eb4f                  DT_FLOAT
	Unk_ab58cd3                  DT_ENUM
	Unk_91a3966                  DT_UINT
	Unk_25312e5                  DT_UINT
	Unk_4be4371                  DT_INT
	EDefaultMode                 DT_ENUM
}

func (t *WardrobeGizmoData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.FDisableNonFriendlyOperation, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.FWalkToCenter, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.FGizmoStartsDisabled, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.FUseStringListName, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.FForceMinimapIcon, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.FlOperationRadius, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.Unk_d0b1df5, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.FlGizmoUseTime, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.SnoChannelingEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.Unk_2767229, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.FGizmoShowProgressBar, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+60, &t.Unk_6d9ebe1, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.Unk_5456245, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.Unk_af5815a, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.SnoOnClickEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.SnoPickedUpEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.SnoDropOnGroundEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.TConditionData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.SnoPowerOperator, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.SnoPowerOperate, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.SnoPowerOperatorActive, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+100, &t.SnoPowerOperateActive, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+104, &t.Unk_359810e, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+108, &t.NCooldown, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.Unk_9c8478e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+116, &t.Unk_d45ed2d, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.Unk_f6b20b7, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+124, &t.Unk_54513b8, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.Unk_fd1f378, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+132, &t.Unk_487c14, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+136, &t.Unk_87f2609, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+140, &t.Unk_158eb4f, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+144, &t.Unk_ab58cd3, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+148, &t.Unk_91a3966, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+152, &t.Unk_25312e5, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+156, &t.Unk_4be4371, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+160, &t.EDefaultMode, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+168, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *WardrobeGizmoData) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("FDisableNonFriendlyOperation", &t.FDisableNonFriendlyOperation)
	cb.Do("FWalkToCenter", &t.FWalkToCenter)
	cb.Do("FGizmoStartsDisabled", &t.FGizmoStartsDisabled)
	cb.Do("FUseStringListName", &t.FUseStringListName)
	cb.Do("FForceMinimapIcon", &t.FForceMinimapIcon)
	cb.Do("FlOperationRadius", &t.FlOperationRadius)
	cb.Do("Unk_d0b1df5", &t.Unk_d0b1df5)
	cb.Do("FlGizmoUseTime", &t.FlGizmoUseTime)
	cb.Do("SnoChannelingEffect", &t.SnoChannelingEffect)
	cb.Do("Unk_2767229", &t.Unk_2767229)
	cb.Do("FGizmoShowProgressBar", &t.FGizmoShowProgressBar)
	cb.Do("Unk_6d9ebe1", &t.Unk_6d9ebe1)
	cb.Do("Unk_5456245", &t.Unk_5456245)
	cb.Do("Unk_af5815a", &t.Unk_af5815a)
	cb.Do("SnoOnClickEffect", &t.SnoOnClickEffect)
	cb.Do("SnoPickedUpEffect", &t.SnoPickedUpEffect)
	cb.Do("SnoDropOnGroundEffect", &t.SnoDropOnGroundEffect)
	cb.Do("TConditionData", &t.TConditionData)
	cb.Do("SnoPowerOperator", &t.SnoPowerOperator)
	cb.Do("SnoPowerOperate", &t.SnoPowerOperate)
	cb.Do("SnoPowerOperatorActive", &t.SnoPowerOperatorActive)
	cb.Do("SnoPowerOperateActive", &t.SnoPowerOperateActive)
	cb.Do("Unk_359810e", &t.Unk_359810e)
	cb.Do("NCooldown", &t.NCooldown)
	cb.Do("Unk_9c8478e", &t.Unk_9c8478e)
	cb.Do("Unk_d45ed2d", &t.Unk_d45ed2d)
	cb.Do("Unk_f6b20b7", &t.Unk_f6b20b7)
	cb.Do("Unk_54513b8", &t.Unk_54513b8)
	cb.Do("Unk_fd1f378", &t.Unk_fd1f378)
	cb.Do("Unk_487c14", &t.Unk_487c14)
	cb.Do("Unk_87f2609", &t.Unk_87f2609)
	cb.Do("Unk_158eb4f", &t.Unk_158eb4f)
	cb.Do("Unk_ab58cd3", &t.Unk_ab58cd3)
	cb.Do("Unk_91a3966", &t.Unk_91a3966)
	cb.Do("Unk_25312e5", &t.Unk_25312e5)
	cb.Do("Unk_4be4371", &t.Unk_4be4371)
	cb.Do("EDefaultMode", &t.EDefaultMode)
}

type GlobalRoadGraph struct {
	SnoWorld   DT_SNO
	ArSegments DT_VARIABLEARRAY[*GlobalRoadSegment]
	AabbBounds AABB
	DwRows     DT_UINT
	DwColumns  DT_UINT
	ArGrid     DT_VARIABLEARRAY[*GlobalRoadGraphCell]
}

func (t *GlobalRoadGraph) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoWorld, r, &Options{
		Flags: 513,
		Group: 48,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.ArSegments, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.AabbBounds, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.DwRows, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.DwColumns, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.ArGrid, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+72, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *GlobalRoadGraph) Walk(cb WalkCallback) {
	cb.Do("SnoWorld", &t.SnoWorld)
	cb.Do("ArSegments", &t.ArSegments)
	cb.Do("AabbBounds", &t.AabbBounds)
	cb.Do("DwRows", &t.DwRows)
	cb.Do("DwColumns", &t.DwColumns)
	cb.Do("ArGrid", &t.ArGrid)
}

type ScreenStaticCamps struct {
	SnoTerritory DT_SNO
	ArPoints     DT_VARIABLEARRAY[*DT_VECTOR2D]
}

func (t *ScreenStaticCamps) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoTerritory, r, &Options{
		Flags: 1,
		Group: 92,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.ArPoints, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ScreenStaticCamps) Walk(cb WalkCallback) {
	cb.Do("SnoTerritory", &t.SnoTerritory)
	cb.Do("ArPoints", &t.ArPoints)
}

type WorldSetRemainingReviveCountMessage struct {
	THeader               RequiredMessageHeader
	IdSWorld              DT_SHARED_SERVER_DATA_ID
	NRemainingReviveCount DT_INT
}

func (t *WorldSetRemainingReviveCountMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.IdSWorld, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.NRemainingReviveCount, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+28, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *WorldSetRemainingReviveCountMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("IdSWorld", &t.IdSWorld)
	cb.Do("NRemainingReviveCount", &t.NRemainingReviveCount)
}

type Type_85f15dc7 struct {
	THeader               RequiredMessageHeader
	DwPlayerGameAccountId DT_UINT
	SnoPower              DT_SNO
	DwRank                DT_UINT
}

func (t *Type_85f15dc7) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.DwPlayerGameAccountId, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.SnoPower, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.DwRank, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+28, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_85f15dc7) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("DwPlayerGameAccountId", &t.DwPlayerGameAccountId)
	cb.Do("SnoPower", &t.SnoPower)
	cb.Do("DwRank", &t.DwRank)
}

type OnHitEffectTriggeredBuffCallback struct {
	// Inherits BuffCallbackBase
	// Inherits PolymorphicBase
	DwType                DT_UINT
	DwPad                 DT_UINT
	SnoTriggerEffectGroup DT_SNO
	ArConditions          DT_POLYMORPHIC_VARIABLEARRAY[*DT_INT64]
}

func (t *OnHitEffectTriggeredBuffCallback) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoTriggerEffectGroup, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ArConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *OnHitEffectTriggeredBuffCallback) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("SnoTriggerEffectGroup", &t.SnoTriggerEffectGroup)
	cb.Do("ArConditions", &t.ArConditions)
}

type Type_8636d92f struct {
	TTexture SerialDataInfo
}

func (t *Type_8636d92f) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.TTexture, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_8636d92f) Walk(cb WalkCallback) {
	cb.Do("TTexture", &t.TTexture)
}

type SpeakerActorOverride struct {
	SnoActor DT_SNO
}

func (t *SpeakerActorOverride) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoActor, r, &Options{
		Flags: 1,
		Group: 1,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+4, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *SpeakerActorOverride) Walk(cb WalkCallback) {
	cb.Do("SnoActor", &t.SnoActor)
}

type PowerConditionHasItemEquipped struct {
	// Inherits PowerConditionBase
	// Inherits PolymorphicBase
	DwType   DT_UINT
	BInverse DT_INT
	DwPad    DT_UINT
	ESubject DT_ENUM
	SnoItem  DT_SNO
}

func (t *PowerConditionHasItemEquipped) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BInverse, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ESubject, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.SnoItem, r, &Options{
		Flags: 513,
		Group: 73,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PowerConditionHasItemEquipped) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("BInverse", &t.BInverse)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("ESubject", &t.ESubject)
	cb.Do("SnoItem", &t.SnoItem)
}

type SchedulerGlobalUniqueCategory_Table struct {
	// Inherits GameBalanceTable
	// Inherits PolymorphicBase
	DwType   DT_UINT
	DwPad    DT_UINT
	TEntries DT_VARIABLEARRAY[*SchedulerGlobalUniqueCategory]
}

func (t *SchedulerGlobalUniqueCategory_Table) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TEntries, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *SchedulerGlobalUniqueCategory_Table) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("TEntries", &t.TEntries)
}

type PlayerIndexMessage struct {
	THeader               RequiredMessageHeader
	DwPlayerGameAccountId DT_UINT
}

func (t *PlayerIndexMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.DwPlayerGameAccountId, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+20, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PlayerIndexMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("DwPlayerGameAccountId", &t.DwPlayerGameAccountId)
}

type DRLGNodeLink struct {
	DwDestNodeId DT_UINT
}

func (t *DRLGNodeLink) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.DwDestNodeId, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+4, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *DRLGNodeLink) Walk(cb WalkCallback) {
	cb.Do("DwDestNodeId", &t.DwDestNodeId)
}

type Type_87385a6d struct {
	SzTarget DT_CSTRING[*DT_BYTE]
	ArTracks DT_POLYMORPHIC_VARIABLEARRAY[*DT_INT64]
}

func (t *Type_87385a6d) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SzTarget, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.ArTracks, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+40, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_87385a6d) Walk(cb WalkCallback) {
	cb.Do("SzTarget", &t.SzTarget)
	cb.Do("ArTracks", &t.ArTracks)
}

type AssignArsenalSkillSlotMessage struct {
	THeader  RequiredMessageHeader
	SnoPower DT_SNO
	NSlot    DT_INT
}

func (t *AssignArsenalSkillSlotMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoPower, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.NSlot, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *AssignArsenalSkillSlotMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("SnoPower", &t.SnoPower)
	cb.Do("NSlot", &t.NSlot)
}

type DesignerVariablePayload struct {
	NPayloadValue DT_INT
	NResetValue   DT_INT
}

func (t *DesignerVariablePayload) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.NPayloadValue, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.NResetValue, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *DesignerVariablePayload) Walk(cb WalkCallback) {
	cb.Do("NPayloadValue", &t.NPayloadValue)
	cb.Do("NResetValue", &t.NResetValue)
}

type ItemTypeDefinition struct {
	DwFlags         DT_UINT
	EPackSlot       DT_ENUM
	ArBodySlots     DT_VARIABLEARRAY[*DT_ENUM]
	ArItemLabels    DT_VARIABLEARRAY[*DT_ENUM]
	EWeaponClass    DT_ENUM
	Unk_6d53dc5     DT_CSTRING[*DT_BYTE]
	Unk_18ee4ac     DT_ENUM
	Unk_b2500f1     DT_FLOAT
	Unk_4811bbe     DT_FLOAT
	Unk_cc5ef53     DT_FLOAT
	Unk_9981e08     DT_INT
	Unk_9e2e500     DT_INT
	Unk_69d0449     DT_INT
	Unk_f03343a     DT_INT
	Unk_9d54616     DT_INT
	Unk_b5a1c2b     DT_INT
	FUsableByClass  DT_FIXEDARRAY[*DT_INT]
	DwItemLabelMask DT_FIXEDARRAY[*DT_UINT]
	Unk_60c6aca     DT_VARIABLEARRAY[*Type_a5df0191]
	Unk_4ec8d93     DT_SNO
	Unk_f4b6cde     Type_56ff7d6a
}

func (t *ItemTypeDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.EPackSlot, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.ArBodySlots, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.ArItemLabels, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.EWeaponClass, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.Unk_6d53dc5, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_18ee4ac, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.Unk_b2500f1, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.Unk_4811bbe, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.Unk_cc5ef53, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.Unk_9981e08, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.Unk_9e2e500, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.Unk_69d0449, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+100, &t.Unk_f03343a, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+104, &t.Unk_9d54616, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+108, &t.Unk_b5a1c2b, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.FUsableByClass, r, &Options{
		ArrayLength: 5,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+132, &t.DwItemLabelMask, r, &Options{ArrayLength: 2}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+144, &t.Unk_60c6aca, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+160, &t.Unk_4ec8d93, r, &Options{
		Flags: 1,
		Group: 27,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+168, &t.Unk_f4b6cde, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+184, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ItemTypeDefinition) Walk(cb WalkCallback) {
	cb.Do("DwFlags", &t.DwFlags)
	cb.Do("EPackSlot", &t.EPackSlot)
	cb.Do("ArBodySlots", &t.ArBodySlots)
	cb.Do("ArItemLabels", &t.ArItemLabels)
	cb.Do("EWeaponClass", &t.EWeaponClass)
	cb.Do("Unk_6d53dc5", &t.Unk_6d53dc5)
	cb.Do("Unk_18ee4ac", &t.Unk_18ee4ac)
	cb.Do("Unk_b2500f1", &t.Unk_b2500f1)
	cb.Do("Unk_4811bbe", &t.Unk_4811bbe)
	cb.Do("Unk_cc5ef53", &t.Unk_cc5ef53)
	cb.Do("Unk_9981e08", &t.Unk_9981e08)
	cb.Do("Unk_9e2e500", &t.Unk_9e2e500)
	cb.Do("Unk_69d0449", &t.Unk_69d0449)
	cb.Do("Unk_f03343a", &t.Unk_f03343a)
	cb.Do("Unk_9d54616", &t.Unk_9d54616)
	cb.Do("Unk_b5a1c2b", &t.Unk_b5a1c2b)
	cb.Do("FUsableByClass", &t.FUsableByClass)
	cb.Do("DwItemLabelMask", &t.DwItemLabelMask)
	cb.Do("Unk_60c6aca", &t.Unk_60c6aca)
	cb.Do("Unk_4ec8d93", &t.Unk_4ec8d93)
	cb.Do("Unk_f4b6cde", &t.Unk_f4b6cde)
}

type Type_87a7a74d struct {
	// Inherits Subcondition
	// Inherits PolymorphicBase
	DwType  DT_UINT
	BNegate DT_INT
	DwPad   DT_UINT
}

func (t *Type_87a7a74d) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BNegate, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_87a7a74d) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("BNegate", &t.BNegate)
	cb.Do("DwPad", &t.DwPad)
}

type FloatDataMessage struct {
	THeader RequiredMessageHeader
	FlData  DT_FLOAT
}

func (t *FloatDataMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.FlData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+20, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *FloatDataMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("FlData", &t.FlData)
}

type ACDChangeGBHandleMessage struct {
	THeader RequiredMessageHeader
	Ann     DT_ACD_NETWORK_NAME
	HGB     GBHandle
}

func (t *ACDChangeGBHandleMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Ann, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.HGB, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ACDChangeGBHandleMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("Ann", &t.Ann)
	cb.Do("HGB", &t.HGB)
}

type MailRetrieveMessage struct {
	THeader RequiredMessageHeader
	IdMail  Type_f5ac91bb
}

func (t *MailRetrieveMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.IdMail, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *MailRetrieveMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("IdMail", &t.IdMail)
}

type SceneData struct {
	PtCollisionHeightFields DT_VARIABLEARRAY[*CollisionHeightField]
	Unk_b3a0ae7             DT_INT
	PtSurfaceOctree         DT_VARIABLEARRAY[*Octree]
	PtSurfaceGrid           DT_VARIABLEARRAY[*SurfaceGrid]
	PtFoliageGrid           DT_VARIABLEARRAY[*FoliageGrid]
}

func (t *SceneData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.PtCollisionHeightFields, r, &Options{Flags: 2097152}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_b3a0ae7, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.PtSurfaceOctree, r, &Options{Flags: 2097152}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.PtSurfaceGrid, r, &Options{Flags: 2097152}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.PtFoliageGrid, r, &Options{Flags: 2097152}); err != nil {
		return err
	}
	if _, err := r.Seek(p+72, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *SceneData) Walk(cb WalkCallback) {
	cb.Do("PtCollisionHeightFields", &t.PtCollisionHeightFields)
	cb.Do("Unk_b3a0ae7", &t.Unk_b3a0ae7)
	cb.Do("PtSurfaceOctree", &t.PtSurfaceOctree)
	cb.Do("PtSurfaceGrid", &t.PtSurfaceGrid)
	cb.Do("PtFoliageGrid", &t.PtFoliageGrid)
}

type LevelScalingData struct {
	NLevelScalingMin             DT_INT
	NLevelScalingMatchUntilLevel DT_INT
	NLevelScalingDelta           DT_INT
	NLevelScalingMax             DT_INT
}

func (t *LevelScalingData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.NLevelScalingMin, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.NLevelScalingMatchUntilLevel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.NLevelScalingDelta, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.NLevelScalingMax, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *LevelScalingData) Walk(cb WalkCallback) {
	cb.Do("NLevelScalingMin", &t.NLevelScalingMin)
	cb.Do("NLevelScalingMatchUntilLevel", &t.NLevelScalingMatchUntilLevel)
	cb.Do("NLevelScalingDelta", &t.NLevelScalingDelta)
	cb.Do("NLevelScalingMax", &t.NLevelScalingMax)
}

type MailRetrieveResponseMessage struct {
	THeader RequiredMessageHeader
	IdMail  Type_f5ac91bb
	IdErr   DT_INT
}

func (t *MailRetrieveResponseMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.IdMail, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.IdErr, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+40, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *MailRetrieveResponseMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("IdMail", &t.IdMail)
	cb.Do("IdErr", &t.IdErr)
}

type ActorGroupData struct {
	THeader GBIDHeader
}

func (t *ActorGroupData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+260, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ActorGroupData) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
}

type TimeSinceEventSubcondition struct {
	// Inherits Type_d3c3637f
	// Inherits Subcondition
	// Inherits PolymorphicBase
	DwType        DT_UINT
	BNegate       DT_INT
	EComparisonOp DT_ENUM
	DwPad         DT_UINT
	ETimeEvent    DT_ENUM
	FlValue       DT_FLOAT
	Unk_c7b2b18   DT_ENUM
}

func (t *TimeSinceEventSubcondition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BNegate, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.EComparisonOp, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.ETimeEvent, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.FlValue, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.Unk_c7b2b18, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TimeSinceEventSubcondition) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("BNegate", &t.BNegate)
	cb.Do("EComparisonOp", &t.EComparisonOp)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("ETimeEvent", &t.ETimeEvent)
	cb.Do("FlValue", &t.FlValue)
	cb.Do("Unk_c7b2b18", &t.Unk_c7b2b18)
}

type LoreMessage struct {
	THeader RequiredMessageHeader
	SnoLore DT_SNO
}

func (t *LoreMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoLore, r, &Options{
		Flags: 1,
		Group: 59,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+20, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *LoreMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("SnoLore", &t.SnoLore)
}

type Type_88c1160d struct {
	EIndices DT_FIXEDARRAY[*DT_ENUM]
}

func (t *Type_88c1160d) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.EIndices, r, &Options{
		ArrayLength: 8,
		Flags:       1,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_88c1160d) Walk(cb WalkCallback) {
	cb.Do("EIndices", &t.EIndices)
}

type ActiveSkillSavedData struct {
	SnoSkill DT_SNO
}

func (t *ActiveSkillSavedData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoSkill, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ActiveSkillSavedData) Walk(cb WalkCallback) {
	cb.Do("SnoSkill", &t.SnoSkill)
}

type RoadTypeProperties struct {
	RgbaDebugColor DT_RGBACOLOR
	SnoTexPattern  DT_SNO
	RgbaColor      DT_RGBACOLOR
	Unk_1626611    DT_FLOAT
	Unk_daf4312    DT_FLOAT
	Unk_74b9406    DT_FLOAT
	Unk_9c8a384    DT_RGBACOLOR
	Unk_b6065b     DT_FLOAT
	Unk_e41f4ef    DT_FLOAT
}

func (t *RoadTypeProperties) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.RgbaDebugColor, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.SnoTexPattern, r, &Options{
		Flags: 1,
		Group: 44,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.RgbaColor, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.Unk_1626611, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_daf4312, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.Unk_74b9406, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_9c8a384, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.Unk_b6065b, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.Unk_e41f4ef, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+36, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *RoadTypeProperties) Walk(cb WalkCallback) {
	cb.Do("RgbaDebugColor", &t.RgbaDebugColor)
	cb.Do("SnoTexPattern", &t.SnoTexPattern)
	cb.Do("RgbaColor", &t.RgbaColor)
	cb.Do("Unk_1626611", &t.Unk_1626611)
	cb.Do("Unk_daf4312", &t.Unk_daf4312)
	cb.Do("Unk_74b9406", &t.Unk_74b9406)
	cb.Do("Unk_9c8a384", &t.Unk_9c8a384)
	cb.Do("Unk_b6065b", &t.Unk_b6065b)
	cb.Do("Unk_e41f4ef", &t.Unk_e41f4ef)
}

type PowerCallbackBase struct {
	// Inherits PolymorphicBase
	DwType                DT_UINT
	DwPad                 DT_UINT
	SnoTriggerEffectGroup DT_SNO
	BCouldHaveRagdolled   DT_INT
}

func (t *PowerCallbackBase) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoTriggerEffectGroup, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.BCouldHaveRagdolled, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PowerCallbackBase) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("SnoTriggerEffectGroup", &t.SnoTriggerEffectGroup)
	cb.Do("BCouldHaveRagdolled", &t.BCouldHaveRagdolled)
}

type ProcChanceBuffCallbackBase struct {
	// Inherits BuffCallbackBase
	// Inherits PolymorphicBase
	DwType                DT_UINT
	DwPad                 DT_UINT
	SnoTriggerEffectGroup DT_SNO
	ArConditions          DT_POLYMORPHIC_VARIABLEARRAY[*DT_INT64]
	BAlwaysProcs          DT_INT
	DwPadding             DT_UINT
	TProcChance           DT_STRING_FORMULA
}

func (t *ProcChanceBuffCallbackBase) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoTriggerEffectGroup, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ArConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.BAlwaysProcs, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.DwPadding, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.TProcChance, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+88, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ProcChanceBuffCallbackBase) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("SnoTriggerEffectGroup", &t.SnoTriggerEffectGroup)
	cb.Do("ArConditions", &t.ArConditions)
	cb.Do("BAlwaysProcs", &t.BAlwaysProcs)
	cb.Do("DwPadding", &t.DwPadding)
	cb.Do("TProcChance", &t.TProcChance)
}

type GameTestingMonsterSamplingStartMessage struct {
	THeader      RequiredMessageHeader
	SzMarkerName DT_CHARARRAY
	SzGroupType  DT_CHARARRAY
	SnoWorld     DT_SNO
	SnoMonster   DT_SNO
	SnoAffix     DT_SNO
	UCount       DT_UINT
}

func (t *GameTestingMonsterSamplingStartMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SzMarkerName, r, &Options{
		ArrayLength: 64,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.SzGroupType, r, &Options{
		ArrayLength: 16,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.SnoWorld, r, &Options{
		Flags: 1,
		Group: 48,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+100, &t.SnoMonster, r, &Options{
		Flags: 1,
		Group: 1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+104, &t.SnoAffix, r, &Options{
		Flags: 1,
		Group: 107,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+108, &t.UCount, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+112, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *GameTestingMonsterSamplingStartMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("SzMarkerName", &t.SzMarkerName)
	cb.Do("SzGroupType", &t.SzGroupType)
	cb.Do("SnoWorld", &t.SnoWorld)
	cb.Do("SnoMonster", &t.SnoMonster)
	cb.Do("SnoAffix", &t.SnoAffix)
	cb.Do("UCount", &t.UCount)
}

type ScriptEventParamGameTime struct {
	// Inherits ScriptEventParamBase
	// Inherits PolymorphicBase
	DwType            DT_UINT
	EParamType        DT_ENUM
	DwPad             DT_UINT
	EFilterInequality DT_ENUM
	FlTime            DT_FLOAT
}

func (t *ScriptEventParamGameTime) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.EParamType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.EFilterInequality, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.FlTime, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ScriptEventParamGameTime) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("EParamType", &t.EParamType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("EFilterInequality", &t.EFilterInequality)
	cb.Do("FlTime", &t.FlTime)
}

type Int64DataMessage struct {
	THeader RequiredMessageHeader
	NData   DT_INT64
}

func (t *Int64DataMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.NData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Int64DataMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("NData", &t.NData)
}

type UIItemTagStyle struct {
	// Inherits UIButtonStyle
	// Inherits UITextStyle
	// Inherits UIWindowStyle
	// Inherits UIControlStyle
	// Inherits PolymorphicBase
	DwType                    DT_UINT
	DwPad                     DT_UINT
	HParentStyle              UIControlHandle
	Unk_441f783               DT_INT64
	M_eHasModifiedPowerTagMap DT_TAGMAP[*DT_ENUM]
	TConsoleInput             UIControlConsoleInput
	Unk_b4f614c               DT_TAGMAP[*DT_ENUM]
	TFont                     UIControlFont
	Unk_4741819               DT_TAGMAP[*DT_ENUM]
	TIcon                     UIControlIcon
	TClickSounds              UIControlClickSounds
	Unk_10f81f0               DT_TAGMAP[*DT_ENUM]
}

func (t *UIItemTagStyle) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.HParentStyle, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_441f783, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.M_eHasModifiedPowerTagMap, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.TConsoleInput, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.Unk_b4f614c, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.TFont, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.Unk_4741819, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.TIcon, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.TClickSounds, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+144, &t.Unk_10f81f0, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+160, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *UIItemTagStyle) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("HParentStyle", &t.HParentStyle)
	cb.Do("Unk_441f783", &t.Unk_441f783)
	cb.Do("M_eHasModifiedPowerTagMap", &t.M_eHasModifiedPowerTagMap)
	cb.Do("TConsoleInput", &t.TConsoleInput)
	cb.Do("Unk_b4f614c", &t.Unk_b4f614c)
	cb.Do("TFont", &t.TFont)
	cb.Do("Unk_4741819", &t.Unk_4741819)
	cb.Do("TIcon", &t.TIcon)
	cb.Do("TClickSounds", &t.TClickSounds)
	cb.Do("Unk_10f81f0", &t.Unk_10f81f0)
}

type AnimPayloadData struct {
	PtBoneNames         DT_VARIABLEARRAY[*BoneName]
	Unk_a9ead38         DT_VARIABLEARRAY[*DT_FLOAT]
	Unk_8c9e18f         DT_VARIABLEARRAY[*DT_FLOAT]
	PwvNonlinearOffset  DT_VARIABLEARRAY[*DT_VECTOR3D]
	Unk_5cd81c8         DT_VARIABLEARRAY[*DT_VECTOR3D]
	Unk_fa7ecfb         DT_VARIABLEARRAY[*DT_VECTOR3D]
	Unk_28a8e7b         DT_VARIABLEARRAY[*DT_FLOAT]
	Unk_772730e         DT_VARIABLEARRAY[*DT_FLOAT]
	Unk_7c60205         DT_VARIABLEARRAY[*DT_FLOAT]
	PtDepthOfField      DT_VARIABLEARRAY[*AnimDepthOfField]
	PtTranslationCurves DT_VARIABLEARRAY[*TranslationCurve]
	PtRotationCurves    DT_VARIABLEARRAY[*RotationCurve]
	PtScaleCurves       DT_VARIABLEARRAY[*ScaleCurve]
}

func (t *AnimPayloadData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.PtBoneNames, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_a9ead38, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.Unk_8c9e18f, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.PwvNonlinearOffset, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.Unk_5cd81c8, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.Unk_fa7ecfb, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.Unk_28a8e7b, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.Unk_772730e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.Unk_7c60205, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+144, &t.PtDepthOfField, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+160, &t.PtTranslationCurves, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+176, &t.PtRotationCurves, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+192, &t.PtScaleCurves, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+208, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *AnimPayloadData) Walk(cb WalkCallback) {
	cb.Do("PtBoneNames", &t.PtBoneNames)
	cb.Do("Unk_a9ead38", &t.Unk_a9ead38)
	cb.Do("Unk_8c9e18f", &t.Unk_8c9e18f)
	cb.Do("PwvNonlinearOffset", &t.PwvNonlinearOffset)
	cb.Do("Unk_5cd81c8", &t.Unk_5cd81c8)
	cb.Do("Unk_fa7ecfb", &t.Unk_fa7ecfb)
	cb.Do("Unk_28a8e7b", &t.Unk_28a8e7b)
	cb.Do("Unk_772730e", &t.Unk_772730e)
	cb.Do("Unk_7c60205", &t.Unk_7c60205)
	cb.Do("PtDepthOfField", &t.PtDepthOfField)
	cb.Do("PtTranslationCurves", &t.PtTranslationCurves)
	cb.Do("PtRotationCurves", &t.PtRotationCurves)
	cb.Do("PtScaleCurves", &t.PtScaleCurves)
}

type ActorAIData struct {
	PtAIBroadcasts DT_VARIABLEARRAY[*AIBroadcast]
	GbidAIPropType DT_GBID
	Unk_af0baa5    DT_INT
	Unk_766f08     DT_VARIABLEARRAY[*Type_674e5442]
}

func (t *ActorAIData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.PtAIBroadcasts, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.GbidAIPropType, r, &Options{
		Flags: 1,
		Group: 21,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.Unk_af0baa5, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_766f08, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+40, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ActorAIData) Walk(cb WalkCallback) {
	cb.Do("PtAIBroadcasts", &t.PtAIBroadcasts)
	cb.Do("GbidAIPropType", &t.GbidAIPropType)
	cb.Do("Unk_af0baa5", &t.Unk_af0baa5)
	cb.Do("Unk_766f08", &t.Unk_766f08)
}

type Type_89efac1a struct {
	FlScrollerInitialDelay DT_FLOAT
	FlScrollerEndDelay     DT_FLOAT
	FlScrollerRate         DT_FLOAT
	BScrollerHorizontal    DT_INT
	BScrollerRepeat        DT_INT
}

func (t *Type_89efac1a) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.FlScrollerInitialDelay, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.FlScrollerEndDelay, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.FlScrollerRate, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.BScrollerHorizontal, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BScrollerRepeat, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+20, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_89efac1a) Walk(cb WalkCallback) {
	cb.Do("FlScrollerInitialDelay", &t.FlScrollerInitialDelay)
	cb.Do("FlScrollerEndDelay", &t.FlScrollerEndDelay)
	cb.Do("FlScrollerRate", &t.FlScrollerRate)
	cb.Do("BScrollerHorizontal", &t.BScrollerHorizontal)
	cb.Do("BScrollerRepeat", &t.BScrollerRepeat)
}

type Type_8a12bdb7 struct {
	Unk_19301ba DT_UINT
	Unk_36c0ef4 DT_UINT
}

func (t *Type_8a12bdb7) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Unk_19301ba, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.Unk_36c0ef4, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_8a12bdb7) Walk(cb WalkCallback) {
	cb.Do("Unk_19301ba", &t.Unk_19301ba)
	cb.Do("Unk_36c0ef4", &t.Unk_36c0ef4)
}

type PostFXParams struct {
	FlFilterOffset DT_FIXEDARRAY[*DT_FLOAT]
	FlFilterCoeff  DT_FIXEDARRAY[*DT_FLOAT]
}

func (t *PostFXParams) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.FlFilterOffset, r, &Options{
		ArrayLength: 4,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.FlFilterCoeff, r, &Options{
		ArrayLength: 4,
		Flags:       1,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PostFXParams) Walk(cb WalkCallback) {
	cb.Do("FlFilterOffset", &t.FlFilterOffset)
	cb.Do("FlFilterCoeff", &t.FlFilterCoeff)
}

type LevelAreaTagsEntry struct {
	THeader GBIDHeader
}

func (t *LevelAreaTagsEntry) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+260, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *LevelAreaTagsEntry) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
}

type UIListBoxStyle struct {
	// Inherits UIWindowStyle
	// Inherits UIControlStyle
	// Inherits PolymorphicBase
	DwType                    DT_UINT
	DwPad                     DT_UINT
	HParentStyle              UIControlHandle
	Unk_441f783               DT_INT64
	M_eHasModifiedPowerTagMap DT_TAGMAP[*DT_ENUM]
	TConsoleInput             UIControlConsoleInput
	Unk_b4f614c               DT_TAGMAP[*DT_ENUM]
	TClickSounds              UIControlClickSounds
	TFont                     UIControlFont
	Unk_59693f9               DT_TAGMAP[*DT_ENUM]
}

func (t *UIListBoxStyle) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.HParentStyle, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_441f783, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.M_eHasModifiedPowerTagMap, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.TConsoleInput, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.Unk_b4f614c, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.TClickSounds, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.TFont, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.Unk_59693f9, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+128, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *UIListBoxStyle) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("HParentStyle", &t.HParentStyle)
	cb.Do("Unk_441f783", &t.Unk_441f783)
	cb.Do("M_eHasModifiedPowerTagMap", &t.M_eHasModifiedPowerTagMap)
	cb.Do("TConsoleInput", &t.TConsoleInput)
	cb.Do("Unk_b4f614c", &t.Unk_b4f614c)
	cb.Do("TClickSounds", &t.TClickSounds)
	cb.Do("TFont", &t.TFont)
	cb.Do("Unk_59693f9", &t.Unk_59693f9)
}

type PlayerClassSubcondition struct {
	// Inherits Subcondition
	// Inherits PolymorphicBase
	DwType       DT_UINT
	BNegate      DT_INT
	DwPad        DT_UINT
	FPlayerClass DT_FIXEDARRAY[*DT_INT]
}

func (t *PlayerClassSubcondition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BNegate, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.FPlayerClass, r, &Options{
		ArrayLength: 5,
		Flags:       1,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PlayerClassSubcondition) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("BNegate", &t.BNegate)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("FPlayerClass", &t.FPlayerClass)
}

type OnGizmoOperatedBuffCallback struct {
	// Inherits BuffCallbackBase
	// Inherits PolymorphicBase
	DwType                DT_UINT
	DwPad                 DT_UINT
	SnoTriggerEffectGroup DT_SNO
	ArConditions          DT_POLYMORPHIC_VARIABLEARRAY[*DT_INT64]
}

func (t *OnGizmoOperatedBuffCallback) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoTriggerEffectGroup, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ArConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *OnGizmoOperatedBuffCallback) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("SnoTriggerEffectGroup", &t.SnoTriggerEffectGroup)
	cb.Do("ArConditions", &t.ArConditions)
}

type Type_8a6ebe91 struct {
	// Inherits GameBalanceTable
	// Inherits PolymorphicBase
	DwType   DT_UINT
	DwPad    DT_UINT
	TEntries DT_VARIABLEARRAY[*Type_2732a10a]
}

func (t *Type_8a6ebe91) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TEntries, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_8a6ebe91) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("TEntries", &t.TEntries)
}

type PowerConditionDamageHasVulnerable struct {
	// Inherits PowerConditionBase
	// Inherits PolymorphicBase
	DwType   DT_UINT
	BInverse DT_INT
	DwPad    DT_UINT
}

func (t *PowerConditionDamageHasVulnerable) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BInverse, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PowerConditionDamageHasVulnerable) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("BInverse", &t.BInverse)
	cb.Do("DwPad", &t.DwPad)
}

type dmHeightSampleMirror struct {
	Height      DT_FLOAT
	Material    DT_WORD
	GameFlags   DT_BYTE
	Unk_38adf8e DT_BYTE
}

func (t *dmHeightSampleMirror) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Height, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.Material, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+6, &t.GameFlags, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+7, &t.Unk_38adf8e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *dmHeightSampleMirror) Walk(cb WalkCallback) {
	cb.Do("Height", &t.Height)
	cb.Do("Material", &t.Material)
	cb.Do("GameFlags", &t.GameFlags)
	cb.Do("Unk_38adf8e", &t.Unk_38adf8e)
}

type AIBroadcast struct {
	SnoAIState   DT_SNO
	FlRadius     DT_FLOAT
	SnoCondition DT_SNO
}

func (t *AIBroadcast) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoAIState, r, &Options{
		Flags: 1,
		Group: 4,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.FlRadius, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.SnoCondition, r, &Options{
		Flags: 1,
		Group: 51,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+12, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *AIBroadcast) Walk(cb WalkCallback) {
	cb.Do("SnoAIState", &t.SnoAIState)
	cb.Do("FlRadius", &t.FlRadius)
	cb.Do("SnoCondition", &t.SnoCondition)
}

type Type_8b32a937 struct {
	Transform   PRSTransform
	AabbBounds  AABB
	Unk_d094b9a DT_ENUM
	Unk_334eb2d DT_INT
	DwFlags     DT_UINT
}

func (t *Type_8b32a937) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Transform, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.AabbBounds, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.Unk_d094b9a, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.Unk_334eb2d, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.DwFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if _, err := r.Seek(p+76, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_8b32a937) Walk(cb WalkCallback) {
	cb.Do("Transform", &t.Transform)
	cb.Do("AabbBounds", &t.AabbBounds)
	cb.Do("Unk_d094b9a", &t.Unk_d094b9a)
	cb.Do("Unk_334eb2d", &t.Unk_334eb2d)
	cb.Do("DwFlags", &t.DwFlags)
}

type UnassignSkillMessage struct {
	THeader      RequiredMessageHeader
	NSlot        DT_INT
	NEnchantSlot DT_INT
	BIsEnchant   DT_INT
}

func (t *UnassignSkillMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.NSlot, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.NEnchantSlot, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.BIsEnchant, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+28, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *UnassignSkillMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("NSlot", &t.NSlot)
	cb.Do("NEnchantSlot", &t.NEnchantSlot)
	cb.Do("BIsEnchant", &t.BIsEnchant)
}

type VoiceActorEntry_Table struct {
	// Inherits GameBalanceTable
	// Inherits PolymorphicBase
	DwType   DT_UINT
	DwPad    DT_UINT
	TEntries DT_VARIABLEARRAY[*VoiceActorEntry]
}

func (t *VoiceActorEntry_Table) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TEntries, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *VoiceActorEntry_Table) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("TEntries", &t.TEntries)
}

type ReputationDefinition struct {
	DwFlags    DT_UINT
	DwMaxValue DT_UINT
}

func (t *ReputationDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwMaxValue, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ReputationDefinition) Walk(cb WalkCallback) {
	cb.Do("DwFlags", &t.DwFlags)
	cb.Do("DwMaxValue", &t.DwMaxValue)
}

type IntDataMessage struct {
	THeader RequiredMessageHeader
	NData   DT_INT
}

func (t *IntDataMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.NData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+20, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *IntDataMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("NData", &t.NData)
}

type RunTimeMaterialVectorValueEntry struct {
	TValue Type_bbef2266
}

func (t *RunTimeMaterialVectorValueEntry) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.TValue, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *RunTimeMaterialVectorValueEntry) Walk(cb WalkCallback) {
	cb.Do("TValue", &t.TValue)
}

type GroupTransferQueryMessage struct {
	THeader        RequiredMessageHeader
	Unk_ad293f5    DT_UINT
	EQueryType     DT_ENUM
	SnoDestination DT_SNO
}

func (t *GroupTransferQueryMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_ad293f5, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.EQueryType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SnoDestination, r, &Options{
		Flags: 1,
		Group: 48,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+28, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *GroupTransferQueryMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("Unk_ad293f5", &t.Unk_ad293f5)
	cb.Do("EQueryType", &t.EQueryType)
	cb.Do("SnoDestination", &t.SnoDestination)
}

type PowerConditionHasSkillTag struct {
	// Inherits PowerConditionBase
	// Inherits PolymorphicBase
	DwType      DT_UINT
	BInverse    DT_INT
	DwPad       DT_UINT
	ArSkillTags DT_VARIABLEARRAY[*DT_GBID]
	Unk_56385e4 DT_INT
}

func (t *PowerConditionHasSkillTag) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BInverse, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ArSkillTags, r, &Options{
		Flags: 1,
		Group: 56,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.Unk_56385e4, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PowerConditionHasSkillTag) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("BInverse", &t.BInverse)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("ArSkillTags", &t.ArSkillTags)
	cb.Do("Unk_56385e4", &t.Unk_56385e4)
}

type SkillEnchantSavedData struct {
	SnoSkill DT_SNO
}

func (t *SkillEnchantSavedData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoSkill, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+4, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *SkillEnchantSavedData) Walk(cb WalkCallback) {
	cb.Do("SnoSkill", &t.SnoSkill)
}

type Type_8c33d728 struct {
	SnoItem DT_SNO
	SnoDye  DT_SNO
}

func (t *Type_8c33d728) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoItem, r, &Options{
		Flags: 513,
		Group: 73,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.SnoDye, r, &Options{
		Flags: 513,
		Group: 122,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_8c33d728) Walk(cb WalkCallback) {
	cb.Do("SnoItem", &t.SnoItem)
	cb.Do("SnoDye", &t.SnoDye)
}

type CampaignArc struct {
	DwID          DT_UINT
	DwFlags       DT_UINT
	SnoReward     DT_SNO
	ArQuestChains DT_VARIABLEARRAY[*CampaignChain]
	Unk_1cc41e6   DT_VARIABLEARRAY[*Type_eda64360]
	Unk_7c3761f   DT_VARIABLEARRAY[*Type_94666cb9]
	Unk_c2e08fe   DT_UINT
	Unk_8705b44   DT_UINT
}

func (t *CampaignArc) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.DwID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.DwFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.SnoReward, r, &Options{
		Flags: 513,
		Group: 52,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.ArQuestChains, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.Unk_1cc41e6, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.Unk_7c3761f, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.Unk_c2e08fe, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.Unk_8705b44, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+72, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *CampaignArc) Walk(cb WalkCallback) {
	cb.Do("DwID", &t.DwID)
	cb.Do("DwFlags", &t.DwFlags)
	cb.Do("SnoReward", &t.SnoReward)
	cb.Do("ArQuestChains", &t.ArQuestChains)
	cb.Do("Unk_1cc41e6", &t.Unk_1cc41e6)
	cb.Do("Unk_7c3761f", &t.Unk_7c3761f)
	cb.Do("Unk_c2e08fe", &t.Unk_c2e08fe)
	cb.Do("Unk_8705b44", &t.Unk_8705b44)
}

type ReputationSubcondition struct {
	// Inherits Subcondition
	// Inherits PolymorphicBase
	DwType  DT_UINT
	BNegate DT_INT
	DwPad   DT_UINT
	TPair   ReputationValuePair
}

func (t *ReputationSubcondition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BNegate, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.TPair, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ReputationSubcondition) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("BNegate", &t.BNegate)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("TPair", &t.TPair)
}

type TriggerEventShowWarpUI struct {
	// Inherits TriggerEvent
	// Inherits PolymorphicBase
	DwType          DT_UINT
	DwPad           DT_UINT
	TConditions     TriggerConditions
	FGenerated      DT_INT
	Unk_6cba752     DT_INT
	DwParentActorID DT_UINT
	SnoUI           DT_SNO
}

func (t *TriggerEventShowWarpUI) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.FGenerated, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_6cba752, r, &Options{Flags: 16}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.DwParentActorID, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.SnoUI, r, &Options{
		Flags: 1,
		Group: 46,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+88, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TriggerEventShowWarpUI) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("TConditions", &t.TConditions)
	cb.Do("FGenerated", &t.FGenerated)
	cb.Do("Unk_6cba752", &t.Unk_6cba752)
	cb.Do("DwParentActorID", &t.DwParentActorID)
	cb.Do("SnoUI", &t.SnoUI)
}

type GameTestingSmokeSamplingStartMessage struct {
	THeader      RequiredMessageHeader
	SnoSubzone   DT_SNO
	UPlayerCount DT_UINT
}

func (t *GameTestingSmokeSamplingStartMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoSubzone, r, &Options{
		Flags: 1,
		Group: 80,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.UPlayerCount, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *GameTestingSmokeSamplingStartMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("SnoSubzone", &t.SnoSubzone)
	cb.Do("UPlayerCount", &t.UPlayerCount)
}

type ACDChangeActorMessage struct {
	THeader  RequiredMessageHeader
	Ann      DT_ACD_NETWORK_NAME
	SnoActor DT_SNO
}

func (t *ACDChangeActorMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Ann, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SnoActor, r, &Options{
		Flags: 1,
		Group: 1,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+28, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ACDChangeActorMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("Ann", &t.Ann)
	cb.Do("SnoActor", &t.SnoActor)
}

type Type_8d06aec1 struct {
	InvMass DT_VECTOR4D
	Params  DT_VECTOR4D
	Scale   DT_VECTOR4D
	I1      DT_WORD
	I2      DT_WORD
	I3      DT_WORD
	I4      DT_WORD
	Padding DT_FIXEDARRAY[*DT_WORD]
}

func (t *Type_8d06aec1) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.InvMass, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Params, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.Scale, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.I1, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+50, &t.I2, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.I3, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+54, &t.I4, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.Padding, r, &Options{ArrayLength: 4}); err != nil {
		return err
	}
	if _, err := r.Seek(p+64, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_8d06aec1) Walk(cb WalkCallback) {
	cb.Do("InvMass", &t.InvMass)
	cb.Do("Params", &t.Params)
	cb.Do("Scale", &t.Scale)
	cb.Do("I1", &t.I1)
	cb.Do("I2", &t.I2)
	cb.Do("I3", &t.I3)
	cb.Do("I4", &t.I4)
	cb.Do("Padding", &t.Padding)
}

type CollectAchievementItemRewardsRequest struct {
	THeader        RequiredRequestMessageHeader
	SnoAchievement DT_SNO
}

func (t *CollectAchievementItemRewardsRequest) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.SnoAchievement, r, &Options{
		Flags: 1,
		Group: 99,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *CollectAchievementItemRewardsRequest) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("SnoAchievement", &t.SnoAchievement)
}

type Type_8d0e9d57 struct{}

func (t *Type_8d0e9d57) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if _, err := r.Seek(p+1, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_8d0e9d57) Walk(cb WalkCallback) {}

type LevelScalingDefinition struct {
	NLevel                  DT_INT
	FlHPScalar              DT_FLOAT
	FlXPScalar              DT_FLOAT
	Unk_9592c2b             DT_FLOAT
	Unk_9b9d09c             DT_INT
	NItemPowerDelta         DT_INT
	NBaseItemPower          DT_INT
	Unk_3d92381             DT_INT
	Unk_ba4504c             DT_INT
	Unk_5f945b7             DT_FLOAT
	Unk_d970377             DT_FIXEDARRAY[*DT_FLOAT]
	Unk_f48a6a1             DT_FIXEDARRAY[*DT_FLOAT]
	Unk_16d37a5             DT_FIXEDARRAY[*DT_FLOAT]
	Unk_a2ccfe              DT_FIXEDARRAY[*DT_FLOAT]
	Unk_5addb48             DT_FIXEDARRAY[*DT_FLOAT]
	Unk_21af36c             DT_FIXEDARRAY[*DT_FLOAT]
	Unk_4148916             DT_FIXEDARRAY[*DT_FLOAT]
	Unk_6c4f6a5             DT_FLOAT
	Unk_ca0e50c             DT_FLOAT
	Unk_75141dd             DT_FLOAT
	FlClassBaseDamageScalar DT_FIXEDARRAY[*DT_FLOAT]
}

func (t *LevelScalingDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.NLevel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.FlHPScalar, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.FlXPScalar, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.Unk_9592c2b, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_9b9d09c, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.NItemPowerDelta, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.NBaseItemPower, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.Unk_3d92381, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.Unk_ba4504c, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.Unk_5f945b7, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.Unk_d970377, r, &Options{
		ArrayLength: 2,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.Unk_f48a6a1, r, &Options{
		ArrayLength: 2,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.Unk_16d37a5, r, &Options{
		ArrayLength: 2,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.Unk_a2ccfe, r, &Options{
		ArrayLength: 2,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_5addb48, r, &Options{
		ArrayLength: 2,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.Unk_21af36c, r, &Options{
		ArrayLength: 2,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.Unk_4148916, r, &Options{
		ArrayLength: 2,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.Unk_6c4f6a5, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+100, &t.Unk_ca0e50c, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+104, &t.Unk_75141dd, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+108, &t.FlClassBaseDamageScalar, r, &Options{
		ArrayLength: 5,
		Flags:       1,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+128, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *LevelScalingDefinition) Walk(cb WalkCallback) {
	cb.Do("NLevel", &t.NLevel)
	cb.Do("FlHPScalar", &t.FlHPScalar)
	cb.Do("FlXPScalar", &t.FlXPScalar)
	cb.Do("Unk_9592c2b", &t.Unk_9592c2b)
	cb.Do("Unk_9b9d09c", &t.Unk_9b9d09c)
	cb.Do("NItemPowerDelta", &t.NItemPowerDelta)
	cb.Do("NBaseItemPower", &t.NBaseItemPower)
	cb.Do("Unk_3d92381", &t.Unk_3d92381)
	cb.Do("Unk_ba4504c", &t.Unk_ba4504c)
	cb.Do("Unk_5f945b7", &t.Unk_5f945b7)
	cb.Do("Unk_d970377", &t.Unk_d970377)
	cb.Do("Unk_f48a6a1", &t.Unk_f48a6a1)
	cb.Do("Unk_16d37a5", &t.Unk_16d37a5)
	cb.Do("Unk_a2ccfe", &t.Unk_a2ccfe)
	cb.Do("Unk_5addb48", &t.Unk_5addb48)
	cb.Do("Unk_21af36c", &t.Unk_21af36c)
	cb.Do("Unk_4148916", &t.Unk_4148916)
	cb.Do("Unk_6c4f6a5", &t.Unk_6c4f6a5)
	cb.Do("Unk_ca0e50c", &t.Unk_ca0e50c)
	cb.Do("Unk_75141dd", &t.Unk_75141dd)
	cb.Do("FlClassBaseDamageScalar", &t.FlClassBaseDamageScalar)
}

type GlobalCustomizationData struct {
	// Inherits GlobalBase
	// Inherits PolymorphicBase
	DwType                  DT_UINT
	DwPad                   DT_UINT
	ArInitialDyes           DT_VARIABLEARRAY[*DT_SNO]
	ArFaceChoices           DT_VARIABLEARRAY[*DT_SNO]
	ArHairStyleChoices      DT_VARIABLEARRAY[*DT_SNO]
	ArFacialHairChoices     DT_VARIABLEARRAY[*DT_SNO]
	ArHairColorChoices      DT_VARIABLEARRAY[*DT_SNO]
	ArMarkingShapeChoices   DT_VARIABLEARRAY[*DT_SNO]
	ArMarkingColorChoices   DT_VARIABLEARRAY[*DT_SNO]
	ArJewelryChoices        DT_VARIABLEARRAY[*DT_SNO]
	ArEyeColorChoices       DT_VARIABLEARRAY[*DT_SNO]
	ArMakeupChoices         DT_VARIABLEARRAY[*DT_SNO]
	SnoFallbackFace         DT_SNO
	SnoFallbackHairStyle    DT_SNO
	SnoFallbackHairColor    DT_SNO
	SnoFallbackEyeColor     DT_SNO
	SnoFallbackMarkingColor DT_SNO
	NLastAllocatedRewardId  DT_UINT
}

func (t *GlobalCustomizationData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.ArInitialDyes, r, &Options{
		Flags: 1,
		Group: 122,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.ArFaceChoices, r, &Options{
		Flags: 1,
		Group: 140,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.ArHairStyleChoices, r, &Options{
		Flags: 1,
		Group: 138,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.ArFacialHairChoices, r, &Options{
		Flags: 1,
		Group: 139,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.ArHairColorChoices, r, &Options{
		Flags: 1,
		Group: 134,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.ArMarkingShapeChoices, r, &Options{
		Flags: 1,
		Group: 115,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.ArMarkingColorChoices, r, &Options{
		Flags: 1,
		Group: 133,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.ArJewelryChoices, r, &Options{
		Flags: 1,
		Group: 119,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+144, &t.ArEyeColorChoices, r, &Options{
		Flags: 1,
		Group: 131,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+160, &t.ArMakeupChoices, r, &Options{
		Flags: 1,
		Group: 132,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+176, &t.SnoFallbackFace, r, &Options{
		Flags: 1,
		Group: 140,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+180, &t.SnoFallbackHairStyle, r, &Options{
		Flags: 1,
		Group: 138,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+184, &t.SnoFallbackHairColor, r, &Options{
		Flags: 1,
		Group: 134,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+188, &t.SnoFallbackEyeColor, r, &Options{
		Flags: 1,
		Group: 131,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+192, &t.SnoFallbackMarkingColor, r, &Options{
		Flags: 1,
		Group: 133,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+196, &t.NLastAllocatedRewardId, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+200, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *GlobalCustomizationData) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("ArInitialDyes", &t.ArInitialDyes)
	cb.Do("ArFaceChoices", &t.ArFaceChoices)
	cb.Do("ArHairStyleChoices", &t.ArHairStyleChoices)
	cb.Do("ArFacialHairChoices", &t.ArFacialHairChoices)
	cb.Do("ArHairColorChoices", &t.ArHairColorChoices)
	cb.Do("ArMarkingShapeChoices", &t.ArMarkingShapeChoices)
	cb.Do("ArMarkingColorChoices", &t.ArMarkingColorChoices)
	cb.Do("ArJewelryChoices", &t.ArJewelryChoices)
	cb.Do("ArEyeColorChoices", &t.ArEyeColorChoices)
	cb.Do("ArMakeupChoices", &t.ArMakeupChoices)
	cb.Do("SnoFallbackFace", &t.SnoFallbackFace)
	cb.Do("SnoFallbackHairStyle", &t.SnoFallbackHairStyle)
	cb.Do("SnoFallbackHairColor", &t.SnoFallbackHairColor)
	cb.Do("SnoFallbackEyeColor", &t.SnoFallbackEyeColor)
	cb.Do("SnoFallbackMarkingColor", &t.SnoFallbackMarkingColor)
	cb.Do("NLastAllocatedRewardId", &t.NLastAllocatedRewardId)
}

type PlayAnimationMessageSpec struct {
	DwDuration         DT_UINT
	BForever           DT_INT
	SnoAnim            DT_SNO
	SnoPowerAnimKey    DT_SNO
	EWeaponClass       DT_INT
	NPermutationIndex  DT_INT
	FlAnimSpeedScale   DT_FLOAT
	HFluidObjectsImage DT_OPTIONAL[*DT_UINT]
}

func (t *PlayAnimationMessageSpec) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.DwDuration, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.BForever, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.SnoAnim, r, &Options{
		Flags: 1,
		Group: 6,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.SnoPowerAnimKey, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.EWeaponClass, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.NPermutationIndex, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.FlAnimSpeedScale, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.HFluidObjectsImage, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+36, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PlayAnimationMessageSpec) Walk(cb WalkCallback) {
	cb.Do("DwDuration", &t.DwDuration)
	cb.Do("BForever", &t.BForever)
	cb.Do("SnoAnim", &t.SnoAnim)
	cb.Do("SnoPowerAnimKey", &t.SnoPowerAnimKey)
	cb.Do("EWeaponClass", &t.EWeaponClass)
	cb.Do("NPermutationIndex", &t.NPermutationIndex)
	cb.Do("FlAnimSpeedScale", &t.FlAnimSpeedScale)
	cb.Do("HFluidObjectsImage", &t.HFluidObjectsImage)
}

type TriggerProximityData struct {
	PtProxData                DT_POLYMORPHIC_VARIABLEARRAY[*ProximityDataBase]
	Unk_d871dde               DT_RANGE[*DT_FLOAT]
	FProximityDetectorPulse   DT_INT
	FProximityDetectorEffect  DT_INT
	FProximityDetectorOneShot DT_INT
	Unk_3c08644               DT_INT
	Unk_4a90632               DT_INT
	ETriggerBehavior          DT_ENUM
	SnoQuest                  DT_SNO
	SnoConversation           DT_SNO
}

func (t *TriggerProximityData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.PtProxData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_d871dde, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.FProximityDetectorPulse, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.FProximityDetectorEffect, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.FProximityDetectorOneShot, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.Unk_3c08644, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.Unk_4a90632, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.ETriggerBehavior, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.SnoQuest, r, &Options{
		Flags: 1,
		Group: 31,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+60, &t.SnoConversation, r, &Options{
		Flags: 1,
		Group: 12,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+64, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TriggerProximityData) Walk(cb WalkCallback) {
	cb.Do("PtProxData", &t.PtProxData)
	cb.Do("Unk_d871dde", &t.Unk_d871dde)
	cb.Do("FProximityDetectorPulse", &t.FProximityDetectorPulse)
	cb.Do("FProximityDetectorEffect", &t.FProximityDetectorEffect)
	cb.Do("FProximityDetectorOneShot", &t.FProximityDetectorOneShot)
	cb.Do("Unk_3c08644", &t.Unk_3c08644)
	cb.Do("Unk_4a90632", &t.Unk_4a90632)
	cb.Do("ETriggerBehavior", &t.ETriggerBehavior)
	cb.Do("SnoQuest", &t.SnoQuest)
	cb.Do("SnoConversation", &t.SnoConversation)
}

type PetType_Table struct {
	// Inherits GameBalanceTable
	// Inherits PolymorphicBase
	DwType   DT_UINT
	DwPad    DT_UINT
	TEntries DT_VARIABLEARRAY[*PetType]
}

func (t *PetType_Table) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TEntries, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PetType_Table) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("TEntries", &t.TEntries)
}

type TriggerEventShowCaptionUI struct {
	// Inherits TriggerEvent
	// Inherits PolymorphicBase
	DwType          DT_UINT
	DwPad           DT_UINT
	TConditions     TriggerConditions
	FGenerated      DT_INT
	Unk_6cba752     DT_INT
	DwParentActorID DT_UINT
	SnoUI           DT_SNO
	Unk_6316fe8     DT_TAGMAP[*DT_ENUM]
}

func (t *TriggerEventShowCaptionUI) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.FGenerated, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_6cba752, r, &Options{Flags: 16}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.DwParentActorID, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.SnoUI, r, &Options{
		Flags: 1,
		Group: 46,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.Unk_6316fe8, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+104, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TriggerEventShowCaptionUI) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("TConditions", &t.TConditions)
	cb.Do("FGenerated", &t.FGenerated)
	cb.Do("Unk_6cba752", &t.Unk_6cba752)
	cb.Do("DwParentActorID", &t.DwParentActorID)
	cb.Do("SnoUI", &t.SnoUI)
	cb.Do("Unk_6316fe8", &t.Unk_6316fe8)
}

type MaterialBoolValueDefinition struct {
	// Inherits DefaultMaterialValueDefinition
	// Inherits PolymorphicBase
	DwType DT_UINT
	DwPad  DT_UINT
	VValue DT_VECTOR4D
}

func (t *MaterialBoolValueDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.VValue, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *MaterialBoolValueDefinition) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("VValue", &t.VValue)
}

type AttributeFormulaEntry_Table struct {
	// Inherits GameBalanceTable
	// Inherits PolymorphicBase
	DwType   DT_UINT
	DwPad    DT_UINT
	TEntries DT_VARIABLEARRAY[*AttributeFormulaEntry]
}

func (t *AttributeFormulaEntry_Table) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TEntries, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *AttributeFormulaEntry_Table) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("TEntries", &t.TEntries)
}

type GameFoundForTransferMessage struct {
	THeader     RequiredMessageHeader
	IsDungeon   DT_INT
	Unk_70b9617 DT_INT
}

func (t *GameFoundForTransferMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.IsDungeon, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.Unk_70b9617, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *GameFoundForTransferMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("IsDungeon", &t.IsDungeon)
	cb.Do("Unk_70b9617", &t.Unk_70b9617)
}

type PlayerDWordDataMessage struct {
	THeader               RequiredMessageHeader
	DwData                DT_UINT
	DwPlayerGameAccountId DT_UINT
}

func (t *PlayerDWordDataMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.DwData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPlayerGameAccountId, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PlayerDWordDataMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("DwData", &t.DwData)
	cb.Do("DwPlayerGameAccountId", &t.DwPlayerGameAccountId)
}

type WindowPieces struct {
	// Inherits WindowPiecesBase
	// Inherits PolymorphicBase
	DwType       DT_UINT
	DwPad        DT_UINT
	FlImageScale DT_FLOAT
	NPadding     DT_UINT
	HBkgrnd      DT_UINT
	HBorder      DT_UINT
	HCorner      DT_UINT
}

func (t *WindowPieces) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.FlImageScale, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.NPadding, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.HBkgrnd, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.HBorder, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.HCorner, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+40, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *WindowPieces) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("FlImageScale", &t.FlImageScale)
	cb.Do("NPadding", &t.NPadding)
	cb.Do("HBkgrnd", &t.HBkgrnd)
	cb.Do("HBorder", &t.HBorder)
	cb.Do("HCorner", &t.HCorner)
}

type ConsoleEvent struct{}

func (t *ConsoleEvent) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if _, err := r.Seek(p+1, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ConsoleEvent) Walk(cb WalkCallback) {}

type PlayerHealthSubcondition struct {
	// Inherits Type_d3c3637f
	// Inherits Subcondition
	// Inherits PolymorphicBase
	DwType        DT_UINT
	BNegate       DT_INT
	EComparisonOp DT_ENUM
	DwPad         DT_UINT
	Unk_6ea5eed   DT_FLOAT
}

func (t *PlayerHealthSubcondition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BNegate, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.EComparisonOp, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.Unk_6ea5eed, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+40, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PlayerHealthSubcondition) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("BNegate", &t.BNegate)
	cb.Do("EComparisonOp", &t.EComparisonOp)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("Unk_6ea5eed", &t.Unk_6ea5eed)
}

type GameTestingWorldEventSamplingStartMessage struct {
	THeader      RequiredMessageHeader
	SzMarkerName DT_CHARARRAY
	SnoSubzone   DT_SNO
	SnoQuest     DT_SNO
}

func (t *GameTestingWorldEventSamplingStartMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SzMarkerName, r, &Options{
		ArrayLength: 64,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.SnoSubzone, r, &Options{
		Flags: 1,
		Group: 80,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.SnoQuest, r, &Options{
		Flags: 1,
		Group: 31,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+88, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *GameTestingWorldEventSamplingStartMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("SzMarkerName", &t.SzMarkerName)
	cb.Do("SnoSubzone", &t.SnoSubzone)
	cb.Do("SnoQuest", &t.SnoQuest)
}

type LookLink struct {
	DwLookHash DT_UINT
}

func (t *LookLink) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.DwLookHash, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+4, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *LookLink) Walk(cb WalkCallback) {
	cb.Do("DwLookHash", &t.DwLookHash)
}

type MarkerAudioVolumeData struct {
	// Inherits MarkerDataBase
	// Inherits PolymorphicBase
	DwType      DT_UINT
	DwPad       DT_UINT
	SnoContext  DT_SNO
	Unk_a3e2a60 DT_ENUM
	Unk_d415903 DT_SNO
}

func (t *MarkerAudioVolumeData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoContext, r, &Options{
		Flags: 1,
		Group: 93,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.Unk_a3e2a60, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_d415903, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *MarkerAudioVolumeData) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("SnoContext", &t.SnoContext)
	cb.Do("Unk_a3e2a60", &t.Unk_a3e2a60)
	cb.Do("Unk_d415903", &t.Unk_d415903)
}

type MarkerDoorGizmoData struct {
	FDoorOpen     DT_INT
	Unk_ec10912   DT_INT
	DwPrefixValue DT_INT
}

func (t *MarkerDoorGizmoData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.FDoorOpen, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.Unk_ec10912, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwPrefixValue, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+12, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *MarkerDoorGizmoData) Walk(cb WalkCallback) {
	cb.Do("FDoorOpen", &t.FDoorOpen)
	cb.Do("Unk_ec10912", &t.Unk_ec10912)
	cb.Do("DwPrefixValue", &t.DwPrefixValue)
}

type PlayerIsMaxLevelSubcondition struct {
	// Inherits Subcondition
	// Inherits PolymorphicBase
	DwType  DT_UINT
	BNegate DT_INT
	DwPad   DT_UINT
}

func (t *PlayerIsMaxLevelSubcondition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BNegate, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PlayerIsMaxLevelSubcondition) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("BNegate", &t.BNegate)
	cb.Do("DwPad", &t.DwPad)
}

type FlippyMessage struct {
	THeader           RequiredMessageHeader
	AnnLauncher       DT_ACD_NETWORK_NAME
	SnoFlippyParticle DT_SNO
	SnoActorLoot      DT_SNO
	WpSource          DT_VECTOR3D
	WpDest            DT_VECTOR3D
	Unk_18f36c0       DT_INT
	Unk_c00b36a       DT_ENUM
}

func (t *FlippyMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.AnnLauncher, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SnoFlippyParticle, r, &Options{
		Flags: 1,
		Group: 27,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.SnoActorLoot, r, &Options{
		Flags: 1,
		Group: 1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.WpSource, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.WpDest, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.Unk_18f36c0, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+60, &t.Unk_c00b36a, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+64, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *FlippyMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("AnnLauncher", &t.AnnLauncher)
	cb.Do("SnoFlippyParticle", &t.SnoFlippyParticle)
	cb.Do("SnoActorLoot", &t.SnoActorLoot)
	cb.Do("WpSource", &t.WpSource)
	cb.Do("WpDest", &t.WpDest)
	cb.Do("Unk_18f36c0", &t.Unk_18f36c0)
	cb.Do("Unk_c00b36a", &t.Unk_c00b36a)
}

type NullProximityData struct {
	// Inherits ProximityDataBase
	// Inherits PolymorphicBase
	DwType DT_UINT
	DwPad  DT_UINT
}

func (t *NullProximityData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *NullProximityData) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
}

type VertexDensitySettings struct {
	Unk_9c94172 DT_FLOAT
}

func (t *VertexDensitySettings) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Unk_9c94172, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+4, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *VertexDensitySettings) Walk(cb WalkCallback) {
	cb.Do("Unk_9c94172", &t.Unk_9c94172)
}

type GBIDDataMessage struct {
	THeader  RequiredMessageHeader
	GbidData DT_GBID
}

func (t *GBIDDataMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.GbidData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+20, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *GBIDDataMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("GbidData", &t.GbidData)
}

type DecalTemplate struct {
	SzName   DT_CSTRING[*DT_BYTE]
	SnoDecal DT_SNO
}

func (t *DecalTemplate) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SzName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoDecal, r, &Options{
		Flags: 1,
		Group: 27,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *DecalTemplate) Walk(cb WalkCallback) {
	cb.Do("SzName", &t.SzName)
	cb.Do("SnoDecal", &t.SnoDecal)
}

type PlayerHasFollowerSubcondition struct {
	// Inherits Type_d3c3637f
	// Inherits Subcondition
	// Inherits PolymorphicBase
	DwType        DT_UINT
	BNegate       DT_INT
	EComparisonOp DT_ENUM
	DwPad         DT_UINT
	NNumFollowers DT_INT
}

func (t *PlayerHasFollowerSubcondition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BNegate, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.EComparisonOp, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.NNumFollowers, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+40, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PlayerHasFollowerSubcondition) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("BNegate", &t.BNegate)
	cb.Do("EComparisonOp", &t.EComparisonOp)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("NNumFollowers", &t.NNumFollowers)
}

type Type_8fccfaf2 struct {
	TValueMin DT_UINT
	TValueMax DT_UINT
	TTime     DT_FLOAT
}

func (t *Type_8fccfaf2) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.TValueMin, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.TValueMax, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.TTime, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+12, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_8fccfaf2) Walk(cb WalkCallback) {
	cb.Do("TValueMin", &t.TValueMin)
	cb.Do("TValueMax", &t.TValueMax)
	cb.Do("TTime", &t.TTime)
}

type PlayNonPositionalSoundMessage struct {
	THeader  RequiredMessageHeader
	SnoSound DT_SNO
}

func (t *PlayNonPositionalSoundMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoSound, r, &Options{
		Flags: 1,
		Group: 40,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+20, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PlayNonPositionalSoundMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("SnoSound", &t.SnoSound)
}

type Type_904ab211 struct {
	// Inherits PowerConditionBase
	// Inherits PolymorphicBase
	DwType         DT_UINT
	BInverse       DT_INT
	DwPad          DT_UINT
	SzVariableName DT_UINT
	FlValue        DT_FLOAT
}

func (t *Type_904ab211) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BInverse, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SzVariableName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.FlValue, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_904ab211) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("BInverse", &t.BInverse)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("SzVariableName", &t.SzVariableName)
	cb.Do("FlValue", &t.FlValue)
}

type ActorGroup struct {
	UHash  DT_UINT
	SzName DT_CHARARRAY
}

func (t *ActorGroup) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.UHash, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.SzName, r, &Options{
		ArrayLength: 64,
		Flags:       1,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+68, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ActorGroup) Walk(cb WalkCallback) {
	cb.Do("UHash", &t.UHash)
	cb.Do("SzName", &t.SzName)
}

type AnimTreeDefinition struct {
	DwMachineTime DT_UINT
	DwFlags       DT_UINT
	PtLeaf        DT_VARIABLEARRAY[*AnimTreeLeaf]
	PtNode        DT_VARIABLEARRAY[*AnimTreeNode]
	PtSyncGroup   DT_VARIABLEARRAY[*DT_INT]
	PtSyncGroups  DT_VARIABLEARRAY[*AnimSyncGroup]
	DwRootNode    DT_UINT
	DwNextID      DT_UINT
	Unk_a7fd7f7   DT_ENUM
}

func (t *AnimTreeDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwMachineTime, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwFlags, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.PtLeaf, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.PtNode, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.PtSyncGroup, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.PtSyncGroups, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.DwRootNode, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.DwNextID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.Unk_a7fd7f7, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+96, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *AnimTreeDefinition) Walk(cb WalkCallback) {
	cb.Do("DwMachineTime", &t.DwMachineTime)
	cb.Do("DwFlags", &t.DwFlags)
	cb.Do("PtLeaf", &t.PtLeaf)
	cb.Do("PtNode", &t.PtNode)
	cb.Do("PtSyncGroup", &t.PtSyncGroup)
	cb.Do("PtSyncGroups", &t.PtSyncGroups)
	cb.Do("DwRootNode", &t.DwRootNode)
	cb.Do("DwNextID", &t.DwNextID)
	cb.Do("Unk_a7fd7f7", &t.Unk_a7fd7f7)
}

type SavedTransmog struct {
	BUnlocked       DT_INT
	ArTransmogSlots DT_FIXEDARRAY[*TransmogSlot]
}

func (t *SavedTransmog) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.BUnlocked, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.ArTransmogSlots, r, &Options{
		ArrayLength: 15,
		Flags:       8,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+248, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *SavedTransmog) Walk(cb WalkCallback) {
	cb.Do("BUnlocked", &t.BUnlocked)
	cb.Do("ArTransmogSlots", &t.ArTransmogSlots)
}

type Type_9109ba33 struct {
	Unk_d80ac35 DT_INT
	Unk_2707579 DT_VARIABLEARRAY[*DT_INT]
}

func (t *Type_9109ba33) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Unk_d80ac35, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.Unk_2707579, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_9109ba33) Walk(cb WalkCallback) {
	cb.Do("Unk_d80ac35", &t.Unk_d80ac35)
	cb.Do("Unk_2707579", &t.Unk_2707579)
}

type OnRetreatCompleteCallback struct {
	// Inherits BuffCallbackBase
	// Inherits PolymorphicBase
	DwType                DT_UINT
	DwPad                 DT_UINT
	SnoTriggerEffectGroup DT_SNO
	ArConditions          DT_POLYMORPHIC_VARIABLEARRAY[*DT_INT64]
}

func (t *OnRetreatCompleteCallback) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoTriggerEffectGroup, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ArConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *OnRetreatCompleteCallback) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("SnoTriggerEffectGroup", &t.SnoTriggerEffectGroup)
	cb.Do("ArConditions", &t.ArConditions)
}

type PowerConditionOnChance struct {
	// Inherits PowerConditionBase
	// Inherits PolymorphicBase
	DwType   DT_UINT
	BInverse DT_INT
	DwPad    DT_UINT
	TChance  DT_STRING_FORMULA
	ESubject DT_ENUM
}

func (t *PowerConditionOnChance) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BInverse, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.TChance, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.ESubject, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+64, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PowerConditionOnChance) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("BInverse", &t.BInverse)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("TChance", &t.TChance)
	cb.Do("ESubject", &t.ESubject)
}

type EnchantAffixChoice struct {
	SnoAffix DT_SNO
	DwSeed   DT_UINT
}

func (t *EnchantAffixChoice) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoAffix, r, &Options{
		Flags: 1,
		Group: 104,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.DwSeed, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *EnchantAffixChoice) Walk(cb WalkCallback) {
	cb.Do("SnoAffix", &t.SnoAffix)
	cb.Do("DwSeed", &t.DwSeed)
}

type NPCComponentEntry struct {
	BAny              DT_INT
	PtValidComponents DT_VARIABLEARRAY[*ValidComponent]
}

func (t *NPCComponentEntry) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.BAny, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.PtValidComponents, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *NPCComponentEntry) Walk(cb WalkCallback) {
	cb.Do("BAny", &t.BAny)
	cb.Do("PtValidComponents", &t.PtValidComponents)
}

type PetDetachMessage struct {
	THeader             RequiredMessageHeader
	AnnPet              DT_ACD_NETWORK_NAME
	BDisplayChatMessage DT_INT
	Unk_70bf7e7         DT_UINT
}

func (t *PetDetachMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.AnnPet, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.BDisplayChatMessage, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.Unk_70bf7e7, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PetDetachMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("AnnPet", &t.AnnPet)
	cb.Do("BDisplayChatMessage", &t.BDisplayChatMessage)
	cb.Do("Unk_70bf7e7", &t.Unk_70bf7e7)
}

type NPCComponentGroup struct {
	SName        DT_UINT
	ArComponents DT_FIXEDARRAY[*DT_UINT]
	TColorSet    NPCColorSet
}

func (t *NPCComponentGroup) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.ArComponents, r, &Options{
		ArrayLength: 4,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.TColorSet, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+44, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *NPCComponentGroup) Walk(cb WalkCallback) {
	cb.Do("SName", &t.SName)
	cb.Do("ArComponents", &t.ArComponents)
	cb.Do("TColorSet", &t.TColorSet)
}

type EncounterDefinition struct {
	SnoSymbol DT_SNO
}

func (t *EncounterDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.SnoSymbol, r, &Options{
		Flags: 513,
		Group: 1,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+12, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *EncounterDefinition) Walk(cb WalkCallback) {
	cb.Do("SnoSymbol", &t.SnoSymbol)
}

type Type_92704e7b struct {
	NTreeFolderIndent  DT_INT
	NTreeFolderSpacing DT_INT
}

func (t *Type_92704e7b) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.NTreeFolderIndent, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.NTreeFolderSpacing, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_92704e7b) Walk(cb WalkCallback) {
	cb.Do("NTreeFolderIndent", &t.NTreeFolderIndent)
	cb.Do("NTreeFolderSpacing", &t.NTreeFolderSpacing)
}

type DungeonSpawningPoolEntry struct {
	THeader GBIDHeader
}

func (t *DungeonSpawningPoolEntry) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+260, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *DungeonSpawningPoolEntry) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
}

type ReverbDefinition struct {
	TAuxBus          WwiseName
	Unk_836cb29      DT_FLOAT
	PtStateValues    DT_VARIABLEARRAY[*WwiseSwitchValue]
	PtSwitchValues   DT_VARIABLEARRAY[*WwiseSwitchValue]
	PtGameParameters DT_VARIABLEARRAY[*WwiseGameParameter]
}

func (t *ReverbDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.TAuxBus, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.Unk_836cb29, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.PtStateValues, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.PtSwitchValues, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.PtGameParameters, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+64, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ReverbDefinition) Walk(cb WalkCallback) {
	cb.Do("TAuxBus", &t.TAuxBus)
	cb.Do("Unk_836cb29", &t.Unk_836cb29)
	cb.Do("PtStateValues", &t.PtStateValues)
	cb.Do("PtSwitchValues", &t.PtSwitchValues)
	cb.Do("PtGameParameters", &t.PtGameParameters)
}

type ParagonGlyphExperience_Table struct {
	// Inherits GameBalanceTable
	// Inherits PolymorphicBase
	DwType   DT_UINT
	DwPad    DT_UINT
	TEntries DT_VARIABLEARRAY[*ParagonGlyphExperience]
}

func (t *ParagonGlyphExperience_Table) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TEntries, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ParagonGlyphExperience_Table) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("TEntries", &t.TEntries)
}

type PlayerCompletedRepeatableQuestEntry struct {
	SnoQuest        DT_SNO
	NLastOccurrence DT_INT
}

func (t *PlayerCompletedRepeatableQuestEntry) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoQuest, r, &Options{
		Flags: 1,
		Group: 31,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.NLastOccurrence, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PlayerCompletedRepeatableQuestEntry) Walk(cb WalkCallback) {
	cb.Do("SnoQuest", &t.SnoQuest)
	cb.Do("NLastOccurrence", &t.NLastOccurrence)
}

type OctreeCube struct {
	WpOrigin DT_VECTOR3D
	WdSize   DT_FLOAT
}

func (t *OctreeCube) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.WpOrigin, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.WdSize, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *OctreeCube) Walk(cb WalkCallback) {
	cb.Do("WpOrigin", &t.WpOrigin)
	cb.Do("WdSize", &t.WdSize)
}

type OctreeLeaf struct {
	NPrimitiveIndex DT_INT
	NPrimitiveCount DT_INT
}

func (t *OctreeLeaf) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.NPrimitiveIndex, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.NPrimitiveCount, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *OctreeLeaf) Walk(cb WalkCallback) {
	cb.Do("NPrimitiveIndex", &t.NPrimitiveIndex)
	cb.Do("NPrimitiveCount", &t.NPrimitiveCount)
}

type OctreeNode struct {
	PdwChildren DT_FIXEDARRAY[*DT_UINT]
}

func (t *OctreeNode) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.PdwChildren, r, &Options{
		ArrayLength: 8,
		Flags:       1,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *OctreeNode) Walk(cb WalkCallback) {
	cb.Do("PdwChildren", &t.PdwChildren)
}

type GlobalIntensityLevels struct {
	// Inherits GlobalBase
	// Inherits PolymorphicBase
	DwType   DT_UINT
	DwPad    DT_UINT
	ArParams DT_VARIABLEARRAY[*IntensityParam]
}

func (t *GlobalIntensityLevels) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.ArParams, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *GlobalIntensityLevels) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("ArParams", &t.ArParams)
}

type PersistentEventUpdateMessage struct {
	THeader                RequiredMessageHeader
	SnoWorld               DT_SNO
	SnoSubzone             DT_SNO
	SnoQuest               DT_SNO
	WpLocation             DT_VECTOR3D
	SnoMarkerSet           DT_SNO
	NMarkerID              DT_INT
	DwStartTime            DT_INT64
	DwEndTime              DT_INT64
	DwInstanceID           DT_UINT
	GbidSubzoneModifierTag DT_GBID
}

func (t *PersistentEventUpdateMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoWorld, r, &Options{
		Flags: 1,
		Group: 48,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.SnoSubzone, r, &Options{
		Flags: 1,
		Group: 80,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SnoQuest, r, &Options{
		Flags: 1,
		Group: 31,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.WpLocation, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.SnoMarkerSet, r, &Options{
		Flags: 1,
		Group: 24,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.NMarkerID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.DwStartTime, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.DwEndTime, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.DwInstanceID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.GbidSubzoneModifierTag, r, &Options{
		Flags: 1,
		Group: 60,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+72, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PersistentEventUpdateMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("SnoWorld", &t.SnoWorld)
	cb.Do("SnoSubzone", &t.SnoSubzone)
	cb.Do("SnoQuest", &t.SnoQuest)
	cb.Do("WpLocation", &t.WpLocation)
	cb.Do("SnoMarkerSet", &t.SnoMarkerSet)
	cb.Do("NMarkerID", &t.NMarkerID)
	cb.Do("DwStartTime", &t.DwStartTime)
	cb.Do("DwEndTime", &t.DwEndTime)
	cb.Do("DwInstanceID", &t.DwInstanceID)
	cb.Do("GbidSubzoneModifierTag", &t.GbidSubzoneModifierTag)
}

type BroadcastTextMessage struct {
	THeader RequiredMessageHeader
	SzMsg   DT_CHARARRAY
}

func (t *BroadcastTextMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SzMsg, r, &Options{
		ArrayLength: 1024,
		Flags:       1,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+1040, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *BroadcastTextMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("SzMsg", &t.SzMsg)
}

type Type_94666cb9 struct {
	DwID         DT_UINT
	SnoCondition DT_SNO
}

func (t *Type_94666cb9) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.DwID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.SnoCondition, r, &Options{
		Flags: 513,
		Group: 51,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_94666cb9) Walk(cb WalkCallback) {
	cb.Do("DwID", &t.DwID)
	cb.Do("SnoCondition", &t.SnoCondition)
}

type Type_9467bb76 struct {
	Unk_9a78163 DT_INT64
}

func (t *Type_9467bb76) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Unk_9a78163, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_9467bb76) Walk(cb WalkCallback) {
	cb.Do("Unk_9a78163", &t.Unk_9a78163)
}

type MarkingShapeDefinition struct {
	EClassRestriction  DT_ENUM
	FlEmissiveStrength DT_FLOAT
	HIconImage         DT_UINT
	SnoMaskFace        DT_SNO
	SnoMaskBody        DT_SNO
	SnoDefaultColor    DT_SNO
}

func (t *MarkingShapeDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.EClassRestriction, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.FlEmissiveStrength, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.HIconImage, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.SnoMaskFace, r, &Options{
		Flags: 1,
		Group: 44,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SnoMaskBody, r, &Options{
		Flags: 1,
		Group: 44,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.SnoDefaultColor, r, &Options{
		Flags: 1,
		Group: 133,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *MarkingShapeDefinition) Walk(cb WalkCallback) {
	cb.Do("EClassRestriction", &t.EClassRestriction)
	cb.Do("FlEmissiveStrength", &t.FlEmissiveStrength)
	cb.Do("HIconImage", &t.HIconImage)
	cb.Do("SnoMaskFace", &t.SnoMaskFace)
	cb.Do("SnoMaskBody", &t.SnoMaskBody)
	cb.Do("SnoDefaultColor", &t.SnoDefaultColor)
}

type MaxKeyedDungeonCompletedSubcondition struct {
	// Inherits Subcondition
	// Inherits PolymorphicBase
	DwType  DT_UINT
	BNegate DT_INT
	DwPad   DT_UINT
	NValue  DT_INT
}

func (t *MaxKeyedDungeonCompletedSubcondition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BNegate, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.NValue, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *MaxKeyedDungeonCompletedSubcondition) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("BNegate", &t.BNegate)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("NValue", &t.NValue)
}

type Type_95119e98 struct {
	NBatchId      DT_INT
	DwTilePosHash DT_UINT
	ETileType     DT_ENUM
	DwNodeId      DT_UINT
	DwGroupId     DT_UINT
	DwFlags       DT_UINT
}

func (t *Type_95119e98) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.NBatchId, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.DwTilePosHash, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.ETileType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwNodeId, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.DwGroupId, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwFlags, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_95119e98) Walk(cb WalkCallback) {
	cb.Do("NBatchId", &t.NBatchId)
	cb.Do("DwTilePosHash", &t.DwTilePosHash)
	cb.Do("ETileType", &t.ETileType)
	cb.Do("DwNodeId", &t.DwNodeId)
	cb.Do("DwGroupId", &t.DwGroupId)
	cb.Do("DwFlags", &t.DwFlags)
}

type Type_95269030 struct {
	FlDist       DT_FLOAT
	NSlots       DT_INT
	Unk_13fdbf   DT_INT
	SLayer       DT_UINT
	Unk_8680393  DT_INT
	Unk_8337d1e  DT_INT
	Unk_395f1b4  DT_INT
	TValidWindow DT_RANGE[*DT_FLOAT]
	Unk_6ec4d4   DT_INT
	Unk_1281fc2  DT_FLOAT
	Unk_6fb4c8e  DT_FLOAT
	Unk_2392c67  DT_FLOAT
}

func (t *Type_95269030) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.FlDist, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.NSlots, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.Unk_13fdbf, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.SLayer, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_8680393, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.Unk_8337d1e, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_395f1b4, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.TValidWindow, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.Unk_6ec4d4, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.Unk_1281fc2, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.Unk_6fb4c8e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.Unk_2392c67, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+52, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_95269030) Walk(cb WalkCallback) {
	cb.Do("FlDist", &t.FlDist)
	cb.Do("NSlots", &t.NSlots)
	cb.Do("Unk_13fdbf", &t.Unk_13fdbf)
	cb.Do("SLayer", &t.SLayer)
	cb.Do("Unk_8680393", &t.Unk_8680393)
	cb.Do("Unk_8337d1e", &t.Unk_8337d1e)
	cb.Do("Unk_395f1b4", &t.Unk_395f1b4)
	cb.Do("TValidWindow", &t.TValidWindow)
	cb.Do("Unk_6ec4d4", &t.Unk_6ec4d4)
	cb.Do("Unk_1281fc2", &t.Unk_1281fc2)
	cb.Do("Unk_6fb4c8e", &t.Unk_6fb4c8e)
	cb.Do("Unk_2392c67", &t.Unk_2392c67)
}

type Type_954deb71 struct {
	// Inherits BuffCallbackBase
	// Inherits PolymorphicBase
	DwType                DT_UINT
	DwPad                 DT_UINT
	SnoTriggerEffectGroup DT_SNO
	ArConditions          DT_POLYMORPHIC_VARIABLEARRAY[*DT_INT64]
}

func (t *Type_954deb71) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoTriggerEffectGroup, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ArConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_954deb71) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("SnoTriggerEffectGroup", &t.SnoTriggerEffectGroup)
	cb.Do("ArConditions", &t.ArConditions)
}

type PlayerClassCoreStatBenefitEntry struct {
	Unk_f2e7542          DT_ENUM
	FlContributionScalar DT_FLOAT
	EBenefitCondition    DT_ENUM
	Unk_aae71b4          DT_UINT
}

func (t *PlayerClassCoreStatBenefitEntry) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Unk_f2e7542, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.FlContributionScalar, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.EBenefitCondition, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.Unk_aae71b4, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PlayerClassCoreStatBenefitEntry) Walk(cb WalkCallback) {
	cb.Do("Unk_f2e7542", &t.Unk_f2e7542)
	cb.Do("FlContributionScalar", &t.FlContributionScalar)
	cb.Do("EBenefitCondition", &t.EBenefitCondition)
	cb.Do("Unk_aae71b4", &t.Unk_aae71b4)
}

type QuestCallbackSubcondition struct {
	// Inherits QuestSubconditionBase
	// Inherits Subcondition
	// Inherits PolymorphicBase
	DwType       DT_UINT
	BNegate      DT_INT
	SnoQuest     DT_SNO
	DwPad        DT_UINT
	NStepUID     DT_INT
	NCallbackUID DT_UINT
	EComp        DT_ENUM
	NCount       DT_UINT
}

func (t *QuestCallbackSubcondition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BNegate, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SnoQuest, r, &Options{
		Flags: 513,
		Group: 31,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.NStepUID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.NCallbackUID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.EComp, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.NCount, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *QuestCallbackSubcondition) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("BNegate", &t.BNegate)
	cb.Do("SnoQuest", &t.SnoQuest)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("NStepUID", &t.NStepUID)
	cb.Do("NCallbackUID", &t.NCallbackUID)
	cb.Do("EComp", &t.EComp)
	cb.Do("NCount", &t.NCount)
}

type SceneChunk struct {
	Snoname    DT_SNO
	Transform  PRTransform
	TSceneSpec SceneSpecification
}

func (t *SceneChunk) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Snoname, r, &Options{
		Flags: 1,
		Group: 33,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.Transform, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.TSceneSpec, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+88, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *SceneChunk) Walk(cb WalkCallback) {
	cb.Do("Snoname", &t.Snoname)
	cb.Do("Transform", &t.Transform)
	cb.Do("TSceneSpec", &t.TSceneSpec)
}

type SceneDefinition struct {
	DwFlags         DT_UINT
	AabbBounds      AABB
	AabbLayerBounds AABB
	FlGridSize      DT_FLOAT
	ArLayers        DT_VARIABLEARRAY[*DT_SNO]
	TLookLink       LookLink
	Unk_f60a9cd     DT_VARIABLEARRAY[*Type_9109ba33]
	SnoAppearance   DT_SNO
	SnoAudioContext DT_SNO
	FlTileX         DT_FLOAT
	FlTileY         DT_FLOAT
	PtAIPathData    DT_VARIABLEARRAY[*AIPathData]
	TLevelAreaGrid  Type_ff4098b9
	EDRLGTileType   DT_ENUM
	Unk_29b7731     Type_ff4098b9
	TFogMask        FogMask
}

func (t *SceneDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.AabbBounds, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.AabbLayerBounds, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+60, &t.FlGridSize, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.ArLayers, r, &Options{
		Flags: 1,
		Group: 24,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.TLookLink, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.Unk_f60a9cd, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+104, &t.SnoAppearance, r, &Options{
		Flags: 1,
		Group: 9,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+108, &t.SnoAudioContext, r, &Options{
		Flags: 1,
		Group: 93,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.FlTileX, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+116, &t.FlTileY, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.PtAIPathData, r, &Options{Flags: 2097152}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+136, &t.TLevelAreaGrid, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+176, &t.EDRLGTileType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+184, &t.Unk_29b7731, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+224, &t.TFogMask, r, &Options{Flags: 2097152}); err != nil {
		return err
	}
	if _, err := r.Seek(p+248, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *SceneDefinition) Walk(cb WalkCallback) {
	cb.Do("DwFlags", &t.DwFlags)
	cb.Do("AabbBounds", &t.AabbBounds)
	cb.Do("AabbLayerBounds", &t.AabbLayerBounds)
	cb.Do("FlGridSize", &t.FlGridSize)
	cb.Do("ArLayers", &t.ArLayers)
	cb.Do("TLookLink", &t.TLookLink)
	cb.Do("Unk_f60a9cd", &t.Unk_f60a9cd)
	cb.Do("SnoAppearance", &t.SnoAppearance)
	cb.Do("SnoAudioContext", &t.SnoAudioContext)
	cb.Do("FlTileX", &t.FlTileX)
	cb.Do("FlTileY", &t.FlTileY)
	cb.Do("PtAIPathData", &t.PtAIPathData)
	cb.Do("TLevelAreaGrid", &t.TLevelAreaGrid)
	cb.Do("EDRLGTileType", &t.EDRLGTileType)
	cb.Do("Unk_29b7731", &t.Unk_29b7731)
	cb.Do("TFogMask", &t.TFogMask)
}

type OperateWorldTierSelectMessage struct {
	THeader  RequiredMessageHeader
	AnnGizmo DT_ACD_NETWORK_NAME
	BSuccess DT_INT
}

func (t *OperateWorldTierSelectMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.AnnGizmo, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.BSuccess, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+28, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *OperateWorldTierSelectMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("AnnGizmo", &t.AnnGizmo)
	cb.Do("BSuccess", &t.BSuccess)
}

type HealthPotionData struct {
	DwID           DT_UINT
	NRequiredLevel DT_INT
	Unk_96f5779    DT_FLOAT
	Unk_fe56814    DT_FLOAT
	Unk_5cc36f7    DT_FLOAT
	Unk_9a29462    DT_FLOAT
	SnoPotionItem  DT_SNO
	Unk_c056f0     DT_UINT
	Unk_6418727    DT_UINT
	Unk_d56915b    DT_UINT
	Unk_4679d19    DT_UINT
	Unk_502de9d    DT_UINT
}

func (t *HealthPotionData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.DwID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.NRequiredLevel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.Unk_96f5779, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.Unk_fe56814, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_5cc36f7, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.Unk_9a29462, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SnoPotionItem, r, &Options{
		Flags: 1,
		Group: 73,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.Unk_c056f0, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.Unk_6418727, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.Unk_d56915b, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.Unk_4679d19, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.Unk_502de9d, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *HealthPotionData) Walk(cb WalkCallback) {
	cb.Do("DwID", &t.DwID)
	cb.Do("NRequiredLevel", &t.NRequiredLevel)
	cb.Do("Unk_96f5779", &t.Unk_96f5779)
	cb.Do("Unk_fe56814", &t.Unk_fe56814)
	cb.Do("Unk_5cc36f7", &t.Unk_5cc36f7)
	cb.Do("Unk_9a29462", &t.Unk_9a29462)
	cb.Do("SnoPotionItem", &t.SnoPotionItem)
	cb.Do("Unk_c056f0", &t.Unk_c056f0)
	cb.Do("Unk_6418727", &t.Unk_6418727)
	cb.Do("Unk_d56915b", &t.Unk_d56915b)
	cb.Do("Unk_4679d19", &t.Unk_4679d19)
	cb.Do("Unk_502de9d", &t.Unk_502de9d)
}

type MailDeleteResponseMessage struct {
	THeader RequiredMessageHeader
	IdMail  Type_f5ac91bb
	IdErr   DT_INT
}

func (t *MailDeleteResponseMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.IdMail, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.IdErr, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+40, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *MailDeleteResponseMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("IdMail", &t.IdMail)
	cb.Do("IdErr", &t.IdErr)
}

type TrickleMessage struct {
	THeader                       RequiredMessageHeader
	Ann                           DT_ACD_NETWORK_NAME
	SnoActor                      DT_SNO
	TPlace                        SharedServerWorldPlace
	Unk_70bf7e7                   DT_OPTIONAL[*DT_UINT]
	SnoLevelArea                  DT_SNO
	FlHealthPercent               DT_OPTIONAL[*DT_FLOAT]
	Unk_c8448e5                   DT_OPTIONAL[*DT_FLOAT]
	SnoPortalDestWorld            DT_OPTIONAL[*DT_SNO]
	SnoPortalDestLevelArea        DT_OPTIONAL[*DT_SNO]
	SnoItem                       DT_OPTIONAL[*DT_SNO]
	ETeam                         DT_OPTIONAL[*DT_ENUM]
	EConversationIcon             DT_OPTIONAL[*DT_ENUM]
	Unk_cbe0ae6                   DT_OPTIONAL[*DT_SNO]
	Unk_3890c34                   DT_OPTIONAL[*DT_SNO]
	SnoPhasingVisibilityCondition DT_OPTIONAL[*DT_SNO]
	ETrickleInfoType              DT_ENUM
	DwTrickleFlags                DT_UINT
	DwHeadstoneCorpseReviveTime   DT_OPTIONAL[*DT_INT]
	HMinimapIconImage             DT_OPTIONAL[*DT_UINT]
	HMinimapStringLabel           DT_OPTIONAL[*DT_UINT]
	SnoStringList                 DT_OPTIONAL[*DT_SNO]
	FMaxDisplayRangeSq            DT_OPTIONAL[*DT_FLOAT]
	NAction                       DT_OPTIONAL[*DT_INT]
	UEngagedWithRareTime          DT_OPTIONAL[*DT_UINT]
	BInCombat                     DT_OPTIONAL[*DT_INT]
	Unk_c9c5de                    DT_OPTIONAL[*DT_UINT]
}

func (t *TrickleMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Ann, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SnoActor, r, &Options{
		Flags: 1,
		Group: 1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.TPlace, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.Unk_70bf7e7, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.SnoLevelArea, r, &Options{
		Flags: 1,
		Group: 22,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+60, &t.FlHealthPercent, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.Unk_c8448e5, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.SnoPortalDestWorld, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.SnoPortalDestLevelArea, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.SnoItem, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+100, &t.ETeam, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+108, &t.EConversationIcon, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+116, &t.Unk_cbe0ae6, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+124, &t.Unk_3890c34, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+132, &t.SnoPhasingVisibilityCondition, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+140, &t.ETrickleInfoType, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+144, &t.DwTrickleFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+148, &t.DwHeadstoneCorpseReviveTime, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+156, &t.HMinimapIconImage, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+164, &t.HMinimapStringLabel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+172, &t.SnoStringList, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+180, &t.FMaxDisplayRangeSq, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+188, &t.NAction, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+196, &t.UEngagedWithRareTime, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+204, &t.BInCombat, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+212, &t.Unk_c9c5de, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+220, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TrickleMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("Ann", &t.Ann)
	cb.Do("SnoActor", &t.SnoActor)
	cb.Do("TPlace", &t.TPlace)
	cb.Do("Unk_70bf7e7", &t.Unk_70bf7e7)
	cb.Do("SnoLevelArea", &t.SnoLevelArea)
	cb.Do("FlHealthPercent", &t.FlHealthPercent)
	cb.Do("Unk_c8448e5", &t.Unk_c8448e5)
	cb.Do("SnoPortalDestWorld", &t.SnoPortalDestWorld)
	cb.Do("SnoPortalDestLevelArea", &t.SnoPortalDestLevelArea)
	cb.Do("SnoItem", &t.SnoItem)
	cb.Do("ETeam", &t.ETeam)
	cb.Do("EConversationIcon", &t.EConversationIcon)
	cb.Do("Unk_cbe0ae6", &t.Unk_cbe0ae6)
	cb.Do("Unk_3890c34", &t.Unk_3890c34)
	cb.Do("SnoPhasingVisibilityCondition", &t.SnoPhasingVisibilityCondition)
	cb.Do("ETrickleInfoType", &t.ETrickleInfoType)
	cb.Do("DwTrickleFlags", &t.DwTrickleFlags)
	cb.Do("DwHeadstoneCorpseReviveTime", &t.DwHeadstoneCorpseReviveTime)
	cb.Do("HMinimapIconImage", &t.HMinimapIconImage)
	cb.Do("HMinimapStringLabel", &t.HMinimapStringLabel)
	cb.Do("SnoStringList", &t.SnoStringList)
	cb.Do("FMaxDisplayRangeSq", &t.FMaxDisplayRangeSq)
	cb.Do("NAction", &t.NAction)
	cb.Do("UEngagedWithRareTime", &t.UEngagedWithRareTime)
	cb.Do("BInCombat", &t.BInCombat)
	cb.Do("Unk_c9c5de", &t.Unk_c9c5de)
}

type InterpolationPathHeader struct {
	TLoopPointStart       DT_FLOAT
	TLoopPointEnd         DT_FLOAT
	NDistributionFunction DT_ENUM
	Unk_2312508           DT_ENUM
	ArInterpScalar        DT_VARIABLEARRAY[*InterpolationScalar]
	DwFlags               DT_UINT
}

func (t *InterpolationPathHeader) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.TLoopPointStart, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.TLoopPointEnd, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.NDistributionFunction, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.Unk_2312508, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.ArInterpScalar, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.DwFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if _, err := r.Seek(p+40, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *InterpolationPathHeader) Walk(cb WalkCallback) {
	cb.Do("TLoopPointStart", &t.TLoopPointStart)
	cb.Do("TLoopPointEnd", &t.TLoopPointEnd)
	cb.Do("NDistributionFunction", &t.NDistributionFunction)
	cb.Do("Unk_2312508", &t.Unk_2312508)
	cb.Do("ArInterpScalar", &t.ArInterpScalar)
	cb.Do("DwFlags", &t.DwFlags)
}

type TransmogEnableMessage struct {
	THeader RequiredMessageHeader
	ESlot   DT_ENUM
	BEnable DT_INT
}

func (t *TransmogEnableMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.ESlot, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.BEnable, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TransmogEnableMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("ESlot", &t.ESlot)
	cb.Do("BEnable", &t.BEnable)
}

type WallPiece struct {
	SnonameObject       DT_SNO_NAME
	SzLookName          DT_UINT
	DwShaderMapOverride DT_UINT
	Unk_189be9b         DT_INT
	Unk_94a2b91         DT_INT
	Unk_d094b9a         DT_ENUM
	FlWeight            DT_FLOAT
	FlFootprint         DT_FLOAT
	EFadeMethod         DT_ENUM
	Unk_da5b372         DT_INT
	Unk_8dea4d9         DT_INT
	NFadeGroup          DT_INT
}

func (t *WallPiece) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnonameObject, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.SzLookName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwShaderMapOverride, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_189be9b, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.Unk_94a2b91, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_d094b9a, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.FlWeight, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.FlFootprint, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.EFadeMethod, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.Unk_da5b372, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.Unk_8dea4d9, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.NFadeGroup, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+52, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *WallPiece) Walk(cb WalkCallback) {
	cb.Do("SnonameObject", &t.SnonameObject)
	cb.Do("SzLookName", &t.SzLookName)
	cb.Do("DwShaderMapOverride", &t.DwShaderMapOverride)
	cb.Do("Unk_189be9b", &t.Unk_189be9b)
	cb.Do("Unk_94a2b91", &t.Unk_94a2b91)
	cb.Do("Unk_d094b9a", &t.Unk_d094b9a)
	cb.Do("FlWeight", &t.FlWeight)
	cb.Do("FlFootprint", &t.FlFootprint)
	cb.Do("EFadeMethod", &t.EFadeMethod)
	cb.Do("Unk_da5b372", &t.Unk_da5b372)
	cb.Do("Unk_8dea4d9", &t.Unk_8dea4d9)
	cb.Do("NFadeGroup", &t.NFadeGroup)
}

type RevealSceneMessage struct {
	THeader               RequiredMessageHeader
	IdSWorld              DT_SHARED_SERVER_DATA_ID
	TSceneSpec            SceneCommonSpecification
	IdSScene              DT_SHARED_SERVER_DATA_ID
	SnoScene              DT_SNO
	SnoExclusiveMarkerSet DT_SNO
	Transform             PRTransform
	ArAppliedLabels       DT_FIXEDARRAY[*DT_GBID]
	ArDRLGTiles           DT_FIXEDARRAY[*Type_b3c2ea5e]
	ArDRLGElevations      DT_FIXEDARRAY[*DT_INT]
	DwSceneFlags          DT_UINT
}

func (t *RevealSceneMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.IdSWorld, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.TSceneSpec, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+332, &t.IdSScene, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+340, &t.SnoScene, r, &Options{
		Flags: 1,
		Group: 33,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+344, &t.SnoExclusiveMarkerSet, r, &Options{
		Flags: 1,
		Group: 24,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+348, &t.Transform, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+376, &t.ArAppliedLabels, r, &Options{
		ArrayLength: 256,
		Flags:       9,
		Group:       4,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1404, &t.ArDRLGTiles, r, &Options{
		ArrayLength: 32,
		Flags:       8,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1664, &t.ArDRLGElevations, r, &Options{
		ArrayLength: 4,
		Flags:       8,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1684, &t.DwSceneFlags, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+1688, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *RevealSceneMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("IdSWorld", &t.IdSWorld)
	cb.Do("TSceneSpec", &t.TSceneSpec)
	cb.Do("IdSScene", &t.IdSScene)
	cb.Do("SnoScene", &t.SnoScene)
	cb.Do("SnoExclusiveMarkerSet", &t.SnoExclusiveMarkerSet)
	cb.Do("Transform", &t.Transform)
	cb.Do("ArAppliedLabels", &t.ArAppliedLabels)
	cb.Do("ArDRLGTiles", &t.ArDRLGTiles)
	cb.Do("ArDRLGElevations", &t.ArDRLGElevations)
	cb.Do("DwSceneFlags", &t.DwSceneFlags)
}

type ExperienceLevel_Table struct {
	// Inherits GameBalanceTable
	// Inherits PolymorphicBase
	DwType   DT_UINT
	DwPad    DT_UINT
	TEntries DT_VARIABLEARRAY[*ExperienceLevel]
}

func (t *ExperienceLevel_Table) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TEntries, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ExperienceLevel_Table) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("TEntries", &t.TEntries)
}

type OnAIUpdatePowerCallback struct {
	// Inherits PowerCallbackBase
	// Inherits PolymorphicBase
	DwType                DT_UINT
	DwPad                 DT_UINT
	SnoTriggerEffectGroup DT_SNO
	BCouldHaveRagdolled   DT_INT
}

func (t *OnAIUpdatePowerCallback) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoTriggerEffectGroup, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.BCouldHaveRagdolled, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *OnAIUpdatePowerCallback) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("SnoTriggerEffectGroup", &t.SnoTriggerEffectGroup)
	cb.Do("BCouldHaveRagdolled", &t.BCouldHaveRagdolled)
}

type ScriptEventParamOwnerParty struct {
	// Inherits ScriptEventParamBase
	// Inherits PolymorphicBase
	DwType     DT_UINT
	EParamType DT_ENUM
	DwPad      DT_UINT
}

func (t *ScriptEventParamOwnerParty) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.EParamType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ScriptEventParamOwnerParty) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("EParamType", &t.EParamType)
	cb.Do("DwPad", &t.DwPad)
}

type MonsterSubcondition struct {
	// Inherits Subcondition
	// Inherits PolymorphicBase
	DwType          DT_UINT
	BNegate         DT_INT
	DwPad           DT_UINT
	SnoMonsterActor DT_SNO
	Unk_c7b2b18     DT_ENUM
}

func (t *MonsterSubcondition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BNegate, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SnoMonsterActor, r, &Options{
		Flags: 513,
		Group: 1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.Unk_c7b2b18, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *MonsterSubcondition) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("BNegate", &t.BNegate)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("SnoMonsterActor", &t.SnoMonsterActor)
	cb.Do("Unk_c7b2b18", &t.Unk_c7b2b18)
}

type FaceDefinition struct {
	FUsableByClass   DT_FIXEDARRAY[*DT_INT]
	DwSubObjectStyle DT_UINT
}

func (t *FaceDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.FUsableByClass, r, &Options{
		ArrayLength: 5,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.DwSubObjectStyle, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *FaceDefinition) Walk(cb WalkCallback) {
	cb.Do("FUsableByClass", &t.FUsableByClass)
	cb.Do("DwSubObjectStyle", &t.DwSubObjectStyle)
}

type Type_976d0976 struct {
	SnoFont    DT_SNO
	DwFontSize DT_INT
}

func (t *Type_976d0976) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoFont, r, &Options{
		Flags: 1,
		Group: 19,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.DwFontSize, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_976d0976) Walk(cb WalkCallback) {
	cb.Do("SnoFont", &t.SnoFont)
	cb.Do("DwFontSize", &t.DwFontSize)
}

type Type_977100c8 struct {
	TValueMin DT_RGBACOLOR
	TValueMax DT_RGBACOLOR
	TTime     DT_FLOAT
}

func (t *Type_977100c8) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.TValueMin, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.TValueMax, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.TTime, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+12, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_977100c8) Walk(cb WalkCallback) {
	cb.Do("TValueMin", &t.TValueMin)
	cb.Do("TValueMax", &t.TValueMax)
	cb.Do("TTime", &t.TTime)
}

type ActorMovementPowerData struct {
	Unk_b1f0f4e                  DT_STRING_FORMULA
	Unk_c31445d                  DT_FLOAT
	FlFacingDistanceThreshold    DT_FLOAT
	Unk_f8c5768                  DT_ENUM
	FlSpeedMultiplier            DT_FLOAT
	BIgnorePathfinding           DT_INT
	Unk_81f023c                  DT_INT
	BDisableDynamicAvoidance     DT_INT
	Unk_9d8eaf7                  DT_INT
	BOnlyStopFromStaticCollision DT_INT
	Unk_b804e2d                  DT_ENUM
	Unk_9369802                  DT_FLOAT
	SnoAnimKeyOverride           DT_SNO
	Unk_9ab5680                  DT_GBID
	Unk_f05bba                   DT_STRING_FORMULA
}

func (t *ActorMovementPowerData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Unk_b1f0f4e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.Unk_c31445d, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.FlFacingDistanceThreshold, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.Unk_f8c5768, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.FlSpeedMultiplier, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.BIgnorePathfinding, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.Unk_81f023c, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.BDisableDynamicAvoidance, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+60, &t.Unk_9d8eaf7, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.BOnlyStopFromStaticCollision, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.Unk_b804e2d, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_9369802, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.SnoAnimKeyOverride, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.Unk_9ab5680, r, &Options{
		Flags: 1,
		Group: 34,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.Unk_f05bba, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+120, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ActorMovementPowerData) Walk(cb WalkCallback) {
	cb.Do("Unk_b1f0f4e", &t.Unk_b1f0f4e)
	cb.Do("Unk_c31445d", &t.Unk_c31445d)
	cb.Do("FlFacingDistanceThreshold", &t.FlFacingDistanceThreshold)
	cb.Do("Unk_f8c5768", &t.Unk_f8c5768)
	cb.Do("FlSpeedMultiplier", &t.FlSpeedMultiplier)
	cb.Do("BIgnorePathfinding", &t.BIgnorePathfinding)
	cb.Do("Unk_81f023c", &t.Unk_81f023c)
	cb.Do("BDisableDynamicAvoidance", &t.BDisableDynamicAvoidance)
	cb.Do("Unk_9d8eaf7", &t.Unk_9d8eaf7)
	cb.Do("BOnlyStopFromStaticCollision", &t.BOnlyStopFromStaticCollision)
	cb.Do("Unk_b804e2d", &t.Unk_b804e2d)
	cb.Do("Unk_9369802", &t.Unk_9369802)
	cb.Do("SnoAnimKeyOverride", &t.SnoAnimKeyOverride)
	cb.Do("Unk_9ab5680", &t.Unk_9ab5680)
	cb.Do("Unk_f05bba", &t.Unk_f05bba)
}

type IKFrames struct {
	EIKLimb     DT_ENUM
	ArIKWindows DT_VARIABLEARRAY[*IKWindow]
	Unk_f745539 DT_VARIABLEARRAY[*IKWindow]
}

func (t *IKFrames) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.EIKLimb, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.ArIKWindows, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_f745539, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+40, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *IKFrames) Walk(cb WalkCallback) {
	cb.Do("EIKLimb", &t.EIKLimb)
	cb.Do("ArIKWindows", &t.ArIKWindows)
	cb.Do("Unk_f745539", &t.Unk_f745539)
}

type MonsterRaritySubcondition struct {
	// Inherits Subcondition
	// Inherits PolymorphicBase
	DwType      DT_UINT
	BNegate     DT_INT
	DwPad       DT_UINT
	ERarity     DT_ENUM
	Unk_c7b2b18 DT_ENUM
}

func (t *MonsterRaritySubcondition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BNegate, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ERarity, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.Unk_c7b2b18, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *MonsterRaritySubcondition) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("BNegate", &t.BNegate)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("ERarity", &t.ERarity)
	cb.Do("Unk_c7b2b18", &t.Unk_c7b2b18)
}

type DemonScrollRewardChoicePickedMessage struct {
	THeader     RequiredMessageHeader
	SnoScroll   DT_SNO
	Unk_14e1214 DT_INT
}

func (t *DemonScrollRewardChoicePickedMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoScroll, r, &Options{
		Flags: 1,
		Group: 95,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.Unk_14e1214, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *DemonScrollRewardChoicePickedMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("SnoScroll", &t.SnoScroll)
	cb.Do("Unk_14e1214", &t.Unk_14e1214)
}

type GlobalSnoTemplatesData struct {
	// Inherits GlobalBase
	// Inherits PolymorphicBase
	DwType                   DT_UINT
	DwPad                    DT_UINT
	TNpcGenerationData       NpcGenerationData
	ArNpcTemplates           DT_VARIABLEARRAY[*NpcTemplate]
	ArNpcArchetypeTemplates  DT_VARIABLEARRAY[*NpcArchetypeTemplate]
	ArNpcLookTemplates       DT_VARIABLEARRAY[*NpcLookTemplate]
	Unk_3733127              DT_VARIABLEARRAY[*Type_14c5741]
	ArNpcFollowerArchetypes  DT_VARIABLEARRAY[*NpcFollowerArchetype]
	ArDecalTemplates         DT_VARIABLEARRAY[*DecalTemplate]
	ArGizmoTemplates         DT_VARIABLEARRAY[*GizmoTemplate]
	ArDeathTemplates         DT_VARIABLEARRAY[*DeathTemplate]
	ArDeathLookTemplates     DT_VARIABLEARRAY[*DeathLookTemplate]
	ArDeathMaterialTemplates DT_VARIABLEARRAY[*DeathMaterialTemplate]
}

func (t *GlobalSnoTemplatesData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TNpcGenerationData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.ArNpcTemplates, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.ArNpcArchetypeTemplates, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.ArNpcLookTemplates, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+104, &t.Unk_3733127, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.ArNpcFollowerArchetypes, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+136, &t.ArDecalTemplates, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+152, &t.ArGizmoTemplates, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+168, &t.ArDeathTemplates, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+184, &t.ArDeathLookTemplates, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+200, &t.ArDeathMaterialTemplates, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+216, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *GlobalSnoTemplatesData) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("TNpcGenerationData", &t.TNpcGenerationData)
	cb.Do("ArNpcTemplates", &t.ArNpcTemplates)
	cb.Do("ArNpcArchetypeTemplates", &t.ArNpcArchetypeTemplates)
	cb.Do("ArNpcLookTemplates", &t.ArNpcLookTemplates)
	cb.Do("Unk_3733127", &t.Unk_3733127)
	cb.Do("ArNpcFollowerArchetypes", &t.ArNpcFollowerArchetypes)
	cb.Do("ArDecalTemplates", &t.ArDecalTemplates)
	cb.Do("ArGizmoTemplates", &t.ArGizmoTemplates)
	cb.Do("ArDeathTemplates", &t.ArDeathTemplates)
	cb.Do("ArDeathLookTemplates", &t.ArDeathLookTemplates)
	cb.Do("ArDeathMaterialTemplates", &t.ArDeathMaterialTemplates)
}

type PS4ConsoleAwardDefinition struct {
	// Inherits SonyConsoleAwardDefinition
	// Inherits ConsoleAwardDefinition
	// Inherits PolymorphicBase
	DwType          DT_UINT
	UProfileAwardId DT_UINT
	DwPad           DT_UINT
}

func (t *PS4ConsoleAwardDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.UProfileAwardId, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PS4ConsoleAwardDefinition) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("UProfileAwardId", &t.UProfileAwardId)
	cb.Do("DwPad", &t.DwPad)
}

type ActivityDefinition struct {
	TMetadata   ActivityMetadata
	TLinks      ActivityLinks
	Snoname     DT_SNO_NAME
	Unk_a0a2ac5 DT_UINT
	Unk_c2e08fe DT_UINT
}

func (t *ActivityDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.TMetadata, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TLinks, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.Snoname, r, &Options{Flags: 513}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.Unk_a0a2ac5, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.Unk_c2e08fe, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ActivityDefinition) Walk(cb WalkCallback) {
	cb.Do("TMetadata", &t.TMetadata)
	cb.Do("TLinks", &t.TLinks)
	cb.Do("Snoname", &t.Snoname)
	cb.Do("Unk_a0a2ac5", &t.Unk_a0a2ac5)
	cb.Do("Unk_c2e08fe", &t.Unk_c2e08fe)
}

type AngularAxisParams struct {
	Unk_9b43ddf DT_FLOAT
	Unk_a4ff40  DT_FLOAT
	AMaxSpeed   DT_FLOAT
}

func (t *AngularAxisParams) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Unk_9b43ddf, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.Unk_a4ff40, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.AMaxSpeed, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+12, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *AngularAxisParams) Walk(cb WalkCallback) {
	cb.Do("Unk_9b43ddf", &t.Unk_9b43ddf)
	cb.Do("Unk_a4ff40", &t.Unk_a4ff40)
	cb.Do("AMaxSpeed", &t.AMaxSpeed)
}

type ActivateDungeonKeyMessage struct {
	THeader RequiredMessageHeader
	AnnKey  DT_ACD_NETWORK_NAME
}

func (t *ActivateDungeonKeyMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.AnnKey, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ActivateDungeonKeyMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("AnnKey", &t.AnnKey)
}

type PowerConditionHasBuff struct {
	// Inherits PowerConditionBase
	// Inherits PolymorphicBase
	DwType       DT_UINT
	BInverse     DT_INT
	DwPad        DT_UINT
	ESubject     DT_ENUM
	SnoPower     DT_SNO
	DwBuffDataID DT_UINT
}

func (t *PowerConditionHasBuff) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BInverse, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ESubject, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.SnoPower, r, &Options{
		Flags: 513,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.DwBuffDataID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+40, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PowerConditionHasBuff) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("BInverse", &t.BInverse)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("ESubject", &t.ESubject)
	cb.Do("SnoPower", &t.SnoPower)
	cb.Do("DwBuffDataID", &t.DwBuffDataID)
}

type Type_984657e7 struct {
	EStat   DT_ENUM
	NAmount DT_INT
}

func (t *Type_984657e7) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.EStat, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.NAmount, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_984657e7) Walk(cb WalkCallback) {
	cb.Do("EStat", &t.EStat)
	cb.Do("NAmount", &t.NAmount)
}

type UIControlClickSounds struct {
	Unk_eae7586 DT_TAGMAP[*DT_ENUM]
}

func (t *UIControlClickSounds) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Unk_eae7586, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *UIControlClickSounds) Walk(cb WalkCallback) {
	cb.Do("Unk_eae7586", &t.Unk_eae7586)
}

type Type_98c7edba struct {
	THeader      GBIDHeader
	Unk_6216f88  DT_UINT
	Unk_e0eba5d  DT_FIXEDARRAY[*DT_GBID]
	ESalvageType DT_ENUM
	Unk_413bde5  DT_SNO
	Unk_d66c3c6  UIImageHandleReference
}

func (t *Type_98c7edba) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+260, &t.Unk_6216f88, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+264, &t.Unk_e0eba5d, r, &Options{
		ArrayLength: 3,
		Flags:       1,
		Group:       66,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+276, &t.ESalvageType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+280, &t.Unk_413bde5, r, &Options{
		Flags: 1,
		Group: 1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+284, &t.Unk_d66c3c6, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+288, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_98c7edba) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("Unk_6216f88", &t.Unk_6216f88)
	cb.Do("Unk_e0eba5d", &t.Unk_e0eba5d)
	cb.Do("ESalvageType", &t.ESalvageType)
	cb.Do("Unk_413bde5", &t.Unk_413bde5)
	cb.Do("Unk_d66c3c6", &t.Unk_d66c3c6)
}

type VisualInventoryMessage struct {
	THeader    RequiredMessageHeader
	Ann        DT_ACD_NETWORK_NAME
	TEquipment VisualEquipment
}

func (t *VisualInventoryMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Ann, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.TEquipment, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+144, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *VisualInventoryMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("Ann", &t.Ann)
	cb.Do("TEquipment", &t.TEquipment)
}

type UIRActorStyle struct {
	// Inherits UIWindowStyle
	// Inherits UIControlStyle
	// Inherits PolymorphicBase
	DwType                    DT_UINT
	DwPad                     DT_UINT
	HParentStyle              UIControlHandle
	Unk_441f783               DT_INT64
	M_eHasModifiedPowerTagMap DT_TAGMAP[*DT_ENUM]
	TConsoleInput             UIControlConsoleInput
	Unk_b4f614c               DT_TAGMAP[*DT_ENUM]
	Unk_ff11bff               DT_TAGMAP[*DT_ENUM]
}

func (t *UIRActorStyle) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.HParentStyle, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_441f783, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.M_eHasModifiedPowerTagMap, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.TConsoleInput, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.Unk_b4f614c, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.Unk_ff11bff, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+96, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *UIRActorStyle) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("HParentStyle", &t.HParentStyle)
	cb.Do("Unk_441f783", &t.Unk_441f783)
	cb.Do("M_eHasModifiedPowerTagMap", &t.M_eHasModifiedPowerTagMap)
	cb.Do("TConsoleInput", &t.TConsoleInput)
	cb.Do("Unk_b4f614c", &t.Unk_b4f614c)
	cb.Do("Unk_ff11bff", &t.Unk_ff11bff)
}

type AppBone struct {
	DwBoneHash DT_UINT
}

func (t *AppBone) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.DwBoneHash, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+4, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *AppBone) Walk(cb WalkCallback) {
	cb.Do("DwBoneHash", &t.DwBoneHash)
}

type ZoneProgressClaimRewardsMessage struct {
	THeader      RequiredMessageHeader
	EZone        DT_ENUM
	NRewardIndex DT_INT
}

func (t *ZoneProgressClaimRewardsMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.EZone, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.NRewardIndex, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ZoneProgressClaimRewardsMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("EZone", &t.EZone)
	cb.Do("NRewardIndex", &t.NRewardIndex)
}

type RecipeDefinition struct {
	TSpecificItem   ItemSpecifierData
	NPotionTier     DT_INT
	TSigilTierRange DT_RANGE[*DT_INT]
	SnoItem         DT_SNO
	ECrafterType    DT_ENUM
	ERecipeType     DT_ENUM
	DwFlags         DT_UINT
	NItemPowerBonus DT_INT
	NCost           DT_UINT
	Unk_3046a06     DT_GBID
	Unk_86b80f6     DT_GBID
	ArIngredients   DT_VARIABLEARRAY[*RecipeIngredient]
	Unk_c05e260     DT_VARIABLEARRAY[*Type_78541b1a]
}

func (t *RecipeDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.TSpecificItem, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.NPotionTier, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.TSigilTierRange, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.SnoItem, r, &Options{
		Flags: 1,
		Group: 73,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+60, &t.ECrafterType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.ERecipeType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.DwFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.NItemPowerBonus, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.NCost, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.Unk_3046a06, r, &Options{
		Flags: 1,
		Group: 22,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.Unk_86b80f6, r, &Options{
		Flags: 1,
		Group: 22,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.ArIngredients, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+104, &t.Unk_c05e260, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+120, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *RecipeDefinition) Walk(cb WalkCallback) {
	cb.Do("TSpecificItem", &t.TSpecificItem)
	cb.Do("NPotionTier", &t.NPotionTier)
	cb.Do("TSigilTierRange", &t.TSigilTierRange)
	cb.Do("SnoItem", &t.SnoItem)
	cb.Do("ECrafterType", &t.ECrafterType)
	cb.Do("ERecipeType", &t.ERecipeType)
	cb.Do("DwFlags", &t.DwFlags)
	cb.Do("NItemPowerBonus", &t.NItemPowerBonus)
	cb.Do("NCost", &t.NCost)
	cb.Do("Unk_3046a06", &t.Unk_3046a06)
	cb.Do("Unk_86b80f6", &t.Unk_86b80f6)
	cb.Do("ArIngredients", &t.ArIngredients)
	cb.Do("Unk_c05e260", &t.Unk_c05e260)
}

type Type_991d0313 struct {
	EScrollbarStyle         DT_ENUM
	BScrollbarVertical      DT_INT
	Unk_5360c2              DT_INT
	SzScrollbarOnChange     DT_CSTRING[*DT_BYTE]
	Unk_3f3a302             DT_SNO
	SnoScrollbarClickSound  DT_SNO
	EScrollbarVisibility    DT_ENUM
	FlScrollbarBlendSpeed   DT_FLOAT
	FlScrollbarBlendTime    DT_FLOAT
	EBlendEasing            DT_ENUM
	Unk_ce2abaa             DT_FLOAT
	Unk_aea1165             DT_INT
	FlMouseWheelScaleFactor DT_FLOAT
}

func (t *Type_991d0313) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.EScrollbarStyle, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.BScrollbarVertical, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.Unk_5360c2, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SzScrollbarOnChange, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.Unk_3f3a302, r, &Options{
		Flags: 1,
		Group: 40,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.SnoScrollbarClickSound, r, &Options{
		Flags: 1,
		Group: 40,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.EScrollbarVisibility, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.FlScrollbarBlendSpeed, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.FlScrollbarBlendTime, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.EBlendEasing, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.Unk_ce2abaa, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+60, &t.Unk_aea1165, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.FlMouseWheelScaleFactor, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+72, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_991d0313) Walk(cb WalkCallback) {
	cb.Do("EScrollbarStyle", &t.EScrollbarStyle)
	cb.Do("BScrollbarVertical", &t.BScrollbarVertical)
	cb.Do("Unk_5360c2", &t.Unk_5360c2)
	cb.Do("SzScrollbarOnChange", &t.SzScrollbarOnChange)
	cb.Do("Unk_3f3a302", &t.Unk_3f3a302)
	cb.Do("SnoScrollbarClickSound", &t.SnoScrollbarClickSound)
	cb.Do("EScrollbarVisibility", &t.EScrollbarVisibility)
	cb.Do("FlScrollbarBlendSpeed", &t.FlScrollbarBlendSpeed)
	cb.Do("FlScrollbarBlendTime", &t.FlScrollbarBlendTime)
	cb.Do("EBlendEasing", &t.EBlendEasing)
	cb.Do("Unk_ce2abaa", &t.Unk_ce2abaa)
	cb.Do("Unk_aea1165", &t.Unk_aea1165)
	cb.Do("FlMouseWheelScaleFactor", &t.FlMouseWheelScaleFactor)
}

type ACDTranslateDetPathSpiralMessage struct {
	THeader     RequiredMessageHeader
	Ann         DT_ACD_NETWORK_NAME
	EDPath      DT_ENUM
	VStartPos   DT_VECTOR3D
	VTargetPos  DT_VECTOR3D
	UMoveFlags  DT_UINT
	FlVar0      DT_FLOAT
	FlVar1      DT_FLOAT
	TSinData    DPathSinData
	FlSpeedMult DT_FLOAT
}

func (t *ACDTranslateDetPathSpiralMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Ann, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.EDPath, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.VStartPos, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.VTargetPos, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.UMoveFlags, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.FlVar0, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+60, &t.FlVar1, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.TSinData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.FlSpeedMult, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+100, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ACDTranslateDetPathSpiralMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("Ann", &t.Ann)
	cb.Do("EDPath", &t.EDPath)
	cb.Do("VStartPos", &t.VStartPos)
	cb.Do("VTargetPos", &t.VTargetPos)
	cb.Do("UMoveFlags", &t.UMoveFlags)
	cb.Do("FlVar0", &t.FlVar0)
	cb.Do("FlVar1", &t.FlVar1)
	cb.Do("TSinData", &t.TSinData)
	cb.Do("FlSpeedMult", &t.FlSpeedMult)
}

type Type_9934af2e struct {
	Unk_fbd632           DT_INT
	Unk_dba8ed           DT_FLOAT
	Unk_9a547e8          DT_FLOAT
	Unk_729492a          DT_FLOAT
	Unk_5d592f           DT_FLOAT
	Unk_fa1f9f           DT_RGBACOLOR
	RgbaInvalidAlbedo    DT_RGBACOLOR
	Unk_8569aab          DT_RGBACOLOR
	Unk_b634a56          DT_FLOAT
	Unk_504f06f          DT_FLOAT
	Unk_339f2a2          DT_FLOAT
	Unk_b4b9b18          DT_RGBACOLOR
	RgbaInvalidMetalness DT_RGBACOLOR
}

func (t *Type_9934af2e) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Unk_fbd632, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.Unk_dba8ed, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.Unk_9a547e8, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.Unk_729492a, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_5d592f, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.Unk_fa1f9f, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.RgbaInvalidAlbedo, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.Unk_8569aab, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.Unk_b634a56, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.Unk_504f06f, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.Unk_339f2a2, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.Unk_b4b9b18, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.RgbaInvalidMetalness, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+52, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_9934af2e) Walk(cb WalkCallback) {
	cb.Do("Unk_fbd632", &t.Unk_fbd632)
	cb.Do("Unk_dba8ed", &t.Unk_dba8ed)
	cb.Do("Unk_9a547e8", &t.Unk_9a547e8)
	cb.Do("Unk_729492a", &t.Unk_729492a)
	cb.Do("Unk_5d592f", &t.Unk_5d592f)
	cb.Do("Unk_fa1f9f", &t.Unk_fa1f9f)
	cb.Do("RgbaInvalidAlbedo", &t.RgbaInvalidAlbedo)
	cb.Do("Unk_8569aab", &t.Unk_8569aab)
	cb.Do("Unk_b634a56", &t.Unk_b634a56)
	cb.Do("Unk_504f06f", &t.Unk_504f06f)
	cb.Do("Unk_339f2a2", &t.Unk_339f2a2)
	cb.Do("Unk_b4b9b18", &t.Unk_b4b9b18)
	cb.Do("RgbaInvalidMetalness", &t.RgbaInvalidMetalness)
}

type Type_993e31cf struct {
	TComponentId  DT_UINT
	EFootstepType DT_ENUM
}

func (t *Type_993e31cf) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.TComponentId, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.EFootstepType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_993e31cf) Walk(cb WalkCallback) {
	cb.Do("TComponentId", &t.TComponentId)
	cb.Do("EFootstepType", &t.EFootstepType)
}

type Environment struct {
	TPostFXParams        PostFXParams
	SnoSkyboxActor       DT_SNO
	SnoAudioContext      DT_SNO
	SnoWeather           DT_SNO
	SnoSkylightTex       DT_SNO
	Unk_afd6821          bcQuat
	SnoOceanMaterial     DT_SNO
	SnoGroundFogMaterial DT_SNO
	FlFarPlaneCap        DT_FLOAT
	SnoOceanAmbient      DT_SNO
	Unk_31e7772          DT_SNO
	SnoRiverAmbient      DT_SNO
	SnoStreamAmbient     DT_SNO
	SnoCliffEdgeAmbient  DT_SNO
	Unk_f4f9d6f          DT_INT
	Unk_55eead1          DT_FLOAT
	Unk_a7ebd97          DT_INT
}

func (t *Environment) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.TPostFXParams, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.SnoSkyboxActor, r, &Options{
		Flags: 1,
		Group: 1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.SnoAudioContext, r, &Options{
		Flags: 1,
		Group: 93,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.SnoWeather, r, &Options{
		Flags: 1,
		Group: 47,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.SnoSkylightTex, r, &Options{
		Flags: 1,
		Group: 44,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.Unk_afd6821, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.SnoOceanMaterial, r, &Options{
		Flags: 1,
		Group: 57,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.SnoGroundFogMaterial, r, &Options{
		Flags: 1,
		Group: 57,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.FlFarPlaneCap, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.SnoOceanAmbient, r, &Options{
		Flags: 1,
		Group: 5,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.Unk_31e7772, r, &Options{
		Flags: 1,
		Group: 5,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.SnoRiverAmbient, r, &Options{
		Flags: 1,
		Group: 5,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.SnoStreamAmbient, r, &Options{
		Flags: 1,
		Group: 5,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.SnoCliffEdgeAmbient, r, &Options{
		Flags: 1,
		Group: 5,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.Unk_f4f9d6f, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+100, &t.Unk_55eead1, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+104, &t.Unk_a7ebd97, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+108, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Environment) Walk(cb WalkCallback) {
	cb.Do("TPostFXParams", &t.TPostFXParams)
	cb.Do("SnoSkyboxActor", &t.SnoSkyboxActor)
	cb.Do("SnoAudioContext", &t.SnoAudioContext)
	cb.Do("SnoWeather", &t.SnoWeather)
	cb.Do("SnoSkylightTex", &t.SnoSkylightTex)
	cb.Do("Unk_afd6821", &t.Unk_afd6821)
	cb.Do("SnoOceanMaterial", &t.SnoOceanMaterial)
	cb.Do("SnoGroundFogMaterial", &t.SnoGroundFogMaterial)
	cb.Do("FlFarPlaneCap", &t.FlFarPlaneCap)
	cb.Do("SnoOceanAmbient", &t.SnoOceanAmbient)
	cb.Do("Unk_31e7772", &t.Unk_31e7772)
	cb.Do("SnoRiverAmbient", &t.SnoRiverAmbient)
	cb.Do("SnoStreamAmbient", &t.SnoStreamAmbient)
	cb.Do("SnoCliffEdgeAmbient", &t.SnoCliffEdgeAmbient)
	cb.Do("Unk_f4f9d6f", &t.Unk_f4f9d6f)
	cb.Do("Unk_55eead1", &t.Unk_55eead1)
	cb.Do("Unk_a7ebd97", &t.Unk_a7ebd97)
}

type ConversationLineSetNode struct {
	// Inherits ConversationScopeNode
	// Inherits ConversationTreeNode
	// Inherits PolymorphicBase
	DwType               DT_UINT
	DwPad                DT_UINT
	DwNodeID             DT_UINT
	DwNextNodeID         DT_UINT
	DwParentNodeID       DT_UINT
	PtNextNode           DT_INT64
	DwFlags              DT_UINT
	SzComment            DT_CSTRING[*DT_BYTE]
	ArChildNodes         DT_POLYMORPHIC_VARIABLEARRAY[*DT_INT64]
	SnoCondition         DT_SNO
	Unk_d8bf9e4          DT_INT
	SnoSpeaker           DT_SNO
	Unk_acdb8a3          DT_INT
	Unk_ecabee0          DT_INT
	Unk_2e54e3c          DT_INT
	SnonameAnim          DT_SNO_NAME
	FlDurationAdjustment DT_FLOAT
	ArListenerReactions  DT_VARIABLEARRAY[*ListenerReaction]
	Unk_aae0113          DT_VARIABLEARRAY[*DT_SNO]
	Unk_f95422b          DT_VARIABLEARRAY[*DT_SNO]
	Unk_8cbb06b          DT_SNO_NAME
	Unk_5b42409          DT_SNO_NAME
	Unk_b882e13          DT_INT
	Unk_748463e          DT_INT
	Unk_76d4bd           DT_INT
}

func (t *ConversationLineSetNode) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.DwNodeID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwNextNodeID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.DwParentNodeID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.PtNextNode, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.DwFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.SzComment, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.ArChildNodes, r, &Options{Flags: 262145}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.SnoCondition, r, &Options{
		Flags: 1,
		Group: 51,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.Unk_d8bf9e4, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.SnoSpeaker, r, &Options{
		Flags: 1,
		Group: 72,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+100, &t.Unk_acdb8a3, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+104, &t.Unk_ecabee0, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+108, &t.Unk_2e54e3c, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.SnonameAnim, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.FlDurationAdjustment, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.ArListenerReactions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+144, &t.Unk_aae0113, r, &Options{
		Flags: 1,
		Group: 72,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+160, &t.Unk_f95422b, r, &Options{
		Flags: 1,
		Group: 72,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+176, &t.Unk_8cbb06b, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+184, &t.Unk_5b42409, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+192, &t.Unk_b882e13, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+196, &t.Unk_748463e, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+200, &t.Unk_76d4bd, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+208, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ConversationLineSetNode) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("DwNodeID", &t.DwNodeID)
	cb.Do("DwNextNodeID", &t.DwNextNodeID)
	cb.Do("DwParentNodeID", &t.DwParentNodeID)
	cb.Do("PtNextNode", &t.PtNextNode)
	cb.Do("DwFlags", &t.DwFlags)
	cb.Do("SzComment", &t.SzComment)
	cb.Do("ArChildNodes", &t.ArChildNodes)
	cb.Do("SnoCondition", &t.SnoCondition)
	cb.Do("Unk_d8bf9e4", &t.Unk_d8bf9e4)
	cb.Do("SnoSpeaker", &t.SnoSpeaker)
	cb.Do("Unk_acdb8a3", &t.Unk_acdb8a3)
	cb.Do("Unk_ecabee0", &t.Unk_ecabee0)
	cb.Do("Unk_2e54e3c", &t.Unk_2e54e3c)
	cb.Do("SnonameAnim", &t.SnonameAnim)
	cb.Do("FlDurationAdjustment", &t.FlDurationAdjustment)
	cb.Do("ArListenerReactions", &t.ArListenerReactions)
	cb.Do("Unk_aae0113", &t.Unk_aae0113)
	cb.Do("Unk_f95422b", &t.Unk_f95422b)
	cb.Do("Unk_8cbb06b", &t.Unk_8cbb06b)
	cb.Do("Unk_5b42409", &t.Unk_5b42409)
	cb.Do("Unk_b882e13", &t.Unk_b882e13)
	cb.Do("Unk_748463e", &t.Unk_748463e)
	cb.Do("Unk_76d4bd", &t.Unk_76d4bd)
}

type Type_998a6b26 struct {
	THeader  RequiredMessageHeader
	Ann      DT_ACD_NETWORK_NAME
	FlRadius DT_FLOAT
}

func (t *Type_998a6b26) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Ann, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.FlRadius, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+28, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_998a6b26) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("Ann", &t.Ann)
	cb.Do("FlRadius", &t.FlRadius)
}

type UIHotkeyStyle struct {
	// Inherits UIControlStyle
	// Inherits PolymorphicBase
	DwType                    DT_UINT
	DwPad                     DT_UINT
	HParentStyle              UIControlHandle
	Unk_441f783               DT_INT64
	M_eHasModifiedPowerTagMap DT_TAGMAP[*DT_ENUM]
	Unk_4688828               DT_TAGMAP[*DT_ENUM]
}

func (t *UIHotkeyStyle) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.HParentStyle, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_441f783, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.M_eHasModifiedPowerTagMap, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.Unk_4688828, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+64, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *UIHotkeyStyle) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("HParentStyle", &t.HParentStyle)
	cb.Do("Unk_441f783", &t.Unk_441f783)
	cb.Do("M_eHasModifiedPowerTagMap", &t.M_eHasModifiedPowerTagMap)
	cb.Do("Unk_4688828", &t.Unk_4688828)
}

type PowerScriptParam struct {
	EType DT_ENUM
}

func (t *PowerScriptParam) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.EType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+4, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PowerScriptParam) Walk(cb WalkCallback) {
	cb.Do("EType", &t.EType)
}

type Type_99d2f9b4 struct {
	THeader     RequiredMessageHeader
	Ann         DT_ACD_NETWORK_NAME
	Unk_d8a1f3b DT_FIXEDARRAY[*Type_a9417475]
}

func (t *Type_99d2f9b4) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Ann, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_d8a1f3b, r, &Options{
		ArrayLength: 4,
		Flags:       1,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+88, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_99d2f9b4) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("Ann", &t.Ann)
	cb.Do("Unk_d8a1f3b", &t.Unk_d8a1f3b)
}

type DisplayGameTextMessage struct {
	THeader         RequiredMessageHeader
	SzMsg           DT_CHARARRAY
	FlTimeUntilFade DT_OPTIONAL[*DT_FLOAT]
	NParam1         DT_OPTIONAL[*DT_INT]
	NParam2         DT_OPTIONAL[*DT_INT]
	FIsWarning      DT_OPTIONAL[*DT_INT]
}

func (t *DisplayGameTextMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SzMsg, r, &Options{
		ArrayLength: 1024,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1040, &t.FlTimeUntilFade, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1048, &t.NParam1, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1056, &t.NParam2, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1064, &t.FIsWarning, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+1072, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *DisplayGameTextMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("SzMsg", &t.SzMsg)
	cb.Do("FlTimeUntilFade", &t.FlTimeUntilFade)
	cb.Do("NParam1", &t.NParam1)
	cb.Do("NParam2", &t.NParam2)
	cb.Do("FIsWarning", &t.FIsWarning)
}

type DungeonAffixFamilyEntry_Table struct {
	// Inherits GameBalanceTable
	// Inherits PolymorphicBase
	DwType   DT_UINT
	DwPad    DT_UINT
	TEntries DT_VARIABLEARRAY[*DungeonAffixFamilyEntry]
}

func (t *DungeonAffixFamilyEntry_Table) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TEntries, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *DungeonAffixFamilyEntry_Table) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("TEntries", &t.TEntries)
}

type OnOtherBuffRemovedCallback struct {
	// Inherits BuffCallbackBase
	// Inherits PolymorphicBase
	DwType                DT_UINT
	DwPad                 DT_UINT
	SnoTriggerEffectGroup DT_SNO
	ArConditions          DT_POLYMORPHIC_VARIABLEARRAY[*DT_INT64]
	Unk_880879b           DT_VARIABLEARRAY[*Type_82280ff3]
}

func (t *OnOtherBuffRemovedCallback) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoTriggerEffectGroup, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ArConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.Unk_880879b, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+64, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *OnOtherBuffRemovedCallback) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("SnoTriggerEffectGroup", &t.SnoTriggerEffectGroup)
	cb.Do("ArConditions", &t.ArConditions)
	cb.Do("Unk_880879b", &t.Unk_880879b)
}

type PowerLimitedActorType_Table struct {
	// Inherits GameBalanceTable
	// Inherits PolymorphicBase
	DwType   DT_UINT
	DwPad    DT_UINT
	TEntries DT_VARIABLEARRAY[*PowerLimitedActorType]
}

func (t *PowerLimitedActorType_Table) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TEntries, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PowerLimitedActorType_Table) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("TEntries", &t.TEntries)
}

type SkillTreeSkillRankMod struct {
	GbidRankReward      DT_GBID
	DwRequiredSkillRank DT_UINT
}

func (t *SkillTreeSkillRankMod) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.GbidRankReward, r, &Options{
		Flags: 1,
		Group: 43,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.DwRequiredSkillRank, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *SkillTreeSkillRankMod) Walk(cb WalkCallback) {
	cb.Do("GbidRankReward", &t.GbidRankReward)
	cb.Do("DwRequiredSkillRank", &t.DwRequiredSkillRank)
}

type PRTransform struct {
	Q  bcQuat
	Wp DT_VECTOR3D
}

func (t *PRTransform) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Q, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Wp, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+28, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PRTransform) Walk(cb WalkCallback) {
	cb.Do("Q", &t.Q)
	cb.Do("Wp", &t.Wp)
}

type AVParams struct {
	TPitch         AngularAxisParams
	TYaw           AngularAxisParams
	TRoll          AngularAxisParams
	TTurret        AngularAxisParams
	TFOV           AngularAxisParams
	TMovementSpeed LinearAxisParams
	Unk_8023fd7    LinearAxisParams
	Unk_6399d3e    DT_FLOAT
	Unk_4256dac    DT_FLOAT
	Unk_125c54c    DT_FLOAT
	Unk_3294a2     DT_FLOAT
	Unk_2f6e0dd    DT_FLOAT
	Unk_ff7e332    DT_FLOAT
	Unk_6e6acb6    DT_FLOAT
	BInvertPan     DT_INT
	Unk_71789fc    DT_INT
}

func (t *AVParams) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.TPitch, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.TYaw, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.TRoll, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.TTurret, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.TFOV, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+60, &t.TMovementSpeed, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_8023fd7, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.Unk_6399d3e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.Unk_4256dac, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.Unk_125c54c, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.Unk_3294a2, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+100, &t.Unk_2f6e0dd, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+104, &t.Unk_ff7e332, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+108, &t.Unk_6e6acb6, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.BInvertPan, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+116, &t.Unk_71789fc, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+120, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *AVParams) Walk(cb WalkCallback) {
	cb.Do("TPitch", &t.TPitch)
	cb.Do("TYaw", &t.TYaw)
	cb.Do("TRoll", &t.TRoll)
	cb.Do("TTurret", &t.TTurret)
	cb.Do("TFOV", &t.TFOV)
	cb.Do("TMovementSpeed", &t.TMovementSpeed)
	cb.Do("Unk_8023fd7", &t.Unk_8023fd7)
	cb.Do("Unk_6399d3e", &t.Unk_6399d3e)
	cb.Do("Unk_4256dac", &t.Unk_4256dac)
	cb.Do("Unk_125c54c", &t.Unk_125c54c)
	cb.Do("Unk_3294a2", &t.Unk_3294a2)
	cb.Do("Unk_2f6e0dd", &t.Unk_2f6e0dd)
	cb.Do("Unk_ff7e332", &t.Unk_ff7e332)
	cb.Do("Unk_6e6acb6", &t.Unk_6e6acb6)
	cb.Do("BInvertPan", &t.BInvertPan)
	cb.Do("Unk_71789fc", &t.Unk_71789fc)
}

type VectorPath struct {
	TPathData Type_41b30aaa
}

func (t *VectorPath) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.TPathData, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+56, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *VectorPath) Walk(cb WalkCallback) {
	cb.Do("TPathData", &t.TPathData)
}

type HirelingSavedData struct {
	THireling            DT_FIXEDARRAY[*HirelingInfo]
	EActiveHireling      DT_ENUM
	DwAvailableHirelings DT_UINT
}

func (t *HirelingSavedData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THireling, r, &Options{
		ArrayLength: 3,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.EActiveHireling, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+100, &t.DwAvailableHirelings, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+104, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *HirelingSavedData) Walk(cb WalkCallback) {
	cb.Do("THireling", &t.THireling)
	cb.Do("EActiveHireling", &t.EActiveHireling)
	cb.Do("DwAvailableHirelings", &t.DwAvailableHirelings)
}

type IncludePath struct {
	SzPath DT_CSTRING[*DT_BYTE]
}

func (t *IncludePath) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SzPath, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *IncludePath) Walk(cb WalkCallback) {
	cb.Do("SzPath", &t.SzPath)
}

type DyeDefinition struct {
	Unk_1290fc4    DT_INT
	ArColorSamples DT_FIXEDARRAY[*DT_RGBACOLORVALUE]
	FlRoughness    DT_FIXEDARRAY[*DT_FLOAT]
	Unk_f04c7fb    DT_FIXEDARRAY[*DT_RGBACOLOR]
}

func (t *DyeDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.Unk_1290fc4, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.ArColorSamples, r, &Options{ArrayLength: 24}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+396, &t.FlRoughness, r, &Options{
		ArrayLength: 8,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+428, &t.Unk_f04c7fb, r, &Options{
		ArrayLength: 4,
		Flags:       1,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+444, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *DyeDefinition) Walk(cb WalkCallback) {
	cb.Do("Unk_1290fc4", &t.Unk_1290fc4)
	cb.Do("ArColorSamples", &t.ArColorSamples)
	cb.Do("FlRoughness", &t.FlRoughness)
	cb.Do("Unk_f04c7fb", &t.Unk_f04c7fb)
}

type NPCInteractOptionsMessage struct {
	THeader         RequiredMessageHeader
	AnnTalkingTo    DT_ACD_NETWORK_NAME
	TNPCInteraction DT_FIXEDARRAY[*NPCInteraction]
	EPreferredMenu  DT_ENUM
}

func (t *NPCInteractOptionsMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.AnnTalkingTo, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.TNPCInteraction, r, &Options{
		ArrayLength: 30,
		Flags:       8,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+748, &t.EPreferredMenu, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+752, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *NPCInteractOptionsMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("AnnTalkingTo", &t.AnnTalkingTo)
	cb.Do("TNPCInteraction", &t.TNPCInteraction)
	cb.Do("EPreferredMenu", &t.EPreferredMenu)
}

type RopeEffectMessageACDToACD struct {
	THeader           RequiredMessageHeader
	SnoRope           DT_SNO
	AnnFrom           DT_ACD_NETWORK_NAME
	EPositionFrom     DT_ENUM
	AnnTo             DT_ACD_NETWORK_NAME
	AnnOrigin         DT_ACD_NETWORK_NAME
	EPositionTo       DT_ENUM
	BIgnoreOwnerAlpha DT_INT
}

func (t *RopeEffectMessageACDToACD) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoRope, r, &Options{
		Flags: 1,
		Group: 32,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.AnnFrom, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.EPositionFrom, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.AnnTo, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.AnnOrigin, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.EPositionTo, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.BIgnoreOwnerAlpha, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+56, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *RopeEffectMessageACDToACD) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("SnoRope", &t.SnoRope)
	cb.Do("AnnFrom", &t.AnnFrom)
	cb.Do("EPositionFrom", &t.EPositionFrom)
	cb.Do("AnnTo", &t.AnnTo)
	cb.Do("AnnOrigin", &t.AnnOrigin)
	cb.Do("EPositionTo", &t.EPositionTo)
	cb.Do("BIgnoreOwnerAlpha", &t.BIgnoreOwnerAlpha)
}

type Type_9b106a7f struct {
	TComponentId      DT_UINT
	ArTorsoComponents DT_VARIABLEARRAY[*DT_UINT]
	ArLegComponents   DT_VARIABLEARRAY[*DT_UINT]
	ArHelmComponents  DT_VARIABLEARRAY[*DT_UINT]
}

func (t *Type_9b106a7f) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.TComponentId, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.ArTorsoComponents, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ArLegComponents, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.ArHelmComponents, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+56, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_9b106a7f) Walk(cb WalkCallback) {
	cb.Do("TComponentId", &t.TComponentId)
	cb.Do("ArTorsoComponents", &t.ArTorsoComponents)
	cb.Do("ArLegComponents", &t.ArLegComponents)
	cb.Do("ArHelmComponents", &t.ArHelmComponents)
}

type PowerConditionIsMonsterRarity struct {
	// Inherits PowerConditionBase
	// Inherits PolymorphicBase
	DwType            DT_UINT
	BInverse          DT_INT
	DwPad             DT_UINT
	ESubject          DT_ENUM
	ArMonsterRarities DT_VARIABLEARRAY[*DT_ENUM]
}

func (t *PowerConditionIsMonsterRarity) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BInverse, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ESubject, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.ArMonsterRarities, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PowerConditionIsMonsterRarity) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("BInverse", &t.BInverse)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("ESubject", &t.ESubject)
	cb.Do("ArMonsterRarities", &t.ArMonsterRarities)
}

type DynamicPortalInfo struct {
	SzName  DT_UINT
	TInfo   PortalInfo
	DwValue DT_UINT
}

func (t *DynamicPortalInfo) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SzName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.TInfo, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+220, &t.DwValue, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+224, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *DynamicPortalInfo) Walk(cb WalkCallback) {
	cb.Do("SzName", &t.SzName)
	cb.Do("TInfo", &t.TInfo)
	cb.Do("DwValue", &t.DwValue)
}

type TriggerEventFadeMonsters struct {
	// Inherits TriggerEventRangedDuration
	// Inherits TriggerEvent
	// Inherits PolymorphicBase
	DwType           DT_UINT
	TConditions      TriggerConditions
	FGenerated       DT_INT
	Unk_6cba752      DT_INT
	DwParentActorID  DT_UINT
	TDuration        DT_FLOAT
	DwTriggerFlags   DT_UINT
	DwTriggerFlagsEx DT_UINT
	TCleanup         TriggerCleanup
	Unk_49e9257      DT_INT
	Unk_5490979      DT_INT
	DwPad            DT_UINT
}

func (t *TriggerEventFadeMonsters) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.FGenerated, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_6cba752, r, &Options{Flags: 16}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.DwParentActorID, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.TDuration, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.DwTriggerFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.DwTriggerFlagsEx, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.TCleanup, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+116, &t.Unk_49e9257, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.Unk_5490979, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+124, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+128, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TriggerEventFadeMonsters) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("TConditions", &t.TConditions)
	cb.Do("FGenerated", &t.FGenerated)
	cb.Do("Unk_6cba752", &t.Unk_6cba752)
	cb.Do("DwParentActorID", &t.DwParentActorID)
	cb.Do("TDuration", &t.TDuration)
	cb.Do("DwTriggerFlags", &t.DwTriggerFlags)
	cb.Do("DwTriggerFlagsEx", &t.DwTriggerFlagsEx)
	cb.Do("TCleanup", &t.TCleanup)
	cb.Do("Unk_49e9257", &t.Unk_49e9257)
	cb.Do("Unk_5490979", &t.Unk_5490979)
	cb.Do("DwPad", &t.DwPad)
}

type RewardDefinition struct {
	UID              DT_UINT
	TType            DT_ENUM
	UFlags           DT_UINT
	TCurrency        DT_ENUM
	UQuantity        DT_UINT
	SnoItem          DT_SNO
	SnoPlayerTitle   DT_SNO
	SnoStoreProduct  DT_SNO
	SnoTrackedReward DT_SNO
	SnoEmblem        DT_SNO
}

func (t *RewardDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.UID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.TType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.UFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.TCurrency, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.UQuantity, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.SnoItem, r, &Options{
		Flags: 1,
		Group: 73,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SnoPlayerTitle, r, &Options{
		Flags: 1,
		Group: 120,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.SnoStoreProduct, r, &Options{
		Flags: 1,
		Group: 110,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.SnoTrackedReward, r, &Options{
		Flags: 1,
		Group: 126,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.SnoEmblem, r, &Options{
		Flags: 1,
		Group: 121,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+40, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *RewardDefinition) Walk(cb WalkCallback) {
	cb.Do("UID", &t.UID)
	cb.Do("TType", &t.TType)
	cb.Do("UFlags", &t.UFlags)
	cb.Do("TCurrency", &t.TCurrency)
	cb.Do("UQuantity", &t.UQuantity)
	cb.Do("SnoItem", &t.SnoItem)
	cb.Do("SnoPlayerTitle", &t.SnoPlayerTitle)
	cb.Do("SnoStoreProduct", &t.SnoStoreProduct)
	cb.Do("SnoTrackedReward", &t.SnoTrackedReward)
	cb.Do("SnoEmblem", &t.SnoEmblem)
}

type Type_9bc33fb9 struct {
	THeader RequiredCommandFrameMessageHeader
}

func (t *Type_9bc33fb9) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+20, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_9bc33fb9) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
}

type UIDateTimeStyle struct {
	// Inherits UITextStyle
	// Inherits UIWindowStyle
	// Inherits UIControlStyle
	// Inherits PolymorphicBase
	DwType                    DT_UINT
	DwPad                     DT_UINT
	HParentStyle              UIControlHandle
	Unk_441f783               DT_INT64
	M_eHasModifiedPowerTagMap DT_TAGMAP[*DT_ENUM]
	TConsoleInput             UIControlConsoleInput
	Unk_b4f614c               DT_TAGMAP[*DT_ENUM]
	TFont                     UIControlFont
	Unk_4741819               DT_TAGMAP[*DT_ENUM]
	Unk_f97174                DT_ENUM
	TDefaultSettings          UIDateTimeSettings
	TSeasonSettings           UIDateTimeSettings
}

func (t *UIDateTimeStyle) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.HParentStyle, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_441f783, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.M_eHasModifiedPowerTagMap, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.TConsoleInput, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.Unk_b4f614c, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.TFont, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.Unk_4741819, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.Unk_f97174, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.TDefaultSettings, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+144, &t.TSeasonSettings, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+168, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *UIDateTimeStyle) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("HParentStyle", &t.HParentStyle)
	cb.Do("Unk_441f783", &t.Unk_441f783)
	cb.Do("M_eHasModifiedPowerTagMap", &t.M_eHasModifiedPowerTagMap)
	cb.Do("TConsoleInput", &t.TConsoleInput)
	cb.Do("Unk_b4f614c", &t.Unk_b4f614c)
	cb.Do("TFont", &t.TFont)
	cb.Do("Unk_4741819", &t.Unk_4741819)
	cb.Do("Unk_f97174", &t.Unk_f97174)
	cb.Do("TDefaultSettings", &t.TDefaultSettings)
	cb.Do("TSeasonSettings", &t.TSeasonSettings)
}

type NPCColorSet struct {
	ArEquipmentDyes DT_FIXEDARRAY[*DT_SNO]
	NHairColor      DT_INT
	NSkinColor      DT_INT
}

func (t *NPCColorSet) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.ArEquipmentDyes, r, &Options{
		ArrayLength: 4,
		Flags:       1,
		Group:       122,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.NHairColor, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.NSkinColor, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *NPCColorSet) Walk(cb WalkCallback) {
	cb.Do("ArEquipmentDyes", &t.ArEquipmentDyes)
	cb.Do("NHairColor", &t.NHairColor)
	cb.Do("NSkinColor", &t.NSkinColor)
}

type PowerResourceCost struct {
	EType            DT_ENUM
	TMinRequired     DT_STRING_FORMULA
	TInitialCost     DT_STRING_FORMULA
	TChannellingCost DT_STRING_FORMULA
}

func (t *PowerResourceCost) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.EType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.TMinRequired, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.TInitialCost, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.TChannellingCost, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+104, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PowerResourceCost) Walk(cb WalkCallback) {
	cb.Do("EType", &t.EType)
	cb.Do("TMinRequired", &t.TMinRequired)
	cb.Do("TInitialCost", &t.TInitialCost)
	cb.Do("TChannellingCost", &t.TChannellingCost)
}

type ACDLookAtMessage struct {
	THeader   RequiredMessageHeader
	AnnSrc    DT_ACD_NETWORK_NAME
	AnnTarget DT_ACD_NETWORK_NAME
}

func (t *ACDLookAtMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.AnnSrc, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.AnnTarget, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ACDLookAtMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("AnnSrc", &t.AnnSrc)
	cb.Do("AnnTarget", &t.AnnTarget)
}

type ActorFaceHelper struct {
	TContent Type_f5c4e3ed
}

func (t *ActorFaceHelper) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.TContent, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ActorFaceHelper) Walk(cb WalkCallback) {
	cb.Do("TContent", &t.TContent)
}

type MailReadMessage struct {
	THeader RequiredMessageHeader
	IdMail  Type_f5ac91bb
}

func (t *MailReadMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.IdMail, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *MailReadMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("IdMail", &t.IdMail)
}

type FloatingAmountMessage struct {
	THeader RequiredMessageHeader
	WpPlace SharedServerWorldPlace
	UAmount DT_INT64
	EType   DT_ENUM
}

func (t *FloatingAmountMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.WpPlace, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.UAmount, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.EType, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+56, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *FloatingAmountMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("WpPlace", &t.WpPlace)
	cb.Do("UAmount", &t.UAmount)
	cb.Do("EType", &t.EType)
}

type SpeedTreeWind struct {
	// Inherits SpeedTreeWindBase
	// Inherits PolymorphicBase
	DwType  DT_UINT
	DwPad   DT_UINT
	TParams SpeedTreeWindParams
}

func (t *SpeedTreeWind) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TParams, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+1376, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *SpeedTreeWind) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("TParams", &t.TParams)
}

type SkillDeclaration struct {
	SnoPower  DT_SNO
	NLevelMod DT_INT
}

func (t *SkillDeclaration) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoPower, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.NLevelMod, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *SkillDeclaration) Walk(cb WalkCallback) {
	cb.Do("SnoPower", &t.SnoPower)
	cb.Do("NLevelMod", &t.NLevelMod)
}

type PrefetchActorMessage struct {
	THeader           RequiredMessageHeader
	Ann               DT_ACD_NETWORK_NAME
	SnoActor          DT_SNO
	Unk_a61d97        DT_INT
	Unk_39ae9c2       DT_FIXEDARRAY[*DT_SNO_NAME]
	TBaseACDInfo      DT_OPTIONAL[*BaseACDInfo]
	TPlayerACDInfo    DT_OPTIONAL[*PlayerACDInfo]
	TMountACDInfo     DT_OPTIONAL[*MountACDInfo]
	TMonsterACDInfo   DT_OPTIONAL[*MonsterACDInfo]
	TNPCACDInfo       DT_OPTIONAL[*NPCACDInfo]
	EActorGender      DT_OPTIONAL[*DT_ENUM]
	EWeaponClass      DT_OPTIONAL[*DT_ENUM]
	EActorVariantType DT_OPTIONAL[*DT_ENUM]
}

func (t *PrefetchActorMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Ann, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SnoActor, r, &Options{
		Flags: 1,
		Group: 1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.Unk_a61d97, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.Unk_39ae9c2, r, &Options{
		ArrayLength: 32,
		Flags:       8,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+292, &t.TBaseACDInfo, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+304, &t.TPlayerACDInfo, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1188, &t.TMountACDInfo, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1208, &t.TMonsterACDInfo, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1268, &t.TNPCACDInfo, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1296, &t.EActorGender, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1304, &t.EWeaponClass, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1312, &t.EActorVariantType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+1320, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PrefetchActorMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("Ann", &t.Ann)
	cb.Do("SnoActor", &t.SnoActor)
	cb.Do("Unk_a61d97", &t.Unk_a61d97)
	cb.Do("Unk_39ae9c2", &t.Unk_39ae9c2)
	cb.Do("TBaseACDInfo", &t.TBaseACDInfo)
	cb.Do("TPlayerACDInfo", &t.TPlayerACDInfo)
	cb.Do("TMountACDInfo", &t.TMountACDInfo)
	cb.Do("TMonsterACDInfo", &t.TMonsterACDInfo)
	cb.Do("TNPCACDInfo", &t.TNPCACDInfo)
	cb.Do("EActorGender", &t.EActorGender)
	cb.Do("EWeaponClass", &t.EWeaponClass)
	cb.Do("EActorVariantType", &t.EActorVariantType)
}

type SerializeData struct {
	DwOffset       DT_INT
	DwSizeAndFlags DT_INT
}

func (t *SerializeData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.DwOffset, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.DwSizeAndFlags, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *SerializeData) Walk(cb WalkCallback) {
	cb.Do("DwOffset", &t.DwOffset)
	cb.Do("DwSizeAndFlags", &t.DwSizeAndFlags)
}

type Type_9cf84f94 struct {
	THeader RequiredResponseMessageHeader
	NData   DT_INT
}

func (t *Type_9cf84f94) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.NData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+28, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_9cf84f94) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("NData", &t.NData)
}

type GlobalEmblems struct {
	// Inherits GlobalBase
	// Inherits PolymorphicBase
	DwType           DT_UINT
	DwPad            DT_UINT
	ArInitialEmblems DT_VARIABLEARRAY[*DT_SNO]
}

func (t *GlobalEmblems) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.ArInitialEmblems, r, &Options{
		Flags: 1,
		Group: 121,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *GlobalEmblems) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("ArInitialEmblems", &t.ArInitialEmblems)
}

type QuestSideQuestAbandonedMessage struct {
	THeader               RequiredMessageHeader
	DwPlayerGameAccountId DT_UINT
	SnoQuest              DT_SNO
}

func (t *QuestSideQuestAbandonedMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.DwPlayerGameAccountId, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.SnoQuest, r, &Options{
		Flags: 1,
		Group: 31,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *QuestSideQuestAbandonedMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("DwPlayerGameAccountId", &t.DwPlayerGameAccountId)
	cb.Do("SnoQuest", &t.SnoQuest)
}

type DebugEventLogMetaData struct {
	THeader       RequiredMessageHeader
	EMetaDataType DT_INT
	NIntData      DT_INT
	FlFloatData   DT_FLOAT
	Ann           DT_ACD_NETWORK_NAME
	WpStartData   SharedServerWorldPlace
	WpEndData     SharedServerWorldPlace
	Bounds        DT_VECTOR3D
	RgbaColor     DT_RGBACOLOR
	Unk_8273480   DT_UINT
}

func (t *DebugEventLogMetaData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.EMetaDataType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.NIntData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.FlFloatData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.Ann, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.WpStartData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.WpEndData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.Bounds, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.RgbaColor, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.Unk_8273480, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+96, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *DebugEventLogMetaData) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("EMetaDataType", &t.EMetaDataType)
	cb.Do("NIntData", &t.NIntData)
	cb.Do("FlFloatData", &t.FlFloatData)
	cb.Do("Ann", &t.Ann)
	cb.Do("WpStartData", &t.WpStartData)
	cb.Do("WpEndData", &t.WpEndData)
	cb.Do("Bounds", &t.Bounds)
	cb.Do("RgbaColor", &t.RgbaColor)
	cb.Do("Unk_8273480", &t.Unk_8273480)
}

type TriggerEventFadePlayers struct {
	// Inherits TriggerEventRangedDuration
	// Inherits TriggerEvent
	// Inherits PolymorphicBase
	DwType           DT_UINT
	TConditions      TriggerConditions
	FGenerated       DT_INT
	Unk_6cba752      DT_INT
	DwParentActorID  DT_UINT
	TDuration        DT_FLOAT
	DwTriggerFlags   DT_UINT
	DwTriggerFlagsEx DT_UINT
	TCleanup         TriggerCleanup
	Unk_49e9257      DT_INT
	Unk_5490979      DT_INT
	DwPad            DT_UINT
}

func (t *TriggerEventFadePlayers) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.FGenerated, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_6cba752, r, &Options{Flags: 16}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.DwParentActorID, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.TDuration, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.DwTriggerFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.DwTriggerFlagsEx, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.TCleanup, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+116, &t.Unk_49e9257, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.Unk_5490979, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+124, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+128, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TriggerEventFadePlayers) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("TConditions", &t.TConditions)
	cb.Do("FGenerated", &t.FGenerated)
	cb.Do("Unk_6cba752", &t.Unk_6cba752)
	cb.Do("DwParentActorID", &t.DwParentActorID)
	cb.Do("TDuration", &t.TDuration)
	cb.Do("DwTriggerFlags", &t.DwTriggerFlags)
	cb.Do("DwTriggerFlagsEx", &t.DwTriggerFlagsEx)
	cb.Do("TCleanup", &t.TCleanup)
	cb.Do("Unk_49e9257", &t.Unk_49e9257)
	cb.Do("Unk_5490979", &t.Unk_5490979)
	cb.Do("DwPad", &t.DwPad)
}

type MarkerDecalData struct {
	// Inherits MarkerDataBase
	// Inherits PolymorphicBase
	DwType                  DT_UINT
	DwPad                   DT_UINT
	Unk_1e3c3c3             DT_UINT
	FlAngleThreshold        DT_FLOAT
	Unk_18f0908             DT_INT
	BDieOverride            DT_INT
	PtRunTimeMaterialValues DT_VARIABLEARRAY[*RunTimeMaterialValues]
}

func (t *MarkerDecalData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_1e3c3c3, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.FlAngleThreshold, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_18f0908, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.BDieOverride, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.PtRunTimeMaterialValues, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *MarkerDecalData) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("Unk_1e3c3c3", &t.Unk_1e3c3c3)
	cb.Do("FlAngleThreshold", &t.FlAngleThreshold)
	cb.Do("Unk_18f0908", &t.Unk_18f0908)
	cb.Do("BDieOverride", &t.BDieOverride)
	cb.Do("PtRunTimeMaterialValues", &t.PtRunTimeMaterialValues)
}

type TriggerEventSetWeaponVisibilityDuration struct {
	// Inherits TriggerEventRangedDuration
	// Inherits TriggerEvent
	// Inherits PolymorphicBase
	DwType           DT_UINT
	TConditions      TriggerConditions
	FGenerated       DT_INT
	Unk_6cba752      DT_INT
	DwParentActorID  DT_UINT
	TDuration        DT_FLOAT
	DwTriggerFlags   DT_UINT
	DwTriggerFlagsEx DT_UINT
	TCleanup         TriggerCleanup
	Unk_49e9257      DT_INT
	Unk_5490979      DT_INT
	DwPad            DT_UINT
	Unk_279aa5a      DT_INT
	DwActorID        DT_UINT
	BHideMainHand    DT_INT
	Unk_4bec6d2      DT_INT
	BHideSheathed    DT_INT
}

func (t *TriggerEventSetWeaponVisibilityDuration) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.FGenerated, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_6cba752, r, &Options{Flags: 16}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.DwParentActorID, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.TDuration, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.DwTriggerFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.DwTriggerFlagsEx, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.TCleanup, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+116, &t.Unk_49e9257, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.Unk_5490979, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+124, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.Unk_279aa5a, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+132, &t.DwActorID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+136, &t.BHideMainHand, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+140, &t.Unk_4bec6d2, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+144, &t.BHideSheathed, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+152, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TriggerEventSetWeaponVisibilityDuration) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("TConditions", &t.TConditions)
	cb.Do("FGenerated", &t.FGenerated)
	cb.Do("Unk_6cba752", &t.Unk_6cba752)
	cb.Do("DwParentActorID", &t.DwParentActorID)
	cb.Do("TDuration", &t.TDuration)
	cb.Do("DwTriggerFlags", &t.DwTriggerFlags)
	cb.Do("DwTriggerFlagsEx", &t.DwTriggerFlagsEx)
	cb.Do("TCleanup", &t.TCleanup)
	cb.Do("Unk_49e9257", &t.Unk_49e9257)
	cb.Do("Unk_5490979", &t.Unk_5490979)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("Unk_279aa5a", &t.Unk_279aa5a)
	cb.Do("DwActorID", &t.DwActorID)
	cb.Do("BHideMainHand", &t.BHideMainHand)
	cb.Do("Unk_4bec6d2", &t.Unk_4bec6d2)
	cb.Do("BHideSheathed", &t.BHideSheathed)
}

type NPCInteraction struct {
	EType    DT_ENUM
	EIcon    DT_ENUM
	DwData   DT_UINT
	DwFlags  DT_UINT
	DwOwners DT_UINT
	SnoQuest DT_SNO
}

func (t *NPCInteraction) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.EType, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.EIcon, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.DwOwners, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.SnoQuest, r, &Options{
		Flags: 1,
		Group: 31,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *NPCInteraction) Walk(cb WalkCallback) {
	cb.Do("EType", &t.EType)
	cb.Do("EIcon", &t.EIcon)
	cb.Do("DwData", &t.DwData)
	cb.Do("DwFlags", &t.DwFlags)
	cb.Do("DwOwners", &t.DwOwners)
	cb.Do("SnoQuest", &t.SnoQuest)
}

type Type_9e555889 struct {
	DwMarkerPathID DT_UINT
	NAOOffset      DT_INT
	NDamageState   DT_INT
}

func (t *Type_9e555889) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.DwMarkerPathID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.NAOOffset, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.NDamageState, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+12, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_9e555889) Walk(cb WalkCallback) {
	cb.Do("DwMarkerPathID", &t.DwMarkerPathID)
	cb.Do("NAOOffset", &t.NAOOffset)
	cb.Do("NDamageState", &t.NDamageState)
}

type Type_9e8134dc struct {
	SzBoneName   DT_UINT
	PtOffsetList DT_VARIABLEARRAY[*PRTransform]
}

func (t *Type_9e8134dc) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SzBoneName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.PtOffsetList, r, &Options{Flags: 2097152}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_9e8134dc) Walk(cb WalkCallback) {
	cb.Do("SzBoneName", &t.SzBoneName)
	cb.Do("PtOffsetList", &t.PtOffsetList)
}

type Type_9ea8dcb4 struct {
	// Inherits BuffCallbackBase
	// Inherits PolymorphicBase
	DwType                DT_UINT
	DwPad                 DT_UINT
	SnoTriggerEffectGroup DT_SNO
	ArConditions          DT_POLYMORPHIC_VARIABLEARRAY[*DT_INT64]
	Unk_7f4b6d5           DT_INT
	Unk_a639294           DT_INT
	DwCCTypes             DT_UINT
}

func (t *Type_9ea8dcb4) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoTriggerEffectGroup, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ArConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.Unk_7f4b6d5, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.Unk_a639294, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.DwCCTypes, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if _, err := r.Seek(p+64, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_9ea8dcb4) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("SnoTriggerEffectGroup", &t.SnoTriggerEffectGroup)
	cb.Do("ArConditions", &t.ArConditions)
	cb.Do("Unk_7f4b6d5", &t.Unk_7f4b6d5)
	cb.Do("Unk_a639294", &t.Unk_a639294)
	cb.Do("DwCCTypes", &t.DwCCTypes)
}

type GizmoConditionData struct {
	SnoGizmoCondition DT_SNO
}

func (t *GizmoConditionData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoGizmoCondition, r, &Options{
		Flags: 1,
		Group: 51,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+4, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *GizmoConditionData) Walk(cb WalkCallback) {
	cb.Do("SnoGizmoCondition", &t.SnoGizmoCondition)
}

type FacialHairDefinition struct {
	FUsableByClass DT_FIXEDARRAY[*DT_INT]
	Unk_259d5a4    DT_SNO
	Unk_259d59d    DT_SNO
	Unk_2ab2122    DT_INT
}

func (t *FacialHairDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.FUsableByClass, r, &Options{
		ArrayLength: 5,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.Unk_259d5a4, r, &Options{
		Flags: 513,
		Group: 57,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.Unk_259d59d, r, &Options{
		Flags: 513,
		Group: 57,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.Unk_2ab2122, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+40, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *FacialHairDefinition) Walk(cb WalkCallback) {
	cb.Do("FUsableByClass", &t.FUsableByClass)
	cb.Do("Unk_259d5a4", &t.Unk_259d5a4)
	cb.Do("Unk_259d59d", &t.Unk_259d59d)
	cb.Do("Unk_2ab2122", &t.Unk_2ab2122)
}

type ClothData struct {
	Unk_3c1684f         dmClothDataMirror
	PtBindVertices      DT_VARIABLEARRAY[*DT_VECTOR4D]
	PtBindNormals       DT_VARIABLEARRAY[*DT_VECTOR4D]
	Unk_f3049dd         DT_VARIABLEARRAY[*DT_FLOAT]
	PtBlendWeights      DT_VARIABLEARRAY[*DT_FLOAT]
	Unk_6b5f617         DT_VARIABLEARRAY[*DT_FLOAT]
	PtDeltaFrames       DT_VARIABLEARRAY[*dmMtxMirror]
	PtLevels            DT_VARIABLEARRAY[*DT_WORD]
	PtAttachmentLengths DT_VARIABLEARRAY[*DT_FLOAT]
	PtParentIndices     DT_VARIABLEARRAY[*DT_WORD]
	PtKinematicRoots    DT_VARIABLEARRAY[*DT_WORD]
	PtTangentIndices    DT_VARIABLEARRAY[*DT_WORD]
	PtWeights           DT_VARIABLEARRAY[*DT_VECTOR4D]
	PtDriverInfluences  DT_VARIABLEARRAY[*DT_WORD]
	PtFollowerIndices   DT_VARIABLEARRAY[*DT_WORD]
	PtTriangles         DT_VARIABLEARRAY[*DT_WORD]
	PtConstraintIndices DT_VARIABLEARRAY[*DT_WORD]
	PtConstraintLengths DT_VARIABLEARRAY[*DT_FLOAT]
	Unk_8ecbb2b         DT_VARIABLEARRAY[*DT_WORD]
	Unk_9f71907         DT_VARIABLEARRAY[*DT_FLOAT]
	PtWarpClusters      DT_VARIABLEARRAY[*Type_fd884ad3]
	Unk_250faf          DT_VARIABLEARRAY[*Type_fd884ad3]
	PtShearClusters     DT_VARIABLEARRAY[*Type_fd884ad3]
	PtBendClusters      DT_VARIABLEARRAY[*Type_fd884ad3]
	PtCapsuleDefs       DT_VARIABLEARRAY[*dmClothCapsuleDefMirror]
	PtPlaneDefs         DT_VARIABLEARRAY[*dmClothPlaneDefMirror]
	PtDriverBindPose    DT_VARIABLEARRAY[*dmFrameMirror]
	PtDriverMap         DT_VARIABLEARRAY[*DT_WORD]
}

func (t *ClothData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Unk_3c1684f, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+288, &t.PtBindVertices, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+304, &t.PtBindNormals, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+320, &t.Unk_f3049dd, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+336, &t.PtBlendWeights, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+352, &t.Unk_6b5f617, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+368, &t.PtDeltaFrames, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+384, &t.PtLevels, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+400, &t.PtAttachmentLengths, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+416, &t.PtParentIndices, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+432, &t.PtKinematicRoots, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+448, &t.PtTangentIndices, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+464, &t.PtWeights, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+480, &t.PtDriverInfluences, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+496, &t.PtFollowerIndices, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+512, &t.PtTriangles, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+528, &t.PtConstraintIndices, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+544, &t.PtConstraintLengths, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+560, &t.Unk_8ecbb2b, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+576, &t.Unk_9f71907, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+592, &t.PtWarpClusters, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+608, &t.Unk_250faf, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+624, &t.PtShearClusters, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+640, &t.PtBendClusters, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+656, &t.PtCapsuleDefs, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+672, &t.PtPlaneDefs, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+688, &t.PtDriverBindPose, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+704, &t.PtDriverMap, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+720, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ClothData) Walk(cb WalkCallback) {
	cb.Do("Unk_3c1684f", &t.Unk_3c1684f)
	cb.Do("PtBindVertices", &t.PtBindVertices)
	cb.Do("PtBindNormals", &t.PtBindNormals)
	cb.Do("Unk_f3049dd", &t.Unk_f3049dd)
	cb.Do("PtBlendWeights", &t.PtBlendWeights)
	cb.Do("Unk_6b5f617", &t.Unk_6b5f617)
	cb.Do("PtDeltaFrames", &t.PtDeltaFrames)
	cb.Do("PtLevels", &t.PtLevels)
	cb.Do("PtAttachmentLengths", &t.PtAttachmentLengths)
	cb.Do("PtParentIndices", &t.PtParentIndices)
	cb.Do("PtKinematicRoots", &t.PtKinematicRoots)
	cb.Do("PtTangentIndices", &t.PtTangentIndices)
	cb.Do("PtWeights", &t.PtWeights)
	cb.Do("PtDriverInfluences", &t.PtDriverInfluences)
	cb.Do("PtFollowerIndices", &t.PtFollowerIndices)
	cb.Do("PtTriangles", &t.PtTriangles)
	cb.Do("PtConstraintIndices", &t.PtConstraintIndices)
	cb.Do("PtConstraintLengths", &t.PtConstraintLengths)
	cb.Do("Unk_8ecbb2b", &t.Unk_8ecbb2b)
	cb.Do("Unk_9f71907", &t.Unk_9f71907)
	cb.Do("PtWarpClusters", &t.PtWarpClusters)
	cb.Do("Unk_250faf", &t.Unk_250faf)
	cb.Do("PtShearClusters", &t.PtShearClusters)
	cb.Do("PtBendClusters", &t.PtBendClusters)
	cb.Do("PtCapsuleDefs", &t.PtCapsuleDefs)
	cb.Do("PtPlaneDefs", &t.PtPlaneDefs)
	cb.Do("PtDriverBindPose", &t.PtDriverBindPose)
	cb.Do("PtDriverMap", &t.PtDriverMap)
}

type PlayerLevelMessage struct {
	THeader               RequiredMessageHeader
	DwPlayerGameAccountId DT_UINT
	NNewLevel             DT_INT
	DwNewSkillPoints      DT_UINT
	Unk_1e075bd           DT_INT
}

func (t *PlayerLevelMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.DwPlayerGameAccountId, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.NNewLevel, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.DwNewSkillPoints, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.Unk_1e075bd, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PlayerLevelMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("DwPlayerGameAccountId", &t.DwPlayerGameAccountId)
	cb.Do("NNewLevel", &t.NNewLevel)
	cb.Do("DwNewSkillPoints", &t.DwNewSkillPoints)
	cb.Do("Unk_1e075bd", &t.Unk_1e075bd)
}

type ActorSoundTableData struct {
	SzMonsterCategory  DT_UINT
	Unk_6190c70        DT_INT
	Unk_fc3dcfc        DT_INT
	SnoRunSoundTable   DT_SNO
	SnoWalkSoundTable  DT_SNO
	Unk_e4e1d2         DT_SNO
	SnoLandSoundTable  DT_SNO
	Unk_8dbf009        DT_SNO
	Unk_7dfd883        DT_SNO
	Unk_e270225        DT_SNO
	Unk_87b2493        DT_SNO
	Unk_f1b3d91        DT_SNO
	Unk_608d70b        DT_SNO
	Unk_16fd1ad        DT_SNO
	Unk_6a4231b        DT_SNO
	Unk_10a92fc        DT_SNO
	Unk_5e2d9d6        DT_SNO
	Unk_c8a2dd8        DT_SNO
	Unk_67e25e6        DT_SNO
	SnoVoiceSoundTable DT_SNO
	ArFoleyOverrides   DT_VARIABLEARRAY[*ActorFoleySoundOverride]
}

func (t *ActorSoundTableData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SzMonsterCategory, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.Unk_6190c70, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.Unk_fc3dcfc, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.SnoRunSoundTable, r, &Options{
		Flags: 1,
		Group: 79,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoWalkSoundTable, r, &Options{
		Flags: 1,
		Group: 79,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.Unk_e4e1d2, r, &Options{
		Flags: 1,
		Group: 79,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SnoLandSoundTable, r, &Options{
		Flags: 1,
		Group: 79,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.Unk_8dbf009, r, &Options{
		Flags: 1,
		Group: 79,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.Unk_7dfd883, r, &Options{
		Flags: 1,
		Group: 79,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.Unk_e270225, r, &Options{
		Flags: 1,
		Group: 79,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.Unk_87b2493, r, &Options{
		Flags: 1,
		Group: 79,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.Unk_f1b3d91, r, &Options{
		Flags: 1,
		Group: 79,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.Unk_608d70b, r, &Options{
		Flags: 1,
		Group: 79,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.Unk_16fd1ad, r, &Options{
		Flags: 1,
		Group: 79,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.Unk_6a4231b, r, &Options{
		Flags: 1,
		Group: 79,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+60, &t.Unk_10a92fc, r, &Options{
		Flags: 1,
		Group: 79,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.Unk_5e2d9d6, r, &Options{
		Flags: 1,
		Group: 79,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.Unk_c8a2dd8, r, &Options{
		Flags: 1,
		Group: 79,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_67e25e6, r, &Options{
		Flags: 1,
		Group: 79,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.SnoVoiceSoundTable, r, &Options{
		Flags: 1,
		Group: 79,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.ArFoleyOverrides, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+96, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ActorSoundTableData) Walk(cb WalkCallback) {
	cb.Do("SzMonsterCategory", &t.SzMonsterCategory)
	cb.Do("Unk_6190c70", &t.Unk_6190c70)
	cb.Do("Unk_fc3dcfc", &t.Unk_fc3dcfc)
	cb.Do("SnoRunSoundTable", &t.SnoRunSoundTable)
	cb.Do("SnoWalkSoundTable", &t.SnoWalkSoundTable)
	cb.Do("Unk_e4e1d2", &t.Unk_e4e1d2)
	cb.Do("SnoLandSoundTable", &t.SnoLandSoundTable)
	cb.Do("Unk_8dbf009", &t.Unk_8dbf009)
	cb.Do("Unk_7dfd883", &t.Unk_7dfd883)
	cb.Do("Unk_e270225", &t.Unk_e270225)
	cb.Do("Unk_87b2493", &t.Unk_87b2493)
	cb.Do("Unk_f1b3d91", &t.Unk_f1b3d91)
	cb.Do("Unk_608d70b", &t.Unk_608d70b)
	cb.Do("Unk_16fd1ad", &t.Unk_16fd1ad)
	cb.Do("Unk_6a4231b", &t.Unk_6a4231b)
	cb.Do("Unk_10a92fc", &t.Unk_10a92fc)
	cb.Do("Unk_5e2d9d6", &t.Unk_5e2d9d6)
	cb.Do("Unk_c8a2dd8", &t.Unk_c8a2dd8)
	cb.Do("Unk_67e25e6", &t.Unk_67e25e6)
	cb.Do("SnoVoiceSoundTable", &t.SnoVoiceSoundTable)
	cb.Do("ArFoleyOverrides", &t.ArFoleyOverrides)
}

type VictimMessage struct {
	THeader              RequiredMessageHeader
	Unk_7dbf108          DT_UINT
	NKillerLevel         DT_INT
	Unk_e37feff          DT_UINT
	EKillerMonsterRarity DT_ENUM
	SnoKillerActor       DT_SNO
	BUseAlternateName    DT_INT
	EKillerTeam          DT_ENUM
	PKillerRareNameGBIDs DT_FIXEDARRAY[*DT_GBID]
	SnoPowerDmgSource    DT_SNO
}

func (t *VictimMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_7dbf108, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.NKillerLevel, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_e37feff, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.EKillerMonsterRarity, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.SnoKillerActor, r, &Options{
		Flags: 1,
		Group: 1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.BUseAlternateName, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.EKillerTeam, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.PKillerRareNameGBIDs, r, &Options{
		ArrayLength: 2,
		Flags:       1,
		Group:       7,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.SnoPowerDmgSource, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+56, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *VictimMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("Unk_7dbf108", &t.Unk_7dbf108)
	cb.Do("NKillerLevel", &t.NKillerLevel)
	cb.Do("Unk_e37feff", &t.Unk_e37feff)
	cb.Do("EKillerMonsterRarity", &t.EKillerMonsterRarity)
	cb.Do("SnoKillerActor", &t.SnoKillerActor)
	cb.Do("BUseAlternateName", &t.BUseAlternateName)
	cb.Do("EKillerTeam", &t.EKillerTeam)
	cb.Do("PKillerRareNameGBIDs", &t.PKillerRareNameGBIDs)
	cb.Do("SnoPowerDmgSource", &t.SnoPowerDmgSource)
}

type PortedToPlayerMessage struct {
	THeader     RequiredMessageHeader
	Unk_a51c96a DT_UINT
	Unk_2a8dda3 DT_UINT
}

func (t *PortedToPlayerMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_a51c96a, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.Unk_2a8dda3, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PortedToPlayerMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("Unk_a51c96a", &t.Unk_a51c96a)
	cb.Do("Unk_2a8dda3", &t.Unk_2a8dda3)
}

type BaseACDInfo struct {
	SnoQuest     DT_SNO
	SnoMarkerSet DT_SNO
}

func (t *BaseACDInfo) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoQuest, r, &Options{
		Flags: 1,
		Group: 31,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.SnoMarkerSet, r, &Options{
		Flags: 1,
		Group: 24,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *BaseACDInfo) Walk(cb WalkCallback) {
	cb.Do("SnoQuest", &t.SnoQuest)
	cb.Do("SnoMarkerSet", &t.SnoMarkerSet)
}

type WorldStateFullUpdateMessage struct {
	THeader   RequiredMessageHeader
	ArUpdates DT_FIXEDARRAY[*WorldStateUpdateData]
}

func (t *WorldStateFullUpdateMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.ArUpdates, r, &Options{
		ArrayLength: 64,
		Flags:       8,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+532, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *WorldStateFullUpdateMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("ArUpdates", &t.ArUpdates)
}

type Type_a0b7f6f3 struct {
	DwWeight    DT_UINT
	Unk_248a3b8 DT_FLOAT
	Unk_899268f DT_FLOAT
}

func (t *Type_a0b7f6f3) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.DwWeight, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.Unk_248a3b8, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.Unk_899268f, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+12, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_a0b7f6f3) Walk(cb WalkCallback) {
	cb.Do("DwWeight", &t.DwWeight)
	cb.Do("Unk_248a3b8", &t.Unk_248a3b8)
	cb.Do("Unk_899268f", &t.Unk_899268f)
}

type JewelryDefinition struct {
	EClassRestriction DT_ENUM
	DwSubObjectStyle  DT_UINT
	Unk_59b49ef       DT_INT
	HIconImage        DT_UINT
}

func (t *JewelryDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.EClassRestriction, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwSubObjectStyle, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_59b49ef, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.HIconImage, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *JewelryDefinition) Walk(cb WalkCallback) {
	cb.Do("EClassRestriction", &t.EClassRestriction)
	cb.Do("DwSubObjectStyle", &t.DwSubObjectStyle)
	cb.Do("Unk_59b49ef", &t.Unk_59b49ef)
	cb.Do("HIconImage", &t.HIconImage)
}

type TerritoryDefinition struct {
	Color DT_RGBACOLOR
}

func (t *TerritoryDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.Color, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+12, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TerritoryDefinition) Walk(cb WalkCallback) {
	cb.Do("Color", &t.Color)
}

type TriggerEventSpawnObject struct {
	// Inherits TriggerEvent
	// Inherits PolymorphicBase
	DwType                    DT_UINT
	DwPad                     DT_UINT
	TConditions               TriggerConditions
	FGenerated                DT_INT
	Unk_6cba752               DT_INT
	DwParentActorID           DT_UINT
	DwID                      DT_UINT
	Snoname                   DT_SNO_NAME
	THardpointLinks           DT_FIXEDARRAY[*HardpointLink]
	DwTriggerFlags            DT_UINT
	DwTriggerFlagsEx          DT_UINT
	FRandomLook               DT_INT
	TLookLink                 LookLink
	FOverrideActorVariant     DT_INT
	Unk_6b8bffc               DT_ENUM
	DwSegmentsStep            DT_UINT
	DwShaderMapOverride       DT_UINT
	FlScale                   DT_FLOAT
	DwSeed                    DT_UINT
	SzSpawnLocatorName        DT_UINT
	VecScalar                 DT_VECTOR2D
	Transform                 PRTransform
	TEffectGroupHardpointLink HardpointLink
	Unk_c7fa18a               DT_RANGE[*DT_FLOAT]
	SnoPowerEffectParam       DT_SNO
	DwSpawnedActorLife        DT_FLOAT
	TNPCComponentInstanceData NPCComponentInstanceData
	PtLightInstanceData       DT_VARIABLEARRAY[*LightInstanceData]
}

func (t *TriggerEventSpawnObject) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.FGenerated, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_6cba752, r, &Options{Flags: 16}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.DwParentActorID, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.DwID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.Snoname, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.THardpointLinks, r, &Options{
		ArrayLength: 2,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+108, &t.DwTriggerFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.DwTriggerFlagsEx, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+116, &t.FRandomLook, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.TLookLink, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+124, &t.FOverrideActorVariant, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.Unk_6b8bffc, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+132, &t.DwSegmentsStep, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+136, &t.DwShaderMapOverride, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+140, &t.FlScale, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+144, &t.DwSeed, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+148, &t.SzSpawnLocatorName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+152, &t.VecScalar, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+160, &t.Transform, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+188, &t.TEffectGroupHardpointLink, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+196, &t.Unk_c7fa18a, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+204, &t.SnoPowerEffectParam, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+208, &t.DwSpawnedActorLife, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+212, &t.TNPCComponentInstanceData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+256, &t.PtLightInstanceData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+272, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TriggerEventSpawnObject) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("TConditions", &t.TConditions)
	cb.Do("FGenerated", &t.FGenerated)
	cb.Do("Unk_6cba752", &t.Unk_6cba752)
	cb.Do("DwParentActorID", &t.DwParentActorID)
	cb.Do("DwID", &t.DwID)
	cb.Do("Snoname", &t.Snoname)
	cb.Do("THardpointLinks", &t.THardpointLinks)
	cb.Do("DwTriggerFlags", &t.DwTriggerFlags)
	cb.Do("DwTriggerFlagsEx", &t.DwTriggerFlagsEx)
	cb.Do("FRandomLook", &t.FRandomLook)
	cb.Do("TLookLink", &t.TLookLink)
	cb.Do("FOverrideActorVariant", &t.FOverrideActorVariant)
	cb.Do("Unk_6b8bffc", &t.Unk_6b8bffc)
	cb.Do("DwSegmentsStep", &t.DwSegmentsStep)
	cb.Do("DwShaderMapOverride", &t.DwShaderMapOverride)
	cb.Do("FlScale", &t.FlScale)
	cb.Do("DwSeed", &t.DwSeed)
	cb.Do("SzSpawnLocatorName", &t.SzSpawnLocatorName)
	cb.Do("VecScalar", &t.VecScalar)
	cb.Do("Transform", &t.Transform)
	cb.Do("TEffectGroupHardpointLink", &t.TEffectGroupHardpointLink)
	cb.Do("Unk_c7fa18a", &t.Unk_c7fa18a)
	cb.Do("SnoPowerEffectParam", &t.SnoPowerEffectParam)
	cb.Do("DwSpawnedActorLife", &t.DwSpawnedActorLife)
	cb.Do("TNPCComponentInstanceData", &t.TNPCComponentInstanceData)
	cb.Do("PtLightInstanceData", &t.PtLightInstanceData)
}

type LookVariantOverride struct {
	TBaseLook     LookLink
	TOverrideLook LookLink
}

func (t *LookVariantOverride) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.TBaseLook, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.TOverrideLook, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *LookVariantOverride) Walk(cb WalkCallback) {
	cb.Do("TBaseLook", &t.TBaseLook)
	cb.Do("TOverrideLook", &t.TOverrideLook)
}

type PowerConditionIsActorUnstoppable struct {
	// Inherits PowerConditionBase
	// Inherits PolymorphicBase
	DwType   DT_UINT
	BInverse DT_INT
	DwPad    DT_UINT
	ESubject DT_ENUM
}

func (t *PowerConditionIsActorUnstoppable) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BInverse, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ESubject, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PowerConditionIsActorUnstoppable) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("BInverse", &t.BInverse)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("ESubject", &t.ESubject)
}

type Type_a1889860 struct {
	SnoPowerFrom DT_SNO
	Unk_857b0b4  DT_FLOAT
}

func (t *Type_a1889860) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoPowerFrom, r, &Options{
		Flags: 513,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.Unk_857b0b4, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_a1889860) Walk(cb WalkCallback) {
	cb.Do("SnoPowerFrom", &t.SnoPowerFrom)
	cb.Do("Unk_857b0b4", &t.Unk_857b0b4)
}

type MountClearMessage struct {
	THeader     RequiredMessageHeader
	Unk_70bf7e7 DT_UINT
}

func (t *MountClearMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_70bf7e7, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+20, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *MountClearMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("Unk_70bf7e7", &t.Unk_70bf7e7)
}

type TriggerEventCameraChangeTarget struct {
	// Inherits TriggerEventRangedDuration
	// Inherits TriggerEvent
	// Inherits PolymorphicBase
	DwType               DT_UINT
	TConditions          TriggerConditions
	FGenerated           DT_INT
	Unk_6cba752          DT_INT
	DwParentActorID      DT_UINT
	TDuration            DT_FLOAT
	DwTriggerFlags       DT_UINT
	DwTriggerFlagsEx     DT_UINT
	TCleanup             TriggerCleanup
	Unk_49e9257          DT_INT
	Unk_5490979          DT_INT
	DwPad                DT_UINT
	ETargetType          DT_ENUM
	SzTargetLocatorName  DT_UINT
	THardpointLinkTarget HardpointLink
	DwTargetID           DT_UINT
	VecTargetOffset      DT_VECTOR3D
	EMicrophoneMode      DT_ENUM
	VecMicrophoneOffset  DT_VECTOR3D
	EBlendEasing         DT_ENUM
}

func (t *TriggerEventCameraChangeTarget) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.FGenerated, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_6cba752, r, &Options{Flags: 16}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.DwParentActorID, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.TDuration, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.DwTriggerFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.DwTriggerFlagsEx, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.TCleanup, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+116, &t.Unk_49e9257, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.Unk_5490979, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+124, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.ETargetType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+132, &t.SzTargetLocatorName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+136, &t.THardpointLinkTarget, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+144, &t.DwTargetID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+148, &t.VecTargetOffset, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+160, &t.EMicrophoneMode, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+164, &t.VecMicrophoneOffset, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+176, &t.EBlendEasing, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+184, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TriggerEventCameraChangeTarget) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("TConditions", &t.TConditions)
	cb.Do("FGenerated", &t.FGenerated)
	cb.Do("Unk_6cba752", &t.Unk_6cba752)
	cb.Do("DwParentActorID", &t.DwParentActorID)
	cb.Do("TDuration", &t.TDuration)
	cb.Do("DwTriggerFlags", &t.DwTriggerFlags)
	cb.Do("DwTriggerFlagsEx", &t.DwTriggerFlagsEx)
	cb.Do("TCleanup", &t.TCleanup)
	cb.Do("Unk_49e9257", &t.Unk_49e9257)
	cb.Do("Unk_5490979", &t.Unk_5490979)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("ETargetType", &t.ETargetType)
	cb.Do("SzTargetLocatorName", &t.SzTargetLocatorName)
	cb.Do("THardpointLinkTarget", &t.THardpointLinkTarget)
	cb.Do("DwTargetID", &t.DwTargetID)
	cb.Do("VecTargetOffset", &t.VecTargetOffset)
	cb.Do("EMicrophoneMode", &t.EMicrophoneMode)
	cb.Do("VecMicrophoneOffset", &t.VecMicrophoneOffset)
	cb.Do("EBlendEasing", &t.EBlendEasing)
}

type SNOBlocklistDataChanged struct {
	THeader      RequiredMessageHeader
	TBlockedSnos DT_FIXEDARRAY[*DT_SNO_NAME]
	Unk_729a938  DT_FIXEDARRAY[*DT_UINT]
}

func (t *SNOBlocklistDataChanged) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TBlockedSnos, r, &Options{
		ArrayLength: 64,
		Flags:       8,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+532, &t.Unk_729a938, r, &Options{
		ArrayLength: 64,
		Flags:       8,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+792, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *SNOBlocklistDataChanged) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("TBlockedSnos", &t.TBlockedSnos)
	cb.Do("Unk_729a938", &t.Unk_729a938)
}

type PowerConditionIsTrackedActor struct {
	// Inherits PowerConditionBase
	// Inherits PolymorphicBase
	DwType   DT_UINT
	BInverse DT_INT
	DwPad    DT_UINT
	ESubject DT_ENUM
}

func (t *PowerConditionIsTrackedActor) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BInverse, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ESubject, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PowerConditionIsTrackedActor) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("BInverse", &t.BInverse)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("ESubject", &t.ESubject)
}

type ZoneProgressRewardPerTierData struct {
	TFirstReward    ZoneProgressRewardData
	TSecondReward   ZoneProgressRewardData
	NStaticXPAmount DT_INT
	Unk_1d991f5     DT_UINT
	NXPTier         DT_INT
	Unk_3592260     DT_INT
}

func (t *ZoneProgressRewardPerTierData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.TFirstReward, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.TSecondReward, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.NStaticXPAmount, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.Unk_1d991f5, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.NXPTier, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.Unk_3592260, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+56, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ZoneProgressRewardPerTierData) Walk(cb WalkCallback) {
	cb.Do("TFirstReward", &t.TFirstReward)
	cb.Do("TSecondReward", &t.TSecondReward)
	cb.Do("NStaticXPAmount", &t.NStaticXPAmount)
	cb.Do("Unk_1d991f5", &t.Unk_1d991f5)
	cb.Do("NXPTier", &t.NXPTier)
	cb.Do("Unk_3592260", &t.Unk_3592260)
}

type StarsSettings struct {
	ShrineData DT_TAGMAP[*DT_ENUM]
}

func (t *StarsSettings) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.ShrineData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *StarsSettings) Walk(cb WalkCallback) {
	cb.Do("ShrineData", &t.ShrineData)
}

type LoudnessParams struct{}

func (t *LoudnessParams) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if _, err := r.Seek(p+1, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *LoudnessParams) Walk(cb WalkCallback) {}

type TriggerEventEnableRagdollAnimationOverride struct {
	// Inherits TriggerEvent
	// Inherits PolymorphicBase
	DwType          DT_UINT
	DwPad           DT_UINT
	TConditions     TriggerConditions
	FGenerated      DT_INT
	Unk_6cba752     DT_INT
	DwParentActorID DT_UINT
}

func (t *TriggerEventEnableRagdollAnimationOverride) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.FGenerated, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_6cba752, r, &Options{Flags: 16}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.DwParentActorID, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+80, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TriggerEventEnableRagdollAnimationOverride) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("TConditions", &t.TConditions)
	cb.Do("FGenerated", &t.FGenerated)
	cb.Do("Unk_6cba752", &t.Unk_6cba752)
	cb.Do("DwParentActorID", &t.DwParentActorID)
}

type DesignerVariable_Table struct {
	// Inherits GameBalanceTable
	// Inherits PolymorphicBase
	DwType   DT_UINT
	DwPad    DT_UINT
	TEntries DT_VARIABLEARRAY[*DesignerVariable]
}

func (t *DesignerVariable_Table) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TEntries, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *DesignerVariable_Table) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("TEntries", &t.TEntries)
}

type StartPowerMessage struct {
	THeader            RequiredCommandFrameMessageHeader
	SnoPower           DT_SNO
	SnoTriggeringPower DT_OPTIONAL[*DT_SNO]
	TAnimPreplayData   DT_OPTIONAL[*AnimPreplayData]
	AStartFacing       DT_OPTIONAL[*DT_FLOAT]
	AnnTargetName      DT_OPTIONAL[*DT_ACD_NETWORK_NAME]
	WpTarget           DT_OPTIONAL[*SharedServerWorldPlace]
	WpTargetOffset     DT_OPTIONAL[*DT_VECTOR3D]
}

func (t *StartPowerMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.SnoPower, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SnoTriggeringPower, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.TAnimPreplayData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.AStartFacing, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.AnnTargetName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.WpTarget, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+100, &t.WpTargetOffset, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+116, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *StartPowerMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("SnoPower", &t.SnoPower)
	cb.Do("SnoTriggeringPower", &t.SnoTriggeringPower)
	cb.Do("TAnimPreplayData", &t.TAnimPreplayData)
	cb.Do("AStartFacing", &t.AStartFacing)
	cb.Do("AnnTargetName", &t.AnnTargetName)
	cb.Do("WpTarget", &t.WpTarget)
	cb.Do("WpTargetOffset", &t.WpTargetOffset)
}

type PowerConditionParagonGlyphAffixIsActive struct {
	// Inherits PowerConditionBase
	// Inherits PolymorphicBase
	DwType               DT_UINT
	BInverse             DT_INT
	DwPad                DT_UINT
	ESubject             DT_ENUM
	SnoParagonGlyphAffix DT_SNO
}

func (t *PowerConditionParagonGlyphAffixIsActive) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BInverse, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ESubject, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.SnoParagonGlyphAffix, r, &Options{
		Flags: 513,
		Group: 112,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PowerConditionParagonGlyphAffixIsActive) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("BInverse", &t.BInverse)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("ESubject", &t.ESubject)
	cb.Do("SnoParagonGlyphAffix", &t.SnoParagonGlyphAffix)
}

type Type_a2b0fc96 struct {
	SzVariableName             DT_CHARARRAY
	Unk_9e7b180                DT_INT
	EVariableType              DT_ENUM
	TMarkerHandle              MarkerHandle
	GbidActorGroup             DT_GBID
	GbidPrefabScopedActorGroup DT_GBID
	Unk_f5a5252                DT_CHARARRAY
	SnoReference               DT_SNO_NAME
	Unk_86254e0                DT_ENUM
	Unk_a33b274                DT_INT
}

func (t *Type_a2b0fc96) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SzVariableName, r, &Options{
		ArrayLength: 64,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.Unk_9e7b180, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.EVariableType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.TMarkerHandle, r, &Options{Flags: 513}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.GbidActorGroup, r, &Options{
		Flags: 1,
		Group: 24,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.GbidPrefabScopedActorGroup, r, &Options{
		Flags: 1,
		Group: 51,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.Unk_f5a5252, r, &Options{
		ArrayLength: 64,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+152, &t.SnoReference, r, &Options{Flags: 513}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+160, &t.Unk_86254e0, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+164, &t.Unk_a33b274, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+168, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_a2b0fc96) Walk(cb WalkCallback) {
	cb.Do("SzVariableName", &t.SzVariableName)
	cb.Do("Unk_9e7b180", &t.Unk_9e7b180)
	cb.Do("EVariableType", &t.EVariableType)
	cb.Do("TMarkerHandle", &t.TMarkerHandle)
	cb.Do("GbidActorGroup", &t.GbidActorGroup)
	cb.Do("GbidPrefabScopedActorGroup", &t.GbidPrefabScopedActorGroup)
	cb.Do("Unk_f5a5252", &t.Unk_f5a5252)
	cb.Do("SnoReference", &t.SnoReference)
	cb.Do("Unk_86254e0", &t.Unk_86254e0)
	cb.Do("Unk_a33b274", &t.Unk_a33b274)
}

type ParagonGlyphIntoSocketMessage struct {
	THeader     RequiredMessageHeader
	SnoGlyph    DT_SNO
	DwNodeIndex DT_UINT
}

func (t *ParagonGlyphIntoSocketMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoGlyph, r, &Options{
		Flags: 1,
		Group: 111,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwNodeIndex, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ParagonGlyphIntoSocketMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("SnoGlyph", &t.SnoGlyph)
	cb.Do("DwNodeIndex", &t.DwNodeIndex)
}

type PlayerClassRogueData struct {
	ArRogueSpecData DT_FIXEDARRAY[*RogueSpecializationGlobalData]
	Unk_239d877     DT_FLOAT
}

func (t *PlayerClassRogueData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.ArRogueSpecData, r, &Options{
		ArrayLength: 3,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.Unk_239d877, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+52, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PlayerClassRogueData) Walk(cb WalkCallback) {
	cb.Do("ArRogueSpecData", &t.ArRogueSpecData)
	cb.Do("Unk_239d877", &t.Unk_239d877)
}

type Circle struct {
	WpCenter DT_VECTOR2D
	WdRadius DT_FLOAT
}

func (t *Circle) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.WpCenter, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.WdRadius, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+12, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Circle) Walk(cb WalkCallback) {
	cb.Do("WpCenter", &t.WpCenter)
	cb.Do("WdRadius", &t.WdRadius)
}

type RotationKey struct {
	NFrame DT_INT
	Q16    Quaternion16
}

func (t *RotationKey) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.NFrame, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.Q16, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+12, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *RotationKey) Walk(cb WalkCallback) {
	cb.Do("NFrame", &t.NFrame)
	cb.Do("Q16", &t.Q16)
}

type ACDTranslateAckMessage struct {
	THeader   RequiredMessageHeader
	UAckValue DT_UINT
}

func (t *ACDTranslateAckMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.UAckValue, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+20, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ACDTranslateAckMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("UAckValue", &t.UAckValue)
}

type NPCACDInfo struct {
	Unk_4fa6b4f  DT_FIXEDARRAY[*DT_UINT]
	ComponentSet DT_SNO
}

func (t *NPCACDInfo) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Unk_4fa6b4f, r, &Options{
		ArrayLength: 4,
		Flags:       8,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.ComponentSet, r, &Options{
		Flags: 1,
		Group: 2,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *NPCACDInfo) Walk(cb WalkCallback) {
	cb.Do("Unk_4fa6b4f", &t.Unk_4fa6b4f)
	cb.Do("ComponentSet", &t.ComponentSet)
}

type PowerConditionHasFortifiedHealth struct {
	// Inherits PowerConditionBase
	// Inherits PolymorphicBase
	DwType   DT_UINT
	BInverse DT_INT
	DwPad    DT_UINT
	ESubject DT_ENUM
}

func (t *PowerConditionHasFortifiedHealth) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BInverse, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ESubject, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PowerConditionHasFortifiedHealth) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("BInverse", &t.BInverse)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("ESubject", &t.ESubject)
}

type PowerConditionIsCrowdControlled struct {
	// Inherits PowerConditionBase
	// Inherits PolymorphicBase
	DwType              DT_UINT
	BInverse            DT_INT
	DwPad               DT_UINT
	ESubject            DT_ENUM
	DwCrowdControlTypes DT_UINT
}

func (t *PowerConditionIsCrowdControlled) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BInverse, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ESubject, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.DwCrowdControlTypes, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PowerConditionIsCrowdControlled) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("BInverse", &t.BInverse)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("ESubject", &t.ESubject)
	cb.Do("DwCrowdControlTypes", &t.DwCrowdControlTypes)
}

type ConsoleCommandResultsMessage struct {
	THeader   RequiredMessageHeader
	UsMessage DT_CHARARRAY
}

func (t *ConsoleCommandResultsMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.UsMessage, r, &Options{
		ArrayLength: 1024,
		Flags:       1,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+1040, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ConsoleCommandResultsMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("UsMessage", &t.UsMessage)
}

type BlendTimeOverrideEntry struct {
	SnoPowerTo          DT_SNO
	FlBlendTimeOverride DT_FLOAT
}

func (t *BlendTimeOverrideEntry) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoPowerTo, r, &Options{
		Flags: 513,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.FlBlendTimeOverride, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *BlendTimeOverrideEntry) Walk(cb WalkCallback) {
	cb.Do("SnoPowerTo", &t.SnoPowerTo)
	cb.Do("FlBlendTimeOverride", &t.FlBlendTimeOverride)
}

type PlayerVariableIsSetSubcondition struct {
	// Inherits Subcondition
	// Inherits PolymorphicBase
	DwType               DT_UINT
	BNegate              DT_INT
	DwPad                DT_UINT
	GbidDesignerVariable DT_GBID
}

func (t *PlayerVariableIsSetSubcondition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BNegate, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.GbidDesignerVariable, r, &Options{
		Flags: 1,
		Group: 45,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PlayerVariableIsSetSubcondition) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("BNegate", &t.BNegate)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("GbidDesignerVariable", &t.GbidDesignerVariable)
}

type ConversationSample struct {
	SzLabel       DT_UINT
	SnoSpeaker    DT_SNO
	FlDuration    DT_FLOAT
	ESampleSource DT_ENUM
	Unk_1d3e4c1   Type_bac3964d
}

func (t *ConversationSample) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SzLabel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.SnoSpeaker, r, &Options{
		Flags: 1,
		Group: 72,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.FlDuration, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.ESampleSource, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_1d3e4c1, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ConversationSample) Walk(cb WalkCallback) {
	cb.Do("SzLabel", &t.SzLabel)
	cb.Do("SnoSpeaker", &t.SnoSpeaker)
	cb.Do("FlDuration", &t.FlDuration)
	cb.Do("ESampleSource", &t.ESampleSource)
	cb.Do("Unk_1d3e4c1", &t.Unk_1d3e4c1)
}

type Anim2DFrame struct {
	HImage    DT_UINT
	RgbaColor DT_RGBACOLOR
}

func (t *Anim2DFrame) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.HImage, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.RgbaColor, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Anim2DFrame) Walk(cb WalkCallback) {
	cb.Do("HImage", &t.HImage)
	cb.Do("RgbaColor", &t.RgbaColor)
}

type ActorCollisionFlags struct {
	UDynamicFlagsNoOverlap DT_UINT
	UDynamicMyFlags        DT_UINT
}

func (t *ActorCollisionFlags) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.UDynamicFlagsNoOverlap, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.UDynamicMyFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ActorCollisionFlags) Walk(cb WalkCallback) {
	cb.Do("UDynamicFlagsNoOverlap", &t.UDynamicFlagsNoOverlap)
	cb.Do("UDynamicMyFlags", &t.UDynamicMyFlags)
}

type PlayerAnimSetOverride struct {
	SnoPlayerActor     DT_SNO
	SnoAnimSetOverride DT_SNO
}

func (t *PlayerAnimSetOverride) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoPlayerActor, r, &Options{
		Flags: 513,
		Group: 1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.SnoAnimSetOverride, r, &Options{
		Flags: 513,
		Group: 8,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PlayerAnimSetOverride) Walk(cb WalkCallback) {
	cb.Do("SnoPlayerActor", &t.SnoPlayerActor)
	cb.Do("SnoAnimSetOverride", &t.SnoAnimSetOverride)
}

type ZoneProgressRewardData struct {
	ERewardType       DT_ENUM
	SnoItemReward     DT_SNO
	SnoTrackedReward  DT_SNO
	NGoldTier         DT_INT
	NStaticGoldAmount DT_INT
}

func (t *ZoneProgressRewardData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.ERewardType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.SnoItemReward, r, &Options{
		Flags: 1,
		Group: 73,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.SnoTrackedReward, r, &Options{
		Flags: 1,
		Group: 126,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.NGoldTier, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.NStaticGoldAmount, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+20, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ZoneProgressRewardData) Walk(cb WalkCallback) {
	cb.Do("ERewardType", &t.ERewardType)
	cb.Do("SnoItemReward", &t.SnoItemReward)
	cb.Do("SnoTrackedReward", &t.SnoTrackedReward)
	cb.Do("NGoldTier", &t.NGoldTier)
	cb.Do("NStaticGoldAmount", &t.NStaticGoldAmount)
}

type ShaderMapOverride struct {
	SzOverrideName DT_UINT
	NSortPriority  DT_INT
	Unk_d39db42    DT_INT
	DwValue        DT_UINT
}

func (t *ShaderMapOverride) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SzOverrideName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.NSortPriority, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.Unk_d39db42, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwValue, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ShaderMapOverride) Walk(cb WalkCallback) {
	cb.Do("SzOverrideName", &t.SzOverrideName)
	cb.Do("NSortPriority", &t.NSortPriority)
	cb.Do("Unk_d39db42", &t.Unk_d39db42)
	cb.Do("DwValue", &t.DwValue)
}

type Type_a539118b struct {
	SnoPower          DT_SNO
	DwDataID          DT_UINT
	SzName            DT_CHARARRAY
	AnnACDSource      DT_OPTIONAL[*DT_ACD_NETWORK_NAME]
	Unk_5806b77       DT_OPTIONAL[*DT_UINT]
	SnoEffectGroup    DT_OPTIONAL[*DT_SNO]
	SnoDOTEffectGroup DT_OPTIONAL[*DT_SNO]
	Unk_8e5694d       DT_OPTIONAL[*DT_UINT]
	DwStartTick       DT_OPTIONAL[*DT_UINT]
	DwDuration        DT_OPTIONAL[*DT_UINT]
	NUINumber         DT_OPTIONAL[*DT_INT]
}

func (t *Type_a539118b) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoPower, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.DwDataID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.SzName, r, &Options{
		ArrayLength: 32,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.AnnACDSource, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.Unk_5806b77, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+60, &t.SnoEffectGroup, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.SnoDOTEffectGroup, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.Unk_8e5694d, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.DwStartTick, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.DwDuration, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+100, &t.NUINumber, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+108, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_a539118b) Walk(cb WalkCallback) {
	cb.Do("SnoPower", &t.SnoPower)
	cb.Do("DwDataID", &t.DwDataID)
	cb.Do("SzName", &t.SzName)
	cb.Do("AnnACDSource", &t.AnnACDSource)
	cb.Do("Unk_5806b77", &t.Unk_5806b77)
	cb.Do("SnoEffectGroup", &t.SnoEffectGroup)
	cb.Do("SnoDOTEffectGroup", &t.SnoDOTEffectGroup)
	cb.Do("Unk_8e5694d", &t.Unk_8e5694d)
	cb.Do("DwStartTick", &t.DwStartTick)
	cb.Do("DwDuration", &t.DwDuration)
	cb.Do("NUINumber", &t.NUINumber)
}

type PvPInfoResponse struct {
	THeader     RequiredMessageHeader
	Unk_606dae5 DT_UINT
	Bonus       DT_CHARARRAY
}

func (t *PvPInfoResponse) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_606dae5, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.Bonus, r, &Options{
		ArrayLength: 32,
		Flags:       1,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+52, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PvPInfoResponse) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("Unk_606dae5", &t.Unk_606dae5)
	cb.Do("Bonus", &t.Bonus)
}

type PowerConditionIsDamageType struct {
	// Inherits PowerConditionBase
	// Inherits PolymorphicBase
	DwType      DT_UINT
	BInverse    DT_INT
	DwPad       DT_UINT
	EDamageType DT_ENUM
}

func (t *PowerConditionIsDamageType) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BInverse, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.EDamageType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PowerConditionIsDamageType) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("BInverse", &t.BInverse)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("EDamageType", &t.EDamageType)
}

type GenericBlobMessage struct {
	THeader   RequiredMessageHeader
	UBlobSize DT_WORD
}

func (t *GenericBlobMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.UBlobSize, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+20, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *GenericBlobMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("UBlobSize", &t.UBlobSize)
}

type PlayerEnterKnownMessage struct {
	THeader               RequiredMessageHeader
	DwPlayerGameAccountId DT_UINT
	Ann                   DT_ACD_NETWORK_NAME
}

func (t *PlayerEnterKnownMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.DwPlayerGameAccountId, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.Ann, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+28, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PlayerEnterKnownMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("DwPlayerGameAccountId", &t.DwPlayerGameAccountId)
	cb.Do("Ann", &t.Ann)
}

type Type_a5a3cb02 struct {
	ArPlatforms DT_FIXEDARRAY[*DT_UINT]
}

func (t *Type_a5a3cb02) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.ArPlatforms, r, &Options{
		ArrayLength: 8,
		Flags:       1,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_a5a3cb02) Walk(cb WalkCallback) {
	cb.Do("ArPlatforms", &t.ArPlatforms)
}

type MarkerActorData struct {
	// Inherits MarkerDataBase
	// Inherits PolymorphicBase
	DwType                  DT_UINT
	DwPad                   DT_UINT
	SzLookName              DT_UINT
	DwShaderMapOverride     DT_UINT
	DwMarkerActorFlags      DT_UINT
	EFadeMethod             DT_ENUM
	NFadeGroup              DT_INT
	Unk_d094b9a             DT_ENUM
	Unk_529dc44             DT_ENUM
	EActorType              DT_ENUM
	EGizmoType              DT_ENUM
	Unk_940ff8e             DT_ENUM
	PtServerData            DT_VARIABLEARRAY[*MarkerServerData]
	PtMonsterActorData      DT_VARIABLEARRAY[*MarkerMonsterActorData]
	PtActorGizmoData        DT_VARIABLEARRAY[*MarkerActorGizmoData]
	PtNPCActorData          DT_VARIABLEARRAY[*MarkerNPCActorData]
	Unk_df84c5d             DT_VARIABLEARRAY[*MarkerBoneTransform]
	Unk_ff96acb             DT_ENUM
	PtRunTimeMaterialValues DT_VARIABLEARRAY[*RunTimeMaterialValues]
	Unk_c627b16             DT_INT
}

func (t *MarkerActorData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SzLookName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwShaderMapOverride, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.DwMarkerActorFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.EFadeMethod, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.NFadeGroup, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.Unk_d094b9a, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.Unk_529dc44, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.EActorType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.EGizmoType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.Unk_940ff8e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.PtServerData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.PtMonsterActorData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.PtActorGizmoData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+104, &t.PtNPCActorData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.Unk_df84c5d, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+136, &t.Unk_ff96acb, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+144, &t.PtRunTimeMaterialValues, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+160, &t.Unk_c627b16, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+168, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *MarkerActorData) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("SzLookName", &t.SzLookName)
	cb.Do("DwShaderMapOverride", &t.DwShaderMapOverride)
	cb.Do("DwMarkerActorFlags", &t.DwMarkerActorFlags)
	cb.Do("EFadeMethod", &t.EFadeMethod)
	cb.Do("NFadeGroup", &t.NFadeGroup)
	cb.Do("Unk_d094b9a", &t.Unk_d094b9a)
	cb.Do("Unk_529dc44", &t.Unk_529dc44)
	cb.Do("EActorType", &t.EActorType)
	cb.Do("EGizmoType", &t.EGizmoType)
	cb.Do("Unk_940ff8e", &t.Unk_940ff8e)
	cb.Do("PtServerData", &t.PtServerData)
	cb.Do("PtMonsterActorData", &t.PtMonsterActorData)
	cb.Do("PtActorGizmoData", &t.PtActorGizmoData)
	cb.Do("PtNPCActorData", &t.PtNPCActorData)
	cb.Do("Unk_df84c5d", &t.Unk_df84c5d)
	cb.Do("Unk_ff96acb", &t.Unk_ff96acb)
	cb.Do("PtRunTimeMaterialValues", &t.PtRunTimeMaterialValues)
	cb.Do("Unk_c627b16", &t.Unk_c627b16)
}

type SpeedTreeWindBase struct {
	// Inherits PolymorphicBase
	DwType DT_UINT
	DwPad  DT_UINT
}

func (t *SpeedTreeWindBase) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *SpeedTreeWindBase) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
}

type Type_a5c62f55 struct {
	Params  DT_VECTOR4D
	Scale   DT_VECTOR4D
	I1      DT_WORD
	I2      DT_WORD
	Padding DT_FIXEDARRAY[*DT_WORD]
}

func (t *Type_a5c62f55) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Params, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Scale, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.I1, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+34, &t.I2, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.Padding, r, &Options{ArrayLength: 6}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_a5c62f55) Walk(cb WalkCallback) {
	cb.Do("Params", &t.Params)
	cb.Do("Scale", &t.Scale)
	cb.Do("I1", &t.I1)
	cb.Do("I2", &t.I2)
	cb.Do("Padding", &t.Padding)
}

type Type_a5df0191 struct {
	EAttribute DT_ENUM
	FlBonus    DT_FLOAT
}

func (t *Type_a5df0191) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.EAttribute, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.FlBonus, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_a5df0191) Walk(cb WalkCallback) {
	cb.Do("EAttribute", &t.EAttribute)
	cb.Do("FlBonus", &t.FlBonus)
}

type RepairResultsMessage struct {
	THeader RequiredMessageHeader
}

func (t *RepairResultsMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *RepairResultsMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
}

type RemovedBuffCallback struct {
	// Inherits BuffCallbackBase
	// Inherits PolymorphicBase
	DwType                DT_UINT
	DwPad                 DT_UINT
	SnoTriggerEffectGroup DT_SNO
	ArConditions          DT_POLYMORPHIC_VARIABLEARRAY[*DT_INT64]
	Unk_224db6f           DT_ENUM
	DwRemovalReasons      DT_UINT
}

func (t *RemovedBuffCallback) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoTriggerEffectGroup, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ArConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.Unk_224db6f, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.DwRemovalReasons, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if _, err := r.Seek(p+56, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *RemovedBuffCallback) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("SnoTriggerEffectGroup", &t.SnoTriggerEffectGroup)
	cb.Do("ArConditions", &t.ArConditions)
	cb.Do("Unk_224db6f", &t.Unk_224db6f)
	cb.Do("DwRemovalReasons", &t.DwRemovalReasons)
}

type GroupRegionEntry_Table struct {
	// Inherits GameBalanceTable
	// Inherits PolymorphicBase
	DwType   DT_UINT
	DwPad    DT_UINT
	TEntries DT_VARIABLEARRAY[*GroupRegionEntry]
}

func (t *GroupRegionEntry_Table) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TEntries, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *GroupRegionEntry_Table) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("TEntries", &t.TEntries)
}

type TriggerEventDetachObject struct {
	// Inherits TriggerEvent
	// Inherits PolymorphicBase
	DwType          DT_UINT
	DwPad           DT_UINT
	TConditions     TriggerConditions
	FGenerated      DT_INT
	Unk_6cba752     DT_INT
	DwParentActorID DT_UINT
	Unk_adbc22e     DT_INT
	DwActorID       DT_UINT
	DwID            DT_UINT
	FEnableRagdoll  DT_INT
	TRagdollParams  EnableRagdollParams
}

func (t *TriggerEventDetachObject) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.FGenerated, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_6cba752, r, &Options{Flags: 16}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.DwParentActorID, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.Unk_adbc22e, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.DwActorID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.DwID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.FEnableRagdoll, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.TRagdollParams, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+112, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TriggerEventDetachObject) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("TConditions", &t.TConditions)
	cb.Do("FGenerated", &t.FGenerated)
	cb.Do("Unk_6cba752", &t.Unk_6cba752)
	cb.Do("DwParentActorID", &t.DwParentActorID)
	cb.Do("Unk_adbc22e", &t.Unk_adbc22e)
	cb.Do("DwActorID", &t.DwActorID)
	cb.Do("DwID", &t.DwID)
	cb.Do("FEnableRagdoll", &t.FEnableRagdoll)
	cb.Do("TRagdollParams", &t.TRagdollParams)
}

type KeyedDungeonTierEntry_Table struct {
	// Inherits GameBalanceTable
	// Inherits PolymorphicBase
	DwType   DT_UINT
	DwPad    DT_UINT
	TEntries DT_VARIABLEARRAY[*KeyedDungeonTierEntry]
}

func (t *KeyedDungeonTierEntry_Table) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TEntries, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *KeyedDungeonTierEntry_Table) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("TEntries", &t.TEntries)
}

type PlayerClassSorcererData struct {
	NUnlockQuestLevel DT_INT
	SnoUnlockQuest    DT_SNO
	Unk_99110e9       DT_UINT
	Unk_490df55       DT_VARIABLEARRAY[*Type_525de28e]
}

func (t *PlayerClassSorcererData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.NUnlockQuestLevel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.SnoUnlockQuest, r, &Options{
		Flags: 1,
		Group: 31,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.Unk_99110e9, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_490df55, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PlayerClassSorcererData) Walk(cb WalkCallback) {
	cb.Do("NUnlockQuestLevel", &t.NUnlockQuestLevel)
	cb.Do("SnoUnlockQuest", &t.SnoUnlockQuest)
	cb.Do("Unk_99110e9", &t.Unk_99110e9)
	cb.Do("Unk_490df55", &t.Unk_490df55)
}

type ClassInfoDataArray struct {
	Unk_db96ab2 DT_INT
	HClassTitle DT_UINT
	HOverview   DT_UINT
	HResource   DT_UINT
	ArPlayStyle DT_VARIABLEARRAY[*ClassInfoPlayStyle]
}

func (t *ClassInfoDataArray) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Unk_db96ab2, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.HClassTitle, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.HOverview, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.HResource, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.ArPlayStyle, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ClassInfoDataArray) Walk(cb WalkCallback) {
	cb.Do("Unk_db96ab2", &t.Unk_db96ab2)
	cb.Do("HClassTitle", &t.HClassTitle)
	cb.Do("HOverview", &t.HOverview)
	cb.Do("HResource", &t.HResource)
	cb.Do("ArPlayStyle", &t.ArPlayStyle)
}

type GBIDHeader struct {
	SzName DT_CHARARRAY
	Gbid   DT_GBID
}

func (t *GBIDHeader) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SzName, r, &Options{
		ArrayLength: 256,
		Flags:       5,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+256, &t.Gbid, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+260, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *GBIDHeader) Walk(cb WalkCallback) {
	cb.Do("SzName", &t.SzName)
	cb.Do("Gbid", &t.Gbid)
}

type HotbarButtonData struct {
	Unk_4ba1909 DT_SNO
	Unk_ebcb8cb DT_SNO
	M_annItem   DT_ACD_NETWORK_NAME
}

func (t *HotbarButtonData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Unk_4ba1909, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.Unk_ebcb8cb, r, &Options{
		Flags: 1,
		Group: 73,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.M_annItem, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *HotbarButtonData) Walk(cb WalkCallback) {
	cb.Do("Unk_4ba1909", &t.Unk_4ba1909)
	cb.Do("Unk_ebcb8cb", &t.Unk_ebcb8cb)
	cb.Do("M_annItem", &t.M_annItem)
}

type Type_a81996c3 struct {
	// Inherits GlobalMarkerActorData
	// Inherits PolymorphicBase
	DwType              DT_UINT
	DwPad               DT_UINT
	SnoSubzone          DT_SNO
	SnoLevelArea        DT_SNO
	HMinimapIcon        DT_UINT
	Unk_a94748a         DT_UINT
	Unk_a0b181c         DT_UINT
	Unk_d43afff         DT_SNO
	FMinimapRespectsFoW DT_INT
}

func (t *Type_a81996c3) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoSubzone, r, &Options{
		Flags: 513,
		Group: 80,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.SnoLevelArea, r, &Options{
		Flags: 513,
		Group: 22,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.HMinimapIcon, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.Unk_a94748a, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.Unk_a0b181c, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.Unk_d43afff, r, &Options{
		Flags: 513,
		Group: 51,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.FMinimapRespectsFoW, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_a81996c3) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("SnoSubzone", &t.SnoSubzone)
	cb.Do("SnoLevelArea", &t.SnoLevelArea)
	cb.Do("HMinimapIcon", &t.HMinimapIcon)
	cb.Do("Unk_a94748a", &t.Unk_a94748a)
	cb.Do("Unk_a0b181c", &t.Unk_a0b181c)
	cb.Do("Unk_d43afff", &t.Unk_d43afff)
	cb.Do("FMinimapRespectsFoW", &t.FMinimapRespectsFoW)
}

type StoryboardDefinition struct {
	TRootTracks     Type_36030d2d
	ArChildControls DT_VARIABLEARRAY[*Type_87385a6d]
	ArGenericTracks DT_POLYMORPHIC_VARIABLEARRAY[*DT_INT64]
}

func (t *StoryboardDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.TRootTracks, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.ArChildControls, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.ArGenericTracks, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+72, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *StoryboardDefinition) Walk(cb WalkCallback) {
	cb.Do("TRootTracks", &t.TRootTracks)
	cb.Do("ArChildControls", &t.ArChildControls)
	cb.Do("ArGenericTracks", &t.ArGenericTracks)
}

type ScriptEventParamFloatRangeInside struct {
	// Inherits ScriptEventParamBase
	// Inherits PolymorphicBase
	DwType     DT_UINT
	EParamType DT_ENUM
	DwPad      DT_UINT
	FlRange    DT_FLOAT
}

func (t *ScriptEventParamFloatRangeInside) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.EParamType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.FlRange, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ScriptEventParamFloatRangeInside) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("EParamType", &t.EParamType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("FlRange", &t.FlRange)
}

type UITutorialStyle struct {
	// Inherits UIWindowStyle
	// Inherits UIControlStyle
	// Inherits PolymorphicBase
	DwType                    DT_UINT
	DwPad                     DT_UINT
	HParentStyle              UIControlHandle
	Unk_441f783               DT_INT64
	M_eHasModifiedPowerTagMap DT_TAGMAP[*DT_ENUM]
	TConsoleInput             UIControlConsoleInput
	Unk_b4f614c               DT_TAGMAP[*DT_ENUM]
}

func (t *UITutorialStyle) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.HParentStyle, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_441f783, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.M_eHasModifiedPowerTagMap, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.TConsoleInput, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.Unk_b4f614c, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+80, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *UITutorialStyle) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("HParentStyle", &t.HParentStyle)
	cb.Do("Unk_441f783", &t.Unk_441f783)
	cb.Do("M_eHasModifiedPowerTagMap", &t.M_eHasModifiedPowerTagMap)
	cb.Do("TConsoleInput", &t.TConsoleInput)
	cb.Do("Unk_b4f614c", &t.Unk_b4f614c)
}

type CurrencyItem struct {
	SnoItem    DT_SNO
	UMinAmount DT_INT64
}

func (t *CurrencyItem) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoItem, r, &Options{
		Flags: 1,
		Group: 73,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.UMinAmount, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *CurrencyItem) Walk(cb WalkCallback) {
	cb.Do("SnoItem", &t.SnoItem)
	cb.Do("UMinAmount", &t.UMinAmount)
}

type UIKeyMappingButtonStyle struct {
	// Inherits UIButtonStyle
	// Inherits UITextStyle
	// Inherits UIWindowStyle
	// Inherits UIControlStyle
	// Inherits PolymorphicBase
	DwType                    DT_UINT
	DwPad                     DT_UINT
	HParentStyle              UIControlHandle
	Unk_441f783               DT_INT64
	M_eHasModifiedPowerTagMap DT_TAGMAP[*DT_ENUM]
	TConsoleInput             UIControlConsoleInput
	Unk_b4f614c               DT_TAGMAP[*DT_ENUM]
	TFont                     UIControlFont
	Unk_4741819               DT_TAGMAP[*DT_ENUM]
	TIcon                     UIControlIcon
	TClickSounds              UIControlClickSounds
	Unk_10f81f0               DT_TAGMAP[*DT_ENUM]
	Unk_94ea125               DT_TAGMAP[*DT_ENUM]
}

func (t *UIKeyMappingButtonStyle) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.HParentStyle, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_441f783, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.M_eHasModifiedPowerTagMap, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.TConsoleInput, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.Unk_b4f614c, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.TFont, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.Unk_4741819, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.TIcon, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.TClickSounds, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+144, &t.Unk_10f81f0, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+160, &t.Unk_94ea125, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+176, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *UIKeyMappingButtonStyle) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("HParentStyle", &t.HParentStyle)
	cb.Do("Unk_441f783", &t.Unk_441f783)
	cb.Do("M_eHasModifiedPowerTagMap", &t.M_eHasModifiedPowerTagMap)
	cb.Do("TConsoleInput", &t.TConsoleInput)
	cb.Do("Unk_b4f614c", &t.Unk_b4f614c)
	cb.Do("TFont", &t.TFont)
	cb.Do("Unk_4741819", &t.Unk_4741819)
	cb.Do("TIcon", &t.TIcon)
	cb.Do("TClickSounds", &t.TClickSounds)
	cb.Do("Unk_10f81f0", &t.Unk_10f81f0)
	cb.Do("Unk_94ea125", &t.Unk_94ea125)
}

type MarkerNoSpawnVolumeData struct {
	// Inherits MarkerDataBase
	// Inherits PolymorphicBase
	DwType      DT_UINT
	DwPad       DT_UINT
	Unk_77fbbf4 DT_ENUM
	Unk_29b00b2 DT_VARIABLEARRAY[*DT_GBID]
	Unk_158fc1a DT_INT
	Unk_b823428 DT_FIXEDARRAY[*DT_INT]
}

func (t *MarkerNoSpawnVolumeData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_77fbbf4, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_29b00b2, r, &Options{
		Flags: 1,
		Group: 20,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.Unk_158fc1a, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.Unk_b823428, r, &Options{
		ArrayLength: 4,
		Flags:       1,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+64, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *MarkerNoSpawnVolumeData) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("Unk_77fbbf4", &t.Unk_77fbbf4)
	cb.Do("Unk_29b00b2", &t.Unk_29b00b2)
	cb.Do("Unk_158fc1a", &t.Unk_158fc1a)
	cb.Do("Unk_b823428", &t.Unk_b823428)
}

type AnimTreeNodeBase struct {
	// Inherits PolymorphicBase
	DwType               DT_UINT
	DwPad                DT_UINT
	DwID                 DT_UINT
	ENodeType            DT_ENUM
	EAnimLayer           DT_ENUM
	PtChildren           DT_VARIABLEARRAY[*AnimTreeNodeChild]
	EBlendParam          DT_ENUM
	ESecondaryBlendParam DT_ENUM
	Unk_5733828          DT_VARIABLEARRAY[*AnimTreeBlendTriangle]
	TMinBlend            DT_VECTOR2D
	TMaxBlend            DT_VECTOR2D
	TBlendIn             BlendSettings
	TBlendOut            BlendSettings
	Unk_dd1cd6f          DT_INT
	NSyncGroupIndex      DT_INT
}

func (t *AnimTreeNodeBase) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.DwID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.ENodeType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.EAnimLayer, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.PtChildren, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.EBlendParam, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.ESecondaryBlendParam, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.Unk_5733828, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.TMinBlend, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.TMaxBlend, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.TBlendIn, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.TBlendOut, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+104, &t.Unk_dd1cd6f, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+108, &t.NSyncGroupIndex, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+112, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *AnimTreeNodeBase) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("DwID", &t.DwID)
	cb.Do("ENodeType", &t.ENodeType)
	cb.Do("EAnimLayer", &t.EAnimLayer)
	cb.Do("PtChildren", &t.PtChildren)
	cb.Do("EBlendParam", &t.EBlendParam)
	cb.Do("ESecondaryBlendParam", &t.ESecondaryBlendParam)
	cb.Do("Unk_5733828", &t.Unk_5733828)
	cb.Do("TMinBlend", &t.TMinBlend)
	cb.Do("TMaxBlend", &t.TMaxBlend)
	cb.Do("TBlendIn", &t.TBlendIn)
	cb.Do("TBlendOut", &t.TBlendOut)
	cb.Do("Unk_dd1cd6f", &t.Unk_dd1cd6f)
	cb.Do("NSyncGroupIndex", &t.NSyncGroupIndex)
}

type SkillTreeNodeMessage struct {
	THeader     RequiredMessageHeader
	DwNodeIndex DT_UINT
}

func (t *SkillTreeNodeMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.DwNodeIndex, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+20, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *SkillTreeNodeMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("DwNodeIndex", &t.DwNodeIndex)
}

type ActorPreloadHelper struct {
	SnoActor       DT_SNO
	TCustomization ActorCustomizationHelper
	TSlot          SerialDataInfo
}

func (t *ActorPreloadHelper) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoActor, r, &Options{
		Flags: 1,
		Group: 1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.TCustomization, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+60, &t.TSlot, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+68, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ActorPreloadHelper) Walk(cb WalkCallback) {
	cb.Do("SnoActor", &t.SnoActor)
	cb.Do("TCustomization", &t.TCustomization)
	cb.Do("TSlot", &t.TSlot)
}

type TriggerEventRestoreCamera struct {
	// Inherits TriggerEvent
	// Inherits PolymorphicBase
	DwType          DT_UINT
	DwPad           DT_UINT
	TConditions     TriggerConditions
	FGenerated      DT_INT
	Unk_6cba752     DT_INT
	DwParentActorID DT_UINT
}

func (t *TriggerEventRestoreCamera) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.FGenerated, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_6cba752, r, &Options{Flags: 16}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.DwParentActorID, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+80, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TriggerEventRestoreCamera) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("TConditions", &t.TConditions)
	cb.Do("FGenerated", &t.FGenerated)
	cb.Do("Unk_6cba752", &t.Unk_6cba752)
	cb.Do("DwParentActorID", &t.DwParentActorID)
}

type Type_a8e85f45 struct {
	SnoMaterialValue DT_SNO
	Value            DT_FLOAT
	Unk_2362b28      DT_INT
}

func (t *Type_a8e85f45) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoMaterialValue, r, &Options{Group: 81}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.Value, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.Unk_2362b28, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+12, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_a8e85f45) Walk(cb WalkCallback) {
	cb.Do("SnoMaterialValue", &t.SnoMaterialValue)
	cb.Do("Value", &t.Value)
	cb.Do("Unk_2362b28", &t.Unk_2362b28)
}

type UIScrollbarStyle struct {
	// Inherits UIWindowStyle
	// Inherits UIControlStyle
	// Inherits PolymorphicBase
	DwType                    DT_UINT
	DwPad                     DT_UINT
	HParentStyle              UIControlHandle
	Unk_441f783               DT_INT64
	M_eHasModifiedPowerTagMap DT_TAGMAP[*DT_ENUM]
	TConsoleInput             UIControlConsoleInput
	Unk_b4f614c               DT_TAGMAP[*DT_ENUM]
	Unk_171f018               DT_TAGMAP[*DT_ENUM]
}

func (t *UIScrollbarStyle) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.HParentStyle, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_441f783, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.M_eHasModifiedPowerTagMap, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.TConsoleInput, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.Unk_b4f614c, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.Unk_171f018, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+96, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *UIScrollbarStyle) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("HParentStyle", &t.HParentStyle)
	cb.Do("Unk_441f783", &t.Unk_441f783)
	cb.Do("M_eHasModifiedPowerTagMap", &t.M_eHasModifiedPowerTagMap)
	cb.Do("TConsoleInput", &t.TConsoleInput)
	cb.Do("Unk_b4f614c", &t.Unk_b4f614c)
	cb.Do("Unk_171f018", &t.Unk_171f018)
}

type Type_a9417475 struct {
	IdQuestID     DT_ENUM
	SnoQuest      DT_SNO
	DwPhaseUID    DT_UINT
	DwCallbackUID DT_UINT
}

func (t *Type_a9417475) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.IdQuestID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.SnoQuest, r, &Options{
		Flags: 1,
		Group: 31,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwPhaseUID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwCallbackUID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_a9417475) Walk(cb WalkCallback) {
	cb.Do("IdQuestID", &t.IdQuestID)
	cb.Do("SnoQuest", &t.SnoQuest)
	cb.Do("DwPhaseUID", &t.DwPhaseUID)
	cb.Do("DwCallbackUID", &t.DwCallbackUID)
}

type ValidComponent struct {
	TComponent DT_UINT
}

func (t *ValidComponent) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.TComponent, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+4, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ValidComponent) Walk(cb WalkCallback) {
	cb.Do("TComponent", &t.TComponent)
}

type WwiseChildFile struct{}

func (t *WwiseChildFile) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if _, err := r.Seek(p+1, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *WwiseChildFile) Walk(cb WalkCallback) {}

type Type_aa55cd98 struct {
	SzData DT_CSTRING[*DT_BYTE]
}

func (t *Type_aa55cd98) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SzData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_aa55cd98) Walk(cb WalkCallback) {
	cb.Do("SzData", &t.SzData)
}

type EffectGroupKeyData struct {
	// Inherits PolymorphicBase
	DwType     DT_UINT
	DwPad      DT_UINT
	ArKeyItems DT_VARIABLEARRAY[*EffectGroupKey]
}

func (t *EffectGroupKeyData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.ArKeyItems, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *EffectGroupKeyData) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("ArKeyItems", &t.ArKeyItems)
}

type PreApplyBuffCallback struct {
	// Inherits BuffCallbackBase
	// Inherits PolymorphicBase
	DwType                DT_UINT
	DwPad                 DT_UINT
	SnoTriggerEffectGroup DT_SNO
	ArConditions          DT_POLYMORPHIC_VARIABLEARRAY[*DT_INT64]
}

func (t *PreApplyBuffCallback) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoTriggerEffectGroup, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ArConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PreApplyBuffCallback) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("SnoTriggerEffectGroup", &t.SnoTriggerEffectGroup)
	cb.Do("ArConditions", &t.ArConditions)
}

type LayerInstanceChunk struct {
	Unk_7934bc2 Type_cd5b4347
	Unk_2f217b0 DT_INT
}

func (t *LayerInstanceChunk) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Unk_7934bc2, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_2f217b0, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *LayerInstanceChunk) Walk(cb WalkCallback) {
	cb.Do("Unk_7934bc2", &t.Unk_7934bc2)
	cb.Do("Unk_2f217b0", &t.Unk_2f217b0)
}

type ReputationValuePair struct {
	SnoReputation DT_SNO
	NValue        DT_INT
}

func (t *ReputationValuePair) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoReputation, r, &Options{
		Flags: 1,
		Group: 105,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.NValue, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ReputationValuePair) Walk(cb WalkCallback) {
	cb.Do("SnoReputation", &t.SnoReputation)
	cb.Do("NValue", &t.NValue)
}

type OnEndPowerCallback struct {
	// Inherits PowerCallbackBase
	// Inherits PolymorphicBase
	DwType                DT_UINT
	DwPad                 DT_UINT
	SnoTriggerEffectGroup DT_SNO
	BCouldHaveRagdolled   DT_INT
}

func (t *OnEndPowerCallback) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoTriggerEffectGroup, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.BCouldHaveRagdolled, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *OnEndPowerCallback) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("SnoTriggerEffectGroup", &t.SnoTriggerEffectGroup)
	cb.Do("BCouldHaveRagdolled", &t.BCouldHaveRagdolled)
}

type ItemSalvageLevel_Table struct {
	// Inherits GameBalanceTable
	// Inherits PolymorphicBase
	DwType   DT_UINT
	DwPad    DT_UINT
	TEntries DT_VARIABLEARRAY[*ItemSalvageLevel]
}

func (t *ItemSalvageLevel_Table) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TEntries, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ItemSalvageLevel_Table) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("TEntries", &t.TEntries)
}

type Type_ab8347fa struct {
	SnoActor           DT_SNO
	SnoObserver        DT_SNO
	ERenderContext     DT_ENUM
	BRotationEnabled   DT_INT
	BStaticActor       DT_INT
	BFullScreenElement DT_INT
}

func (t *Type_ab8347fa) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoActor, r, &Options{
		Flags: 1,
		Group: 1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.SnoObserver, r, &Options{
		Flags: 1,
		Group: 26,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.ERenderContext, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.BRotationEnabled, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BStaticActor, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.BFullScreenElement, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_ab8347fa) Walk(cb WalkCallback) {
	cb.Do("SnoActor", &t.SnoActor)
	cb.Do("SnoObserver", &t.SnoObserver)
	cb.Do("ERenderContext", &t.ERenderContext)
	cb.Do("BRotationEnabled", &t.BRotationEnabled)
	cb.Do("BStaticActor", &t.BStaticActor)
	cb.Do("BFullScreenElement", &t.BFullScreenElement)
}

type ActorCritterData struct {
	FScaredOfPlayers           DT_INT
	FlSpeedWander              DT_FLOAT
	FlSpeedRun                 DT_FLOAT
	TWanderDelayRange          DT_RANGE[*DT_FLOAT]
	FlWanderTooLongTime        DT_FLOAT
	TWanderRadiusRange         DT_RANGE[*DT_FLOAT]
	FlScaredRadius             DT_FLOAT
	TScaredTimeRange           DT_RANGE[*DT_FLOAT]
	FCanBeSquished             DT_INT
	Unk_d8c8fc5                DT_RANGE[*DT_FLOAT]
	FRunAnimWhenScared         DT_INT
	FlLethalExplosionMagnitude DT_FLOAT
}

func (t *ActorCritterData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.FScaredOfPlayers, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.FlSpeedWander, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.FlSpeedRun, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.TWanderDelayRange, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.FlWanderTooLongTime, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.TWanderRadiusRange, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.FlScaredRadius, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.TScaredTimeRange, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.FCanBeSquished, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.Unk_d8c8fc5, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.FRunAnimWhenScared, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+60, &t.FlLethalExplosionMagnitude, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+64, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ActorCritterData) Walk(cb WalkCallback) {
	cb.Do("FScaredOfPlayers", &t.FScaredOfPlayers)
	cb.Do("FlSpeedWander", &t.FlSpeedWander)
	cb.Do("FlSpeedRun", &t.FlSpeedRun)
	cb.Do("TWanderDelayRange", &t.TWanderDelayRange)
	cb.Do("FlWanderTooLongTime", &t.FlWanderTooLongTime)
	cb.Do("TWanderRadiusRange", &t.TWanderRadiusRange)
	cb.Do("FlScaredRadius", &t.FlScaredRadius)
	cb.Do("TScaredTimeRange", &t.TScaredTimeRange)
	cb.Do("FCanBeSquished", &t.FCanBeSquished)
	cb.Do("Unk_d8c8fc5", &t.Unk_d8c8fc5)
	cb.Do("FRunAnimWhenScared", &t.FRunAnimWhenScared)
	cb.Do("FlLethalExplosionMagnitude", &t.FlLethalExplosionMagnitude)
}

type QuestCallbackRegion struct {
	EType              DT_ENUM
	VPolygonPoints     DT_VARIABLEARRAY[*DT_VECTOR2D]
	VCenterPos         DT_VECTOR2D
	FlRadius           DT_FLOAT
	BValid             DT_INT
	BManuallySpecified DT_INT
}

func (t *QuestCallbackRegion) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.EType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.VPolygonPoints, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.VCenterPos, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.FlRadius, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.BValid, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.BManuallySpecified, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *QuestCallbackRegion) Walk(cb WalkCallback) {
	cb.Do("EType", &t.EType)
	cb.Do("VPolygonPoints", &t.VPolygonPoints)
	cb.Do("VCenterPos", &t.VCenterPos)
	cb.Do("FlRadius", &t.FlRadius)
	cb.Do("BValid", &t.BValid)
	cb.Do("BManuallySpecified", &t.BManuallySpecified)
}

type Type_abec9f65 struct {
	Unk_cb247f0 DT_INT
	Unk_511d1b4 DT_INT
}

func (t *Type_abec9f65) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Unk_cb247f0, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.Unk_511d1b4, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_abec9f65) Walk(cb WalkCallback) {
	cb.Do("Unk_cb247f0", &t.Unk_cb247f0)
	cb.Do("Unk_511d1b4", &t.Unk_511d1b4)
}

type NPCItems struct {
	SnoMainHand DT_SNO
	SnoOffHand  DT_SNO
}

func (t *NPCItems) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoMainHand, r, &Options{
		Flags: 1,
		Group: 73,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.SnoOffHand, r, &Options{
		Flags: 1,
		Group: 73,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *NPCItems) Walk(cb WalkCallback) {
	cb.Do("SnoMainHand", &t.SnoMainHand)
	cb.Do("SnoOffHand", &t.SnoOffHand)
}

type UITemplateStyleOverride struct {
	Unk_bbb329e DT_CSTRING[*DT_BYTE]
	TStyle      DT_POLYMORPHIC_VARIABLEARRAY[*UIControlStyle]
}

func (t *UITemplateStyleOverride) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Unk_bbb329e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TStyle, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+40, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *UITemplateStyleOverride) Walk(cb WalkCallback) {
	cb.Do("Unk_bbb329e", &t.Unk_bbb329e)
	cb.Do("TStyle", &t.TStyle)
}

type Type_ac30acdf struct {
	M_aVertices               DT_INT64
	M_aFaces                  DT_INT64
	M_aDistanceConstraints    DT_INT64
	M_aBendingConstraints     DT_INT64
	M_aVertexMap              DT_INT64
	M_aCapsules               DT_INT64
	M_aPlanes                 DT_INT64
	Unk_15437b6               DT_INT64
	M_aAnchorMap              DT_INT64
	M_name                    DT_FIXEDARRAY[*DT_BYTE]
	M_vertexCount             DT_INT
	M_faceCount               DT_INT
	Unk_d4fc6fe               DT_INT
	M_distanceConstraintCount DT_INT
	M_bendingConstraintCount  DT_INT
	Unk_4c2d410               DT_INT
	Unk_5f25c6                DT_INT
	M_boneCount               DT_INT
	M_anchorCount             DT_INT
	M_capsuleCount            DT_INT
	M_planeCount              DT_INT
	M_area                    DT_FLOAT
}

func (t *Type_ac30acdf) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.M_aVertices, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.M_aFaces, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.M_aDistanceConstraints, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.M_aBendingConstraints, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.M_aVertexMap, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.M_aCapsules, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.M_aPlanes, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.Unk_15437b6, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.M_aAnchorMap, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.M_name, r, &Options{ArrayLength: 32}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+104, &t.M_vertexCount, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+108, &t.M_faceCount, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.Unk_d4fc6fe, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+116, &t.M_distanceConstraintCount, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.M_bendingConstraintCount, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+124, &t.Unk_4c2d410, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.Unk_5f25c6, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+132, &t.M_boneCount, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+136, &t.M_anchorCount, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+140, &t.M_capsuleCount, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+144, &t.M_planeCount, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+148, &t.M_area, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+152, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_ac30acdf) Walk(cb WalkCallback) {
	cb.Do("M_aVertices", &t.M_aVertices)
	cb.Do("M_aFaces", &t.M_aFaces)
	cb.Do("M_aDistanceConstraints", &t.M_aDistanceConstraints)
	cb.Do("M_aBendingConstraints", &t.M_aBendingConstraints)
	cb.Do("M_aVertexMap", &t.M_aVertexMap)
	cb.Do("M_aCapsules", &t.M_aCapsules)
	cb.Do("M_aPlanes", &t.M_aPlanes)
	cb.Do("Unk_15437b6", &t.Unk_15437b6)
	cb.Do("M_aAnchorMap", &t.M_aAnchorMap)
	cb.Do("M_name", &t.M_name)
	cb.Do("M_vertexCount", &t.M_vertexCount)
	cb.Do("M_faceCount", &t.M_faceCount)
	cb.Do("Unk_d4fc6fe", &t.Unk_d4fc6fe)
	cb.Do("M_distanceConstraintCount", &t.M_distanceConstraintCount)
	cb.Do("M_bendingConstraintCount", &t.M_bendingConstraintCount)
	cb.Do("Unk_4c2d410", &t.Unk_4c2d410)
	cb.Do("Unk_5f25c6", &t.Unk_5f25c6)
	cb.Do("M_boneCount", &t.M_boneCount)
	cb.Do("M_anchorCount", &t.M_anchorCount)
	cb.Do("M_capsuleCount", &t.M_capsuleCount)
	cb.Do("M_planeCount", &t.M_planeCount)
	cb.Do("M_area", &t.M_area)
}

type UIRadioButtonGroupStyle struct {
	// Inherits UIControlStyle
	// Inherits PolymorphicBase
	DwType                    DT_UINT
	DwPad                     DT_UINT
	HParentStyle              UIControlHandle
	Unk_441f783               DT_INT64
	M_eHasModifiedPowerTagMap DT_TAGMAP[*DT_ENUM]
	Unk_c8d49ac               DT_TAGMAP[*DT_ENUM]
}

func (t *UIRadioButtonGroupStyle) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.HParentStyle, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_441f783, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.M_eHasModifiedPowerTagMap, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.Unk_c8d49ac, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+64, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *UIRadioButtonGroupStyle) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("HParentStyle", &t.HParentStyle)
	cb.Do("Unk_441f783", &t.Unk_441f783)
	cb.Do("M_eHasModifiedPowerTagMap", &t.M_eHasModifiedPowerTagMap)
	cb.Do("Unk_c8d49ac", &t.Unk_c8d49ac)
}

type GameTestingBuybackItem struct {
	THeader      RequiredMessageHeader
	DwItemAmount DT_INT64
}

func (t *GameTestingBuybackItem) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.DwItemAmount, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *GameTestingBuybackItem) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("DwItemAmount", &t.DwItemAmount)
}

type MaterialBoolValue struct {
	Value DT_INT
}

func (t *MaterialBoolValue) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Value, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+4, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *MaterialBoolValue) Walk(cb WalkCallback) {
	cb.Do("Value", &t.Value)
}

type TriggerEventSetHelmVisibility struct {
	// Inherits TriggerEvent
	// Inherits PolymorphicBase
	DwType          DT_UINT
	DwPad           DT_UINT
	TConditions     TriggerConditions
	FGenerated      DT_INT
	Unk_6cba752     DT_INT
	DwParentActorID DT_UINT
	Unk_279aa5a     DT_INT
	DwActorID       DT_UINT
	BHideHelm       DT_INT
}

func (t *TriggerEventSetHelmVisibility) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.FGenerated, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_6cba752, r, &Options{Flags: 16}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.DwParentActorID, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.Unk_279aa5a, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.DwActorID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.BHideHelm, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+96, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TriggerEventSetHelmVisibility) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("TConditions", &t.TConditions)
	cb.Do("FGenerated", &t.FGenerated)
	cb.Do("Unk_6cba752", &t.Unk_6cba752)
	cb.Do("DwParentActorID", &t.DwParentActorID)
	cb.Do("Unk_279aa5a", &t.Unk_279aa5a)
	cb.Do("DwActorID", &t.DwActorID)
	cb.Do("BHideHelm", &t.BHideHelm)
}

type SubzoneModifierTagsEntry_Table struct {
	// Inherits GameBalanceTable
	// Inherits PolymorphicBase
	DwType   DT_UINT
	DwPad    DT_UINT
	TEntries DT_VARIABLEARRAY[*SubzoneModifierTagsEntry]
}

func (t *SubzoneModifierTagsEntry_Table) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TEntries, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *SubzoneModifierTagsEntry_Table) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("TEntries", &t.TEntries)
}

type GameVariableValueSubcondition struct {
	// Inherits Type_d3c3637f
	// Inherits Subcondition
	// Inherits PolymorphicBase
	DwType               DT_UINT
	BNegate              DT_INT
	EComparisonOp        DT_ENUM
	DwPad                DT_UINT
	GbidDesignerVariable DT_GBID
	NValue               DT_INT
}

func (t *GameVariableValueSubcondition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BNegate, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.EComparisonOp, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.GbidDesignerVariable, r, &Options{
		Flags: 1,
		Group: 45,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.NValue, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+40, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *GameVariableValueSubcondition) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("BNegate", &t.BNegate)
	cb.Do("EComparisonOp", &t.EComparisonOp)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("GbidDesignerVariable", &t.GbidDesignerVariable)
	cb.Do("NValue", &t.NValue)
}

type Type_aced015b struct {
	VGravity                                DT_VECTOR3D
	FlGravityPadding                        DT_FLOAT
	Unk_cc27d12                             DT_VECTOR3D
	Unk_92fd45                              DT_FLOAT
	PtInvTransform                          DT_VECTOR4D
	BoneIndex                               DT_WORD
	NIterations                             DT_INT
	Unk_88a73dd                             DT_FLOAT
	Unk_3313228                             DT_FLOAT
	FlStretchingStiffness                   DT_FLOAT
	FlHorizontalStiffness                   DT_FLOAT
	FlShearStiffness                        DT_FLOAT
	FlBendingStiffness                      DT_FLOAT
	FlExplosionFactor                       DT_FLOAT
	FlImpulseCap                            DT_FLOAT
	FlImpulseFactor                         DT_FLOAT
	FlWindFactor                            DT_FLOAT
	FlDragFactor                            DT_FLOAT
	FlLiftFactor                            DT_FLOAT
	FlDampingFactor                         DT_FLOAT
	FlSkinOffset                            DT_FLOAT
	FlSkinExponent                          DT_FLOAT
	FlSkinStiffness                         DT_FLOAT
	FlAttachmentStiffness                   DT_FLOAT
	Unk_914f7cd                             DT_FLOAT
	Unk_b5ff484                             DT_FLOAT
	PtAttackersPerPlayerThrottlingThreshold DT_FLOAT
	Unk_602c192                             DT_FLOAT
	FlDensity                               DT_FLOAT
	FlFrictionScale                         DT_FLOAT
	FFlatten                                DT_INT
	Unk_1e00090                             DT_INT
	FIsStatic                               DT_INT
	Unk_cb063a7                             DT_INT
	Unk_73a63cf                             DT_INT
	ESolverOverride                         DT_ENUM
	EBendModel                              DT_ENUM
	FlStructurePadding1                     DT_FLOAT
	FlStructurePadding2                     DT_FLOAT
}

func (t *Type_aced015b) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.VGravity, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.FlGravityPadding, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_cc27d12, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.Unk_92fd45, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.PtInvTransform, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.BoneIndex, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.NIterations, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.Unk_88a73dd, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+60, &t.Unk_3313228, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.FlStretchingStiffness, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.FlHorizontalStiffness, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.FlShearStiffness, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.FlBendingStiffness, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.FlExplosionFactor, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.FlImpulseCap, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.FlImpulseFactor, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.FlWindFactor, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.FlDragFactor, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+100, &t.FlLiftFactor, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+104, &t.FlDampingFactor, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+108, &t.FlSkinOffset, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.FlSkinExponent, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+116, &t.FlSkinStiffness, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.FlAttachmentStiffness, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+124, &t.Unk_914f7cd, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.Unk_b5ff484, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+132, &t.PtAttackersPerPlayerThrottlingThreshold, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+136, &t.Unk_602c192, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+140, &t.FlDensity, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+144, &t.FlFrictionScale, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+148, &t.FFlatten, r, &Options{Flags: 8388624}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+152, &t.Unk_1e00090, r, &Options{Flags: 8388624}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+156, &t.FIsStatic, r, &Options{Flags: 8388624}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+160, &t.Unk_cb063a7, r, &Options{Flags: 8388624}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+164, &t.Unk_73a63cf, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+168, &t.ESolverOverride, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+172, &t.EBendModel, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+176, &t.FlStructurePadding1, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+180, &t.FlStructurePadding2, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+184, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_aced015b) Walk(cb WalkCallback) {
	cb.Do("VGravity", &t.VGravity)
	cb.Do("FlGravityPadding", &t.FlGravityPadding)
	cb.Do("Unk_cc27d12", &t.Unk_cc27d12)
	cb.Do("Unk_92fd45", &t.Unk_92fd45)
	cb.Do("PtInvTransform", &t.PtInvTransform)
	cb.Do("BoneIndex", &t.BoneIndex)
	cb.Do("NIterations", &t.NIterations)
	cb.Do("Unk_88a73dd", &t.Unk_88a73dd)
	cb.Do("Unk_3313228", &t.Unk_3313228)
	cb.Do("FlStretchingStiffness", &t.FlStretchingStiffness)
	cb.Do("FlHorizontalStiffness", &t.FlHorizontalStiffness)
	cb.Do("FlShearStiffness", &t.FlShearStiffness)
	cb.Do("FlBendingStiffness", &t.FlBendingStiffness)
	cb.Do("FlExplosionFactor", &t.FlExplosionFactor)
	cb.Do("FlImpulseCap", &t.FlImpulseCap)
	cb.Do("FlImpulseFactor", &t.FlImpulseFactor)
	cb.Do("FlWindFactor", &t.FlWindFactor)
	cb.Do("FlDragFactor", &t.FlDragFactor)
	cb.Do("FlLiftFactor", &t.FlLiftFactor)
	cb.Do("FlDampingFactor", &t.FlDampingFactor)
	cb.Do("FlSkinOffset", &t.FlSkinOffset)
	cb.Do("FlSkinExponent", &t.FlSkinExponent)
	cb.Do("FlSkinStiffness", &t.FlSkinStiffness)
	cb.Do("FlAttachmentStiffness", &t.FlAttachmentStiffness)
	cb.Do("Unk_914f7cd", &t.Unk_914f7cd)
	cb.Do("Unk_b5ff484", &t.Unk_b5ff484)
	cb.Do("PtAttackersPerPlayerThrottlingThreshold", &t.PtAttackersPerPlayerThrottlingThreshold)
	cb.Do("Unk_602c192", &t.Unk_602c192)
	cb.Do("FlDensity", &t.FlDensity)
	cb.Do("FlFrictionScale", &t.FlFrictionScale)
	cb.Do("FFlatten", &t.FFlatten)
	cb.Do("Unk_1e00090", &t.Unk_1e00090)
	cb.Do("FIsStatic", &t.FIsStatic)
	cb.Do("Unk_cb063a7", &t.Unk_cb063a7)
	cb.Do("Unk_73a63cf", &t.Unk_73a63cf)
	cb.Do("ESolverOverride", &t.ESolverOverride)
	cb.Do("EBendModel", &t.EBendModel)
	cb.Do("FlStructurePadding1", &t.FlStructurePadding1)
	cb.Do("FlStructurePadding2", &t.FlStructurePadding2)
}

type GeoSet struct {
	PtSubObjects  DT_VARIABLEARRAY[*SubObject]
	Unk_9d1d596   DT_VARIABLEARRAY[*DT_INT]
	Unk_79283f    DT_INT
	Unk_af1153d   DT_INT
	FlLODDistance DT_FLOAT
}

func (t *GeoSet) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.PtSubObjects, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_9d1d596, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.Unk_79283f, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.Unk_af1153d, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.FlLODDistance, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *GeoSet) Walk(cb WalkCallback) {
	cb.Do("PtSubObjects", &t.PtSubObjects)
	cb.Do("Unk_9d1d596", &t.Unk_9d1d596)
	cb.Do("Unk_79283f", &t.Unk_79283f)
	cb.Do("Unk_af1153d", &t.Unk_af1153d)
	cb.Do("FlLODDistance", &t.FlLODDistance)
}

type RequiredResponseMessageHeader struct {
	THeader RequiredMessageHeader
	UToken  DT_UINT
	EError  DT_ENUM
}

func (t *RequiredResponseMessageHeader) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.UToken, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.EError, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *RequiredResponseMessageHeader) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("UToken", &t.UToken)
	cb.Do("EError", &t.EError)
}

type Type_ad4d33a9 struct {
	NWidth      DT_INT
	NHeight     DT_INT
	NDepth      DT_INT
	FlGridSize  DT_FLOAT
	WpOrigin    DT_VECTOR3D
	Unk_aa0958e DT_VARIABLEARRAY[*DT_WORD]
	Unk_aa09583 DT_VARIABLEARRAY[*DT_WORD]
	Unk_aa0957e DT_VARIABLEARRAY[*DT_WORD]
	Unk_dd3cf4b DT_VARIABLEARRAY[*DT_WORD]
	Unk_dd3cf40 DT_VARIABLEARRAY[*DT_WORD]
	Unk_dd3cf3b DT_VARIABLEARRAY[*DT_WORD]
}

func (t *Type_ad4d33a9) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.NWidth, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.NHeight, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.NDepth, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.FlGridSize, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.WpOrigin, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.Unk_aa0958e, r, &Options{Flags: 2097153}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.Unk_aa09583, r, &Options{Flags: 2097153}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.Unk_aa0957e, r, &Options{Flags: 2097153}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.Unk_dd3cf4b, r, &Options{Flags: 2097153}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.Unk_dd3cf40, r, &Options{Flags: 2097153}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.Unk_dd3cf3b, r, &Options{Flags: 2097153}); err != nil {
		return err
	}
	if _, err := r.Seek(p+128, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_ad4d33a9) Walk(cb WalkCallback) {
	cb.Do("NWidth", &t.NWidth)
	cb.Do("NHeight", &t.NHeight)
	cb.Do("NDepth", &t.NDepth)
	cb.Do("FlGridSize", &t.FlGridSize)
	cb.Do("WpOrigin", &t.WpOrigin)
	cb.Do("Unk_aa0958e", &t.Unk_aa0958e)
	cb.Do("Unk_aa09583", &t.Unk_aa09583)
	cb.Do("Unk_aa0957e", &t.Unk_aa0957e)
	cb.Do("Unk_dd3cf4b", &t.Unk_dd3cf4b)
	cb.Do("Unk_dd3cf40", &t.Unk_dd3cf40)
	cb.Do("Unk_dd3cf3b", &t.Unk_dd3cf3b)
}

type MountACDInfo struct {
	SnoMountPower DT_SNO
	SnoItems      DT_FIXEDARRAY[*DT_SNO]
}

func (t *MountACDInfo) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoMountPower, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.SnoItems, r, &Options{
		ArrayLength: 2,
		Flags:       9,
		Group:       73,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *MountACDInfo) Walk(cb WalkCallback) {
	cb.Do("SnoMountPower", &t.SnoMountPower)
	cb.Do("SnoItems", &t.SnoItems)
}

type PlayerTradeMessage struct {
	THeader        RequiredMessageHeader
	UGameAccountId DT_OPTIONAL[*DT_UINT]
	UTradeId       DT_OPTIONAL[*DT_UINT]
	AnnItem        DT_OPTIONAL[*DT_ACD_NETWORK_NAME]
	Currency       DT_OPTIONAL[*Currency]
	Quantity       DT_OPTIONAL[*DT_INT64]
}

func (t *PlayerTradeMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.UGameAccountId, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.UTradeId, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.AnnItem, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.Currency, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Quantity, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+88, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PlayerTradeMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("UGameAccountId", &t.UGameAccountId)
	cb.Do("UTradeId", &t.UTradeId)
	cb.Do("AnnItem", &t.AnnItem)
	cb.Do("Currency", &t.Currency)
	cb.Do("Quantity", &t.Quantity)
}

type DesignerVariableChanged struct {
	THeader              RequiredMessageHeader
	GbidDesignerVariable DT_GBID
	TPayload             DesignerVariablePayload
}

func (t *DesignerVariableChanged) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.GbidDesignerVariable, r, &Options{
		Flags: 1,
		Group: 45,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.TPayload, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+28, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *DesignerVariableChanged) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("GbidDesignerVariable", &t.GbidDesignerVariable)
	cb.Do("TPayload", &t.TPayload)
}

type GameTestingSellItem struct {
	THeader      RequiredMessageHeader
	DwItemAmount DT_INT64
}

func (t *GameTestingSellItem) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.DwItemAmount, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *GameTestingSellItem) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("DwItemAmount", &t.DwItemAmount)
}

type Type_adf79afe struct {
	// Inherits Type_4e43aa7a
	DwType      DT_UINT
	Unk_9b2bc26 Type_80fa280c
	Unk_77ed19a DT_ENUM
	DwPad       DT_UINT
}

func (t *Type_adf79afe) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_9b2bc26, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.Unk_77ed19a, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+56, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_adf79afe) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("Unk_9b2bc26", &t.Unk_9b2bc26)
	cb.Do("Unk_77ed19a", &t.Unk_77ed19a)
	cb.Do("DwPad", &t.DwPad)
}

type SetIdleAnimationMessage struct {
	THeader         RequiredMessageHeader
	Ann             DT_ACD_NETWORK_NAME
	SnoPowerAnimKey DT_SNO
	Unk_fefc30f     DT_OPTIONAL[*DT_INT]
}

func (t *SetIdleAnimationMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Ann, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SnoPowerAnimKey, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.Unk_fefc30f, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+36, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *SetIdleAnimationMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("Ann", &t.Ann)
	cb.Do("SnoPowerAnimKey", &t.SnoPowerAnimKey)
	cb.Do("Unk_fefc30f", &t.Unk_fefc30f)
}

type Type_ae75ccfd struct {
	// Inherits TriggerEvent
	// Inherits PolymorphicBase
	DwType          DT_UINT
	DwPad           DT_UINT
	TConditions     TriggerConditions
	FGenerated      DT_INT
	Unk_6cba752     DT_INT
	DwParentActorID DT_UINT
	Unk_77f81b0     StringLabelHandleEx
	SnoPOICamera    DT_SNO
}

func (t *Type_ae75ccfd) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.FGenerated, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_6cba752, r, &Options{Flags: 16}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.DwParentActorID, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.Unk_77f81b0, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.SnoPOICamera, r, &Options{
		Flags: 1,
		Group: 46,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+96, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_ae75ccfd) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("TConditions", &t.TConditions)
	cb.Do("FGenerated", &t.FGenerated)
	cb.Do("Unk_6cba752", &t.Unk_6cba752)
	cb.Do("DwParentActorID", &t.DwParentActorID)
	cb.Do("Unk_77f81b0", &t.Unk_77f81b0)
	cb.Do("SnoPOICamera", &t.SnoPOICamera)
}

type AmbientSoundDefinition struct {
	SnoBackground         DT_SNO
	Unk_29ee38e           DT_FLOAT
	TRandomSounds         DT_VARIABLEARRAY[*RandomAmbientSoundParams]
	TDynamicGameParameter DynamicGameParameter
	TDynamicAudioState    DynamicAudioState
}

func (t *AmbientSoundDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.SnoBackground, r, &Options{
		Flags: 1,
		Group: 40,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.Unk_29ee38e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TRandomSounds, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.TDynamicGameParameter, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.TDynamicAudioState, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+72, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *AmbientSoundDefinition) Walk(cb WalkCallback) {
	cb.Do("SnoBackground", &t.SnoBackground)
	cb.Do("Unk_29ee38e", &t.Unk_29ee38e)
	cb.Do("TRandomSounds", &t.TRandomSounds)
	cb.Do("TDynamicGameParameter", &t.TDynamicGameParameter)
	cb.Do("TDynamicAudioState", &t.TDynamicAudioState)
}

type HeroDetailsArray struct {
	ArEntries DT_VARIABLEARRAY[*HeroDetailsEntry]
}

func (t *HeroDetailsArray) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.ArEntries, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *HeroDetailsArray) Walk(cb WalkCallback) {
	cb.Do("ArEntries", &t.ArEntries)
}

type ScriptMessageMap struct {
	EEventType        DT_ENUM
	DwListenerFlags   DT_UINT
	SnoCondition      DT_SNO
	Unk_c3ba01d       DT_INT
	FlCooldownSeconds DT_FLOAT
	ArEventFilters    DT_VARIABLEARRAY[*ScriptMessageMapFilter]
	Unk_492729e       DT_POLYMORPHIC_VARIABLEARRAY[*DT_INT64]
	Unk_9927fd3       DT_UINT
}

func (t *ScriptMessageMap) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.EEventType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.DwListenerFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.SnoCondition, r, &Options{
		Flags: 1,
		Group: 51,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.Unk_c3ba01d, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.FlCooldownSeconds, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ArEventFilters, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.Unk_492729e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.Unk_9927fd3, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+72, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ScriptMessageMap) Walk(cb WalkCallback) {
	cb.Do("EEventType", &t.EEventType)
	cb.Do("DwListenerFlags", &t.DwListenerFlags)
	cb.Do("SnoCondition", &t.SnoCondition)
	cb.Do("Unk_c3ba01d", &t.Unk_c3ba01d)
	cb.Do("FlCooldownSeconds", &t.FlCooldownSeconds)
	cb.Do("ArEventFilters", &t.ArEventFilters)
	cb.Do("Unk_492729e", &t.Unk_492729e)
	cb.Do("Unk_9927fd3", &t.Unk_9927fd3)
}

type Type_aef2f516 struct {
	NFrameStart           DT_INT
	NFrameEnd             DT_INT
	Unk_a45e6bd           DT_FLOAT
	Unk_36bc3de           DT_FLOAT
	BUseTargetActor       DT_INT
	Unk_737a63            DT_INT
	Unk_e3bef92           DT_UINT
	VHardpointLocalOffset DT_VECTOR3D
	FlZoom                DT_FLOAT
}

func (t *Type_aef2f516) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.NFrameStart, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.NFrameEnd, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.Unk_a45e6bd, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.Unk_36bc3de, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BUseTargetActor, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.Unk_737a63, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_e3bef92, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.VHardpointLocalOffset, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.FlZoom, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+44, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_aef2f516) Walk(cb WalkCallback) {
	cb.Do("NFrameStart", &t.NFrameStart)
	cb.Do("NFrameEnd", &t.NFrameEnd)
	cb.Do("Unk_a45e6bd", &t.Unk_a45e6bd)
	cb.Do("Unk_36bc3de", &t.Unk_36bc3de)
	cb.Do("BUseTargetActor", &t.BUseTargetActor)
	cb.Do("Unk_737a63", &t.Unk_737a63)
	cb.Do("Unk_e3bef92", &t.Unk_e3bef92)
	cb.Do("VHardpointLocalOffset", &t.VHardpointLocalOffset)
	cb.Do("FlZoom", &t.FlZoom)
}

type HeroDetailsEntry struct {
	DwID        DT_UINT
	ECurrency   DT_ENUM
	BShowLimit  DT_INT
	ArValues    DT_VARIABLEARRAY[*HeroDetailsValue]
	Unk_6ae314e DT_INT
	BIsCoreStat DT_INT
	Unk_40ddaae DT_FIXEDARRAY[*DT_INT]
}

func (t *HeroDetailsEntry) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.DwID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.ECurrency, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.BShowLimit, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.ArValues, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.Unk_6ae314e, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.BIsCoreStat, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.Unk_40ddaae, r, &Options{
		ArrayLength: 5,
		Flags:       1,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+64, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *HeroDetailsEntry) Walk(cb WalkCallback) {
	cb.Do("DwID", &t.DwID)
	cb.Do("ECurrency", &t.ECurrency)
	cb.Do("BShowLimit", &t.BShowLimit)
	cb.Do("ArValues", &t.ArValues)
	cb.Do("Unk_6ae314e", &t.Unk_6ae314e)
	cb.Do("BIsCoreStat", &t.BIsCoreStat)
	cb.Do("Unk_40ddaae", &t.Unk_40ddaae)
}

type WorldStateSubcondition struct {
	// Inherits Type_d3c3637f
	// Inherits Subcondition
	// Inherits PolymorphicBase
	DwType        DT_UINT
	BNegate       DT_INT
	EComparisonOp DT_ENUM
	DwPad         DT_UINT
	SnoWorldState DT_SNO
	NValue        DT_INT
}

func (t *WorldStateSubcondition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BNegate, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.EComparisonOp, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.SnoWorldState, r, &Options{
		Flags: 513,
		Group: 86,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.NValue, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+40, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *WorldStateSubcondition) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("BNegate", &t.BNegate)
	cb.Do("EComparisonOp", &t.EComparisonOp)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("SnoWorldState", &t.SnoWorldState)
	cb.Do("NValue", &t.NValue)
}

type PowerConditionHasDot struct {
	// Inherits PowerConditionBase
	// Inherits PolymorphicBase
	DwType      DT_UINT
	BInverse    DT_INT
	DwPad       DT_UINT
	ESubject    DT_ENUM
	EDamageType DT_ENUM
	Unk_9d0a7aa DT_INT
}

func (t *PowerConditionHasDot) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BInverse, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ESubject, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.EDamageType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.Unk_9d0a7aa, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+40, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PowerConditionHasDot) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("BInverse", &t.BInverse)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("ESubject", &t.ESubject)
	cb.Do("EDamageType", &t.EDamageType)
	cb.Do("Unk_9d0a7aa", &t.Unk_9d0a7aa)
}

type Type_af47e1c0 struct {
	// Inherits PowerConditionBase
	// Inherits PolymorphicBase
	DwType      DT_UINT
	BInverse    DT_INT
	DwPad       DT_UINT
	ESubject    DT_ENUM
	SnoPower    DT_SNO
	Unk_e0aad12 DT_UINT
}

func (t *Type_af47e1c0) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BInverse, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ESubject, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.SnoPower, r, &Options{
		Flags: 513,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.Unk_e0aad12, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+40, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_af47e1c0) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("BInverse", &t.BInverse)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("ESubject", &t.ESubject)
	cb.Do("SnoPower", &t.SnoPower)
	cb.Do("Unk_e0aad12", &t.Unk_e0aad12)
}

type MaterialValueDefinition struct{}

func (t *MaterialValueDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *MaterialValueDefinition) Walk(cb WalkCallback) {}

type Type_af6042ce struct {
	SzDrawHook DT_CSTRING[*DT_BYTE]
}

func (t *Type_af6042ce) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SzDrawHook, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_af6042ce) Walk(cb WalkCallback) {
	cb.Do("SzDrawHook", &t.SzDrawHook)
}

type Type_af6bc267 struct {
	FlHaze      DT_FLOAT
	Unk_b61e136 DT_FLOAT
	Unk_6fc9e50 DT_RGBACOLOR
	Unk_3a37ef6 DT_RGBACOLOR
	Unk_bbf28fc DT_INT
	Unk_98f5aef DT_FLOAT
	Unk_c4c9235 DT_FLOAT
	Unk_d79b9ce DT_FLOAT
	Unk_cb0e626 DT_FLOAT
	Unk_cb0e528 DT_FLOAT
	Unk_467a561 DT_FLOAT
	Unk_d4fb023 DT_FLOAT
}

func (t *Type_af6bc267) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.FlHaze, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.Unk_b61e136, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.Unk_6fc9e50, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.Unk_3a37ef6, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_bbf28fc, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.Unk_98f5aef, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_c4c9235, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.Unk_d79b9ce, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.Unk_cb0e626, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.Unk_cb0e528, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.Unk_467a561, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.Unk_d4fb023, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_af6bc267) Walk(cb WalkCallback) {
	cb.Do("FlHaze", &t.FlHaze)
	cb.Do("Unk_b61e136", &t.Unk_b61e136)
	cb.Do("Unk_6fc9e50", &t.Unk_6fc9e50)
	cb.Do("Unk_3a37ef6", &t.Unk_3a37ef6)
	cb.Do("Unk_bbf28fc", &t.Unk_bbf28fc)
	cb.Do("Unk_98f5aef", &t.Unk_98f5aef)
	cb.Do("Unk_c4c9235", &t.Unk_c4c9235)
	cb.Do("Unk_d79b9ce", &t.Unk_d79b9ce)
	cb.Do("Unk_cb0e626", &t.Unk_cb0e626)
	cb.Do("Unk_cb0e528", &t.Unk_cb0e528)
	cb.Do("Unk_467a561", &t.Unk_467a561)
	cb.Do("Unk_d4fb023", &t.Unk_d4fb023)
}

type Type_af6f9d33 struct {
	// Inherits PowerCallbackBase
	// Inherits PolymorphicBase
	DwType                DT_UINT
	DwPad                 DT_UINT
	SnoTriggerEffectGroup DT_SNO
	BCouldHaveRagdolled   DT_INT
}

func (t *Type_af6f9d33) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoTriggerEffectGroup, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.BCouldHaveRagdolled, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_af6f9d33) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("SnoTriggerEffectGroup", &t.SnoTriggerEffectGroup)
	cb.Do("BCouldHaveRagdolled", &t.BCouldHaveRagdolled)
}

type Type_af88dbb5 struct {
	// Inherits PowerCallbackBase
	// Inherits PolymorphicBase
	DwType                DT_UINT
	DwPad                 DT_UINT
	SnoTriggerEffectGroup DT_SNO
	BCouldHaveRagdolled   DT_INT
}

func (t *Type_af88dbb5) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoTriggerEffectGroup, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.BCouldHaveRagdolled, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_af88dbb5) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("SnoTriggerEffectGroup", &t.SnoTriggerEffectGroup)
	cb.Do("BCouldHaveRagdolled", &t.BCouldHaveRagdolled)
}

type IKBone struct {
	NBoneIndex DT_INT
}

func (t *IKBone) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.NBoneIndex, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+4, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *IKBone) Walk(cb WalkCallback) {
	cb.Do("NBoneIndex", &t.NBoneIndex)
}

type IKData struct {
	Unk_77f305a DT_FLOAT
	Unk_31b7df8 DT_FLOAT
	ArIKLimbs   DT_POLYMORPHIC_VARIABLEARRAY[*DT_INT64]
	Unk_b317460 Type_5535d75
	Unk_871eac9 Type_357c091e
}

func (t *IKData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Unk_77f305a, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.Unk_31b7df8, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.ArIKLimbs, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.Unk_b317460, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.Unk_871eac9, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+64, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *IKData) Walk(cb WalkCallback) {
	cb.Do("Unk_77f305a", &t.Unk_77f305a)
	cb.Do("Unk_31b7df8", &t.Unk_31b7df8)
	cb.Do("ArIKLimbs", &t.ArIKLimbs)
	cb.Do("Unk_b317460", &t.Unk_b317460)
	cb.Do("Unk_871eac9", &t.Unk_871eac9)
}

type ACDTranslateFacingMessage struct {
	THeader     RequiredMessageHeader
	Ann         DT_ACD_NETWORK_NAME
	ADesiredYaw DT_FLOAT
	BSnapFacing DT_INT
}

func (t *ACDTranslateFacingMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Ann, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ADesiredYaw, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.BSnapFacing, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ACDTranslateFacingMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("Ann", &t.Ann)
	cb.Do("ADesiredYaw", &t.ADesiredYaw)
	cb.Do("BSnapFacing", &t.BSnapFacing)
}

type Type_affec908 struct {
	// Inherits Subcondition
	// Inherits PolymorphicBase
	DwType      DT_UINT
	BNegate     DT_INT
	DwPad       DT_UINT
	Unk_dbb58d4 DT_ENUM
	Unk_c7b2b18 DT_ENUM
}

func (t *Type_affec908) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BNegate, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_dbb58d4, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.Unk_c7b2b18, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_affec908) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("BNegate", &t.BNegate)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("Unk_dbb58d4", &t.Unk_dbb58d4)
	cb.Do("Unk_c7b2b18", &t.Unk_c7b2b18)
}

type MarkerLink struct {
	NMarkerID    DT_INT
	DwGroupHash  DT_UINT
	NMarkerIndex DT_INT
}

func (t *MarkerLink) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.NMarkerID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.DwGroupHash, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.NMarkerIndex, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+12, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *MarkerLink) Walk(cb WalkCallback) {
	cb.Do("NMarkerID", &t.NMarkerID)
	cb.Do("DwGroupHash", &t.DwGroupHash)
	cb.Do("NMarkerIndex", &t.NMarkerIndex)
}

type HeroDetailsValue struct {
	TFormula    DT_STRING_FORMULA
	Unk_d55170  DT_UINT
	Unk_62967bd DT_INT
	Unk_9554429 DT_INT
	Unk_395cf3a DT_ENUM
}

func (t *HeroDetailsValue) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.TFormula, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.Unk_d55170, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.Unk_62967bd, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.Unk_9554429, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.Unk_395cf3a, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *HeroDetailsValue) Walk(cb WalkCallback) {
	cb.Do("TFormula", &t.TFormula)
	cb.Do("Unk_d55170", &t.Unk_d55170)
	cb.Do("Unk_62967bd", &t.Unk_62967bd)
	cb.Do("Unk_9554429", &t.Unk_9554429)
	cb.Do("Unk_395cf3a", &t.Unk_395cf3a)
}

type PowerConditionHasDamage struct {
	// Inherits PowerConditionBase
	// Inherits PolymorphicBase
	DwType   DT_UINT
	BInverse DT_INT
	DwPad    DT_UINT
}

func (t *PowerConditionHasDamage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BInverse, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PowerConditionHasDamage) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("BInverse", &t.BInverse)
	cb.Do("DwPad", &t.DwPad)
}

type PowerConditionIsAutoCast struct {
	// Inherits PowerConditionBase
	// Inherits PolymorphicBase
	DwType   DT_UINT
	BInverse DT_INT
	DwPad    DT_UINT
}

func (t *PowerConditionIsAutoCast) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BInverse, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PowerConditionIsAutoCast) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("BInverse", &t.BInverse)
	cb.Do("DwPad", &t.DwPad)
}

type EyeColorDefinition struct {
	Unk_509016f              DT_RGBACOLOR
	NSortOrder               DT_INT
	FUsableByClass           DT_FIXEDARRAY[*DT_INT]
	RgbaIrisInner            DT_RGBACOLOR
	RgbaIrisOuter            DT_RGBACOLOR
	FlIrisBrightness         DT_FLOAT
	FlIrisRotation           DT_FLOAT
	FlIrisRoughness          DT_FLOAT
	FlIrisShadowIntensity    DT_FLOAT
	FlIrisEmissiveStrength   DT_FLOAT
	FlLimbusBlur             DT_FLOAT
	FlLimbusBrightness       DT_FLOAT
	FlLimbusThickness        DT_FLOAT
	FlPupilSize              DT_FLOAT
	Unk_ef6e5d4              DT_FLOAT
	Unk_cde5290              DT_FLOAT
	FlScleraBrightness       DT_FLOAT
	FlScleraRoughness        DT_FLOAT
	FlScleraEmissiveStrength DT_FLOAT
	SnoEmissiveMask          DT_SNO
}

func (t *EyeColorDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.Unk_509016f, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.NSortOrder, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.FUsableByClass, r, &Options{
		ArrayLength: 5,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.RgbaIrisInner, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.RgbaIrisOuter, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.FlIrisBrightness, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.FlIrisRotation, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.FlIrisRoughness, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.FlIrisShadowIntensity, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+60, &t.FlIrisEmissiveStrength, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.FlLimbusBlur, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.FlLimbusBrightness, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.FlLimbusThickness, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.FlPupilSize, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.Unk_ef6e5d4, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.Unk_cde5290, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.FlScleraBrightness, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.FlScleraRoughness, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.FlScleraEmissiveStrength, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+100, &t.SnoEmissiveMask, r, &Options{
		Flags: 1,
		Group: 44,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+104, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *EyeColorDefinition) Walk(cb WalkCallback) {
	cb.Do("Unk_509016f", &t.Unk_509016f)
	cb.Do("NSortOrder", &t.NSortOrder)
	cb.Do("FUsableByClass", &t.FUsableByClass)
	cb.Do("RgbaIrisInner", &t.RgbaIrisInner)
	cb.Do("RgbaIrisOuter", &t.RgbaIrisOuter)
	cb.Do("FlIrisBrightness", &t.FlIrisBrightness)
	cb.Do("FlIrisRotation", &t.FlIrisRotation)
	cb.Do("FlIrisRoughness", &t.FlIrisRoughness)
	cb.Do("FlIrisShadowIntensity", &t.FlIrisShadowIntensity)
	cb.Do("FlIrisEmissiveStrength", &t.FlIrisEmissiveStrength)
	cb.Do("FlLimbusBlur", &t.FlLimbusBlur)
	cb.Do("FlLimbusBrightness", &t.FlLimbusBrightness)
	cb.Do("FlLimbusThickness", &t.FlLimbusThickness)
	cb.Do("FlPupilSize", &t.FlPupilSize)
	cb.Do("Unk_ef6e5d4", &t.Unk_ef6e5d4)
	cb.Do("Unk_cde5290", &t.Unk_cde5290)
	cb.Do("FlScleraBrightness", &t.FlScleraBrightness)
	cb.Do("FlScleraRoughness", &t.FlScleraRoughness)
	cb.Do("FlScleraEmissiveStrength", &t.FlScleraEmissiveStrength)
	cb.Do("SnoEmissiveMask", &t.SnoEmissiveMask)
}

type DungeonAffixRange struct {
	TTierRange DT_RANGE[*DT_INT]
}

func (t *DungeonAffixRange) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.TTierRange, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *DungeonAffixRange) Walk(cb WalkCallback) {
	cb.Do("TTierRange", &t.TTierRange)
}

type PlayerKickTimerMessage struct {
	THeader              RequiredMessageHeader
	DwLastKickAttempt    DT_UINT
	DwLastSuccessfulKick DT_UINT
}

func (t *PlayerKickTimerMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.DwLastKickAttempt, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwLastSuccessfulKick, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PlayerKickTimerMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("DwLastKickAttempt", &t.DwLastKickAttempt)
	cb.Do("DwLastSuccessfulKick", &t.DwLastSuccessfulKick)
}

type Type_b0ba2b42 struct {
	SzOnL1             DT_CSTRING[*DT_BYTE]
	SzOnL2             DT_CSTRING[*DT_BYTE]
	SzOnL3             DT_CSTRING[*DT_BYTE]
	SzOnR1             DT_CSTRING[*DT_BYTE]
	SzOnR2             DT_CSTRING[*DT_BYTE]
	SzOnR3             DT_CSTRING[*DT_BYTE]
	SzOnButton1        DT_CSTRING[*DT_BYTE]
	SzOnButton2        DT_CSTRING[*DT_BYTE]
	SzOnButton3        DT_CSTRING[*DT_BYTE]
	SzOnButton4        DT_CSTRING[*DT_BYTE]
	SzOnDPadUp         DT_CSTRING[*DT_BYTE]
	SzOnDPadRight      DT_CSTRING[*DT_BYTE]
	SzOnDPadLeft       DT_CSTRING[*DT_BYTE]
	SzOnDPadDown       DT_CSTRING[*DT_BYTE]
	SzOnBack           DT_CSTRING[*DT_BYTE]
	SzOnStart          DT_CSTRING[*DT_BYTE]
	Unk_e959ede        DT_CSTRING[*DT_BYTE]
	Unk_e1fae12        DT_CSTRING[*DT_BYTE]
	Unk_4cbd064        DT_CSTRING[*DT_BYTE]
	Unk_4dde8e5        DT_CSTRING[*DT_BYTE]
	Unk_4f00166        DT_CSTRING[*DT_BYTE]
	Unk_2cac42a        DT_CSTRING[*DT_BYTE]
	Unk_2dcdcab        DT_CSTRING[*DT_BYTE]
	Unk_2eef52c        DT_CSTRING[*DT_BYTE]
	Unk_24240f4        DT_CSTRING[*DT_BYTE]
	Unk_2545975        DT_CSTRING[*DT_BYTE]
	Unk_26671f6        DT_CSTRING[*DT_BYTE]
	Unk_2788a77        DT_CSTRING[*DT_BYTE]
	Unk_8d1cc85        DT_CSTRING[*DT_BYTE]
	Unk_9e50fde        DT_CSTRING[*DT_BYTE]
	Unk_e5c70eb        DT_CSTRING[*DT_BYTE]
	Unk_54f4918        DT_CSTRING[*DT_BYTE]
	Unk_aaebdb8        DT_CSTRING[*DT_BYTE]
	SzFirstActiveChild DT_CSTRING[*DT_BYTE]
	Unk_c0f151b        DT_CSTRING[*DT_BYTE]
	Unk_3b59e4f        DT_CSTRING[*DT_BYTE]
	Unk_9a1cd2f        DT_INT
	Unk_c7baf30        DT_INT
	Unk_f559131        DT_INT
	Unk_e2699f5        DT_INT
	Unk_1007bf6        DT_INT
	Unk_3da5df7        DT_INT
	Unk_b3c98bf        DT_INT
	Unk_e167ac0        DT_INT
	Unk_f05cc1         DT_INT
	Unk_3ca3ec2        DT_INT
	Unk_6edded0        DT_INT
	Unk_be404a9        DT_INT
	Unk_9877a36        DT_INT
	Unk_f32fde3        DT_INT
	Unk_b338683        DT_INT
	Unk_e016b80        DT_INT
	Unk_3087066        DT_INT
	Unk_3a9209a        DT_INT
	SzLStickHandler    DT_CSTRING[*DT_BYTE]
	Unk_5e4bcce        DT_CSTRING[*DT_BYTE]
	SzRStickHandler    DT_CSTRING[*DT_BYTE]
	Unk_9b3146         DT_CSTRING[*DT_BYTE]
	Unk_69bea99        DT_CSTRING[*DT_BYTE]
	Unk_4d22020        DT_CSTRING[*DT_BYTE]
	Unk_d7b653         DT_CSTRING[*DT_BYTE]
}

func (t *Type_b0ba2b42) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SzOnL1, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SzOnL2, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.SzOnL3, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.SzOnR1, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.SzOnR2, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.SzOnR3, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.SzOnButton1, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.SzOnButton2, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.SzOnButton3, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+144, &t.SzOnButton4, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+160, &t.SzOnDPadUp, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+176, &t.SzOnDPadRight, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+192, &t.SzOnDPadLeft, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+208, &t.SzOnDPadDown, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+224, &t.SzOnBack, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+240, &t.SzOnStart, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+256, &t.Unk_e959ede, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+272, &t.Unk_e1fae12, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+288, &t.Unk_4cbd064, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+304, &t.Unk_4dde8e5, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+320, &t.Unk_4f00166, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+336, &t.Unk_2cac42a, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+352, &t.Unk_2dcdcab, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+368, &t.Unk_2eef52c, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+384, &t.Unk_24240f4, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+400, &t.Unk_2545975, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+416, &t.Unk_26671f6, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+432, &t.Unk_2788a77, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+448, &t.Unk_8d1cc85, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+464, &t.Unk_9e50fde, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+480, &t.Unk_e5c70eb, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+496, &t.Unk_54f4918, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+512, &t.Unk_aaebdb8, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+528, &t.SzFirstActiveChild, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+544, &t.Unk_c0f151b, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+560, &t.Unk_3b59e4f, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+576, &t.Unk_9a1cd2f, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+580, &t.Unk_c7baf30, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+584, &t.Unk_f559131, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+588, &t.Unk_e2699f5, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+592, &t.Unk_1007bf6, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+596, &t.Unk_3da5df7, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+600, &t.Unk_b3c98bf, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+604, &t.Unk_e167ac0, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+608, &t.Unk_f05cc1, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+612, &t.Unk_3ca3ec2, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+616, &t.Unk_6edded0, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+620, &t.Unk_be404a9, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+624, &t.Unk_9877a36, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+628, &t.Unk_f32fde3, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+632, &t.Unk_b338683, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+636, &t.Unk_e016b80, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+640, &t.Unk_3087066, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+644, &t.Unk_3a9209a, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+648, &t.SzLStickHandler, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+664, &t.Unk_5e4bcce, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+680, &t.SzRStickHandler, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+696, &t.Unk_9b3146, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+712, &t.Unk_69bea99, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+728, &t.Unk_4d22020, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+744, &t.Unk_d7b653, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+760, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_b0ba2b42) Walk(cb WalkCallback) {
	cb.Do("SzOnL1", &t.SzOnL1)
	cb.Do("SzOnL2", &t.SzOnL2)
	cb.Do("SzOnL3", &t.SzOnL3)
	cb.Do("SzOnR1", &t.SzOnR1)
	cb.Do("SzOnR2", &t.SzOnR2)
	cb.Do("SzOnR3", &t.SzOnR3)
	cb.Do("SzOnButton1", &t.SzOnButton1)
	cb.Do("SzOnButton2", &t.SzOnButton2)
	cb.Do("SzOnButton3", &t.SzOnButton3)
	cb.Do("SzOnButton4", &t.SzOnButton4)
	cb.Do("SzOnDPadUp", &t.SzOnDPadUp)
	cb.Do("SzOnDPadRight", &t.SzOnDPadRight)
	cb.Do("SzOnDPadLeft", &t.SzOnDPadLeft)
	cb.Do("SzOnDPadDown", &t.SzOnDPadDown)
	cb.Do("SzOnBack", &t.SzOnBack)
	cb.Do("SzOnStart", &t.SzOnStart)
	cb.Do("Unk_e959ede", &t.Unk_e959ede)
	cb.Do("Unk_e1fae12", &t.Unk_e1fae12)
	cb.Do("Unk_4cbd064", &t.Unk_4cbd064)
	cb.Do("Unk_4dde8e5", &t.Unk_4dde8e5)
	cb.Do("Unk_4f00166", &t.Unk_4f00166)
	cb.Do("Unk_2cac42a", &t.Unk_2cac42a)
	cb.Do("Unk_2dcdcab", &t.Unk_2dcdcab)
	cb.Do("Unk_2eef52c", &t.Unk_2eef52c)
	cb.Do("Unk_24240f4", &t.Unk_24240f4)
	cb.Do("Unk_2545975", &t.Unk_2545975)
	cb.Do("Unk_26671f6", &t.Unk_26671f6)
	cb.Do("Unk_2788a77", &t.Unk_2788a77)
	cb.Do("Unk_8d1cc85", &t.Unk_8d1cc85)
	cb.Do("Unk_9e50fde", &t.Unk_9e50fde)
	cb.Do("Unk_e5c70eb", &t.Unk_e5c70eb)
	cb.Do("Unk_54f4918", &t.Unk_54f4918)
	cb.Do("Unk_aaebdb8", &t.Unk_aaebdb8)
	cb.Do("SzFirstActiveChild", &t.SzFirstActiveChild)
	cb.Do("Unk_c0f151b", &t.Unk_c0f151b)
	cb.Do("Unk_3b59e4f", &t.Unk_3b59e4f)
	cb.Do("Unk_9a1cd2f", &t.Unk_9a1cd2f)
	cb.Do("Unk_c7baf30", &t.Unk_c7baf30)
	cb.Do("Unk_f559131", &t.Unk_f559131)
	cb.Do("Unk_e2699f5", &t.Unk_e2699f5)
	cb.Do("Unk_1007bf6", &t.Unk_1007bf6)
	cb.Do("Unk_3da5df7", &t.Unk_3da5df7)
	cb.Do("Unk_b3c98bf", &t.Unk_b3c98bf)
	cb.Do("Unk_e167ac0", &t.Unk_e167ac0)
	cb.Do("Unk_f05cc1", &t.Unk_f05cc1)
	cb.Do("Unk_3ca3ec2", &t.Unk_3ca3ec2)
	cb.Do("Unk_6edded0", &t.Unk_6edded0)
	cb.Do("Unk_be404a9", &t.Unk_be404a9)
	cb.Do("Unk_9877a36", &t.Unk_9877a36)
	cb.Do("Unk_f32fde3", &t.Unk_f32fde3)
	cb.Do("Unk_b338683", &t.Unk_b338683)
	cb.Do("Unk_e016b80", &t.Unk_e016b80)
	cb.Do("Unk_3087066", &t.Unk_3087066)
	cb.Do("Unk_3a9209a", &t.Unk_3a9209a)
	cb.Do("SzLStickHandler", &t.SzLStickHandler)
	cb.Do("Unk_5e4bcce", &t.Unk_5e4bcce)
	cb.Do("SzRStickHandler", &t.SzRStickHandler)
	cb.Do("Unk_9b3146", &t.Unk_9b3146)
	cb.Do("Unk_69bea99", &t.Unk_69bea99)
	cb.Do("Unk_4d22020", &t.Unk_4d22020)
	cb.Do("Unk_d7b653", &t.Unk_d7b653)
}

type UIColorPickerStyle struct {
	// Inherits UIWindowStyle
	// Inherits UIControlStyle
	// Inherits PolymorphicBase
	DwType                    DT_UINT
	DwPad                     DT_UINT
	HParentStyle              UIControlHandle
	Unk_441f783               DT_INT64
	M_eHasModifiedPowerTagMap DT_TAGMAP[*DT_ENUM]
	TConsoleInput             UIControlConsoleInput
	Unk_b4f614c               DT_TAGMAP[*DT_ENUM]
	Unk_6f50cd1               DT_TAGMAP[*DT_ENUM]
}

func (t *UIColorPickerStyle) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.HParentStyle, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_441f783, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.M_eHasModifiedPowerTagMap, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.TConsoleInput, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.Unk_b4f614c, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.Unk_6f50cd1, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+96, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *UIColorPickerStyle) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("HParentStyle", &t.HParentStyle)
	cb.Do("Unk_441f783", &t.Unk_441f783)
	cb.Do("M_eHasModifiedPowerTagMap", &t.M_eHasModifiedPowerTagMap)
	cb.Do("TConsoleInput", &t.TConsoleInput)
	cb.Do("Unk_b4f614c", &t.Unk_b4f614c)
	cb.Do("Unk_6f50cd1", &t.Unk_6f50cd1)
}

type Type_b0f0e8cd struct {
	// Inherits Type_303dbf00
	DwType      DT_UINT
	Unk_9b2bc26 Type_340f2b52
	Unk_77ed19a DT_ENUM
	DwPad       DT_UINT
}

func (t *Type_b0f0e8cd) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_9b2bc26, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.Unk_77ed19a, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+56, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_b0f0e8cd) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("Unk_9b2bc26", &t.Unk_9b2bc26)
	cb.Do("Unk_77ed19a", &t.Unk_77ed19a)
	cb.Do("DwPad", &t.DwPad)
}

type RequiredCommandFrameMessageHeader struct {
	THeader       RequiredMessageHeader
	UCommandFrame DT_UINT
}

func (t *RequiredCommandFrameMessageHeader) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.UCommandFrame, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+20, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *RequiredCommandFrameMessageHeader) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("UCommandFrame", &t.UCommandFrame)
}

type WeaponExpertiseRanks_Table struct {
	// Inherits GameBalanceTable
	// Inherits PolymorphicBase
	DwType   DT_UINT
	DwPad    DT_UINT
	TEntries DT_VARIABLEARRAY[*WeaponExpertiseRanks]
}

func (t *WeaponExpertiseRanks_Table) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TEntries, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *WeaponExpertiseRanks_Table) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("TEntries", &t.TEntries)
}

type Type_b14ea0b3 struct {
	THeader                RequiredMessageHeader
	Unk_b4ca56             DT_ENUM
	ECrafterLevelCondition DT_ENUM
	SnoPowerAdded          DT_SNO
	SnoPowerRemoved        DT_SNO
}

func (t *Type_b14ea0b3) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_b4ca56, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.ECrafterLevelCondition, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SnoPowerAdded, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.SnoPowerRemoved, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_b14ea0b3) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("Unk_b4ca56", &t.Unk_b4ca56)
	cb.Do("ECrafterLevelCondition", &t.ECrafterLevelCondition)
	cb.Do("SnoPowerAdded", &t.SnoPowerAdded)
	cb.Do("SnoPowerRemoved", &t.SnoPowerRemoved)
}

type QuestFollower struct {
	SnoActor       DT_SNO
	TSpawnBehavior QuestFollowerSpawnBehavior
	ArPhases       DT_VARIABLEARRAY[*QuestFollowerPhaseInfo]
}

func (t *QuestFollower) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoActor, r, &Options{
		Flags: 1,
		Group: 1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.TSpawnBehavior, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.ArPhases, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *QuestFollower) Walk(cb WalkCallback) {
	cb.Do("SnoActor", &t.SnoActor)
	cb.Do("TSpawnBehavior", &t.TSpawnBehavior)
	cb.Do("ArPhases", &t.ArPhases)
}

type RotationCurve struct {
	PtKeysComp DT_VARIABLEARRAY[*DT_BYTE]
}

func (t *RotationCurve) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.PtKeysComp, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *RotationCurve) Walk(cb WalkCallback) {
	cb.Do("PtKeysComp", &t.PtKeysComp)
}

type QuestPhasePreloadHelper struct {
	TSNONames SerialDataInfo
}

func (t *QuestPhasePreloadHelper) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.TSNONames, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *QuestPhasePreloadHelper) Walk(cb WalkCallback) {
	cb.Do("TSNONames", &t.TSNONames)
}

type BountyData struct {
	SnoQuest         DT_SNO
	SnoWorldState    DT_SNO
	NValue           DT_INT
	EBountyType      DT_ENUM
	SnoBountySubzone DT_SNO
}

func (t *BountyData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoQuest, r, &Options{
		Flags: 1,
		Group: 31,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.SnoWorldState, r, &Options{
		Flags: 1,
		Group: 86,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.NValue, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.EBountyType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoBountySubzone, r, &Options{
		Flags: 1,
		Group: 80,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+20, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *BountyData) Walk(cb WalkCallback) {
	cb.Do("SnoQuest", &t.SnoQuest)
	cb.Do("SnoWorldState", &t.SnoWorldState)
	cb.Do("NValue", &t.NValue)
	cb.Do("EBountyType", &t.EBountyType)
	cb.Do("SnoBountySubzone", &t.SnoBountySubzone)
}

type CarryableGizmoData struct {
	// Inherits NamedGizmoData
	// Inherits ActorGizmoData
	// Inherits PolymorphicBase
	DwType                       DT_UINT
	DwPad                        DT_UINT
	FDisableNonFriendlyOperation DT_INT
	FWalkToCenter                DT_INT
	FGizmoStartsDisabled         DT_INT
	FUseStringListName           DT_INT
	FForceMinimapIcon            DT_INT
	FlOperationRadius            DT_FLOAT
	Unk_d0b1df5                  DT_FLOAT
	FlGizmoUseTime               DT_FLOAT
	SnoChannelingEffect          DT_SNO
	Unk_2767229                  DT_INT
	FGizmoShowProgressBar        DT_INT
	Unk_6d9ebe1                  DT_INT
	Unk_5456245                  DT_INT
	Unk_af5815a                  DT_INT
	SnoOnClickEffect             DT_SNO
	SnoPickedUpEffect            DT_SNO
	SnoDropOnGroundEffect        DT_SNO
	TConditionData               GizmoConditionData
	SnoPowerOperator             DT_SNO
	SnoPowerOperate              DT_SNO
	SnoPowerOperatorActive       DT_SNO
	SnoPowerOperateActive        DT_SNO
	Unk_359810e                  DT_INT
	NCooldown                    DT_UINT
	Unk_9c8478e                  DT_UINT
	Unk_d45ed2d                  DT_INT
	Unk_f6b20b7                  DT_INT
	Unk_54513b8                  DT_INT
	Unk_fd1f378                  DT_UINT
	Unk_487c14                   DT_UINT
	Unk_87f2609                  DT_UINT
	Unk_158eb4f                  DT_FLOAT
	Unk_ab58cd3                  DT_ENUM
	Unk_91a3966                  DT_UINT
	Unk_25312e5                  DT_UINT
	Unk_4be4371                  DT_INT
	SnoCarryablePower            DT_SNO
	Unk_aa86ba7                  DT_INT
	FAttachCarryableToPlayer     DT_INT
	THardpointLink               HardpointLink
}

func (t *CarryableGizmoData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.FDisableNonFriendlyOperation, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.FWalkToCenter, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.FGizmoStartsDisabled, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.FUseStringListName, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.FForceMinimapIcon, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.FlOperationRadius, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.Unk_d0b1df5, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.FlGizmoUseTime, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.SnoChannelingEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.Unk_2767229, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.FGizmoShowProgressBar, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+60, &t.Unk_6d9ebe1, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.Unk_5456245, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.Unk_af5815a, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.SnoOnClickEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.SnoPickedUpEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.SnoDropOnGroundEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.TConditionData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.SnoPowerOperator, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.SnoPowerOperate, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.SnoPowerOperatorActive, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+100, &t.SnoPowerOperateActive, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+104, &t.Unk_359810e, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+108, &t.NCooldown, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.Unk_9c8478e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+116, &t.Unk_d45ed2d, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.Unk_f6b20b7, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+124, &t.Unk_54513b8, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.Unk_fd1f378, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+132, &t.Unk_487c14, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+136, &t.Unk_87f2609, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+140, &t.Unk_158eb4f, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+144, &t.Unk_ab58cd3, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+148, &t.Unk_91a3966, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+152, &t.Unk_25312e5, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+156, &t.Unk_4be4371, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+160, &t.SnoCarryablePower, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+164, &t.Unk_aa86ba7, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+168, &t.FAttachCarryableToPlayer, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+172, &t.THardpointLink, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+184, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *CarryableGizmoData) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("FDisableNonFriendlyOperation", &t.FDisableNonFriendlyOperation)
	cb.Do("FWalkToCenter", &t.FWalkToCenter)
	cb.Do("FGizmoStartsDisabled", &t.FGizmoStartsDisabled)
	cb.Do("FUseStringListName", &t.FUseStringListName)
	cb.Do("FForceMinimapIcon", &t.FForceMinimapIcon)
	cb.Do("FlOperationRadius", &t.FlOperationRadius)
	cb.Do("Unk_d0b1df5", &t.Unk_d0b1df5)
	cb.Do("FlGizmoUseTime", &t.FlGizmoUseTime)
	cb.Do("SnoChannelingEffect", &t.SnoChannelingEffect)
	cb.Do("Unk_2767229", &t.Unk_2767229)
	cb.Do("FGizmoShowProgressBar", &t.FGizmoShowProgressBar)
	cb.Do("Unk_6d9ebe1", &t.Unk_6d9ebe1)
	cb.Do("Unk_5456245", &t.Unk_5456245)
	cb.Do("Unk_af5815a", &t.Unk_af5815a)
	cb.Do("SnoOnClickEffect", &t.SnoOnClickEffect)
	cb.Do("SnoPickedUpEffect", &t.SnoPickedUpEffect)
	cb.Do("SnoDropOnGroundEffect", &t.SnoDropOnGroundEffect)
	cb.Do("TConditionData", &t.TConditionData)
	cb.Do("SnoPowerOperator", &t.SnoPowerOperator)
	cb.Do("SnoPowerOperate", &t.SnoPowerOperate)
	cb.Do("SnoPowerOperatorActive", &t.SnoPowerOperatorActive)
	cb.Do("SnoPowerOperateActive", &t.SnoPowerOperateActive)
	cb.Do("Unk_359810e", &t.Unk_359810e)
	cb.Do("NCooldown", &t.NCooldown)
	cb.Do("Unk_9c8478e", &t.Unk_9c8478e)
	cb.Do("Unk_d45ed2d", &t.Unk_d45ed2d)
	cb.Do("Unk_f6b20b7", &t.Unk_f6b20b7)
	cb.Do("Unk_54513b8", &t.Unk_54513b8)
	cb.Do("Unk_fd1f378", &t.Unk_fd1f378)
	cb.Do("Unk_487c14", &t.Unk_487c14)
	cb.Do("Unk_87f2609", &t.Unk_87f2609)
	cb.Do("Unk_158eb4f", &t.Unk_158eb4f)
	cb.Do("Unk_ab58cd3", &t.Unk_ab58cd3)
	cb.Do("Unk_91a3966", &t.Unk_91a3966)
	cb.Do("Unk_25312e5", &t.Unk_25312e5)
	cb.Do("Unk_4be4371", &t.Unk_4be4371)
	cb.Do("SnoCarryablePower", &t.SnoCarryablePower)
	cb.Do("Unk_aa86ba7", &t.Unk_aa86ba7)
	cb.Do("FAttachCarryableToPlayer", &t.FAttachCarryableToPlayer)
	cb.Do("THardpointLink", &t.THardpointLink)
}

type Type_b1bdda39 struct {
	// Inherits Type_d4213c9b
	DwType      DT_UINT
	Unk_9b2bc26 Type_80554fed
	Unk_77ed19a DT_ENUM
	DwPad       DT_UINT
}

func (t *Type_b1bdda39) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_9b2bc26, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.Unk_77ed19a, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+56, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_b1bdda39) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("Unk_9b2bc26", &t.Unk_9b2bc26)
	cb.Do("Unk_77ed19a", &t.Unk_77ed19a)
	cb.Do("DwPad", &t.DwPad)
}

type ZoneProgressPerZoneData struct {
	ArCamps          DT_VARIABLEARRAY[*DT_SNO]
	ArDungeons       DT_VARIABLEARRAY[*DT_SNO]
	GbidHiddenCaches DT_VARIABLEARRAY[*DT_GBID]
	ArSideQuests     DT_VARIABLEARRAY[*DT_SNO]
	ArWaypoints      DT_VARIABLEARRAY[*DT_SNO]
	ArFogOfWar       DT_VARIABLEARRAY[*DT_SNO]
	ArRewardData     DT_FIXEDARRAY[*ZoneProgressRewardPerTierData]
}

func (t *ZoneProgressPerZoneData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.ArCamps, r, &Options{
		Flags: 1,
		Group: 31,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.ArDungeons, r, &Options{
		Flags: 1,
		Group: 48,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.GbidHiddenCaches, r, &Options{
		Flags: 1,
		Group: 28,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.ArSideQuests, r, &Options{
		Flags: 1,
		Group: 31,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.ArWaypoints, r, &Options{
		Flags: 1,
		Group: 22,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.ArFogOfWar, r, &Options{
		Flags: 1,
		Group: 123,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.ArRewardData, r, &Options{
		ArrayLength: 5,
		Flags:       1,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+376, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ZoneProgressPerZoneData) Walk(cb WalkCallback) {
	cb.Do("ArCamps", &t.ArCamps)
	cb.Do("ArDungeons", &t.ArDungeons)
	cb.Do("GbidHiddenCaches", &t.GbidHiddenCaches)
	cb.Do("ArSideQuests", &t.ArSideQuests)
	cb.Do("ArWaypoints", &t.ArWaypoints)
	cb.Do("ArFogOfWar", &t.ArFogOfWar)
	cb.Do("ArRewardData", &t.ArRewardData)
}

type MarkerAxeMapIconData struct {
	// Inherits MarkerDataBase
	// Inherits PolymorphicBase
	DwType DT_UINT
	DwPad  DT_UINT
}

func (t *MarkerAxeMapIconData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *MarkerAxeMapIconData) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
}

type OffHandItemLabelSubcondition struct {
	// Inherits Subcondition
	// Inherits PolymorphicBase
	DwType     DT_UINT
	BNegate    DT_INT
	DwPad      DT_UINT
	NItemLabel DT_ENUM
}

func (t *OffHandItemLabelSubcondition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BNegate, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.NItemLabel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *OffHandItemLabelSubcondition) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("BNegate", &t.BNegate)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("NItemLabel", &t.NItemLabel)
}

type ConstraintLink struct {
	DwHash DT_UINT
}

func (t *ConstraintLink) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.DwHash, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+4, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ConstraintLink) Walk(cb WalkCallback) {
	cb.Do("DwHash", &t.DwHash)
}

type MapRevealSceneMessage struct {
	THeader      RequiredMessageHeader
	SnoScene     DT_SNO
	Aabb         AABB
	IdSWorld     DT_SHARED_SERVER_DATA_ID
	BRevealed    DT_INT
	Unk_8a2f554  DT_BYTE
	BExterior    DT_INT
	Unk_6646a2   DT_FIXEDARRAY[*DT_SNO]
	SnoLevelArea DT_OPTIONAL[*DT_SNO]
}

func (t *MapRevealSceneMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoScene, r, &Options{
		Flags: 1,
		Group: 33,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.Aabb, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.IdSWorld, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.BRevealed, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.Unk_8a2f554, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+60, &t.BExterior, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.Unk_6646a2, r, &Options{
		ArrayLength: 4,
		Flags:       9,
		Group:       22,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.SnoLevelArea, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+92, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *MapRevealSceneMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("SnoScene", &t.SnoScene)
	cb.Do("Aabb", &t.Aabb)
	cb.Do("IdSWorld", &t.IdSWorld)
	cb.Do("BRevealed", &t.BRevealed)
	cb.Do("Unk_8a2f554", &t.Unk_8a2f554)
	cb.Do("BExterior", &t.BExterior)
	cb.Do("Unk_6646a2", &t.Unk_6646a2)
	cb.Do("SnoLevelArea", &t.SnoLevelArea)
}

type QuestChainStep struct {
	DwID     DT_UINT
	SnoQuest DT_SNO
}

func (t *QuestChainStep) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.DwID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.SnoQuest, r, &Options{
		Flags: 1,
		Group: 31,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *QuestChainStep) Walk(cb WalkCallback) {
	cb.Do("DwID", &t.DwID)
	cb.Do("SnoQuest", &t.SnoQuest)
}

type SummonActorEntry struct {
	DwWeight       DT_UINT
	SnoSummonActor DT_SNO
	TSummonRange   DT_RANGE[*DT_UINT]
	Unk_100c8cd    DT_UINT
	SnoCondition   DT_SNO
}

func (t *SummonActorEntry) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.DwWeight, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.SnoSummonActor, r, &Options{
		Flags: 513,
		Group: 1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.TSummonRange, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_100c8cd, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.SnoCondition, r, &Options{
		Flags: 1,
		Group: 51,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *SummonActorEntry) Walk(cb WalkCallback) {
	cb.Do("DwWeight", &t.DwWeight)
	cb.Do("SnoSummonActor", &t.SnoSummonActor)
	cb.Do("TSummonRange", &t.TSummonRange)
	cb.Do("Unk_100c8cd", &t.Unk_100c8cd)
	cb.Do("SnoCondition", &t.SnoCondition)
}

type InvLoc struct {
	AnnOwner DT_ACD_NETWORK_NAME
	ESlot    DT_ENUM
	NSlotX   DT_INT
	NSlotY   DT_INT
}

func (t *InvLoc) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.AnnOwner, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.ESlot, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.NSlotX, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.NSlotY, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+20, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *InvLoc) Walk(cb WalkCallback) {
	cb.Do("AnnOwner", &t.AnnOwner)
	cb.Do("ESlot", &t.ESlot)
	cb.Do("NSlotX", &t.NSlotX)
	cb.Do("NSlotY", &t.NSlotY)
}

type InventoryRequestMoveMessage struct {
	THeader   RequiredMessageHeader
	AnnItem   DT_ACD_NETWORK_NAME
	TLocation InvLoc
}

func (t *InventoryRequestMoveMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.AnnItem, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.TLocation, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+44, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *InventoryRequestMoveMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("AnnItem", &t.AnnItem)
	cb.Do("TLocation", &t.TLocation)
}

type UIDateTimeSettings struct {
	Unk_a8652e7 DT_INT64
	Unk_e037d99 DT_ENUM
	Unk_cc3458a DT_ENUM
	EStyle      DT_ENUM
}

func (t *UIDateTimeSettings) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Unk_a8652e7, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.Unk_e037d99, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.Unk_cc3458a, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.EStyle, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *UIDateTimeSettings) Walk(cb WalkCallback) {
	cb.Do("Unk_a8652e7", &t.Unk_a8652e7)
	cb.Do("Unk_e037d99", &t.Unk_e037d99)
	cb.Do("Unk_cc3458a", &t.Unk_cc3458a)
	cb.Do("EStyle", &t.EStyle)
}

type ShaderPermutation struct {
	Unk_e3331b5 DT_VARIABLEARRAY[*DT_ENUM]
	Unk_a2b58a8 DT_VARIABLEARRAY[*DT_ENUM]
	TPrograms   DT_FIXEDARRAY[*Type_6b603dda]
}

func (t *ShaderPermutation) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Unk_e3331b5, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_a2b58a8, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.TPrograms, r, &Options{ArrayLength: 5}); err != nil {
		return err
	}
	if _, err := r.Seek(p+472, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ShaderPermutation) Walk(cb WalkCallback) {
	cb.Do("Unk_e3331b5", &t.Unk_e3331b5)
	cb.Do("Unk_a2b58a8", &t.Unk_a2b58a8)
	cb.Do("TPrograms", &t.TPrograms)
}

type BossDoorInstanceData struct {
	SnoNonParticipatingEffectGroup DT_SNO
	SnoParticipatingEffectGroup    DT_SNO
}

func (t *BossDoorInstanceData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoNonParticipatingEffectGroup, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.SnoParticipatingEffectGroup, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *BossDoorInstanceData) Walk(cb WalkCallback) {
	cb.Do("SnoNonParticipatingEffectGroup", &t.SnoNonParticipatingEffectGroup)
	cb.Do("SnoParticipatingEffectGroup", &t.SnoParticipatingEffectGroup)
}

type AnimTreeOverride struct {
	PtNodeOverrides DT_VARIABLEARRAY[*AnimTreeNodeOverrideWrapper]
}

func (t *AnimTreeOverride) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.PtNodeOverrides, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *AnimTreeOverride) Walk(cb WalkCallback) {
	cb.Do("PtNodeOverrides", &t.PtNodeOverrides)
}

type LevelAreaTagSubcondition struct {
	// Inherits Subcondition
	// Inherits PolymorphicBase
	DwType      DT_UINT
	BNegate     DT_INT
	DwPad       DT_UINT
	Unk_fb4d244 DT_GBID
}

func (t *LevelAreaTagSubcondition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BNegate, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_fb4d244, r, &Options{
		Flags: 1,
		Group: 55,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *LevelAreaTagSubcondition) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("BNegate", &t.BNegate)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("Unk_fb4d244", &t.Unk_fb4d244)
}

type BountyDataMessage struct {
	THeader       RequiredMessageHeader
	SnoBounty     DT_SNO
	SnoRewardItem DT_SNO
	DwEndTime     DT_INT64
}

func (t *BountyDataMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoBounty, r, &Options{
		Flags: 1,
		Group: 31,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.SnoRewardItem, r, &Options{
		Flags: 1,
		Group: 73,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.DwEndTime, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *BountyDataMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("SnoBounty", &t.SnoBounty)
	cb.Do("SnoRewardItem", &t.SnoRewardItem)
	cb.Do("DwEndTime", &t.DwEndTime)
}

type Type_b3c2ea5e struct {
	DwTilePosHash DT_UINT
	ETileType     DT_ENUM
}

func (t *Type_b3c2ea5e) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.DwTilePosHash, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.ETileType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_b3c2ea5e) Walk(cb WalkCallback) {
	cb.Do("DwTilePosHash", &t.DwTilePosHash)
	cb.Do("ETileType", &t.ETileType)
}

type AxialCylinder struct {
	WpBase   DT_VECTOR3D
	WdHeight DT_FLOAT
	WdRadius DT_FLOAT
}

func (t *AxialCylinder) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.WpBase, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.WdHeight, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.WdRadius, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+20, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *AxialCylinder) Walk(cb WalkCallback) {
	cb.Do("WpBase", &t.WpBase)
	cb.Do("WdHeight", &t.WdHeight)
	cb.Do("WdRadius", &t.WdRadius)
}

type Type_b3d7f019 struct {
	THeader    RequiredMessageHeader
	WpLocation DT_VECTOR3D
}

func (t *Type_b3d7f019) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.WpLocation, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+28, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_b3d7f019) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("WpLocation", &t.WpLocation)
}

type TriggerEventObjectMoveToLocator struct {
	// Inherits TriggerEventRangedDuration
	// Inherits TriggerEvent
	// Inherits PolymorphicBase
	DwType                DT_UINT
	TConditions           TriggerConditions
	FGenerated            DT_INT
	Unk_6cba752           DT_INT
	DwParentActorID       DT_UINT
	TDuration             DT_FLOAT
	DwTriggerFlags        DT_UINT
	DwTriggerFlagsEx      DT_UINT
	TCleanup              TriggerCleanup
	Unk_49e9257           DT_INT
	Unk_5490979           DT_INT
	DwPad                 DT_UINT
	DwObjectID            DT_UINT
	SzLocatorName         DT_UINT
	EOrientationMode      DT_ENUM
	Unk_daebe18           DT_ENUM
	Unk_6101673           DT_UINT
	Unk_8470ffc           HardpointLink
	Unk_46c8459           DT_UINT
	EBlendEasing          DT_ENUM
	EMoveRate             DT_ENUM
	EDynamicMovementSpeed DT_ENUM
	Unk_c751343           DT_INT
	Unk_23237e1           DT_INT
	Unk_f1b6afc           DT_FLOAT
}

func (t *TriggerEventObjectMoveToLocator) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.FGenerated, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_6cba752, r, &Options{Flags: 16}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.DwParentActorID, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.TDuration, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.DwTriggerFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.DwTriggerFlagsEx, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.TCleanup, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+116, &t.Unk_49e9257, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.Unk_5490979, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+124, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.DwObjectID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+132, &t.SzLocatorName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+136, &t.EOrientationMode, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+140, &t.Unk_daebe18, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+144, &t.Unk_6101673, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+148, &t.Unk_8470ffc, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+156, &t.Unk_46c8459, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+160, &t.EBlendEasing, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+164, &t.EMoveRate, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+168, &t.EDynamicMovementSpeed, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+172, &t.Unk_c751343, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+176, &t.Unk_23237e1, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+180, &t.Unk_f1b6afc, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+184, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TriggerEventObjectMoveToLocator) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("TConditions", &t.TConditions)
	cb.Do("FGenerated", &t.FGenerated)
	cb.Do("Unk_6cba752", &t.Unk_6cba752)
	cb.Do("DwParentActorID", &t.DwParentActorID)
	cb.Do("TDuration", &t.TDuration)
	cb.Do("DwTriggerFlags", &t.DwTriggerFlags)
	cb.Do("DwTriggerFlagsEx", &t.DwTriggerFlagsEx)
	cb.Do("TCleanup", &t.TCleanup)
	cb.Do("Unk_49e9257", &t.Unk_49e9257)
	cb.Do("Unk_5490979", &t.Unk_5490979)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("DwObjectID", &t.DwObjectID)
	cb.Do("SzLocatorName", &t.SzLocatorName)
	cb.Do("EOrientationMode", &t.EOrientationMode)
	cb.Do("Unk_daebe18", &t.Unk_daebe18)
	cb.Do("Unk_6101673", &t.Unk_6101673)
	cb.Do("Unk_8470ffc", &t.Unk_8470ffc)
	cb.Do("Unk_46c8459", &t.Unk_46c8459)
	cb.Do("EBlendEasing", &t.EBlendEasing)
	cb.Do("EMoveRate", &t.EMoveRate)
	cb.Do("EDynamicMovementSpeed", &t.EDynamicMovementSpeed)
	cb.Do("Unk_c751343", &t.Unk_c751343)
	cb.Do("Unk_23237e1", &t.Unk_23237e1)
	cb.Do("Unk_f1b6afc", &t.Unk_f1b6afc)
}

type Type_b3f69894 struct {
	Unk_d93e026 DT_FLOAT
	Unk_a346cdd DT_INT
}

func (t *Type_b3f69894) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Unk_d93e026, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.Unk_a346cdd, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_b3f69894) Walk(cb WalkCallback) {
	cb.Do("Unk_d93e026", &t.Unk_d93e026)
	cb.Do("Unk_a346cdd", &t.Unk_a346cdd)
}

type Type_b3ff0077 struct {
	// Inherits TriggerEvent
	// Inherits PolymorphicBase
	DwType            DT_UINT
	DwPad             DT_UINT
	TConditions       TriggerConditions
	FGenerated        DT_INT
	Unk_6cba752       DT_INT
	DwParentActorID   DT_UINT
	BOverridePosition DT_INT
	VecPosition       DT_VECTOR2D
	SzText            DT_CSTRING[*DT_BYTE]
}

func (t *Type_b3ff0077) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.FGenerated, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_6cba752, r, &Options{Flags: 16}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.DwParentActorID, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.BOverridePosition, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.VecPosition, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.SzText, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+112, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_b3ff0077) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("TConditions", &t.TConditions)
	cb.Do("FGenerated", &t.FGenerated)
	cb.Do("Unk_6cba752", &t.Unk_6cba752)
	cb.Do("DwParentActorID", &t.DwParentActorID)
	cb.Do("BOverridePosition", &t.BOverridePosition)
	cb.Do("VecPosition", &t.VecPosition)
	cb.Do("SzText", &t.SzText)
}

type PlayerSetCameraDefaultsMessage struct {
	THeader RequiredMessageHeader
}

func (t *PlayerSetCameraDefaultsMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PlayerSetCameraDefaultsMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
}

type ParagonBoardDefinition struct {
	NWidth    DT_UINT
	ArEntries DT_VARIABLEARRAY[*DT_SNO]
}

func (t *ParagonBoardDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.NWidth, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.ArEntries, r, &Options{
		Flags: 1,
		Group: 106,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ParagonBoardDefinition) Walk(cb WalkCallback) {
	cb.Do("NWidth", &t.NWidth)
	cb.Do("ArEntries", &t.ArEntries)
}

type PreloadHelper struct {
	ArActorPreloadHelpers                 DT_VARIABLEARRAY[*ActorPreloadHelper]
	ArItemPreloadHelpers                  DT_VARIABLEARRAY[*ItemPreloadHelper]
	ArActorVariantPreloadHelpers          DT_VARIABLEARRAY[*ActorVariantPreloadHelper]
	ArSummonedActorPreloadHelpers         DT_VARIABLEARRAY[*SummonedActorsPreloadHelper]
	ArSceneSubzoneMarkerSetPreloadHelpers DT_VARIABLEARRAY[*SceneSubzoneMarkerSetPreloadHelper]
	ArActorSlotHelpers                    DT_VARIABLEARRAY[*ActorSlotHelper]
	ArActorFaceHelpers                    DT_VARIABLEARRAY[*ActorFaceHelper]
	Unk_71df495                           DT_VARIABLEARRAY[*Type_8636d92f]
	Unk_b3ee7d3                           DT_VARIABLEARRAY[*Type_f5c4e3ed]
	ArTextureContents                     DT_VARIABLEARRAY[*TextureContent]
	ArEffectGroupPreloadHelpers           DT_VARIABLEARRAY[*EffectGroupPreloadHelper]
	ArEffectGroupActorVariants            DT_VARIABLEARRAY[*EffectGroupActorVariant]
	ArActorAnimSetPreloadHelpers          DT_VARIABLEARRAY[*ActorAnimSetPreloadHelper]
	ArAnimSetAnimPreloadHelpers           DT_VARIABLEARRAY[*AnimSetAnimPreloadHelper]
	Unk_1d69326                           DT_VARIABLEARRAY[*Type_d4235100]
	ArQuestPreloadHelpers                 DT_VARIABLEARRAY[*QuestPreloadHelper]
	ArQuestPhasePreloadHelpers            DT_VARIABLEARRAY[*QuestPhasePreloadHelper]
	ArNPCComponentSetPreloadHelpers       DT_VARIABLEARRAY[*NPCComponentSetPreloadHelper]
	Unk_7ef3a56                           DT_VARIABLEARRAY[*Type_7a954650]
	ArFoleyOverridePreloadHelpers         DT_VARIABLEARRAY[*FoleyOverridePreloadHelper]
	Unk_ddc0c8b                           DT_VARIABLEARRAY[*DT_BYTE]
	ArSNOs                                DT_VARIABLEARRAY[*DT_SNO]
	ArSNONames                            DT_VARIABLEARRAY[*DT_SNO_NAME]
}

func (t *PreloadHelper) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.ArActorPreloadHelpers, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.ArItemPreloadHelpers, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.ArActorVariantPreloadHelpers, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.ArSummonedActorPreloadHelpers, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.ArSceneSubzoneMarkerSetPreloadHelpers, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.ArActorSlotHelpers, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.ArActorFaceHelpers, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.Unk_71df495, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.Unk_b3ee7d3, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+144, &t.ArTextureContents, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+160, &t.ArEffectGroupPreloadHelpers, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+176, &t.ArEffectGroupActorVariants, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+192, &t.ArActorAnimSetPreloadHelpers, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+208, &t.ArAnimSetAnimPreloadHelpers, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+224, &t.Unk_1d69326, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+240, &t.ArQuestPreloadHelpers, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+256, &t.ArQuestPhasePreloadHelpers, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+272, &t.ArNPCComponentSetPreloadHelpers, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+288, &t.Unk_7ef3a56, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+304, &t.ArFoleyOverridePreloadHelpers, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+320, &t.Unk_ddc0c8b, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+336, &t.ArSNOs, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+352, &t.ArSNONames, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+368, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PreloadHelper) Walk(cb WalkCallback) {
	cb.Do("ArActorPreloadHelpers", &t.ArActorPreloadHelpers)
	cb.Do("ArItemPreloadHelpers", &t.ArItemPreloadHelpers)
	cb.Do("ArActorVariantPreloadHelpers", &t.ArActorVariantPreloadHelpers)
	cb.Do("ArSummonedActorPreloadHelpers", &t.ArSummonedActorPreloadHelpers)
	cb.Do("ArSceneSubzoneMarkerSetPreloadHelpers", &t.ArSceneSubzoneMarkerSetPreloadHelpers)
	cb.Do("ArActorSlotHelpers", &t.ArActorSlotHelpers)
	cb.Do("ArActorFaceHelpers", &t.ArActorFaceHelpers)
	cb.Do("Unk_71df495", &t.Unk_71df495)
	cb.Do("Unk_b3ee7d3", &t.Unk_b3ee7d3)
	cb.Do("ArTextureContents", &t.ArTextureContents)
	cb.Do("ArEffectGroupPreloadHelpers", &t.ArEffectGroupPreloadHelpers)
	cb.Do("ArEffectGroupActorVariants", &t.ArEffectGroupActorVariants)
	cb.Do("ArActorAnimSetPreloadHelpers", &t.ArActorAnimSetPreloadHelpers)
	cb.Do("ArAnimSetAnimPreloadHelpers", &t.ArAnimSetAnimPreloadHelpers)
	cb.Do("Unk_1d69326", &t.Unk_1d69326)
	cb.Do("ArQuestPreloadHelpers", &t.ArQuestPreloadHelpers)
	cb.Do("ArQuestPhasePreloadHelpers", &t.ArQuestPhasePreloadHelpers)
	cb.Do("ArNPCComponentSetPreloadHelpers", &t.ArNPCComponentSetPreloadHelpers)
	cb.Do("Unk_7ef3a56", &t.Unk_7ef3a56)
	cb.Do("ArFoleyOverridePreloadHelpers", &t.ArFoleyOverridePreloadHelpers)
	cb.Do("Unk_ddc0c8b", &t.Unk_ddc0c8b)
	cb.Do("ArSNOs", &t.ArSNOs)
	cb.Do("ArSNONames", &t.ArSNONames)
}

type SerialDataInfo struct {
	DwOffset DT_UINT
	DwCount  DT_UINT
}

func (t *SerialDataInfo) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.DwOffset, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.DwCount, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *SerialDataInfo) Walk(cb WalkCallback) {
	cb.Do("DwOffset", &t.DwOffset)
	cb.Do("DwCount", &t.DwCount)
}

type PresetNPCComponent struct {
	Component DT_CSTRING[*DT_BYTE]
	SnoDye    DT_SNO
}

func (t *PresetNPCComponent) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Component, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoDye, r, &Options{
		Flags: 513,
		Group: 122,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PresetNPCComponent) Walk(cb WalkCallback) {
	cb.Do("Component", &t.Component)
	cb.Do("SnoDye", &t.SnoDye)
}

type TransmogSaveSnapshotMessage struct {
	THeader        RequiredMessageHeader
	NSnapshotIndex DT_INT
	ArTransmogs    DT_FIXEDARRAY[*TransmogSlotData]
}

func (t *TransmogSaveSnapshotMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.NSnapshotIndex, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.ArTransmogs, r, &Options{
		ArrayLength: 16,
		Flags:       8,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+280, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TransmogSaveSnapshotMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("NSnapshotIndex", &t.NSnapshotIndex)
	cb.Do("ArTransmogs", &t.ArTransmogs)
}

type UIRechargeTimerStyle struct {
	// Inherits UITimerStyle
	// Inherits UIWindowStyle
	// Inherits UIControlStyle
	// Inherits PolymorphicBase
	DwType                    DT_UINT
	DwPad                     DT_UINT
	HParentStyle              UIControlHandle
	Unk_441f783               DT_INT64
	M_eHasModifiedPowerTagMap DT_TAGMAP[*DT_ENUM]
	TConsoleInput             UIControlConsoleInput
	Unk_b4f614c               DT_TAGMAP[*DT_ENUM]
}

func (t *UIRechargeTimerStyle) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.HParentStyle, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_441f783, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.M_eHasModifiedPowerTagMap, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.TConsoleInput, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.Unk_b4f614c, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+80, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *UIRechargeTimerStyle) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("HParentStyle", &t.HParentStyle)
	cb.Do("Unk_441f783", &t.Unk_441f783)
	cb.Do("M_eHasModifiedPowerTagMap", &t.M_eHasModifiedPowerTagMap)
	cb.Do("TConsoleInput", &t.TConsoleInput)
	cb.Do("Unk_b4f614c", &t.Unk_b4f614c)
}

type Type_b48524d3 struct {
	EAttribute  DT_ENUM
	NParam      DT_INT
	Unk_5439402 DT_INT
}

func (t *Type_b48524d3) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.EAttribute, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.NParam, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.Unk_5439402, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+12, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_b48524d3) Walk(cb WalkCallback) {
	cb.Do("EAttribute", &t.EAttribute)
	cb.Do("NParam", &t.NParam)
	cb.Do("Unk_5439402", &t.Unk_5439402)
}

type ItemImageHandleReference struct {
	HImageHandle DT_UINT
}

func (t *ItemImageHandleReference) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.HImageHandle, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+4, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ItemImageHandleReference) Walk(cb WalkCallback) {
	cb.Do("HImageHandle", &t.HImageHandle)
}

type SpeedTreeWind8Params struct {
	FStrengthResponse  DT_FLOAT
	FDirectionResponse DT_FLOAT
	FGustFrequency     DT_FLOAT
	FGustStrengthMin   DT_FLOAT
	FGustStrengthMax   DT_FLOAT
	FGustDurationMin   DT_FLOAT
	FGustDurationMax   DT_FLOAT
	FGustRiseScalar    DT_FLOAT
	FGustFallScalar    DT_FLOAT
	FGlobalHeight      DT_FLOAT
	Unk_34cfdfe        DT_FLOAT
	FFullRipple        DT_FLOAT
	VBoundingBoxMin    DT_VECTOR3D
	VBoundingBoxMax    DT_VECTOR3D
	FRefreshSecondary  DT_FLOAT
	Unk_fbebc6e        DT_FLOAT
	Unk_6009911        DT_FLOAT
	Unk_19eb4fb        DT_FLOAT
	SShared            Type_cc139f31
	SBranch            Type_cc139f31
	SRipple            SpeedTree8RippleGroup
	FIsGrass           DT_FLOAT
}

func (t *SpeedTreeWind8Params) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.FStrengthResponse, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.FDirectionResponse, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.FGustFrequency, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.FGustStrengthMin, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.FGustStrengthMax, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.FGustDurationMin, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.FGustDurationMax, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.FGustRiseScalar, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.FGustFallScalar, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.FGlobalHeight, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.Unk_34cfdfe, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.FFullRipple, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.VBoundingBoxMin, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+60, &t.VBoundingBoxMax, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.FRefreshSecondary, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.Unk_fbebc6e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.Unk_6009911, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.Unk_19eb4fb, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.SShared, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+412, &t.SBranch, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+736, &t.SRipple, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+980, &t.FIsGrass, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+984, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *SpeedTreeWind8Params) Walk(cb WalkCallback) {
	cb.Do("FStrengthResponse", &t.FStrengthResponse)
	cb.Do("FDirectionResponse", &t.FDirectionResponse)
	cb.Do("FGustFrequency", &t.FGustFrequency)
	cb.Do("FGustStrengthMin", &t.FGustStrengthMin)
	cb.Do("FGustStrengthMax", &t.FGustStrengthMax)
	cb.Do("FGustDurationMin", &t.FGustDurationMin)
	cb.Do("FGustDurationMax", &t.FGustDurationMax)
	cb.Do("FGustRiseScalar", &t.FGustRiseScalar)
	cb.Do("FGustFallScalar", &t.FGustFallScalar)
	cb.Do("FGlobalHeight", &t.FGlobalHeight)
	cb.Do("Unk_34cfdfe", &t.Unk_34cfdfe)
	cb.Do("FFullRipple", &t.FFullRipple)
	cb.Do("VBoundingBoxMin", &t.VBoundingBoxMin)
	cb.Do("VBoundingBoxMax", &t.VBoundingBoxMax)
	cb.Do("FRefreshSecondary", &t.FRefreshSecondary)
	cb.Do("Unk_fbebc6e", &t.Unk_fbebc6e)
	cb.Do("Unk_6009911", &t.Unk_6009911)
	cb.Do("Unk_19eb4fb", &t.Unk_19eb4fb)
	cb.Do("SShared", &t.SShared)
	cb.Do("SBranch", &t.SBranch)
	cb.Do("SRipple", &t.SRipple)
	cb.Do("FIsGrass", &t.FIsGrass)
}

type Type_b4c55066 struct {
	Q       bcQuat
	Wp      DT_VECTOR3D
	FlScale DT_FLOAT
}

func (t *Type_b4c55066) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Q, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Wp, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.FlScale, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_b4c55066) Walk(cb WalkCallback) {
	cb.Do("Q", &t.Q)
	cb.Do("Wp", &t.Wp)
	cb.Do("FlScale", &t.FlScale)
}

type XboxConsoleAwardDefinition struct {
	// Inherits ConsoleAwardDefinition
	// Inherits PolymorphicBase
	DwType          DT_UINT
	UProfileAwardId DT_UINT
	DwPad           DT_UINT
}

func (t *XboxConsoleAwardDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.UProfileAwardId, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *XboxConsoleAwardDefinition) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("UProfileAwardId", &t.UProfileAwardId)
	cb.Do("DwPad", &t.DwPad)
}

type PortedToWaypointMessage struct {
	THeader               RequiredMessageHeader
	DwPlayerGameAccountId DT_UINT
	SnoLevelArea          DT_SNO
}

func (t *PortedToWaypointMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.DwPlayerGameAccountId, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.SnoLevelArea, r, &Options{
		Flags: 1,
		Group: 22,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PortedToWaypointMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("DwPlayerGameAccountId", &t.DwPlayerGameAccountId)
	cb.Do("SnoLevelArea", &t.SnoLevelArea)
}

type Type_b5721766 struct {
	Value                   DT_RGBACOLOR
	BIsDungeonRewardMessage DT_INT
	Unk_411da82             Type_560ae4cf
}

func (t *Type_b5721766) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Value, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.BIsDungeonRewardMessage, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.Unk_411da82, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+64, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_b5721766) Walk(cb WalkCallback) {
	cb.Do("Value", &t.Value)
	cb.Do("BIsDungeonRewardMessage", &t.BIsDungeonRewardMessage)
	cb.Do("Unk_411da82", &t.Unk_411da82)
}

type Type_b58061b6 struct {
	ECheckboxStyle               DT_ENUM
	HImageFrameCheckedNormal     UIImageHandleReference
	Unk_3f146a2                  UIImageHandleReference
	HImageFrameCheckedDisabled   UIImageHandleReference
	Unk_2aa2ac9                  UIImageHandleReference
	Unk_28bd9a5                  UIImageHandleReference
	Unk_eece018                  UIImageHandleReference
	SnoTiledStyleCheckedNormal   DT_SNO
	Unk_d3af33f                  DT_SNO
	SnoTiledStyleCheckedDisabled DT_SNO
	Unk_2f237c6                  DT_SNO
	Unk_4f32182                  DT_SNO
	Unk_16c2055                  DT_SNO
}

func (t *Type_b58061b6) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.ECheckboxStyle, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.HImageFrameCheckedNormal, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.Unk_3f146a2, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.HImageFrameCheckedDisabled, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_2aa2ac9, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.Unk_28bd9a5, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_eece018, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.SnoTiledStyleCheckedNormal, r, &Options{
		Flags: 1,
		Group: 103,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.Unk_d3af33f, r, &Options{
		Flags: 1,
		Group: 103,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.SnoTiledStyleCheckedDisabled, r, &Options{
		Flags: 1,
		Group: 103,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.Unk_2f237c6, r, &Options{
		Flags: 1,
		Group: 103,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.Unk_4f32182, r, &Options{
		Flags: 1,
		Group: 103,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.Unk_16c2055, r, &Options{
		Flags: 1,
		Group: 103,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+52, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_b58061b6) Walk(cb WalkCallback) {
	cb.Do("ECheckboxStyle", &t.ECheckboxStyle)
	cb.Do("HImageFrameCheckedNormal", &t.HImageFrameCheckedNormal)
	cb.Do("Unk_3f146a2", &t.Unk_3f146a2)
	cb.Do("HImageFrameCheckedDisabled", &t.HImageFrameCheckedDisabled)
	cb.Do("Unk_2aa2ac9", &t.Unk_2aa2ac9)
	cb.Do("Unk_28bd9a5", &t.Unk_28bd9a5)
	cb.Do("Unk_eece018", &t.Unk_eece018)
	cb.Do("SnoTiledStyleCheckedNormal", &t.SnoTiledStyleCheckedNormal)
	cb.Do("Unk_d3af33f", &t.Unk_d3af33f)
	cb.Do("SnoTiledStyleCheckedDisabled", &t.SnoTiledStyleCheckedDisabled)
	cb.Do("Unk_2f237c6", &t.Unk_2f237c6)
	cb.Do("Unk_4f32182", &t.Unk_4f32182)
	cb.Do("Unk_16c2055", &t.Unk_16c2055)
}

type Type_b593e3c8 struct {
	SnoAmbient         DT_SNO
	EPlacementStrategy DT_ENUM
	FlSpacing          DT_FLOAT
	ArSurfaces         DT_VARIABLEARRAY[*DT_SNO]
}

func (t *Type_b593e3c8) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoAmbient, r, &Options{
		Flags: 1,
		Group: 5,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.EPlacementStrategy, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.FlSpacing, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.ArSurfaces, r, &Options{
		Flags: 1,
		Group: 43,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_b593e3c8) Walk(cb WalkCallback) {
	cb.Do("SnoAmbient", &t.SnoAmbient)
	cb.Do("EPlacementStrategy", &t.EPlacementStrategy)
	cb.Do("FlSpacing", &t.FlSpacing)
	cb.Do("ArSurfaces", &t.ArSurfaces)
}

type MarkerServerData struct {
	FHiddenUntilUnlocked          DT_INT
	SnoScript                     DT_VARIABLEARRAY[*DT_SNO]
	Unk_ebb20cd                   DT_SNO
	Unk_cb8d889                   DT_SNO
	Unk_6bf9013                   DT_SNO
	Unk_6bc1c5f                   DT_SNO
	Unk_cdb454b                   DT_SNO
	ArActorGroups                 DT_VARIABLEARRAY[*DT_GBID]
	ArPrefabScopedActorGroups     DT_VARIABLEARRAY[*DT_GBID]
	FStartDisabled                DT_INT
	SnoPhasingVisibilityCondition DT_SNO
	SnoPowerDeathOverride         DT_SNO
}

func (t *MarkerServerData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.FHiddenUntilUnlocked, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.SnoScript, r, &Options{
		Flags: 1,
		Group: 35,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_ebb20cd, r, &Options{
		Flags: 1,
		Group: 12,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.Unk_cb8d889, r, &Options{
		Flags: 1,
		Group: 13,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.Unk_6bf9013, r, &Options{
		Flags: 1,
		Group: 62,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.Unk_6bc1c5f, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.Unk_cdb454b, r, &Options{
		Flags: 1,
		Group: 1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.ArActorGroups, r, &Options{
		Flags: 1,
		Group: 24,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.ArPrefabScopedActorGroups, r, &Options{
		Flags: 1,
		Group: 51,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.FStartDisabled, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.SnoPhasingVisibilityCondition, r, &Options{
		Flags: 1,
		Group: 51,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.SnoPowerDeathOverride, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+96, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *MarkerServerData) Walk(cb WalkCallback) {
	cb.Do("FHiddenUntilUnlocked", &t.FHiddenUntilUnlocked)
	cb.Do("SnoScript", &t.SnoScript)
	cb.Do("Unk_ebb20cd", &t.Unk_ebb20cd)
	cb.Do("Unk_cb8d889", &t.Unk_cb8d889)
	cb.Do("Unk_6bf9013", &t.Unk_6bf9013)
	cb.Do("Unk_6bc1c5f", &t.Unk_6bc1c5f)
	cb.Do("Unk_cdb454b", &t.Unk_cdb454b)
	cb.Do("ArActorGroups", &t.ArActorGroups)
	cb.Do("ArPrefabScopedActorGroups", &t.ArPrefabScopedActorGroups)
	cb.Do("FStartDisabled", &t.FStartDisabled)
	cb.Do("SnoPhasingVisibilityCondition", &t.SnoPhasingVisibilityCondition)
	cb.Do("SnoPowerDeathOverride", &t.SnoPowerDeathOverride)
}

type DebugDrawPrimMessage struct {
	THeader          RequiredMessageHeader
	UID              DT_UINT
	EType            DT_ENUM
	IdSWorld         DT_SHARED_SERVER_DATA_ID
	VecPos           DT_FIXEDARRAY[*DT_VECTOR3D]
	FlLength         DT_FLOAT
	FlRadius         DT_FLOAT
	FlHeight         DT_FLOAT
	ULifetimeInTicks DT_UINT
	RgbaColor        DT_RGBACOLOR
	SzText           DT_CHARARRAY
	Unk_7fff437      DT_INT
	BNoZ             DT_INT
}

func (t *DebugDrawPrimMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.UID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.EType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.IdSWorld, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.VecPos, r, &Options{
		ArrayLength: 8,
		Flags:       8,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+132, &t.FlLength, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+136, &t.FlRadius, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+140, &t.FlHeight, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+144, &t.ULifetimeInTicks, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+148, &t.RgbaColor, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+152, &t.SzText, r, &Options{
		ArrayLength: 128,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+280, &t.Unk_7fff437, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+284, &t.BNoZ, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+288, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *DebugDrawPrimMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("UID", &t.UID)
	cb.Do("EType", &t.EType)
	cb.Do("IdSWorld", &t.IdSWorld)
	cb.Do("VecPos", &t.VecPos)
	cb.Do("FlLength", &t.FlLength)
	cb.Do("FlRadius", &t.FlRadius)
	cb.Do("FlHeight", &t.FlHeight)
	cb.Do("ULifetimeInTicks", &t.ULifetimeInTicks)
	cb.Do("RgbaColor", &t.RgbaColor)
	cb.Do("SzText", &t.SzText)
	cb.Do("Unk_7fff437", &t.Unk_7fff437)
	cb.Do("BNoZ", &t.BNoZ)
}

type EmitterSphericalCapData struct {
	// Inherits EmitterDataBase
	// Inherits PolymorphicBase
	DwType     DT_UINT
	DwPad      DT_UINT
	EFacing    DT_ENUM
	ACone      DT_FLOAT
	PathRadius Type_cbfdd2ea
}

func (t *EmitterSphericalCapData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.EFacing, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.ACone, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.PathRadius, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+80, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *EmitterSphericalCapData) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("EFacing", &t.EFacing)
	cb.Do("ACone", &t.ACone)
	cb.Do("PathRadius", &t.PathRadius)
}

type HirelingRequestLearnSkillMessage struct {
	THeader  RequiredMessageHeader
	Ann      DT_ACD_NETWORK_NAME
	SnoSkill DT_SNO
}

func (t *HirelingRequestLearnSkillMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Ann, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SnoSkill, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+28, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *HirelingRequestLearnSkillMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("Ann", &t.Ann)
	cb.Do("SnoSkill", &t.SnoSkill)
}

type UIControlHandle struct {
	SnoUI         DT_SNO
	SzControlName DT_UINT
}

func (t *UIControlHandle) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoUI, r, &Options{
		Flags: 1,
		Group: 42,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.SzControlName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *UIControlHandle) Walk(cb WalkCallback) {
	cb.Do("SnoUI", &t.SnoUI)
	cb.Do("SzControlName", &t.SzControlName)
}

type Type_b6c1006c struct {
	// Inherits TexAnim
	// Inherits PolymorphicBase
	DwType           DT_UINT
	DwPad            DT_UINT
	FlUScale         DT_FLOAT
	FlVScale         DT_FLOAT
	TFrameAnim       FrameAnim
	Unk_f7b62d6      Type_cc354444
	TDuration        DT_RANGE[*DT_FLOAT]
	FScaleUVsToFrame DT_INT
}

func (t *Type_b6c1006c) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.FlUScale, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.FlVScale, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.TFrameAnim, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.Unk_f7b62d6, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.TDuration, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.FScaleUVsToFrame, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+136, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_b6c1006c) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("FlUScale", &t.FlUScale)
	cb.Do("FlVScale", &t.FlVScale)
	cb.Do("TFrameAnim", &t.TFrameAnim)
	cb.Do("Unk_f7b62d6", &t.Unk_f7b62d6)
	cb.Do("TDuration", &t.TDuration)
	cb.Do("FScaleUVsToFrame", &t.FScaleUVsToFrame)
}

type CollisionSettings struct {
	SnoCollision     DT_SNO
	TCustomCollFlags ActorCollisionFlags
	Unk_a882afd      DT_INT
	Unk_54403ff      DT_INT
}

func (t *CollisionSettings) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoCollision, r, &Options{
		Flags: 1,
		Group: 127,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.TCustomCollFlags, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.Unk_a882afd, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_54403ff, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+20, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *CollisionSettings) Walk(cb WalkCallback) {
	cb.Do("SnoCollision", &t.SnoCollision)
	cb.Do("TCustomCollFlags", &t.TCustomCollFlags)
	cb.Do("Unk_a882afd", &t.Unk_a882afd)
	cb.Do("Unk_54403ff", &t.Unk_54403ff)
}

type QuestCallback struct {
	Unk_b185921          DT_ENUM
	Unk_5342cc0          DT_ENUM
	DwUID                DT_UINT
	DwFlags              DT_UINT
	NNeeded              DT_UINT
	TScriptMessageMap    ScriptMessageMap
	DwLinesSeconds       DT_INT
	Unk_47705e2          DT_INT
	EIndicatorType       DT_ENUM
	Unk_9c1ea4f          DT_UINT
	SnoWorld             DT_SNO
	Unk_e879cce          DT_SNO
	FDebugDisable        DT_INT
	TRegionDefault       QuestCallbackRegion
	ArRegionOverrides    DT_VARIABLEARRAY[*QuestCallbackRegion]
	Unk_6a71535          DT_INT
	ArLevelAreas         DT_VARIABLEARRAY[*DT_SNO]
	ArSubzones           DT_VARIABLEARRAY[*DT_SNO]
	ArSnonameTokens      DT_VARIABLEARRAY[*DT_SNO_NAME]
	TReputationObjective ReputationValuePair
}

func (t *QuestCallback) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Unk_b185921, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.Unk_5342cc0, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwUID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.NNeeded, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.TScriptMessageMap, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.DwLinesSeconds, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+100, &t.Unk_47705e2, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+104, &t.EIndicatorType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+108, &t.Unk_9c1ea4f, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.SnoWorld, r, &Options{
		Flags: 513,
		Group: 48,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+116, &t.Unk_e879cce, r, &Options{
		Flags: 1,
		Group: 12,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.FDebugDisable, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.TRegionDefault, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+176, &t.ArRegionOverrides, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+192, &t.Unk_6a71535, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+200, &t.ArLevelAreas, r, &Options{
		Flags: 513,
		Group: 22,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+216, &t.ArSubzones, r, &Options{
		Flags: 513,
		Group: 80,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+232, &t.ArSnonameTokens, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+248, &t.TReputationObjective, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+256, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *QuestCallback) Walk(cb WalkCallback) {
	cb.Do("Unk_b185921", &t.Unk_b185921)
	cb.Do("Unk_5342cc0", &t.Unk_5342cc0)
	cb.Do("DwUID", &t.DwUID)
	cb.Do("DwFlags", &t.DwFlags)
	cb.Do("NNeeded", &t.NNeeded)
	cb.Do("TScriptMessageMap", &t.TScriptMessageMap)
	cb.Do("DwLinesSeconds", &t.DwLinesSeconds)
	cb.Do("Unk_47705e2", &t.Unk_47705e2)
	cb.Do("EIndicatorType", &t.EIndicatorType)
	cb.Do("Unk_9c1ea4f", &t.Unk_9c1ea4f)
	cb.Do("SnoWorld", &t.SnoWorld)
	cb.Do("Unk_e879cce", &t.Unk_e879cce)
	cb.Do("FDebugDisable", &t.FDebugDisable)
	cb.Do("TRegionDefault", &t.TRegionDefault)
	cb.Do("ArRegionOverrides", &t.ArRegionOverrides)
	cb.Do("Unk_6a71535", &t.Unk_6a71535)
	cb.Do("ArLevelAreas", &t.ArLevelAreas)
	cb.Do("ArSubzones", &t.ArSubzones)
	cb.Do("ArSnonameTokens", &t.ArSnonameTokens)
	cb.Do("TReputationObjective", &t.TReputationObjective)
}

type Type_b6de0233 struct {
	EAttribute  DT_ENUM
	TValue      DT_STRING_FORMULA
	NParam      DT_INT
	Unk_dffdf28 DT_STRING_FORMULA
}

func (t *Type_b6de0233) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.EAttribute, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.TValue, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.NParam, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.Unk_dffdf28, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+80, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_b6de0233) Walk(cb WalkCallback) {
	cb.Do("EAttribute", &t.EAttribute)
	cb.Do("TValue", &t.TValue)
	cb.Do("NParam", &t.NParam)
	cb.Do("Unk_dffdf28", &t.Unk_dffdf28)
}

type PowerConditionIsChannelled struct {
	// Inherits PowerConditionBase
	// Inherits PolymorphicBase
	DwType   DT_UINT
	BInverse DT_INT
	DwPad    DT_UINT
}

func (t *PowerConditionIsChannelled) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BInverse, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PowerConditionIsChannelled) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("BInverse", &t.BInverse)
	cb.Do("DwPad", &t.DwPad)
}

type QuestKillAllMonstersUpdatedMessage struct {
	THeader          RequiredMessageHeader
	IdQuest          DT_ENUM
	NMonstersSpawned DT_INT
	NMonstersKilled  DT_INT
	Unk_736a201      DT_INT
}

func (t *QuestKillAllMonstersUpdatedMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.IdQuest, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.NMonstersSpawned, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.NMonstersKilled, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.Unk_736a201, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *QuestKillAllMonstersUpdatedMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("IdQuest", &t.IdQuest)
	cb.Do("NMonstersSpawned", &t.NMonstersSpawned)
	cb.Do("NMonstersKilled", &t.NMonstersKilled)
	cb.Do("Unk_736a201", &t.Unk_736a201)
}

type Transmog struct {
	SnoItem DT_SNO
	SnoDye  DT_SNO
}

func (t *Transmog) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoItem, r, &Options{
		Flags: 1,
		Group: 73,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.SnoDye, r, &Options{
		Flags: 1,
		Group: 122,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Transmog) Walk(cb WalkCallback) {
	cb.Do("SnoItem", &t.SnoItem)
	cb.Do("SnoDye", &t.SnoDye)
}

type RareItemNameMessage struct {
	THeader       RequiredMessageHeader
	Ann           DT_ACD_NETWORK_NAME
	TRareItemName RareItemName
}

func (t *RareItemNameMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Ann, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.TRareItemName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+40, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *RareItemNameMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("Ann", &t.Ann)
	cb.Do("TRareItemName", &t.TRareItemName)
}

type ChairGizmoData struct {
	// Inherits NamedGizmoData
	// Inherits ActorGizmoData
	// Inherits PolymorphicBase
	DwType                       DT_UINT
	DwPad                        DT_UINT
	FDisableNonFriendlyOperation DT_INT
	FWalkToCenter                DT_INT
	FGizmoStartsDisabled         DT_INT
	FUseStringListName           DT_INT
	FForceMinimapIcon            DT_INT
	FlOperationRadius            DT_FLOAT
	Unk_d0b1df5                  DT_FLOAT
	FlGizmoUseTime               DT_FLOAT
	SnoChannelingEffect          DT_SNO
	Unk_2767229                  DT_INT
	FGizmoShowProgressBar        DT_INT
	Unk_6d9ebe1                  DT_INT
	Unk_5456245                  DT_INT
	Unk_af5815a                  DT_INT
	SnoOnClickEffect             DT_SNO
	SnoPickedUpEffect            DT_SNO
	SnoDropOnGroundEffect        DT_SNO
	TConditionData               GizmoConditionData
	SnoPowerOperator             DT_SNO
	SnoPowerOperate              DT_SNO
	SnoPowerOperatorActive       DT_SNO
	SnoPowerOperateActive        DT_SNO
	Unk_359810e                  DT_INT
	NCooldown                    DT_UINT
	Unk_9c8478e                  DT_UINT
	Unk_d45ed2d                  DT_INT
	Unk_f6b20b7                  DT_INT
	Unk_54513b8                  DT_INT
	Unk_fd1f378                  DT_UINT
	Unk_487c14                   DT_UINT
	Unk_87f2609                  DT_UINT
	Unk_158eb4f                  DT_FLOAT
	Unk_ab58cd3                  DT_ENUM
	Unk_91a3966                  DT_UINT
	Unk_25312e5                  DT_UINT
	Unk_4be4371                  DT_INT
}

func (t *ChairGizmoData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.FDisableNonFriendlyOperation, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.FWalkToCenter, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.FGizmoStartsDisabled, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.FUseStringListName, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.FForceMinimapIcon, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.FlOperationRadius, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.Unk_d0b1df5, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.FlGizmoUseTime, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.SnoChannelingEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.Unk_2767229, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.FGizmoShowProgressBar, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+60, &t.Unk_6d9ebe1, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.Unk_5456245, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.Unk_af5815a, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.SnoOnClickEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.SnoPickedUpEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.SnoDropOnGroundEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.TConditionData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.SnoPowerOperator, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.SnoPowerOperate, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.SnoPowerOperatorActive, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+100, &t.SnoPowerOperateActive, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+104, &t.Unk_359810e, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+108, &t.NCooldown, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.Unk_9c8478e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+116, &t.Unk_d45ed2d, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.Unk_f6b20b7, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+124, &t.Unk_54513b8, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.Unk_fd1f378, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+132, &t.Unk_487c14, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+136, &t.Unk_87f2609, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+140, &t.Unk_158eb4f, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+144, &t.Unk_ab58cd3, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+148, &t.Unk_91a3966, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+152, &t.Unk_25312e5, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+156, &t.Unk_4be4371, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+160, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ChairGizmoData) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("FDisableNonFriendlyOperation", &t.FDisableNonFriendlyOperation)
	cb.Do("FWalkToCenter", &t.FWalkToCenter)
	cb.Do("FGizmoStartsDisabled", &t.FGizmoStartsDisabled)
	cb.Do("FUseStringListName", &t.FUseStringListName)
	cb.Do("FForceMinimapIcon", &t.FForceMinimapIcon)
	cb.Do("FlOperationRadius", &t.FlOperationRadius)
	cb.Do("Unk_d0b1df5", &t.Unk_d0b1df5)
	cb.Do("FlGizmoUseTime", &t.FlGizmoUseTime)
	cb.Do("SnoChannelingEffect", &t.SnoChannelingEffect)
	cb.Do("Unk_2767229", &t.Unk_2767229)
	cb.Do("FGizmoShowProgressBar", &t.FGizmoShowProgressBar)
	cb.Do("Unk_6d9ebe1", &t.Unk_6d9ebe1)
	cb.Do("Unk_5456245", &t.Unk_5456245)
	cb.Do("Unk_af5815a", &t.Unk_af5815a)
	cb.Do("SnoOnClickEffect", &t.SnoOnClickEffect)
	cb.Do("SnoPickedUpEffect", &t.SnoPickedUpEffect)
	cb.Do("SnoDropOnGroundEffect", &t.SnoDropOnGroundEffect)
	cb.Do("TConditionData", &t.TConditionData)
	cb.Do("SnoPowerOperator", &t.SnoPowerOperator)
	cb.Do("SnoPowerOperate", &t.SnoPowerOperate)
	cb.Do("SnoPowerOperatorActive", &t.SnoPowerOperatorActive)
	cb.Do("SnoPowerOperateActive", &t.SnoPowerOperateActive)
	cb.Do("Unk_359810e", &t.Unk_359810e)
	cb.Do("NCooldown", &t.NCooldown)
	cb.Do("Unk_9c8478e", &t.Unk_9c8478e)
	cb.Do("Unk_d45ed2d", &t.Unk_d45ed2d)
	cb.Do("Unk_f6b20b7", &t.Unk_f6b20b7)
	cb.Do("Unk_54513b8", &t.Unk_54513b8)
	cb.Do("Unk_fd1f378", &t.Unk_fd1f378)
	cb.Do("Unk_487c14", &t.Unk_487c14)
	cb.Do("Unk_87f2609", &t.Unk_87f2609)
	cb.Do("Unk_158eb4f", &t.Unk_158eb4f)
	cb.Do("Unk_ab58cd3", &t.Unk_ab58cd3)
	cb.Do("Unk_91a3966", &t.Unk_91a3966)
	cb.Do("Unk_25312e5", &t.Unk_25312e5)
	cb.Do("Unk_4be4371", &t.Unk_4be4371)
}

type ScriptEventParamPrimaryGroup struct {
	// Inherits ScriptEventParamBase
	// Inherits PolymorphicBase
	DwType        DT_UINT
	EParamType    DT_ENUM
	DwPad         DT_UINT
	TPrimaryGroup ActorGroup
}

func (t *ScriptEventParamPrimaryGroup) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.EParamType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.TPrimaryGroup, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+96, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ScriptEventParamPrimaryGroup) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("EParamType", &t.EParamType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("TPrimaryGroup", &t.TPrimaryGroup)
}

type Type_b76a31b5 struct {
	M_transform1 dmTransformMirror
	M_transform2 dmTransformMirror
	M_localFrame dmTransformMirror
	M_normal     DT_VECTOR4D
	M_stiffness  DT_FLOAT
	M_friction   DT_FLOAT
	M_boneIndex  DT_WORD
	M_padding    DT_FIXEDARRAY[*DT_WORD]
}

func (t *Type_b76a31b5) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.M_transform1, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.M_transform2, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.M_localFrame, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.M_normal, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.M_stiffness, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+116, &t.M_friction, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.M_boneIndex, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+122, &t.M_padding, r, &Options{ArrayLength: 3}); err != nil {
		return err
	}
	if _, err := r.Seek(p+128, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_b76a31b5) Walk(cb WalkCallback) {
	cb.Do("M_transform1", &t.M_transform1)
	cb.Do("M_transform2", &t.M_transform2)
	cb.Do("M_localFrame", &t.M_localFrame)
	cb.Do("M_normal", &t.M_normal)
	cb.Do("M_stiffness", &t.M_stiffness)
	cb.Do("M_friction", &t.M_friction)
	cb.Do("M_boneIndex", &t.M_boneIndex)
	cb.Do("M_padding", &t.M_padding)
}

type Type_b780b821 struct {
	SzParamName  DT_CHARARRAY
	SzParamValue DT_CHARARRAY
}

func (t *Type_b780b821) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SzParamName, r, &Options{
		ArrayLength: 80,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.SzParamValue, r, &Options{
		ArrayLength: 80,
		Flags:       1,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+160, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_b780b821) Walk(cb WalkCallback) {
	cb.Do("SzParamName", &t.SzParamName)
	cb.Do("SzParamValue", &t.SzParamValue)
}

type LocalEventDataMessage struct {
	THeader           RequiredMessageHeader
	DwInstanceID      DT_UINT
	SnoQuest          DT_SNO
	SnoWorld          DT_SNO
	SnoSubzone        DT_SNO
	WpLocation        DT_VECTOR3D
	Unk_8818621       LocalEventTrackingData
	BStartImmediately DT_INT
	BPhaseIsHidden    DT_INT
}

func (t *LocalEventDataMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.DwInstanceID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.SnoQuest, r, &Options{
		Flags: 1,
		Group: 31,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SnoWorld, r, &Options{
		Flags: 1,
		Group: 48,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.SnoSubzone, r, &Options{
		Flags: 1,
		Group: 80,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.WpLocation, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.Unk_8818621, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.BStartImmediately, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+60, &t.BPhaseIsHidden, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+64, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *LocalEventDataMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("DwInstanceID", &t.DwInstanceID)
	cb.Do("SnoQuest", &t.SnoQuest)
	cb.Do("SnoWorld", &t.SnoWorld)
	cb.Do("SnoSubzone", &t.SnoSubzone)
	cb.Do("WpLocation", &t.WpLocation)
	cb.Do("Unk_8818621", &t.Unk_8818621)
	cb.Do("BStartImmediately", &t.BStartImmediately)
	cb.Do("BPhaseIsHidden", &t.BPhaseIsHidden)
}

type ConfirmDungeonKeyUseMessage struct {
	THeader     RequiredMessageHeader
	AnnKey      DT_ACD_NETWORK_NAME
	Unk_3ec603d DT_SNO
}

func (t *ConfirmDungeonKeyUseMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.AnnKey, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_3ec603d, r, &Options{
		Flags: 1,
		Group: 48,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+28, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ConfirmDungeonKeyUseMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("AnnKey", &t.AnnKey)
	cb.Do("Unk_3ec603d", &t.Unk_3ec603d)
}

type DebugTrackedCheckpointRequestMessage struct {
	THeader  RequiredMessageHeader
	AnnActor DT_ACD_NETWORK_NAME
	BEnabled DT_INT
}

func (t *DebugTrackedCheckpointRequestMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.AnnActor, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.BEnabled, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+28, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *DebugTrackedCheckpointRequestMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("AnnActor", &t.AnnActor)
	cb.Do("BEnabled", &t.BEnabled)
}

type ActorDefinition struct {
	EType                      DT_ENUM
	DwFlags                    DT_UINT
	DwFlagsEx                  DT_UINT
	SnoAppearance              DT_SNO
	ArCustomizationAppearances DT_VARIABLEARRAY[*DT_SNO]
	ArAnimSets                 DT_VARIABLEARRAY[*DT_SNO]
	Unk_ccef364                DT_VARIABLEARRAY[*DT_SNO]
	SnoAnimTree                DT_SNO
	TAnimTreeOverride          AnimTreeOverride
	EVariantType               DT_ENUM
	TDefaultLook               LookLink
	DwDefaultShaderMapOverride DT_UINT
	TScaleRange                DT_RANGE[*DT_FLOAT]
	Unk_945ec7b                DT_RANGE[*DT_FLOAT]
	WcylBounds                 AxialCylinder
	AabbBounds                 AABB
	WsBounds                   Sphere
	AabbAppearanceBoundingBox  AABB
	WpLocationPowerSrc         DT_VECTOR3D
	EPickStyle                 DT_ENUM
	FlAttachmentScaleFactor    DT_FLOAT
	EDefaultTeam               DT_ENUM
	ECullingLevel              DT_ENUM
	FlFadeCorpseTimeUntilFade  DT_FLOAT
	FlFadeCorpseTime           DT_FLOAT
	AAbsoluteOrientation       DT_FLOAT
	FlHitFlashPower            DT_FLOAT
	FlHitFlashMultiplier       DT_FLOAT
	FlOverlayPower             DT_FLOAT
	ETopology                  DT_ENUM
	PtMsgTriggeredEvents       DT_VARIABLEARRAY[*MsgTriggeredEvent]
	PtPhysData                 DT_VARIABLEARRAY[*ActorPhysicsData]
	PtCollData                 DT_VARIABLEARRAY[*ActorCollisionData]
	EActorGizmoType            DT_ENUM
	Unk_8fbba9b                DT_ENUM
	PtGizmoData                DT_POLYMORPHIC_VARIABLEARRAY[*ActorGizmoData]
	PtMonsterData              DT_VARIABLEARRAY[*ActorMonsterData]
	PtCritterData              DT_VARIABLEARRAY[*ActorCritterData]
	PtPlayerData               DT_VARIABLEARRAY[*ActorPlayerData]
	PtItemData                 DT_VARIABLEARRAY[*ActorItemData]
	PtCombatData               DT_VARIABLEARRAY[*ActorCombatData]
	PtDeathData                DT_VARIABLEARRAY[*ActorDeathData]
	PtEffectData               DT_VARIABLEARRAY[*ActorEffectData]
	PtProjData                 DT_VARIABLEARRAY[*ActorProjectileData]
	PtPropData                 DT_VARIABLEARRAY[*ActorPropData]
	PtMovingData               DT_VARIABLEARRAY[*ActorMovingData]
	PtBrainData                DT_VARIABLEARRAY[*ActorBrainData]
	PtServerData               DT_VARIABLEARRAY[*ActorServerData]
	PtUIData                   DT_VARIABLEARRAY[*ActorUIData]
	PtAIData                   DT_VARIABLEARRAY[*ActorAIData]
	PtVOData                   DT_VARIABLEARRAY[*ActorVOData]
	PtNPCData                  DT_VARIABLEARRAY[*ActorNPCData]
	PtSoundTableData           DT_VARIABLEARRAY[*ActorSoundTableData]
	PtMountData                DT_VARIABLEARRAY[*ActorMountData]
	PtPostprocessed            DT_INT64
	SnoPrefabAttachment        DT_SNO
	Unk_d2b5e35                DT_FLOAT
	SzPrefabLookOverride       DT_UINT
	DwPrefabShaderMapOverride  DT_UINT
	ArRTPCOverrides            DT_VARIABLEARRAY[*Type_4174a154]
}

func (t *ActorDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.EType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.DwFlagsEx, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.SnoAppearance, r, &Options{
		Flags: 257,
		Group: 9,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ArCustomizationAppearances, r, &Options{
		Flags: 1,
		Group: 9,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.ArAnimSets, r, &Options{
		Flags: 1,
		Group: 8,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.Unk_ccef364, r, &Options{
		Flags: 1,
		Group: 8,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.SnoAnimTree, r, &Options{
		Flags: 1,
		Group: 67,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.TAnimTreeOverride, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.EVariantType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+100, &t.TDefaultLook, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+104, &t.DwDefaultShaderMapOverride, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+108, &t.TScaleRange, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+116, &t.Unk_945ec7b, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+124, &t.WcylBounds, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+144, &t.AabbBounds, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+168, &t.WsBounds, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+184, &t.AabbAppearanceBoundingBox, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+208, &t.WpLocationPowerSrc, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+220, &t.EPickStyle, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+224, &t.FlAttachmentScaleFactor, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+228, &t.EDefaultTeam, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+232, &t.ECullingLevel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+236, &t.FlFadeCorpseTimeUntilFade, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+240, &t.FlFadeCorpseTime, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+244, &t.AAbsoluteOrientation, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+248, &t.FlHitFlashPower, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+252, &t.FlHitFlashMultiplier, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+256, &t.FlOverlayPower, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+260, &t.ETopology, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+264, &t.PtMsgTriggeredEvents, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+280, &t.PtPhysData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+296, &t.PtCollData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+312, &t.EActorGizmoType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+316, &t.Unk_8fbba9b, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+320, &t.PtGizmoData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+344, &t.PtMonsterData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+360, &t.PtCritterData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+376, &t.PtPlayerData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+392, &t.PtItemData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+408, &t.PtCombatData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+424, &t.PtDeathData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+440, &t.PtEffectData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+456, &t.PtProjData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+472, &t.PtPropData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+488, &t.PtMovingData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+504, &t.PtBrainData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+520, &t.PtServerData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+536, &t.PtUIData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+552, &t.PtAIData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+568, &t.PtVOData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+584, &t.PtNPCData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+600, &t.PtSoundTableData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+616, &t.PtMountData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+632, &t.PtPostprocessed, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+640, &t.SnoPrefabAttachment, r, &Options{
		Flags: 1,
		Group: 24,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+644, &t.Unk_d2b5e35, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+648, &t.SzPrefabLookOverride, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+652, &t.DwPrefabShaderMapOverride, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+656, &t.ArRTPCOverrides, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+672, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ActorDefinition) Walk(cb WalkCallback) {
	cb.Do("EType", &t.EType)
	cb.Do("DwFlags", &t.DwFlags)
	cb.Do("DwFlagsEx", &t.DwFlagsEx)
	cb.Do("SnoAppearance", &t.SnoAppearance)
	cb.Do("ArCustomizationAppearances", &t.ArCustomizationAppearances)
	cb.Do("ArAnimSets", &t.ArAnimSets)
	cb.Do("Unk_ccef364", &t.Unk_ccef364)
	cb.Do("SnoAnimTree", &t.SnoAnimTree)
	cb.Do("TAnimTreeOverride", &t.TAnimTreeOverride)
	cb.Do("EVariantType", &t.EVariantType)
	cb.Do("TDefaultLook", &t.TDefaultLook)
	cb.Do("DwDefaultShaderMapOverride", &t.DwDefaultShaderMapOverride)
	cb.Do("TScaleRange", &t.TScaleRange)
	cb.Do("Unk_945ec7b", &t.Unk_945ec7b)
	cb.Do("WcylBounds", &t.WcylBounds)
	cb.Do("AabbBounds", &t.AabbBounds)
	cb.Do("WsBounds", &t.WsBounds)
	cb.Do("AabbAppearanceBoundingBox", &t.AabbAppearanceBoundingBox)
	cb.Do("WpLocationPowerSrc", &t.WpLocationPowerSrc)
	cb.Do("EPickStyle", &t.EPickStyle)
	cb.Do("FlAttachmentScaleFactor", &t.FlAttachmentScaleFactor)
	cb.Do("EDefaultTeam", &t.EDefaultTeam)
	cb.Do("ECullingLevel", &t.ECullingLevel)
	cb.Do("FlFadeCorpseTimeUntilFade", &t.FlFadeCorpseTimeUntilFade)
	cb.Do("FlFadeCorpseTime", &t.FlFadeCorpseTime)
	cb.Do("AAbsoluteOrientation", &t.AAbsoluteOrientation)
	cb.Do("FlHitFlashPower", &t.FlHitFlashPower)
	cb.Do("FlHitFlashMultiplier", &t.FlHitFlashMultiplier)
	cb.Do("FlOverlayPower", &t.FlOverlayPower)
	cb.Do("ETopology", &t.ETopology)
	cb.Do("PtMsgTriggeredEvents", &t.PtMsgTriggeredEvents)
	cb.Do("PtPhysData", &t.PtPhysData)
	cb.Do("PtCollData", &t.PtCollData)
	cb.Do("EActorGizmoType", &t.EActorGizmoType)
	cb.Do("Unk_8fbba9b", &t.Unk_8fbba9b)
	cb.Do("PtGizmoData", &t.PtGizmoData)
	cb.Do("PtMonsterData", &t.PtMonsterData)
	cb.Do("PtCritterData", &t.PtCritterData)
	cb.Do("PtPlayerData", &t.PtPlayerData)
	cb.Do("PtItemData", &t.PtItemData)
	cb.Do("PtCombatData", &t.PtCombatData)
	cb.Do("PtDeathData", &t.PtDeathData)
	cb.Do("PtEffectData", &t.PtEffectData)
	cb.Do("PtProjData", &t.PtProjData)
	cb.Do("PtPropData", &t.PtPropData)
	cb.Do("PtMovingData", &t.PtMovingData)
	cb.Do("PtBrainData", &t.PtBrainData)
	cb.Do("PtServerData", &t.PtServerData)
	cb.Do("PtUIData", &t.PtUIData)
	cb.Do("PtAIData", &t.PtAIData)
	cb.Do("PtVOData", &t.PtVOData)
	cb.Do("PtNPCData", &t.PtNPCData)
	cb.Do("PtSoundTableData", &t.PtSoundTableData)
	cb.Do("PtMountData", &t.PtMountData)
	cb.Do("PtPostprocessed", &t.PtPostprocessed)
	cb.Do("SnoPrefabAttachment", &t.SnoPrefabAttachment)
	cb.Do("Unk_d2b5e35", &t.Unk_d2b5e35)
	cb.Do("SzPrefabLookOverride", &t.SzPrefabLookOverride)
	cb.Do("DwPrefabShaderMapOverride", &t.DwPrefabShaderMapOverride)
	cb.Do("ArRTPCOverrides", &t.ArRTPCOverrides)
}

type OnUnequipPowerCallback struct {
	// Inherits PowerCallbackBase
	// Inherits PolymorphicBase
	DwType                DT_UINT
	DwPad                 DT_UINT
	SnoTriggerEffectGroup DT_SNO
	BCouldHaveRagdolled   DT_INT
	Unk_259dc59           DT_INT
	Unk_90599e6           DT_INT
}

func (t *OnUnequipPowerCallback) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoTriggerEffectGroup, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.BCouldHaveRagdolled, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_259dc59, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.Unk_90599e6, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *OnUnequipPowerCallback) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("SnoTriggerEffectGroup", &t.SnoTriggerEffectGroup)
	cb.Do("BCouldHaveRagdolled", &t.BCouldHaveRagdolled)
	cb.Do("Unk_259dc59", &t.Unk_259dc59)
	cb.Do("Unk_90599e6", &t.Unk_90599e6)
}

type UIControlConsoleInput struct {
	Unk_8536b47 DT_TAGMAP[*DT_ENUM]
}

func (t *UIControlConsoleInput) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Unk_8536b47, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *UIControlConsoleInput) Walk(cb WalkCallback) {
	cb.Do("Unk_8536b47", &t.Unk_8536b47)
}

type UIBrowserWindowStyle struct {
	// Inherits UIWindowStyle
	// Inherits UIControlStyle
	// Inherits PolymorphicBase
	DwType                    DT_UINT
	DwPad                     DT_UINT
	HParentStyle              UIControlHandle
	Unk_441f783               DT_INT64
	M_eHasModifiedPowerTagMap DT_TAGMAP[*DT_ENUM]
	TConsoleInput             UIControlConsoleInput
	Unk_b4f614c               DT_TAGMAP[*DT_ENUM]
}

func (t *UIBrowserWindowStyle) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.HParentStyle, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_441f783, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.M_eHasModifiedPowerTagMap, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.TConsoleInput, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.Unk_b4f614c, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+80, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *UIBrowserWindowStyle) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("HParentStyle", &t.HParentStyle)
	cb.Do("Unk_441f783", &t.Unk_441f783)
	cb.Do("M_eHasModifiedPowerTagMap", &t.M_eHasModifiedPowerTagMap)
	cb.Do("TConsoleInput", &t.TConsoleInput)
	cb.Do("Unk_b4f614c", &t.Unk_b4f614c)
}

type LightInstanceData struct {
	EType                   DT_ENUM
	EMobility               DT_ENUM
	DwFlags                 DT_UINT
	Unk_c96f544             DT_UINT
	Unk_cf4734d             DT_ENUM
	Unk_56127ed             DT_ENUM
	TMatTexProjected        MaterialTexture
	TStateA                 LightStateParams
	Unk_3dc76e8             DT_RANGE[*DT_FLOAT]
	FFirstTexels            DT_RANGE[*DT_FLOAT]
	Unk_b2d1b35             DT_FLOAT
	Unk_da73b5e             DT_RANGE[*DT_FLOAT]
	FlShadowZBias           DT_FLOAT
	FlShadowZSlopeScaleBias DT_FLOAT
	Unk_6b1c15              DT_FLOAT
	FlShadowNearPlane       DT_FLOAT
	Unk_c4c66d5             DT_FLOAT
	Unk_ff1fcfe             DT_FLOAT
	NSystemDuration         DT_FLOAT
	FlOutroDuration         DT_FLOAT
	TSystemDurationScalar   InterpolationScalar
}

func (t *LightInstanceData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.EType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.EMobility, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.Unk_c96f544, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_cf4734d, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.Unk_56127ed, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.TMatTexProjected, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.TStateA, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+800, &t.Unk_3dc76e8, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+808, &t.FFirstTexels, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+816, &t.Unk_b2d1b35, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+820, &t.Unk_da73b5e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+828, &t.FlShadowZBias, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+832, &t.FlShadowZSlopeScaleBias, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+836, &t.Unk_6b1c15, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+840, &t.FlShadowNearPlane, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+844, &t.Unk_c4c66d5, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+848, &t.Unk_ff1fcfe, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+852, &t.NSystemDuration, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+856, &t.FlOutroDuration, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+860, &t.TSystemDurationScalar, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+896, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *LightInstanceData) Walk(cb WalkCallback) {
	cb.Do("EType", &t.EType)
	cb.Do("EMobility", &t.EMobility)
	cb.Do("DwFlags", &t.DwFlags)
	cb.Do("Unk_c96f544", &t.Unk_c96f544)
	cb.Do("Unk_cf4734d", &t.Unk_cf4734d)
	cb.Do("Unk_56127ed", &t.Unk_56127ed)
	cb.Do("TMatTexProjected", &t.TMatTexProjected)
	cb.Do("TStateA", &t.TStateA)
	cb.Do("Unk_3dc76e8", &t.Unk_3dc76e8)
	cb.Do("FFirstTexels", &t.FFirstTexels)
	cb.Do("Unk_b2d1b35", &t.Unk_b2d1b35)
	cb.Do("Unk_da73b5e", &t.Unk_da73b5e)
	cb.Do("FlShadowZBias", &t.FlShadowZBias)
	cb.Do("FlShadowZSlopeScaleBias", &t.FlShadowZSlopeScaleBias)
	cb.Do("Unk_6b1c15", &t.Unk_6b1c15)
	cb.Do("FlShadowNearPlane", &t.FlShadowNearPlane)
	cb.Do("Unk_c4c66d5", &t.Unk_c4c66d5)
	cb.Do("Unk_ff1fcfe", &t.Unk_ff1fcfe)
	cb.Do("NSystemDuration", &t.NSystemDuration)
	cb.Do("FlOutroDuration", &t.FlOutroDuration)
	cb.Do("TSystemDurationScalar", &t.TSystemDurationScalar)
}

type CommonPortalGizmoData struct {
	Unk_eb1dc3b            DT_SNO
	FPortalIsElevator      DT_INT
	SnoWarpOutActor        DT_SNO
	SnoWarpInPower         DT_SNO
	EWorldToChoose         DT_ENUM
	SnoSpecifiedWorld      DT_SNO
	SnoPortalDestLevelArea DT_SNO
	DwEntranceNameToFind   DT_STARTLOC_NAME
}

func (t *CommonPortalGizmoData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Unk_eb1dc3b, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.FPortalIsElevator, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.SnoWarpOutActor, r, &Options{
		Flags: 1,
		Group: 1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.SnoWarpInPower, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.EWorldToChoose, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.SnoSpecifiedWorld, r, &Options{
		Flags: 513,
		Group: 48,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SnoPortalDestLevelArea, r, &Options{
		Flags: 513,
		Group: 22,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.DwEntranceNameToFind, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *CommonPortalGizmoData) Walk(cb WalkCallback) {
	cb.Do("Unk_eb1dc3b", &t.Unk_eb1dc3b)
	cb.Do("FPortalIsElevator", &t.FPortalIsElevator)
	cb.Do("SnoWarpOutActor", &t.SnoWarpOutActor)
	cb.Do("SnoWarpInPower", &t.SnoWarpInPower)
	cb.Do("EWorldToChoose", &t.EWorldToChoose)
	cb.Do("SnoSpecifiedWorld", &t.SnoSpecifiedWorld)
	cb.Do("SnoPortalDestLevelArea", &t.SnoPortalDestLevelArea)
	cb.Do("DwEntranceNameToFind", &t.DwEntranceNameToFind)
}

type PreloadACDDataMessage struct {
	THeader         RequiredMessageHeader
	Ann             DT_ACD_NETWORK_NAME
	SnoActor        DT_SNO
	Unk_f1e8af8     DT_FIXEDARRAY[*DT_SNO_NAME]
	Unk_144680      DT_INT
	TBaseACDInfo    DT_OPTIONAL[*BaseACDInfo]
	TPlayerACDInfo  DT_OPTIONAL[*PlayerACDInfo]
	TMountACDInfo   DT_OPTIONAL[*MountACDInfo]
	TMonsterACDInfo DT_OPTIONAL[*MonsterACDInfo]
	TNPCACDInfo     DT_OPTIONAL[*NPCACDInfo]
}

func (t *PreloadACDDataMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Ann, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SnoActor, r, &Options{
		Flags: 1,
		Group: 1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.Unk_f1e8af8, r, &Options{
		ArrayLength: 32,
		Flags:       8,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+288, &t.Unk_144680, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+292, &t.TBaseACDInfo, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+304, &t.TPlayerACDInfo, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1188, &t.TMountACDInfo, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1208, &t.TMonsterACDInfo, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1268, &t.TNPCACDInfo, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+1296, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PreloadACDDataMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("Ann", &t.Ann)
	cb.Do("SnoActor", &t.SnoActor)
	cb.Do("Unk_f1e8af8", &t.Unk_f1e8af8)
	cb.Do("Unk_144680", &t.Unk_144680)
	cb.Do("TBaseACDInfo", &t.TBaseACDInfo)
	cb.Do("TPlayerACDInfo", &t.TPlayerACDInfo)
	cb.Do("TMountACDInfo", &t.TMountACDInfo)
	cb.Do("TMonsterACDInfo", &t.TMonsterACDInfo)
	cb.Do("TNPCACDInfo", &t.TNPCACDInfo)
}

type dmMtxMirror struct {
	Rx DT_VECTOR4D
	Ry DT_VECTOR4D
	Rz DT_VECTOR4D
	P  DT_VECTOR4D
}

func (t *dmMtxMirror) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Rx, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Ry, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.Rz, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.P, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+64, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *dmMtxMirror) Walk(cb WalkCallback) {
	cb.Do("Rx", &t.Rx)
	cb.Do("Ry", &t.Ry)
	cb.Do("Rz", &t.Rz)
	cb.Do("P", &t.P)
}

type ActorUIData struct {
	HPortraitImage           DT_UINT
	Unk_e3dc66d              DT_INT
	Unk_a94748a              DT_UINT
	Unk_a0b181c              DT_UINT
	HMinimapIcon             DT_UINT
	Unk_f51d2b3              DT_UINT
	FMinimapActiveByDefault  DT_INT
	FMinimapRespectsFoW      DT_INT
	Unk_98a6ae1              DT_INT
	Unk_c26b08b              DT_INT
	Unk_fab46e5              DT_FLOAT
	FlMinimapMaxVisRange     DT_FLOAT
	FlMinimapDiscoveryRadius DT_FLOAT
	Unk_c6ec070              ConditionWrapper
}

func (t *ActorUIData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.HPortraitImage, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.Unk_e3dc66d, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.Unk_a94748a, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.Unk_a0b181c, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.HMinimapIcon, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.Unk_f51d2b3, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.FMinimapActiveByDefault, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.FMinimapRespectsFoW, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.Unk_98a6ae1, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.Unk_c26b08b, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.Unk_fab46e5, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.FlMinimapMaxVisRange, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.FlMinimapDiscoveryRadius, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.Unk_c6ec070, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+88, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ActorUIData) Walk(cb WalkCallback) {
	cb.Do("HPortraitImage", &t.HPortraitImage)
	cb.Do("Unk_e3dc66d", &t.Unk_e3dc66d)
	cb.Do("Unk_a94748a", &t.Unk_a94748a)
	cb.Do("Unk_a0b181c", &t.Unk_a0b181c)
	cb.Do("HMinimapIcon", &t.HMinimapIcon)
	cb.Do("Unk_f51d2b3", &t.Unk_f51d2b3)
	cb.Do("FMinimapActiveByDefault", &t.FMinimapActiveByDefault)
	cb.Do("FMinimapRespectsFoW", &t.FMinimapRespectsFoW)
	cb.Do("Unk_98a6ae1", &t.Unk_98a6ae1)
	cb.Do("Unk_c26b08b", &t.Unk_c26b08b)
	cb.Do("Unk_fab46e5", &t.Unk_fab46e5)
	cb.Do("FlMinimapMaxVisRange", &t.FlMinimapMaxVisRange)
	cb.Do("FlMinimapDiscoveryRadius", &t.FlMinimapDiscoveryRadius)
	cb.Do("Unk_c6ec070", &t.Unk_c6ec070)
}

type OnDodgeBuffCallback struct {
	// Inherits BuffCallbackBase
	// Inherits PolymorphicBase
	DwType                DT_UINT
	DwPad                 DT_UINT
	SnoTriggerEffectGroup DT_SNO
	ArConditions          DT_POLYMORPHIC_VARIABLEARRAY[*DT_INT64]
}

func (t *OnDodgeBuffCallback) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoTriggerEffectGroup, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ArConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *OnDodgeBuffCallback) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("SnoTriggerEffectGroup", &t.SnoTriggerEffectGroup)
	cb.Do("ArConditions", &t.ArConditions)
}

type GetInventoryLocationMessage struct {
	THeader RequiredRequestMessageHeader
	TItemId Type_f5ac91bb
}

func (t *GetInventoryLocationMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.TItemId, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+40, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *GetInventoryLocationMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("TItemId", &t.TItemId)
}

type AnimTreeNodeChild struct {
	TBlendCase          AnimTreeBlendCase
	TSecondaryBlendCase AnimTreeBlendCase
	TCondition          ConditionWrapper
	DwChildIndex        DT_UINT
}

func (t *AnimTreeNodeChild) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.TBlendCase, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.TSecondaryBlendCase, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.TCondition, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.DwChildIndex, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+64, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *AnimTreeNodeChild) Walk(cb WalkCallback) {
	cb.Do("TBlendCase", &t.TBlendCase)
	cb.Do("TSecondaryBlendCase", &t.TSecondaryBlendCase)
	cb.Do("TCondition", &t.TCondition)
	cb.Do("DwChildIndex", &t.DwChildIndex)
}

type dmMeshNodeMirror struct {
	NLowerX         DT_FLOAT
	NLowerY         DT_FLOAT
	NLowerZ         DT_FLOAT
	NUpperX         DT_FLOAT
	NUpperY         DT_FLOAT
	NUpperZ         DT_FLOAT
	NIndex          DT_INT
	DwIncludeMask   DT_WORD
	DwAxis          DT_BYTE
	DwTriangleCount DT_BYTE
}

func (t *dmMeshNodeMirror) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.NLowerX, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.NLowerY, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.NLowerZ, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.NUpperX, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.NUpperY, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.NUpperZ, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.NIndex, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.DwIncludeMask, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+30, &t.DwAxis, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+31, &t.DwTriangleCount, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *dmMeshNodeMirror) Walk(cb WalkCallback) {
	cb.Do("NLowerX", &t.NLowerX)
	cb.Do("NLowerY", &t.NLowerY)
	cb.Do("NLowerZ", &t.NLowerZ)
	cb.Do("NUpperX", &t.NUpperX)
	cb.Do("NUpperY", &t.NUpperY)
	cb.Do("NUpperZ", &t.NUpperZ)
	cb.Do("NIndex", &t.NIndex)
	cb.Do("DwIncludeMask", &t.DwIncludeMask)
	cb.Do("DwAxis", &t.DwAxis)
	cb.Do("DwTriangleCount", &t.DwTriangleCount)
}

type ChestGizmoData struct {
	// Inherits NamedGizmoData
	// Inherits ActorGizmoData
	// Inherits PolymorphicBase
	DwType                            DT_UINT
	FDisableNonFriendlyOperation      DT_INT
	FWalkToCenter                     DT_INT
	FGizmoStartsDisabled              DT_INT
	FUseStringListName                DT_INT
	FForceMinimapIcon                 DT_INT
	FlOperationRadius                 DT_FLOAT
	Unk_d0b1df5                       DT_FLOAT
	FlGizmoUseTime                    DT_FLOAT
	SnoChannelingEffect               DT_SNO
	Unk_2767229                       DT_INT
	FGizmoShowProgressBar             DT_INT
	Unk_6d9ebe1                       DT_INT
	Unk_5456245                       DT_INT
	Unk_af5815a                       DT_INT
	SnoOnClickEffect                  DT_SNO
	SnoPickedUpEffect                 DT_SNO
	SnoDropOnGroundEffect             DT_SNO
	TConditionData                    GizmoConditionData
	SnoPowerOperator                  DT_SNO
	SnoPowerOperate                   DT_SNO
	SnoPowerOperatorActive            DT_SNO
	SnoPowerOperateActive             DT_SNO
	Unk_359810e                       DT_INT
	NCooldown                         DT_UINT
	Unk_9c8478e                       DT_UINT
	Unk_d45ed2d                       DT_INT
	Unk_f6b20b7                       DT_INT
	Unk_54513b8                       DT_INT
	Unk_fd1f378                       DT_UINT
	Unk_487c14                        DT_UINT
	Unk_87f2609                       DT_UINT
	Unk_158eb4f                       DT_FLOAT
	Unk_ab58cd3                       DT_ENUM
	Unk_91a3966                       DT_UINT
	Unk_25312e5                       DT_UINT
	Unk_4be4371                       DT_INT
	SnoTreasureClass                  DT_SNO
	TLockData                         LockingGizmoData
	FChestRemovesCollisionOnOperation DT_INT
	FChestOperatesOnProximity         DT_INT
	FChestLight                       DT_INT
	Unk_51b0c11                       DT_INT
	Unk_6b4a81d                       DT_FLOAT
	DwPad                             DT_UINT
}

func (t *ChestGizmoData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.FDisableNonFriendlyOperation, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.FWalkToCenter, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.FGizmoStartsDisabled, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.FUseStringListName, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.FForceMinimapIcon, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.FlOperationRadius, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.Unk_d0b1df5, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.FlGizmoUseTime, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.SnoChannelingEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.Unk_2767229, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.FGizmoShowProgressBar, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+60, &t.Unk_6d9ebe1, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.Unk_5456245, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.Unk_af5815a, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.SnoOnClickEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.SnoPickedUpEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.SnoDropOnGroundEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.TConditionData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.SnoPowerOperator, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.SnoPowerOperate, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.SnoPowerOperatorActive, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+100, &t.SnoPowerOperateActive, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+104, &t.Unk_359810e, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+108, &t.NCooldown, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.Unk_9c8478e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+116, &t.Unk_d45ed2d, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.Unk_f6b20b7, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+124, &t.Unk_54513b8, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.Unk_fd1f378, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+132, &t.Unk_487c14, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+136, &t.Unk_87f2609, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+140, &t.Unk_158eb4f, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+144, &t.Unk_ab58cd3, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+148, &t.Unk_91a3966, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+152, &t.Unk_25312e5, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+156, &t.Unk_4be4371, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+160, &t.SnoTreasureClass, r, &Options{
		Flags: 1,
		Group: 52,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+164, &t.TLockData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+200, &t.FChestRemovesCollisionOnOperation, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+204, &t.FChestOperatesOnProximity, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+208, &t.FChestLight, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+212, &t.Unk_51b0c11, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+216, &t.Unk_6b4a81d, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+220, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+224, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ChestGizmoData) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("FDisableNonFriendlyOperation", &t.FDisableNonFriendlyOperation)
	cb.Do("FWalkToCenter", &t.FWalkToCenter)
	cb.Do("FGizmoStartsDisabled", &t.FGizmoStartsDisabled)
	cb.Do("FUseStringListName", &t.FUseStringListName)
	cb.Do("FForceMinimapIcon", &t.FForceMinimapIcon)
	cb.Do("FlOperationRadius", &t.FlOperationRadius)
	cb.Do("Unk_d0b1df5", &t.Unk_d0b1df5)
	cb.Do("FlGizmoUseTime", &t.FlGizmoUseTime)
	cb.Do("SnoChannelingEffect", &t.SnoChannelingEffect)
	cb.Do("Unk_2767229", &t.Unk_2767229)
	cb.Do("FGizmoShowProgressBar", &t.FGizmoShowProgressBar)
	cb.Do("Unk_6d9ebe1", &t.Unk_6d9ebe1)
	cb.Do("Unk_5456245", &t.Unk_5456245)
	cb.Do("Unk_af5815a", &t.Unk_af5815a)
	cb.Do("SnoOnClickEffect", &t.SnoOnClickEffect)
	cb.Do("SnoPickedUpEffect", &t.SnoPickedUpEffect)
	cb.Do("SnoDropOnGroundEffect", &t.SnoDropOnGroundEffect)
	cb.Do("TConditionData", &t.TConditionData)
	cb.Do("SnoPowerOperator", &t.SnoPowerOperator)
	cb.Do("SnoPowerOperate", &t.SnoPowerOperate)
	cb.Do("SnoPowerOperatorActive", &t.SnoPowerOperatorActive)
	cb.Do("SnoPowerOperateActive", &t.SnoPowerOperateActive)
	cb.Do("Unk_359810e", &t.Unk_359810e)
	cb.Do("NCooldown", &t.NCooldown)
	cb.Do("Unk_9c8478e", &t.Unk_9c8478e)
	cb.Do("Unk_d45ed2d", &t.Unk_d45ed2d)
	cb.Do("Unk_f6b20b7", &t.Unk_f6b20b7)
	cb.Do("Unk_54513b8", &t.Unk_54513b8)
	cb.Do("Unk_fd1f378", &t.Unk_fd1f378)
	cb.Do("Unk_487c14", &t.Unk_487c14)
	cb.Do("Unk_87f2609", &t.Unk_87f2609)
	cb.Do("Unk_158eb4f", &t.Unk_158eb4f)
	cb.Do("Unk_ab58cd3", &t.Unk_ab58cd3)
	cb.Do("Unk_91a3966", &t.Unk_91a3966)
	cb.Do("Unk_25312e5", &t.Unk_25312e5)
	cb.Do("Unk_4be4371", &t.Unk_4be4371)
	cb.Do("SnoTreasureClass", &t.SnoTreasureClass)
	cb.Do("TLockData", &t.TLockData)
	cb.Do("FChestRemovesCollisionOnOperation", &t.FChestRemovesCollisionOnOperation)
	cb.Do("FChestOperatesOnProximity", &t.FChestOperatesOnProximity)
	cb.Do("FChestLight", &t.FChestLight)
	cb.Do("Unk_51b0c11", &t.Unk_51b0c11)
	cb.Do("Unk_6b4a81d", &t.Unk_6b4a81d)
	cb.Do("DwPad", &t.DwPad)
}

type Line3D struct {
	Wp DT_VECTOR3D
	Wv DT_VECTOR3D
}

func (t *Line3D) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Wp, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.Wv, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Line3D) Walk(cb WalkCallback) {
	cb.Do("Wp", &t.Wp)
	cb.Do("Wv", &t.Wv)
}

type WwiseConversationSoundBank struct {
	// Inherits WwiseSoundBankContentBase
	// Inherits PolymorphicBase
	DwType                DT_UINT
	DwPad                 DT_UINT
	PtConversationSamples DT_VARIABLEARRAY[*ConversationSample]
}

func (t *WwiseConversationSoundBank) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.PtConversationSamples, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *WwiseConversationSoundBank) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("PtConversationSamples", &t.PtConversationSamples)
}

type ItemQualitySubcondition struct {
	// Inherits Type_d3c3637f
	// Inherits Subcondition
	// Inherits PolymorphicBase
	DwType            DT_UINT
	BNegate           DT_INT
	EComparisonOp     DT_ENUM
	DwPad             DT_UINT
	EItemQualityLevel DT_ENUM
}

func (t *ItemQualitySubcondition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BNegate, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.EComparisonOp, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.EItemQualityLevel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+40, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ItemQualitySubcondition) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("BNegate", &t.BNegate)
	cb.Do("EComparisonOp", &t.EComparisonOp)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("EItemQualityLevel", &t.EItemQualityLevel)
}

type KillCountMessage struct {
	THeader               RequiredMessageHeader
	DwPlayerGameAccountId DT_UINT
	NPlayerKills          DT_INT
	NDeaths               DT_INT
	NAssists              DT_INT
}

func (t *KillCountMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.DwPlayerGameAccountId, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.NPlayerKills, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.NDeaths, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.NAssists, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *KillCountMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("DwPlayerGameAccountId", &t.DwPlayerGameAccountId)
	cb.Do("NPlayerKills", &t.NPlayerKills)
	cb.Do("NDeaths", &t.NDeaths)
	cb.Do("NAssists", &t.NAssists)
}

type MaterialDefinition struct {
	DwFlags                DT_UINT
	TUberMaterial          UberMaterial
	ArDecalLookVariantMap  DT_VARIABLEARRAY[*DecalLookVariantMap]
	SnoSurface             DT_SNO
	SnoBiomes              DT_FIXEDARRAY[*DT_SNO]
	Unk_c879a37            Type_343baac3
	Unk_93ea20a            DT_FLOAT
	PathPlaybackMultiplier Type_cbfdd2ea
	PathPlaybackController Type_cbfdd2ea
	Unk_ce6fe3b            DT_UINT
	Unk_245935             DT_ENUM
	Unk_6d58226            DT_ENUM
	FlDuration             DT_FLOAT
	TOutroDuration         DT_FLOAT
	Unk_a08119e            DT_FLOAT
	Unk_5b1ce37            DT_FLOAT
	FlStiffness            DT_FLOAT
	FlGravityMagnitude     DT_FLOAT
	TEquipParamPermutation Type_88c1160d
}

func (t *MaterialDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwFlags, r, &Options{Flags: 8912896}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TUberMaterial, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.ArDecalLookVariantMap, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.SnoSurface, r, &Options{
		Flags: 8388608,
		Group: 43,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.SnoBiomes, r, &Options{
		ArrayLength: 4,
		Flags:       1,
		Group:       77,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.Unk_c879a37, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+136, &t.Unk_93ea20a, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+144, &t.PathPlaybackMultiplier, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+200, &t.PathPlaybackController, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+256, &t.Unk_ce6fe3b, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+260, &t.Unk_245935, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+264, &t.Unk_6d58226, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+268, &t.FlDuration, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+272, &t.TOutroDuration, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+276, &t.Unk_a08119e, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+280, &t.Unk_5b1ce37, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+284, &t.FlStiffness, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+288, &t.FlGravityMagnitude, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+292, &t.TEquipParamPermutation, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if _, err := r.Seek(p+328, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *MaterialDefinition) Walk(cb WalkCallback) {
	cb.Do("DwFlags", &t.DwFlags)
	cb.Do("TUberMaterial", &t.TUberMaterial)
	cb.Do("ArDecalLookVariantMap", &t.ArDecalLookVariantMap)
	cb.Do("SnoSurface", &t.SnoSurface)
	cb.Do("SnoBiomes", &t.SnoBiomes)
	cb.Do("Unk_c879a37", &t.Unk_c879a37)
	cb.Do("Unk_93ea20a", &t.Unk_93ea20a)
	cb.Do("PathPlaybackMultiplier", &t.PathPlaybackMultiplier)
	cb.Do("PathPlaybackController", &t.PathPlaybackController)
	cb.Do("Unk_ce6fe3b", &t.Unk_ce6fe3b)
	cb.Do("Unk_245935", &t.Unk_245935)
	cb.Do("Unk_6d58226", &t.Unk_6d58226)
	cb.Do("FlDuration", &t.FlDuration)
	cb.Do("TOutroDuration", &t.TOutroDuration)
	cb.Do("Unk_a08119e", &t.Unk_a08119e)
	cb.Do("Unk_5b1ce37", &t.Unk_5b1ce37)
	cb.Do("FlStiffness", &t.FlStiffness)
	cb.Do("FlGravityMagnitude", &t.FlGravityMagnitude)
	cb.Do("TEquipParamPermutation", &t.TEquipParamPermutation)
}

type BannerIcon struct {
	SzName      DT_UINT
	HLabel      StringLabelHandleEx
	SnoTexture  DT_SNO
	Unk_cd49a50 DT_FLOAT
	HIcon       UIImageHandleReference
}

func (t *BannerIcon) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SzName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.HLabel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.SnoTexture, r, &Options{
		Flags: 1,
		Group: 44,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_cd49a50, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.HIcon, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *BannerIcon) Walk(cb WalkCallback) {
	cb.Do("SzName", &t.SzName)
	cb.Do("HLabel", &t.HLabel)
	cb.Do("SnoTexture", &t.SnoTexture)
	cb.Do("Unk_cd49a50", &t.Unk_cd49a50)
	cb.Do("HIcon", &t.HIcon)
}

type BannerTrim struct {
	SzName          DT_UINT
	HLabel          StringLabelHandleEx
	SnoNormal       DT_SNO
	SnoAlbedo       DT_SNO
	SnoMask         DT_SNO
	SnoEmissiveMask DT_SNO
	FlMetalness     DT_FLOAT
	FlRoughness     DT_FLOAT
	HIcon           UIImageHandleReference
}

func (t *BannerTrim) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SzName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.HLabel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.SnoNormal, r, &Options{
		Flags: 1,
		Group: 44,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoAlbedo, r, &Options{
		Flags: 1,
		Group: 44,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.SnoMask, r, &Options{
		Flags: 1,
		Group: 44,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SnoEmissiveMask, r, &Options{
		Flags: 1,
		Group: 44,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.FlMetalness, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.FlRoughness, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.HIcon, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+40, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *BannerTrim) Walk(cb WalkCallback) {
	cb.Do("SzName", &t.SzName)
	cb.Do("HLabel", &t.HLabel)
	cb.Do("SnoNormal", &t.SnoNormal)
	cb.Do("SnoAlbedo", &t.SnoAlbedo)
	cb.Do("SnoMask", &t.SnoMask)
	cb.Do("SnoEmissiveMask", &t.SnoEmissiveMask)
	cb.Do("FlMetalness", &t.FlMetalness)
	cb.Do("FlRoughness", &t.FlRoughness)
	cb.Do("HIcon", &t.HIcon)
}

type Type_b99f8947 struct {
	EScrollbarAlignment              DT_ENUM
	EScrollbarVisibility             DT_ENUM
	FlScrollbarWidth                 DT_FLOAT
	Unk_5443ce9                      DT_INT
	FlScrollbarMouseWheelScaleFactor DT_FLOAT
	FlScrollbarBlendSpeed            DT_FLOAT
	FlScrollbarBlendTime             DT_FLOAT
	EBlendEasing                     DT_ENUM
	Unk_ebbdec9                      DT_FLOAT
	Unk_438d70b                      DT_FLOAT
	NScrollbarPageIncrement          DT_INT
	Unk_1f6fa9                       DT_ENUM
	Unk_f28083a                      DT_INT
}

func (t *Type_b99f8947) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.EScrollbarAlignment, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.EScrollbarVisibility, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.FlScrollbarWidth, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.Unk_5443ce9, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.FlScrollbarMouseWheelScaleFactor, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.FlScrollbarBlendSpeed, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.FlScrollbarBlendTime, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.EBlendEasing, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.Unk_ebbdec9, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.Unk_438d70b, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.NScrollbarPageIncrement, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.Unk_1f6fa9, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.Unk_f28083a, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+52, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_b99f8947) Walk(cb WalkCallback) {
	cb.Do("EScrollbarAlignment", &t.EScrollbarAlignment)
	cb.Do("EScrollbarVisibility", &t.EScrollbarVisibility)
	cb.Do("FlScrollbarWidth", &t.FlScrollbarWidth)
	cb.Do("Unk_5443ce9", &t.Unk_5443ce9)
	cb.Do("FlScrollbarMouseWheelScaleFactor", &t.FlScrollbarMouseWheelScaleFactor)
	cb.Do("FlScrollbarBlendSpeed", &t.FlScrollbarBlendSpeed)
	cb.Do("FlScrollbarBlendTime", &t.FlScrollbarBlendTime)
	cb.Do("EBlendEasing", &t.EBlendEasing)
	cb.Do("Unk_ebbdec9", &t.Unk_ebbdec9)
	cb.Do("Unk_438d70b", &t.Unk_438d70b)
	cb.Do("NScrollbarPageIncrement", &t.NScrollbarPageIncrement)
	cb.Do("Unk_1f6fa9", &t.Unk_1f6fa9)
	cb.Do("Unk_f28083a", &t.Unk_f28083a)
}

type PowerPhaseBase struct {
	// Inherits PolymorphicBase
	DwType      DT_UINT
	DwPad       DT_UINT
	TPhaseName  DT_UINT
	Unk_fcb7313 DT_POLYMORPHIC_VARIABLEARRAY[*DT_INT64]
	Unk_d0d932b DT_INT
	Unk_9a8200e DT_INT
}

func (t *PowerPhaseBase) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TPhaseName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_fcb7313, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.Unk_d0d932b, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.Unk_9a8200e, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+56, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PowerPhaseBase) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("TPhaseName", &t.TPhaseName)
	cb.Do("Unk_fcb7313", &t.Unk_fcb7313)
	cb.Do("Unk_d0d932b", &t.Unk_d0d932b)
	cb.Do("Unk_9a8200e", &t.Unk_9a8200e)
}

type PowerPhaseLoop struct {
	// Inherits PowerPhaseBase
	// Inherits PolymorphicBase
	DwType      DT_UINT
	DwPad       DT_UINT
	TPhaseName  DT_UINT
	Unk_fcb7313 DT_POLYMORPHIC_VARIABLEARRAY[*DT_INT64]
	Unk_d0d932b DT_INT
	Unk_9a8200e DT_INT
}

func (t *PowerPhaseLoop) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TPhaseName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_fcb7313, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.Unk_d0d932b, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.Unk_9a8200e, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+56, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PowerPhaseLoop) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("TPhaseName", &t.TPhaseName)
	cb.Do("Unk_fcb7313", &t.Unk_fcb7313)
	cb.Do("Unk_d0d932b", &t.Unk_d0d932b)
	cb.Do("Unk_9a8200e", &t.Unk_9a8200e)
}

type ScalarFunctionFormula struct {
	SzName         DT_UINT
	TFormula       DT_STRING_FORMULA
	FlDefaultValue DT_FLOAT
	Unk_c0f4112    DT_INT
	BIsGlobal      DT_INT
}

func (t *ScalarFunctionFormula) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SzName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.TFormula, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.FlDefaultValue, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.Unk_c0f4112, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.BIsGlobal, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+56, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ScalarFunctionFormula) Walk(cb WalkCallback) {
	cb.Do("SzName", &t.SzName)
	cb.Do("TFormula", &t.TFormula)
	cb.Do("FlDefaultValue", &t.FlDefaultValue)
	cb.Do("Unk_c0f4112", &t.Unk_c0f4112)
	cb.Do("BIsGlobal", &t.BIsGlobal)
}

type PowerConditionHasHealth struct {
	// Inherits PowerConditionBase
	// Inherits PolymorphicBase
	DwType          DT_UINT
	BInverse        DT_INT
	DwPad           DT_UINT
	ESubject        DT_ENUM
	FlHealthPercent DT_FLOAT
}

func (t *PowerConditionHasHealth) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BInverse, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ESubject, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.FlHealthPercent, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PowerConditionHasHealth) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("BInverse", &t.BInverse)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("ESubject", &t.ESubject)
	cb.Do("FlHealthPercent", &t.FlHealthPercent)
}

type ItemDefinition struct {
	SnoActor                         DT_SNO
	SnoItemType                      DT_SNO
	EMagicType                       DT_ENUM
	DwFlags                          DT_UINT
	PtInitialDyes                    DT_VARIABLEARRAY[*DT_SNO]
	EComponentStyleType              DT_ENUM
	DwComponentStyle                 DT_UINT
	SnoLore                          DT_SNO
	NMaxStackSize                    DT_INT
	NBaseCostCurrency                DT_INT
	Unk_11efbc0                      DT_INT
	ECurrencyType                    DT_ENUM
	NDropMinLevel                    DT_INT
	NDropMaxLevel                    DT_INT
	NVendorDropMinLevel              DT_INT
	NVendorDropMaxLevel              DT_INT
	EDropMinWorldTier                DT_ENUM
	Unk_440d049                      DT_INT
	EPreferredZone                   DT_ENUM
	SnoBaseItem                      DT_SNO
	SnoRandomItemTreasureClass       DT_SNO
	SnoSalvageTreasureClassNormal    DT_SNO
	SnoSalvageTreasureClassMagic     DT_SNO
	SnoSalvageTreasureClassRare      DT_SNO
	SnoSalvageTreasureClassLegendary DT_SNO
	SnoSalvageTreasureClassUnique    DT_SNO
	SnoSalvageTreasureClassSetItem   DT_SNO
	SnoRareNamePrefixStringList      DT_SNO
	SnoRareNameSuffixStringList      DT_SNO
	SnoSetItemBonus                  DT_SNO
	SnoPower                         DT_SNO
	NTomeLevel                       DT_INT
	NFixedIPowerLevel                DT_INT
	Unk_ae0eeff                      DT_ENUM
	Unk_6a20140                      DT_INT
	PtAttributes                     DT_VARIABLEARRAY[*AttributeSpecifier]
	Unk_f48ee7e                      DT_INT
	ArInherentAffixes                DT_VARIABLEARRAY[*DT_SNO]
	ArForcedAffixes                  DT_VARIABLEARRAY[*DT_SNO]
	Unk_e6191d6                      DT_VARIABLEARRAY[*DT_GBID]
	Unk_192312c                      DT_VARIABLEARRAY[*DT_GBID]
	FUsableByClass                   DT_FIXEDARRAY[*DT_INT]
	PtSocketedEffects                DT_VARIABLEARRAY[*SocketedEffects]
	SnoRunePower                     DT_SNO
	Unk_4cb9610                      DT_GBID
	Unk_ad84e51                      DT_GBID
	SnoRecipe                        DT_SNO
	SnoDemonScroll                   DT_SNO
	SnoMount                         DT_SNO
	Unk_40ae170                      DT_SNO
	SnoParagonGlyph                  DT_SNO
	Unk_3202773                      DT_VARIABLEARRAY[*DT_GBID]
	ArReputation                     DT_VARIABLEARRAY[*ReputationValuePair]
	TInvImages                       DT_FIXEDARRAY[*InventoryImages]
	Unk_75d565b                      DT_UINT
	FMustKeepInInventory             DT_INT
	FBottomless                      DT_INT
	EItemUseType                     DT_ENUM
	SnoPowerUpPower                  DT_SNO
	SnoItemUseLevelAreaRequirement   DT_SNO
	Unk_f772ea                       DT_UINT
	Unk_f4b6cde                      Type_56ff7d6a
	BSeasonItem                      DT_INT
	Unk_d085fd9                      DT_INT
	EDisplayedQualityLevel           DT_ENUM
	NCustomDropWeight                DT_INT
	SnoPowerPassive                  DT_SNO
	EGemType                         DT_ENUM
	SnoPotionPower                   DT_SNO
	BIsTransmog                      DT_INT
}

func (t *ItemDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.SnoActor, r, &Options{
		Flags: 257,
		Group: 1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.SnoItemType, r, &Options{
		Flags: 257,
		Group: 98,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.EMagicType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.PtInitialDyes, r, &Options{
		Flags: 1,
		Group: 122,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.EComponentStyleType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.DwComponentStyle, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.SnoLore, r, &Options{
		Flags: 1,
		Group: 59,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.NMaxStackSize, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.NBaseCostCurrency, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+60, &t.Unk_11efbc0, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.ECurrencyType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.NDropMinLevel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.NDropMaxLevel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.NVendorDropMinLevel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.NVendorDropMaxLevel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.EDropMinWorldTier, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.Unk_440d049, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.EPreferredZone, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.SnoBaseItem, r, &Options{
		Flags: 1,
		Group: 73,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+100, &t.SnoRandomItemTreasureClass, r, &Options{
		Flags: 1,
		Group: 52,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+104, &t.SnoSalvageTreasureClassNormal, r, &Options{
		Flags: 1,
		Group: 52,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+108, &t.SnoSalvageTreasureClassMagic, r, &Options{
		Flags: 1,
		Group: 52,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.SnoSalvageTreasureClassRare, r, &Options{
		Flags: 1,
		Group: 52,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+116, &t.SnoSalvageTreasureClassLegendary, r, &Options{
		Flags: 1,
		Group: 52,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.SnoSalvageTreasureClassUnique, r, &Options{
		Flags: 1,
		Group: 52,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+124, &t.SnoSalvageTreasureClassSetItem, r, &Options{
		Flags: 1,
		Group: 52,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.SnoRareNamePrefixStringList, r, &Options{
		Flags: 1,
		Group: 42,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+132, &t.SnoRareNameSuffixStringList, r, &Options{
		Flags: 1,
		Group: 42,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+136, &t.SnoSetItemBonus, r, &Options{
		Flags: 1,
		Group: 109,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+140, &t.SnoPower, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+144, &t.NTomeLevel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+148, &t.NFixedIPowerLevel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+152, &t.Unk_ae0eeff, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+156, &t.Unk_6a20140, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+160, &t.PtAttributes, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+176, &t.Unk_f48ee7e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+184, &t.ArInherentAffixes, r, &Options{
		Flags: 1,
		Group: 104,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+200, &t.ArForcedAffixes, r, &Options{
		Flags: 1,
		Group: 104,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+216, &t.Unk_e6191d6, r, &Options{
		Flags: 1,
		Group: 18,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+232, &t.Unk_192312c, r, &Options{
		Flags: 1,
		Group: 18,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+248, &t.FUsableByClass, r, &Options{
		ArrayLength: 5,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+272, &t.PtSocketedEffects, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+288, &t.SnoRunePower, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+292, &t.Unk_4cb9610, r, &Options{
		Flags: 1,
		Group: 63,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+296, &t.Unk_ad84e51, r, &Options{
		Flags: 1,
		Group: 63,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+300, &t.SnoRecipe, r, &Options{
		Flags: 1,
		Group: 49,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+304, &t.SnoDemonScroll, r, &Options{
		Flags: 1,
		Group: 95,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+308, &t.SnoMount, r, &Options{
		Flags: 1,
		Group: 1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+312, &t.Unk_40ae170, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+316, &t.SnoParagonGlyph, r, &Options{
		Flags: 1,
		Group: 111,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+320, &t.Unk_3202773, r, &Options{
		Flags: 1,
		Group: 18,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+336, &t.ArReputation, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+352, &t.TInvImages, r, &Options{
		ArrayLength: 5,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+392, &t.Unk_75d565b, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+396, &t.FMustKeepInInventory, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+400, &t.FBottomless, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+404, &t.EItemUseType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+408, &t.SnoPowerUpPower, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+412, &t.SnoItemUseLevelAreaRequirement, r, &Options{
		Flags: 513,
		Group: 22,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+416, &t.Unk_f772ea, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+424, &t.Unk_f4b6cde, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+440, &t.BSeasonItem, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+444, &t.Unk_d085fd9, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+448, &t.EDisplayedQualityLevel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+452, &t.NCustomDropWeight, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+456, &t.SnoPowerPassive, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+460, &t.EGemType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+464, &t.SnoPotionPower, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+468, &t.BIsTransmog, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+472, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ItemDefinition) Walk(cb WalkCallback) {
	cb.Do("SnoActor", &t.SnoActor)
	cb.Do("SnoItemType", &t.SnoItemType)
	cb.Do("EMagicType", &t.EMagicType)
	cb.Do("DwFlags", &t.DwFlags)
	cb.Do("PtInitialDyes", &t.PtInitialDyes)
	cb.Do("EComponentStyleType", &t.EComponentStyleType)
	cb.Do("DwComponentStyle", &t.DwComponentStyle)
	cb.Do("SnoLore", &t.SnoLore)
	cb.Do("NMaxStackSize", &t.NMaxStackSize)
	cb.Do("NBaseCostCurrency", &t.NBaseCostCurrency)
	cb.Do("Unk_11efbc0", &t.Unk_11efbc0)
	cb.Do("ECurrencyType", &t.ECurrencyType)
	cb.Do("NDropMinLevel", &t.NDropMinLevel)
	cb.Do("NDropMaxLevel", &t.NDropMaxLevel)
	cb.Do("NVendorDropMinLevel", &t.NVendorDropMinLevel)
	cb.Do("NVendorDropMaxLevel", &t.NVendorDropMaxLevel)
	cb.Do("EDropMinWorldTier", &t.EDropMinWorldTier)
	cb.Do("Unk_440d049", &t.Unk_440d049)
	cb.Do("EPreferredZone", &t.EPreferredZone)
	cb.Do("SnoBaseItem", &t.SnoBaseItem)
	cb.Do("SnoRandomItemTreasureClass", &t.SnoRandomItemTreasureClass)
	cb.Do("SnoSalvageTreasureClassNormal", &t.SnoSalvageTreasureClassNormal)
	cb.Do("SnoSalvageTreasureClassMagic", &t.SnoSalvageTreasureClassMagic)
	cb.Do("SnoSalvageTreasureClassRare", &t.SnoSalvageTreasureClassRare)
	cb.Do("SnoSalvageTreasureClassLegendary", &t.SnoSalvageTreasureClassLegendary)
	cb.Do("SnoSalvageTreasureClassUnique", &t.SnoSalvageTreasureClassUnique)
	cb.Do("SnoSalvageTreasureClassSetItem", &t.SnoSalvageTreasureClassSetItem)
	cb.Do("SnoRareNamePrefixStringList", &t.SnoRareNamePrefixStringList)
	cb.Do("SnoRareNameSuffixStringList", &t.SnoRareNameSuffixStringList)
	cb.Do("SnoSetItemBonus", &t.SnoSetItemBonus)
	cb.Do("SnoPower", &t.SnoPower)
	cb.Do("NTomeLevel", &t.NTomeLevel)
	cb.Do("NFixedIPowerLevel", &t.NFixedIPowerLevel)
	cb.Do("Unk_ae0eeff", &t.Unk_ae0eeff)
	cb.Do("Unk_6a20140", &t.Unk_6a20140)
	cb.Do("PtAttributes", &t.PtAttributes)
	cb.Do("Unk_f48ee7e", &t.Unk_f48ee7e)
	cb.Do("ArInherentAffixes", &t.ArInherentAffixes)
	cb.Do("ArForcedAffixes", &t.ArForcedAffixes)
	cb.Do("Unk_e6191d6", &t.Unk_e6191d6)
	cb.Do("Unk_192312c", &t.Unk_192312c)
	cb.Do("FUsableByClass", &t.FUsableByClass)
	cb.Do("PtSocketedEffects", &t.PtSocketedEffects)
	cb.Do("SnoRunePower", &t.SnoRunePower)
	cb.Do("Unk_4cb9610", &t.Unk_4cb9610)
	cb.Do("Unk_ad84e51", &t.Unk_ad84e51)
	cb.Do("SnoRecipe", &t.SnoRecipe)
	cb.Do("SnoDemonScroll", &t.SnoDemonScroll)
	cb.Do("SnoMount", &t.SnoMount)
	cb.Do("Unk_40ae170", &t.Unk_40ae170)
	cb.Do("SnoParagonGlyph", &t.SnoParagonGlyph)
	cb.Do("Unk_3202773", &t.Unk_3202773)
	cb.Do("ArReputation", &t.ArReputation)
	cb.Do("TInvImages", &t.TInvImages)
	cb.Do("Unk_75d565b", &t.Unk_75d565b)
	cb.Do("FMustKeepInInventory", &t.FMustKeepInInventory)
	cb.Do("FBottomless", &t.FBottomless)
	cb.Do("EItemUseType", &t.EItemUseType)
	cb.Do("SnoPowerUpPower", &t.SnoPowerUpPower)
	cb.Do("SnoItemUseLevelAreaRequirement", &t.SnoItemUseLevelAreaRequirement)
	cb.Do("Unk_f772ea", &t.Unk_f772ea)
	cb.Do("Unk_f4b6cde", &t.Unk_f4b6cde)
	cb.Do("BSeasonItem", &t.BSeasonItem)
	cb.Do("Unk_d085fd9", &t.Unk_d085fd9)
	cb.Do("EDisplayedQualityLevel", &t.EDisplayedQualityLevel)
	cb.Do("NCustomDropWeight", &t.NCustomDropWeight)
	cb.Do("SnoPowerPassive", &t.SnoPowerPassive)
	cb.Do("EGemType", &t.EGemType)
	cb.Do("SnoPotionPower", &t.SnoPotionPower)
	cb.Do("BIsTransmog", &t.BIsTransmog)
}

type IRect2D struct {
	Left   DT_INT
	Top    DT_INT
	Right  DT_INT
	Bottom DT_INT
}

func (t *IRect2D) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Left, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.Top, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.Right, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.Bottom, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *IRect2D) Walk(cb WalkCallback) {
	cb.Do("Left", &t.Left)
	cb.Do("Top", &t.Top)
	cb.Do("Right", &t.Right)
	cb.Do("Bottom", &t.Bottom)
}

type SkillTreeReward struct {
	THeader          GBIDHeader
	EType            DT_ENUM
	SnoPower         DT_SNO
	SzPowerMod       DT_UINT
	DwMaxTalentRanks DT_UINT
}

func (t *SkillTreeReward) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+260, &t.EType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+264, &t.SnoPower, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+268, &t.SzPowerMod, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+272, &t.DwMaxTalentRanks, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+276, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *SkillTreeReward) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("EType", &t.EType)
	cb.Do("SnoPower", &t.SnoPower)
	cb.Do("SzPowerMod", &t.SzPowerMod)
	cb.Do("DwMaxTalentRanks", &t.DwMaxTalentRanks)
}

type Type_ba2327fc struct {
	SnoWorld DT_SNO
	ArQuests DT_VARIABLEARRAY[*DT_SNO]
}

func (t *Type_ba2327fc) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoWorld, r, &Options{
		Flags: 513,
		Group: 48,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.ArQuests, r, &Options{
		Flags: 513,
		Group: 31,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_ba2327fc) Walk(cb WalkCallback) {
	cb.Do("SnoWorld", &t.SnoWorld)
	cb.Do("ArQuests", &t.ArQuests)
}

type UIDialogDefinition struct {
	Unk_d01dfb6 UIControlTemplate
	TTemplates  DT_VARIABLEARRAY[*UIControlTemplate]
	PtStyles    DT_VARIABLEARRAY[*UIStyleResource]
}

func (t *UIDialogDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.Unk_d01dfb6, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.TTemplates, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.PtStyles, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+112, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *UIDialogDefinition) Walk(cb WalkCallback) {
	cb.Do("Unk_d01dfb6", &t.Unk_d01dfb6)
	cb.Do("TTemplates", &t.TTemplates)
	cb.Do("PtStyles", &t.PtStyles)
}

type BossEncounterStateMessage struct {
	THeader                   RequiredRequestMessageHeader
	SnoBossEncounterLevelArea DT_SNO
	EState                    DT_ENUM
	Unk_57adc31               DT_FIXEDARRAY[*DT_ACD_NETWORK_NAME]
}

func (t *BossEncounterStateMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.SnoBossEncounterLevelArea, r, &Options{
		Flags: 1,
		Group: 22,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.EState, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.Unk_57adc31, r, &Options{
		ArrayLength: 4,
		Flags:       8,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+64, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *BossEncounterStateMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("SnoBossEncounterLevelArea", &t.SnoBossEncounterLevelArea)
	cb.Do("EState", &t.EState)
	cb.Do("Unk_57adc31", &t.Unk_57adc31)
}

type MarkerPrefabData struct {
	// Inherits MarkerDataBase
	// Inherits PolymorphicBase
	DwType                 DT_UINT
	DwPad                  DT_UINT
	ArPrefabCustomizations DT_VARIABLEARRAY[*PrefabCustomization]
}

func (t *MarkerPrefabData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.ArPrefabCustomizations, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *MarkerPrefabData) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("ArPrefabCustomizations", &t.ArPrefabCustomizations)
}

type TriggerEventCameraChangeDepthOfField struct {
	// Inherits TriggerEventRangedDuration
	// Inherits TriggerEvent
	// Inherits PolymorphicBase
	DwType             DT_UINT
	TConditions        TriggerConditions
	FGenerated         DT_INT
	Unk_6cba752        DT_INT
	DwParentActorID    DT_UINT
	TDuration          DT_FLOAT
	DwTriggerFlags     DT_UINT
	DwTriggerFlagsEx   DT_UINT
	TCleanup           TriggerCleanup
	Unk_49e9257        DT_INT
	Unk_5490979        DT_INT
	DwPad              DT_UINT
	Unk_7902ee3        DT_INT
	Unk_25955c7        DT_FLOAT
	Unk_abee5c3        DT_FLOAT
	Unk_fbca868        DT_FLOAT
	Unk_839aa20        DT_FLOAT
	Unk_f75b7db        DT_FLOAT
	FlEndFocalDistance DT_FLOAT
	Unk_600cf5         DT_FLOAT
	Unk_aa07da         DT_FLOAT
	Unk_abbeed2        DT_FLOAT
	Unk_b9bf10d        DT_FLOAT
	EBlendEasing       DT_ENUM
}

func (t *TriggerEventCameraChangeDepthOfField) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.FGenerated, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_6cba752, r, &Options{Flags: 16}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.DwParentActorID, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.TDuration, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.DwTriggerFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.DwTriggerFlagsEx, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.TCleanup, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+116, &t.Unk_49e9257, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.Unk_5490979, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+124, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.Unk_7902ee3, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+132, &t.Unk_25955c7, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+136, &t.Unk_abee5c3, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+140, &t.Unk_fbca868, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+144, &t.Unk_839aa20, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+148, &t.Unk_f75b7db, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+152, &t.FlEndFocalDistance, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+156, &t.Unk_600cf5, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+160, &t.Unk_aa07da, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+164, &t.Unk_abbeed2, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+168, &t.Unk_b9bf10d, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+172, &t.EBlendEasing, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+176, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TriggerEventCameraChangeDepthOfField) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("TConditions", &t.TConditions)
	cb.Do("FGenerated", &t.FGenerated)
	cb.Do("Unk_6cba752", &t.Unk_6cba752)
	cb.Do("DwParentActorID", &t.DwParentActorID)
	cb.Do("TDuration", &t.TDuration)
	cb.Do("DwTriggerFlags", &t.DwTriggerFlags)
	cb.Do("DwTriggerFlagsEx", &t.DwTriggerFlagsEx)
	cb.Do("TCleanup", &t.TCleanup)
	cb.Do("Unk_49e9257", &t.Unk_49e9257)
	cb.Do("Unk_5490979", &t.Unk_5490979)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("Unk_7902ee3", &t.Unk_7902ee3)
	cb.Do("Unk_25955c7", &t.Unk_25955c7)
	cb.Do("Unk_abee5c3", &t.Unk_abee5c3)
	cb.Do("Unk_fbca868", &t.Unk_fbca868)
	cb.Do("Unk_839aa20", &t.Unk_839aa20)
	cb.Do("Unk_f75b7db", &t.Unk_f75b7db)
	cb.Do("FlEndFocalDistance", &t.FlEndFocalDistance)
	cb.Do("Unk_600cf5", &t.Unk_600cf5)
	cb.Do("Unk_aa07da", &t.Unk_aa07da)
	cb.Do("Unk_abbeed2", &t.Unk_abbeed2)
	cb.Do("Unk_b9bf10d", &t.Unk_b9bf10d)
	cb.Do("EBlendEasing", &t.EBlendEasing)
}

type Type_ba7da2d8 struct {
	// Inherits TriggerEvent
	// Inherits PolymorphicBase
	DwType          DT_UINT
	DwPad           DT_UINT
	TConditions     TriggerConditions
	FGenerated      DT_INT
	Unk_6cba752     DT_INT
	DwParentActorID DT_UINT
	Unk_d8b6d76     DT_GBID
}

func (t *Type_ba7da2d8) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.FGenerated, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_6cba752, r, &Options{Flags: 16}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.DwParentActorID, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.Unk_d8b6d76, r, &Options{
		Flags: 1,
		Group: 4,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+88, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_ba7da2d8) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("TConditions", &t.TConditions)
	cb.Do("FGenerated", &t.FGenerated)
	cb.Do("Unk_6cba752", &t.Unk_6cba752)
	cb.Do("DwParentActorID", &t.DwParentActorID)
	cb.Do("Unk_d8b6d76", &t.Unk_d8b6d76)
}

type GetInventoryLocationResponseMessage struct {
	THeader          RequiredResponseMessageHeader
	TInvLocationData InventoryLocationMessageData
	AnnItem          DT_ACD_NETWORK_NAME
}

func (t *GetInventoryLocationResponseMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.TInvLocationData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.AnnItem, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+52, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *GetInventoryLocationResponseMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("TInvLocationData", &t.TInvLocationData)
	cb.Do("AnnItem", &t.AnnItem)
}

type Marker struct {
	DwHash        DT_UINT
	NID           DT_INT
	EType         DT_ENUM
	Transform     PRTransform
	Snoname       DT_SNO_NAME
	DwMarkerFlags DT_UINT
	Unk_c1a1f47   DT_UINT
	VecScale      DT_VECTOR3D
	PtBase        DT_POLYMORPHIC_VARIABLEARRAY[*MarkerDataBase]
	PtGroupData   DT_VARIABLEARRAY[*MarkerGroupData]
	PtMarkerLinks DT_VARIABLEARRAY[*MarkerLink]
	Unk_c339f69   DT_INT
	DwSeed        DT_UINT
	TPrefabData   PrefabData
}

func (t *Marker) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.DwHash, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.NID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.EType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.Transform, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.Snoname, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.DwMarkerFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.Unk_c1a1f47, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.VecScale, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.PtBase, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.PtGroupData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.PtMarkerLinks, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.Unk_c339f69, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+132, &t.DwSeed, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+136, &t.TPrefabData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+192, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Marker) Walk(cb WalkCallback) {
	cb.Do("DwHash", &t.DwHash)
	cb.Do("NID", &t.NID)
	cb.Do("EType", &t.EType)
	cb.Do("Transform", &t.Transform)
	cb.Do("Snoname", &t.Snoname)
	cb.Do("DwMarkerFlags", &t.DwMarkerFlags)
	cb.Do("Unk_c1a1f47", &t.Unk_c1a1f47)
	cb.Do("VecScale", &t.VecScale)
	cb.Do("PtBase", &t.PtBase)
	cb.Do("PtGroupData", &t.PtGroupData)
	cb.Do("PtMarkerLinks", &t.PtMarkerLinks)
	cb.Do("Unk_c339f69", &t.Unk_c339f69)
	cb.Do("DwSeed", &t.DwSeed)
	cb.Do("TPrefabData", &t.TPrefabData)
}

type Type_bac3964d struct {
	ArKeys DT_VARIABLEARRAY[*Type_666e5231]
}

func (t *Type_bac3964d) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.ArKeys, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_bac3964d) Walk(cb WalkCallback) {
	cb.Do("ArKeys", &t.ArKeys)
}

type DamageTakenBuffCallback struct {
	// Inherits BuffCallbackBase
	// Inherits PolymorphicBase
	DwType                DT_UINT
	DwPad                 DT_UINT
	SnoTriggerEffectGroup DT_SNO
	ArConditions          DT_POLYMORPHIC_VARIABLEARRAY[*DT_INT64]
	NPriority             DT_INT
}

func (t *DamageTakenBuffCallback) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoTriggerEffectGroup, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ArConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.NPriority, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+56, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *DamageTakenBuffCallback) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("SnoTriggerEffectGroup", &t.SnoTriggerEffectGroup)
	cb.Do("ArConditions", &t.ArConditions)
	cb.Do("NPriority", &t.NPriority)
}

type QuestSubconditionBase struct {
	// Inherits Subcondition
	// Inherits PolymorphicBase
	DwType   DT_UINT
	BNegate  DT_INT
	SnoQuest DT_SNO
	DwPad    DT_UINT
}

func (t *QuestSubconditionBase) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BNegate, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SnoQuest, r, &Options{
		Flags: 513,
		Group: 31,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *QuestSubconditionBase) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("BNegate", &t.BNegate)
	cb.Do("SnoQuest", &t.SnoQuest)
	cb.Do("DwPad", &t.DwPad)
}

type MonsterFamilyArchetype struct {
	SzArchetypeName      DT_UINT
	SnoAIAwareness       DT_SNO
	TAwareness           MonsterAwarenessInfo
	Unk_301c43c          DT_UINT
	DwFlags              DT_UINT
	Unk_b291cd3          DT_INT
	Unk_8495b04          DT_INT
	FlExperienceScalar   DT_FLOAT
	FlHPScalar           DT_FLOAT
	FlDamageScalar       DT_FLOAT
	TDamageRange         DT_RANGE[*DT_FLOAT]
	Unk_100de70          DT_INT
	Unk_4324dae          DT_FLOAT
	Unk_c9d3011          DT_FLOAT
	FlMaxDamageShield    DT_FLOAT
	Unk_ccbd7c6          DT_ENUM
	Unk_a5b8d03          DT_ENUM
	Unk_773ad4d          DT_ENUM
	FlSpeedWalking       DT_FLOAT
	FlSpeedRunning       DT_FLOAT
	FlSpeedSprinting     DT_FLOAT
	FlSpeedStrafing      DT_FLOAT
	TSpeedVarianceRange  DT_RANGE[*DT_FLOAT]
	FlAcceleration       DT_FLOAT
	FlCombatAcceleration DT_FLOAT
	Unk_39a9625          DT_GBID
	Unk_194112d          DT_GBID
	TFacingData          ActorFacingData
	SnoSummonPower       DT_SNO
	Unk_f73b6d9          DT_SNO
	Unk_c2cc767          DT_SNO
	SnoStaggerPower      DT_SNO
	Unk_e1387c3          DT_FLOAT
	Unk_5e90f68          DT_FLOAT
	Unk_74e754e          DT_FLOAT
	Unk_9b62fa5          DT_FLOAT
	Unk_18bb74a          DT_FLOAT
	Unk_9831607          DT_VARIABLEARRAY[*DT_FLOAT]
	SnoBossObserver      DT_SNO
	Unk_1627b04          DT_FLOAT
	Unk_121fc92          DT_FLOAT
	Unk_5428a5e          DT_FLOAT
	Unk_3b9132c          DT_FLOAT
	Unk_c0cc954          DT_FLOAT
	Unk_d5178b2          DT_FLOAT
	Unk_e08f0df          DT_FLOAT
	Unk_c86d0b9          DT_INT
	Unk_d544bbb          DT_FLOAT
	ETiltType            DT_ENUM
	ETiltTypeOnDeath     DT_ENUM
	Unk_2401865          DT_FLOAT
	Unk_94abb4e          DT_FLOAT
	Unk_f50871           DT_FLOAT
	Unk_aca81bc          DT_FLOAT
	Unk_38d1c6b          DT_INT
	Unk_63732a6          DT_INT
	Unk_904bb00          DT_INT
	Unk_28c7e7c          DT_INT
	SnoDisallowedAffixes DT_VARIABLEARRAY[*DT_SNO]
}

func (t *MonsterFamilyArchetype) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SzArchetypeName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.SnoAIAwareness, r, &Options{
		Flags: 1,
		Group: 125,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.TAwareness, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.Unk_301c43c, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.DwFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.Unk_b291cd3, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.Unk_8495b04, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.FlExperienceScalar, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.FlHPScalar, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+60, &t.FlDamageScalar, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.TDamageRange, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_100de70, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.Unk_4324dae, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.Unk_c9d3011, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.FlMaxDamageShield, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.Unk_ccbd7c6, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.Unk_a5b8d03, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.Unk_773ad4d, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+100, &t.FlSpeedWalking, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+104, &t.FlSpeedRunning, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+108, &t.FlSpeedSprinting, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.FlSpeedStrafing, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+116, &t.TSpeedVarianceRange, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+124, &t.FlAcceleration, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.FlCombatAcceleration, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+132, &t.Unk_39a9625, r, &Options{
		Flags: 1,
		Group: 34,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+136, &t.Unk_194112d, r, &Options{
		Flags: 1,
		Group: 34,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+140, &t.TFacingData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+152, &t.SnoSummonPower, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+156, &t.Unk_f73b6d9, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+160, &t.Unk_c2cc767, r, &Options{
		Flags: 513,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+164, &t.SnoStaggerPower, r, &Options{
		Flags: 513,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+168, &t.Unk_e1387c3, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+172, &t.Unk_5e90f68, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+176, &t.Unk_74e754e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+180, &t.Unk_9b62fa5, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+184, &t.Unk_18bb74a, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+192, &t.Unk_9831607, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+208, &t.SnoBossObserver, r, &Options{
		Flags: 513,
		Group: 26,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+212, &t.Unk_1627b04, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+216, &t.Unk_121fc92, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+220, &t.Unk_5428a5e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+224, &t.Unk_3b9132c, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+228, &t.Unk_c0cc954, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+232, &t.Unk_d5178b2, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+236, &t.Unk_e08f0df, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+240, &t.Unk_c86d0b9, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+244, &t.Unk_d544bbb, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+248, &t.ETiltType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+252, &t.ETiltTypeOnDeath, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+256, &t.Unk_2401865, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+260, &t.Unk_94abb4e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+264, &t.Unk_f50871, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+268, &t.Unk_aca81bc, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+272, &t.Unk_38d1c6b, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+276, &t.Unk_63732a6, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+280, &t.Unk_904bb00, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+284, &t.Unk_28c7e7c, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+288, &t.SnoDisallowedAffixes, r, &Options{
		Flags: 513,
		Group: 107,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+304, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *MonsterFamilyArchetype) Walk(cb WalkCallback) {
	cb.Do("SzArchetypeName", &t.SzArchetypeName)
	cb.Do("SnoAIAwareness", &t.SnoAIAwareness)
	cb.Do("TAwareness", &t.TAwareness)
	cb.Do("Unk_301c43c", &t.Unk_301c43c)
	cb.Do("DwFlags", &t.DwFlags)
	cb.Do("Unk_b291cd3", &t.Unk_b291cd3)
	cb.Do("Unk_8495b04", &t.Unk_8495b04)
	cb.Do("FlExperienceScalar", &t.FlExperienceScalar)
	cb.Do("FlHPScalar", &t.FlHPScalar)
	cb.Do("FlDamageScalar", &t.FlDamageScalar)
	cb.Do("TDamageRange", &t.TDamageRange)
	cb.Do("Unk_100de70", &t.Unk_100de70)
	cb.Do("Unk_4324dae", &t.Unk_4324dae)
	cb.Do("Unk_c9d3011", &t.Unk_c9d3011)
	cb.Do("FlMaxDamageShield", &t.FlMaxDamageShield)
	cb.Do("Unk_ccbd7c6", &t.Unk_ccbd7c6)
	cb.Do("Unk_a5b8d03", &t.Unk_a5b8d03)
	cb.Do("Unk_773ad4d", &t.Unk_773ad4d)
	cb.Do("FlSpeedWalking", &t.FlSpeedWalking)
	cb.Do("FlSpeedRunning", &t.FlSpeedRunning)
	cb.Do("FlSpeedSprinting", &t.FlSpeedSprinting)
	cb.Do("FlSpeedStrafing", &t.FlSpeedStrafing)
	cb.Do("TSpeedVarianceRange", &t.TSpeedVarianceRange)
	cb.Do("FlAcceleration", &t.FlAcceleration)
	cb.Do("FlCombatAcceleration", &t.FlCombatAcceleration)
	cb.Do("Unk_39a9625", &t.Unk_39a9625)
	cb.Do("Unk_194112d", &t.Unk_194112d)
	cb.Do("TFacingData", &t.TFacingData)
	cb.Do("SnoSummonPower", &t.SnoSummonPower)
	cb.Do("Unk_f73b6d9", &t.Unk_f73b6d9)
	cb.Do("Unk_c2cc767", &t.Unk_c2cc767)
	cb.Do("SnoStaggerPower", &t.SnoStaggerPower)
	cb.Do("Unk_e1387c3", &t.Unk_e1387c3)
	cb.Do("Unk_5e90f68", &t.Unk_5e90f68)
	cb.Do("Unk_74e754e", &t.Unk_74e754e)
	cb.Do("Unk_9b62fa5", &t.Unk_9b62fa5)
	cb.Do("Unk_18bb74a", &t.Unk_18bb74a)
	cb.Do("Unk_9831607", &t.Unk_9831607)
	cb.Do("SnoBossObserver", &t.SnoBossObserver)
	cb.Do("Unk_1627b04", &t.Unk_1627b04)
	cb.Do("Unk_121fc92", &t.Unk_121fc92)
	cb.Do("Unk_5428a5e", &t.Unk_5428a5e)
	cb.Do("Unk_3b9132c", &t.Unk_3b9132c)
	cb.Do("Unk_c0cc954", &t.Unk_c0cc954)
	cb.Do("Unk_d5178b2", &t.Unk_d5178b2)
	cb.Do("Unk_e08f0df", &t.Unk_e08f0df)
	cb.Do("Unk_c86d0b9", &t.Unk_c86d0b9)
	cb.Do("Unk_d544bbb", &t.Unk_d544bbb)
	cb.Do("ETiltType", &t.ETiltType)
	cb.Do("ETiltTypeOnDeath", &t.ETiltTypeOnDeath)
	cb.Do("Unk_2401865", &t.Unk_2401865)
	cb.Do("Unk_94abb4e", &t.Unk_94abb4e)
	cb.Do("Unk_f50871", &t.Unk_f50871)
	cb.Do("Unk_aca81bc", &t.Unk_aca81bc)
	cb.Do("Unk_38d1c6b", &t.Unk_38d1c6b)
	cb.Do("Unk_63732a6", &t.Unk_63732a6)
	cb.Do("Unk_904bb00", &t.Unk_904bb00)
	cb.Do("Unk_28c7e7c", &t.Unk_28c7e7c)
	cb.Do("SnoDisallowedAffixes", &t.SnoDisallowedAffixes)
}

type AppearanceLook struct {
	SzLookName DT_UINT
}

func (t *AppearanceLook) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SzLookName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+4, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *AppearanceLook) Walk(cb WalkCallback) {
	cb.Do("SzLookName", &t.SzLookName)
}

type CarryableReceptacleGizmoData struct {
	// Inherits NamedGizmoData
	// Inherits ActorGizmoData
	// Inherits PolymorphicBase
	DwType                       DT_UINT
	DwPad                        DT_UINT
	FDisableNonFriendlyOperation DT_INT
	FWalkToCenter                DT_INT
	FGizmoStartsDisabled         DT_INT
	FUseStringListName           DT_INT
	FForceMinimapIcon            DT_INT
	FlOperationRadius            DT_FLOAT
	Unk_d0b1df5                  DT_FLOAT
	FlGizmoUseTime               DT_FLOAT
	SnoChannelingEffect          DT_SNO
	Unk_2767229                  DT_INT
	FGizmoShowProgressBar        DT_INT
	Unk_6d9ebe1                  DT_INT
	Unk_5456245                  DT_INT
	Unk_af5815a                  DT_INT
	SnoOnClickEffect             DT_SNO
	SnoPickedUpEffect            DT_SNO
	SnoDropOnGroundEffect        DT_SNO
	TConditionData               GizmoConditionData
	SnoPowerOperator             DT_SNO
	SnoPowerOperate              DT_SNO
	SnoPowerOperatorActive       DT_SNO
	SnoPowerOperateActive        DT_SNO
	Unk_359810e                  DT_INT
	NCooldown                    DT_UINT
	Unk_9c8478e                  DT_UINT
	Unk_d45ed2d                  DT_INT
	Unk_f6b20b7                  DT_INT
	Unk_54513b8                  DT_INT
	Unk_fd1f378                  DT_UINT
	Unk_487c14                   DT_UINT
	Unk_87f2609                  DT_UINT
	Unk_158eb4f                  DT_FLOAT
	Unk_ab58cd3                  DT_ENUM
	Unk_91a3966                  DT_UINT
	Unk_25312e5                  DT_UINT
	Unk_4be4371                  DT_INT
	ArCarryables                 DT_VARIABLEARRAY[*DT_SNO]
	NMaxCount                    DT_UINT
}

func (t *CarryableReceptacleGizmoData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.FDisableNonFriendlyOperation, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.FWalkToCenter, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.FGizmoStartsDisabled, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.FUseStringListName, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.FForceMinimapIcon, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.FlOperationRadius, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.Unk_d0b1df5, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.FlGizmoUseTime, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.SnoChannelingEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.Unk_2767229, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.FGizmoShowProgressBar, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+60, &t.Unk_6d9ebe1, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.Unk_5456245, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.Unk_af5815a, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.SnoOnClickEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.SnoPickedUpEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.SnoDropOnGroundEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.TConditionData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.SnoPowerOperator, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.SnoPowerOperate, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.SnoPowerOperatorActive, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+100, &t.SnoPowerOperateActive, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+104, &t.Unk_359810e, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+108, &t.NCooldown, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.Unk_9c8478e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+116, &t.Unk_d45ed2d, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.Unk_f6b20b7, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+124, &t.Unk_54513b8, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.Unk_fd1f378, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+132, &t.Unk_487c14, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+136, &t.Unk_87f2609, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+140, &t.Unk_158eb4f, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+144, &t.Unk_ab58cd3, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+148, &t.Unk_91a3966, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+152, &t.Unk_25312e5, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+156, &t.Unk_4be4371, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+160, &t.ArCarryables, r, &Options{
		Flags: 1,
		Group: 1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+176, &t.NMaxCount, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+184, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *CarryableReceptacleGizmoData) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("FDisableNonFriendlyOperation", &t.FDisableNonFriendlyOperation)
	cb.Do("FWalkToCenter", &t.FWalkToCenter)
	cb.Do("FGizmoStartsDisabled", &t.FGizmoStartsDisabled)
	cb.Do("FUseStringListName", &t.FUseStringListName)
	cb.Do("FForceMinimapIcon", &t.FForceMinimapIcon)
	cb.Do("FlOperationRadius", &t.FlOperationRadius)
	cb.Do("Unk_d0b1df5", &t.Unk_d0b1df5)
	cb.Do("FlGizmoUseTime", &t.FlGizmoUseTime)
	cb.Do("SnoChannelingEffect", &t.SnoChannelingEffect)
	cb.Do("Unk_2767229", &t.Unk_2767229)
	cb.Do("FGizmoShowProgressBar", &t.FGizmoShowProgressBar)
	cb.Do("Unk_6d9ebe1", &t.Unk_6d9ebe1)
	cb.Do("Unk_5456245", &t.Unk_5456245)
	cb.Do("Unk_af5815a", &t.Unk_af5815a)
	cb.Do("SnoOnClickEffect", &t.SnoOnClickEffect)
	cb.Do("SnoPickedUpEffect", &t.SnoPickedUpEffect)
	cb.Do("SnoDropOnGroundEffect", &t.SnoDropOnGroundEffect)
	cb.Do("TConditionData", &t.TConditionData)
	cb.Do("SnoPowerOperator", &t.SnoPowerOperator)
	cb.Do("SnoPowerOperate", &t.SnoPowerOperate)
	cb.Do("SnoPowerOperatorActive", &t.SnoPowerOperatorActive)
	cb.Do("SnoPowerOperateActive", &t.SnoPowerOperateActive)
	cb.Do("Unk_359810e", &t.Unk_359810e)
	cb.Do("NCooldown", &t.NCooldown)
	cb.Do("Unk_9c8478e", &t.Unk_9c8478e)
	cb.Do("Unk_d45ed2d", &t.Unk_d45ed2d)
	cb.Do("Unk_f6b20b7", &t.Unk_f6b20b7)
	cb.Do("Unk_54513b8", &t.Unk_54513b8)
	cb.Do("Unk_fd1f378", &t.Unk_fd1f378)
	cb.Do("Unk_487c14", &t.Unk_487c14)
	cb.Do("Unk_87f2609", &t.Unk_87f2609)
	cb.Do("Unk_158eb4f", &t.Unk_158eb4f)
	cb.Do("Unk_ab58cd3", &t.Unk_ab58cd3)
	cb.Do("Unk_91a3966", &t.Unk_91a3966)
	cb.Do("Unk_25312e5", &t.Unk_25312e5)
	cb.Do("Unk_4be4371", &t.Unk_4be4371)
	cb.Do("ArCarryables", &t.ArCarryables)
	cb.Do("NMaxCount", &t.NMaxCount)
}

type ActorVOData struct {
	FVOPlaysOnPlayer    DT_INT
	SnoSpeaker          DT_SNO
	SnoConversationList DT_SNO
	Unk_94efee3         DT_SNO_NAME
}

func (t *ActorVOData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.FVOPlaysOnPlayer, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.SnoSpeaker, r, &Options{
		Flags: 1,
		Group: 72,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.SnoConversationList, r, &Options{
		Flags: 1,
		Group: 13,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.Unk_94efee3, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+20, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ActorVOData) Walk(cb WalkCallback) {
	cb.Do("FVOPlaysOnPlayer", &t.FVOPlaysOnPlayer)
	cb.Do("SnoSpeaker", &t.SnoSpeaker)
	cb.Do("SnoConversationList", &t.SnoConversationList)
	cb.Do("Unk_94efee3", &t.Unk_94efee3)
}

type IndexedTriangle struct {
	A DT_INT
	B DT_INT
	C DT_INT
}

func (t *IndexedTriangle) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.A, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.B, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.C, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+12, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *IndexedTriangle) Walk(cb WalkCallback) {
	cb.Do("A", &t.A)
	cb.Do("B", &t.B)
	cb.Do("C", &t.C)
}

type Type_bb6f3f3b struct {
	// Inherits PowerCallbackBase
	// Inherits PolymorphicBase
	DwType                DT_UINT
	DwPad                 DT_UINT
	SnoTriggerEffectGroup DT_SNO
	BCouldHaveRagdolled   DT_INT
}

func (t *Type_bb6f3f3b) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoTriggerEffectGroup, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.BCouldHaveRagdolled, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_bb6f3f3b) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("SnoTriggerEffectGroup", &t.SnoTriggerEffectGroup)
	cb.Do("BCouldHaveRagdolled", &t.BCouldHaveRagdolled)
}

type AnimSetOrderTagEntry struct {
	THeader     GBIDHeader
	Unk_b604ea1 DT_INT
}

func (t *AnimSetOrderTagEntry) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+260, &t.Unk_b604ea1, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+264, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *AnimSetOrderTagEntry) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("Unk_b604ea1", &t.Unk_b604ea1)
}

type ActiveSubzoneModifierSubcondition struct {
	// Inherits Subcondition
	// Inherits PolymorphicBase
	DwType                 DT_UINT
	BNegate                DT_INT
	DwPad                  DT_UINT
	GbidSubzoneModifierTag DT_GBID
}

func (t *ActiveSubzoneModifierSubcondition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BNegate, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.GbidSubzoneModifierTag, r, &Options{
		Flags: 1,
		Group: 60,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ActiveSubzoneModifierSubcondition) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("BNegate", &t.BNegate)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("GbidSubzoneModifierTag", &t.GbidSubzoneModifierTag)
}

type Type_bb7f18e8 struct {
	// Inherits PowerConditionBase
	// Inherits PolymorphicBase
	DwType      DT_UINT
	BInverse    DT_INT
	DwPad       DT_UINT
	ESubject    DT_ENUM
	Unk_7bd1297 DT_INT
	Unk_1492e46 DT_INT
	ArPetTypes  DT_VARIABLEARRAY[*DT_GBID]
}

func (t *Type_bb7f18e8) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BInverse, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ESubject, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.Unk_7bd1297, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.Unk_1492e46, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.ArPetTypes, r, &Options{
		Flags: 1,
		Group: 23,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+56, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_bb7f18e8) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("BInverse", &t.BInverse)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("ESubject", &t.ESubject)
	cb.Do("Unk_7bd1297", &t.Unk_7bd1297)
	cb.Do("Unk_1492e46", &t.Unk_1492e46)
	cb.Do("ArPetTypes", &t.ArPetTypes)
}

type DestroySceneMessage struct {
	THeader  RequiredMessageHeader
	IdSScene DT_SHARED_SERVER_DATA_ID
}

func (t *DestroySceneMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.IdSScene, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *DestroySceneMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("IdSScene", &t.IdSScene)
}

type Type_bbef2266 struct {
	SnoMaterialValue DT_SNO
	Value            DT_VECTOR4D
	Unk_2362b28      DT_INT
}

func (t *Type_bbef2266) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoMaterialValue, r, &Options{Group: 81}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.Value, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.Unk_2362b28, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_bbef2266) Walk(cb WalkCallback) {
	cb.Do("SnoMaterialValue", &t.SnoMaterialValue)
	cb.Do("Value", &t.Value)
	cb.Do("Unk_2362b28", &t.Unk_2362b28)
}

type Currencies struct {
	THeader        GBIDHeader
	ECurrencyType  DT_ENUM
	BIsAutoPickup  DT_INT
	BIsCraftingMat DT_INT
	SzIconLabel    DT_CSTRING[*DT_BYTE]
	GbidCategory   DT_GBID
	ArItems        DT_VARIABLEARRAY[*CurrencyItem]
	Unk_a7aad4d    DT_SNO
	Unk_f4b6cde    Type_56ff7d6a
}

func (t *Currencies) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+260, &t.ECurrencyType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+264, &t.BIsAutoPickup, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+268, &t.BIsCraftingMat, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+272, &t.SzIconLabel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+288, &t.GbidCategory, r, &Options{
		Flags: 1,
		Group: 58,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+296, &t.ArItems, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+312, &t.Unk_a7aad4d, r, &Options{
		Flags: 1,
		Group: 63,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+320, &t.Unk_f4b6cde, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+336, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Currencies) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("ECurrencyType", &t.ECurrencyType)
	cb.Do("BIsAutoPickup", &t.BIsAutoPickup)
	cb.Do("BIsCraftingMat", &t.BIsCraftingMat)
	cb.Do("SzIconLabel", &t.SzIconLabel)
	cb.Do("GbidCategory", &t.GbidCategory)
	cb.Do("ArItems", &t.ArItems)
	cb.Do("Unk_a7aad4d", &t.Unk_a7aad4d)
	cb.Do("Unk_f4b6cde", &t.Unk_f4b6cde)
}

type Type_bc07d3c7 struct {
	ArPieces         DT_VARIABLEARRAY[*Type_3ddf9693]
	ArStartCapPieces DT_VARIABLEARRAY[*Type_3ddf9693]
	ArEndCapPieces   DT_VARIABLEARRAY[*Type_3ddf9693]
	Unk_755f012      DT_RANGE[*DT_FLOAT]
	EPieceSelectMode DT_ENUM
}

func (t *Type_bc07d3c7) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.ArPieces, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.ArStartCapPieces, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.ArEndCapPieces, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.Unk_755f012, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.EPieceSelectMode, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+64, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_bc07d3c7) Walk(cb WalkCallback) {
	cb.Do("ArPieces", &t.ArPieces)
	cb.Do("ArStartCapPieces", &t.ArStartCapPieces)
	cb.Do("ArEndCapPieces", &t.ArEndCapPieces)
	cb.Do("Unk_755f012", &t.Unk_755f012)
	cb.Do("EPieceSelectMode", &t.EPieceSelectMode)
}

type NSlice struct {
	// Inherits WindowPiecesBase
	// Inherits PolymorphicBase
	DwType       DT_UINT
	DwPad        DT_UINT
	FlImageScale DT_FLOAT
	NPadding     DT_UINT
	HSourceImage DT_UINT
	ESliceStyle  DT_ENUM
	Unk_da48774  DT_VARIABLEARRAY[*DT_UINT]
	Unk_c69f784  DT_VARIABLEARRAY[*DT_UINT]
	FTileCenter  DT_INT
	Unk_d661bef  DT_INT
	Unk_1ec53df  DT_INT
}

func (t *NSlice) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.FlImageScale, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.NPadding, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.HSourceImage, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.ESliceStyle, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.Unk_da48774, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.Unk_c69f784, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.FTileCenter, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.Unk_d661bef, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_1ec53df, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+80, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *NSlice) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("FlImageScale", &t.FlImageScale)
	cb.Do("NPadding", &t.NPadding)
	cb.Do("HSourceImage", &t.HSourceImage)
	cb.Do("ESliceStyle", &t.ESliceStyle)
	cb.Do("Unk_da48774", &t.Unk_da48774)
	cb.Do("Unk_c69f784", &t.Unk_c69f784)
	cb.Do("FTileCenter", &t.FTileCenter)
	cb.Do("Unk_d661bef", &t.Unk_d661bef)
	cb.Do("Unk_1ec53df", &t.Unk_1ec53df)
}

type TriggerEventObjectKeyFrame struct {
	// Inherits TriggerEvent
	// Inherits PolymorphicBase
	DwType          DT_UINT
	DwPad           DT_UINT
	TConditions     TriggerConditions
	FGenerated      DT_INT
	Unk_6cba752     DT_INT
	DwParentActorID DT_UINT
	Unk_85269a4     DT_INT
	DwObjectID      DT_UINT
	ArKeys          DT_POLYMORPHIC_VARIABLEARRAY[*DT_INT64]
	Unk_9717a7e     DT_FLOAT
}

func (t *TriggerEventObjectKeyFrame) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.FGenerated, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_6cba752, r, &Options{Flags: 16}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.DwParentActorID, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.Unk_85269a4, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.DwObjectID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.ArKeys, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.Unk_9717a7e, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+120, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TriggerEventObjectKeyFrame) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("TConditions", &t.TConditions)
	cb.Do("FGenerated", &t.FGenerated)
	cb.Do("Unk_6cba752", &t.Unk_6cba752)
	cb.Do("DwParentActorID", &t.DwParentActorID)
	cb.Do("Unk_85269a4", &t.Unk_85269a4)
	cb.Do("DwObjectID", &t.DwObjectID)
	cb.Do("ArKeys", &t.ArKeys)
	cb.Do("Unk_9717a7e", &t.Unk_9717a7e)
}

type BuffCallbackBase struct {
	// Inherits PolymorphicBase
	DwType                DT_UINT
	DwPad                 DT_UINT
	SnoTriggerEffectGroup DT_SNO
	ArConditions          DT_POLYMORPHIC_VARIABLEARRAY[*DT_INT64]
}

func (t *BuffCallbackBase) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoTriggerEffectGroup, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ArConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *BuffCallbackBase) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("SnoTriggerEffectGroup", &t.SnoTriggerEffectGroup)
	cb.Do("ArConditions", &t.ArConditions)
}

type TransmogMultipleSlotsMessage struct {
	THeader     RequiredMessageHeader
	ArTransmogs DT_FIXEDARRAY[*TransmogSlotData]
}

func (t *TransmogMultipleSlotsMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.ArTransmogs, r, &Options{
		ArrayLength: 16,
		Flags:       8,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+276, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TransmogMultipleSlotsMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("ArTransmogs", &t.ArTransmogs)
}

type PreloadSpawnWorldDataMessage struct {
	THeader       RequiredMessageHeader
	IdSWorld      DT_SHARED_SERVER_DATA_ID
	Unk_f4f03a5   DT_INT
	ArPreloadData DT_FIXEDARRAY[*PreloadSpawnMarkerData]
}

func (t *PreloadSpawnWorldDataMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.IdSWorld, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_f4f03a5, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.ArPreloadData, r, &Options{
		ArrayLength: 75,
		Flags:       8,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+1232, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PreloadSpawnWorldDataMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("IdSWorld", &t.IdSWorld)
	cb.Do("Unk_f4f03a5", &t.Unk_f4f03a5)
	cb.Do("ArPreloadData", &t.ArPreloadData)
}

type QuestFollowerPhaseInfo struct {
	DwPhase                  DT_UINT
	TSpawnBehavior           QuestFollowerSpawnBehavior
	SnoPlayerAttachCondition DT_SNO
	ArLevelAreas             DT_VARIABLEARRAY[*DT_SNO]
}

func (t *QuestFollowerPhaseInfo) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.DwPhase, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.TSpawnBehavior, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.SnoPlayerAttachCondition, r, &Options{
		Flags: 1,
		Group: 51,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.ArLevelAreas, r, &Options{
		Flags: 513,
		Group: 22,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+56, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *QuestFollowerPhaseInfo) Walk(cb WalkCallback) {
	cb.Do("DwPhase", &t.DwPhase)
	cb.Do("TSpawnBehavior", &t.TSpawnBehavior)
	cb.Do("SnoPlayerAttachCondition", &t.SnoPlayerAttachCondition)
	cb.Do("ArLevelAreas", &t.ArLevelAreas)
}

type AnimTreeLeaf struct {
	DwID            DT_UINT
	ENodeType       DT_ENUM
	SnoAnim         DT_SNO
	SnoPowerAnimKey DT_SNO
	FlPoseFrame     DT_FLOAT
	FlPlaySpeed     DT_FLOAT
	NSyncGroupIndex DT_INT
	BIsDisabled     DT_INT
	Unk_4088987     DT_INT
	EScaleMethod    DT_ENUM
	EUpdateMode     DT_ENUM
	EBoneWeightSet  DT_ENUM
	EAnimLayer      DT_ENUM
	Unk_51765c9     DT_ENUM
}

func (t *AnimTreeLeaf) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.DwID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.ENodeType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.SnoAnim, r, &Options{
		Flags: 1,
		Group: 6,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.SnoPowerAnimKey, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.FlPoseFrame, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.FlPlaySpeed, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.NSyncGroupIndex, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.BIsDisabled, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.Unk_4088987, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.EScaleMethod, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.EUpdateMode, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.EBoneWeightSet, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.EAnimLayer, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.Unk_51765c9, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+56, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *AnimTreeLeaf) Walk(cb WalkCallback) {
	cb.Do("DwID", &t.DwID)
	cb.Do("ENodeType", &t.ENodeType)
	cb.Do("SnoAnim", &t.SnoAnim)
	cb.Do("SnoPowerAnimKey", &t.SnoPowerAnimKey)
	cb.Do("FlPoseFrame", &t.FlPoseFrame)
	cb.Do("FlPlaySpeed", &t.FlPlaySpeed)
	cb.Do("NSyncGroupIndex", &t.NSyncGroupIndex)
	cb.Do("BIsDisabled", &t.BIsDisabled)
	cb.Do("Unk_4088987", &t.Unk_4088987)
	cb.Do("EScaleMethod", &t.EScaleMethod)
	cb.Do("EUpdateMode", &t.EUpdateMode)
	cb.Do("EBoneWeightSet", &t.EBoneWeightSet)
	cb.Do("EAnimLayer", &t.EAnimLayer)
	cb.Do("Unk_51765c9", &t.Unk_51765c9)
}

type AnimTreeNode struct {
	// Inherits AnimTreeNodeBase
	// Inherits PolymorphicBase
	DwType               DT_UINT
	DwPad                DT_UINT
	DwID                 DT_UINT
	ENodeType            DT_ENUM
	EAnimLayer           DT_ENUM
	PtChildren           DT_VARIABLEARRAY[*AnimTreeNodeChild]
	EBlendParam          DT_ENUM
	ESecondaryBlendParam DT_ENUM
	Unk_5733828          DT_VARIABLEARRAY[*AnimTreeBlendTriangle]
	TMinBlend            DT_VECTOR2D
	TMaxBlend            DT_VECTOR2D
	TBlendIn             BlendSettings
	TBlendOut            BlendSettings
	Unk_dd1cd6f          DT_INT
	NSyncGroupIndex      DT_INT
}

func (t *AnimTreeNode) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.DwID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.ENodeType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.EAnimLayer, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.PtChildren, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.EBlendParam, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.ESecondaryBlendParam, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.Unk_5733828, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.TMinBlend, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.TMaxBlend, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.TBlendIn, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.TBlendOut, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+104, &t.Unk_dd1cd6f, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+108, &t.NSyncGroupIndex, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+112, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *AnimTreeNode) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("DwID", &t.DwID)
	cb.Do("ENodeType", &t.ENodeType)
	cb.Do("EAnimLayer", &t.EAnimLayer)
	cb.Do("PtChildren", &t.PtChildren)
	cb.Do("EBlendParam", &t.EBlendParam)
	cb.Do("ESecondaryBlendParam", &t.ESecondaryBlendParam)
	cb.Do("Unk_5733828", &t.Unk_5733828)
	cb.Do("TMinBlend", &t.TMinBlend)
	cb.Do("TMaxBlend", &t.TMaxBlend)
	cb.Do("TBlendIn", &t.TBlendIn)
	cb.Do("TBlendOut", &t.TBlendOut)
	cb.Do("Unk_dd1cd6f", &t.Unk_dd1cd6f)
	cb.Do("NSyncGroupIndex", &t.NSyncGroupIndex)
}

type MaterialEnum struct {
	DwValue    DT_UINT
	SzEnumName DT_CSTRING[*DT_BYTE]
}

func (t *MaterialEnum) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.DwValue, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.SzEnumName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *MaterialEnum) Walk(cb WalkCallback) {
	cb.Do("DwValue", &t.DwValue)
	cb.Do("SzEnumName", &t.SzEnumName)
}

type QuestChainSubcondition struct {
	// Inherits Subcondition
	// Inherits PolymorphicBase
	DwType        DT_UINT
	BNegate       DT_INT
	DwPad         DT_UINT
	SnoQuestChain DT_SNO
	EState        DT_ENUM
}

func (t *QuestChainSubcondition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BNegate, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SnoQuestChain, r, &Options{
		Flags: 513,
		Group: 96,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.EState, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *QuestChainSubcondition) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("BNegate", &t.BNegate)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("SnoQuestChain", &t.SnoQuestChain)
	cb.Do("EState", &t.EState)
}

type ScriptMessageMapFilter struct {
	TKey          DT_UINT
	EVariableType DT_ENUM
	Unk_67545b    DT_POLYMORPHIC_VARIABLEARRAY[*ScriptEventParamBase]
}

func (t *ScriptMessageMapFilter) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.TKey, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.EVariableType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.Unk_67545b, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ScriptMessageMapFilter) Walk(cb WalkCallback) {
	cb.Do("TKey", &t.TKey)
	cb.Do("EVariableType", &t.EVariableType)
	cb.Do("Unk_67545b", &t.Unk_67545b)
}

type AnimationClothOverride struct {
	SnoAnimation     DT_SNO
	SnoClothOverride DT_SNO
	FlBlendTime      DT_FLOAT
}

func (t *AnimationClothOverride) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoAnimation, r, &Options{
		Flags: 513,
		Group: 6,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.SnoClothOverride, r, &Options{
		Flags: 1,
		Group: 11,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.FlBlendTime, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+12, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *AnimationClothOverride) Walk(cb WalkCallback) {
	cb.Do("SnoAnimation", &t.SnoAnimation)
	cb.Do("SnoClothOverride", &t.SnoClothOverride)
	cb.Do("FlBlendTime", &t.FlBlendTime)
}

type SimpleResponse struct {
	THeader RequiredResponseMessageHeader
}

func (t *SimpleResponse) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *SimpleResponse) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
}

type HirelingInfoUpdateMessage struct {
	THeader               RequiredMessageHeader
	EClass                DT_INT
	FDead                 DT_INT
	GbidName              DT_GBID
	DwPlayerGameAccountId DT_UINT
}

func (t *HirelingInfoUpdateMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.EClass, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.FDead, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.GbidName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.DwPlayerGameAccountId, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *HirelingInfoUpdateMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("EClass", &t.EClass)
	cb.Do("FDead", &t.FDead)
	cb.Do("GbidName", &t.GbidName)
	cb.Do("DwPlayerGameAccountId", &t.DwPlayerGameAccountId)
}

type ConversationCannedNode struct {
	// Inherits ConversationTreeNode
	// Inherits PolymorphicBase
	DwType                DT_UINT
	DwPad                 DT_UINT
	DwNodeID              DT_UINT
	DwNextNodeID          DT_UINT
	DwParentNodeID        DT_UINT
	PtNextNode            DT_INT64
	DwFlags               DT_UINT
	SzComment             DT_CSTRING[*DT_BYTE]
	SnoCannedConversation DT_SNO
	Unk_1d53cd7           DT_UINT
}

func (t *ConversationCannedNode) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.DwNodeID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwNextNodeID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.DwParentNodeID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.PtNextNode, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.DwFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.SzComment, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.SnoCannedConversation, r, &Options{
		Flags: 1,
		Group: 12,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.Unk_1d53cd7, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+72, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ConversationCannedNode) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("DwNodeID", &t.DwNodeID)
	cb.Do("DwNextNodeID", &t.DwNextNodeID)
	cb.Do("DwParentNodeID", &t.DwParentNodeID)
	cb.Do("PtNextNode", &t.PtNextNode)
	cb.Do("DwFlags", &t.DwFlags)
	cb.Do("SzComment", &t.SzComment)
	cb.Do("SnoCannedConversation", &t.SnoCannedConversation)
	cb.Do("Unk_1d53cd7", &t.Unk_1d53cd7)
}

type ActorVisualInventoryData struct {
	FEnableOverride DT_INT
	SnoActor        DT_FIXEDARRAY[*DT_SNO]
	SnoActor2       DT_FIXEDARRAY[*DT_SNO]
}

func (t *ActorVisualInventoryData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.FEnableOverride, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.SnoActor, r, &Options{
		ArrayLength: 10,
		Flags:       1,
		Group:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.SnoActor2, r, &Options{
		ArrayLength: 10,
		Flags:       1,
		Group:       1,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+84, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ActorVisualInventoryData) Walk(cb WalkCallback) {
	cb.Do("FEnableOverride", &t.FEnableOverride)
	cb.Do("SnoActor", &t.SnoActor)
	cb.Do("SnoActor2", &t.SnoActor2)
}

type CampDiscoveredSubcondition struct {
	// Inherits Subcondition
	// Inherits PolymorphicBase
	DwType            DT_UINT
	BNegate           DT_INT
	DwPad             DT_UINT
	SnoCampQuestChain DT_SNO
}

func (t *CampDiscoveredSubcondition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BNegate, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SnoCampQuestChain, r, &Options{
		Flags: 1,
		Group: 96,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *CampDiscoveredSubcondition) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("BNegate", &t.BNegate)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("SnoCampQuestChain", &t.SnoCampQuestChain)
}

type LabelGBID_Table struct {
	// Inherits GameBalanceTable
	// Inherits PolymorphicBase
	DwType   DT_UINT
	DwPad    DT_UINT
	TEntries DT_VARIABLEARRAY[*LabelGBID]
}

func (t *LabelGBID_Table) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TEntries, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *LabelGBID_Table) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("TEntries", &t.TEntries)
}

type ByteDataMessage struct {
	THeader RequiredMessageHeader
	BData   DT_BYTE
}

func (t *ByteDataMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+20, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ByteDataMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("BData", &t.BData)
}

type CampaignCallbackSubcondition struct {
	// Inherits QuestSubconditionBase
	// Inherits Subcondition
	// Inherits PolymorphicBase
	DwType       DT_UINT
	BNegate      DT_INT
	SnoQuest     DT_SNO
	DwPad        DT_UINT
	NStepUID     DT_INT
	NCallbackUID DT_UINT
	EComp        DT_ENUM
	NCount       DT_UINT
}

func (t *CampaignCallbackSubcondition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BNegate, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SnoQuest, r, &Options{
		Flags: 513,
		Group: 31,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.NStepUID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.NCallbackUID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.EComp, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.NCount, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *CampaignCallbackSubcondition) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("BNegate", &t.BNegate)
	cb.Do("SnoQuest", &t.SnoQuest)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("NStepUID", &t.NStepUID)
	cb.Do("NCallbackUID", &t.NCallbackUID)
	cb.Do("EComp", &t.EComp)
	cb.Do("NCount", &t.NCount)
}

type UIStoryboard2Style struct {
	// Inherits UIControlStyle
	// Inherits PolymorphicBase
	DwType                    DT_UINT
	DwPad                     DT_UINT
	HParentStyle              UIControlHandle
	Unk_441f783               DT_INT64
	M_eHasModifiedPowerTagMap DT_TAGMAP[*DT_ENUM]
	SnoStoryboard             DT_SNO
	ELoadBehavior             DT_ENUM
	EActivateBehavior         DT_ENUM
	EFinishBehavior           DT_ENUM
	Unk_92765af               DT_TAGMAP[*DT_ENUM]
}

func (t *UIStoryboard2Style) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.HParentStyle, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_441f783, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.M_eHasModifiedPowerTagMap, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.SnoStoryboard, r, &Options{
		Flags: 1,
		Group: 90,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.ELoadBehavior, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.EActivateBehavior, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+60, &t.EFinishBehavior, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.Unk_92765af, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+80, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *UIStoryboard2Style) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("HParentStyle", &t.HParentStyle)
	cb.Do("Unk_441f783", &t.Unk_441f783)
	cb.Do("M_eHasModifiedPowerTagMap", &t.M_eHasModifiedPowerTagMap)
	cb.Do("SnoStoryboard", &t.SnoStoryboard)
	cb.Do("ELoadBehavior", &t.ELoadBehavior)
	cb.Do("EActivateBehavior", &t.EActivateBehavior)
	cb.Do("EFinishBehavior", &t.EFinishBehavior)
	cb.Do("Unk_92765af", &t.Unk_92765af)
}

type AttachCarryableToPlayerMessage struct {
	THeader      RequiredMessageHeader
	AnnPlayer    DT_ACD_NETWORK_NAME
	SnoCarryable DT_SNO
	Unk_d5b8271  DT_UINT
	Unk_7888959  DT_UINT
}

func (t *AttachCarryableToPlayerMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.AnnPlayer, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SnoCarryable, r, &Options{
		Flags: 1,
		Group: 1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.Unk_d5b8271, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.Unk_7888959, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+36, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *AttachCarryableToPlayerMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("AnnPlayer", &t.AnnPlayer)
	cb.Do("SnoCarryable", &t.SnoCarryable)
	cb.Do("Unk_d5b8271", &t.Unk_d5b8271)
	cb.Do("Unk_7888959", &t.Unk_7888959)
}

type CriteriaEvent struct {
	// Inherits PolymorphicBase
	DwType               DT_UINT
	EId                  DT_ENUM
	ArModifier           DT_VARIABLEARRAY[*CriteriaModifier]
	Snoname              DT_SNO_NAME
	EGizmoType           DT_ENUM
	EIQL                 DT_ENUM
	ESlot                DT_ENUM
	EHealType            DT_ENUM
	ECurrencyType        DT_ENUM
	EZone                DT_ENUM
	UVal                 DT_UINT
	GbidAchievementEvent DT_GBID
	UOperand             DT_INT64
	BUsesOperand         DT_INT
	DwPad                DT_UINT
}

func (t *CriteriaEvent) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.EId, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ArModifier, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.Snoname, r, &Options{Flags: 513}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.EGizmoType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.EIQL, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.ESlot, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+60, &t.EHealType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.ECurrencyType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.EZone, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.UVal, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.GbidAchievementEvent, r, &Options{
		Flags: 1,
		Group: 62,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.UOperand, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.BUsesOperand, r, &Options{Flags: 16}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+96, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *CriteriaEvent) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("EId", &t.EId)
	cb.Do("ArModifier", &t.ArModifier)
	cb.Do("Snoname", &t.Snoname)
	cb.Do("EGizmoType", &t.EGizmoType)
	cb.Do("EIQL", &t.EIQL)
	cb.Do("ESlot", &t.ESlot)
	cb.Do("EHealType", &t.EHealType)
	cb.Do("ECurrencyType", &t.ECurrencyType)
	cb.Do("EZone", &t.EZone)
	cb.Do("UVal", &t.UVal)
	cb.Do("GbidAchievementEvent", &t.GbidAchievementEvent)
	cb.Do("UOperand", &t.UOperand)
	cb.Do("BUsesOperand", &t.BUsesOperand)
	cb.Do("DwPad", &t.DwPad)
}

type IKWindow struct {
	Unk_fa00882 DT_RANGE[*DT_UINT]
}

func (t *IKWindow) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Unk_fa00882, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *IKWindow) Walk(cb WalkCallback) {
	cb.Do("Unk_fa00882", &t.Unk_fa00882)
}

type RandomAmbientSoundParams struct {
	SnoSound     DT_SNO
	TRadiusRange DT_RANGE[*DT_FLOAT]
	THeightRange DT_RANGE[*DT_FLOAT]
	Unk_99bfb44  DT_RANGE[*DT_FLOAT]
	ETimeOfDay   DT_ENUM
}

func (t *RandomAmbientSoundParams) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoSound, r, &Options{
		Flags: 1,
		Group: 40,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.TRadiusRange, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.THeightRange, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.Unk_99bfb44, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.ETimeOfDay, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *RandomAmbientSoundParams) Walk(cb WalkCallback) {
	cb.Do("SnoSound", &t.SnoSound)
	cb.Do("TRadiusRange", &t.TRadiusRange)
	cb.Do("THeightRange", &t.THeightRange)
	cb.Do("Unk_99bfb44", &t.Unk_99bfb44)
	cb.Do("ETimeOfDay", &t.ETimeOfDay)
}

type ChargeableGizmoData struct {
	// Inherits NamedGizmoData
	// Inherits ActorGizmoData
	// Inherits PolymorphicBase
	DwType                       DT_UINT
	DwPad                        DT_UINT
	FDisableNonFriendlyOperation DT_INT
	FWalkToCenter                DT_INT
	FGizmoStartsDisabled         DT_INT
	FUseStringListName           DT_INT
	FForceMinimapIcon            DT_INT
	FlOperationRadius            DT_FLOAT
	Unk_d0b1df5                  DT_FLOAT
	FlGizmoUseTime               DT_FLOAT
	SnoChannelingEffect          DT_SNO
	Unk_2767229                  DT_INT
	FGizmoShowProgressBar        DT_INT
	Unk_6d9ebe1                  DT_INT
	Unk_5456245                  DT_INT
	Unk_af5815a                  DT_INT
	SnoOnClickEffect             DT_SNO
	SnoPickedUpEffect            DT_SNO
	SnoDropOnGroundEffect        DT_SNO
	TConditionData               GizmoConditionData
	SnoPowerOperator             DT_SNO
	SnoPowerOperate              DT_SNO
	SnoPowerOperatorActive       DT_SNO
	SnoPowerOperateActive        DT_SNO
	Unk_359810e                  DT_INT
	NCooldown                    DT_UINT
	Unk_9c8478e                  DT_UINT
	Unk_d45ed2d                  DT_INT
	Unk_f6b20b7                  DT_INT
	Unk_54513b8                  DT_INT
	Unk_fd1f378                  DT_UINT
	Unk_487c14                   DT_UINT
	Unk_87f2609                  DT_UINT
	Unk_158eb4f                  DT_FLOAT
	Unk_ab58cd3                  DT_ENUM
	Unk_91a3966                  DT_UINT
	Unk_25312e5                  DT_UINT
	Unk_4be4371                  DT_INT
	Unk_3cb2278                  DT_FLOAT
}

func (t *ChargeableGizmoData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.FDisableNonFriendlyOperation, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.FWalkToCenter, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.FGizmoStartsDisabled, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.FUseStringListName, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.FForceMinimapIcon, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.FlOperationRadius, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.Unk_d0b1df5, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.FlGizmoUseTime, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.SnoChannelingEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.Unk_2767229, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.FGizmoShowProgressBar, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+60, &t.Unk_6d9ebe1, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.Unk_5456245, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.Unk_af5815a, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.SnoOnClickEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.SnoPickedUpEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.SnoDropOnGroundEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.TConditionData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.SnoPowerOperator, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.SnoPowerOperate, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.SnoPowerOperatorActive, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+100, &t.SnoPowerOperateActive, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+104, &t.Unk_359810e, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+108, &t.NCooldown, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.Unk_9c8478e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+116, &t.Unk_d45ed2d, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.Unk_f6b20b7, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+124, &t.Unk_54513b8, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.Unk_fd1f378, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+132, &t.Unk_487c14, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+136, &t.Unk_87f2609, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+140, &t.Unk_158eb4f, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+144, &t.Unk_ab58cd3, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+148, &t.Unk_91a3966, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+152, &t.Unk_25312e5, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+156, &t.Unk_4be4371, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+160, &t.Unk_3cb2278, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+168, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ChargeableGizmoData) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("FDisableNonFriendlyOperation", &t.FDisableNonFriendlyOperation)
	cb.Do("FWalkToCenter", &t.FWalkToCenter)
	cb.Do("FGizmoStartsDisabled", &t.FGizmoStartsDisabled)
	cb.Do("FUseStringListName", &t.FUseStringListName)
	cb.Do("FForceMinimapIcon", &t.FForceMinimapIcon)
	cb.Do("FlOperationRadius", &t.FlOperationRadius)
	cb.Do("Unk_d0b1df5", &t.Unk_d0b1df5)
	cb.Do("FlGizmoUseTime", &t.FlGizmoUseTime)
	cb.Do("SnoChannelingEffect", &t.SnoChannelingEffect)
	cb.Do("Unk_2767229", &t.Unk_2767229)
	cb.Do("FGizmoShowProgressBar", &t.FGizmoShowProgressBar)
	cb.Do("Unk_6d9ebe1", &t.Unk_6d9ebe1)
	cb.Do("Unk_5456245", &t.Unk_5456245)
	cb.Do("Unk_af5815a", &t.Unk_af5815a)
	cb.Do("SnoOnClickEffect", &t.SnoOnClickEffect)
	cb.Do("SnoPickedUpEffect", &t.SnoPickedUpEffect)
	cb.Do("SnoDropOnGroundEffect", &t.SnoDropOnGroundEffect)
	cb.Do("TConditionData", &t.TConditionData)
	cb.Do("SnoPowerOperator", &t.SnoPowerOperator)
	cb.Do("SnoPowerOperate", &t.SnoPowerOperate)
	cb.Do("SnoPowerOperatorActive", &t.SnoPowerOperatorActive)
	cb.Do("SnoPowerOperateActive", &t.SnoPowerOperateActive)
	cb.Do("Unk_359810e", &t.Unk_359810e)
	cb.Do("NCooldown", &t.NCooldown)
	cb.Do("Unk_9c8478e", &t.Unk_9c8478e)
	cb.Do("Unk_d45ed2d", &t.Unk_d45ed2d)
	cb.Do("Unk_f6b20b7", &t.Unk_f6b20b7)
	cb.Do("Unk_54513b8", &t.Unk_54513b8)
	cb.Do("Unk_fd1f378", &t.Unk_fd1f378)
	cb.Do("Unk_487c14", &t.Unk_487c14)
	cb.Do("Unk_87f2609", &t.Unk_87f2609)
	cb.Do("Unk_158eb4f", &t.Unk_158eb4f)
	cb.Do("Unk_ab58cd3", &t.Unk_ab58cd3)
	cb.Do("Unk_91a3966", &t.Unk_91a3966)
	cb.Do("Unk_25312e5", &t.Unk_25312e5)
	cb.Do("Unk_4be4371", &t.Unk_4be4371)
	cb.Do("Unk_3cb2278", &t.Unk_3cb2278)
}

type SwitchBehaviorGizmoData struct {
	ESwitchBehavior DT_ENUM
}

func (t *SwitchBehaviorGizmoData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.ESwitchBehavior, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+4, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *SwitchBehaviorGizmoData) Walk(cb WalkCallback) {
	cb.Do("ESwitchBehavior", &t.ESwitchBehavior)
}

type Type_bf28a9b0 struct {
	THeader     RequiredMessageHeader
	FlStart     DT_FLOAT
	FlDuration  DT_FLOAT
	Unk_e5c87c4 DT_FLOAT
}

func (t *Type_bf28a9b0) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.FlStart, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.FlDuration, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_e5c87c4, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+28, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_bf28a9b0) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("FlStart", &t.FlStart)
	cb.Do("FlDuration", &t.FlDuration)
	cb.Do("Unk_e5c87c4", &t.Unk_e5c87c4)
}

type WorldTierChangeMessage struct {
	THeader    RequiredMessageHeader
	EWorldTier DT_INT
}

func (t *WorldTierChangeMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.EWorldTier, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+20, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *WorldTierChangeMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("EWorldTier", &t.EWorldTier)
}

type Type_bf3bc347 struct {
	SnoCampaignCondition DT_SNO
	Unk_2cfa560          DT_INT
}

func (t *Type_bf3bc347) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoCampaignCondition, r, &Options{
		Flags: 513,
		Group: 51,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.Unk_2cfa560, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_bf3bc347) Walk(cb WalkCallback) {
	cb.Do("SnoCampaignCondition", &t.SnoCampaignCondition)
	cb.Do("Unk_2cfa560", &t.Unk_2cfa560)
}

type Type_bf456a16 struct {
	NIndexOffset DT_INT
	NIndexCount  DT_INT
}

func (t *Type_bf456a16) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.NIndexOffset, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.NIndexCount, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_bf456a16) Walk(cb WalkCallback) {
	cb.Do("NIndexOffset", &t.NIndexOffset)
	cb.Do("NIndexCount", &t.NIndexCount)
}

type Octree struct {
	NMaxNodes       DT_INT
	NMaxLeaves      DT_INT
	NMaxPrimitives  DT_INT
	NNodeCount      DT_INT
	NLeafCount      DT_INT
	NPrimitiveCount DT_INT
	TRootCube       OctreeCube
	PtNodes         DT_VARIABLEARRAY[*OctreeNode]
	PtLeaves        DT_VARIABLEARRAY[*OctreeLeaf]
	PtPrimitives    DT_VARIABLEARRAY[*OctreePrimitive]
}

func (t *Octree) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.NMaxNodes, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.NMaxLeaves, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.NMaxPrimitives, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.NNodeCount, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.NLeafCount, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.NPrimitiveCount, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.TRootCube, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.PtNodes, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.PtLeaves, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.PtPrimitives, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+88, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Octree) Walk(cb WalkCallback) {
	cb.Do("NMaxNodes", &t.NMaxNodes)
	cb.Do("NMaxLeaves", &t.NMaxLeaves)
	cb.Do("NMaxPrimitives", &t.NMaxPrimitives)
	cb.Do("NNodeCount", &t.NNodeCount)
	cb.Do("NLeafCount", &t.NLeafCount)
	cb.Do("NPrimitiveCount", &t.NPrimitiveCount)
	cb.Do("TRootCube", &t.TRootCube)
	cb.Do("PtNodes", &t.PtNodes)
	cb.Do("PtLeaves", &t.PtLeaves)
	cb.Do("PtPrimitives", &t.PtPrimitives)
}

type AttributeSpecifier struct {
	EAttribute         DT_ENUM
	NParam             DT_INT
	SzAttributeFormula DT_STRING_FORMULA
	GbidFormula        DT_GBID
	Unk_dffdf28        DT_STRING_FORMULA
}

func (t *AttributeSpecifier) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.EAttribute, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.NParam, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.SzAttributeFormula, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.GbidFormula, r, &Options{
		Flags: 1,
		Group: 22,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.Unk_dffdf28, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+80, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *AttributeSpecifier) Walk(cb WalkCallback) {
	cb.Do("EAttribute", &t.EAttribute)
	cb.Do("NParam", &t.NParam)
	cb.Do("SzAttributeFormula", &t.SzAttributeFormula)
	cb.Do("GbidFormula", &t.GbidFormula)
	cb.Do("Unk_dffdf28", &t.Unk_dffdf28)
}

type PlayEffectMessage struct {
	THeader            RequiredMessageHeader
	Ann                DT_ACD_NETWORK_NAME
	EEffectType        DT_ENUM
	NEffectParameter   DT_OPTIONAL[*DT_INT]
	OnHitSounds        DT_OPTIONAL[*OnHitSounds]
	AnnPlayer          DT_OPTIONAL[*DT_ACD_NETWORK_NAME]
	AnnAttacker        DT_OPTIONAL[*DT_ACD_NETWORK_NAME]
	FlSpeedScale       DT_OPTIONAL[*DT_FLOAT]
	DwEffectFlags      DT_OPTIONAL[*DT_UINT]
	SnoPowerSource     DT_OPTIONAL[*DT_SNO]
	THardpointOverride DT_OPTIONAL[*HardpointInfo]
}

func (t *PlayEffectMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Ann, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.EEffectType, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.NEffectParameter, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.OnHitSounds, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.AnnPlayer, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.AnnAttacker, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.FlSpeedScale, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.DwEffectFlags, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.SnoPowerSource, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+100, &t.THardpointOverride, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+112, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PlayEffectMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("Ann", &t.Ann)
	cb.Do("EEffectType", &t.EEffectType)
	cb.Do("NEffectParameter", &t.NEffectParameter)
	cb.Do("OnHitSounds", &t.OnHitSounds)
	cb.Do("AnnPlayer", &t.AnnPlayer)
	cb.Do("AnnAttacker", &t.AnnAttacker)
	cb.Do("FlSpeedScale", &t.FlSpeedScale)
	cb.Do("DwEffectFlags", &t.DwEffectFlags)
	cb.Do("SnoPowerSource", &t.SnoPowerSource)
	cb.Do("THardpointOverride", &t.THardpointOverride)
}

type ConversationLineNode struct {
	// Inherits ConversationTreeNode
	// Inherits PolymorphicBase
	DwType                DT_UINT
	DwPad                 DT_UINT
	DwNodeID              DT_UINT
	DwNextNodeID          DT_UINT
	DwParentNodeID        DT_UINT
	PtNextNode            DT_INT64
	DwFlags               DT_UINT
	SzComment             DT_CSTRING[*DT_BYTE]
	SnoSpeaker            DT_SNO
	EGender               DT_ENUM
	EPlayerClass          DT_ENUM
	TDisplayTimes         DT_FIXEDARRAY[*ConvLocaleDisplayTimes]
	SnoSoundOverride      DT_SNO
	FlSoundEffectDuration DT_FLOAT
	Unk_357a6f3           DT_INT
}

func (t *ConversationLineNode) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.DwNodeID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwNextNodeID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.DwParentNodeID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.PtNextNode, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.DwFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.SzComment, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.SnoSpeaker, r, &Options{
		Flags: 1,
		Group: 72,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.EGender, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.EPlayerClass, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.TDisplayTimes, r, &Options{
		ArrayLength: 19,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+836, &t.SnoSoundOverride, r, &Options{
		Flags: 1,
		Group: 40,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+840, &t.FlSoundEffectDuration, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+844, &t.Unk_357a6f3, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+848, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ConversationLineNode) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("DwNodeID", &t.DwNodeID)
	cb.Do("DwNextNodeID", &t.DwNextNodeID)
	cb.Do("DwParentNodeID", &t.DwParentNodeID)
	cb.Do("PtNextNode", &t.PtNextNode)
	cb.Do("DwFlags", &t.DwFlags)
	cb.Do("SzComment", &t.SzComment)
	cb.Do("SnoSpeaker", &t.SnoSpeaker)
	cb.Do("EGender", &t.EGender)
	cb.Do("EPlayerClass", &t.EPlayerClass)
	cb.Do("TDisplayTimes", &t.TDisplayTimes)
	cb.Do("SnoSoundOverride", &t.SnoSoundOverride)
	cb.Do("FlSoundEffectDuration", &t.FlSoundEffectDuration)
	cb.Do("Unk_357a6f3", &t.Unk_357a6f3)
}

type CraftingMatCategory_Table struct {
	// Inherits GameBalanceTable
	// Inherits PolymorphicBase
	DwType   DT_UINT
	DwPad    DT_UINT
	TEntries DT_VARIABLEARRAY[*CraftingMatCategory]
}

func (t *CraftingMatCategory_Table) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TEntries, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *CraftingMatCategory_Table) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("TEntries", &t.TEntries)
}

type PublicGameSubcondition struct {
	// Inherits Subcondition
	// Inherits PolymorphicBase
	DwType  DT_UINT
	BNegate DT_INT
	DwPad   DT_UINT
}

func (t *PublicGameSubcondition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BNegate, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PublicGameSubcondition) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("BNegate", &t.BNegate)
	cb.Do("DwPad", &t.DwPad)
}

type PlayerVariableStringSubcondition struct {
	// Inherits Subcondition
	// Inherits PolymorphicBase
	DwType               DT_UINT
	BNegate              DT_INT
	DwPad                DT_UINT
	GbidDesignerVariable DT_GBID
	SzValue              DT_UINT
}

func (t *PlayerVariableStringSubcondition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BNegate, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.GbidDesignerVariable, r, &Options{
		Flags: 1,
		Group: 45,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.SzValue, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PlayerVariableStringSubcondition) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("BNegate", &t.BNegate)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("GbidDesignerVariable", &t.GbidDesignerVariable)
	cb.Do("SzValue", &t.SzValue)
}

type SpeedTreeBranchWindLevel struct {
	AfDistance           DT_FIXEDARRAY[*DT_FLOAT]
	AfDirectionAdherence DT_FIXEDARRAY[*DT_FLOAT]
	AfWhip               DT_FIXEDARRAY[*DT_FLOAT]
	FTurbulence          DT_FLOAT
	FTwitch              DT_FLOAT
	FTwitchFreqScale     DT_FLOAT
}

func (t *SpeedTreeBranchWindLevel) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.AfDistance, r, &Options{
		ArrayLength: 10,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.AfDirectionAdherence, r, &Options{
		ArrayLength: 10,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.AfWhip, r, &Options{
		ArrayLength: 10,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.FTurbulence, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+124, &t.FTwitch, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.FTwitchFreqScale, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+132, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *SpeedTreeBranchWindLevel) Walk(cb WalkCallback) {
	cb.Do("AfDistance", &t.AfDistance)
	cb.Do("AfDirectionAdherence", &t.AfDirectionAdherence)
	cb.Do("AfWhip", &t.AfWhip)
	cb.Do("FTurbulence", &t.FTurbulence)
	cb.Do("FTwitch", &t.FTwitch)
	cb.Do("FTwitchFreqScale", &t.FTwitchFreqScale)
}

type Type_c06f4ebf struct {
	SzTreeScrollbar DT_CSTRING[*DT_BYTE]
}

func (t *Type_c06f4ebf) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SzTreeScrollbar, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_c06f4ebf) Walk(cb WalkCallback) {
	cb.Do("SzTreeScrollbar", &t.SzTreeScrollbar)
}

type ActorNPCData struct {
	Unk_370e8c2        DT_INT
	Unk_d1de32b        DT_VARIABLEARRAY[*NPCComponentGroup]
	SnoNPCComponentSet DT_SNO
	Unk_a9187cf        DT_VARIABLEARRAY[*NPCItems]
	Unk_4c7112f        DT_INT
	Unk_1c56441        DT_ENUM
}

func (t *ActorNPCData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Unk_370e8c2, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.Unk_d1de32b, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SnoNPCComponentSet, r, &Options{
		Flags: 1,
		Group: 2,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.Unk_a9187cf, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.Unk_4c7112f, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.Unk_1c56441, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+56, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ActorNPCData) Walk(cb WalkCallback) {
	cb.Do("Unk_370e8c2", &t.Unk_370e8c2)
	cb.Do("Unk_d1de32b", &t.Unk_d1de32b)
	cb.Do("SnoNPCComponentSet", &t.SnoNPCComponentSet)
	cb.Do("Unk_a9187cf", &t.Unk_a9187cf)
	cb.Do("Unk_4c7112f", &t.Unk_4c7112f)
	cb.Do("Unk_1c56441", &t.Unk_1c56441)
}

type QuestTagsEntry_Table struct {
	// Inherits GameBalanceTable
	// Inherits PolymorphicBase
	DwType   DT_UINT
	DwPad    DT_UINT
	TEntries DT_VARIABLEARRAY[*QuestTagsEntry]
}

func (t *QuestTagsEntry_Table) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TEntries, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *QuestTagsEntry_Table) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("TEntries", &t.TEntries)
}

type PlayErrorSoundMessage struct {
	THeader       RequiredMessageHeader
	EWarningSound DT_ENUM
}

func (t *PlayErrorSoundMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.EWarningSound, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+20, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PlayErrorSoundMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("EWarningSound", &t.EWarningSound)
}

type JoinLANGameMessage struct {
	THeader       RequiredMessageHeader
	IdSGame       DT_INT
	IdGameAccount DT_UINT
	SzAccountName DT_CHARARRAY
	EXLocale      DT_ENUM
	FlAspectRatio DT_FLOAT
}

func (t *JoinLANGameMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.IdSGame, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.IdGameAccount, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SzAccountName, r, &Options{
		ArrayLength: 128,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+152, &t.EXLocale, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+156, &t.FlAspectRatio, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+160, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *JoinLANGameMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("IdSGame", &t.IdSGame)
	cb.Do("IdGameAccount", &t.IdGameAccount)
	cb.Do("SzAccountName", &t.SzAccountName)
	cb.Do("EXLocale", &t.EXLocale)
	cb.Do("FlAspectRatio", &t.FlAspectRatio)
}

type Type_c0fa945c struct {
	THeader RequiredMessageHeader
	Ann     DT_ACD_NETWORK_NAME
}

func (t *Type_c0fa945c) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Ann, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_c0fa945c) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("Ann", &t.Ann)
}

type Type_c1762b19 struct {
	Unk_941b8c4        DT_INT
	Unk_9f5a7e6        DT_INT
	Unk_60998e0        DT_INT
	Unk_92fec32        DT_INT
	TMargins           UIMargins
	NHorizontalSpacing DT_INT
	NVerticalSpacing   DT_INT
}

func (t *Type_c1762b19) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Unk_941b8c4, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.Unk_9f5a7e6, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.Unk_60998e0, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.Unk_92fec32, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TMargins, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.NHorizontalSpacing, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.NVerticalSpacing, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+40, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_c1762b19) Walk(cb WalkCallback) {
	cb.Do("Unk_941b8c4", &t.Unk_941b8c4)
	cb.Do("Unk_9f5a7e6", &t.Unk_9f5a7e6)
	cb.Do("Unk_60998e0", &t.Unk_60998e0)
	cb.Do("Unk_92fec32", &t.Unk_92fec32)
	cb.Do("TMargins", &t.TMargins)
	cb.Do("NHorizontalSpacing", &t.NHorizontalSpacing)
	cb.Do("NVerticalSpacing", &t.NVerticalSpacing)
}

type Type_c1c86aca struct {
	// Inherits TriggerEvent
	// Inherits PolymorphicBase
	DwType          DT_UINT
	DwPad           DT_UINT
	TConditions     TriggerConditions
	FGenerated      DT_INT
	Unk_6cba752     DT_INT
	DwParentActorID DT_UINT
	BHide           DT_INT
}

func (t *Type_c1c86aca) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.FGenerated, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_6cba752, r, &Options{Flags: 16}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.DwParentActorID, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.BHide, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+88, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_c1c86aca) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("TConditions", &t.TConditions)
	cb.Do("FGenerated", &t.FGenerated)
	cb.Do("Unk_6cba752", &t.Unk_6cba752)
	cb.Do("DwParentActorID", &t.DwParentActorID)
	cb.Do("BHide", &t.BHide)
}

type NpcArchetypeTemplate struct {
	SzName             DT_CSTRING[*DT_BYTE]
	SzToolTip          DT_CSTRING[*DT_BYTE]
	SnoTemplateActor   DT_SNO
	SnoMountedAnimTree DT_SNO
	Unk_c249c5f        DT_VARIABLEARRAY[*DT_GBID]
	Unk_83f3d3e        DT_INT
	Unk_58f8666        DT_INT
	FHideIdles         DT_INT
	Unk_c62b399        DT_INT
	Unk_fd60c8f        DT_INT
	Unk_8711100        DT_INT
	Unk_d289db4        DT_INT
	Unk_d8df50f        DT_INT
	Unk_d6da84         DT_INT
}

func (t *NpcArchetypeTemplate) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SzName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SzToolTip, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.SnoTemplateActor, r, &Options{
		Flags: 1,
		Group: 1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.SnoMountedAnimTree, r, &Options{
		Flags: 1,
		Group: 67,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.Unk_c249c5f, r, &Options{
		Flags: 1,
		Group: 53,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.Unk_83f3d3e, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+60, &t.Unk_58f8666, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.FHideIdles, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.Unk_c62b399, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_fd60c8f, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.Unk_8711100, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.Unk_d289db4, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.Unk_d8df50f, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.Unk_d6da84, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+96, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *NpcArchetypeTemplate) Walk(cb WalkCallback) {
	cb.Do("SzName", &t.SzName)
	cb.Do("SzToolTip", &t.SzToolTip)
	cb.Do("SnoTemplateActor", &t.SnoTemplateActor)
	cb.Do("SnoMountedAnimTree", &t.SnoMountedAnimTree)
	cb.Do("Unk_c249c5f", &t.Unk_c249c5f)
	cb.Do("Unk_83f3d3e", &t.Unk_83f3d3e)
	cb.Do("Unk_58f8666", &t.Unk_58f8666)
	cb.Do("FHideIdles", &t.FHideIdles)
	cb.Do("Unk_c62b399", &t.Unk_c62b399)
	cb.Do("Unk_fd60c8f", &t.Unk_fd60c8f)
	cb.Do("Unk_8711100", &t.Unk_8711100)
	cb.Do("Unk_d289db4", &t.Unk_d289db4)
	cb.Do("Unk_d8df50f", &t.Unk_d8df50f)
	cb.Do("Unk_d6da84", &t.Unk_d6da84)
}

type ItemPreloadHelper struct {
	SnoItem DT_SNO
}

func (t *ItemPreloadHelper) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoItem, r, &Options{
		Flags: 1,
		Group: 73,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+4, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ItemPreloadHelper) Walk(cb WalkCallback) {
	cb.Do("SnoItem", &t.SnoItem)
}

type ConversationTreeNode struct {
	// Inherits PolymorphicBase
	DwType         DT_UINT
	DwPad          DT_UINT
	DwNodeID       DT_UINT
	DwNextNodeID   DT_UINT
	DwParentNodeID DT_UINT
	PtNextNode     DT_INT64
	DwFlags        DT_UINT
	SzComment      DT_CSTRING[*DT_BYTE]
}

func (t *ConversationTreeNode) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.DwNodeID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwNextNodeID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.DwParentNodeID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.PtNextNode, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.DwFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.SzComment, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+64, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ConversationTreeNode) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("DwNodeID", &t.DwNodeID)
	cb.Do("DwNextNodeID", &t.DwNextNodeID)
	cb.Do("DwParentNodeID", &t.DwParentNodeID)
	cb.Do("PtNextNode", &t.PtNextNode)
	cb.Do("DwFlags", &t.DwFlags)
	cb.Do("SzComment", &t.SzComment)
}

type dmMeshDataMirror struct {
	ANodes         DT_INT64
	AVertices      DT_INT64
	ATriangles     DT_INT64
	NNodeCount     DT_INT
	NVertexCount   DT_INT
	NTriangleCount DT_INT
	Height         DT_INT
	SurfaceArea    DT_FLOAT
	Padding        DT_INT
}

func (t *dmMeshDataMirror) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.ANodes, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.AVertices, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.ATriangles, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.NNodeCount, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.NVertexCount, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.NTriangleCount, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.Height, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.SurfaceArea, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.Padding, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *dmMeshDataMirror) Walk(cb WalkCallback) {
	cb.Do("ANodes", &t.ANodes)
	cb.Do("AVertices", &t.AVertices)
	cb.Do("ATriangles", &t.ATriangles)
	cb.Do("NNodeCount", &t.NNodeCount)
	cb.Do("NVertexCount", &t.NVertexCount)
	cb.Do("NTriangleCount", &t.NTriangleCount)
	cb.Do("Height", &t.Height)
	cb.Do("SurfaceArea", &t.SurfaceArea)
	cb.Do("Padding", &t.Padding)
}

type SpawnGenerator struct{}

func (t *SpawnGenerator) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if _, err := r.Seek(p+1, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *SpawnGenerator) Walk(cb WalkCallback) {}

type Type_c2750a61 struct {
	// Inherits Subcondition
	// Inherits PolymorphicBase
	DwType       DT_UINT
	BNegate      DT_INT
	DwPad        DT_UINT
	FPlayerClass DT_FIXEDARRAY[*DT_INT]
}

func (t *Type_c2750a61) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BNegate, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.FPlayerClass, r, &Options{
		ArrayLength: 5,
		Flags:       1,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_c2750a61) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("BNegate", &t.BNegate)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("FPlayerClass", &t.FPlayerClass)
}

type SkillTag struct {
	THeader             GBIDHeader
	DwTypes             DT_UINT
	EPlayerClass        DT_ENUM
	EDamageTypeOverride DT_ENUM
	BIsPrimary          DT_INT
	Unk_483e46          DT_INT
	ArSkillTreeIcons    DT_FIXEDARRAY[*UIImageHandleReference]
	ArCategoryIcons     DT_FIXEDARRAY[*UIImageHandleReference]
}

func (t *SkillTag) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+260, &t.DwTypes, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+264, &t.EPlayerClass, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+268, &t.EDamageTypeOverride, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+272, &t.BIsPrimary, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+276, &t.Unk_483e46, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+280, &t.ArSkillTreeIcons, r, &Options{
		ArrayLength: 5,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+300, &t.ArCategoryIcons, r, &Options{
		ArrayLength: 5,
		Flags:       1,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+320, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *SkillTag) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("DwTypes", &t.DwTypes)
	cb.Do("EPlayerClass", &t.EPlayerClass)
	cb.Do("EDamageTypeOverride", &t.EDamageTypeOverride)
	cb.Do("BIsPrimary", &t.BIsPrimary)
	cb.Do("Unk_483e46", &t.Unk_483e46)
	cb.Do("ArSkillTreeIcons", &t.ArSkillTreeIcons)
	cb.Do("ArCategoryIcons", &t.ArCategoryIcons)
}

type Type_c2ce8583 struct {
	Unk_8078288        DT_VECTOR4D
	Unk_80782b8        DT_VECTOR4D
	V                  DT_VECTOR4D
	Vw                 DT_VECTOR4D
	Unk_fe3c31a        dmMtxMirror
	ClientFrame        dmMtxMirror
	DeltaFrame         dmMtxMirror
	BindNormal         DT_VECTOR4D
	SkinNormal         DT_VECTOR4D
	SkinPoint          DT_VECTOR4D
	Unk_8dcbeec        DT_VECTOR4D
	Unk_36fad31        DT_FLOAT
	InvMass            DT_FLOAT
	AttachmentRadius   DT_FLOAT
	ParentIndex        DT_WORD
	AttachmentDistance DT_WORD
	Unk_7f4d141        DT_WORD
	Unk_f67de53        DT_WORD
	Unk_87816fd        DT_FLOAT
	TangentIndex       DT_WORD
	Flags              DT_WORD
	AInfluences        DT_FIXEDARRAY[*DT_WORD]
	Padding            DT_FIXEDARRAY[*DT_WORD]
	Weights            DT_VECTOR4D
}

func (t *Type_c2ce8583) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Unk_8078288, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_80782b8, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.V, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.Vw, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.Unk_fe3c31a, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.ClientFrame, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+192, &t.DeltaFrame, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+256, &t.BindNormal, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+272, &t.SkinNormal, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+288, &t.SkinPoint, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+304, &t.Unk_8dcbeec, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+320, &t.Unk_36fad31, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+324, &t.InvMass, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+328, &t.AttachmentRadius, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+332, &t.ParentIndex, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+334, &t.AttachmentDistance, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+336, &t.Unk_7f4d141, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+338, &t.Unk_f67de53, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+340, &t.Unk_87816fd, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+344, &t.TangentIndex, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+346, &t.Flags, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+348, &t.AInfluences, r, &Options{ArrayLength: 4}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+356, &t.Padding, r, &Options{ArrayLength: 6}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+368, &t.Weights, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+384, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_c2ce8583) Walk(cb WalkCallback) {
	cb.Do("Unk_8078288", &t.Unk_8078288)
	cb.Do("Unk_80782b8", &t.Unk_80782b8)
	cb.Do("V", &t.V)
	cb.Do("Vw", &t.Vw)
	cb.Do("Unk_fe3c31a", &t.Unk_fe3c31a)
	cb.Do("ClientFrame", &t.ClientFrame)
	cb.Do("DeltaFrame", &t.DeltaFrame)
	cb.Do("BindNormal", &t.BindNormal)
	cb.Do("SkinNormal", &t.SkinNormal)
	cb.Do("SkinPoint", &t.SkinPoint)
	cb.Do("Unk_8dcbeec", &t.Unk_8dcbeec)
	cb.Do("Unk_36fad31", &t.Unk_36fad31)
	cb.Do("InvMass", &t.InvMass)
	cb.Do("AttachmentRadius", &t.AttachmentRadius)
	cb.Do("ParentIndex", &t.ParentIndex)
	cb.Do("AttachmentDistance", &t.AttachmentDistance)
	cb.Do("Unk_7f4d141", &t.Unk_7f4d141)
	cb.Do("Unk_f67de53", &t.Unk_f67de53)
	cb.Do("Unk_87816fd", &t.Unk_87816fd)
	cb.Do("TangentIndex", &t.TangentIndex)
	cb.Do("Flags", &t.Flags)
	cb.Do("AInfluences", &t.AInfluences)
	cb.Do("Padding", &t.Padding)
	cb.Do("Weights", &t.Weights)
}

type TriggerEventScreenFade struct {
	// Inherits TriggerEventRangedDuration
	// Inherits TriggerEvent
	// Inherits PolymorphicBase
	DwType           DT_UINT
	TConditions      TriggerConditions
	FGenerated       DT_INT
	Unk_6cba752      DT_INT
	DwParentActorID  DT_UINT
	TDuration        DT_FLOAT
	DwTriggerFlags   DT_UINT
	DwTriggerFlagsEx DT_UINT
	TCleanup         TriggerCleanup
	Unk_49e9257      DT_INT
	Unk_5490979      DT_INT
	DwPad            DT_UINT
	RgbaFadeColor    DT_RGBACOLOR
}

func (t *TriggerEventScreenFade) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.FGenerated, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_6cba752, r, &Options{Flags: 16}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.DwParentActorID, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.TDuration, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.DwTriggerFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.DwTriggerFlagsEx, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.TCleanup, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+116, &t.Unk_49e9257, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.Unk_5490979, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+124, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.RgbaFadeColor, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+136, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TriggerEventScreenFade) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("TConditions", &t.TConditions)
	cb.Do("FGenerated", &t.FGenerated)
	cb.Do("Unk_6cba752", &t.Unk_6cba752)
	cb.Do("DwParentActorID", &t.DwParentActorID)
	cb.Do("TDuration", &t.TDuration)
	cb.Do("DwTriggerFlags", &t.DwTriggerFlags)
	cb.Do("DwTriggerFlagsEx", &t.DwTriggerFlagsEx)
	cb.Do("TCleanup", &t.TCleanup)
	cb.Do("Unk_49e9257", &t.Unk_49e9257)
	cb.Do("Unk_5490979", &t.Unk_5490979)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("RgbaFadeColor", &t.RgbaFadeColor)
}

type ProjectileImpactEffect struct {
	SnoEffect            DT_SNO
	FlEffectDuration     DT_FLOAT
	Unk_a4ec910          DT_INT
	Unk_52ba359          DT_FLOAT
	FlTargetImpactHeight DT_FLOAT
	FlTargetImpactPitch  DT_FLOAT
}

func (t *ProjectileImpactEffect) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.FlEffectDuration, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.Unk_a4ec910, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.Unk_52ba359, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.FlTargetImpactHeight, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.FlTargetImpactPitch, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ProjectileImpactEffect) Walk(cb WalkCallback) {
	cb.Do("SnoEffect", &t.SnoEffect)
	cb.Do("FlEffectDuration", &t.FlEffectDuration)
	cb.Do("Unk_a4ec910", &t.Unk_a4ec910)
	cb.Do("Unk_52ba359", &t.Unk_52ba359)
	cb.Do("FlTargetImpactHeight", &t.FlTargetImpactHeight)
	cb.Do("FlTargetImpactPitch", &t.FlTargetImpactPitch)
}

type FogOfWarImage struct {
	SnoFoW         DT_SNO
	SnoTexture     DT_SNO
	VecWorldOffset DT_VECTOR2D
	VecWorldSize   DT_VECTOR2D
}

func (t *FogOfWarImage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoFoW, r, &Options{
		Flags: 513,
		Group: 123,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.SnoTexture, r, &Options{
		Flags: 1,
		Group: 44,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.VecWorldOffset, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.VecWorldSize, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *FogOfWarImage) Walk(cb WalkCallback) {
	cb.Do("SnoFoW", &t.SnoFoW)
	cb.Do("SnoTexture", &t.SnoTexture)
	cb.Do("VecWorldOffset", &t.VecWorldOffset)
	cb.Do("VecWorldSize", &t.VecWorldSize)
}

type StoryboardTimePointNode struct {
	// Inherits PolymorphicBase
	DwType DT_UINT
	FlTime DT_FLOAT
	DwPad  DT_UINT
}

func (t *StoryboardTimePointNode) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.FlTime, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *StoryboardTimePointNode) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("FlTime", &t.FlTime)
	cb.Do("DwPad", &t.DwPad)
}

type UILayoutList struct {
	ArEntries DT_VARIABLEARRAY[*UILayoutEntries]
}

func (t *UILayoutList) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.ArEntries, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *UILayoutList) Walk(cb WalkCallback) {
	cb.Do("ArEntries", &t.ArEntries)
}

type LevelAreaTagsEntry_Table struct {
	// Inherits GameBalanceTable
	// Inherits PolymorphicBase
	DwType   DT_UINT
	DwPad    DT_UINT
	TEntries DT_VARIABLEARRAY[*LevelAreaTagsEntry]
}

func (t *LevelAreaTagsEntry_Table) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TEntries, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *LevelAreaTagsEntry_Table) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("TEntries", &t.TEntries)
}

type TriggerEventFade struct {
	// Inherits TriggerEventRangedDuration
	// Inherits TriggerEvent
	// Inherits PolymorphicBase
	DwType           DT_UINT
	TConditions      TriggerConditions
	FGenerated       DT_INT
	Unk_6cba752      DT_INT
	DwParentActorID  DT_UINT
	TDuration        DT_FLOAT
	DwTriggerFlags   DT_UINT
	DwTriggerFlagsEx DT_UINT
	TCleanup         TriggerCleanup
	Unk_49e9257      DT_INT
	Unk_5490979      DT_INT
	DwPad            DT_UINT
	FFadeOwner       DT_INT
	BRollConnection  DT_INT
	DwObjectID       DT_UINT
}

func (t *TriggerEventFade) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.FGenerated, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_6cba752, r, &Options{Flags: 16}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.DwParentActorID, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.TDuration, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.DwTriggerFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.DwTriggerFlagsEx, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.TCleanup, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+116, &t.Unk_49e9257, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.Unk_5490979, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+124, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.FFadeOwner, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+132, &t.BRollConnection, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+136, &t.DwObjectID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+144, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TriggerEventFade) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("TConditions", &t.TConditions)
	cb.Do("FGenerated", &t.FGenerated)
	cb.Do("Unk_6cba752", &t.Unk_6cba752)
	cb.Do("DwParentActorID", &t.DwParentActorID)
	cb.Do("TDuration", &t.TDuration)
	cb.Do("DwTriggerFlags", &t.DwTriggerFlags)
	cb.Do("DwTriggerFlagsEx", &t.DwTriggerFlagsEx)
	cb.Do("TCleanup", &t.TCleanup)
	cb.Do("Unk_49e9257", &t.Unk_49e9257)
	cb.Do("Unk_5490979", &t.Unk_5490979)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("FFadeOwner", &t.FFadeOwner)
	cb.Do("BRollConnection", &t.BRollConnection)
	cb.Do("DwObjectID", &t.DwObjectID)
}

type TriggerEventNull struct {
	// Inherits TriggerEvent
	// Inherits PolymorphicBase
	DwType          DT_UINT
	DwPad           DT_UINT
	TConditions     TriggerConditions
	FGenerated      DT_INT
	Unk_6cba752     DT_INT
	DwParentActorID DT_UINT
}

func (t *TriggerEventNull) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.FGenerated, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_6cba752, r, &Options{Flags: 16}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.DwParentActorID, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+80, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TriggerEventNull) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("TConditions", &t.TConditions)
	cb.Do("FGenerated", &t.FGenerated)
	cb.Do("Unk_6cba752", &t.Unk_6cba752)
	cb.Do("DwParentActorID", &t.DwParentActorID)
}

type DotApplicationVisualsMessage struct {
	THeader                    RequiredMessageHeader
	SnoPower                   DT_SNO
	DwPayloadDataID            DT_UINT
	EDamageType                DT_ENUM
	AnnTarget                  DT_ACD_NETWORK_NAME
	AnnAttacker                DT_ACD_NETWORK_NAME
	Unk_1c7ccc9                DT_FLOAT
	BTargetAlive               DT_INT
	VLocalImpactPos            DT_OPTIONAL[*DT_VECTOR3D]
	VProjectileImpactDirection DT_OPTIONAL[*DT_VECTOR3D]
	FlImpactDirection          DT_OPTIONAL[*DT_FLOAT]
	FlImpactPitch              DT_OPTIONAL[*DT_FLOAT]
}

func (t *DotApplicationVisualsMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoPower, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPayloadDataID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.EDamageType, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.AnnTarget, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.AnnAttacker, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.Unk_1c7ccc9, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.BTargetAlive, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.VLocalImpactPos, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.VProjectileImpactDirection, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.FlImpactDirection, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.FlImpactPitch, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+100, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *DotApplicationVisualsMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("SnoPower", &t.SnoPower)
	cb.Do("DwPayloadDataID", &t.DwPayloadDataID)
	cb.Do("EDamageType", &t.EDamageType)
	cb.Do("AnnTarget", &t.AnnTarget)
	cb.Do("AnnAttacker", &t.AnnAttacker)
	cb.Do("Unk_1c7ccc9", &t.Unk_1c7ccc9)
	cb.Do("BTargetAlive", &t.BTargetAlive)
	cb.Do("VLocalImpactPos", &t.VLocalImpactPos)
	cb.Do("VProjectileImpactDirection", &t.VProjectileImpactDirection)
	cb.Do("FlImpactDirection", &t.FlImpactDirection)
	cb.Do("FlImpactPitch", &t.FlImpactPitch)
}

type BuffExclusiveType struct {
	THeader GBIDHeader
}

func (t *BuffExclusiveType) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+260, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *BuffExclusiveType) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
}

type TryChatMessage struct {
	THeader   RequiredMessageHeader
	UsMessage DT_CHARARRAY
}

func (t *TryChatMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.UsMessage, r, &Options{
		ArrayLength: 1024,
		Flags:       1,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+1040, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TryChatMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("UsMessage", &t.UsMessage)
}

type SubzoneDefinition struct {
	SnoPrimaryWorld      DT_SNO
	UEntranceGUID        DT_STARTLOC_NAME
	ArLevelAreas         DT_VARIABLEARRAY[*DT_SNO]
	EType                DT_ENUM
	EParentZone          DT_ENUM
	SnoTerritory         DT_SNO
	EPvPType             DT_ENUM
	Unk_f34c43f          DT_SNO
	SnoActorGroups       DT_SNO
	PtPostprocessed      DT_INT64
	ArWorldMarkerSets    DT_VARIABLEARRAY[*SubzoneWorldMarkerSetEntry]
	ArSnoSecondaryWorlds DT_VARIABLEARRAY[*DT_SNO]
	DwFlags              DT_UINT
	Unk_35fc338          DT_INT
	Unk_6f7f585          DT_FIXEDARRAY[*LevelScalingData]
	Unk_496a122          LevelScalingData
	Unk_50233c8          DT_INT
	ArForcedPrefetchData DT_VARIABLEARRAY[*ForcedPrefetchData]
}

func (t *SubzoneDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.SnoPrimaryWorld, r, &Options{
		Flags: 513,
		Group: 48,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.UEntranceGUID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.ArLevelAreas, r, &Options{
		Flags: 1,
		Group: 22,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.EType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.EParentZone, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.SnoTerritory, r, &Options{
		Flags: 1,
		Group: 92,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.EPvPType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.Unk_f34c43f, r, &Options{
		Flags: 1,
		Group: 48,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.SnoActorGroups, r, &Options{
		Flags: 513,
		Group: 20,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.PtPostprocessed, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.ArWorldMarkerSets, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.ArSnoSecondaryWorlds, r, &Options{
		Flags: 1,
		Group: 48,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.DwFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+100, &t.Unk_35fc338, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+104, &t.Unk_6f7f585, r, &Options{
		ArrayLength: 4,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+168, &t.Unk_496a122, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+184, &t.Unk_50233c8, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+192, &t.ArForcedPrefetchData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+208, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *SubzoneDefinition) Walk(cb WalkCallback) {
	cb.Do("SnoPrimaryWorld", &t.SnoPrimaryWorld)
	cb.Do("UEntranceGUID", &t.UEntranceGUID)
	cb.Do("ArLevelAreas", &t.ArLevelAreas)
	cb.Do("EType", &t.EType)
	cb.Do("EParentZone", &t.EParentZone)
	cb.Do("SnoTerritory", &t.SnoTerritory)
	cb.Do("EPvPType", &t.EPvPType)
	cb.Do("Unk_f34c43f", &t.Unk_f34c43f)
	cb.Do("SnoActorGroups", &t.SnoActorGroups)
	cb.Do("PtPostprocessed", &t.PtPostprocessed)
	cb.Do("ArWorldMarkerSets", &t.ArWorldMarkerSets)
	cb.Do("ArSnoSecondaryWorlds", &t.ArSnoSecondaryWorlds)
	cb.Do("DwFlags", &t.DwFlags)
	cb.Do("Unk_35fc338", &t.Unk_35fc338)
	cb.Do("Unk_6f7f585", &t.Unk_6f7f585)
	cb.Do("Unk_496a122", &t.Unk_496a122)
	cb.Do("Unk_50233c8", &t.Unk_50233c8)
	cb.Do("ArForcedPrefetchData", &t.ArForcedPrefetchData)
}

type CapsuleProximityData struct {
	// Inherits ProximityDataBase
	// Inherits PolymorphicBase
	DwType   DT_UINT
	DwPad    DT_UINT
	FlRadius DT_FLOAT
	FlHeight DT_FLOAT
}

func (t *CapsuleProximityData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.FlRadius, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.FlHeight, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *CapsuleProximityData) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("FlRadius", &t.FlRadius)
	cb.Do("FlHeight", &t.FlHeight)
}

type Type_c48e04b1 struct{}

func (t *Type_c48e04b1) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if _, err := r.Seek(p+1, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_c48e04b1) Walk(cb WalkCallback) {}

type ConversationRandomSelectionNode struct {
	// Inherits ConversationScopeNode
	// Inherits ConversationTreeNode
	// Inherits PolymorphicBase
	DwType         DT_UINT
	DwPad          DT_UINT
	DwNodeID       DT_UINT
	DwNextNodeID   DT_UINT
	DwParentNodeID DT_UINT
	PtNextNode     DT_INT64
	DwFlags        DT_UINT
	SzComment      DT_CSTRING[*DT_BYTE]
	ArChildNodes   DT_POLYMORPHIC_VARIABLEARRAY[*DT_INT64]
	SnoCondition   DT_SNO
	Unk_d8bf9e4    DT_INT
	DwWeight       DT_UINT
}

func (t *ConversationRandomSelectionNode) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.DwNodeID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwNextNodeID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.DwParentNodeID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.PtNextNode, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.DwFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.SzComment, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.ArChildNodes, r, &Options{Flags: 262145}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.SnoCondition, r, &Options{
		Flags: 1,
		Group: 51,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.Unk_d8bf9e4, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.DwWeight, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+104, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ConversationRandomSelectionNode) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("DwNodeID", &t.DwNodeID)
	cb.Do("DwNextNodeID", &t.DwNextNodeID)
	cb.Do("DwParentNodeID", &t.DwParentNodeID)
	cb.Do("PtNextNode", &t.PtNextNode)
	cb.Do("DwFlags", &t.DwFlags)
	cb.Do("SzComment", &t.SzComment)
	cb.Do("ArChildNodes", &t.ArChildNodes)
	cb.Do("SnoCondition", &t.SnoCondition)
	cb.Do("Unk_d8bf9e4", &t.Unk_d8bf9e4)
	cb.Do("DwWeight", &t.DwWeight)
}

type SubObjectNameInfo struct {
	EType                  DT_ENUM
	DwFlags                DT_UINT
	DwPersona              DT_BYTE
	DwState                DT_BYTE
	DwStyle                DT_UINT
	DwSlotHash             DT_UINT
	DwNPCComponentNameHash DT_UINT
	DwDetailHash           DT_UINT
	Unk_c15f7d2            DT_UINT
	Unk_92fdd14            DT_UINT
	Unk_b0b7d46            DT_UINT
}

func (t *SubObjectNameInfo) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.EType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.DwFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwPersona, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+9, &t.DwState, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwStyle, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.DwSlotHash, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwNPCComponentNameHash, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.DwDetailHash, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.Unk_c15f7d2, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.Unk_92fdd14, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.Unk_b0b7d46, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+40, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *SubObjectNameInfo) Walk(cb WalkCallback) {
	cb.Do("EType", &t.EType)
	cb.Do("DwFlags", &t.DwFlags)
	cb.Do("DwPersona", &t.DwPersona)
	cb.Do("DwState", &t.DwState)
	cb.Do("DwStyle", &t.DwStyle)
	cb.Do("DwSlotHash", &t.DwSlotHash)
	cb.Do("DwNPCComponentNameHash", &t.DwNPCComponentNameHash)
	cb.Do("DwDetailHash", &t.DwDetailHash)
	cb.Do("Unk_c15f7d2", &t.Unk_c15f7d2)
	cb.Do("Unk_92fdd14", &t.Unk_92fdd14)
	cb.Do("Unk_b0b7d46", &t.Unk_b0b7d46)
}

type GameTestingExecuteClientCheatMessage struct {
	THeader     RequiredMessageHeader
	SzCheat     DT_CHARARRAY
	Unk_d57d005 DT_INT
}

func (t *GameTestingExecuteClientCheatMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SzCheat, r, &Options{
		ArrayLength: 64,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.Unk_d57d005, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+84, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *GameTestingExecuteClientCheatMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("SzCheat", &t.SzCheat)
	cb.Do("Unk_d57d005", &t.Unk_d57d005)
}

type PowerPetSpawn struct {
	TName    DT_UINT
	GbidType DT_GBID
	TMax     DT_STRING_FORMULA
	THealth  HitpointSpecifier
}

func (t *PowerPetSpawn) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.TName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.GbidType, r, &Options{
		Flags: 1,
		Group: 23,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.TMax, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.THealth, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+112, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PowerPetSpawn) Walk(cb WalkCallback) {
	cb.Do("TName", &t.TName)
	cb.Do("GbidType", &t.GbidType)
	cb.Do("TMax", &t.TMax)
	cb.Do("THealth", &t.THealth)
}

type IntensityParam struct {
	EType       DT_ENUM
	Unk_465327d Type_cbfdd2ea
	ArSubParams DT_VARIABLEARRAY[*IntensitySubParam]
}

func (t *IntensityParam) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.EType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.Unk_465327d, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.ArSubParams, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+80, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *IntensityParam) Walk(cb WalkCallback) {
	cb.Do("EType", &t.EType)
	cb.Do("Unk_465327d", &t.Unk_465327d)
	cb.Do("ArSubParams", &t.ArSubParams)
}

type Type_c5064aa7 struct {
	BIsDefault  DT_INT
	Unk_b29fdf6 DT_ENUM
}

func (t *Type_c5064aa7) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.BIsDefault, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.Unk_b29fdf6, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_c5064aa7) Walk(cb WalkCallback) {
	cb.Do("BIsDefault", &t.BIsDefault)
	cb.Do("Unk_b29fdf6", &t.Unk_b29fdf6)
}

type AIStateDebugSetConditionStateMessage struct {
	THeader             RequiredMessageHeader
	AnnActor            DT_ACD_NETWORK_NAME
	DwCooldownKey       DT_INT64
	NIndex              DT_INT
	BInterruptCondition DT_INT
	BEnabled            DT_INT
}

func (t *AIStateDebugSetConditionStateMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.AnnActor, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.DwCooldownKey, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.NIndex, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.BInterruptCondition, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.BEnabled, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *AIStateDebugSetConditionStateMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("AnnActor", &t.AnnActor)
	cb.Do("DwCooldownKey", &t.DwCooldownKey)
	cb.Do("NIndex", &t.NIndex)
	cb.Do("BInterruptCondition", &t.BInterruptCondition)
	cb.Do("BEnabled", &t.BEnabled)
}

type ActivityLinks struct {
	ArSnoLinkedTask DT_VARIABLEARRAY[*DT_SNO]
}

func (t *ActivityLinks) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.ArSnoLinkedTask, r, &Options{
		Flags: 1,
		Group: 136,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ActivityLinks) Walk(cb WalkCallback) {
	cb.Do("ArSnoLinkedTask", &t.ArSnoLinkedTask)
}

type MarkerPortalGizmoData struct {
	EWorldToChoose         DT_ENUM
	SnoSpecifiedWorld      DT_SNO
	DwEntranceNameToFind   DT_STARTLOC_NAME
	SnoPortalDestLevelArea DT_SNO
	DwPortalType           DT_UINT
	Unk_af5815a            DT_INT
	Unk_1f57cf2            DT_INT
	Unk_9799a99            DT_INT
}

func (t *MarkerPortalGizmoData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.EWorldToChoose, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.SnoSpecifiedWorld, r, &Options{
		Flags: 513,
		Group: 48,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwEntranceNameToFind, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.SnoPortalDestLevelArea, r, &Options{
		Flags: 513,
		Group: 22,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.DwPortalType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.Unk_af5815a, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_1f57cf2, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.Unk_9799a99, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *MarkerPortalGizmoData) Walk(cb WalkCallback) {
	cb.Do("EWorldToChoose", &t.EWorldToChoose)
	cb.Do("SnoSpecifiedWorld", &t.SnoSpecifiedWorld)
	cb.Do("DwEntranceNameToFind", &t.DwEntranceNameToFind)
	cb.Do("SnoPortalDestLevelArea", &t.SnoPortalDestLevelArea)
	cb.Do("DwPortalType", &t.DwPortalType)
	cb.Do("Unk_af5815a", &t.Unk_af5815a)
	cb.Do("Unk_1f57cf2", &t.Unk_1f57cf2)
	cb.Do("Unk_9799a99", &t.Unk_9799a99)
}

type ScriptEventParamMarkerHandle struct {
	// Inherits ScriptEventParamBase
	// Inherits PolymorphicBase
	DwType        DT_UINT
	EParamType    DT_ENUM
	DwPad         DT_UINT
	TMarkerHandle MarkerHandle
}

func (t *ScriptEventParamMarkerHandle) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.EParamType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.TMarkerHandle, r, &Options{Flags: 513}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ScriptEventParamMarkerHandle) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("EParamType", &t.EParamType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("TMarkerHandle", &t.TMarkerHandle)
}

type UIEditStyle struct {
	// Inherits UITextStyle
	// Inherits UIWindowStyle
	// Inherits UIControlStyle
	// Inherits PolymorphicBase
	DwType                    DT_UINT
	DwPad                     DT_UINT
	HParentStyle              UIControlHandle
	Unk_441f783               DT_INT64
	M_eHasModifiedPowerTagMap DT_TAGMAP[*DT_ENUM]
	TConsoleInput             UIControlConsoleInput
	Unk_b4f614c               DT_TAGMAP[*DT_ENUM]
	TFont                     UIControlFont
	Unk_4741819               DT_TAGMAP[*DT_ENUM]
	Unk_172e19a               DT_TAGMAP[*DT_ENUM]
}

func (t *UIEditStyle) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.HParentStyle, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_441f783, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.M_eHasModifiedPowerTagMap, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.TConsoleInput, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.Unk_b4f614c, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.TFont, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.Unk_4741819, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.Unk_172e19a, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+128, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *UIEditStyle) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("HParentStyle", &t.HParentStyle)
	cb.Do("Unk_441f783", &t.Unk_441f783)
	cb.Do("M_eHasModifiedPowerTagMap", &t.M_eHasModifiedPowerTagMap)
	cb.Do("TConsoleInput", &t.TConsoleInput)
	cb.Do("Unk_b4f614c", &t.Unk_b4f614c)
	cb.Do("TFont", &t.TFont)
	cb.Do("Unk_4741819", &t.Unk_4741819)
	cb.Do("Unk_172e19a", &t.Unk_172e19a)
}

type MarkerGroupData struct {
	TLocalTransform PRTransform
	VecLocalScale   DT_VECTOR3D
}

func (t *MarkerGroupData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.TLocalTransform, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.VecLocalScale, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+40, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *MarkerGroupData) Walk(cb WalkCallback) {
	cb.Do("TLocalTransform", &t.TLocalTransform)
	cb.Do("VecLocalScale", &t.VecLocalScale)
}

type SeasonSubcondition struct {
	// Inherits Type_d3c3637f
	// Inherits Subcondition
	// Inherits PolymorphicBase
	DwType        DT_UINT
	BNegate       DT_INT
	EComparisonOp DT_ENUM
	DwPad         DT_UINT
	SnoSeason     DT_SNO
}

func (t *SeasonSubcondition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BNegate, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.EComparisonOp, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.SnoSeason, r, &Options{
		Flags: 513,
		Group: 137,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+40, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *SeasonSubcondition) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("BNegate", &t.BNegate)
	cb.Do("EComparisonOp", &t.EComparisonOp)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("SnoSeason", &t.SnoSeason)
}

type TownPortalReturnDest struct {
	SnoWorld         DT_SNO
	SnoLevelArea     DT_SNO
	UExpireTimestamp DT_INT64
}

func (t *TownPortalReturnDest) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoWorld, r, &Options{
		Flags: 1,
		Group: 31,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.SnoLevelArea, r, &Options{
		Flags: 1,
		Group: 22,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.UExpireTimestamp, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TownPortalReturnDest) Walk(cb WalkCallback) {
	cb.Do("SnoWorld", &t.SnoWorld)
	cb.Do("SnoLevelArea", &t.SnoLevelArea)
	cb.Do("UExpireTimestamp", &t.UExpireTimestamp)
}

type PartyVoteReplyMessage struct {
	THeader RequiredMessageHeader
	Vote    DT_INT
}

func (t *PartyVoteReplyMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Vote, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+20, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PartyVoteReplyMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("Vote", &t.Vote)
}

type WindowPiecesBase struct {
	// Inherits PolymorphicBase
	DwType       DT_UINT
	DwPad        DT_UINT
	FlImageScale DT_FLOAT
	NPadding     DT_UINT
}

func (t *WindowPiecesBase) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.FlImageScale, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.NPadding, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *WindowPiecesBase) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("FlImageScale", &t.FlImageScale)
	cb.Do("NPadding", &t.NPadding)
}

type PlayerGenderSubcondition struct {
	// Inherits Subcondition
	// Inherits PolymorphicBase
	DwType  DT_UINT
	BNegate DT_INT
	DwPad   DT_UINT
	EGender DT_ENUM
}

func (t *PlayerGenderSubcondition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BNegate, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.EGender, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PlayerGenderSubcondition) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("BNegate", &t.BNegate)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("EGender", &t.EGender)
}

type PvPBucketLevels struct {
	DwMinLevel    DT_UINT
	DwMaxLevel    DT_UINT
	EWorldTier    DT_ENUM
	DwTargetLevel DT_UINT
}

func (t *PvPBucketLevels) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.DwMinLevel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.DwMaxLevel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.EWorldTier, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwTargetLevel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PvPBucketLevels) Walk(cb WalkCallback) {
	cb.Do("DwMinLevel", &t.DwMinLevel)
	cb.Do("DwMaxLevel", &t.DwMaxLevel)
	cb.Do("EWorldTier", &t.EWorldTier)
	cb.Do("DwTargetLevel", &t.DwTargetLevel)
}

type PowerEffectOverrides struct {
	FlPowerEffectSizeOverride      DT_FLOAT
	FlPowerEffectIntensityOverride DT_FLOAT
	FlPowerEffectDurationOverride  DT_FLOAT
	FlPowerEffectLengthOverride    DT_FLOAT
	FlPowerEffectWidthOverride     DT_FLOAT
	FlPowerEffectHeightOverride    DT_FLOAT
}

func (t *PowerEffectOverrides) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.FlPowerEffectSizeOverride, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.FlPowerEffectIntensityOverride, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.FlPowerEffectDurationOverride, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.FlPowerEffectLengthOverride, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.FlPowerEffectWidthOverride, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.FlPowerEffectHeightOverride, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PowerEffectOverrides) Walk(cb WalkCallback) {
	cb.Do("FlPowerEffectSizeOverride", &t.FlPowerEffectSizeOverride)
	cb.Do("FlPowerEffectIntensityOverride", &t.FlPowerEffectIntensityOverride)
	cb.Do("FlPowerEffectDurationOverride", &t.FlPowerEffectDurationOverride)
	cb.Do("FlPowerEffectLengthOverride", &t.FlPowerEffectLengthOverride)
	cb.Do("FlPowerEffectWidthOverride", &t.FlPowerEffectWidthOverride)
	cb.Do("FlPowerEffectHeightOverride", &t.FlPowerEffectHeightOverride)
}

type PortalInfo struct {
	SnoIntroEffect        DT_SNO
	SnoLoopIntroEffect    DT_SNO
	SnoLoopEffect         DT_SNO
	SnoLoopOutroEffect    DT_SNO
	SnoLoopSkipEffect     DT_SNO
	Unk_b8b4636           DT_FLOAT
	Unk_7bc440d           DT_FLOAT
	Unk_86403ef           DT_INT
	Unk_f0eaae5           DT_INT
	Unk_e0a3943           DT_INT
	Unk_9c071e3           DT_INT
	Unk_4bd94b4           DT_INT
	Unk_69b2ec7           DT_INT
	Unk_449111f           DT_INT
	SnoOutroEffect        DT_SNO
	SnoSkippedOutroEffect DT_SNO
	SnoLoopingWorld       DT_SNO
	SzCameraMarkerName    DT_CHARARRAY
	Unk_bdd12d            DT_INT
	Unk_f8d8170           DT_FLOAT
	Unk_188141b           DT_FLOAT
	Unk_66ebec            DT_FLOAT
	Unk_e660d97           DT_FLOAT
}

func (t *PortalInfo) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoIntroEffect, r, &Options{
		Flags: 513,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.SnoLoopIntroEffect, r, &Options{
		Flags: 513,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.SnoLoopEffect, r, &Options{
		Flags: 513,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.SnoLoopOutroEffect, r, &Options{
		Flags: 513,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoLoopSkipEffect, r, &Options{
		Flags: 513,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.Unk_b8b4636, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_7bc440d, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.Unk_86403ef, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.Unk_f0eaae5, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.Unk_e0a3943, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.Unk_9c071e3, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.Unk_4bd94b4, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.Unk_69b2ec7, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.Unk_449111f, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.SnoOutroEffect, r, &Options{
		Flags: 513,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+60, &t.SnoSkippedOutroEffect, r, &Options{
		Flags: 513,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.SnoLoopingWorld, r, &Options{
		Flags: 513,
		Group: 48,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.SzCameraMarkerName, r, &Options{
		ArrayLength: 128,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+196, &t.Unk_bdd12d, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+200, &t.Unk_f8d8170, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+204, &t.Unk_188141b, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+208, &t.Unk_66ebec, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+212, &t.Unk_e660d97, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+216, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PortalInfo) Walk(cb WalkCallback) {
	cb.Do("SnoIntroEffect", &t.SnoIntroEffect)
	cb.Do("SnoLoopIntroEffect", &t.SnoLoopIntroEffect)
	cb.Do("SnoLoopEffect", &t.SnoLoopEffect)
	cb.Do("SnoLoopOutroEffect", &t.SnoLoopOutroEffect)
	cb.Do("SnoLoopSkipEffect", &t.SnoLoopSkipEffect)
	cb.Do("Unk_b8b4636", &t.Unk_b8b4636)
	cb.Do("Unk_7bc440d", &t.Unk_7bc440d)
	cb.Do("Unk_86403ef", &t.Unk_86403ef)
	cb.Do("Unk_f0eaae5", &t.Unk_f0eaae5)
	cb.Do("Unk_e0a3943", &t.Unk_e0a3943)
	cb.Do("Unk_9c071e3", &t.Unk_9c071e3)
	cb.Do("Unk_4bd94b4", &t.Unk_4bd94b4)
	cb.Do("Unk_69b2ec7", &t.Unk_69b2ec7)
	cb.Do("Unk_449111f", &t.Unk_449111f)
	cb.Do("SnoOutroEffect", &t.SnoOutroEffect)
	cb.Do("SnoSkippedOutroEffect", &t.SnoSkippedOutroEffect)
	cb.Do("SnoLoopingWorld", &t.SnoLoopingWorld)
	cb.Do("SzCameraMarkerName", &t.SzCameraMarkerName)
	cb.Do("Unk_bdd12d", &t.Unk_bdd12d)
	cb.Do("Unk_f8d8170", &t.Unk_f8d8170)
	cb.Do("Unk_188141b", &t.Unk_188141b)
	cb.Do("Unk_66ebec", &t.Unk_66ebec)
	cb.Do("Unk_e660d97", &t.Unk_e660d97)
}

type RequiredMessageHeader struct {
	EType       DT_ENUM
	Unk_2f5806b DT_INT
	DwSize      DT_OPTIONAL[*DT_WORD]
}

func (t *RequiredMessageHeader) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.EType, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.Unk_2f5806b, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwSize, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *RequiredMessageHeader) Walk(cb WalkCallback) {
	cb.Do("EType", &t.EType)
	cb.Do("Unk_2f5806b", &t.Unk_2f5806b)
	cb.Do("DwSize", &t.DwSize)
}

type OnBerserkAppliedCallback struct {
	// Inherits BuffCallbackBase
	// Inherits PolymorphicBase
	DwType                DT_UINT
	DwPad                 DT_UINT
	SnoTriggerEffectGroup DT_SNO
	ArConditions          DT_POLYMORPHIC_VARIABLEARRAY[*DT_INT64]
}

func (t *OnBerserkAppliedCallback) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoTriggerEffectGroup, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ArConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *OnBerserkAppliedCallback) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("SnoTriggerEffectGroup", &t.SnoTriggerEffectGroup)
	cb.Do("ArConditions", &t.ArConditions)
}

type TriggerEventPOISkip struct {
	// Inherits TriggerEventRangedDuration
	// Inherits TriggerEvent
	// Inherits PolymorphicBase
	DwType           DT_UINT
	TConditions      TriggerConditions
	FGenerated       DT_INT
	Unk_6cba752      DT_INT
	DwParentActorID  DT_UINT
	TDuration        DT_FLOAT
	DwTriggerFlags   DT_UINT
	DwTriggerFlagsEx DT_UINT
	TCleanup         TriggerCleanup
	Unk_49e9257      DT_INT
	Unk_5490979      DT_INT
	DwPad            DT_UINT
}

func (t *TriggerEventPOISkip) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.FGenerated, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_6cba752, r, &Options{Flags: 16}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.DwParentActorID, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.TDuration, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.DwTriggerFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.DwTriggerFlagsEx, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.TCleanup, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+116, &t.Unk_49e9257, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.Unk_5490979, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+124, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+128, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TriggerEventPOISkip) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("TConditions", &t.TConditions)
	cb.Do("FGenerated", &t.FGenerated)
	cb.Do("Unk_6cba752", &t.Unk_6cba752)
	cb.Do("DwParentActorID", &t.DwParentActorID)
	cb.Do("TDuration", &t.TDuration)
	cb.Do("DwTriggerFlags", &t.DwTriggerFlags)
	cb.Do("DwTriggerFlagsEx", &t.DwTriggerFlagsEx)
	cb.Do("TCleanup", &t.TCleanup)
	cb.Do("Unk_49e9257", &t.Unk_49e9257)
	cb.Do("Unk_5490979", &t.Unk_5490979)
	cb.Do("DwPad", &t.DwPad)
}

type GlobalMarkerActor struct {
	SnoMarkerSet               DT_SNO
	SzMarkerName               DT_UINT
	DwMarkerPathID             DT_UINT
	SnoActor                   DT_SNO
	EActorType                 DT_ENUM
	EGizmoType                 DT_ENUM
	SnoWorld                   DT_SNO
	TWorldTransform            PRTransform
	SnoCampaignEnableCondition DT_SNO
	SnoLevelArea               DT_SNO
	SnoFogOfWar                DT_SNO
	ArSubzones                 DT_VARIABLEARRAY[*DT_SNO]
	PtData                     DT_POLYMORPHIC_VARIABLEARRAY[*GlobalMarkerActorData]
}

func (t *GlobalMarkerActor) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoMarkerSet, r, &Options{
		Flags: 513,
		Group: 24,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.SzMarkerName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwMarkerPathID, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.SnoActor, r, &Options{
		Flags: 513,
		Group: 1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.EActorType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.EGizmoType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SnoWorld, r, &Options{
		Flags: 513,
		Group: 48,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.TWorldTransform, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.SnoCampaignEnableCondition, r, &Options{
		Flags: 513,
		Group: 51,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+60, &t.SnoLevelArea, r, &Options{
		Flags: 513,
		Group: 22,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.SnoFogOfWar, r, &Options{
		Flags: 513,
		Group: 123,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.ArSubzones, r, &Options{
		Flags: 513,
		Group: 80,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.PtData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+112, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *GlobalMarkerActor) Walk(cb WalkCallback) {
	cb.Do("SnoMarkerSet", &t.SnoMarkerSet)
	cb.Do("SzMarkerName", &t.SzMarkerName)
	cb.Do("DwMarkerPathID", &t.DwMarkerPathID)
	cb.Do("SnoActor", &t.SnoActor)
	cb.Do("EActorType", &t.EActorType)
	cb.Do("EGizmoType", &t.EGizmoType)
	cb.Do("SnoWorld", &t.SnoWorld)
	cb.Do("TWorldTransform", &t.TWorldTransform)
	cb.Do("SnoCampaignEnableCondition", &t.SnoCampaignEnableCondition)
	cb.Do("SnoLevelArea", &t.SnoLevelArea)
	cb.Do("SnoFogOfWar", &t.SnoFogOfWar)
	cb.Do("ArSubzones", &t.ArSubzones)
	cb.Do("PtData", &t.PtData)
}

type Type_c661a6fd struct {
	DwID                  DT_UINT
	Unk_c94355b           DT_VARIABLEARRAY[*DT_SNO]
	SnoCraftLockCondition DT_SNO
}

func (t *Type_c661a6fd) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.DwID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.Unk_c94355b, r, &Options{
		Flags: 1,
		Group: 98,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SnoCraftLockCondition, r, &Options{
		Flags: 1,
		Group: 51,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_c661a6fd) Walk(cb WalkCallback) {
	cb.Do("DwID", &t.DwID)
	cb.Do("Unk_c94355b", &t.Unk_c94355b)
	cb.Do("SnoCraftLockCondition", &t.SnoCraftLockCondition)
}

type ConversationDefinition struct {
	EConvType               DT_ENUM
	Unk_1fd072a             DT_SNO
	Unk_951e771             DT_SNO
	SnoConversationFollowup DT_SNO
	FlCooldownTime          DT_FLOAT
	FlCancelDistance        DT_FLOAT
	BFadeAtStart            DT_INT
	BFadeAtEnd              DT_INT
	Unk_8d6f162             DT_INT
	Unk_ac91f5d             DT_INT
	Unk_e1d8535             DT_INT
	BBookendConversation    DT_INT
	BIsInterruptible        DT_INT
	DwFlags                 DT_UINT
	ArRootNodes             DT_POLYMORPHIC_VARIABLEARRAY[*DT_INT64]
	SzSetPlayerFlag         DT_CHARARRAY
	DwNextNodeID            DT_UINT
}

func (t *ConversationDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.EConvType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.Unk_1fd072a, r, &Options{
		Flags: 1,
		Group: 31,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_951e771, r, &Options{
		Flags: 1,
		Group: 31,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.SnoConversationFollowup, r, &Options{
		Flags: 1,
		Group: 12,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.FlCooldownTime, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.FlCancelDistance, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.BFadeAtStart, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.BFadeAtEnd, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.Unk_8d6f162, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.Unk_ac91f5d, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.Unk_e1d8535, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.BBookendConversation, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.BIsInterruptible, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+60, &t.DwFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.ArRootNodes, r, &Options{Flags: 262145}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.SzSetPlayerFlag, r, &Options{
		ArrayLength: 128,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+216, &t.DwNextNodeID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+224, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ConversationDefinition) Walk(cb WalkCallback) {
	cb.Do("EConvType", &t.EConvType)
	cb.Do("Unk_1fd072a", &t.Unk_1fd072a)
	cb.Do("Unk_951e771", &t.Unk_951e771)
	cb.Do("SnoConversationFollowup", &t.SnoConversationFollowup)
	cb.Do("FlCooldownTime", &t.FlCooldownTime)
	cb.Do("FlCancelDistance", &t.FlCancelDistance)
	cb.Do("BFadeAtStart", &t.BFadeAtStart)
	cb.Do("BFadeAtEnd", &t.BFadeAtEnd)
	cb.Do("Unk_8d6f162", &t.Unk_8d6f162)
	cb.Do("Unk_ac91f5d", &t.Unk_ac91f5d)
	cb.Do("Unk_e1d8535", &t.Unk_e1d8535)
	cb.Do("BBookendConversation", &t.BBookendConversation)
	cb.Do("BIsInterruptible", &t.BIsInterruptible)
	cb.Do("DwFlags", &t.DwFlags)
	cb.Do("ArRootNodes", &t.ArRootNodes)
	cb.Do("SzSetPlayerFlag", &t.SzSetPlayerFlag)
	cb.Do("DwNextNodeID", &t.DwNextNodeID)
}

type UIProgressBarStyle struct {
	// Inherits UIWindowStyle
	// Inherits UIControlStyle
	// Inherits PolymorphicBase
	DwType                    DT_UINT
	DwPad                     DT_UINT
	HParentStyle              UIControlHandle
	Unk_441f783               DT_INT64
	M_eHasModifiedPowerTagMap DT_TAGMAP[*DT_ENUM]
	TConsoleInput             UIControlConsoleInput
	Unk_b4f614c               DT_TAGMAP[*DT_ENUM]
	Unk_10b0379               UIProgressBarBase
	Unk_a229fbe               DT_TAGMAP[*DT_ENUM]
}

func (t *UIProgressBarStyle) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.HParentStyle, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_441f783, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.M_eHasModifiedPowerTagMap, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.TConsoleInput, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.Unk_b4f614c, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.Unk_10b0379, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.Unk_a229fbe, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+112, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *UIProgressBarStyle) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("HParentStyle", &t.HParentStyle)
	cb.Do("Unk_441f783", &t.Unk_441f783)
	cb.Do("M_eHasModifiedPowerTagMap", &t.M_eHasModifiedPowerTagMap)
	cb.Do("TConsoleInput", &t.TConsoleInput)
	cb.Do("Unk_b4f614c", &t.Unk_b4f614c)
	cb.Do("Unk_10b0379", &t.Unk_10b0379)
	cb.Do("Unk_a229fbe", &t.Unk_a229fbe)
}

type PayloadOnHitMessage struct {
	THeader                    RequiredMessageHeader
	SnoPower                   DT_SNO
	DwPayloadDataID            DT_UINT
	EDamageType                DT_ENUM
	AnnTarget                  DT_ACD_NETWORK_NAME
	AnnAttacker                DT_ACD_NETWORK_NAME
	BTargetAlive               DT_INT
	EHitSound                  DT_OPTIONAL[*DT_ENUM]
	Unk_75bd339                DT_OPTIONAL[*DT_ENUM]
	OnHitSounds                DT_OPTIONAL[*OnHitSounds]
	VLocalImpactPos            DT_OPTIONAL[*DT_VECTOR3D]
	VProjectileImpactDirection DT_OPTIONAL[*DT_VECTOR3D]
	FlImpactDirection          DT_OPTIONAL[*DT_FLOAT]
	FlImpactPitch              DT_OPTIONAL[*DT_FLOAT]
	Unk_94ab101                DT_OPTIONAL[*DT_SNO]
	Unk_78c21b7                DT_OPTIONAL[*DT_SNO]
	Unk_81caaab                DT_OPTIONAL[*DT_SNO]
	Unk_b1ba550                DT_OPTIONAL[*DT_SNO]
	Unk_563f3e                 DT_OPTIONAL[*DT_ENUM]
	FlDamageUnscaled           DT_OPTIONAL[*DT_FLOAT]
	DwEffectFlags              DT_OPTIONAL[*DT_UINT]
}

func (t *PayloadOnHitMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoPower, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPayloadDataID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.EDamageType, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.AnnTarget, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.AnnAttacker, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.BTargetAlive, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.EHitSound, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.Unk_75bd339, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.OnHitSounds, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.VLocalImpactPos, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.VProjectileImpactDirection, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.FlImpactDirection, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.FlImpactPitch, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.Unk_94ab101, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+136, &t.Unk_78c21b7, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+144, &t.Unk_81caaab, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+152, &t.Unk_b1ba550, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+160, &t.Unk_563f3e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+168, &t.FlDamageUnscaled, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+176, &t.DwEffectFlags, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+184, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PayloadOnHitMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("SnoPower", &t.SnoPower)
	cb.Do("DwPayloadDataID", &t.DwPayloadDataID)
	cb.Do("EDamageType", &t.EDamageType)
	cb.Do("AnnTarget", &t.AnnTarget)
	cb.Do("AnnAttacker", &t.AnnAttacker)
	cb.Do("BTargetAlive", &t.BTargetAlive)
	cb.Do("EHitSound", &t.EHitSound)
	cb.Do("Unk_75bd339", &t.Unk_75bd339)
	cb.Do("OnHitSounds", &t.OnHitSounds)
	cb.Do("VLocalImpactPos", &t.VLocalImpactPos)
	cb.Do("VProjectileImpactDirection", &t.VProjectileImpactDirection)
	cb.Do("FlImpactDirection", &t.FlImpactDirection)
	cb.Do("FlImpactPitch", &t.FlImpactPitch)
	cb.Do("Unk_94ab101", &t.Unk_94ab101)
	cb.Do("Unk_78c21b7", &t.Unk_78c21b7)
	cb.Do("Unk_81caaab", &t.Unk_81caaab)
	cb.Do("Unk_b1ba550", &t.Unk_b1ba550)
	cb.Do("Unk_563f3e", &t.Unk_563f3e)
	cb.Do("FlDamageUnscaled", &t.FlDamageUnscaled)
	cb.Do("DwEffectFlags", &t.DwEffectFlags)
}

type Type_c69c1754 struct {
	THeader RequiredMessageHeader
	SzText  DT_CHARARRAY
}

func (t *Type_c69c1754) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SzText, r, &Options{
		ArrayLength: 350,
		Flags:       1,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+368, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_c69c1754) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("SzText", &t.SzText)
}

type Rect2D struct {
	Left   DT_FLOAT
	Top    DT_FLOAT
	Right  DT_FLOAT
	Bottom DT_FLOAT
}

func (t *Rect2D) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Left, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.Top, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.Right, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.Bottom, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Rect2D) Walk(cb WalkCallback) {
	cb.Do("Left", &t.Left)
	cb.Do("Top", &t.Top)
	cb.Do("Right", &t.Right)
	cb.Do("Bottom", &t.Bottom)
}

type ScriptedAchievementEvent struct {
	THeader GBIDHeader
}

func (t *ScriptedAchievementEvent) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+260, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ScriptedAchievementEvent) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
}

type NPCServiceData struct {
	EServiceType              DT_ENUM
	EVendorType               DT_ENUM
	ECrafterType              DT_ENUM
	FlPriceMarkup             DT_FLOAT
	ECurrencyType             DT_ENUM
	SnoClassPassiveReputation DT_SNO
	EDruidSpiritType          DT_ENUM
	HSpiritIcon               DT_UINT
	HSpiritBondIcon           DT_UINT
}

func (t *NPCServiceData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.EServiceType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.EVendorType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.ECrafterType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.FlPriceMarkup, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.ECurrencyType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.SnoClassPassiveReputation, r, &Options{
		Flags: 1,
		Group: 105,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.EDruidSpiritType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.HSpiritIcon, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.HSpiritBondIcon, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+36, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *NPCServiceData) Walk(cb WalkCallback) {
	cb.Do("EServiceType", &t.EServiceType)
	cb.Do("EVendorType", &t.EVendorType)
	cb.Do("ECrafterType", &t.ECrafterType)
	cb.Do("FlPriceMarkup", &t.FlPriceMarkup)
	cb.Do("ECurrencyType", &t.ECurrencyType)
	cb.Do("SnoClassPassiveReputation", &t.SnoClassPassiveReputation)
	cb.Do("EDruidSpiritType", &t.EDruidSpiritType)
	cb.Do("HSpiritIcon", &t.HSpiritIcon)
	cb.Do("HSpiritBondIcon", &t.HSpiritBondIcon)
}

type ClassInfoPlayStyle struct {
	HIcon        DT_UINT
	HTitle       DT_UINT
	HDescription DT_UINT
}

func (t *ClassInfoPlayStyle) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.HIcon, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.HTitle, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.HDescription, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+12, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ClassInfoPlayStyle) Walk(cb WalkCallback) {
	cb.Do("HIcon", &t.HIcon)
	cb.Do("HTitle", &t.HTitle)
	cb.Do("HDescription", &t.HDescription)
}

type UICutsceneStyle struct {
	// Inherits UIWindowStyle
	// Inherits UIControlStyle
	// Inherits PolymorphicBase
	DwType                    DT_UINT
	DwPad                     DT_UINT
	HParentStyle              UIControlHandle
	Unk_441f783               DT_INT64
	M_eHasModifiedPowerTagMap DT_TAGMAP[*DT_ENUM]
	TConsoleInput             UIControlConsoleInput
	Unk_b4f614c               DT_TAGMAP[*DT_ENUM]
}

func (t *UICutsceneStyle) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.HParentStyle, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_441f783, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.M_eHasModifiedPowerTagMap, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.TConsoleInput, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.Unk_b4f614c, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+80, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *UICutsceneStyle) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("HParentStyle", &t.HParentStyle)
	cb.Do("Unk_441f783", &t.Unk_441f783)
	cb.Do("M_eHasModifiedPowerTagMap", &t.M_eHasModifiedPowerTagMap)
	cb.Do("TConsoleInput", &t.TConsoleInput)
	cb.Do("Unk_b4f614c", &t.Unk_b4f614c)
}

type ActorJitterJoint struct {
	SzBoneName       DT_UINT
	FlJitterStrength DT_FLOAT
	FlJitterSpeed    DT_FLOAT
	Unk_36bc3de      DT_FLOAT
	FlDuration       DT_FLOAT
}

func (t *ActorJitterJoint) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SzBoneName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.FlJitterStrength, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.FlJitterSpeed, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.Unk_36bc3de, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.FlDuration, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+20, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ActorJitterJoint) Walk(cb WalkCallback) {
	cb.Do("SzBoneName", &t.SzBoneName)
	cb.Do("FlJitterStrength", &t.FlJitterStrength)
	cb.Do("FlJitterSpeed", &t.FlJitterSpeed)
	cb.Do("Unk_36bc3de", &t.Unk_36bc3de)
	cb.Do("FlDuration", &t.FlDuration)
}

type StackPortionMessage struct {
	THeader RequiredMessageHeader
	AnnItem DT_ACD_NETWORK_NAME
	UAmount DT_INT64
}

func (t *StackPortionMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.AnnItem, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.UAmount, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *StackPortionMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("AnnItem", &t.AnnItem)
	cb.Do("UAmount", &t.UAmount)
}

type GameTestingCraftItem struct {
	THeader      RequiredMessageHeader
	NCrafterType DT_INT
}

func (t *GameTestingCraftItem) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.NCrafterType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+20, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *GameTestingCraftItem) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("NCrafterType", &t.NCrafterType)
}

type ACDInventoryPositionMessage struct {
	THeader          RequiredMessageHeader
	Ann              DT_ACD_NETWORK_NAME
	TInvLocationData InventoryLocationMessageData
	TLocType         DT_ENUM
	Unk_9e938b5      DT_OPTIONAL[*DT_INT64]
}

func (t *ACDInventoryPositionMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Ann, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.TInvLocationData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.TLocType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.Unk_9e938b5, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+64, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ACDInventoryPositionMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("Ann", &t.Ann)
	cb.Do("TInvLocationData", &t.TInvLocationData)
	cb.Do("TLocType", &t.TLocType)
	cb.Do("Unk_9e938b5", &t.Unk_9e938b5)
}

type CrafterDefinition struct {
	DwNextID       DT_UINT
	ECrafterType   DT_ENUM
	Unk_a34d0af    DT_SNO
	ArTabs         DT_VARIABLEARRAY[*Type_c661a6fd]
	ArRecipeTiers  DT_VARIABLEARRAY[*RecipeTier]
	ArImbueRecipes DT_VARIABLEARRAY[*ImbueRecipe]
	Unk_aa9dad7    DT_VARIABLEARRAY[*ImbueRecipe]
}

func (t *CrafterDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwNextID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.ECrafterType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_a34d0af, r, &Options{
		Flags: 1,
		Group: 51,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ArTabs, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.ArRecipeTiers, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.ArImbueRecipes, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_aa9dad7, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+88, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *CrafterDefinition) Walk(cb WalkCallback) {
	cb.Do("DwNextID", &t.DwNextID)
	cb.Do("ECrafterType", &t.ECrafterType)
	cb.Do("Unk_a34d0af", &t.Unk_a34d0af)
	cb.Do("ArTabs", &t.ArTabs)
	cb.Do("ArRecipeTiers", &t.ArRecipeTiers)
	cb.Do("ArImbueRecipes", &t.ArImbueRecipes)
	cb.Do("Unk_aa9dad7", &t.Unk_aa9dad7)
}

type RenderParams struct {
	Unk_e80141f           DT_INT
	ECullMode             DT_ENUM
	FZBufferWriteEnable   DT_INT
	EZBufferCompareFunc   DT_ENUM
	FlZBias               DT_FLOAT
	FlZSlopeScaleBias     DT_FLOAT
	TStencilParams        StencilParams
	FAlphaTestEnable      DT_INT
	EAlphaTestCompareFunc DT_ENUM
	BAlphaTestRefValue    DT_BYTE
	FAlphaMaskEnable      DT_INT
	EFillMode             DT_ENUM
	Unk_7e83826           DT_INT
	TAlphaBlend           DT_FIXEDARRAY[*AlphaBlendFactors]
}

func (t *RenderParams) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Unk_e80141f, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.ECullMode, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.FZBufferWriteEnable, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.EZBufferCompareFunc, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.FlZBias, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.FlZSlopeScaleBias, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.TStencilParams, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.FAlphaTestEnable, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.EAlphaTestCompareFunc, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.BAlphaTestRefValue, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.FAlphaMaskEnable, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.EFillMode, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.Unk_7e83826, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.TAlphaBlend, r, &Options{
		ArrayLength: 6,
		Flags:       1,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+384, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *RenderParams) Walk(cb WalkCallback) {
	cb.Do("Unk_e80141f", &t.Unk_e80141f)
	cb.Do("ECullMode", &t.ECullMode)
	cb.Do("FZBufferWriteEnable", &t.FZBufferWriteEnable)
	cb.Do("EZBufferCompareFunc", &t.EZBufferCompareFunc)
	cb.Do("FlZBias", &t.FlZBias)
	cb.Do("FlZSlopeScaleBias", &t.FlZSlopeScaleBias)
	cb.Do("TStencilParams", &t.TStencilParams)
	cb.Do("FAlphaTestEnable", &t.FAlphaTestEnable)
	cb.Do("EAlphaTestCompareFunc", &t.EAlphaTestCompareFunc)
	cb.Do("BAlphaTestRefValue", &t.BAlphaTestRefValue)
	cb.Do("FAlphaMaskEnable", &t.FAlphaMaskEnable)
	cb.Do("EFillMode", &t.EFillMode)
	cb.Do("Unk_7e83826", &t.Unk_7e83826)
	cb.Do("TAlphaBlend", &t.TAlphaBlend)
}

type BoneStructure struct {
	PtShapes           DT_VARIABLEARRAY[*CollisionShape]
	PtConstraint       DT_VARIABLEARRAY[*ConstraintParameters]
	DwHash             DT_UINT
	DwFlags            DT_UINT
	NParentIndex       DT_WORD
	NLOD               DT_WORD
	NTrueBoneLOD       DT_WORD
	Unk_b03b557        DT_WORD
	SnoParticleSystem  DT_SNO
	WsBounds           Sphere
	Transform          PRSTransform
	TransformInv       PRSTransform
	TransformParentRel PRSTransform
	Unk_7659cea        PRSTransform
}

func (t *BoneStructure) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.PtShapes, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.PtConstraint, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.DwHash, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.DwFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.NParentIndex, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+42, &t.NLOD, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.NTrueBoneLOD, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+46, &t.Unk_b03b557, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.SnoParticleSystem, r, &Options{
		Flags: 1,
		Group: 27,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.WsBounds, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.Transform, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+108, &t.TransformInv, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+148, &t.TransformParentRel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+188, &t.Unk_7659cea, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+232, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *BoneStructure) Walk(cb WalkCallback) {
	cb.Do("PtShapes", &t.PtShapes)
	cb.Do("PtConstraint", &t.PtConstraint)
	cb.Do("DwHash", &t.DwHash)
	cb.Do("DwFlags", &t.DwFlags)
	cb.Do("NParentIndex", &t.NParentIndex)
	cb.Do("NLOD", &t.NLOD)
	cb.Do("NTrueBoneLOD", &t.NTrueBoneLOD)
	cb.Do("Unk_b03b557", &t.Unk_b03b557)
	cb.Do("SnoParticleSystem", &t.SnoParticleSystem)
	cb.Do("WsBounds", &t.WsBounds)
	cb.Do("Transform", &t.Transform)
	cb.Do("TransformInv", &t.TransformInv)
	cb.Do("TransformParentRel", &t.TransformParentRel)
	cb.Do("Unk_7659cea", &t.Unk_7659cea)
}

type SeasonDefinition struct {
	Unk_e6f242a  DT_UINT
	ArWorldTiers DT_FIXEDARRAY[*Type_7ec2173f]
	Unk_974bfc7  Type_ef933d53
	Unk_9b70c7c  DT_VARIABLEARRAY[*DT_ENUM]
	Unk_f4e4263  DT_VARIABLEARRAY[*Type_e243df90]
	Unk_bce1df4  DT_SNO
	Unk_a3cd06c  DT_GBID
	Unk_138b165  Type_2a415346
	Unk_c07ef5d  DT_VARIABLEARRAY[*DT_GBID]
	Unk_bc09a2f  DT_VARIABLEARRAY[*DT_SNO]
	Unk_b4c7436  DT_VARIABLEARRAY[*DT_INT]
	Unk_47369e6  DT_SNO
	Unk_d38e9f4  DT_SNO
	Unk_c78a34a  DT_SNO
	Unk_3c01b8a  DT_SNO
	Unk_8b03de5  DT_FLOAT
	Unk_6bbede7  DT_FLOAT
	Unk_5f62660  DT_UINT
	Unk_3708d9d  DT_SNO
}

func (t *SeasonDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.Unk_e6f242a, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.ArWorldTiers, r, &Options{
		ArrayLength: 4,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.Unk_974bfc7, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+144, &t.Unk_9b70c7c, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+160, &t.Unk_f4e4263, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+176, &t.Unk_bce1df4, r, &Options{
		Flags: 1,
		Group: 20,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+180, &t.Unk_a3cd06c, r, &Options{
		Flags: 1,
		Group: 68,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+184, &t.Unk_138b165, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+200, &t.Unk_c07ef5d, r, &Options{
		Flags: 1,
		Group: 67,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+216, &t.Unk_bc09a2f, r, &Options{
		Flags: 1,
		Group: 99,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+232, &t.Unk_b4c7436, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+248, &t.Unk_47369e6, r, &Options{
		Flags: 1,
		Group: 110,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+252, &t.Unk_d38e9f4, r, &Options{
		Flags: 1,
		Group: 110,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+256, &t.Unk_c78a34a, r, &Options{
		Flags: 1,
		Group: 114,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+260, &t.Unk_3c01b8a, r, &Options{
		Flags: 1,
		Group: 114,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+264, &t.Unk_8b03de5, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+268, &t.Unk_6bbede7, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+272, &t.Unk_5f62660, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+276, &t.Unk_3708d9d, r, &Options{
		Flags: 1,
		Group: 63,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+280, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *SeasonDefinition) Walk(cb WalkCallback) {
	cb.Do("Unk_e6f242a", &t.Unk_e6f242a)
	cb.Do("ArWorldTiers", &t.ArWorldTiers)
	cb.Do("Unk_974bfc7", &t.Unk_974bfc7)
	cb.Do("Unk_9b70c7c", &t.Unk_9b70c7c)
	cb.Do("Unk_f4e4263", &t.Unk_f4e4263)
	cb.Do("Unk_bce1df4", &t.Unk_bce1df4)
	cb.Do("Unk_a3cd06c", &t.Unk_a3cd06c)
	cb.Do("Unk_138b165", &t.Unk_138b165)
	cb.Do("Unk_c07ef5d", &t.Unk_c07ef5d)
	cb.Do("Unk_bc09a2f", &t.Unk_bc09a2f)
	cb.Do("Unk_b4c7436", &t.Unk_b4c7436)
	cb.Do("Unk_47369e6", &t.Unk_47369e6)
	cb.Do("Unk_d38e9f4", &t.Unk_d38e9f4)
	cb.Do("Unk_c78a34a", &t.Unk_c78a34a)
	cb.Do("Unk_3c01b8a", &t.Unk_3c01b8a)
	cb.Do("Unk_8b03de5", &t.Unk_8b03de5)
	cb.Do("Unk_6bbede7", &t.Unk_6bbede7)
	cb.Do("Unk_5f62660", &t.Unk_5f62660)
	cb.Do("Unk_3708d9d", &t.Unk_3708d9d)
}

type PlayerFlagSubcondition struct {
	// Inherits Subcondition
	// Inherits PolymorphicBase
	DwType  DT_UINT
	BNegate DT_INT
	DwPad   DT_UINT
	SzLabel DT_CHARARRAY
}

func (t *PlayerFlagSubcondition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BNegate, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SzLabel, r, &Options{
		ArrayLength: 128,
		Flags:       1,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+152, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PlayerFlagSubcondition) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("BNegate", &t.BNegate)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("SzLabel", &t.SzLabel)
}

type TransmogSlotData struct {
	ESlot                 DT_ENUM
	SnoTransmogSourceItem DT_SNO
	SnoDye                DT_SNO
	BRemove               DT_INT
}

func (t *TransmogSlotData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.ESlot, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.SnoTransmogSourceItem, r, &Options{
		Flags: 1,
		Group: 73,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.SnoDye, r, &Options{
		Flags: 1,
		Group: 122,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.BRemove, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TransmogSlotData) Walk(cb WalkCallback) {
	cb.Do("ESlot", &t.ESlot)
	cb.Do("SnoTransmogSourceItem", &t.SnoTransmogSourceItem)
	cb.Do("SnoDye", &t.SnoDye)
	cb.Do("BRemove", &t.BRemove)
}

type UIButtonStyle struct {
	// Inherits UITextStyle
	// Inherits UIWindowStyle
	// Inherits UIControlStyle
	// Inherits PolymorphicBase
	DwType                    DT_UINT
	DwPad                     DT_UINT
	HParentStyle              UIControlHandle
	Unk_441f783               DT_INT64
	M_eHasModifiedPowerTagMap DT_TAGMAP[*DT_ENUM]
	TConsoleInput             UIControlConsoleInput
	Unk_b4f614c               DT_TAGMAP[*DT_ENUM]
	TFont                     UIControlFont
	Unk_4741819               DT_TAGMAP[*DT_ENUM]
	TIcon                     UIControlIcon
	TClickSounds              UIControlClickSounds
	Unk_10f81f0               DT_TAGMAP[*DT_ENUM]
}

func (t *UIButtonStyle) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.HParentStyle, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_441f783, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.M_eHasModifiedPowerTagMap, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.TConsoleInput, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.Unk_b4f614c, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.TFont, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.Unk_4741819, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.TIcon, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.TClickSounds, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+144, &t.Unk_10f81f0, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+160, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *UIButtonStyle) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("HParentStyle", &t.HParentStyle)
	cb.Do("Unk_441f783", &t.Unk_441f783)
	cb.Do("M_eHasModifiedPowerTagMap", &t.M_eHasModifiedPowerTagMap)
	cb.Do("TConsoleInput", &t.TConsoleInput)
	cb.Do("Unk_b4f614c", &t.Unk_b4f614c)
	cb.Do("TFont", &t.TFont)
	cb.Do("Unk_4741819", &t.Unk_4741819)
	cb.Do("TIcon", &t.TIcon)
	cb.Do("TClickSounds", &t.TClickSounds)
	cb.Do("Unk_10f81f0", &t.Unk_10f81f0)
}

type TriggerEventAttachCamera struct {
	// Inherits TriggerEventRangedDuration
	// Inherits TriggerEvent
	// Inherits PolymorphicBase
	DwType               DT_UINT
	TConditions          TriggerConditions
	FGenerated           DT_INT
	Unk_6cba752          DT_INT
	DwParentActorID      DT_UINT
	TDuration            DT_FLOAT
	DwTriggerFlags       DT_UINT
	DwTriggerFlagsEx     DT_UINT
	TCleanup             TriggerCleanup
	Unk_49e9257          DT_INT
	Unk_5490979          DT_INT
	DwPad                DT_UINT
	EObjectType          DT_ENUM
	THardpointLinkTarget HardpointLink
	DwObjectID           DT_UINT
	THardpointLink       HardpointLink
	Unk_896cea7          DT_INT
	Unk_454a2a1          DT_INT
	EBlendEasing         DT_ENUM
	Unk_10734fd          Type_e97cce1f
}

func (t *TriggerEventAttachCamera) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.FGenerated, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_6cba752, r, &Options{Flags: 16}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.DwParentActorID, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.TDuration, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.DwTriggerFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.DwTriggerFlagsEx, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.TCleanup, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+116, &t.Unk_49e9257, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.Unk_5490979, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+124, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.EObjectType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+132, &t.THardpointLinkTarget, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+140, &t.DwObjectID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+144, &t.THardpointLink, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+152, &t.Unk_896cea7, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+156, &t.Unk_454a2a1, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+160, &t.EBlendEasing, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+164, &t.Unk_10734fd, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+176, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TriggerEventAttachCamera) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("TConditions", &t.TConditions)
	cb.Do("FGenerated", &t.FGenerated)
	cb.Do("Unk_6cba752", &t.Unk_6cba752)
	cb.Do("DwParentActorID", &t.DwParentActorID)
	cb.Do("TDuration", &t.TDuration)
	cb.Do("DwTriggerFlags", &t.DwTriggerFlags)
	cb.Do("DwTriggerFlagsEx", &t.DwTriggerFlagsEx)
	cb.Do("TCleanup", &t.TCleanup)
	cb.Do("Unk_49e9257", &t.Unk_49e9257)
	cb.Do("Unk_5490979", &t.Unk_5490979)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("EObjectType", &t.EObjectType)
	cb.Do("THardpointLinkTarget", &t.THardpointLinkTarget)
	cb.Do("DwObjectID", &t.DwObjectID)
	cb.Do("THardpointLink", &t.THardpointLink)
	cb.Do("Unk_896cea7", &t.Unk_896cea7)
	cb.Do("Unk_454a2a1", &t.Unk_454a2a1)
	cb.Do("EBlendEasing", &t.EBlendEasing)
	cb.Do("Unk_10734fd", &t.Unk_10734fd)
}

type TriggerEventOutroAllObjects struct {
	// Inherits TriggerEvent
	// Inherits PolymorphicBase
	DwType          DT_UINT
	DwPad           DT_UINT
	TConditions     TriggerConditions
	FGenerated      DT_INT
	Unk_6cba752     DT_INT
	DwParentActorID DT_UINT
}

func (t *TriggerEventOutroAllObjects) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.FGenerated, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_6cba752, r, &Options{Flags: 16}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.DwParentActorID, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+80, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TriggerEventOutroAllObjects) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("TConditions", &t.TConditions)
	cb.Do("FGenerated", &t.FGenerated)
	cb.Do("Unk_6cba752", &t.Unk_6cba752)
	cb.Do("DwParentActorID", &t.DwParentActorID)
}

type EffectGroupPositionZKeyData struct {
	// Inherits EffectGroupKeyData
	// Inherits PolymorphicBase
	DwType     DT_UINT
	DwPad      DT_UINT
	ArKeyItems DT_VARIABLEARRAY[*EffectGroupKey]
}

func (t *EffectGroupPositionZKeyData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.ArKeyItems, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *EffectGroupPositionZKeyData) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("ArKeyItems", &t.ArKeyItems)
}

type Type_c8d78ce7 struct {
	NWidth       DT_INT
	NHeight      DT_INT
	NDepth       DT_INT
	DwPitch      DT_UINT
	DwSlicePitch DT_UINT
	FlGridSize   DT_FLOAT
	WpOrigin     DT_VECTOR3D
	Unk_4b236f4  DT_INT64
	Unk_aa0958e  DT_VARIABLEARRAY[*DT_WORD]
	Unk_aa09583  DT_VARIABLEARRAY[*DT_WORD]
	Unk_aa0957e  DT_VARIABLEARRAY[*DT_WORD]
	Unk_dd3cf4b  DT_VARIABLEARRAY[*DT_WORD]
	Unk_dd3cf40  DT_VARIABLEARRAY[*DT_WORD]
	Unk_dd3cf3b  DT_VARIABLEARRAY[*DT_WORD]
}

func (t *Type_c8d78ce7) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.NWidth, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.NHeight, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.NDepth, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPitch, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.DwSlicePitch, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.FlGridSize, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.WpOrigin, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.Unk_4b236f4, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.Unk_aa0958e, r, &Options{Flags: 2097153}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.Unk_aa09583, r, &Options{Flags: 2097153}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.Unk_aa0957e, r, &Options{Flags: 2097153}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.Unk_dd3cf4b, r, &Options{Flags: 2097153}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.Unk_dd3cf40, r, &Options{Flags: 2097153}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.Unk_dd3cf3b, r, &Options{Flags: 2097153}); err != nil {
		return err
	}
	if _, err := r.Seek(p+144, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_c8d78ce7) Walk(cb WalkCallback) {
	cb.Do("NWidth", &t.NWidth)
	cb.Do("NHeight", &t.NHeight)
	cb.Do("NDepth", &t.NDepth)
	cb.Do("DwPitch", &t.DwPitch)
	cb.Do("DwSlicePitch", &t.DwSlicePitch)
	cb.Do("FlGridSize", &t.FlGridSize)
	cb.Do("WpOrigin", &t.WpOrigin)
	cb.Do("Unk_4b236f4", &t.Unk_4b236f4)
	cb.Do("Unk_aa0958e", &t.Unk_aa0958e)
	cb.Do("Unk_aa09583", &t.Unk_aa09583)
	cb.Do("Unk_aa0957e", &t.Unk_aa0957e)
	cb.Do("Unk_dd3cf4b", &t.Unk_dd3cf4b)
	cb.Do("Unk_dd3cf40", &t.Unk_dd3cf40)
	cb.Do("Unk_dd3cf3b", &t.Unk_dd3cf3b)
}

type Type_c8fd413e struct {
	Unk_d10605a DT_GBID
	Unk_209e228 DT_INT
}

func (t *Type_c8fd413e) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Unk_d10605a, r, &Options{
		Flags: 1,
		Group: 66,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.Unk_209e228, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_c8fd413e) Walk(cb WalkCallback) {
	cb.Do("Unk_d10605a", &t.Unk_d10605a)
	cb.Do("Unk_209e228", &t.Unk_209e228)
}

type StoreProductDefinition struct {
	EType                         DT_ENUM
	Unk_d0a3165                   DT_VARIABLEARRAY[*DT_SNO]
	Unk_de90ee6                   DT_VARIABLEARRAY[*DT_SNO]
	Unk_12a0e73                   DT_VARIABLEARRAY[*DT_SNO]
	ArRequiresOwning              DT_VARIABLEARRAY[*DT_SNO]
	ArRequiresNotOwning           DT_VARIABLEARRAY[*DT_SNO]
	Unk_c7fa9b8                   DT_SNO
	SnoItemTransmog               DT_SNO
	SnoMount                      DT_SNO
	SnoEmote                      DT_SNO
	SnoMarkingShape               DT_SNO
	SnoJewelry                    DT_SNO
	SnoEmblem                     DT_SNO
	SnoHeadstone                  DT_SNO
	BInventoryDeleteItemAfterUses DT_INT
	Unk_54edf70                   DT_INT
	Unk_419cb8c                   DT_ENUM
	Unk_8f2e3f9                   DT_SNO
	ArCardArtVariants             DT_VARIABLEARRAY[*CardArt]
	Unk_7b588be                   DT_UINT
	HSplashImage                  DT_UINT
	HConfirmImage                 DT_UINT
	HCategoryIcon                 DT_UINT
	HTileImage                    DT_UINT
	Unk_9a0855f                   DT_INT
	Unk_8c37b97                   DT_UINT
	Unk_54578ff                   DT_INT
	Unk_5ff5733                   DT_INT
	Unk_a26c284                   DT_UINT
	Unk_a08a2f4                   DT_UINT
	Unk_aa674fe                   DT_UINT
	Unk_1816ef5                   DT_VECTOR3D
	BUseCustomizedPreview         DT_INT
	TCustomizedPreview            Type_619110a4
	Unk_e5d7f3                    DT_FIXEDARRAY[*DT_INT]
	Unk_35943b2                   DT_INT
	HDetailsDisplayImage          DT_UINT
	Unk_90e847e                   DT_ENUM
	Unk_62a3cf3                   DT_UINT
}

func (t *StoreProductDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.EType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_d0a3165, r, &Options{
		Flags: 1,
		Group: 110,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.Unk_de90ee6, r, &Options{
		Flags: 1,
		Group: 110,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.Unk_12a0e73, r, &Options{
		Flags: 1,
		Group: 110,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.ArRequiresOwning, r, &Options{
		Flags: 1,
		Group: 110,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.ArRequiresNotOwning, r, &Options{
		Flags: 1,
		Group: 110,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.Unk_c7fa9b8, r, &Options{
		Flags: 1,
		Group: 110,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+100, &t.SnoItemTransmog, r, &Options{
		Flags: 1,
		Group: 73,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+104, &t.SnoMount, r, &Options{
		Flags: 1,
		Group: 73,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+108, &t.SnoEmote, r, &Options{
		Flags: 1,
		Group: 118,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.SnoMarkingShape, r, &Options{
		Flags: 1,
		Group: 115,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+116, &t.SnoJewelry, r, &Options{
		Flags: 1,
		Group: 119,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.SnoEmblem, r, &Options{
		Flags: 1,
		Group: 121,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+124, &t.SnoHeadstone, r, &Options{
		Flags: 1,
		Group: 1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.BInventoryDeleteItemAfterUses, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+132, &t.Unk_54edf70, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+136, &t.Unk_419cb8c, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+140, &t.Unk_8f2e3f9, r, &Options{
		Flags: 1,
		Group: 137,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+144, &t.ArCardArtVariants, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+160, &t.Unk_7b588be, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+164, &t.HSplashImage, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+168, &t.HConfirmImage, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+172, &t.HCategoryIcon, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+176, &t.HTileImage, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+180, &t.Unk_9a0855f, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+184, &t.Unk_8c37b97, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+188, &t.Unk_54578ff, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+192, &t.Unk_5ff5733, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+196, &t.Unk_a26c284, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+200, &t.Unk_a08a2f4, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+204, &t.Unk_aa674fe, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+208, &t.Unk_1816ef5, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+220, &t.BUseCustomizedPreview, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+224, &t.TCustomizedPreview, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+276, &t.Unk_e5d7f3, r, &Options{
		ArrayLength: 5,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+296, &t.Unk_35943b2, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+300, &t.HDetailsDisplayImage, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+304, &t.Unk_90e847e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+308, &t.Unk_62a3cf3, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+312, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *StoreProductDefinition) Walk(cb WalkCallback) {
	cb.Do("EType", &t.EType)
	cb.Do("Unk_d0a3165", &t.Unk_d0a3165)
	cb.Do("Unk_de90ee6", &t.Unk_de90ee6)
	cb.Do("Unk_12a0e73", &t.Unk_12a0e73)
	cb.Do("ArRequiresOwning", &t.ArRequiresOwning)
	cb.Do("ArRequiresNotOwning", &t.ArRequiresNotOwning)
	cb.Do("Unk_c7fa9b8", &t.Unk_c7fa9b8)
	cb.Do("SnoItemTransmog", &t.SnoItemTransmog)
	cb.Do("SnoMount", &t.SnoMount)
	cb.Do("SnoEmote", &t.SnoEmote)
	cb.Do("SnoMarkingShape", &t.SnoMarkingShape)
	cb.Do("SnoJewelry", &t.SnoJewelry)
	cb.Do("SnoEmblem", &t.SnoEmblem)
	cb.Do("SnoHeadstone", &t.SnoHeadstone)
	cb.Do("BInventoryDeleteItemAfterUses", &t.BInventoryDeleteItemAfterUses)
	cb.Do("Unk_54edf70", &t.Unk_54edf70)
	cb.Do("Unk_419cb8c", &t.Unk_419cb8c)
	cb.Do("Unk_8f2e3f9", &t.Unk_8f2e3f9)
	cb.Do("ArCardArtVariants", &t.ArCardArtVariants)
	cb.Do("Unk_7b588be", &t.Unk_7b588be)
	cb.Do("HSplashImage", &t.HSplashImage)
	cb.Do("HConfirmImage", &t.HConfirmImage)
	cb.Do("HCategoryIcon", &t.HCategoryIcon)
	cb.Do("HTileImage", &t.HTileImage)
	cb.Do("Unk_9a0855f", &t.Unk_9a0855f)
	cb.Do("Unk_8c37b97", &t.Unk_8c37b97)
	cb.Do("Unk_54578ff", &t.Unk_54578ff)
	cb.Do("Unk_5ff5733", &t.Unk_5ff5733)
	cb.Do("Unk_a26c284", &t.Unk_a26c284)
	cb.Do("Unk_a08a2f4", &t.Unk_a08a2f4)
	cb.Do("Unk_aa674fe", &t.Unk_aa674fe)
	cb.Do("Unk_1816ef5", &t.Unk_1816ef5)
	cb.Do("BUseCustomizedPreview", &t.BUseCustomizedPreview)
	cb.Do("TCustomizedPreview", &t.TCustomizedPreview)
	cb.Do("Unk_e5d7f3", &t.Unk_e5d7f3)
	cb.Do("Unk_35943b2", &t.Unk_35943b2)
	cb.Do("HDetailsDisplayImage", &t.HDetailsDisplayImage)
	cb.Do("Unk_90e847e", &t.Unk_90e847e)
	cb.Do("Unk_62a3cf3", &t.Unk_62a3cf3)
}

type AchievementDefinition struct {
	UPointsValue             DT_UINT
	DwNextID                 DT_UINT
	UMinRequiredCriteria     DT_UINT
	SnoSupersedes            DT_SNO
	UFlags                   DT_UINT
	UPlatformFlags           DT_UINT
	ArCriteriaList           DT_VARIABLEARRAY[*CriteriaDefinition]
	ArRewardList             DT_VARIABLEARRAY[*RewardDefinition]
	Unk_7235f7c              DT_ENUM
	TPS4AwardDefinitionList  PS4ConsoleAwardDefinition
	TPS5AwardDefinitionList  PS5ConsoleAwardDefinition
	TXboxAwardDefinitionList XboxConsoleAwardDefinition
	Unk_6843d8d              DT_UINT
	Unk_57fb971              DT_UINT
	Unk_50169b3              DT_UINT
	HImage                   DT_UINT
	HSplashImage             DT_UINT
}

func (t *AchievementDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.UPointsValue, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwNextID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.UMinRequiredCriteria, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.SnoSupersedes, r, &Options{
		Flags: 1,
		Group: 99,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.UFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.UPlatformFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.ArCriteriaList, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.ArRewardList, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.Unk_7235f7c, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.TPS4AwardDefinitionList, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.TPS5AwardDefinitionList, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.TXboxAwardDefinitionList, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+144, &t.Unk_6843d8d, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+148, &t.Unk_57fb971, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+152, &t.Unk_50169b3, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+156, &t.HImage, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+160, &t.HSplashImage, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+168, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *AchievementDefinition) Walk(cb WalkCallback) {
	cb.Do("UPointsValue", &t.UPointsValue)
	cb.Do("DwNextID", &t.DwNextID)
	cb.Do("UMinRequiredCriteria", &t.UMinRequiredCriteria)
	cb.Do("SnoSupersedes", &t.SnoSupersedes)
	cb.Do("UFlags", &t.UFlags)
	cb.Do("UPlatformFlags", &t.UPlatformFlags)
	cb.Do("ArCriteriaList", &t.ArCriteriaList)
	cb.Do("ArRewardList", &t.ArRewardList)
	cb.Do("Unk_7235f7c", &t.Unk_7235f7c)
	cb.Do("TPS4AwardDefinitionList", &t.TPS4AwardDefinitionList)
	cb.Do("TPS5AwardDefinitionList", &t.TPS5AwardDefinitionList)
	cb.Do("TXboxAwardDefinitionList", &t.TXboxAwardDefinitionList)
	cb.Do("Unk_6843d8d", &t.Unk_6843d8d)
	cb.Do("Unk_57fb971", &t.Unk_57fb971)
	cb.Do("Unk_50169b3", &t.Unk_50169b3)
	cb.Do("HImage", &t.HImage)
	cb.Do("HSplashImage", &t.HSplashImage)
}

type UISkillTreeStyle struct {
	// Inherits UIWindowStyle
	// Inherits UIControlStyle
	// Inherits PolymorphicBase
	DwType                    DT_UINT
	DwPad                     DT_UINT
	HParentStyle              UIControlHandle
	Unk_441f783               DT_INT64
	M_eHasModifiedPowerTagMap DT_TAGMAP[*DT_ENUM]
	TConsoleInput             UIControlConsoleInput
	Unk_b4f614c               DT_TAGMAP[*DT_ENUM]
}

func (t *UISkillTreeStyle) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.HParentStyle, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_441f783, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.M_eHasModifiedPowerTagMap, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.TConsoleInput, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.Unk_b4f614c, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+80, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *UISkillTreeStyle) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("HParentStyle", &t.HParentStyle)
	cb.Do("Unk_441f783", &t.Unk_441f783)
	cb.Do("M_eHasModifiedPowerTagMap", &t.M_eHasModifiedPowerTagMap)
	cb.Do("TConsoleInput", &t.TConsoleInput)
	cb.Do("Unk_b4f614c", &t.Unk_b4f614c)
}

type UpdateConvAutoAdvanceMessage struct {
	THeader           RequiredMessageHeader
	SnoConv           DT_SNO
	NLineUID          DT_INT
	DwNextAdvanceTime DT_UINT
}

func (t *UpdateConvAutoAdvanceMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoConv, r, &Options{
		Flags: 1,
		Group: 12,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.NLineUID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.DwNextAdvanceTime, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+28, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *UpdateConvAutoAdvanceMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("SnoConv", &t.SnoConv)
	cb.Do("NLineUID", &t.NLineUID)
	cb.Do("DwNextAdvanceTime", &t.DwNextAdvanceTime)
}

type Type_c9a200b0 struct {
	FlTime    DT_FLOAT
	RgbaColor DT_RGBACOLOR
}

func (t *Type_c9a200b0) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.FlTime, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.RgbaColor, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_c9a200b0) Walk(cb WalkCallback) {
	cb.Do("FlTime", &t.FlTime)
	cb.Do("RgbaColor", &t.RgbaColor)
}

type Sphere struct {
	WpCenter DT_VECTOR3D
	WdRadius DT_FLOAT
}

func (t *Sphere) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.WpCenter, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.WdRadius, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Sphere) Walk(cb WalkCallback) {
	cb.Do("WpCenter", &t.WpCenter)
	cb.Do("WdRadius", &t.WdRadius)
}

type QuestReward struct {
	SnoTreasureClass DT_SNO
	NXPTier          DT_INT
	NGoldTier        DT_INT
	Unk_3592260      DT_INT
	SnoTrackedReward DT_SNO
	Unk_b0fd814      DT_INT
	Unk_186d5e6      Type_e12242af
	Unk_f8ed991      DT_VARIABLEARRAY[*DT_SNO]
}

func (t *QuestReward) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoTreasureClass, r, &Options{
		Flags: 1,
		Group: 52,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.NXPTier, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.NGoldTier, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.Unk_3592260, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoTrackedReward, r, &Options{
		Flags: 1,
		Group: 126,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.Unk_b0fd814, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_186d5e6, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.Unk_f8ed991, r, &Options{
		Flags: 1,
		Group: 73,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *QuestReward) Walk(cb WalkCallback) {
	cb.Do("SnoTreasureClass", &t.SnoTreasureClass)
	cb.Do("NXPTier", &t.NXPTier)
	cb.Do("NGoldTier", &t.NGoldTier)
	cb.Do("Unk_3592260", &t.Unk_3592260)
	cb.Do("SnoTrackedReward", &t.SnoTrackedReward)
	cb.Do("Unk_b0fd814", &t.Unk_b0fd814)
	cb.Do("Unk_186d5e6", &t.Unk_186d5e6)
	cb.Do("Unk_f8ed991", &t.Unk_f8ed991)
}

type Type_ca1fcba0 struct {
	Unk_184e1e5 DT_TAGMAP[*DT_ENUM]
}

func (t *Type_ca1fcba0) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Unk_184e1e5, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_ca1fcba0) Walk(cb WalkCallback) {
	cb.Do("Unk_184e1e5", &t.Unk_184e1e5)
}

type RenderPass struct {
	ERenderLayer     DT_ENUM
	EGraphType       DT_ENUM
	TRenderParams    RenderParams
	PtInputLayout    DT_VARIABLEARRAY[*ShaderInputLayout]
	DwFlags          DT_UINT
	Unk_262684c      DT_UINT
	Unk_c23801f      DT_ENUM
	PtPostprocessed  DT_INT64
	Unk_295833       DT_VARIABLEARRAY[*DT_UINT]
	PtPerms          DT_VARIABLEARRAY[*ShaderPermutation]
	Unk_e39f53a      DT_VARIABLEARRAY[*MaterialScalarValuesUsed]
	Unk_247b377      DT_VARIABLEARRAY[*MaterialVectorValuesUsed]
	Unk_1484b5a      DT_VARIABLEARRAY[*Type_d7ee8f26]
	TDefaultTextures DT_VARIABLEARRAY[*DefaultTextureInfo]
	Unk_9068982      DT_VARIABLEARRAY[*Type_30511dbc]
	Unk_282b17c      DT_TAGMAP[*DT_ENUM]
}

func (t *RenderPass) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.ERenderLayer, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.EGraphType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.TRenderParams, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+392, &t.PtInputLayout, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+408, &t.DwFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+412, &t.Unk_262684c, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+416, &t.Unk_c23801f, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+424, &t.PtPostprocessed, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+432, &t.Unk_295833, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+448, &t.PtPerms, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+464, &t.Unk_e39f53a, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+480, &t.Unk_247b377, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+496, &t.Unk_1484b5a, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+512, &t.TDefaultTextures, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+528, &t.Unk_9068982, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+544, &t.Unk_282b17c, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+560, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *RenderPass) Walk(cb WalkCallback) {
	cb.Do("ERenderLayer", &t.ERenderLayer)
	cb.Do("EGraphType", &t.EGraphType)
	cb.Do("TRenderParams", &t.TRenderParams)
	cb.Do("PtInputLayout", &t.PtInputLayout)
	cb.Do("DwFlags", &t.DwFlags)
	cb.Do("Unk_262684c", &t.Unk_262684c)
	cb.Do("Unk_c23801f", &t.Unk_c23801f)
	cb.Do("PtPostprocessed", &t.PtPostprocessed)
	cb.Do("Unk_295833", &t.Unk_295833)
	cb.Do("PtPerms", &t.PtPerms)
	cb.Do("Unk_e39f53a", &t.Unk_e39f53a)
	cb.Do("Unk_247b377", &t.Unk_247b377)
	cb.Do("Unk_1484b5a", &t.Unk_1484b5a)
	cb.Do("TDefaultTextures", &t.TDefaultTextures)
	cb.Do("Unk_9068982", &t.Unk_9068982)
	cb.Do("Unk_282b17c", &t.Unk_282b17c)
}

type GizmoTemplate struct{}

func (t *GizmoTemplate) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if _, err := r.Seek(p+1, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *GizmoTemplate) Walk(cb WalkCallback) {}

type SpawnLocType_Table struct {
	// Inherits GameBalanceTable
	// Inherits PolymorphicBase
	DwType   DT_UINT
	DwPad    DT_UINT
	TEntries DT_VARIABLEARRAY[*SpawnLocType]
}

func (t *SpawnLocType_Table) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TEntries, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *SpawnLocType_Table) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("TEntries", &t.TEntries)
}

type OnPhaseEnteredPowerCallback struct {
	// Inherits PowerCallbackBase
	// Inherits PolymorphicBase
	DwType                DT_UINT
	DwPad                 DT_UINT
	SnoTriggerEffectGroup DT_SNO
	BCouldHaveRagdolled   DT_INT
	TPhaseName            DT_UINT
}

func (t *OnPhaseEnteredPowerCallback) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoTriggerEffectGroup, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.BCouldHaveRagdolled, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.TPhaseName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *OnPhaseEnteredPowerCallback) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("SnoTriggerEffectGroup", &t.SnoTriggerEffectGroup)
	cb.Do("BCouldHaveRagdolled", &t.BCouldHaveRagdolled)
	cb.Do("TPhaseName", &t.TPhaseName)
}

type Type_cabcc4f9 struct {
	FlTime  DT_FLOAT
	FlScale DT_FLOAT
}

func (t *Type_cabcc4f9) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.FlTime, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.FlScale, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_cabcc4f9) Walk(cb WalkCallback) {
	cb.Do("FlTime", &t.FlTime)
	cb.Do("FlScale", &t.FlScale)
}

type ActorLookOverrideChangedMessage struct {
	THeader           RequiredMessageHeader
	Ann               DT_ACD_NETWORK_NAME
	NChange           DT_INT
	NLookOverrideHash DT_UINT
	BOnDeath          DT_INT
	BRenderArmor      DT_INT
}

func (t *ActorLookOverrideChangedMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Ann, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.NChange, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.NLookOverrideHash, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.BOnDeath, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.BRenderArmor, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+40, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ActorLookOverrideChangedMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("Ann", &t.Ann)
	cb.Do("NChange", &t.NChange)
	cb.Do("NLookOverrideHash", &t.NLookOverrideHash)
	cb.Do("BOnDeath", &t.BOnDeath)
	cb.Do("BRenderArmor", &t.BRenderArmor)
}

type AIStateDebugTestSwitchMessage struct {
	THeader     RequiredMessageHeader
	AnnActor    DT_ACD_NETWORK_NAME
	Unk_ff59d1d DT_UINT
}

func (t *AIStateDebugTestSwitchMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.AnnActor, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_ff59d1d, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+28, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *AIStateDebugTestSwitchMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("AnnActor", &t.AnnActor)
	cb.Do("Unk_ff59d1d", &t.Unk_ff59d1d)
}

type DungeonList struct {
	ArDungeons DT_VARIABLEARRAY[*DT_SNO]
}

func (t *DungeonList) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.ArDungeons, r, &Options{
		Flags: 513,
		Group: 48,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *DungeonList) Walk(cb WalkCallback) {
	cb.Do("ArDungeons", &t.ArDungeons)
}

type PlayerIsShapeshiftedSubcondition struct {
	// Inherits Subcondition
	// Inherits PolymorphicBase
	DwType  DT_UINT
	BNegate DT_INT
	DwPad   DT_UINT
}

func (t *PlayerIsShapeshiftedSubcondition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BNegate, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PlayerIsShapeshiftedSubcondition) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("BNegate", &t.BNegate)
	cb.Do("DwPad", &t.DwPad)
}

type GlobalAVData struct {
	// Inherits GlobalBase
	// Inherits PolymorphicBase
	DwType                              DT_UINT
	DwPad                               DT_UINT
	WdMicrophoneHeight                  DT_FLOAT
	WdMicrophoneXYOffset                DT_FLOAT
	FlMicrophoneTiltCorrection          DT_FLOAT
	Unk_bcf2fa1                         DT_FLOAT
	FlDopplerFactor                     DT_FLOAT
	FlAttenuationFactor                 DT_FLOAT
	FlFriendlyAttenuationFactor         DT_FLOAT
	FlEnemyAttenuationFactor            DT_FLOAT
	Unk_a24f195                         DT_FLOAT
	Unk_de216d0                         ConversationTypeSounds
	Unk_ee2f4d9                         Type_abec9f65
	Unk_aab60e9                         DT_INT
	Unk_5e1713                          DT_INT
	Unk_4889712                         DT_INT
	Unk_14c506c                         DT_FLOAT
	Unk_9109f33                         DT_FLOAT
	Unk_97eca79                         DT_INT
	Unk_9bb9a7b                         DT_FLOAT
	Unk_bff9025                         DT_FLOAT
	Unk_6667f4c                         DT_FLOAT
	Unk_d4f116d                         DT_FLOAT
	Unk_3d2f7b4                         DT_FLOAT
	Unk_d06da3d                         DT_FLOAT
	Unk_1c5bd37                         DT_INT
	Unk_c1c8d33                         DT_FLOAT
	Unk_2d19c28                         DT_FLOAT
	Unk_84bd05e                         DT_FLOAT
	Unk_a674d1f                         DT_FLOAT
	Unk_48115e6                         DT_FLOAT
	Unk_1140ffa                         DT_FLOAT
	FlMultiplayerSmoothing              DT_FLOAT
	Unk_b7979d6                         DT_FLOAT
	FlSpringMinSpeed                    DT_FLOAT
	FlSpringMaxSpeed                    DT_FLOAT
	FlSpringMagnitude                   DT_FLOAT
	FlSpringStiffness                   DT_FLOAT
	FlOrbitSLerpScalar                  DT_FLOAT
	FlOrbitTransitionExponentialScalar  DT_FLOAT
	FlOrbitTransitionDuration           DT_FLOAT
	WvOrbitOffsetCenterForAngleLimiting DT_VECTOR3D
	FlOrbitMaxAngleFromOffsetCenter     DT_FLOAT
	VConsoleCameraShakeScalar           DT_VECTOR3D
	FlZNear                             DT_FLOAT
	Unk_4849eb5                         DT_FLOAT
	Unk_d16853d                         DT_FLOAT
	Unk_efc10ac                         DT_FLOAT
	Unk_67c3614                         DT_FLOAT
	Unk_6236ef1                         DT_FLOAT
	Unk_5d800f3                         DT_FLOAT
	Unk_75c2a63                         DT_FLOAT
	Unk_32ded65                         DT_FLOAT
	Unk_ba7c108                         DT_FLOAT
	Unk_ea151f5                         DT_FLOAT
	Unk_26bea03                         DT_FLOAT
	Unk_26bec71                         DT_FLOAT
	Unk_4d37f57                         DT_FLOAT
	Unk_fe87183                         DT_FLOAT
	Unk_9773164                         DT_FLOAT
	Unk_8682ecb                         DT_FLOAT
	Unk_b5787f8                         DT_RGBACOLOR
	Unk_dacb099                         DT_RGBACOLOR
	Unk_1d93a                           DT_RGBACOLOR
	Unk_25701db                         DT_RGBACOLOR
	Unk_dca1d11                         DT_RGBACOLOR
	Unk_dd6ca58                         DT_RGBACOLOR
	Unk_14e6af7                         DT_RGBACOLOR
	Unk_db836fa                         DT_RGBACOLOR
	Unk_ed20455                         DT_RGBACOLOR
	Unk_a879fd8                         DT_RGBACOLOR
	Unk_614e428                         DT_FLOAT
	FlTranslucencyScale                 DT_FLOAT
	FlTranslucencyThicknessScale        DT_FLOAT
	FlTranslucencyNormalOffset          DT_FLOAT
	Unk_4450d33                         DT_FLOAT
	Unk_52fa93a                         DT_FLOAT
	Unk_f719403                         DT_FLOAT
	Unk_556d46a                         DT_FLOAT
	Unk_25055f1                         DT_FLOAT
	Unk_808753f                         DT_FLOAT
	Unk_c393e43                         DT_FLOAT
	Unk_5149854                         DT_FLOAT
	Unk_83c9b2a                         DT_FLOAT
	Unk_8e6396a                         DT_FLOAT
	Unk_922b1da                         DT_FLOAT
	Unk_b08e030                         DT_FLOAT
	Unk_26ab22f                         DT_FLOAT
	Unk_55f065                          DT_FLOAT
	Unk_c8a3761                         DT_FLOAT
	Unk_e661bd7                         DT_FLOAT
	Unk_f48f9ad                         DT_VECTOR3D
	Unk_f48f8af                         DT_VECTOR3D
	Unk_7f22f2a                         DT_FLOAT
	Unk_2665f25                         DT_UINT
	Unk_c28b473                         DT_UINT
	Unk_df5ec50                         DT_FLOAT
	Unk_620e28d                         DT_FLOAT
	Unk_f12663d                         DT_FLOAT
	Unk_6bec509                         DT_FLOAT
	Unk_4ae734e                         DT_FLOAT
	Unk_cd9698b                         DT_FLOAT
	Unk_d3bbd69                         DT_FLOAT
	Unk_5822eea                         DT_VECTOR3D
	Unk_725b405                         DT_FLOAT
	Unk_aebfc2b                         DT_FLOAT
	Unk_cbab47a                         DT_FLOAT
	Unk_d958d9                          DT_FLOAT
	Unk_eacf58c                         DT_FLOAT
	Unk_13a3e3b                         DT_FLOAT
	Unk_cb97e5a                         DT_FLOAT
	Unk_8fb07f8                         DT_FLOAT
	FlFinalLevels                       DT_FLOAT
	Unk_c9de46                          DT_FLOAT
	Unk_b3fd1d8                         DT_FLOAT
	Unk_5594707                         DT_FLOAT
	Unk_ba7e426                         DT_FLOAT
	Unk_836453e                         DT_FLOAT
	Unk_4ee8575                         DT_FLOAT
	Unk_14d0aad                         DT_SNO
	Unk_884eb16                         DT_FLOAT
	Unk_9b111e3                         DT_FLOAT
	Unk_25a68ac                         DT_FLOAT
	Unk_b5e6750                         DT_FLOAT
	Unk_ec28624                         DT_FLOAT
	Unk_f070975                         DT_FLOAT
	Unk_db6c589                         DT_FLOAT
	Unk_2dc7eb1                         DT_FLOAT
	Unk_b629779                         DT_FLOAT
	Unk_3f0c40a                         DT_FLOAT
	Unk_e02135                          DT_FLOAT
	Unk_40a2406                         DT_FLOAT
	Unk_bc4473                          DT_FLOAT
	Unk_cb3bd6f                         DT_FLOAT
	Unk_e69e500                         DT_FLOAT
	ArAudioMonsterCategories            DT_VARIABLEARRAY[*AudioMonsterCategory]
	ArTraversalSurfaceOptions           DT_FIXEDARRAY[*TraversalSurfaceOptions]
	Unk_efa9723                         DT_INT
	Unk_2140bd4                         DT_INT
	Unk_9e6e6b5                         DT_INT
	Unk_3d0e848                         DT_INT
	Unk_aa1fd73                         DT_INT
	Unk_88029e3                         DT_INT
	Unk_b56464f                         DT_INT
	Unk_7885a5e                         DT_INT
	Unk_2900bd9                         DT_UINT
	Unk_4f6a577                         DT_UINT
	Unk_410fa4f                         DT_UINT
	Unk_575837                          DT_FLOAT
	Unk_93531cf                         DT_FLOAT
	Unk_4ae2208                         DT_FLOAT
	PtVOParameters                      DT_VARIABLEARRAY[*WwiseGameParameter]
	Unk_5202085                         DT_FLOAT
	Unk_c322de7                         DT_FLOAT
	Unk_aa0944b                         DT_FLOAT
	TShoreWaveSettings                  ShoreWaveSettings
	Unk_fa3df7c                         DT_FLOAT
	Unk_c9c8405                         Type_9934af2e
	TLuxSettings                        LuxSettings
	Unk_553ab0                          Type_220eeabc
	TVertexCountSettings                VertexCountSettings
	TVertexDensitySettings              VertexDensitySettings
	Unk_32acc50                         Type_2d18fb5c
	TLightInfluenceSettings             LightInfluenceSettings
	ArFoleyMaterialTags                 DT_VARIABLEARRAY[*FoleyMaterialTagInfo]
	ArConditionalAudioStates            DT_VARIABLEARRAY[*ConditionalAudioState]
	Unk_77afde8                         UIMargins
	Unk_6c7ea27                         UIMargins
	Unk_23d823e                         UIMargins
	Unk_e54f346                         UIMargins
	Unk_a412bc0                         DT_FLOAT
	Unk_e0c0343                         DT_FLOAT
	Unk_9dd7abd                         DT_FLOAT
	Unk_66301bd                         DT_FLOAT
	Unk_f0e8c35                         DT_FLOAT
	Unk_9b5adac                         DT_FLOAT
	Unk_9db4d03                         DT_FLOAT
	Unk_2d039a1                         DT_FLOAT
	Unk_d87185b                         DT_FLOAT
	Unk_f92dd82                         DT_FLOAT
	Unk_1ed9c8a                         DT_FLOAT
	Unk_85d52d8                         DT_FLOAT
	Unk_e02147a                         DT_FLOAT
	THdrSettings                        HdrSettings
}

func (t *GlobalAVData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.WdMicrophoneHeight, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.WdMicrophoneXYOffset, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.FlMicrophoneTiltCorrection, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.Unk_bcf2fa1, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.FlDopplerFactor, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.FlAttenuationFactor, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.FlFriendlyAttenuationFactor, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.FlEnemyAttenuationFactor, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.Unk_a24f195, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.Unk_de216d0, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.Unk_ee2f4d9, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.Unk_aab60e9, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.Unk_5e1713, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+100, &t.Unk_4889712, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+104, &t.Unk_14c506c, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+108, &t.Unk_9109f33, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.Unk_97eca79, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+116, &t.Unk_9bb9a7b, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.Unk_bff9025, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+124, &t.Unk_6667f4c, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.Unk_d4f116d, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+132, &t.Unk_3d2f7b4, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+136, &t.Unk_d06da3d, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+140, &t.Unk_1c5bd37, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+144, &t.Unk_c1c8d33, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+148, &t.Unk_2d19c28, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+152, &t.Unk_84bd05e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+156, &t.Unk_a674d1f, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+160, &t.Unk_48115e6, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+164, &t.Unk_1140ffa, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+168, &t.FlMultiplayerSmoothing, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+172, &t.Unk_b7979d6, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+176, &t.FlSpringMinSpeed, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+180, &t.FlSpringMaxSpeed, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+184, &t.FlSpringMagnitude, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+188, &t.FlSpringStiffness, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+192, &t.FlOrbitSLerpScalar, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+196, &t.FlOrbitTransitionExponentialScalar, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+200, &t.FlOrbitTransitionDuration, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+204, &t.WvOrbitOffsetCenterForAngleLimiting, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+216, &t.FlOrbitMaxAngleFromOffsetCenter, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+220, &t.VConsoleCameraShakeScalar, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+232, &t.FlZNear, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+236, &t.Unk_4849eb5, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+240, &t.Unk_d16853d, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+244, &t.Unk_efc10ac, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+248, &t.Unk_67c3614, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+252, &t.Unk_6236ef1, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+256, &t.Unk_5d800f3, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+260, &t.Unk_75c2a63, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+264, &t.Unk_32ded65, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+268, &t.Unk_ba7c108, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+272, &t.Unk_ea151f5, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+276, &t.Unk_26bea03, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+280, &t.Unk_26bec71, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+284, &t.Unk_4d37f57, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+288, &t.Unk_fe87183, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+292, &t.Unk_9773164, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+296, &t.Unk_8682ecb, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+300, &t.Unk_b5787f8, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+304, &t.Unk_dacb099, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+308, &t.Unk_1d93a, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+312, &t.Unk_25701db, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+316, &t.Unk_dca1d11, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+320, &t.Unk_dd6ca58, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+324, &t.Unk_14e6af7, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+328, &t.Unk_db836fa, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+332, &t.Unk_ed20455, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+336, &t.Unk_a879fd8, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+340, &t.Unk_614e428, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+344, &t.FlTranslucencyScale, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+348, &t.FlTranslucencyThicknessScale, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+352, &t.FlTranslucencyNormalOffset, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+356, &t.Unk_4450d33, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+360, &t.Unk_52fa93a, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+364, &t.Unk_f719403, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+368, &t.Unk_556d46a, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+372, &t.Unk_25055f1, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+376, &t.Unk_808753f, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+380, &t.Unk_c393e43, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+384, &t.Unk_5149854, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+388, &t.Unk_83c9b2a, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+392, &t.Unk_8e6396a, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+396, &t.Unk_922b1da, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+400, &t.Unk_b08e030, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+404, &t.Unk_26ab22f, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+408, &t.Unk_55f065, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+412, &t.Unk_c8a3761, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+416, &t.Unk_e661bd7, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+420, &t.Unk_f48f9ad, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+432, &t.Unk_f48f8af, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+444, &t.Unk_7f22f2a, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+448, &t.Unk_2665f25, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+452, &t.Unk_c28b473, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+456, &t.Unk_df5ec50, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+460, &t.Unk_620e28d, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+464, &t.Unk_f12663d, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+468, &t.Unk_6bec509, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+472, &t.Unk_4ae734e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+476, &t.Unk_cd9698b, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+480, &t.Unk_d3bbd69, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+484, &t.Unk_5822eea, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+496, &t.Unk_725b405, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+500, &t.Unk_aebfc2b, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+504, &t.Unk_cbab47a, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+508, &t.Unk_d958d9, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+512, &t.Unk_eacf58c, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+516, &t.Unk_13a3e3b, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+520, &t.Unk_cb97e5a, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+524, &t.Unk_8fb07f8, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+528, &t.FlFinalLevels, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+532, &t.Unk_c9de46, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+536, &t.Unk_b3fd1d8, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+540, &t.Unk_5594707, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+544, &t.Unk_ba7e426, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+548, &t.Unk_836453e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+552, &t.Unk_4ee8575, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+556, &t.Unk_14d0aad, r, &Options{
		Flags: 513,
		Group: 26,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+560, &t.Unk_884eb16, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+564, &t.Unk_9b111e3, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+568, &t.Unk_25a68ac, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+572, &t.Unk_b5e6750, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+576, &t.Unk_ec28624, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+580, &t.Unk_f070975, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+584, &t.Unk_db6c589, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+588, &t.Unk_2dc7eb1, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+592, &t.Unk_b629779, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+596, &t.Unk_3f0c40a, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+600, &t.Unk_e02135, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+604, &t.Unk_40a2406, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+608, &t.Unk_bc4473, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+612, &t.Unk_cb3bd6f, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+616, &t.Unk_e69e500, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+624, &t.ArAudioMonsterCategories, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+640, &t.ArTraversalSurfaceOptions, r, &Options{
		ArrayLength: 6,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+736, &t.Unk_efa9723, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+740, &t.Unk_2140bd4, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+744, &t.Unk_9e6e6b5, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+748, &t.Unk_3d0e848, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+752, &t.Unk_aa1fd73, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+756, &t.Unk_88029e3, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+760, &t.Unk_b56464f, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+764, &t.Unk_7885a5e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+768, &t.Unk_2900bd9, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+772, &t.Unk_4f6a577, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+776, &t.Unk_410fa4f, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+780, &t.Unk_575837, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+784, &t.Unk_93531cf, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+788, &t.Unk_4ae2208, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+792, &t.PtVOParameters, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+808, &t.Unk_5202085, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+812, &t.Unk_c322de7, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+816, &t.Unk_aa0944b, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+820, &t.TShoreWaveSettings, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+852, &t.Unk_fa3df7c, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+856, &t.Unk_c9c8405, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+908, &t.TLuxSettings, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+916, &t.Unk_553ab0, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+952, &t.TVertexCountSettings, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+960, &t.TVertexDensitySettings, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+964, &t.Unk_32acc50, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+980, &t.TLightInfluenceSettings, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+984, &t.ArFoleyMaterialTags, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1000, &t.ArConditionalAudioStates, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1016, &t.Unk_77afde8, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1032, &t.Unk_6c7ea27, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1048, &t.Unk_23d823e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1064, &t.Unk_e54f346, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1080, &t.Unk_a412bc0, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1084, &t.Unk_e0c0343, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1088, &t.Unk_9dd7abd, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1092, &t.Unk_66301bd, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1096, &t.Unk_f0e8c35, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1100, &t.Unk_9b5adac, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1104, &t.Unk_9db4d03, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1108, &t.Unk_2d039a1, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1112, &t.Unk_d87185b, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1116, &t.Unk_f92dd82, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1120, &t.Unk_1ed9c8a, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1124, &t.Unk_85d52d8, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1128, &t.Unk_e02147a, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1132, &t.THdrSettings, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+1136, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *GlobalAVData) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("WdMicrophoneHeight", &t.WdMicrophoneHeight)
	cb.Do("WdMicrophoneXYOffset", &t.WdMicrophoneXYOffset)
	cb.Do("FlMicrophoneTiltCorrection", &t.FlMicrophoneTiltCorrection)
	cb.Do("Unk_bcf2fa1", &t.Unk_bcf2fa1)
	cb.Do("FlDopplerFactor", &t.FlDopplerFactor)
	cb.Do("FlAttenuationFactor", &t.FlAttenuationFactor)
	cb.Do("FlFriendlyAttenuationFactor", &t.FlFriendlyAttenuationFactor)
	cb.Do("FlEnemyAttenuationFactor", &t.FlEnemyAttenuationFactor)
	cb.Do("Unk_a24f195", &t.Unk_a24f195)
	cb.Do("Unk_de216d0", &t.Unk_de216d0)
	cb.Do("Unk_ee2f4d9", &t.Unk_ee2f4d9)
	cb.Do("Unk_aab60e9", &t.Unk_aab60e9)
	cb.Do("Unk_5e1713", &t.Unk_5e1713)
	cb.Do("Unk_4889712", &t.Unk_4889712)
	cb.Do("Unk_14c506c", &t.Unk_14c506c)
	cb.Do("Unk_9109f33", &t.Unk_9109f33)
	cb.Do("Unk_97eca79", &t.Unk_97eca79)
	cb.Do("Unk_9bb9a7b", &t.Unk_9bb9a7b)
	cb.Do("Unk_bff9025", &t.Unk_bff9025)
	cb.Do("Unk_6667f4c", &t.Unk_6667f4c)
	cb.Do("Unk_d4f116d", &t.Unk_d4f116d)
	cb.Do("Unk_3d2f7b4", &t.Unk_3d2f7b4)
	cb.Do("Unk_d06da3d", &t.Unk_d06da3d)
	cb.Do("Unk_1c5bd37", &t.Unk_1c5bd37)
	cb.Do("Unk_c1c8d33", &t.Unk_c1c8d33)
	cb.Do("Unk_2d19c28", &t.Unk_2d19c28)
	cb.Do("Unk_84bd05e", &t.Unk_84bd05e)
	cb.Do("Unk_a674d1f", &t.Unk_a674d1f)
	cb.Do("Unk_48115e6", &t.Unk_48115e6)
	cb.Do("Unk_1140ffa", &t.Unk_1140ffa)
	cb.Do("FlMultiplayerSmoothing", &t.FlMultiplayerSmoothing)
	cb.Do("Unk_b7979d6", &t.Unk_b7979d6)
	cb.Do("FlSpringMinSpeed", &t.FlSpringMinSpeed)
	cb.Do("FlSpringMaxSpeed", &t.FlSpringMaxSpeed)
	cb.Do("FlSpringMagnitude", &t.FlSpringMagnitude)
	cb.Do("FlSpringStiffness", &t.FlSpringStiffness)
	cb.Do("FlOrbitSLerpScalar", &t.FlOrbitSLerpScalar)
	cb.Do("FlOrbitTransitionExponentialScalar", &t.FlOrbitTransitionExponentialScalar)
	cb.Do("FlOrbitTransitionDuration", &t.FlOrbitTransitionDuration)
	cb.Do("WvOrbitOffsetCenterForAngleLimiting", &t.WvOrbitOffsetCenterForAngleLimiting)
	cb.Do("FlOrbitMaxAngleFromOffsetCenter", &t.FlOrbitMaxAngleFromOffsetCenter)
	cb.Do("VConsoleCameraShakeScalar", &t.VConsoleCameraShakeScalar)
	cb.Do("FlZNear", &t.FlZNear)
	cb.Do("Unk_4849eb5", &t.Unk_4849eb5)
	cb.Do("Unk_d16853d", &t.Unk_d16853d)
	cb.Do("Unk_efc10ac", &t.Unk_efc10ac)
	cb.Do("Unk_67c3614", &t.Unk_67c3614)
	cb.Do("Unk_6236ef1", &t.Unk_6236ef1)
	cb.Do("Unk_5d800f3", &t.Unk_5d800f3)
	cb.Do("Unk_75c2a63", &t.Unk_75c2a63)
	cb.Do("Unk_32ded65", &t.Unk_32ded65)
	cb.Do("Unk_ba7c108", &t.Unk_ba7c108)
	cb.Do("Unk_ea151f5", &t.Unk_ea151f5)
	cb.Do("Unk_26bea03", &t.Unk_26bea03)
	cb.Do("Unk_26bec71", &t.Unk_26bec71)
	cb.Do("Unk_4d37f57", &t.Unk_4d37f57)
	cb.Do("Unk_fe87183", &t.Unk_fe87183)
	cb.Do("Unk_9773164", &t.Unk_9773164)
	cb.Do("Unk_8682ecb", &t.Unk_8682ecb)
	cb.Do("Unk_b5787f8", &t.Unk_b5787f8)
	cb.Do("Unk_dacb099", &t.Unk_dacb099)
	cb.Do("Unk_1d93a", &t.Unk_1d93a)
	cb.Do("Unk_25701db", &t.Unk_25701db)
	cb.Do("Unk_dca1d11", &t.Unk_dca1d11)
	cb.Do("Unk_dd6ca58", &t.Unk_dd6ca58)
	cb.Do("Unk_14e6af7", &t.Unk_14e6af7)
	cb.Do("Unk_db836fa", &t.Unk_db836fa)
	cb.Do("Unk_ed20455", &t.Unk_ed20455)
	cb.Do("Unk_a879fd8", &t.Unk_a879fd8)
	cb.Do("Unk_614e428", &t.Unk_614e428)
	cb.Do("FlTranslucencyScale", &t.FlTranslucencyScale)
	cb.Do("FlTranslucencyThicknessScale", &t.FlTranslucencyThicknessScale)
	cb.Do("FlTranslucencyNormalOffset", &t.FlTranslucencyNormalOffset)
	cb.Do("Unk_4450d33", &t.Unk_4450d33)
	cb.Do("Unk_52fa93a", &t.Unk_52fa93a)
	cb.Do("Unk_f719403", &t.Unk_f719403)
	cb.Do("Unk_556d46a", &t.Unk_556d46a)
	cb.Do("Unk_25055f1", &t.Unk_25055f1)
	cb.Do("Unk_808753f", &t.Unk_808753f)
	cb.Do("Unk_c393e43", &t.Unk_c393e43)
	cb.Do("Unk_5149854", &t.Unk_5149854)
	cb.Do("Unk_83c9b2a", &t.Unk_83c9b2a)
	cb.Do("Unk_8e6396a", &t.Unk_8e6396a)
	cb.Do("Unk_922b1da", &t.Unk_922b1da)
	cb.Do("Unk_b08e030", &t.Unk_b08e030)
	cb.Do("Unk_26ab22f", &t.Unk_26ab22f)
	cb.Do("Unk_55f065", &t.Unk_55f065)
	cb.Do("Unk_c8a3761", &t.Unk_c8a3761)
	cb.Do("Unk_e661bd7", &t.Unk_e661bd7)
	cb.Do("Unk_f48f9ad", &t.Unk_f48f9ad)
	cb.Do("Unk_f48f8af", &t.Unk_f48f8af)
	cb.Do("Unk_7f22f2a", &t.Unk_7f22f2a)
	cb.Do("Unk_2665f25", &t.Unk_2665f25)
	cb.Do("Unk_c28b473", &t.Unk_c28b473)
	cb.Do("Unk_df5ec50", &t.Unk_df5ec50)
	cb.Do("Unk_620e28d", &t.Unk_620e28d)
	cb.Do("Unk_f12663d", &t.Unk_f12663d)
	cb.Do("Unk_6bec509", &t.Unk_6bec509)
	cb.Do("Unk_4ae734e", &t.Unk_4ae734e)
	cb.Do("Unk_cd9698b", &t.Unk_cd9698b)
	cb.Do("Unk_d3bbd69", &t.Unk_d3bbd69)
	cb.Do("Unk_5822eea", &t.Unk_5822eea)
	cb.Do("Unk_725b405", &t.Unk_725b405)
	cb.Do("Unk_aebfc2b", &t.Unk_aebfc2b)
	cb.Do("Unk_cbab47a", &t.Unk_cbab47a)
	cb.Do("Unk_d958d9", &t.Unk_d958d9)
	cb.Do("Unk_eacf58c", &t.Unk_eacf58c)
	cb.Do("Unk_13a3e3b", &t.Unk_13a3e3b)
	cb.Do("Unk_cb97e5a", &t.Unk_cb97e5a)
	cb.Do("Unk_8fb07f8", &t.Unk_8fb07f8)
	cb.Do("FlFinalLevels", &t.FlFinalLevels)
	cb.Do("Unk_c9de46", &t.Unk_c9de46)
	cb.Do("Unk_b3fd1d8", &t.Unk_b3fd1d8)
	cb.Do("Unk_5594707", &t.Unk_5594707)
	cb.Do("Unk_ba7e426", &t.Unk_ba7e426)
	cb.Do("Unk_836453e", &t.Unk_836453e)
	cb.Do("Unk_4ee8575", &t.Unk_4ee8575)
	cb.Do("Unk_14d0aad", &t.Unk_14d0aad)
	cb.Do("Unk_884eb16", &t.Unk_884eb16)
	cb.Do("Unk_9b111e3", &t.Unk_9b111e3)
	cb.Do("Unk_25a68ac", &t.Unk_25a68ac)
	cb.Do("Unk_b5e6750", &t.Unk_b5e6750)
	cb.Do("Unk_ec28624", &t.Unk_ec28624)
	cb.Do("Unk_f070975", &t.Unk_f070975)
	cb.Do("Unk_db6c589", &t.Unk_db6c589)
	cb.Do("Unk_2dc7eb1", &t.Unk_2dc7eb1)
	cb.Do("Unk_b629779", &t.Unk_b629779)
	cb.Do("Unk_3f0c40a", &t.Unk_3f0c40a)
	cb.Do("Unk_e02135", &t.Unk_e02135)
	cb.Do("Unk_40a2406", &t.Unk_40a2406)
	cb.Do("Unk_bc4473", &t.Unk_bc4473)
	cb.Do("Unk_cb3bd6f", &t.Unk_cb3bd6f)
	cb.Do("Unk_e69e500", &t.Unk_e69e500)
	cb.Do("ArAudioMonsterCategories", &t.ArAudioMonsterCategories)
	cb.Do("ArTraversalSurfaceOptions", &t.ArTraversalSurfaceOptions)
	cb.Do("Unk_efa9723", &t.Unk_efa9723)
	cb.Do("Unk_2140bd4", &t.Unk_2140bd4)
	cb.Do("Unk_9e6e6b5", &t.Unk_9e6e6b5)
	cb.Do("Unk_3d0e848", &t.Unk_3d0e848)
	cb.Do("Unk_aa1fd73", &t.Unk_aa1fd73)
	cb.Do("Unk_88029e3", &t.Unk_88029e3)
	cb.Do("Unk_b56464f", &t.Unk_b56464f)
	cb.Do("Unk_7885a5e", &t.Unk_7885a5e)
	cb.Do("Unk_2900bd9", &t.Unk_2900bd9)
	cb.Do("Unk_4f6a577", &t.Unk_4f6a577)
	cb.Do("Unk_410fa4f", &t.Unk_410fa4f)
	cb.Do("Unk_575837", &t.Unk_575837)
	cb.Do("Unk_93531cf", &t.Unk_93531cf)
	cb.Do("Unk_4ae2208", &t.Unk_4ae2208)
	cb.Do("PtVOParameters", &t.PtVOParameters)
	cb.Do("Unk_5202085", &t.Unk_5202085)
	cb.Do("Unk_c322de7", &t.Unk_c322de7)
	cb.Do("Unk_aa0944b", &t.Unk_aa0944b)
	cb.Do("TShoreWaveSettings", &t.TShoreWaveSettings)
	cb.Do("Unk_fa3df7c", &t.Unk_fa3df7c)
	cb.Do("Unk_c9c8405", &t.Unk_c9c8405)
	cb.Do("TLuxSettings", &t.TLuxSettings)
	cb.Do("Unk_553ab0", &t.Unk_553ab0)
	cb.Do("TVertexCountSettings", &t.TVertexCountSettings)
	cb.Do("TVertexDensitySettings", &t.TVertexDensitySettings)
	cb.Do("Unk_32acc50", &t.Unk_32acc50)
	cb.Do("TLightInfluenceSettings", &t.TLightInfluenceSettings)
	cb.Do("ArFoleyMaterialTags", &t.ArFoleyMaterialTags)
	cb.Do("ArConditionalAudioStates", &t.ArConditionalAudioStates)
	cb.Do("Unk_77afde8", &t.Unk_77afde8)
	cb.Do("Unk_6c7ea27", &t.Unk_6c7ea27)
	cb.Do("Unk_23d823e", &t.Unk_23d823e)
	cb.Do("Unk_e54f346", &t.Unk_e54f346)
	cb.Do("Unk_a412bc0", &t.Unk_a412bc0)
	cb.Do("Unk_e0c0343", &t.Unk_e0c0343)
	cb.Do("Unk_9dd7abd", &t.Unk_9dd7abd)
	cb.Do("Unk_66301bd", &t.Unk_66301bd)
	cb.Do("Unk_f0e8c35", &t.Unk_f0e8c35)
	cb.Do("Unk_9b5adac", &t.Unk_9b5adac)
	cb.Do("Unk_9db4d03", &t.Unk_9db4d03)
	cb.Do("Unk_2d039a1", &t.Unk_2d039a1)
	cb.Do("Unk_d87185b", &t.Unk_d87185b)
	cb.Do("Unk_f92dd82", &t.Unk_f92dd82)
	cb.Do("Unk_1ed9c8a", &t.Unk_1ed9c8a)
	cb.Do("Unk_85d52d8", &t.Unk_85d52d8)
	cb.Do("Unk_e02147a", &t.Unk_e02147a)
	cb.Do("THdrSettings", &t.THdrSettings)
}

type AlphaBlendFactors struct {
	FAlphaBlendEnable DT_INT
	EBlendOp          DT_ENUM
	ESrcBlendFactor   DT_ENUM
	EDestBlendFactor  DT_ENUM
	Unk_102510d       DT_INT
	EBlendOpAlpha     DT_ENUM
	Unk_d05eb97       DT_ENUM
	Unk_4011abf       DT_ENUM
	Unk_9920e8a       DT_INT
	Unk_f1d0b5f       DT_INT
	Unk_a5c387a       DT_INT
	Unk_968db19       DT_INT
}

func (t *AlphaBlendFactors) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.FAlphaBlendEnable, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.EBlendOp, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.ESrcBlendFactor, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.EDestBlendFactor, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_102510d, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.EBlendOpAlpha, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_d05eb97, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.Unk_4011abf, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.Unk_9920e8a, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.Unk_f1d0b5f, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.Unk_a5c387a, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.Unk_968db19, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *AlphaBlendFactors) Walk(cb WalkCallback) {
	cb.Do("FAlphaBlendEnable", &t.FAlphaBlendEnable)
	cb.Do("EBlendOp", &t.EBlendOp)
	cb.Do("ESrcBlendFactor", &t.ESrcBlendFactor)
	cb.Do("EDestBlendFactor", &t.EDestBlendFactor)
	cb.Do("Unk_102510d", &t.Unk_102510d)
	cb.Do("EBlendOpAlpha", &t.EBlendOpAlpha)
	cb.Do("Unk_d05eb97", &t.Unk_d05eb97)
	cb.Do("Unk_4011abf", &t.Unk_4011abf)
	cb.Do("Unk_9920e8a", &t.Unk_9920e8a)
	cb.Do("Unk_f1d0b5f", &t.Unk_f1d0b5f)
	cb.Do("Unk_a5c387a", &t.Unk_a5c387a)
	cb.Do("Unk_968db19", &t.Unk_968db19)
}

type Type_cb426572 struct {
	// Inherits Subcondition
	// Inherits PolymorphicBase
	DwType         DT_UINT
	BNegate        DT_INT
	DwPad          DT_UINT
	SnoAchievement DT_SNO
}

func (t *Type_cb426572) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BNegate, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SnoAchievement, r, &Options{
		Flags: 513,
		Group: 99,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_cb426572) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("BNegate", &t.BNegate)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("SnoAchievement", &t.SnoAchievement)
}

type GameTestingInteractNPC struct {
	THeader   RequiredMessageHeader
	SzNPCName DT_CHARARRAY
}

func (t *GameTestingInteractNPC) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SzNPCName, r, &Options{
		ArrayLength: 64,
		Flags:       1,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+80, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *GameTestingInteractNPC) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("SzNPCName", &t.SzNPCName)
}

type NetAttributeKeyValue struct {
	NKeyParam  DT_OPTIONAL[*DT_INT]
	EKeyAttrib DT_ENUM
}

func (t *NetAttributeKeyValue) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.NKeyParam, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.EKeyAttrib, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *NetAttributeKeyValue) Walk(cb WalkCallback) {
	cb.Do("NKeyParam", &t.NKeyParam)
	cb.Do("EKeyAttrib", &t.EKeyAttrib)
}

type Type_cb807741 struct {
	// Inherits Type_7e418ba8
	// Inherits PolymorphicBase
	DwType       DT_UINT
	Unk_2de4987  DT_UINT
	ArConditions DT_POLYMORPHIC_VARIABLEARRAY[*DT_INT64]
	BEnd         DT_INT
	DwPad        DT_UINT
}

func (t *Type_cb807741) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_2de4987, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ArConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.BEnd, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+56, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_cb807741) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("Unk_2de4987", &t.Unk_2de4987)
	cb.Do("ArConditions", &t.ArConditions)
	cb.Do("BEnd", &t.BEnd)
	cb.Do("DwPad", &t.DwPad)
}

type ZoneProgressEarnedMessage struct {
	THeader         RequiredMessageHeader
	WpPlace         SharedServerWorldPlace
	EZone           DT_ENUM
	NProgressAmount DT_INT
	Unk_40f5b6      DT_INT
	Unk_71c18eb     DT_ENUM
}

func (t *ZoneProgressEarnedMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.WpPlace, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.EZone, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.NProgressAmount, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.Unk_40f5b6, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.Unk_71c18eb, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+52, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ZoneProgressEarnedMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("WpPlace", &t.WpPlace)
	cb.Do("EZone", &t.EZone)
	cb.Do("NProgressAmount", &t.NProgressAmount)
	cb.Do("Unk_40f5b6", &t.Unk_40f5b6)
	cb.Do("Unk_71c18eb", &t.Unk_71c18eb)
}

type LightDefinition struct {
	DwFlags        DT_UINT
	NPriority      DT_INT
	DwMaxInstances DT_UINT
	TInstanceData  LightInstanceData
	Unk_383f1ce    DT_FLOAT
	Unk_b9c2829    DT_FLOAT
}

func (t *LightDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.NPriority, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.DwMaxInstances, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.TInstanceData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+920, &t.Unk_383f1ce, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+924, &t.Unk_b9c2829, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+928, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *LightDefinition) Walk(cb WalkCallback) {
	cb.Do("DwFlags", &t.DwFlags)
	cb.Do("NPriority", &t.NPriority)
	cb.Do("DwMaxInstances", &t.DwMaxInstances)
	cb.Do("TInstanceData", &t.TInstanceData)
	cb.Do("Unk_383f1ce", &t.Unk_383f1ce)
	cb.Do("Unk_b9c2829", &t.Unk_b9c2829)
}

type CheatCampaignStateMessage struct {
	THeader           RequiredMessageHeader
	Unk_4675a7c       DT_INT
	Unk_5f40a5f       DT_INT
	ArCompletedQuests DT_FIXEDARRAY[*DT_SNO]
}

func (t *CheatCampaignStateMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_4675a7c, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.Unk_5f40a5f, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ArCompletedQuests, r, &Options{
		ArrayLength: 128,
		Flags:       9,
		Group:       31,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+540, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *CheatCampaignStateMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("Unk_4675a7c", &t.Unk_4675a7c)
	cb.Do("Unk_5f40a5f", &t.Unk_5f40a5f)
	cb.Do("ArCompletedQuests", &t.ArCompletedQuests)
}

type Type_cbfdd2ea struct {
	THeader      InterpolationPathHeader
	PtArrayNodes DT_VARIABLEARRAY[*Type_77aada63]
}

func (t *Type_cbfdd2ea) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.PtArrayNodes, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+56, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_cbfdd2ea) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("PtArrayNodes", &t.PtArrayNodes)
}

type Type_cbfe6328 struct {
	// Inherits PowerConditionBase
	// Inherits PolymorphicBase
	DwType   DT_UINT
	BInverse DT_INT
	DwPad    DT_UINT
	ESubject DT_ENUM
}

func (t *Type_cbfe6328) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BInverse, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ESubject, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_cbfe6328) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("BInverse", &t.BInverse)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("ESubject", &t.ESubject)
}

type Type_cc139f31 struct {
	AfFrequency  DT_FIXEDARRAY[*DT_FLOAT]
	AfBend       DT_FIXEDARRAY[*DT_FLOAT]
	AfTurbulence DT_FIXEDARRAY[*DT_FLOAT]
	Unk_2a283cc  DT_FIXEDARRAY[*DT_FLOAT]
	Unk_5c74a81  DT_FLOAT
}

func (t *Type_cc139f31) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.AfFrequency, r, &Options{
		ArrayLength: 20,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.AfBend, r, &Options{
		ArrayLength: 20,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+160, &t.AfTurbulence, r, &Options{
		ArrayLength: 20,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+240, &t.Unk_2a283cc, r, &Options{
		ArrayLength: 20,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+320, &t.Unk_5c74a81, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+324, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_cc139f31) Walk(cb WalkCallback) {
	cb.Do("AfFrequency", &t.AfFrequency)
	cb.Do("AfBend", &t.AfBend)
	cb.Do("AfTurbulence", &t.AfTurbulence)
	cb.Do("Unk_2a283cc", &t.Unk_2a283cc)
	cb.Do("Unk_5c74a81", &t.Unk_5c74a81)
}

type OnProjectileImpactPowerCallback struct {
	// Inherits PowerCallbackBase
	// Inherits PolymorphicBase
	DwType                DT_UINT
	DwPad                 DT_UINT
	SnoTriggerEffectGroup DT_SNO
	BCouldHaveRagdolled   DT_INT
	THitTargetEffect      ProjectileImpactEffect
	THitSceneEffect       ProjectileImpactEffect
	Unk_36b012            ProjectileImpactEffect
}

func (t *OnProjectileImpactPowerCallback) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoTriggerEffectGroup, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.BCouldHaveRagdolled, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.THitTargetEffect, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.THitSceneEffect, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_36b012, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+96, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *OnProjectileImpactPowerCallback) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("SnoTriggerEffectGroup", &t.SnoTriggerEffectGroup)
	cb.Do("BCouldHaveRagdolled", &t.BCouldHaveRagdolled)
	cb.Do("THitTargetEffect", &t.THitTargetEffect)
	cb.Do("THitSceneEffect", &t.THitSceneEffect)
	cb.Do("Unk_36b012", &t.Unk_36b012)
}

type Type_cc354444 struct {
	THeader      InterpolationPathHeader
	PtArrayNodes DT_VARIABLEARRAY[*Type_77e24bbd]
}

func (t *Type_cc354444) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.PtArrayNodes, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+56, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_cc354444) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("PtArrayNodes", &t.PtArrayNodes)
}

type SkillRankChangedMessage struct {
	THeader               RequiredMessageHeader
	DwPlayerGameAccountId DT_UINT
	SnoPower              DT_SNO
	DwRank                DT_UINT
	BFromTome             DT_INT
}

func (t *SkillRankChangedMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.DwPlayerGameAccountId, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.SnoPower, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.DwRank, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.BFromTome, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *SkillRankChangedMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("DwPlayerGameAccountId", &t.DwPlayerGameAccountId)
	cb.Do("SnoPower", &t.SnoPower)
	cb.Do("DwRank", &t.DwRank)
	cb.Do("BFromTome", &t.BFromTome)
}

type PortalSpecifierMessage struct {
	THeader       RequiredMessageHeader
	Ann           DT_ACD_NETWORK_NAME
	TResolvedDest ResolvedPortalDestination
}

func (t *PortalSpecifierMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Ann, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.TResolvedDest, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+36, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PortalSpecifierMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("Ann", &t.Ann)
	cb.Do("TResolvedDest", &t.TResolvedDest)
}

type ScriptedAchievementEvent_Table struct {
	// Inherits GameBalanceTable
	// Inherits PolymorphicBase
	DwType   DT_UINT
	DwPad    DT_UINT
	TEntries DT_VARIABLEARRAY[*ScriptedAchievementEvent]
}

func (t *ScriptedAchievementEvent_Table) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TEntries, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ScriptedAchievementEvent_Table) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("TEntries", &t.TEntries)
}

type CriteriaDefinition struct {
	UID                DT_UINT
	UNecessaryQuantity DT_INT64
	TStartEvent        CriteriaStartEvent
	TAdvanceEvent      CriteriaEvent
	TFailEvent         CriteriaEvent
	UFlags             DT_UINT
}

func (t *CriteriaDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.UID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.UNecessaryQuantity, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TStartEvent, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.TAdvanceEvent, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+216, &t.TFailEvent, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+312, &t.UFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if _, err := r.Seek(p+320, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *CriteriaDefinition) Walk(cb WalkCallback) {
	cb.Do("UID", &t.UID)
	cb.Do("UNecessaryQuantity", &t.UNecessaryQuantity)
	cb.Do("TStartEvent", &t.TStartEvent)
	cb.Do("TAdvanceEvent", &t.TAdvanceEvent)
	cb.Do("TFailEvent", &t.TFailEvent)
	cb.Do("UFlags", &t.UFlags)
}

type NPCComponentSetPreloadHelper struct {
	SnoActor        DT_SNO
	SnoComponentSet DT_SNO
	TBaseData       Type_f5c4e3ed
	TSlots          SerialDataInfo
}

func (t *NPCComponentSetPreloadHelper) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoActor, r, &Options{
		Flags: 1,
		Group: 1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.SnoComponentSet, r, &Options{
		Flags: 1,
		Group: 1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.TBaseData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.TSlots, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *NPCComponentSetPreloadHelper) Walk(cb WalkCallback) {
	cb.Do("SnoActor", &t.SnoActor)
	cb.Do("SnoComponentSet", &t.SnoComponentSet)
	cb.Do("TBaseData", &t.TBaseData)
	cb.Do("TSlots", &t.TSlots)
}

type Type_ccd96a71 struct {
	Unk_a2bea27          DT_SNO
	ArCampaignConditions DT_VARIABLEARRAY[*Type_bf3bc347]
}

func (t *Type_ccd96a71) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Unk_a2bea27, r, &Options{
		Flags: 513,
		Group: 44,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.ArCampaignConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_ccd96a71) Walk(cb WalkCallback) {
	cb.Do("Unk_a2bea27", &t.Unk_a2bea27)
	cb.Do("ArCampaignConditions", &t.ArCampaignConditions)
}

type ConversationScopeNode struct {
	// Inherits ConversationTreeNode
	// Inherits PolymorphicBase
	DwType         DT_UINT
	DwPad          DT_UINT
	DwNodeID       DT_UINT
	DwNextNodeID   DT_UINT
	DwParentNodeID DT_UINT
	PtNextNode     DT_INT64
	DwFlags        DT_UINT
	SzComment      DT_CSTRING[*DT_BYTE]
	ArChildNodes   DT_POLYMORPHIC_VARIABLEARRAY[*DT_INT64]
	SnoCondition   DT_SNO
	Unk_d8bf9e4    DT_INT
}

func (t *ConversationScopeNode) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.DwNodeID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwNextNodeID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.DwParentNodeID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.PtNextNode, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.DwFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.SzComment, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.ArChildNodes, r, &Options{Flags: 262145}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.SnoCondition, r, &Options{
		Flags: 1,
		Group: 51,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.Unk_d8bf9e4, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+96, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ConversationScopeNode) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("DwNodeID", &t.DwNodeID)
	cb.Do("DwNextNodeID", &t.DwNextNodeID)
	cb.Do("DwParentNodeID", &t.DwParentNodeID)
	cb.Do("PtNextNode", &t.PtNextNode)
	cb.Do("DwFlags", &t.DwFlags)
	cb.Do("SzComment", &t.SzComment)
	cb.Do("ArChildNodes", &t.ArChildNodes)
	cb.Do("SnoCondition", &t.SnoCondition)
	cb.Do("Unk_d8bf9e4", &t.Unk_d8bf9e4)
}

type LightInfluenceSettings struct {
	Unk_8854fb0 DT_FLOAT
}

func (t *LightInfluenceSettings) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Unk_8854fb0, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+4, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *LightInfluenceSettings) Walk(cb WalkCallback) {
	cb.Do("Unk_8854fb0", &t.Unk_8854fb0)
}

type Type_cd36f214 struct {
	FlTextInsetX               DT_FLOAT
	FlTextInsetY               DT_FLOAT
	FlTextPaddingL             DT_FLOAT
	FlTextPaddingT             DT_FLOAT
	FlTextPaddingR             DT_FLOAT
	FlTextPaddingB             DT_FLOAT
	HText                      StringLabelHandleEx
	NFontSizeFallback          DT_INT
	Unk_ad7d5ca                DT_INT
	Unk_748233d                DT_INT
	ETextJustify               DT_ENUM
	ETextJustifyVertical       DT_ENUM
	FlTextAdvanceScalar        DT_FLOAT
	FlTextLineSpacingScalar    DT_FLOAT
	BTextAllCaps               DT_INT
	NTextLinesBeforeTruncation DT_INT
	BWordWrap                  DT_INT
	BShrinkToFit               DT_INT
	EResizeToFit               DT_ENUM
	BHyperlinkAware            DT_INT
	BPassword                  DT_INT
	BSelectable                DT_INT
	BUseDropShadow             DT_INT
	Unk_c5637af                DT_INT
	Unk_9e52c15                DT_INT
	Unk_4a9de9d                DT_UINT
}

func (t *Type_cd36f214) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.FlTextInsetX, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.FlTextInsetY, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.FlTextPaddingL, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.FlTextPaddingT, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.FlTextPaddingR, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.FlTextPaddingB, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.HText, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.NFontSizeFallback, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.Unk_ad7d5ca, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.Unk_748233d, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.ETextJustify, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.ETextJustifyVertical, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.FlTextAdvanceScalar, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.FlTextLineSpacingScalar, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+60, &t.BTextAllCaps, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.NTextLinesBeforeTruncation, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.BWordWrap, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.BShrinkToFit, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.EResizeToFit, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.BHyperlinkAware, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.BPassword, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.BSelectable, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.BUseDropShadow, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.Unk_c5637af, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+100, &t.Unk_9e52c15, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+104, &t.Unk_4a9de9d, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+108, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_cd36f214) Walk(cb WalkCallback) {
	cb.Do("FlTextInsetX", &t.FlTextInsetX)
	cb.Do("FlTextInsetY", &t.FlTextInsetY)
	cb.Do("FlTextPaddingL", &t.FlTextPaddingL)
	cb.Do("FlTextPaddingT", &t.FlTextPaddingT)
	cb.Do("FlTextPaddingR", &t.FlTextPaddingR)
	cb.Do("FlTextPaddingB", &t.FlTextPaddingB)
	cb.Do("HText", &t.HText)
	cb.Do("NFontSizeFallback", &t.NFontSizeFallback)
	cb.Do("Unk_ad7d5ca", &t.Unk_ad7d5ca)
	cb.Do("Unk_748233d", &t.Unk_748233d)
	cb.Do("ETextJustify", &t.ETextJustify)
	cb.Do("ETextJustifyVertical", &t.ETextJustifyVertical)
	cb.Do("FlTextAdvanceScalar", &t.FlTextAdvanceScalar)
	cb.Do("FlTextLineSpacingScalar", &t.FlTextLineSpacingScalar)
	cb.Do("BTextAllCaps", &t.BTextAllCaps)
	cb.Do("NTextLinesBeforeTruncation", &t.NTextLinesBeforeTruncation)
	cb.Do("BWordWrap", &t.BWordWrap)
	cb.Do("BShrinkToFit", &t.BShrinkToFit)
	cb.Do("EResizeToFit", &t.EResizeToFit)
	cb.Do("BHyperlinkAware", &t.BHyperlinkAware)
	cb.Do("BPassword", &t.BPassword)
	cb.Do("BSelectable", &t.BSelectable)
	cb.Do("BUseDropShadow", &t.BUseDropShadow)
	cb.Do("Unk_c5637af", &t.Unk_c5637af)
	cb.Do("Unk_9e52c15", &t.Unk_9e52c15)
	cb.Do("Unk_4a9de9d", &t.Unk_4a9de9d)
}

type SoundDefinition struct {
	DwFlags            DT_UINT
	TSoundPlayHistory  SoundPlayHistory
	Unk_4a3e716        DT_SNO
	SnoSoundBankMedia  DT_SNO
	Unk_fec55de        DT_UINT
	DwWwiseFlags       DT_UINT
	FlMaxRange         DT_FLOAT
	Unk_5757423        DT_VARIABLEARRAY[*AttackerEnemiesParam]
	SnoStopSound       DT_SNO
	FlCooldownDuration DT_FLOAT
	Unk_dc0bc5b        DT_INT
	Unk_7c7f1a2        DT_FLOAT
	Unk_a86caeb        DT_FLOAT
	FlDopplerFactor    DT_FLOAT
	Unk_f056ee9        DT_FLOAT
	Unk_f056deb        DT_FLOAT
}

func (t *SoundDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.TSoundPlayHistory, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.Unk_4a3e716, r, &Options{
		Flags: 1,
		Group: 71,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.SnoSoundBankMedia, r, &Options{
		Flags: 1,
		Group: 71,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.Unk_fec55de, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.DwWwiseFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.FlMaxRange, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.Unk_5757423, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.SnoStopSound, r, &Options{
		Flags: 1,
		Group: 40,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.FlCooldownDuration, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.Unk_dc0bc5b, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.Unk_7c7f1a2, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.Unk_a86caeb, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.FlDopplerFactor, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.Unk_f056ee9, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+100, &t.Unk_f056deb, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+104, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *SoundDefinition) Walk(cb WalkCallback) {
	cb.Do("DwFlags", &t.DwFlags)
	cb.Do("TSoundPlayHistory", &t.TSoundPlayHistory)
	cb.Do("Unk_4a3e716", &t.Unk_4a3e716)
	cb.Do("SnoSoundBankMedia", &t.SnoSoundBankMedia)
	cb.Do("Unk_fec55de", &t.Unk_fec55de)
	cb.Do("DwWwiseFlags", &t.DwWwiseFlags)
	cb.Do("FlMaxRange", &t.FlMaxRange)
	cb.Do("Unk_5757423", &t.Unk_5757423)
	cb.Do("SnoStopSound", &t.SnoStopSound)
	cb.Do("FlCooldownDuration", &t.FlCooldownDuration)
	cb.Do("Unk_dc0bc5b", &t.Unk_dc0bc5b)
	cb.Do("Unk_7c7f1a2", &t.Unk_7c7f1a2)
	cb.Do("Unk_a86caeb", &t.Unk_a86caeb)
	cb.Do("FlDopplerFactor", &t.FlDopplerFactor)
	cb.Do("Unk_f056ee9", &t.Unk_f056ee9)
	cb.Do("Unk_f056deb", &t.Unk_f056deb)
}

type Type_cd5b4347 struct {
	ArVertexAO DT_VARIABLEARRAY[*DT_BYTE]
}

func (t *Type_cd5b4347) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.ArVertexAO, r, &Options{Flags: 2097153}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_cd5b4347) Walk(cb WalkCallback) {
	cb.Do("ArVertexAO", &t.ArVertexAO)
}

type Type_cd74fce5 struct {
	Unk_b564d43  DT_SNO
	ArConditions DT_VARIABLEARRAY[*DT_SNO]
}

func (t *Type_cd74fce5) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Unk_b564d43, r, &Options{
		Flags: 1,
		Group: 42,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.ArConditions, r, &Options{
		Flags: 1,
		Group: 51,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_cd74fce5) Walk(cb WalkCallback) {
	cb.Do("Unk_b564d43", &t.Unk_b564d43)
	cb.Do("ArConditions", &t.ArConditions)
}

type GameTestingPurchaseSkill struct {
	THeader     RequiredMessageHeader
	DwNodeIndex DT_UINT
}

func (t *GameTestingPurchaseSkill) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.DwNodeIndex, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+20, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *GameTestingPurchaseSkill) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("DwNodeIndex", &t.DwNodeIndex)
}

type ScriptEventParamSubzone struct {
	// Inherits ScriptEventParamBase
	// Inherits PolymorphicBase
	DwType     DT_UINT
	EParamType DT_ENUM
	DwPad      DT_UINT
	SnoSubzone DT_SNO
}

func (t *ScriptEventParamSubzone) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.EParamType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SnoSubzone, r, &Options{
		Flags: 513,
		Group: 80,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ScriptEventParamSubzone) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("EParamType", &t.EParamType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("SnoSubzone", &t.SnoSubzone)
}

type PhysicsDefinition struct {
	DwFlags             DT_UINT
	NMaxIterations      DT_INT
	FlFriction          DT_FLOAT
	FlRollingResistance DT_FLOAT
	FlRestitution       DT_FLOAT
	FlLinearDamping     DT_FLOAT
	FlAngularDamping    DT_FLOAT
	WCollisionMask      DT_UINT
	FlDragCoeff         DT_FLOAT
	FlAirBuoyancy       DT_FLOAT
	FlAccelerationMax   DT_FLOAT
	FlSpeedMax          DT_FLOAT
	FlGravityMultiplier DT_FLOAT
	TRandomAccelRange   DT_RANGE[*DT_FLOAT]
	Unk_7b327fe         DT_FLOAT
}

func (t *PhysicsDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.NMaxIterations, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.FlFriction, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.FlRollingResistance, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.FlRestitution, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.FlLinearDamping, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.FlAngularDamping, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.WCollisionMask, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.FlDragCoeff, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.FlAirBuoyancy, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.FlAccelerationMax, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.FlSpeedMax, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.FlGravityMultiplier, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+60, &t.TRandomAccelRange, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.Unk_7b327fe, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+72, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PhysicsDefinition) Walk(cb WalkCallback) {
	cb.Do("DwFlags", &t.DwFlags)
	cb.Do("NMaxIterations", &t.NMaxIterations)
	cb.Do("FlFriction", &t.FlFriction)
	cb.Do("FlRollingResistance", &t.FlRollingResistance)
	cb.Do("FlRestitution", &t.FlRestitution)
	cb.Do("FlLinearDamping", &t.FlLinearDamping)
	cb.Do("FlAngularDamping", &t.FlAngularDamping)
	cb.Do("WCollisionMask", &t.WCollisionMask)
	cb.Do("FlDragCoeff", &t.FlDragCoeff)
	cb.Do("FlAirBuoyancy", &t.FlAirBuoyancy)
	cb.Do("FlAccelerationMax", &t.FlAccelerationMax)
	cb.Do("FlSpeedMax", &t.FlSpeedMax)
	cb.Do("FlGravityMultiplier", &t.FlGravityMultiplier)
	cb.Do("TRandomAccelRange", &t.TRandomAccelRange)
	cb.Do("Unk_7b327fe", &t.Unk_7b327fe)
}

type CharacterPreset struct {
	// Inherits PolymorphicBase
	DwType    DT_UINT
	DwPad     DT_UINT
	SzName    DT_CSTRING[*DT_BYTE]
	SnoWorld  DT_SNO
	NPadding1 DT_INT
}

func (t *CharacterPreset) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SzName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.SnoWorld, r, &Options{
		Flags: 513,
		Group: 48,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.NPadding1, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+40, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *CharacterPreset) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("SzName", &t.SzName)
	cb.Do("SnoWorld", &t.SnoWorld)
	cb.Do("NPadding1", &t.NPadding1)
}

type AffixMessage struct {
	THeader     RequiredMessageHeader
	Ann         DT_ACD_NETWORK_NAME
	FIdentified DT_INT
	AAffixes    DT_FIXEDARRAY[*DT_SNO]
	Unk_186efea DT_FIXEDARRAY[*Type_82008b02]
	Unk_be0e086 DT_FIXEDARRAY[*DT_SNO]
}

func (t *AffixMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Ann, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.FIdentified, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.AAffixes, r, &Options{
		ArrayLength: 5,
		Flags:       9,
		Group:       104,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.Unk_186efea, r, &Options{
		ArrayLength: 5,
		Flags:       8,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.Unk_be0e086, r, &Options{
		ArrayLength: 5,
		Flags:       9,
		Group:       104,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+120, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *AffixMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("Ann", &t.Ann)
	cb.Do("FIdentified", &t.FIdentified)
	cb.Do("AAffixes", &t.AAffixes)
	cb.Do("Unk_186efea", &t.Unk_186efea)
	cb.Do("Unk_be0e086", &t.Unk_be0e086)
}

type GlobalWaypointData struct {
	// Inherits GlobalBase
	// Inherits PolymorphicBase
	DwType               DT_UINT
	DwPad                DT_UINT
	ArGlobalMarkerActors DT_VARIABLEARRAY[*GlobalMarkerActor]
}

func (t *GlobalWaypointData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.ArGlobalMarkerActors, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *GlobalWaypointData) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("ArGlobalMarkerActors", &t.ArGlobalMarkerActors)
}

type TriggerEventOutroEffectGroup struct {
	// Inherits TriggerEvent
	// Inherits PolymorphicBase
	DwType          DT_UINT
	DwPad           DT_UINT
	TConditions     TriggerConditions
	FGenerated      DT_INT
	Unk_6cba752     DT_INT
	DwParentActorID DT_UINT
	IdEffectGroup   DT_UINT
}

func (t *TriggerEventOutroEffectGroup) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.FGenerated, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_6cba752, r, &Options{Flags: 16}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.DwParentActorID, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.IdEffectGroup, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+88, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TriggerEventOutroEffectGroup) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("TConditions", &t.TConditions)
	cb.Do("FGenerated", &t.FGenerated)
	cb.Do("Unk_6cba752", &t.Unk_6cba752)
	cb.Do("DwParentActorID", &t.DwParentActorID)
	cb.Do("IdEffectGroup", &t.IdEffectGroup)
}

type MarkerActorGizmoData struct {
	PtDoorGizmoData              DT_VARIABLEARRAY[*MarkerDoorGizmoData]
	PtLockData                   DT_VARIABLEARRAY[*LockingGizmoData]
	PtSwitchBehaviorData         DT_VARIABLEARRAY[*SwitchBehaviorGizmoData]
	PtPOICameraInstanceData      DT_VARIABLEARRAY[*POICameraInstanceData]
	PtTraversalInstanceData      DT_VARIABLEARRAY[*TraversalInstanceData]
	PtBossDoorInstanceData       DT_VARIABLEARRAY[*BossDoorInstanceData]
	PtChestGizmoData             DT_VARIABLEARRAY[*MarkerChestGizmoData]
	PtSpawnerGizmoData           DT_VARIABLEARRAY[*SpawnerGizmoInstanceData]
	PtPortalGizmoData            DT_VARIABLEARRAY[*MarkerPortalGizmoData]
	PtPortalDestGizmoData        DT_VARIABLEARRAY[*MarkerPortalDestGizmoData]
	PtSavePointGizmoData         DT_VARIABLEARRAY[*MarkerSavePointGizmoData]
	PtProxData                   DT_POLYMORPHIC_VARIABLEARRAY[*ProximityDataBase]
	PtTriggerProximityGizmoData  DT_VARIABLEARRAY[*TriggerProximityData]
	PtGizmoConditionData         DT_VARIABLEARRAY[*GizmoConditionData]
	PtMarkerBaseGizmoData        DT_VARIABLEARRAY[*MarkerBaseGizmoData]
	PtDestroyableObjectGizmoData DT_VARIABLEARRAY[*MarkerDestroyableObjectGizmoData]
	PtWaypointGizmoData          DT_VARIABLEARRAY[*MarkerWaypointGizmoData]
	PtHiddenCacheGizmoData       DT_VARIABLEARRAY[*MarkerHiddenCacheGizmoData]
}

func (t *MarkerActorGizmoData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.PtDoorGizmoData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.PtLockData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.PtSwitchBehaviorData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.PtPOICameraInstanceData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.PtTraversalInstanceData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.PtBossDoorInstanceData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.PtChestGizmoData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.PtSpawnerGizmoData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.PtPortalGizmoData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+144, &t.PtPortalDestGizmoData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+160, &t.PtSavePointGizmoData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+176, &t.PtProxData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+200, &t.PtTriggerProximityGizmoData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+216, &t.PtGizmoConditionData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+232, &t.PtMarkerBaseGizmoData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+248, &t.PtDestroyableObjectGizmoData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+264, &t.PtWaypointGizmoData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+280, &t.PtHiddenCacheGizmoData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+296, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *MarkerActorGizmoData) Walk(cb WalkCallback) {
	cb.Do("PtDoorGizmoData", &t.PtDoorGizmoData)
	cb.Do("PtLockData", &t.PtLockData)
	cb.Do("PtSwitchBehaviorData", &t.PtSwitchBehaviorData)
	cb.Do("PtPOICameraInstanceData", &t.PtPOICameraInstanceData)
	cb.Do("PtTraversalInstanceData", &t.PtTraversalInstanceData)
	cb.Do("PtBossDoorInstanceData", &t.PtBossDoorInstanceData)
	cb.Do("PtChestGizmoData", &t.PtChestGizmoData)
	cb.Do("PtSpawnerGizmoData", &t.PtSpawnerGizmoData)
	cb.Do("PtPortalGizmoData", &t.PtPortalGizmoData)
	cb.Do("PtPortalDestGizmoData", &t.PtPortalDestGizmoData)
	cb.Do("PtSavePointGizmoData", &t.PtSavePointGizmoData)
	cb.Do("PtProxData", &t.PtProxData)
	cb.Do("PtTriggerProximityGizmoData", &t.PtTriggerProximityGizmoData)
	cb.Do("PtGizmoConditionData", &t.PtGizmoConditionData)
	cb.Do("PtMarkerBaseGizmoData", &t.PtMarkerBaseGizmoData)
	cb.Do("PtDestroyableObjectGizmoData", &t.PtDestroyableObjectGizmoData)
	cb.Do("PtWaypointGizmoData", &t.PtWaypointGizmoData)
	cb.Do("PtHiddenCacheGizmoData", &t.PtHiddenCacheGizmoData)
}

type Type_ce82d1b6 struct {
	// Inherits TriggerEventRangedDuration
	// Inherits TriggerEvent
	// Inherits PolymorphicBase
	DwType           DT_UINT
	TConditions      TriggerConditions
	FGenerated       DT_INT
	Unk_6cba752      DT_INT
	DwParentActorID  DT_UINT
	TDuration        DT_FLOAT
	DwTriggerFlags   DT_UINT
	DwTriggerFlagsEx DT_UINT
	TCleanup         TriggerCleanup
	Unk_49e9257      DT_INT
	Unk_5490979      DT_INT
	DwPad            DT_UINT
	SnoMusic         DT_SNO
	Unk_e1829be      DT_FLOAT
}

func (t *Type_ce82d1b6) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.FGenerated, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_6cba752, r, &Options{Flags: 16}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.DwParentActorID, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.TDuration, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.DwTriggerFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.DwTriggerFlagsEx, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.TCleanup, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+116, &t.Unk_49e9257, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.Unk_5490979, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+124, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.SnoMusic, r, &Options{
		Flags: 1,
		Group: 62,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+132, &t.Unk_e1829be, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+136, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_ce82d1b6) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("TConditions", &t.TConditions)
	cb.Do("FGenerated", &t.FGenerated)
	cb.Do("Unk_6cba752", &t.Unk_6cba752)
	cb.Do("DwParentActorID", &t.DwParentActorID)
	cb.Do("TDuration", &t.TDuration)
	cb.Do("DwTriggerFlags", &t.DwTriggerFlags)
	cb.Do("DwTriggerFlagsEx", &t.DwTriggerFlagsEx)
	cb.Do("TCleanup", &t.TCleanup)
	cb.Do("Unk_49e9257", &t.Unk_49e9257)
	cb.Do("Unk_5490979", &t.Unk_5490979)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("SnoMusic", &t.SnoMusic)
	cb.Do("Unk_e1829be", &t.Unk_e1829be)
}

type Type_cec13164 struct {
	FlTime DT_FLOAT
	VScale DT_VECTOR3D
}

func (t *Type_cec13164) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.FlTime, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.VScale, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_cec13164) Walk(cb WalkCallback) {
	cb.Do("FlTime", &t.FlTime)
	cb.Do("VScale", &t.VScale)
}

type ParticleKeyFrames struct {
	PtPositions   DT_VARIABLEARRAY[*Type_e04c1a6]
	PtColors      DT_VARIABLEARRAY[*Type_c9a200b0]
	PtScales      DT_VARIABLEARRAY[*Type_cabcc4f9]
	Unk_72d072a   DT_VARIABLEARRAY[*Type_cec13164]
	PtRotations   DT_VARIABLEARRAY[*Type_e84cd001]
	PtSpins       DT_VARIABLEARRAY[*Type_252cba6b]
	PtDistortions DT_VARIABLEARRAY[*Type_fa8eb4a0]
}

func (t *ParticleKeyFrames) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.PtPositions, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.PtColors, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.PtScales, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.Unk_72d072a, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.PtRotations, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.PtSpins, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.PtDistortions, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+112, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ParticleKeyFrames) Walk(cb WalkCallback) {
	cb.Do("PtPositions", &t.PtPositions)
	cb.Do("PtColors", &t.PtColors)
	cb.Do("PtScales", &t.PtScales)
	cb.Do("Unk_72d072a", &t.Unk_72d072a)
	cb.Do("PtRotations", &t.PtRotations)
	cb.Do("PtSpins", &t.PtSpins)
	cb.Do("PtDistortions", &t.PtDistortions)
}

type Type_cec837f6 struct {
	DwID                DT_UINT
	EType               DT_ENUM
	TDimension1         DT_STRING_FORMULA
	TDimension2         DT_STRING_FORMULA
	TDimension3         DT_STRING_FORMULA
	TDimension4         DT_STRING_FORMULA
	TDimension5         DT_STRING_FORMULA
	Unk_6a8ab2          DT_INT
	Unk_5078500         DT_INT
	Unk_128669f         DT_INT
	FAlignmentHeight    DT_FLOAT
	ArConditions        DT_POLYMORPHIC_VARIABLEARRAY[*DT_INT64]
	BAnimated           DT_INT
	Unk_3ee89a          DT_INT
	Unk_a4d0200         DT_INT
	Unk_c91bb71         DT_INT
	Unk_e960d46         DT_INT
	Unk_e282419         DT_ENUM
	Unk_7ed70e2         DT_INT
	Unk_77bdba8         DT_ENUM
	Unk_8f61ea4         DT_UINT
	Unk_3e59e14         DT_VECTOR3D
	Unk_6076d47         DT_ENUM
	Unk_8d18eb6         DT_ENUM
	Unk_67060f1         DT_INT
	TAnimatedDimension1 DT_STRING_FORMULA
	TAnimatedDimension2 DT_STRING_FORMULA
	TAnimatedDimension3 DT_STRING_FORMULA
	TAnimatedInterval   DT_STRING_FORMULA
	TAnimatedTotalTime  DT_STRING_FORMULA
	Unk_e5f3235         DT_STRING_FORMULA
	Unk_7fd2cb0         DT_INT
	Unk_bb05455         DT_INT
	BLoop               DT_INT
	Unk_77a6dd9         DT_INT
	Unk_14cfb7f         DT_INT
	Unk_4f22bac         DT_INT
	Unk_ca7a183         DT_INT
	Unk_78bcfac         DT_INT
	ELOSCheck           DT_ENUM
	DwTargetingFlags    DT_UINT
	BDebugDraw          DT_INT
}

func (t *Type_cec837f6) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.DwID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.EType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.TDimension1, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.TDimension2, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.TDimension3, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+104, &t.TDimension4, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+136, &t.TDimension5, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+168, &t.Unk_6a8ab2, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+172, &t.Unk_5078500, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+176, &t.Unk_128669f, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+180, &t.FAlignmentHeight, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+184, &t.ArConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+208, &t.BAnimated, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+212, &t.Unk_3ee89a, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+216, &t.Unk_a4d0200, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+220, &t.Unk_c91bb71, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+224, &t.Unk_e960d46, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+228, &t.Unk_e282419, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+232, &t.Unk_7ed70e2, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+236, &t.Unk_77bdba8, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+240, &t.Unk_8f61ea4, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+244, &t.Unk_3e59e14, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+256, &t.Unk_6076d47, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+260, &t.Unk_8d18eb6, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+264, &t.Unk_67060f1, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+272, &t.TAnimatedDimension1, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+304, &t.TAnimatedDimension2, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+336, &t.TAnimatedDimension3, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+368, &t.TAnimatedInterval, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+400, &t.TAnimatedTotalTime, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+432, &t.Unk_e5f3235, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+464, &t.Unk_7fd2cb0, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+468, &t.Unk_bb05455, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+472, &t.BLoop, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+476, &t.Unk_77a6dd9, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+480, &t.Unk_14cfb7f, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+484, &t.Unk_4f22bac, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+488, &t.Unk_ca7a183, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+492, &t.Unk_78bcfac, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+496, &t.ELOSCheck, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+500, &t.DwTargetingFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+504, &t.BDebugDraw, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+512, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_cec837f6) Walk(cb WalkCallback) {
	cb.Do("DwID", &t.DwID)
	cb.Do("EType", &t.EType)
	cb.Do("TDimension1", &t.TDimension1)
	cb.Do("TDimension2", &t.TDimension2)
	cb.Do("TDimension3", &t.TDimension3)
	cb.Do("TDimension4", &t.TDimension4)
	cb.Do("TDimension5", &t.TDimension5)
	cb.Do("Unk_6a8ab2", &t.Unk_6a8ab2)
	cb.Do("Unk_5078500", &t.Unk_5078500)
	cb.Do("Unk_128669f", &t.Unk_128669f)
	cb.Do("FAlignmentHeight", &t.FAlignmentHeight)
	cb.Do("ArConditions", &t.ArConditions)
	cb.Do("BAnimated", &t.BAnimated)
	cb.Do("Unk_3ee89a", &t.Unk_3ee89a)
	cb.Do("Unk_a4d0200", &t.Unk_a4d0200)
	cb.Do("Unk_c91bb71", &t.Unk_c91bb71)
	cb.Do("Unk_e960d46", &t.Unk_e960d46)
	cb.Do("Unk_e282419", &t.Unk_e282419)
	cb.Do("Unk_7ed70e2", &t.Unk_7ed70e2)
	cb.Do("Unk_77bdba8", &t.Unk_77bdba8)
	cb.Do("Unk_8f61ea4", &t.Unk_8f61ea4)
	cb.Do("Unk_3e59e14", &t.Unk_3e59e14)
	cb.Do("Unk_6076d47", &t.Unk_6076d47)
	cb.Do("Unk_8d18eb6", &t.Unk_8d18eb6)
	cb.Do("Unk_67060f1", &t.Unk_67060f1)
	cb.Do("TAnimatedDimension1", &t.TAnimatedDimension1)
	cb.Do("TAnimatedDimension2", &t.TAnimatedDimension2)
	cb.Do("TAnimatedDimension3", &t.TAnimatedDimension3)
	cb.Do("TAnimatedInterval", &t.TAnimatedInterval)
	cb.Do("TAnimatedTotalTime", &t.TAnimatedTotalTime)
	cb.Do("Unk_e5f3235", &t.Unk_e5f3235)
	cb.Do("Unk_7fd2cb0", &t.Unk_7fd2cb0)
	cb.Do("Unk_bb05455", &t.Unk_bb05455)
	cb.Do("BLoop", &t.BLoop)
	cb.Do("Unk_77a6dd9", &t.Unk_77a6dd9)
	cb.Do("Unk_14cfb7f", &t.Unk_14cfb7f)
	cb.Do("Unk_4f22bac", &t.Unk_4f22bac)
	cb.Do("Unk_ca7a183", &t.Unk_ca7a183)
	cb.Do("Unk_78bcfac", &t.Unk_78bcfac)
	cb.Do("ELOSCheck", &t.ELOSCheck)
	cb.Do("DwTargetingFlags", &t.DwTargetingFlags)
	cb.Do("BDebugDraw", &t.BDebugDraw)
}

type PVPGameSubcondition struct {
	// Inherits Subcondition
	// Inherits PolymorphicBase
	DwType  DT_UINT
	BNegate DT_INT
	DwPad   DT_UINT
}

func (t *PVPGameSubcondition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BNegate, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PVPGameSubcondition) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("BNegate", &t.BNegate)
	cb.Do("DwPad", &t.DwPad)
}

type DungeonSpawningPoolEntry_Table struct {
	// Inherits GameBalanceTable
	// Inherits PolymorphicBase
	DwType   DT_UINT
	DwPad    DT_UINT
	TEntries DT_VARIABLEARRAY[*DungeonSpawningPoolEntry]
}

func (t *DungeonSpawningPoolEntry_Table) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TEntries, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *DungeonSpawningPoolEntry_Table) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("TEntries", &t.TEntries)
}

type AttributeSubcondition struct {
	// Inherits Type_d3c3637f
	// Inherits Subcondition
	// Inherits PolymorphicBase
	DwType        DT_UINT
	BNegate       DT_INT
	EComparisonOp DT_ENUM
	DwPad         DT_UINT
	EAttribute    DT_ENUM
	FlValue       DT_FLOAT
	NParam        DT_INT
	Unk_c7b2b18   DT_ENUM
}

func (t *AttributeSubcondition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BNegate, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.EComparisonOp, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.EAttribute, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.FlValue, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.NParam, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.Unk_c7b2b18, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *AttributeSubcondition) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("BNegate", &t.BNegate)
	cb.Do("EComparisonOp", &t.EComparisonOp)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("EAttribute", &t.EAttribute)
	cb.Do("FlValue", &t.FlValue)
	cb.Do("NParam", &t.NParam)
	cb.Do("Unk_c7b2b18", &t.Unk_c7b2b18)
}

type NpcLookTagEntry struct {
	THeader GBIDHeader
}

func (t *NpcLookTagEntry) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+260, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *NpcLookTagEntry) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
}

type ScriptEventParamActorGroup struct {
	// Inherits ScriptEventParamBase
	// Inherits PolymorphicBase
	DwType         DT_UINT
	EParamType     DT_ENUM
	DwPad          DT_UINT
	GbidActorGroup DT_GBID
}

func (t *ScriptEventParamActorGroup) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.EParamType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.GbidActorGroup, r, &Options{
		Flags: 1,
		Group: 24,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ScriptEventParamActorGroup) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("EParamType", &t.EParamType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("GbidActorGroup", &t.GbidActorGroup)
}

type Type_cfbf8bdc struct {
	// Inherits Type_7e418ba8
	// Inherits PolymorphicBase
	DwType       DT_UINT
	Unk_2de4987  DT_UINT
	ArConditions DT_POLYMORPHIC_VARIABLEARRAY[*DT_INT64]
	BEnd         DT_INT
	DwPad        DT_UINT
}

func (t *Type_cfbf8bdc) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_2de4987, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ArConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.BEnd, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+56, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_cfbf8bdc) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("Unk_2de4987", &t.Unk_2de4987)
	cb.Do("ArConditions", &t.ArConditions)
	cb.Do("BEnd", &t.BEnd)
	cb.Do("DwPad", &t.DwPad)
}

type Type_cfc7c00f struct {
	Unk_cb968cf DT_INT
	Unk_b518e97 DT_FLOAT
}

func (t *Type_cfc7c00f) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Unk_cb968cf, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.Unk_b518e97, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_cfc7c00f) Walk(cb WalkCallback) {
	cb.Do("Unk_cb968cf", &t.Unk_cb968cf)
	cb.Do("Unk_b518e97", &t.Unk_b518e97)
}

type TriggerEventCameraKeyFrame struct {
	// Inherits TriggerEvent
	// Inherits PolymorphicBase
	DwType              DT_UINT
	DwPad               DT_UINT
	TConditions         TriggerConditions
	FGenerated          DT_INT
	Unk_6cba752         DT_INT
	DwParentActorID     DT_UINT
	EMicrophoneMode     DT_ENUM
	VecMicrophoneOffset DT_VECTOR3D
	ArKeys              DT_POLYMORPHIC_VARIABLEARRAY[*DT_INT64]
	Unk_9717a7e         DT_FLOAT
}

func (t *TriggerEventCameraKeyFrame) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.FGenerated, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_6cba752, r, &Options{Flags: 16}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.DwParentActorID, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.EMicrophoneMode, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.VecMicrophoneOffset, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.ArKeys, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.Unk_9717a7e, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+128, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TriggerEventCameraKeyFrame) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("TConditions", &t.TConditions)
	cb.Do("FGenerated", &t.FGenerated)
	cb.Do("Unk_6cba752", &t.Unk_6cba752)
	cb.Do("DwParentActorID", &t.DwParentActorID)
	cb.Do("EMicrophoneMode", &t.EMicrophoneMode)
	cb.Do("VecMicrophoneOffset", &t.VecMicrophoneOffset)
	cb.Do("ArKeys", &t.ArKeys)
	cb.Do("Unk_9717a7e", &t.Unk_9717a7e)
}

type TriggerEventObjectTurnToOriginalFacing struct {
	// Inherits TriggerEvent
	// Inherits PolymorphicBase
	DwType          DT_UINT
	DwPad           DT_UINT
	TConditions     TriggerConditions
	FGenerated      DT_INT
	Unk_6cba752     DT_INT
	DwParentActorID DT_UINT
	DwObjectID      DT_UINT
}

func (t *TriggerEventObjectTurnToOriginalFacing) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.FGenerated, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_6cba752, r, &Options{Flags: 16}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.DwParentActorID, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.DwObjectID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+88, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TriggerEventObjectTurnToOriginalFacing) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("TConditions", &t.TConditions)
	cb.Do("FGenerated", &t.FGenerated)
	cb.Do("Unk_6cba752", &t.Unk_6cba752)
	cb.Do("DwParentActorID", &t.DwParentActorID)
	cb.Do("DwObjectID", &t.DwObjectID)
}

type AnyLogicSubcondition struct {
	// Inherits LogicSubcondition
	// Inherits Subcondition
	// Inherits PolymorphicBase
	DwType       DT_UINT
	BNegate      DT_INT
	DwPad        DT_UINT
	ArConditions DT_POLYMORPHIC_VARIABLEARRAY[*DT_INT64]
}

func (t *AnyLogicSubcondition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BNegate, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ArConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *AnyLogicSubcondition) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("BNegate", &t.BNegate)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("ArConditions", &t.ArConditions)
}

type ShaderMapDefinition struct {
	Unk_b8d46b        DT_SNO
	Unk_71e61d        DT_SNO
	Unk_24ebc07       DT_SNO
	SnoFurBaseShader  DT_SNO
	ArShaderOverrides DT_VARIABLEARRAY[*ShaderOverride]
	Unk_54bea5a       DT_TAGMAP[*DT_ENUM]
}

func (t *ShaderMapDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.Unk_b8d46b, r, &Options{
		Flags: 1,
		Group: 37,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.Unk_71e61d, r, &Options{
		Flags: 1,
		Group: 37,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_24ebc07, r, &Options{
		Flags: 1,
		Group: 37,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.SnoFurBaseShader, r, &Options{
		Flags: 1,
		Group: 37,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ArShaderOverrides, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.Unk_54bea5a, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+56, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ShaderMapDefinition) Walk(cb WalkCallback) {
	cb.Do("Unk_b8d46b", &t.Unk_b8d46b)
	cb.Do("Unk_71e61d", &t.Unk_71e61d)
	cb.Do("Unk_24ebc07", &t.Unk_24ebc07)
	cb.Do("SnoFurBaseShader", &t.SnoFurBaseShader)
	cb.Do("ArShaderOverrides", &t.ArShaderOverrides)
	cb.Do("Unk_54bea5a", &t.Unk_54bea5a)
}

type AspectDefinition struct {
	SnoAffix DT_SNO
}

func (t *AspectDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.SnoAffix, r, &Options{
		Flags: 1,
		Group: 104,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+12, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *AspectDefinition) Walk(cb WalkCallback) {
	cb.Do("SnoAffix", &t.SnoAffix)
}

type DemonScrollReward struct {
	ArItems DT_FIXEDARRAY[*ItemSpecifierData]
}

func (t *DemonScrollReward) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.ArItems, r, &Options{
		ArrayLength: 3,
		Flags:       1,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+108, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *DemonScrollReward) Walk(cb WalkCallback) {
	cb.Do("ArItems", &t.ArItems)
}

type SavedWorldCameraState struct {
	SnoWorld     DT_SNO
	TCameraState SavedCameraState
}

func (t *SavedWorldCameraState) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoWorld, r, &Options{
		Flags: 1,
		Group: 48,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.TCameraState, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+68, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *SavedWorldCameraState) Walk(cb WalkCallback) {
	cb.Do("SnoWorld", &t.SnoWorld)
	cb.Do("TCameraState", &t.TCameraState)
}

type GameTestingInvitePlayersToPartyMessage struct {
	THeader     RequiredMessageHeader
	NPlayers    DT_INT
	Unk_52e2a15 DT_FIXEDARRAY[*DT_UINT]
}

func (t *GameTestingInvitePlayersToPartyMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.NPlayers, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.Unk_52e2a15, r, &Options{
		ArrayLength: 4,
		Flags:       1,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+36, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *GameTestingInvitePlayersToPartyMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("NPlayers", &t.NPlayers)
	cb.Do("Unk_52e2a15", &t.Unk_52e2a15)
}

type TriggerEventPlayMovie struct {
	// Inherits TriggerEventRangedDuration
	// Inherits TriggerEvent
	// Inherits PolymorphicBase
	DwType           DT_UINT
	TConditions      TriggerConditions
	FGenerated       DT_INT
	Unk_6cba752      DT_INT
	DwParentActorID  DT_UINT
	TDuration        DT_FLOAT
	DwTriggerFlags   DT_UINT
	DwTriggerFlagsEx DT_UINT
	TCleanup         TriggerCleanup
	Unk_49e9257      DT_INT
	Unk_5490979      DT_INT
	DwPad            DT_UINT
	SnoMovie         DT_SNO
	FIntroMovie      DT_INT
	Unk_26e6b7e      DT_INT
}

func (t *TriggerEventPlayMovie) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.FGenerated, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_6cba752, r, &Options{Flags: 16}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.DwParentActorID, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.TDuration, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.DwTriggerFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.DwTriggerFlagsEx, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.TCleanup, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+116, &t.Unk_49e9257, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.Unk_5490979, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+124, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.SnoMovie, r, &Options{
		Flags: 1,
		Group: 102,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+132, &t.FIntroMovie, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+136, &t.Unk_26e6b7e, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+144, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TriggerEventPlayMovie) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("TConditions", &t.TConditions)
	cb.Do("FGenerated", &t.FGenerated)
	cb.Do("Unk_6cba752", &t.Unk_6cba752)
	cb.Do("DwParentActorID", &t.DwParentActorID)
	cb.Do("TDuration", &t.TDuration)
	cb.Do("DwTriggerFlags", &t.DwTriggerFlags)
	cb.Do("DwTriggerFlagsEx", &t.DwTriggerFlagsEx)
	cb.Do("TCleanup", &t.TCleanup)
	cb.Do("Unk_49e9257", &t.Unk_49e9257)
	cb.Do("Unk_5490979", &t.Unk_5490979)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("SnoMovie", &t.SnoMovie)
	cb.Do("FIntroMovie", &t.FIntroMovie)
	cb.Do("Unk_26e6b7e", &t.Unk_26e6b7e)
}

type HeroStatusDataMessage struct {
	THeader    RequiredMessageHeader
	UHeroId    DT_UINT
	SzHeroName DT_CHARARRAY
	SnoClass   DT_SNO
	NLevel     DT_INT
}

func (t *HeroStatusDataMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.UHeroId, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.SzHeroName, r, &Options{
		ArrayLength: 12,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.SnoClass, r, &Options{
		Flags: 1,
		Group: 74,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.NLevel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+40, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *HeroStatusDataMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("UHeroId", &t.UHeroId)
	cb.Do("SzHeroName", &t.SzHeroName)
	cb.Do("SnoClass", &t.SnoClass)
	cb.Do("NLevel", &t.NLevel)
}

type EnchantAffixMessage struct {
	THeader          RequiredMessageHeader
	AnnItem          DT_ACD_NETWORK_NAME
	SnoAffixToReroll DT_SNO
}

func (t *EnchantAffixMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.AnnItem, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SnoAffixToReroll, r, &Options{
		Flags: 1,
		Group: 104,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+28, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *EnchantAffixMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("AnnItem", &t.AnnItem)
	cb.Do("SnoAffixToReroll", &t.SnoAffixToReroll)
}

type TriggerEventChangeLook struct {
	// Inherits TriggerEvent
	// Inherits PolymorphicBase
	DwType          DT_UINT
	DwPad           DT_UINT
	TConditions     TriggerConditions
	FGenerated      DT_INT
	Unk_6cba752     DT_INT
	DwParentActorID DT_UINT
	DwActorID       DT_UINT
	SnoAppearance   DT_SNO
	TLookLink       LookLink
	Unk_279aa5a     DT_INT
}

func (t *TriggerEventChangeLook) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.FGenerated, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_6cba752, r, &Options{Flags: 16}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.DwParentActorID, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.DwActorID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.SnoAppearance, r, &Options{
		Flags: 513,
		Group: 9,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.TLookLink, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.Unk_279aa5a, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+96, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TriggerEventChangeLook) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("TConditions", &t.TConditions)
	cb.Do("FGenerated", &t.FGenerated)
	cb.Do("Unk_6cba752", &t.Unk_6cba752)
	cb.Do("DwParentActorID", &t.DwParentActorID)
	cb.Do("DwActorID", &t.DwActorID)
	cb.Do("SnoAppearance", &t.SnoAppearance)
	cb.Do("TLookLink", &t.TLookLink)
	cb.Do("Unk_279aa5a", &t.Unk_279aa5a)
}

type GlobalStore struct {
	// Inherits GlobalBase
	// Inherits PolymorphicBase
	DwType                DT_UINT
	DwPad                 DT_UINT
	Unk_2fa1bf6           DT_FLOAT
	Unk_5967152           DT_FLOAT
	Unk_2eb3017           DT_FLOAT
	Unk_9ff4d97           DT_FLOAT
	Unk_ec0907f           DT_FLOAT
	Unk_7f36142           DT_FLOAT
	Unk_d7f8478           DT_FLOAT
	Unk_2009ff7           DT_INT
	Unk_aef9c7f           DT_VARIABLEARRAY[*Type_8a12bdb7]
	ArCameraTransitions   DT_FIXEDARRAY[*StoreCameraTransition]
	SnoStorePreviewWorld  DT_SNO
	Unk_357aca5           DT_CSTRING[*DT_BYTE]
	SnoVendorWorld        DT_SNO
	SzVendorCamera        DT_UINT
	Unk_d7df52d           DT_FIXEDARRAY[*Type_b3f69894]
	Unk_107fe73           DT_ENUM
	Unk_465e395           DT_FIXEDARRAY[*Type_e7ead32b]
	ArStoreDisclaimerData DT_FIXEDARRAY[*StoreDisclaimerData]
	Unk_782b094           DT_FIXEDARRAY[*Type_5887daa1]
	Unk_26a4b93           DT_FIXEDARRAY[*Type_e3bec795]
}

func (t *GlobalStore) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_2fa1bf6, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.Unk_5967152, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_2eb3017, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.Unk_9ff4d97, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.Unk_ec0907f, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.Unk_7f36142, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.Unk_d7f8478, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.Unk_2009ff7, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.Unk_aef9c7f, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.ArCameraTransitions, r, &Options{
		ArrayLength: 5,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+264, &t.SnoStorePreviewWorld, r, &Options{
		Flags: 1,
		Group: 48,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+272, &t.Unk_357aca5, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+288, &t.SnoVendorWorld, r, &Options{
		Flags: 1,
		Group: 48,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+292, &t.SzVendorCamera, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+296, &t.Unk_d7df52d, r, &Options{
		ArrayLength: 3,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+320, &t.Unk_107fe73, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+328, &t.Unk_465e395, r, &Options{
		ArrayLength: 17,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1552, &t.ArStoreDisclaimerData, r, &Options{
		ArrayLength: 10,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1632, &t.Unk_782b094, r, &Options{
		ArrayLength: 1,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1672, &t.Unk_26a4b93, r, &Options{
		ArrayLength: 4,
		Flags:       1,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+1832, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *GlobalStore) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("Unk_2fa1bf6", &t.Unk_2fa1bf6)
	cb.Do("Unk_5967152", &t.Unk_5967152)
	cb.Do("Unk_2eb3017", &t.Unk_2eb3017)
	cb.Do("Unk_9ff4d97", &t.Unk_9ff4d97)
	cb.Do("Unk_ec0907f", &t.Unk_ec0907f)
	cb.Do("Unk_7f36142", &t.Unk_7f36142)
	cb.Do("Unk_d7f8478", &t.Unk_d7f8478)
	cb.Do("Unk_2009ff7", &t.Unk_2009ff7)
	cb.Do("Unk_aef9c7f", &t.Unk_aef9c7f)
	cb.Do("ArCameraTransitions", &t.ArCameraTransitions)
	cb.Do("SnoStorePreviewWorld", &t.SnoStorePreviewWorld)
	cb.Do("Unk_357aca5", &t.Unk_357aca5)
	cb.Do("SnoVendorWorld", &t.SnoVendorWorld)
	cb.Do("SzVendorCamera", &t.SzVendorCamera)
	cb.Do("Unk_d7df52d", &t.Unk_d7df52d)
	cb.Do("Unk_107fe73", &t.Unk_107fe73)
	cb.Do("Unk_465e395", &t.Unk_465e395)
	cb.Do("ArStoreDisclaimerData", &t.ArStoreDisclaimerData)
	cb.Do("Unk_782b094", &t.Unk_782b094)
	cb.Do("Unk_26a4b93", &t.Unk_26a4b93)
}

type wWiseSoundBankDefinition struct {
	PtContent DT_POLYMORPHIC_VARIABLEARRAY[*WwiseSoundBankContentBase]
}

func (t *wWiseSoundBankDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.PtContent, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *wWiseSoundBankDefinition) Walk(cb WalkCallback) {
	cb.Do("PtContent", &t.PtContent)
}

type ItemSpecifierData struct {
	SnoItemToDrop DT_SNO
	SnoAffixes    DT_FIXEDARRAY[*DT_SNO]
	NNumAffixes   DT_INT
	BAccountBound DT_INT
	Unk_aab1fc1   DT_RANGE[*DT_INT]
}

func (t *ItemSpecifierData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoItemToDrop, r, &Options{
		Flags: 1,
		Group: 73,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.SnoAffixes, r, &Options{
		ArrayLength: 4,
		Flags:       1,
		Group:       104,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.NNumAffixes, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.BAccountBound, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.Unk_aab1fc1, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+36, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ItemSpecifierData) Walk(cb WalkCallback) {
	cb.Do("SnoItemToDrop", &t.SnoItemToDrop)
	cb.Do("SnoAffixes", &t.SnoAffixes)
	cb.Do("NNumAffixes", &t.NNumAffixes)
	cb.Do("BAccountBound", &t.BAccountBound)
	cb.Do("Unk_aab1fc1", &t.Unk_aab1fc1)
}

type SubObjectAppearanceVariant struct {
	EVariantType       DT_ENUM
	SnoVariantMaterial DT_SNO
}

func (t *SubObjectAppearanceVariant) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.EVariantType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.SnoVariantMaterial, r, &Options{
		Flags: 1,
		Group: 57,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *SubObjectAppearanceVariant) Walk(cb WalkCallback) {
	cb.Do("EVariantType", &t.EVariantType)
	cb.Do("SnoVariantMaterial", &t.SnoVariantMaterial)
}

type GameSetupMessage struct {
	THeader          RequiredMessageHeader
	DwFirstHeartbeat DT_UINT
	Unk_35f9686      DT_INT64
	Unk_387b0e       DT_INT
	TTrace           TraceMessage
}

func (t *GameSetupMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.DwFirstHeartbeat, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_35f9686, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.Unk_387b0e, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.TTrace, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+120, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *GameSetupMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("DwFirstHeartbeat", &t.DwFirstHeartbeat)
	cb.Do("Unk_35f9686", &t.Unk_35f9686)
	cb.Do("Unk_387b0e", &t.Unk_387b0e)
	cb.Do("TTrace", &t.TTrace)
}

type DungeonStatesEntry struct {
	THeader GBIDHeader
}

func (t *DungeonStatesEntry) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+260, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *DungeonStatesEntry) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
}

type Type_d25b948e struct {
	// Inherits Type_7e418ba8
	// Inherits PolymorphicBase
	DwType              DT_UINT
	Unk_2de4987         DT_UINT
	ArConditions        DT_POLYMORPHIC_VARIABLEARRAY[*DT_INT64]
	BEnd                DT_INT
	DwPad               DT_UINT
	FlDistanceThreshold DT_FLOAT
}

func (t *Type_d25b948e) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_2de4987, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ArConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.BEnd, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.FlDistanceThreshold, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+64, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_d25b948e) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("Unk_2de4987", &t.Unk_2de4987)
	cb.Do("ArConditions", &t.ArConditions)
	cb.Do("BEnd", &t.BEnd)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("FlDistanceThreshold", &t.FlDistanceThreshold)
}

type SimpleMessage struct {
	THeader RequiredMessageHeader
}

func (t *SimpleMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *SimpleMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
}

type ClanBankWithdrawMessage struct {
	THeader         RequiredRequestMessageHeader
	TItemId         Type_f5ac91bb
	ECurrencyType   DT_ENUM
	NCurrencyAmount DT_INT64
}

func (t *ClanBankWithdrawMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.TItemId, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.ECurrencyType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.NCurrencyAmount, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+56, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ClanBankWithdrawMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("TItemId", &t.TItemId)
	cb.Do("ECurrencyType", &t.ECurrencyType)
	cb.Do("NCurrencyAmount", &t.NCurrencyAmount)
}

type GlobalNightmareDungeonData struct {
	// Inherits GlobalBase
	// Inherits PolymorphicBase
	DwType                         DT_UINT
	DwPad                          DT_UINT
	ArDungeonLists                 DT_FIXEDARRAY[*DungeonList]
	ArNightmareDungeonGlobalSpawns DT_VARIABLEARRAY[*NightmareDungeonGlobalSpawn]
	Unk_6b198fe                    DT_FLOAT
	Unk_2da258                     DT_UINT
	Unk_4242026                    DT_FIXEDARRAY[*DT_FLOAT]
	Unk_74b00e3                    DT_FLOAT
	Unk_aa2399c                    DT_FLOAT
	Unk_855d467                    DT_FLOAT
	Unk_908474b                    DT_RANGE[*DT_UINT]
	Unk_408865c                    DT_RANGE[*DT_UINT]
}

func (t *GlobalNightmareDungeonData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.ArDungeonLists, r, &Options{
		ArrayLength: 2,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.ArNightmareDungeonGlobalSpawns, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.Unk_6b198fe, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.Unk_2da258, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_4242026, r, &Options{
		ArrayLength: 2,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.Unk_74b00e3, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.Unk_aa2399c, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.Unk_855d467, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.Unk_908474b, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+100, &t.Unk_408865c, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+112, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *GlobalNightmareDungeonData) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("ArDungeonLists", &t.ArDungeonLists)
	cb.Do("ArNightmareDungeonGlobalSpawns", &t.ArNightmareDungeonGlobalSpawns)
	cb.Do("Unk_6b198fe", &t.Unk_6b198fe)
	cb.Do("Unk_2da258", &t.Unk_2da258)
	cb.Do("Unk_4242026", &t.Unk_4242026)
	cb.Do("Unk_74b00e3", &t.Unk_74b00e3)
	cb.Do("Unk_aa2399c", &t.Unk_aa2399c)
	cb.Do("Unk_855d467", &t.Unk_855d467)
	cb.Do("Unk_908474b", &t.Unk_908474b)
	cb.Do("Unk_408865c", &t.Unk_408865c)
}

type StoryboardTrack struct {
	// Inherits PolymorphicBase
	DwType DT_UINT
	DwPad  DT_UINT
}

func (t *StoryboardTrack) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *StoryboardTrack) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
}

type Type_d2a2c805 struct {
	THeader  RequiredMessageHeader
	AnnActor DT_ACD_NETWORK_NAME
	BEnabled DT_INT
}

func (t *Type_d2a2c805) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.AnnActor, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.BEnabled, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+28, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_d2a2c805) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("AnnActor", &t.AnnActor)
	cb.Do("BEnabled", &t.BEnabled)
}

type OnAssistTriggeredBuffCallback struct {
	// Inherits BuffCallbackBase
	// Inherits PolymorphicBase
	DwType                DT_UINT
	DwPad                 DT_UINT
	SnoTriggerEffectGroup DT_SNO
	ArConditions          DT_POLYMORPHIC_VARIABLEARRAY[*DT_INT64]
}

func (t *OnAssistTriggeredBuffCallback) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoTriggerEffectGroup, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ArConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *OnAssistTriggeredBuffCallback) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("SnoTriggerEffectGroup", &t.SnoTriggerEffectGroup)
	cb.Do("ArConditions", &t.ArConditions)
}

type SchedulerGlobalUniqueCategory struct {
	THeader GBIDHeader
}

func (t *SchedulerGlobalUniqueCategory) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+260, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *SchedulerGlobalUniqueCategory) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
}

type ActorCustomizationHelper struct {
	Unk_6c44779 SerialDataInfo
	Unk_550eb8a SerialDataInfo
	TFace       SerialDataInfo
	TMakeup     SerialDataInfo
	TJewelry    SerialDataInfo
	THairStyle  SerialDataInfo
	TFacialHair SerialDataInfo
}

func (t *ActorCustomizationHelper) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Unk_6c44779, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.Unk_550eb8a, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TFace, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.TMakeup, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.TJewelry, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.THairStyle, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.TFacialHair, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+56, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ActorCustomizationHelper) Walk(cb WalkCallback) {
	cb.Do("Unk_6c44779", &t.Unk_6c44779)
	cb.Do("Unk_550eb8a", &t.Unk_550eb8a)
	cb.Do("TFace", &t.TFace)
	cb.Do("TMakeup", &t.TMakeup)
	cb.Do("TJewelry", &t.TJewelry)
	cb.Do("THairStyle", &t.THairStyle)
	cb.Do("TFacialHair", &t.TFacialHair)
}

type RequestBuffCancelMessage struct {
	THeader      RequiredMessageHeader
	SnoPower     DT_SNO
	DwBuffDataID DT_UINT
}

func (t *RequestBuffCancelMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoPower, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwBuffDataID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *RequestBuffCancelMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("SnoPower", &t.SnoPower)
	cb.Do("DwBuffDataID", &t.DwBuffDataID)
}

type CountdownStartedMessage struct {
	THeader               RequiredMessageHeader
	DwTime                DT_UINT
	DwPlayerGameAccountId DT_UINT
}

func (t *CountdownStartedMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.DwTime, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPlayerGameAccountId, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *CountdownStartedMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("DwTime", &t.DwTime)
	cb.Do("DwPlayerGameAccountId", &t.DwPlayerGameAccountId)
}

type OnKillTriggeredBuffCallback struct {
	// Inherits BuffCallbackBase
	// Inherits PolymorphicBase
	DwType                DT_UINT
	DwPad                 DT_UINT
	SnoTriggerEffectGroup DT_SNO
	ArConditions          DT_POLYMORPHIC_VARIABLEARRAY[*DT_INT64]
}

func (t *OnKillTriggeredBuffCallback) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoTriggerEffectGroup, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ArConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *OnKillTriggeredBuffCallback) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("SnoTriggerEffectGroup", &t.SnoTriggerEffectGroup)
	cb.Do("ArConditions", &t.ArConditions)
}

type EssencePowerTierEntry struct {
	NItemPowerMin DT_INT
}

func (t *EssencePowerTierEntry) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.NItemPowerMin, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+4, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *EssencePowerTierEntry) Walk(cb WalkCallback) {
	cb.Do("NItemPowerMin", &t.NItemPowerMin)
}

type ItemDungeonKeyDataMessage struct {
	THeader           RequiredMessageHeader
	Ann               DT_ACD_NETWORK_NAME
	SnoWorld          DT_SNO
	ArDungeonAffixes  DT_FIXEDARRAY[*DT_SNO]
	UKeyedDungeonTier DT_OPTIONAL[*DT_UINT]
}

func (t *ItemDungeonKeyDataMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Ann, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SnoWorld, r, &Options{
		Flags: 1,
		Group: 48,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.ArDungeonAffixes, r, &Options{
		ArrayLength: 8,
		Flags:       9,
		Group:       135,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.UKeyedDungeonTier, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+72, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ItemDungeonKeyDataMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("Ann", &t.Ann)
	cb.Do("SnoWorld", &t.SnoWorld)
	cb.Do("ArDungeonAffixes", &t.ArDungeonAffixes)
	cb.Do("UKeyedDungeonTier", &t.UKeyedDungeonTier)
}

type ScriptEventParamTimeInterval struct {
	// Inherits ScriptEventParamBase
	// Inherits PolymorphicBase
	DwType            DT_UINT
	EParamType        DT_ENUM
	DwPad             DT_UINT
	EFilterInequality DT_ENUM
	FlTimeInterval    DT_FLOAT
}

func (t *ScriptEventParamTimeInterval) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.EParamType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.EFilterInequality, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.FlTimeInterval, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ScriptEventParamTimeInterval) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("EParamType", &t.EParamType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("EFilterInequality", &t.EFilterInequality)
	cb.Do("FlTimeInterval", &t.FlTimeInterval)
}

type Type_d3c3637f struct {
	// Inherits Subcondition
	// Inherits PolymorphicBase
	DwType        DT_UINT
	BNegate       DT_INT
	EComparisonOp DT_ENUM
	DwPad         DT_UINT
}

func (t *Type_d3c3637f) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BNegate, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.EComparisonOp, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_d3c3637f) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("BNegate", &t.BNegate)
	cb.Do("EComparisonOp", &t.EComparisonOp)
	cb.Do("DwPad", &t.DwPad)
}

type OnInitializeAttackBuffCallback struct {
	// Inherits BuffCallbackBase
	// Inherits PolymorphicBase
	DwType                DT_UINT
	DwPad                 DT_UINT
	SnoTriggerEffectGroup DT_SNO
	ArConditions          DT_POLYMORPHIC_VARIABLEARRAY[*DT_INT64]
}

func (t *OnInitializeAttackBuffCallback) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoTriggerEffectGroup, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ArConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *OnInitializeAttackBuffCallback) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("SnoTriggerEffectGroup", &t.SnoTriggerEffectGroup)
	cb.Do("ArConditions", &t.ArConditions)
}

type LevelAreaDefinition struct {
	DwFlags                  DT_UINT
	SnoWeather               DT_SNO
	SnoAudioContext          DT_SNO
	SnoObserverOverride      DT_SNO
	SnoCampaignTownCondition DT_SNO
	Unk_27d289f              DT_INT
	RgbaDebugColor           DT_RGBACOLOR
	SnoFogOfWar              DT_SNO
	TPrivateLevelScaling     LevelScalingData
	ArPublicLevelScaling     DT_FIXEDARRAY[*LevelScalingData]
	TServices                SupportedServices
}

func (t *LevelAreaDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.SnoWeather, r, &Options{
		Flags: 1,
		Group: 47,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoAudioContext, r, &Options{
		Flags: 1,
		Group: 93,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.SnoObserverOverride, r, &Options{
		Flags: 1,
		Group: 26,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SnoCampaignTownCondition, r, &Options{
		Flags: 1,
		Group: 51,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.Unk_27d289f, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.RgbaDebugColor, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.SnoFogOfWar, r, &Options{
		Flags: 1,
		Group: 123,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.TPrivateLevelScaling, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.ArPublicLevelScaling, r, &Options{
		ArrayLength: 4,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.TServices, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+212, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *LevelAreaDefinition) Walk(cb WalkCallback) {
	cb.Do("DwFlags", &t.DwFlags)
	cb.Do("SnoWeather", &t.SnoWeather)
	cb.Do("SnoAudioContext", &t.SnoAudioContext)
	cb.Do("SnoObserverOverride", &t.SnoObserverOverride)
	cb.Do("SnoCampaignTownCondition", &t.SnoCampaignTownCondition)
	cb.Do("Unk_27d289f", &t.Unk_27d289f)
	cb.Do("RgbaDebugColor", &t.RgbaDebugColor)
	cb.Do("SnoFogOfWar", &t.SnoFogOfWar)
	cb.Do("TPrivateLevelScaling", &t.TPrivateLevelScaling)
	cb.Do("ArPublicLevelScaling", &t.ArPublicLevelScaling)
	cb.Do("TServices", &t.TServices)
}

type Type_d403e64e struct {
	// Inherits GameBalanceTable
	// Inherits PolymorphicBase
	DwType   DT_UINT
	DwPad    DT_UINT
	TEntries DT_VARIABLEARRAY[*Type_31a7ff07]
}

func (t *Type_d403e64e) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TEntries, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_d403e64e) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("TEntries", &t.TEntries)
}

type Type_d4213c9b struct {
	DwType      DT_UINT
	Unk_9b2bc26 Type_80554fed
	Unk_77ed19a DT_ENUM
	DwPad       DT_UINT
}

func (t *Type_d4213c9b) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_9b2bc26, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.Unk_77ed19a, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+56, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_d4213c9b) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("Unk_9b2bc26", &t.Unk_9b2bc26)
	cb.Do("Unk_77ed19a", &t.Unk_77ed19a)
	cb.Do("DwPad", &t.DwPad)
}

type Type_d4235100 struct {
	SnoActor   DT_SNO
	Unk_15efd3 SerialDataInfo
}

func (t *Type_d4235100) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoActor, r, &Options{
		Flags: 1,
		Group: 1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.Unk_15efd3, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+12, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_d4235100) Walk(cb WalkCallback) {
	cb.Do("SnoActor", &t.SnoActor)
	cb.Do("Unk_15efd3", &t.Unk_15efd3)
}

type ACDTranslateProjectileMessage struct {
	THeader                 RequiredMessageHeader
	Ann                     DT_ACD_NETWORK_NAME
	VPos                    DT_VECTOR3D
	QRot                    bcQuat
	VVel                    DT_VECTOR3D
	Unk_a25a877             DT_OPTIONAL[*DT_VECTOR3D]
	UMoveFlags              DT_OPTIONAL[*DT_UINT]
	SnoPowerAnimKeyOverride DT_OPTIONAL[*DT_SNO]
	FlSpeedMult             DT_OPTIONAL[*DT_FLOAT]
}

func (t *ACDTranslateProjectileMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Ann, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.VPos, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.QRot, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.VVel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.Unk_a25a877, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.UMoveFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.SnoPowerAnimKeyOverride, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.FlSpeedMult, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+104, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ACDTranslateProjectileMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("Ann", &t.Ann)
	cb.Do("VPos", &t.VPos)
	cb.Do("QRot", &t.QRot)
	cb.Do("VVel", &t.VVel)
	cb.Do("Unk_a25a877", &t.Unk_a25a877)
	cb.Do("UMoveFlags", &t.UMoveFlags)
	cb.Do("SnoPowerAnimKeyOverride", &t.SnoPowerAnimKeyOverride)
	cb.Do("FlSpeedMult", &t.FlSpeedMult)
}

type PlayerTitleResponseMessage struct {
	THeader               RequiredRequestMessageHeader
	DwPlayerGameAccountId DT_UINT
	TPlayerTitle          SavedPlayerTitle
}

func (t *PlayerTitleResponseMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPlayerGameAccountId, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.TPlayerTitle, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PlayerTitleResponseMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("DwPlayerGameAccountId", &t.DwPlayerGameAccountId)
	cb.Do("TPlayerTitle", &t.TPlayerTitle)
}

type PowerOverride struct {
	// Inherits PolymorphicBase
	DwType           DT_UINT
	DwPad            DT_UINT
	SnoInputPower    DT_SNO
	SnoOverridePower DT_SNO
}

func (t *PowerOverride) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoInputPower, r, &Options{
		Flags: 513,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.SnoOverridePower, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PowerOverride) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("SnoInputPower", &t.SnoInputPower)
	cb.Do("SnoOverridePower", &t.SnoOverridePower)
}

type PlayerForceShapeshiftMessage struct {
	THeader               RequiredMessageHeader
	DwPlayerGameAccountId DT_UINT
	EShapeshiftForm       DT_ENUM
}

func (t *PlayerForceShapeshiftMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.DwPlayerGameAccountId, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.EShapeshiftForm, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PlayerForceShapeshiftMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("DwPlayerGameAccountId", &t.DwPlayerGameAccountId)
	cb.Do("EShapeshiftForm", &t.EShapeshiftForm)
}

type TriggerEventFadeGroup struct {
	// Inherits TriggerEvent
	// Inherits PolymorphicBase
	DwType          DT_UINT
	DwPad           DT_UINT
	TConditions     TriggerConditions
	FGenerated      DT_INT
	Unk_6cba752     DT_INT
	DwParentActorID DT_UINT
	Unk_8dea4d9     DT_INT
	NFadeGroup      DT_INT
	EBehavior       DT_ENUM
	Unk_2b48a58     DT_INT
}

func (t *TriggerEventFadeGroup) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.FGenerated, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_6cba752, r, &Options{Flags: 16}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.DwParentActorID, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.Unk_8dea4d9, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.NFadeGroup, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.EBehavior, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.Unk_2b48a58, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+96, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TriggerEventFadeGroup) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("TConditions", &t.TConditions)
	cb.Do("FGenerated", &t.FGenerated)
	cb.Do("Unk_6cba752", &t.Unk_6cba752)
	cb.Do("DwParentActorID", &t.DwParentActorID)
	cb.Do("Unk_8dea4d9", &t.Unk_8dea4d9)
	cb.Do("NFadeGroup", &t.NFadeGroup)
	cb.Do("EBehavior", &t.EBehavior)
	cb.Do("Unk_2b48a58", &t.Unk_2b48a58)
}

type HelpCode struct {
	THeader     GBIDHeader
	Unk_d35e7ff DT_GBID
	BSubMenu    DT_INT
	SzCommand   DT_CHARARRAY
}

func (t *HelpCode) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+260, &t.Unk_d35e7ff, r, &Options{
		Flags: 1,
		Group: 9,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+264, &t.BSubMenu, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+268, &t.SzCommand, r, &Options{
		ArrayLength: 1024,
		Flags:       1,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+1292, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *HelpCode) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("Unk_d35e7ff", &t.Unk_d35e7ff)
	cb.Do("BSubMenu", &t.BSubMenu)
	cb.Do("SzCommand", &t.SzCommand)
}

type PlayConvLineMessage struct {
	THeader         RequiredMessageHeader
	AnnSpeaker      DT_ACD_NETWORK_NAME
	TParams         PlayLineParams
	EContext        DT_ENUM
	FlTimeToDisplay DT_FLOAT
}

func (t *PlayConvLineMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.AnnSpeaker, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.TParams, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.EContext, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+116, &t.FlTimeToDisplay, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+120, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PlayConvLineMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("AnnSpeaker", &t.AnnSpeaker)
	cb.Do("TParams", &t.TParams)
	cb.Do("EContext", &t.EContext)
	cb.Do("FlTimeToDisplay", &t.FlTimeToDisplay)
}

type GlobalRoadData struct {
	// Inherits GlobalBase
	// Inherits PolymorphicBase
	DwType              DT_UINT
	DwPad               DT_UINT
	ArGlobalRoadGraphs  DT_VARIABLEARRAY[*GlobalRoadGraph]
	ArGlobalRoadSplines DT_VARIABLEARRAY[*GlobalRoadSpline]
}

func (t *GlobalRoadData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.ArGlobalRoadGraphs, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.ArGlobalRoadSplines, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *GlobalRoadData) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("ArGlobalRoadGraphs", &t.ArGlobalRoadGraphs)
	cb.Do("ArGlobalRoadSplines", &t.ArGlobalRoadSplines)
}

type NecroArmyUnitTypeData struct {
	SnoSkillBarPower  DT_SNO
	SnoPetSpawnPower  DT_SNO
	GbidPetType       DT_GBID
	HIconOverride     DT_UINT
	ArSpecializations DT_FIXEDARRAY[*NecroArmyUnitSpecializationData]
}

func (t *NecroArmyUnitTypeData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoSkillBarPower, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.SnoPetSpawnPower, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.GbidPetType, r, &Options{
		Flags: 1,
		Group: 23,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.HIconOverride, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.ArSpecializations, r, &Options{
		ArrayLength: 3,
		Flags:       1,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+280, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *NecroArmyUnitTypeData) Walk(cb WalkCallback) {
	cb.Do("SnoSkillBarPower", &t.SnoSkillBarPower)
	cb.Do("SnoPetSpawnPower", &t.SnoPetSpawnPower)
	cb.Do("GbidPetType", &t.GbidPetType)
	cb.Do("HIconOverride", &t.HIconOverride)
	cb.Do("ArSpecializations", &t.ArSpecializations)
}

type PlayHitJitterMessage struct {
	THeader         RequiredMessageHeader
	Ann             DT_ACD_NETWORK_NAME
	VLocalImpactPos DT_VECTOR3D
}

func (t *PlayHitJitterMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Ann, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.VLocalImpactPos, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+36, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PlayHitJitterMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("Ann", &t.Ann)
	cb.Do("VLocalImpactPos", &t.VLocalImpactPos)
}

type OnDoDamageBuffCallback struct {
	// Inherits ProcChanceBuffCallbackBase
	// Inherits BuffCallbackBase
	// Inherits PolymorphicBase
	DwType                DT_UINT
	DwPad                 DT_UINT
	SnoTriggerEffectGroup DT_SNO
	ArConditions          DT_POLYMORPHIC_VARIABLEARRAY[*DT_INT64]
	BAlwaysProcs          DT_INT
	DwPadding             DT_UINT
	TProcChance           DT_STRING_FORMULA
	Unk_b52872c           DT_INT
}

func (t *OnDoDamageBuffCallback) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoTriggerEffectGroup, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ArConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.BAlwaysProcs, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.DwPadding, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.TProcChance, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.Unk_b52872c, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+96, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *OnDoDamageBuffCallback) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("SnoTriggerEffectGroup", &t.SnoTriggerEffectGroup)
	cb.Do("ArConditions", &t.ArConditions)
	cb.Do("BAlwaysProcs", &t.BAlwaysProcs)
	cb.Do("DwPadding", &t.DwPadding)
	cb.Do("TProcChance", &t.TProcChance)
	cb.Do("Unk_b52872c", &t.Unk_b52872c)
}

type GlobalEmotes struct {
	// Inherits GlobalBase
	// Inherits PolymorphicBase
	DwType          DT_UINT
	DwPad           DT_UINT
	ArInitialEmotes DT_VARIABLEARRAY[*DT_SNO]
}

func (t *GlobalEmotes) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.ArInitialEmotes, r, &Options{
		Flags: 1,
		Group: 118,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *GlobalEmotes) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("ArInitialEmotes", &t.ArInitialEmotes)
}

type UIControlGroupStyle struct {
	// Inherits UIControlStyle
	// Inherits PolymorphicBase
	DwType                    DT_UINT
	DwPad                     DT_UINT
	HParentStyle              UIControlHandle
	Unk_441f783               DT_INT64
	M_eHasModifiedPowerTagMap DT_TAGMAP[*DT_ENUM]
}

func (t *UIControlGroupStyle) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.HParentStyle, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_441f783, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.M_eHasModifiedPowerTagMap, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *UIControlGroupStyle) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("HParentStyle", &t.HParentStyle)
	cb.Do("Unk_441f783", &t.Unk_441f783)
	cb.Do("M_eHasModifiedPowerTagMap", &t.M_eHasModifiedPowerTagMap)
}

type EffectGroupRotationRollKeyData struct {
	// Inherits EffectGroupKeyData
	// Inherits PolymorphicBase
	DwType     DT_UINT
	DwPad      DT_UINT
	ArKeyItems DT_VARIABLEARRAY[*EffectGroupKey]
}

func (t *EffectGroupRotationRollKeyData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.ArKeyItems, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *EffectGroupRotationRollKeyData) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("ArKeyItems", &t.ArKeyItems)
}

type HiddenCacheEntry_Table struct {
	// Inherits GameBalanceTable
	// Inherits PolymorphicBase
	DwType   DT_UINT
	DwPad    DT_UINT
	TEntries DT_VARIABLEARRAY[*HiddenCacheEntry]
}

func (t *HiddenCacheEntry_Table) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TEntries, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *HiddenCacheEntry_Table) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("TEntries", &t.TEntries)
}

type PVPShrineEventParticipatingMessage struct {
	THeader   RequiredMessageHeader
	DwEnd     DT_UINT
	AnnShrine DT_ACD_NETWORK_NAME
}

func (t *PVPShrineEventParticipatingMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.DwEnd, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.AnnShrine, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+28, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PVPShrineEventParticipatingMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("DwEnd", &t.DwEnd)
	cb.Do("AnnShrine", &t.AnnShrine)
}

type ValidComponents struct {
	TComponentArray DT_VARIABLEARRAY[*ValidComponent]
}

func (t *ValidComponents) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.TComponentArray, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ValidComponents) Walk(cb WalkCallback) {
	cb.Do("TComponentArray", &t.TComponentArray)
}

type TriggerEventFootstepTrail struct {
	// Inherits TriggerEventRangedDuration
	// Inherits TriggerEvent
	// Inherits PolymorphicBase
	DwType           DT_UINT
	TConditions      TriggerConditions
	FGenerated       DT_INT
	Unk_6cba752      DT_INT
	DwParentActorID  DT_UINT
	TDuration        DT_FLOAT
	DwTriggerFlags   DT_UINT
	DwTriggerFlagsEx DT_UINT
	TCleanup         TriggerCleanup
	Unk_49e9257      DT_INT
	Unk_5490979      DT_INT
	DwPad            DT_UINT
	THardpointLink   HardpointLink
}

func (t *TriggerEventFootstepTrail) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.FGenerated, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_6cba752, r, &Options{Flags: 16}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.DwParentActorID, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.TDuration, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.DwTriggerFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.DwTriggerFlagsEx, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.TCleanup, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+116, &t.Unk_49e9257, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.Unk_5490979, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+124, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.THardpointLink, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+136, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TriggerEventFootstepTrail) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("TConditions", &t.TConditions)
	cb.Do("FGenerated", &t.FGenerated)
	cb.Do("Unk_6cba752", &t.Unk_6cba752)
	cb.Do("DwParentActorID", &t.DwParentActorID)
	cb.Do("TDuration", &t.TDuration)
	cb.Do("DwTriggerFlags", &t.DwTriggerFlags)
	cb.Do("DwTriggerFlagsEx", &t.DwTriggerFlagsEx)
	cb.Do("TCleanup", &t.TCleanup)
	cb.Do("Unk_49e9257", &t.Unk_49e9257)
	cb.Do("Unk_5490979", &t.Unk_5490979)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("THardpointLink", &t.THardpointLink)
}

type WwiseExternalSourceSoundBank struct {
	// Inherits WwiseSoundBankContentBase
	// Inherits PolymorphicBase
	DwType            DT_UINT
	DwPad             DT_UINT
	ArExternalSources DT_VARIABLEARRAY[*WwiseExternalSource]
}

func (t *WwiseExternalSourceSoundBank) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.ArExternalSources, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *WwiseExternalSourceSoundBank) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("ArExternalSources", &t.ArExternalSources)
}

type PowerFormulaTableEntry struct {
	SzName  DT_CHARARRAY
	FlValue DT_FIXEDARRAY[*DT_FLOAT]
}

func (t *PowerFormulaTableEntry) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SzName, r, &Options{
		ArrayLength: 1024,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1024, &t.FlValue, r, &Options{
		ArrayLength: 76,
		Flags:       1,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+1328, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PowerFormulaTableEntry) Walk(cb WalkCallback) {
	cb.Do("SzName", &t.SzName)
	cb.Do("FlValue", &t.FlValue)
}

type Type_d6dab54d struct {
	DwMediaID DT_UINT
	TName     WwiseName
}

func (t *Type_d6dab54d) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.DwMediaID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.TName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_d6dab54d) Walk(cb WalkCallback) {
	cb.Do("DwMediaID", &t.DwMediaID)
	cb.Do("TName", &t.TName)
}

type EffectGroupCameraTrack struct {
	// Inherits EffectGroupTrack
	// Inherits PolymorphicBase
	DwType DT_UINT
	DwPad  DT_UINT
}

func (t *EffectGroupCameraTrack) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *EffectGroupCameraTrack) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
}

type WorldTierData struct {
	DwUnlockLevel       DT_UINT
	Unk_db9e2c          DT_INT
	PtPlayerAttributes  DT_VARIABLEARRAY[*AttributeSpecifier]
	TLevelScalingData   LevelScalingData
	Unk_2bca372         DT_INT
	Unk_b1d243f         DT_INT
	Unk_a4f6399         DT_INT
	Unk_458b4ff         DT_FLOAT
	Unk_6bdfabc         DT_FLOAT
	Unk_de899e2         DT_FLOAT
	Unk_4404336         DT_FLOAT
	Unk_f40f193         DT_FLOAT
	Unk_d6bbd39         DT_FLOAT
	Unk_e362b2e         DT_FLOAT
	Unk_49768b          DT_FLOAT
	Unk_bc88631         DT_FLOAT
	Unk_b794376         DT_FLOAT
	Unk_7fd09d3         DT_FLOAT
	Unk_565b579         DT_FLOAT
	Unk_60d111b         DT_FLOAT
	Unk_e743158         DT_FLOAT
	Unk_633e27e         DT_FLOAT
	Unk_e9ded47         DT_BYTE
	PtMonsterAttributes DT_VARIABLEARRAY[*AttributeSpecifier]
	Unk_5a79ac1         DT_FIXEDARRAY[*DT_FLOAT]
	Unk_fffd308         DT_FLOAT
	Unk_a420de9         DT_FIXEDARRAY[*DT_INT]
	Unk_fb475a3         DT_FIXEDARRAY[*DT_INT]
	Unk_2ae7938         DT_FIXEDARRAY[*DT_INT]
	Unk_afbfb6b         DT_FIXEDARRAY[*DT_INT]
	Unk_cf174d8         DT_FLOAT
}

func (t *WorldTierData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.DwUnlockLevel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.Unk_db9e2c, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.PtPlayerAttributes, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.TLevelScalingData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.Unk_2bca372, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.Unk_b1d243f, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.Unk_a4f6399, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.Unk_458b4ff, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.Unk_6bdfabc, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+60, &t.Unk_de899e2, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.Unk_4404336, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.Unk_f40f193, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_d6bbd39, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.Unk_e362b2e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.Unk_49768b, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.Unk_bc88631, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.Unk_b794376, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.Unk_7fd09d3, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.Unk_565b579, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+100, &t.Unk_60d111b, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+104, &t.Unk_e743158, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+108, &t.Unk_633e27e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.Unk_e9ded47, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.PtMonsterAttributes, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+136, &t.Unk_5a79ac1, r, &Options{
		ArrayLength: 3,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+148, &t.Unk_fffd308, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+152, &t.Unk_a420de9, r, &Options{
		ArrayLength: 3,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+164, &t.Unk_fb475a3, r, &Options{
		ArrayLength: 3,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+176, &t.Unk_2ae7938, r, &Options{
		ArrayLength: 5,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+196, &t.Unk_afbfb6b, r, &Options{
		ArrayLength: 3,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+208, &t.Unk_cf174d8, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+216, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *WorldTierData) Walk(cb WalkCallback) {
	cb.Do("DwUnlockLevel", &t.DwUnlockLevel)
	cb.Do("Unk_db9e2c", &t.Unk_db9e2c)
	cb.Do("PtPlayerAttributes", &t.PtPlayerAttributes)
	cb.Do("TLevelScalingData", &t.TLevelScalingData)
	cb.Do("Unk_2bca372", &t.Unk_2bca372)
	cb.Do("Unk_b1d243f", &t.Unk_b1d243f)
	cb.Do("Unk_a4f6399", &t.Unk_a4f6399)
	cb.Do("Unk_458b4ff", &t.Unk_458b4ff)
	cb.Do("Unk_6bdfabc", &t.Unk_6bdfabc)
	cb.Do("Unk_de899e2", &t.Unk_de899e2)
	cb.Do("Unk_4404336", &t.Unk_4404336)
	cb.Do("Unk_f40f193", &t.Unk_f40f193)
	cb.Do("Unk_d6bbd39", &t.Unk_d6bbd39)
	cb.Do("Unk_e362b2e", &t.Unk_e362b2e)
	cb.Do("Unk_49768b", &t.Unk_49768b)
	cb.Do("Unk_bc88631", &t.Unk_bc88631)
	cb.Do("Unk_b794376", &t.Unk_b794376)
	cb.Do("Unk_7fd09d3", &t.Unk_7fd09d3)
	cb.Do("Unk_565b579", &t.Unk_565b579)
	cb.Do("Unk_60d111b", &t.Unk_60d111b)
	cb.Do("Unk_e743158", &t.Unk_e743158)
	cb.Do("Unk_633e27e", &t.Unk_633e27e)
	cb.Do("Unk_e9ded47", &t.Unk_e9ded47)
	cb.Do("PtMonsterAttributes", &t.PtMonsterAttributes)
	cb.Do("Unk_5a79ac1", &t.Unk_5a79ac1)
	cb.Do("Unk_fffd308", &t.Unk_fffd308)
	cb.Do("Unk_a420de9", &t.Unk_a420de9)
	cb.Do("Unk_fb475a3", &t.Unk_fb475a3)
	cb.Do("Unk_2ae7938", &t.Unk_2ae7938)
	cb.Do("Unk_afbfb6b", &t.Unk_afbfb6b)
	cb.Do("Unk_cf174d8", &t.Unk_cf174d8)
}

type TriggerEventSetTimeOfDay struct {
	// Inherits TriggerEvent
	// Inherits PolymorphicBase
	DwType          DT_UINT
	DwPad           DT_UINT
	TConditions     TriggerConditions
	FGenerated      DT_INT
	Unk_6cba752     DT_INT
	DwParentActorID DT_UINT
	FlTimeOfDay     DT_FLOAT
}

func (t *TriggerEventSetTimeOfDay) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.FGenerated, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_6cba752, r, &Options{Flags: 16}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.DwParentActorID, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.FlTimeOfDay, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+88, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TriggerEventSetTimeOfDay) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("TConditions", &t.TConditions)
	cb.Do("FGenerated", &t.FGenerated)
	cb.Do("Unk_6cba752", &t.Unk_6cba752)
	cb.Do("DwParentActorID", &t.DwParentActorID)
	cb.Do("FlTimeOfDay", &t.FlTimeOfDay)
}

type Type_d774a564 struct {
	// Inherits Type_7e418ba8
	// Inherits PolymorphicBase
	DwType       DT_UINT
	Unk_2de4987  DT_UINT
	ArConditions DT_POLYMORPHIC_VARIABLEARRAY[*DT_INT64]
	BEnd         DT_INT
	DwPad        DT_UINT
	FlDistance   DT_FLOAT
}

func (t *Type_d774a564) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_2de4987, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ArConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.BEnd, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.FlDistance, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+64, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_d774a564) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("Unk_2de4987", &t.Unk_2de4987)
	cb.Do("ArConditions", &t.ArConditions)
	cb.Do("BEnd", &t.BEnd)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("FlDistance", &t.FlDistance)
}

type ParagonNodeMessage struct {
	THeader     RequiredMessageHeader
	DwNodeIndex DT_UINT
	BIsCheat    DT_INT
}

func (t *ParagonNodeMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.DwNodeIndex, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.BIsCheat, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ParagonNodeMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("DwNodeIndex", &t.DwNodeIndex)
	cb.Do("BIsCheat", &t.BIsCheat)
}

type ChatMessage struct {
	THeader               RequiredMessageHeader
	DwPlayerGameAccountId DT_UINT
	UsMessage             DT_CHARARRAY
}

func (t *ChatMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.DwPlayerGameAccountId, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.UsMessage, r, &Options{
		ArrayLength: 1024,
		Flags:       1,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+1044, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ChatMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("DwPlayerGameAccountId", &t.DwPlayerGameAccountId)
	cb.Do("UsMessage", &t.UsMessage)
}

type Type_d7ee8f26 struct {
	SnoMaterialValue DT_SNO
	NBitOffset       DT_INT
	Unk_bbe4258      DT_VARIABLEARRAY[*DT_FLOAT]
	FlDefaultValue   DT_FLOAT
}

func (t *Type_d7ee8f26) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoMaterialValue, r, &Options{
		Flags: 1,
		Group: 81,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.NBitOffset, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.Unk_bbe4258, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.FlDefaultValue, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_d7ee8f26) Walk(cb WalkCallback) {
	cb.Do("SnoMaterialValue", &t.SnoMaterialValue)
	cb.Do("NBitOffset", &t.NBitOffset)
	cb.Do("Unk_bbe4258", &t.Unk_bbe4258)
	cb.Do("FlDefaultValue", &t.FlDefaultValue)
}

type EmblemDefinition struct {
	HSmallIcon DT_UINT
	HLargeIcon DT_UINT
}

func (t *EmblemDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.HSmallIcon, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.HLargeIcon, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *EmblemDefinition) Walk(cb WalkCallback) {
	cb.Do("HSmallIcon", &t.HSmallIcon)
	cb.Do("HLargeIcon", &t.HLargeIcon)
}

type PlayerClassDefinition struct {
	SnoActorMale                    DT_SNO
	SnoActorFemale                  DT_SNO
	SnoInventory                    DT_SNO
	FlStartingStrength              DT_FLOAT
	FlStartingIntelligence          DT_FLOAT
	FlStartingWillpower             DT_FLOAT
	FlStartingDexterity             DT_FLOAT
	FlAttributesHitPoints           DT_FLOAT
	Unk_81247b7                     DT_FLOAT
	Unk_9ae1b37                     DT_FLOAT
	Unk_9ae1b42                     DT_FLOAT
	TPrimaryResource                PlayerClassResourceData
	TSecondaryResource              PlayerClassResourceData
	Unk_b34fba9                     DT_FLOAT
	FlAttributesWalkSpeed           DT_FLOAT
	FlAttributesRunSpeed            DT_FLOAT
	FlVelRule                       DT_FLOAT
	Unk_7b1fc5b                     DT_FLOAT
	TFacingData                     ActorFacingData
	FlAttributesCritPercentBase     DT_FLOAT
	FlAttributesOverpowerChanceBase DT_FLOAT
	FlAttributesResistFire          DT_FLOAT
	FlAttributesResistLightning     DT_FLOAT
	FlAttributesResistCold          DT_FLOAT
	FlAttributesResistPoison        DT_FLOAT
	FlAttributesResistShadow        DT_FLOAT
	FlAttributesResistChill         DT_FLOAT
	FlAttributeDodgeChanceBonus     DT_FLOAT
	ArCoreStatBenefit               DT_FIXEDARRAY[*PlayerClassCoreStatBenefitData]
	Unk_39a9625                     DT_GBID
	SnoSkillKit                     DT_SNO
	SnoSkillKitBlizzconOverride     DT_SNO
	Unk_1d2596f                     DT_SNO
	Unk_f52d089                     DT_FIXEDARRAY[*DT_UINT]
	SnoCombatDismountPower          DT_SNO
	SnoActorResourceGlobe           DT_SNO
	Unk_63df9da                     DT_INT
	TNecroData                      PlayerClassNecroData
	TRogueData                      PlayerClassRogueData
	TSorcererData                   PlayerClassSorcererData
	TDruidData                      PlayerClassDruidData
	TBarbData                       PlayerClassBarbData
	ArItemTiers                     DT_VARIABLEARRAY[*ItemTier]
	ArAvailableParagonBoards        DT_VARIABLEARRAY[*DT_SNO]
	Unk_b3a4391                     Type_da21c503
	Unk_17ee464                     DT_SNO
	Unk_a4bc7c3                     DT_SNO
	Unk_1b99fc4                     DT_UINT
	Unk_eab00df                     DT_SNO
	Unk_8979ddf                     DT_SNO
	Unk_a15f17d                     DT_UINT
	Unk_b81b6f8                     DT_SNO
	Unk_9d88058                     DT_SNO
	Unk_3c51d58                     DT_SNO
	Unk_c88ca1                      DT_SNO
	Unk_85b42dd                     DT_SNO
	Unk_5529fd9                     DT_SNO
	Unk_9da7619                     DT_SNO
	Unk_311f93e                     DT_SNO
	Unk_db15dcc                     DT_UINT
	Unk_480ce4d                     DT_UINT
	Unk_c204c1f                     DT_UINT
	Unk_ac2a184                     DT_UINT
	Unk_f9a8bfb                     DT_UINT
	Unk_c68960d                     DT_UINT
	Unk_f4db603                     DT_UINT
	Unk_f4401b8                     DT_UINT
	Unk_f38a271                     DT_UINT
	Unk_71458eb                     DT_UINT
	Unk_a996ec1                     DT_UINT
	Unk_699692c                     DT_UINT
	Unk_f5348c2                     DT_UINT
	Unk_4996ef8                     DT_UINT
	Unk_1052b5d                     DT_UINT
	Unk_a43c1cd                     DT_UINT
	Unk_448f16c                     DT_UINT
	SnoNamesMale                    DT_SNO
	SnoNamesFemale                  DT_SNO
	Unk_a0254bb                     DT_UINT
}

func (t *PlayerClassDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.SnoActorMale, r, &Options{
		Flags: 1,
		Group: 1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.SnoActorFemale, r, &Options{
		Flags: 1,
		Group: 1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoInventory, r, &Options{
		Flags: 1,
		Group: 52,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.FlStartingStrength, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.FlStartingIntelligence, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.FlStartingWillpower, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.FlStartingDexterity, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.FlAttributesHitPoints, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.Unk_81247b7, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.Unk_9ae1b37, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.Unk_9ae1b42, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.TPrimaryResource, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.TSecondaryResource, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+116, &t.Unk_b34fba9, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.FlAttributesWalkSpeed, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+124, &t.FlAttributesRunSpeed, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.FlVelRule, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+132, &t.Unk_7b1fc5b, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+136, &t.TFacingData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+148, &t.FlAttributesCritPercentBase, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+152, &t.FlAttributesOverpowerChanceBase, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+156, &t.FlAttributesResistFire, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+160, &t.FlAttributesResistLightning, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+164, &t.FlAttributesResistCold, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+168, &t.FlAttributesResistPoison, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+172, &t.FlAttributesResistShadow, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+176, &t.FlAttributesResistChill, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+180, &t.FlAttributeDodgeChanceBonus, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+184, &t.ArCoreStatBenefit, r, &Options{
		ArrayLength: 4,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+248, &t.Unk_39a9625, r, &Options{
		Flags: 1,
		Group: 34,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+252, &t.SnoSkillKit, r, &Options{
		Flags: 1,
		Group: 39,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+256, &t.SnoSkillKitBlizzconOverride, r, &Options{
		Flags: 1,
		Group: 39,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+260, &t.Unk_1d2596f, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+264, &t.Unk_f52d089, r, &Options{
		ArrayLength: 6,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+288, &t.SnoCombatDismountPower, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+292, &t.SnoActorResourceGlobe, r, &Options{
		Flags: 1,
		Group: 1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+296, &t.Unk_63df9da, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+304, &t.TNecroData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1152, &t.TRogueData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1208, &t.TSorcererData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1240, &t.TDruidData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1280, &t.TBarbData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1312, &t.ArItemTiers, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1328, &t.ArAvailableParagonBoards, r, &Options{
		Flags: 1,
		Group: 108,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1344, &t.Unk_b3a4391, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1360, &t.Unk_17ee464, r, &Options{
		Flags: 1,
		Group: 48,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1364, &t.Unk_a4bc7c3, r, &Options{
		Flags: 1,
		Group: 48,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1368, &t.Unk_1b99fc4, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1372, &t.Unk_eab00df, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1376, &t.Unk_8979ddf, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1380, &t.Unk_a15f17d, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1384, &t.Unk_b81b6f8, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1388, &t.Unk_9d88058, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1392, &t.Unk_3c51d58, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1396, &t.Unk_c88ca1, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1400, &t.Unk_85b42dd, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1404, &t.Unk_5529fd9, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1408, &t.Unk_9da7619, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1412, &t.Unk_311f93e, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1416, &t.Unk_db15dcc, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1420, &t.Unk_480ce4d, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1424, &t.Unk_c204c1f, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1428, &t.Unk_ac2a184, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1432, &t.Unk_f9a8bfb, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1436, &t.Unk_c68960d, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1440, &t.Unk_f4db603, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1444, &t.Unk_f4401b8, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1448, &t.Unk_f38a271, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1452, &t.Unk_71458eb, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1456, &t.Unk_a996ec1, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1460, &t.Unk_699692c, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1464, &t.Unk_f5348c2, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1468, &t.Unk_4996ef8, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1472, &t.Unk_1052b5d, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1476, &t.Unk_a43c1cd, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1480, &t.Unk_448f16c, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1484, &t.SnoNamesMale, r, &Options{
		Flags: 1,
		Group: 42,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1488, &t.SnoNamesFemale, r, &Options{
		Flags: 1,
		Group: 42,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1492, &t.Unk_a0254bb, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+1496, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PlayerClassDefinition) Walk(cb WalkCallback) {
	cb.Do("SnoActorMale", &t.SnoActorMale)
	cb.Do("SnoActorFemale", &t.SnoActorFemale)
	cb.Do("SnoInventory", &t.SnoInventory)
	cb.Do("FlStartingStrength", &t.FlStartingStrength)
	cb.Do("FlStartingIntelligence", &t.FlStartingIntelligence)
	cb.Do("FlStartingWillpower", &t.FlStartingWillpower)
	cb.Do("FlStartingDexterity", &t.FlStartingDexterity)
	cb.Do("FlAttributesHitPoints", &t.FlAttributesHitPoints)
	cb.Do("Unk_81247b7", &t.Unk_81247b7)
	cb.Do("Unk_9ae1b37", &t.Unk_9ae1b37)
	cb.Do("Unk_9ae1b42", &t.Unk_9ae1b42)
	cb.Do("TPrimaryResource", &t.TPrimaryResource)
	cb.Do("TSecondaryResource", &t.TSecondaryResource)
	cb.Do("Unk_b34fba9", &t.Unk_b34fba9)
	cb.Do("FlAttributesWalkSpeed", &t.FlAttributesWalkSpeed)
	cb.Do("FlAttributesRunSpeed", &t.FlAttributesRunSpeed)
	cb.Do("FlVelRule", &t.FlVelRule)
	cb.Do("Unk_7b1fc5b", &t.Unk_7b1fc5b)
	cb.Do("TFacingData", &t.TFacingData)
	cb.Do("FlAttributesCritPercentBase", &t.FlAttributesCritPercentBase)
	cb.Do("FlAttributesOverpowerChanceBase", &t.FlAttributesOverpowerChanceBase)
	cb.Do("FlAttributesResistFire", &t.FlAttributesResistFire)
	cb.Do("FlAttributesResistLightning", &t.FlAttributesResistLightning)
	cb.Do("FlAttributesResistCold", &t.FlAttributesResistCold)
	cb.Do("FlAttributesResistPoison", &t.FlAttributesResistPoison)
	cb.Do("FlAttributesResistShadow", &t.FlAttributesResistShadow)
	cb.Do("FlAttributesResistChill", &t.FlAttributesResistChill)
	cb.Do("FlAttributeDodgeChanceBonus", &t.FlAttributeDodgeChanceBonus)
	cb.Do("ArCoreStatBenefit", &t.ArCoreStatBenefit)
	cb.Do("Unk_39a9625", &t.Unk_39a9625)
	cb.Do("SnoSkillKit", &t.SnoSkillKit)
	cb.Do("SnoSkillKitBlizzconOverride", &t.SnoSkillKitBlizzconOverride)
	cb.Do("Unk_1d2596f", &t.Unk_1d2596f)
	cb.Do("Unk_f52d089", &t.Unk_f52d089)
	cb.Do("SnoCombatDismountPower", &t.SnoCombatDismountPower)
	cb.Do("SnoActorResourceGlobe", &t.SnoActorResourceGlobe)
	cb.Do("Unk_63df9da", &t.Unk_63df9da)
	cb.Do("TNecroData", &t.TNecroData)
	cb.Do("TRogueData", &t.TRogueData)
	cb.Do("TSorcererData", &t.TSorcererData)
	cb.Do("TDruidData", &t.TDruidData)
	cb.Do("TBarbData", &t.TBarbData)
	cb.Do("ArItemTiers", &t.ArItemTiers)
	cb.Do("ArAvailableParagonBoards", &t.ArAvailableParagonBoards)
	cb.Do("Unk_b3a4391", &t.Unk_b3a4391)
	cb.Do("Unk_17ee464", &t.Unk_17ee464)
	cb.Do("Unk_a4bc7c3", &t.Unk_a4bc7c3)
	cb.Do("Unk_1b99fc4", &t.Unk_1b99fc4)
	cb.Do("Unk_eab00df", &t.Unk_eab00df)
	cb.Do("Unk_8979ddf", &t.Unk_8979ddf)
	cb.Do("Unk_a15f17d", &t.Unk_a15f17d)
	cb.Do("Unk_b81b6f8", &t.Unk_b81b6f8)
	cb.Do("Unk_9d88058", &t.Unk_9d88058)
	cb.Do("Unk_3c51d58", &t.Unk_3c51d58)
	cb.Do("Unk_c88ca1", &t.Unk_c88ca1)
	cb.Do("Unk_85b42dd", &t.Unk_85b42dd)
	cb.Do("Unk_5529fd9", &t.Unk_5529fd9)
	cb.Do("Unk_9da7619", &t.Unk_9da7619)
	cb.Do("Unk_311f93e", &t.Unk_311f93e)
	cb.Do("Unk_db15dcc", &t.Unk_db15dcc)
	cb.Do("Unk_480ce4d", &t.Unk_480ce4d)
	cb.Do("Unk_c204c1f", &t.Unk_c204c1f)
	cb.Do("Unk_ac2a184", &t.Unk_ac2a184)
	cb.Do("Unk_f9a8bfb", &t.Unk_f9a8bfb)
	cb.Do("Unk_c68960d", &t.Unk_c68960d)
	cb.Do("Unk_f4db603", &t.Unk_f4db603)
	cb.Do("Unk_f4401b8", &t.Unk_f4401b8)
	cb.Do("Unk_f38a271", &t.Unk_f38a271)
	cb.Do("Unk_71458eb", &t.Unk_71458eb)
	cb.Do("Unk_a996ec1", &t.Unk_a996ec1)
	cb.Do("Unk_699692c", &t.Unk_699692c)
	cb.Do("Unk_f5348c2", &t.Unk_f5348c2)
	cb.Do("Unk_4996ef8", &t.Unk_4996ef8)
	cb.Do("Unk_1052b5d", &t.Unk_1052b5d)
	cb.Do("Unk_a43c1cd", &t.Unk_a43c1cd)
	cb.Do("Unk_448f16c", &t.Unk_448f16c)
	cb.Do("SnoNamesMale", &t.SnoNamesMale)
	cb.Do("SnoNamesFemale", &t.SnoNamesFemale)
	cb.Do("Unk_a0254bb", &t.Unk_a0254bb)
}

type ForcedPrefetchEntry struct {
	SnoName      DT_SNO_NAME
	EVariantType DT_ENUM
}

func (t *ForcedPrefetchEntry) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoName, r, &Options{Flags: 513}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.EVariantType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+12, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ForcedPrefetchEntry) Walk(cb WalkCallback) {
	cb.Do("SnoName", &t.SnoName)
	cb.Do("EVariantType", &t.EVariantType)
}

type TextureDefinition struct {
	ETexFormat           DT_ENUM
	DwVolumeXSlices      DT_WORD
	DwVolumeYSlices      DT_WORD
	DwWidth              DT_WORD
	DwHeight             DT_WORD
	DwDepth              DT_UINT
	DwFaceCount          DT_BYTE
	DwMipMapLevelMin     DT_BYTE
	DwMipMapLevelMax     DT_BYTE
	DwImportFlags        DT_UINT
	ETextureResourceType DT_ENUM
	RgbavalAvgColor      DT_RGBACOLORVALUE
	PHotspot             DT_BCVEC2I
	SerTex               DT_VARIABLEARRAY[*SerializeData]
	PtFrame              DT_VARIABLEARRAY[*TexFrame]
	Unk_20823c1          DT_VARIABLEARRAY[*Type_835c1731]
	PtPostprocessed      DT_INT64
}

func (t *TextureDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.ETexFormat, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwVolumeXSlices, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+14, &t.DwVolumeYSlices, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.DwWidth, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+18, &t.DwHeight, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwDepth, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.DwFaceCount, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+25, &t.DwMipMapLevelMin, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+26, &t.DwMipMapLevelMax, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.DwImportFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.ETextureResourceType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.RgbavalAvgColor, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.PHotspot, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.SerTex, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.PtFrame, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.Unk_20823c1, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.PtPostprocessed, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if _, err := r.Seek(p+120, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TextureDefinition) Walk(cb WalkCallback) {
	cb.Do("ETexFormat", &t.ETexFormat)
	cb.Do("DwVolumeXSlices", &t.DwVolumeXSlices)
	cb.Do("DwVolumeYSlices", &t.DwVolumeYSlices)
	cb.Do("DwWidth", &t.DwWidth)
	cb.Do("DwHeight", &t.DwHeight)
	cb.Do("DwDepth", &t.DwDepth)
	cb.Do("DwFaceCount", &t.DwFaceCount)
	cb.Do("DwMipMapLevelMin", &t.DwMipMapLevelMin)
	cb.Do("DwMipMapLevelMax", &t.DwMipMapLevelMax)
	cb.Do("DwImportFlags", &t.DwImportFlags)
	cb.Do("ETextureResourceType", &t.ETextureResourceType)
	cb.Do("RgbavalAvgColor", &t.RgbavalAvgColor)
	cb.Do("PHotspot", &t.PHotspot)
	cb.Do("SerTex", &t.SerTex)
	cb.Do("PtFrame", &t.PtFrame)
	cb.Do("Unk_20823c1", &t.Unk_20823c1)
	cb.Do("PtPostprocessed", &t.PtPostprocessed)
}

type GroupTransferReplyMessage struct {
	THeader RequiredMessageHeader
	Accept  DT_INT
}

func (t *GroupTransferReplyMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Accept, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+20, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *GroupTransferReplyMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("Accept", &t.Accept)
}

type PlayerTownPortalReturnDestMessage struct {
	THeader               RequiredMessageHeader
	TTownPortalReturnDest TownPortalReturnDest
	DwPlayerGameAccountId DT_UINT
}

func (t *PlayerTownPortalReturnDestMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TTownPortalReturnDest, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.DwPlayerGameAccountId, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+56, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PlayerTownPortalReturnDestMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("TTownPortalReturnDest", &t.TTownPortalReturnDest)
	cb.Do("DwPlayerGameAccountId", &t.DwPlayerGameAccountId)
}

type UIStyleResource struct {
	SzStyleName DT_CSTRING[*DT_BYTE]
	NKey        DT_UINT
	PtStyle     DT_POLYMORPHIC_VARIABLEARRAY[*UIControlStyle]
}

func (t *UIStyleResource) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SzStyleName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.NKey, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.PtStyle, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *UIStyleResource) Walk(cb WalkCallback) {
	cb.Do("SzStyleName", &t.SzStyleName)
	cb.Do("NKey", &t.NKey)
	cb.Do("PtStyle", &t.PtStyle)
}

type InventoryRequestSortMessage struct {
	THeader    RequiredMessageHeader
	ESlot      DT_ENUM
	Unk_7d12b0 DT_INT
}

func (t *InventoryRequestSortMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.ESlot, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.Unk_7d12b0, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *InventoryRequestSortMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("ESlot", &t.ESlot)
	cb.Do("Unk_7d12b0", &t.Unk_7d12b0)
}

type HardpointInfo struct {
	DwHash     DT_UINT
	DwHashFlag DT_UINT
}

func (t *HardpointInfo) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.DwHash, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.DwHashFlag, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *HardpointInfo) Walk(cb WalkCallback) {
	cb.Do("DwHash", &t.DwHash)
	cb.Do("DwHashFlag", &t.DwHashFlag)
}

type HardpointLink struct {
	TInfo HardpointInfo
}

func (t *HardpointLink) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.TInfo, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *HardpointLink) Walk(cb WalkCallback) {
	cb.Do("TInfo", &t.TInfo)
}

type HardpointName struct {
	SzName DT_CHARARRAY
}

func (t *HardpointName) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SzName, r, &Options{
		ArrayLength: 64,
		Flags:       1,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+64, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *HardpointName) Walk(cb WalkCallback) {
	cb.Do("SzName", &t.SzName)
}

type GlobalBountyData struct {
	// Inherits GlobalBase
	// Inherits PolymorphicBase
	DwType        DT_UINT
	DwPad         DT_UINT
	ArBountyZones DT_FIXEDARRAY[*BountyZones]
	Unk_297c737   DT_UINT
	Unk_65250c9   DT_UINT
}

func (t *GlobalBountyData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.ArBountyZones, r, &Options{
		ArrayLength: 8,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+208, &t.Unk_297c737, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+212, &t.Unk_65250c9, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+216, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *GlobalBountyData) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("ArBountyZones", &t.ArBountyZones)
	cb.Do("Unk_297c737", &t.Unk_297c737)
	cb.Do("Unk_65250c9", &t.Unk_65250c9)
}

type InventoryImages struct {
	HDefaultImage DT_UINT
	HFemaleImage  DT_UINT
}

func (t *InventoryImages) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.HDefaultImage, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.HFemaleImage, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *InventoryImages) Walk(cb WalkCallback) {
	cb.Do("HDefaultImage", &t.HDefaultImage)
	cb.Do("HFemaleImage", &t.HFemaleImage)
}

type Type_d9322248 struct {
	NNumComboboxItems         DT_INT
	SzComboboxPlaceholderText DT_CSTRING[*DT_BYTE]
	Unk_538a709               DT_CSTRING[*DT_BYTE]
	Unk_e88a211               DT_ENUM
	Unk_18016cb               DT_ENUM
	Unk_cac6d29               DT_RGBACOLOR
	Unk_aeeea38               DT_RGBACOLOR
	Unk_670b4a9               DT_RGBACOLOR
	Unk_3368b                 DT_INT
	ArStaticOptions           DT_VARIABLEARRAY[*StringLabelHandleEx]
}

func (t *Type_d9322248) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.NNumComboboxItems, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.SzComboboxPlaceholderText, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_538a709, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.Unk_e88a211, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.Unk_18016cb, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.Unk_cac6d29, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.Unk_aeeea38, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.Unk_670b4a9, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+60, &t.Unk_3368b, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.ArStaticOptions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+80, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_d9322248) Walk(cb WalkCallback) {
	cb.Do("NNumComboboxItems", &t.NNumComboboxItems)
	cb.Do("SzComboboxPlaceholderText", &t.SzComboboxPlaceholderText)
	cb.Do("Unk_538a709", &t.Unk_538a709)
	cb.Do("Unk_e88a211", &t.Unk_e88a211)
	cb.Do("Unk_18016cb", &t.Unk_18016cb)
	cb.Do("Unk_cac6d29", &t.Unk_cac6d29)
	cb.Do("Unk_aeeea38", &t.Unk_aeeea38)
	cb.Do("Unk_670b4a9", &t.Unk_670b4a9)
	cb.Do("Unk_3368b", &t.Unk_3368b)
	cb.Do("ArStaticOptions", &t.ArStaticOptions)
}

type ACDWorldPositionMessage struct {
	THeader             RequiredMessageHeader
	Ann                 DT_ACD_NETWORK_NAME
	TWorldLocationData  WorldLocationMessageData
	TLookOverrides      DT_OPTIONAL[*EnterKnownLookOverrides]
	TShaderMapOverrides DT_OPTIONAL[*EnterKnownShaderMapOverrides]
}

func (t *ACDWorldPositionMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Ann, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.TWorldLocationData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.TLookOverrides, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+124, &t.TShaderMapOverrides, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+152, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ACDWorldPositionMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("Ann", &t.Ann)
	cb.Do("TWorldLocationData", &t.TWorldLocationData)
	cb.Do("TLookOverrides", &t.TLookOverrides)
	cb.Do("TShaderMapOverrides", &t.TShaderMapOverrides)
}

type GeoChunkVertexBuffer struct {
	EVBFormat       DT_ENUM
	DwVertStride    DT_UINT
	PtVertexElems   DT_VARIABLEARRAY[*VertexElem]
	Unk_aea647a     DT_VARIABLEARRAY[*DT_BYTE]
	WEid            DT_INT
	PtChunkVertices DT_VARIABLEARRAY[*DT_BYTE]
	Vbid            DT_INT
	Baid            DT_INT
	Unk_4c43adc     DT_UINT
	FOptional       DT_INT
}

func (t *GeoChunkVertexBuffer) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.EVBFormat, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.DwVertStride, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.PtVertexElems, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_aea647a, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.WEid, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.PtChunkVertices, r, &Options{Flags: 4194305}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.Vbid, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.Baid, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_4c43adc, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.FOptional, r, &Options{Flags: 16}); err != nil {
		return err
	}
	if _, err := r.Seek(p+80, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *GeoChunkVertexBuffer) Walk(cb WalkCallback) {
	cb.Do("EVBFormat", &t.EVBFormat)
	cb.Do("DwVertStride", &t.DwVertStride)
	cb.Do("PtVertexElems", &t.PtVertexElems)
	cb.Do("Unk_aea647a", &t.Unk_aea647a)
	cb.Do("WEid", &t.WEid)
	cb.Do("PtChunkVertices", &t.PtChunkVertices)
	cb.Do("Vbid", &t.Vbid)
	cb.Do("Baid", &t.Baid)
	cb.Do("Unk_4c43adc", &t.Unk_4c43adc)
	cb.Do("FOptional", &t.FOptional)
}

type FontDefinition struct {
	EHintingMode       DT_ENUM
	EHintingStyle      DT_ENUM
	NSizeAdjustments   DT_FIXEDARRAY[*DT_INT]
	Unk_316a8bf        DT_FLOAT
	FlAdvanceScalar    DT_FLOAT
	FlIconHeightScalar DT_FLOAT
	Unk_d5350c2        DT_SNO
	Unk_d0cc8d7        DT_SNO
	Unk_7def5b8        DT_SNO
	SnoFallbackFont    DT_SNO
	DwTransformFlags   DT_UINT
	Unk_9771bb         DT_FLOAT
	Unk_4ca851         DT_FLOAT
	Unk_820c304        DT_FLOAT
	Unk_b5b5e50        DT_FLOAT
	PtPostData         DT_INT64
	Unk_2cd1580        DT_VARIABLEARRAY[*DT_BYTE]
}

func (t *FontDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.EHintingMode, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.EHintingStyle, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.NSizeAdjustments, r, &Options{
		ArrayLength: 3,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.Unk_316a8bf, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.FlAdvanceScalar, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.FlIconHeightScalar, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.Unk_d5350c2, r, &Options{
		Flags: 1,
		Group: 19,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.Unk_d0cc8d7, r, &Options{
		Flags: 1,
		Group: 19,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.Unk_7def5b8, r, &Options{
		Flags: 1,
		Group: 19,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.SnoFallbackFont, r, &Options{
		Flags: 1,
		Group: 19,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.DwTransformFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+60, &t.Unk_9771bb, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.Unk_4ca851, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.Unk_820c304, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_b5b5e50, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.PtPostData, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.Unk_2cd1580, r, &Options{Flags: 2097152}); err != nil {
		return err
	}
	if _, err := r.Seek(p+104, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *FontDefinition) Walk(cb WalkCallback) {
	cb.Do("EHintingMode", &t.EHintingMode)
	cb.Do("EHintingStyle", &t.EHintingStyle)
	cb.Do("NSizeAdjustments", &t.NSizeAdjustments)
	cb.Do("Unk_316a8bf", &t.Unk_316a8bf)
	cb.Do("FlAdvanceScalar", &t.FlAdvanceScalar)
	cb.Do("FlIconHeightScalar", &t.FlIconHeightScalar)
	cb.Do("Unk_d5350c2", &t.Unk_d5350c2)
	cb.Do("Unk_d0cc8d7", &t.Unk_d0cc8d7)
	cb.Do("Unk_7def5b8", &t.Unk_7def5b8)
	cb.Do("SnoFallbackFont", &t.SnoFallbackFont)
	cb.Do("DwTransformFlags", &t.DwTransformFlags)
	cb.Do("Unk_9771bb", &t.Unk_9771bb)
	cb.Do("Unk_4ca851", &t.Unk_4ca851)
	cb.Do("Unk_820c304", &t.Unk_820c304)
	cb.Do("Unk_b5b5e50", &t.Unk_b5b5e50)
	cb.Do("PtPostData", &t.PtPostData)
	cb.Do("Unk_2cd1580", &t.Unk_2cd1580)
}

type ACDTranslateDetPathSinMessage struct {
	THeader             RequiredMessageHeader
	Ann                 DT_ACD_NETWORK_NAME
	EDPath              DT_ENUM
	TSeed               RandomNumberGenerator
	WvVelocity          DT_VECTOR3D
	AOriginalYaw        DT_FLOAT
	VStartPos           DT_VECTOR3D
	UMoveFlags          DT_UINT
	SnoPowerPassability DT_SNO
	NInt0               DT_INT
	FlVar0              DT_FLOAT
	TSinData            DPathSinData
	FlSpeedMult         DT_FLOAT
}

func (t *ACDTranslateDetPathSinMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Ann, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.EDPath, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.TSeed, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.WvVelocity, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.AOriginalYaw, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.VStartPos, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.UMoveFlags, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.SnoPowerPassability, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.NInt0, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.FlVar0, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.TSinData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.FlSpeedMult, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+116, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ACDTranslateDetPathSinMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("Ann", &t.Ann)
	cb.Do("EDPath", &t.EDPath)
	cb.Do("TSeed", &t.TSeed)
	cb.Do("WvVelocity", &t.WvVelocity)
	cb.Do("AOriginalYaw", &t.AOriginalYaw)
	cb.Do("VStartPos", &t.VStartPos)
	cb.Do("UMoveFlags", &t.UMoveFlags)
	cb.Do("SnoPowerPassability", &t.SnoPowerPassability)
	cb.Do("NInt0", &t.NInt0)
	cb.Do("FlVar0", &t.FlVar0)
	cb.Do("TSinData", &t.TSinData)
	cb.Do("FlSpeedMult", &t.FlSpeedMult)
}

type Type_d97cf85a struct {
	FlPctHead     DT_FLOAT
	FlPctTorso    DT_FLOAT
	FlPctOffHand  DT_FLOAT
	FlPctMainHand DT_FLOAT
	FlPctHands    DT_FLOAT
	FlPctLegs     DT_FLOAT
	FlPctFeet     DT_FLOAT
	FlPctFinger   DT_FLOAT
	FlPctNeck     DT_FLOAT
}

func (t *Type_d97cf85a) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.FlPctHead, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.FlPctTorso, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.FlPctOffHand, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.FlPctMainHand, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.FlPctHands, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.FlPctLegs, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.FlPctFeet, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.FlPctFinger, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.FlPctNeck, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+36, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_d97cf85a) Walk(cb WalkCallback) {
	cb.Do("FlPctHead", &t.FlPctHead)
	cb.Do("FlPctTorso", &t.FlPctTorso)
	cb.Do("FlPctOffHand", &t.FlPctOffHand)
	cb.Do("FlPctMainHand", &t.FlPctMainHand)
	cb.Do("FlPctHands", &t.FlPctHands)
	cb.Do("FlPctLegs", &t.FlPctLegs)
	cb.Do("FlPctFeet", &t.FlPctFeet)
	cb.Do("FlPctFinger", &t.FlPctFinger)
	cb.Do("FlPctNeck", &t.FlPctNeck)
}

type MovieDefinition struct {
	SnoAudioTrack     DT_SNO
	SnoSubtitles      DT_SNO
	SnoClosedCaptions DT_SNO
	Unk_19d005e       DT_UINT
	Unk_1426000       DT_FLOAT
}

func (t *MovieDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.SnoAudioTrack, r, &Options{
		Flags: 1,
		Group: 71,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.SnoSubtitles, r, &Options{
		Flags: 1,
		Group: 42,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoClosedCaptions, r, &Options{
		Flags: 1,
		Group: 42,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.Unk_19d005e, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_1426000, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+28, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *MovieDefinition) Walk(cb WalkCallback) {
	cb.Do("SnoAudioTrack", &t.SnoAudioTrack)
	cb.Do("SnoSubtitles", &t.SnoSubtitles)
	cb.Do("SnoClosedCaptions", &t.SnoClosedCaptions)
	cb.Do("Unk_19d005e", &t.Unk_19d005e)
	cb.Do("Unk_1426000", &t.Unk_1426000)
}

type DoorGizmoData struct {
	// Inherits NamedGizmoData
	// Inherits ActorGizmoData
	// Inherits PolymorphicBase
	DwType                       DT_UINT
	DwPad                        DT_UINT
	FDisableNonFriendlyOperation DT_INT
	FWalkToCenter                DT_INT
	FGizmoStartsDisabled         DT_INT
	FUseStringListName           DT_INT
	FForceMinimapIcon            DT_INT
	FlOperationRadius            DT_FLOAT
	Unk_d0b1df5                  DT_FLOAT
	FlGizmoUseTime               DT_FLOAT
	SnoChannelingEffect          DT_SNO
	Unk_2767229                  DT_INT
	FGizmoShowProgressBar        DT_INT
	Unk_6d9ebe1                  DT_INT
	Unk_5456245                  DT_INT
	Unk_af5815a                  DT_INT
	SnoOnClickEffect             DT_SNO
	SnoPickedUpEffect            DT_SNO
	SnoDropOnGroundEffect        DT_SNO
	TConditionData               GizmoConditionData
	SnoPowerOperator             DT_SNO
	SnoPowerOperate              DT_SNO
	SnoPowerOperatorActive       DT_SNO
	SnoPowerOperateActive        DT_SNO
	Unk_359810e                  DT_INT
	NCooldown                    DT_UINT
	Unk_9c8478e                  DT_UINT
	Unk_d45ed2d                  DT_INT
	Unk_f6b20b7                  DT_INT
	Unk_54513b8                  DT_INT
	Unk_fd1f378                  DT_UINT
	Unk_487c14                   DT_UINT
	Unk_87f2609                  DT_UINT
	Unk_158eb4f                  DT_FLOAT
	Unk_ab58cd3                  DT_ENUM
	Unk_91a3966                  DT_UINT
	Unk_25312e5                  DT_UINT
	Unk_4be4371                  DT_INT
	TLockData                    LockingGizmoData
	FGizmoPlayerOperable         DT_INT
	FPlayerCanCloseDoor          DT_INT
	DwPrefixValue                DT_INT
	Unk_af999c8                  DT_INT
	FlOpenDuration               DT_FLOAT
	Unk_6561d12                  DT_FLOAT
	Unk_1d7bcd2                  DT_FLOAT
	Unk_e9859fe                  DT_INT
}

func (t *DoorGizmoData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.FDisableNonFriendlyOperation, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.FWalkToCenter, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.FGizmoStartsDisabled, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.FUseStringListName, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.FForceMinimapIcon, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.FlOperationRadius, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.Unk_d0b1df5, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.FlGizmoUseTime, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.SnoChannelingEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.Unk_2767229, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.FGizmoShowProgressBar, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+60, &t.Unk_6d9ebe1, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.Unk_5456245, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.Unk_af5815a, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.SnoOnClickEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.SnoPickedUpEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.SnoDropOnGroundEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.TConditionData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.SnoPowerOperator, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.SnoPowerOperate, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.SnoPowerOperatorActive, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+100, &t.SnoPowerOperateActive, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+104, &t.Unk_359810e, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+108, &t.NCooldown, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.Unk_9c8478e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+116, &t.Unk_d45ed2d, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.Unk_f6b20b7, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+124, &t.Unk_54513b8, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.Unk_fd1f378, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+132, &t.Unk_487c14, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+136, &t.Unk_87f2609, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+140, &t.Unk_158eb4f, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+144, &t.Unk_ab58cd3, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+148, &t.Unk_91a3966, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+152, &t.Unk_25312e5, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+156, &t.Unk_4be4371, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+160, &t.TLockData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+196, &t.FGizmoPlayerOperable, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+200, &t.FPlayerCanCloseDoor, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+204, &t.DwPrefixValue, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+208, &t.Unk_af999c8, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+212, &t.FlOpenDuration, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+216, &t.Unk_6561d12, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+220, &t.Unk_1d7bcd2, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+224, &t.Unk_e9859fe, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+232, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *DoorGizmoData) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("FDisableNonFriendlyOperation", &t.FDisableNonFriendlyOperation)
	cb.Do("FWalkToCenter", &t.FWalkToCenter)
	cb.Do("FGizmoStartsDisabled", &t.FGizmoStartsDisabled)
	cb.Do("FUseStringListName", &t.FUseStringListName)
	cb.Do("FForceMinimapIcon", &t.FForceMinimapIcon)
	cb.Do("FlOperationRadius", &t.FlOperationRadius)
	cb.Do("Unk_d0b1df5", &t.Unk_d0b1df5)
	cb.Do("FlGizmoUseTime", &t.FlGizmoUseTime)
	cb.Do("SnoChannelingEffect", &t.SnoChannelingEffect)
	cb.Do("Unk_2767229", &t.Unk_2767229)
	cb.Do("FGizmoShowProgressBar", &t.FGizmoShowProgressBar)
	cb.Do("Unk_6d9ebe1", &t.Unk_6d9ebe1)
	cb.Do("Unk_5456245", &t.Unk_5456245)
	cb.Do("Unk_af5815a", &t.Unk_af5815a)
	cb.Do("SnoOnClickEffect", &t.SnoOnClickEffect)
	cb.Do("SnoPickedUpEffect", &t.SnoPickedUpEffect)
	cb.Do("SnoDropOnGroundEffect", &t.SnoDropOnGroundEffect)
	cb.Do("TConditionData", &t.TConditionData)
	cb.Do("SnoPowerOperator", &t.SnoPowerOperator)
	cb.Do("SnoPowerOperate", &t.SnoPowerOperate)
	cb.Do("SnoPowerOperatorActive", &t.SnoPowerOperatorActive)
	cb.Do("SnoPowerOperateActive", &t.SnoPowerOperateActive)
	cb.Do("Unk_359810e", &t.Unk_359810e)
	cb.Do("NCooldown", &t.NCooldown)
	cb.Do("Unk_9c8478e", &t.Unk_9c8478e)
	cb.Do("Unk_d45ed2d", &t.Unk_d45ed2d)
	cb.Do("Unk_f6b20b7", &t.Unk_f6b20b7)
	cb.Do("Unk_54513b8", &t.Unk_54513b8)
	cb.Do("Unk_fd1f378", &t.Unk_fd1f378)
	cb.Do("Unk_487c14", &t.Unk_487c14)
	cb.Do("Unk_87f2609", &t.Unk_87f2609)
	cb.Do("Unk_158eb4f", &t.Unk_158eb4f)
	cb.Do("Unk_ab58cd3", &t.Unk_ab58cd3)
	cb.Do("Unk_91a3966", &t.Unk_91a3966)
	cb.Do("Unk_25312e5", &t.Unk_25312e5)
	cb.Do("Unk_4be4371", &t.Unk_4be4371)
	cb.Do("TLockData", &t.TLockData)
	cb.Do("FGizmoPlayerOperable", &t.FGizmoPlayerOperable)
	cb.Do("FPlayerCanCloseDoor", &t.FPlayerCanCloseDoor)
	cb.Do("DwPrefixValue", &t.DwPrefixValue)
	cb.Do("Unk_af999c8", &t.Unk_af999c8)
	cb.Do("FlOpenDuration", &t.FlOpenDuration)
	cb.Do("Unk_6561d12", &t.Unk_6561d12)
	cb.Do("Unk_1d7bcd2", &t.Unk_1d7bcd2)
	cb.Do("Unk_e9859fe", &t.Unk_e9859fe)
}

type PowerConditionDamageIsOverpower struct {
	// Inherits PowerConditionBase
	// Inherits PolymorphicBase
	DwType   DT_UINT
	BInverse DT_INT
	DwPad    DT_UINT
}

func (t *PowerConditionDamageIsOverpower) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BInverse, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PowerConditionDamageIsOverpower) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("BInverse", &t.BInverse)
	cb.Do("DwPad", &t.DwPad)
}

type BuffExclusiveType_Table struct {
	// Inherits GameBalanceTable
	// Inherits PolymorphicBase
	DwType   DT_UINT
	DwPad    DT_UINT
	TEntries DT_VARIABLEARRAY[*BuffExclusiveType]
}

func (t *BuffExclusiveType_Table) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TEntries, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *BuffExclusiveType_Table) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("TEntries", &t.TEntries)
}

type Type_da21c503 struct {
	ArCompleteLooks DT_VARIABLEARRAY[*Type_6ce32aa3]
}

func (t *Type_da21c503) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.ArCompleteLooks, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_da21c503) Walk(cb WalkCallback) {
	cb.Do("ArCompleteLooks", &t.ArCompleteLooks)
}

type SubzoneTypeSubcondition struct {
	// Inherits Subcondition
	// Inherits PolymorphicBase
	DwType   DT_UINT
	BNegate  DT_INT
	DwPad    DT_UINT
	EType    DT_ENUM
	EPvPType DT_ENUM
}

func (t *SubzoneTypeSubcondition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BNegate, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.EType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.EPvPType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *SubzoneTypeSubcondition) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("BNegate", &t.BNegate)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("EType", &t.EType)
	cb.Do("EPvPType", &t.EPvPType)
}

type dmClothPlaneDefMirror struct {
	LocalTransform dmTransformMirror
	Stiffness      DT_FLOAT
	Friction       DT_FLOAT
	BoneIndex      DT_WORD
	Padding        DT_FIXEDARRAY[*DT_WORD]
}

func (t *dmClothPlaneDefMirror) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.LocalTransform, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.Stiffness, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.Friction, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.BoneIndex, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+42, &t.Padding, r, &Options{ArrayLength: 3}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *dmClothPlaneDefMirror) Walk(cb WalkCallback) {
	cb.Do("LocalTransform", &t.LocalTransform)
	cb.Do("Stiffness", &t.Stiffness)
	cb.Do("Friction", &t.Friction)
	cb.Do("BoneIndex", &t.BoneIndex)
	cb.Do("Padding", &t.Padding)
}

type QuestFollowerSpawnBehavior struct {
	Unk_6c68319    DT_ENUM
	Unk_d64b2c9    DT_INT
	SnoSummonPower DT_SNO
	TMarkerHandle  MarkerHandle
	EVisibility    DT_ENUM
	Unk_209d19e    DT_INT
}

func (t *QuestFollowerSpawnBehavior) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Unk_6c68319, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.Unk_d64b2c9, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.SnoSummonPower, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.TMarkerHandle, r, &Options{Flags: 513}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.EVisibility, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_209d19e, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+28, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *QuestFollowerSpawnBehavior) Walk(cb WalkCallback) {
	cb.Do("Unk_6c68319", &t.Unk_6c68319)
	cb.Do("Unk_d64b2c9", &t.Unk_d64b2c9)
	cb.Do("SnoSummonPower", &t.SnoSummonPower)
	cb.Do("TMarkerHandle", &t.TMarkerHandle)
	cb.Do("EVisibility", &t.EVisibility)
	cb.Do("Unk_209d19e", &t.Unk_209d19e)
}

type StringListDefinition struct {
	ArStrings        DT_VARIABLEARRAY[*StringTableEntry]
	PtMapStringTable DT_INT64
}

func (t *StringListDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.ArStrings, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.PtMapStringTable, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *StringListDefinition) Walk(cb WalkCallback) {
	cb.Do("ArStrings", &t.ArStrings)
	cb.Do("PtMapStringTable", &t.PtMapStringTable)
}

type QuestTagsEntry struct {
	THeader GBIDHeader
}

func (t *QuestTagsEntry) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+260, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *QuestTagsEntry) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
}

type PlayerSkillRankSubcondition struct {
	// Inherits Type_d3c3637f
	// Inherits Subcondition
	// Inherits PolymorphicBase
	DwType        DT_UINT
	BNegate       DT_INT
	EComparisonOp DT_ENUM
	DwPad         DT_UINT
	SnoSkillPower DT_SNO
	NSkillRank    DT_INT
}

func (t *PlayerSkillRankSubcondition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BNegate, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.EComparisonOp, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.SnoSkillPower, r, &Options{
		Flags: 513,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.NSkillRank, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+40, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PlayerSkillRankSubcondition) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("BNegate", &t.BNegate)
	cb.Do("EComparisonOp", &t.EComparisonOp)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("SnoSkillPower", &t.SnoSkillPower)
	cb.Do("NSkillRank", &t.NSkillRank)
}

type PowerPhaseBranch struct {
	// Inherits PowerPhaseBase
	// Inherits PolymorphicBase
	DwType      DT_UINT
	DwPad       DT_UINT
	TPhaseName  DT_UINT
	Unk_fcb7313 DT_POLYMORPHIC_VARIABLEARRAY[*DT_INT64]
	Unk_d0d932b DT_INT
	Unk_9a8200e DT_INT
}

func (t *PowerPhaseBranch) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TPhaseName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_fcb7313, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.Unk_d0d932b, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.Unk_9a8200e, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+56, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PowerPhaseBranch) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("TPhaseName", &t.TPhaseName)
	cb.Do("Unk_fcb7313", &t.Unk_fcb7313)
	cb.Do("Unk_d0d932b", &t.Unk_d0d932b)
	cb.Do("Unk_9a8200e", &t.Unk_9a8200e)
}

type EnterWorldPlayer struct {
	WpLocation                    DT_VECTOR3D
	DwPlayerGameAccountId         DT_UINT
	TEnterKnownLookOverrides      DT_OPTIONAL[*EnterKnownLookOverrides]
	TEnterKnownShaderMapOverrides DT_OPTIONAL[*EnterKnownShaderMapOverrides]
}

func (t *EnterWorldPlayer) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.WpLocation, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPlayerGameAccountId, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TEnterKnownLookOverrides, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.TEnterKnownShaderMapOverrides, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+96, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *EnterWorldPlayer) Walk(cb WalkCallback) {
	cb.Do("WpLocation", &t.WpLocation)
	cb.Do("DwPlayerGameAccountId", &t.DwPlayerGameAccountId)
	cb.Do("TEnterKnownLookOverrides", &t.TEnterKnownLookOverrides)
	cb.Do("TEnterKnownShaderMapOverrides", &t.TEnterKnownShaderMapOverrides)
}

type MonsterAwarenessInfo struct {
	FlIdleRadius       DT_FLOAT
	FlCombatRadius     DT_FLOAT
	FlWarnOthersRadius DT_FLOAT
	Unk_7d4fa2f        DT_FLOAT
	Unk_4eeb2ba        DT_FLOAT
	Unk_3f45ddd        DT_INT
	Unk_d9ecad5        DT_INT
}

func (t *MonsterAwarenessInfo) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.FlIdleRadius, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.FlCombatRadius, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.FlWarnOthersRadius, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.Unk_7d4fa2f, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_4eeb2ba, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.Unk_3f45ddd, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_d9ecad5, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+28, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *MonsterAwarenessInfo) Walk(cb WalkCallback) {
	cb.Do("FlIdleRadius", &t.FlIdleRadius)
	cb.Do("FlCombatRadius", &t.FlCombatRadius)
	cb.Do("FlWarnOthersRadius", &t.FlWarnOthersRadius)
	cb.Do("Unk_7d4fa2f", &t.Unk_7d4fa2f)
	cb.Do("Unk_4eeb2ba", &t.Unk_4eeb2ba)
	cb.Do("Unk_3f45ddd", &t.Unk_3f45ddd)
	cb.Do("Unk_d9ecad5", &t.Unk_d9ecad5)
}

type EffectGroupActorVariant struct {
	SnoActor DT_SNO
	EVariant DT_ENUM
}

func (t *EffectGroupActorVariant) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoActor, r, &Options{
		Flags: 1,
		Group: 1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.EVariant, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *EffectGroupActorVariant) Walk(cb WalkCallback) {
	cb.Do("SnoActor", &t.SnoActor)
	cb.Do("EVariant", &t.EVariant)
}

type Type_dbcb04f3 struct {
	Unk_ebf6585 DT_VARIABLEARRAY[*DT_FLOAT]
}

func (t *Type_dbcb04f3) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Unk_ebf6585, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_dbcb04f3) Walk(cb WalkCallback) {
	cb.Do("Unk_ebf6585", &t.Unk_ebf6585)
}

type ActorServerData struct {
	SnoScript                       DT_SNO
	FCannotBeTargetedByAI           DT_INT
	Unk_195410b                     DT_INT
	FNotConsideredInMarkersetBounds DT_INT
	FInvulnerable                   DT_INT
	FDisableDamage                  DT_INT
	FCannotDie                      DT_INT
	Unk_9ad1b04                     DT_INT
	FlNoSpawnRadius                 DT_FLOAT
}

func (t *ActorServerData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoScript, r, &Options{
		Flags: 1,
		Group: 35,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.FCannotBeTargetedByAI, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.Unk_195410b, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.FNotConsideredInMarkersetBounds, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.FInvulnerable, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.FDisableDamage, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.FCannotDie, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.Unk_9ad1b04, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.FlNoSpawnRadius, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+36, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ActorServerData) Walk(cb WalkCallback) {
	cb.Do("SnoScript", &t.SnoScript)
	cb.Do("FCannotBeTargetedByAI", &t.FCannotBeTargetedByAI)
	cb.Do("Unk_195410b", &t.Unk_195410b)
	cb.Do("FNotConsideredInMarkersetBounds", &t.FNotConsideredInMarkersetBounds)
	cb.Do("FInvulnerable", &t.FInvulnerable)
	cb.Do("FDisableDamage", &t.FDisableDamage)
	cb.Do("FCannotDie", &t.FCannotDie)
	cb.Do("Unk_9ad1b04", &t.Unk_9ad1b04)
	cb.Do("FlNoSpawnRadius", &t.FlNoSpawnRadius)
}

type BoneKeysInfo struct {
	PtBoneKeys DT_VARIABLEARRAY[*BoneKeyInfo]
}

func (t *BoneKeysInfo) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.PtBoneKeys, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *BoneKeysInfo) Walk(cb WalkCallback) {
	cb.Do("PtBoneKeys", &t.PtBoneKeys)
}

type MapPingMessage struct {
	THeader     RequiredMessageHeader
	Unk_3eecb71 DT_UINT
	IdSWorld    DT_SHARED_SERVER_DATA_ID
	WpLocation  DT_VECTOR3D
}

func (t *MapPingMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_3eecb71, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.IdSWorld, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.WpLocation, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+40, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *MapPingMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("Unk_3eecb71", &t.Unk_3eecb71)
	cb.Do("IdSWorld", &t.IdSWorld)
	cb.Do("WpLocation", &t.WpLocation)
}

type HardpointOffset struct {
	THardpointLink  HardpointLink
	VecOffset       DT_VECTOR3D
	QRotationOffset bcQuat
}

func (t *HardpointOffset) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THardpointLink, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.VecOffset, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.QRotationOffset, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+36, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *HardpointOffset) Walk(cb WalkCallback) {
	cb.Do("THardpointLink", &t.THardpointLink)
	cb.Do("VecOffset", &t.VecOffset)
	cb.Do("QRotationOffset", &t.QRotationOffset)
}

type PortToPlayerMessage struct {
	THeader     RequiredMessageHeader
	Unk_393b384 DT_UINT
	Unk_74eafc7 DT_UINT
}

func (t *PortToPlayerMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_393b384, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.Unk_74eafc7, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PortToPlayerMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("Unk_393b384", &t.Unk_393b384)
	cb.Do("Unk_74eafc7", &t.Unk_74eafc7)
}

type EffectGroupPositionYKeyData struct {
	// Inherits EffectGroupKeyData
	// Inherits PolymorphicBase
	DwType     DT_UINT
	DwPad      DT_UINT
	ArKeyItems DT_VARIABLEARRAY[*EffectGroupKey]
}

func (t *EffectGroupPositionYKeyData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.ArKeyItems, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *EffectGroupPositionYKeyData) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("ArKeyItems", &t.ArKeyItems)
}

type Type_dc960527 struct {
	// Inherits BuffCallbackBase
	// Inherits PolymorphicBase
	DwType                DT_UINT
	DwPad                 DT_UINT
	SnoTriggerEffectGroup DT_SNO
	ArConditions          DT_POLYMORPHIC_VARIABLEARRAY[*DT_INT64]
}

func (t *Type_dc960527) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoTriggerEffectGroup, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ArConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_dc960527) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("SnoTriggerEffectGroup", &t.SnoTriggerEffectGroup)
	cb.Do("ArConditions", &t.ArConditions)
}

type IntensitySubParam struct {
	SzName      DT_UINT
	Unk_465327d Type_cbfdd2ea
}

func (t *IntensitySubParam) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SzName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.Unk_465327d, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+64, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *IntensitySubParam) Walk(cb WalkCallback) {
	cb.Do("SzName", &t.SzName)
	cb.Do("Unk_465327d", &t.Unk_465327d)
}

type ParagonGlyphAffixAttribute struct {
	EAttribute DT_ENUM
	NParam     DT_INT
}

func (t *ParagonGlyphAffixAttribute) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.EAttribute, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.NParam, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ParagonGlyphAffixAttribute) Walk(cb WalkCallback) {
	cb.Do("EAttribute", &t.EAttribute)
	cb.Do("NParam", &t.NParam)
}

type Type_dcddca9e struct {
	SnoLoopEffect      DT_SNO
	SnoLoopingWorld    DT_SNO
	SzCameraMarkerName DT_CHARARRAY
	Unk_c1d4829        DT_UINT
}

func (t *Type_dcddca9e) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoLoopEffect, r, &Options{
		Flags: 513,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.SnoLoopingWorld, r, &Options{
		Flags: 513,
		Group: 48,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.SzCameraMarkerName, r, &Options{
		ArrayLength: 128,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+136, &t.Unk_c1d4829, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+140, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_dcddca9e) Walk(cb WalkCallback) {
	cb.Do("SnoLoopEffect", &t.SnoLoopEffect)
	cb.Do("SnoLoopingWorld", &t.SnoLoopingWorld)
	cb.Do("SzCameraMarkerName", &t.SzCameraMarkerName)
	cb.Do("Unk_c1d4829", &t.Unk_c1d4829)
}

type TriggerEventObjectMoveToObject struct {
	// Inherits TriggerEventRangedDuration
	// Inherits TriggerEvent
	// Inherits PolymorphicBase
	DwType                DT_UINT
	TConditions           TriggerConditions
	FGenerated            DT_INT
	Unk_6cba752           DT_INT
	DwParentActorID       DT_UINT
	TDuration             DT_FLOAT
	DwTriggerFlags        DT_UINT
	DwTriggerFlagsEx      DT_UINT
	TCleanup              TriggerCleanup
	Unk_49e9257           DT_INT
	Unk_5490979           DT_INT
	DwPad                 DT_UINT
	DwObjectID            DT_UINT
	Unk_17909b9           DT_INT
	THardpointLinkTarget  HardpointLink
	DwTargetID            DT_UINT
	EOrientationMode      DT_ENUM
	Unk_daebe18           DT_ENUM
	Unk_6101673           DT_UINT
	Unk_8470ffc           HardpointLink
	Unk_46c8459           DT_UINT
	EBlendEasing          DT_ENUM
	EMoveRate             DT_ENUM
	EDynamicMovementSpeed DT_ENUM
	Unk_c751343           DT_INT
	Unk_23237e1           DT_INT
	Unk_f1b6afc           DT_FLOAT
}

func (t *TriggerEventObjectMoveToObject) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.FGenerated, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_6cba752, r, &Options{Flags: 16}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.DwParentActorID, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.TDuration, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.DwTriggerFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.DwTriggerFlagsEx, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.TCleanup, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+116, &t.Unk_49e9257, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.Unk_5490979, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+124, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.DwObjectID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+132, &t.Unk_17909b9, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+136, &t.THardpointLinkTarget, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+144, &t.DwTargetID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+148, &t.EOrientationMode, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+152, &t.Unk_daebe18, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+156, &t.Unk_6101673, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+160, &t.Unk_8470ffc, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+168, &t.Unk_46c8459, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+172, &t.EBlendEasing, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+176, &t.EMoveRate, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+180, &t.EDynamicMovementSpeed, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+184, &t.Unk_c751343, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+188, &t.Unk_23237e1, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+192, &t.Unk_f1b6afc, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+200, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TriggerEventObjectMoveToObject) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("TConditions", &t.TConditions)
	cb.Do("FGenerated", &t.FGenerated)
	cb.Do("Unk_6cba752", &t.Unk_6cba752)
	cb.Do("DwParentActorID", &t.DwParentActorID)
	cb.Do("TDuration", &t.TDuration)
	cb.Do("DwTriggerFlags", &t.DwTriggerFlags)
	cb.Do("DwTriggerFlagsEx", &t.DwTriggerFlagsEx)
	cb.Do("TCleanup", &t.TCleanup)
	cb.Do("Unk_49e9257", &t.Unk_49e9257)
	cb.Do("Unk_5490979", &t.Unk_5490979)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("DwObjectID", &t.DwObjectID)
	cb.Do("Unk_17909b9", &t.Unk_17909b9)
	cb.Do("THardpointLinkTarget", &t.THardpointLinkTarget)
	cb.Do("DwTargetID", &t.DwTargetID)
	cb.Do("EOrientationMode", &t.EOrientationMode)
	cb.Do("Unk_daebe18", &t.Unk_daebe18)
	cb.Do("Unk_6101673", &t.Unk_6101673)
	cb.Do("Unk_8470ffc", &t.Unk_8470ffc)
	cb.Do("Unk_46c8459", &t.Unk_46c8459)
	cb.Do("EBlendEasing", &t.EBlendEasing)
	cb.Do("EMoveRate", &t.EMoveRate)
	cb.Do("EDynamicMovementSpeed", &t.EDynamicMovementSpeed)
	cb.Do("Unk_c751343", &t.Unk_c751343)
	cb.Do("Unk_23237e1", &t.Unk_23237e1)
	cb.Do("Unk_f1b6afc", &t.Unk_f1b6afc)
}

type TraversalSurfaceOptions struct {
	ArSurfaces DT_VARIABLEARRAY[*DT_SNO]
}

func (t *TraversalSurfaceOptions) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.ArSurfaces, r, &Options{
		Flags: 1,
		Group: 43,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TraversalSurfaceOptions) Walk(cb WalkCallback) {
	cb.Do("ArSurfaces", &t.ArSurfaces)
}

type SNODataMessage struct {
	THeader RequiredMessageHeader
	SnoData DT_SNO
}

func (t *SNODataMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+20, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *SNODataMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("SnoData", &t.SnoData)
}

type SlopeBone struct {
	TBoneName AppBone
	APitchMin DT_FLOAT
	APitchMax DT_FLOAT
}

func (t *SlopeBone) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.TBoneName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.APitchMin, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.APitchMax, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+12, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *SlopeBone) Walk(cb WalkCallback) {
	cb.Do("TBoneName", &t.TBoneName)
	cb.Do("APitchMin", &t.APitchMin)
	cb.Do("APitchMax", &t.APitchMax)
}

type KeyedDungeonTierEntry struct {
	NMonsterLevel      DT_INT
	Unk_a089b1c        DT_FLOAT
	Unk_171d567        DT_FLOAT
	FlHPScalar         DT_FLOAT
	FlDamageScalar     DT_FLOAT
	Unk_435a301        DT_INT
	NMajorAffixCount   DT_INT
	Unk_2db9e3b        DT_INT
	Unk_838537c        DT_INT
	Unk_d9508bd        DT_INT
	NResurrectionLimit DT_INT
	NGlyphExperience   DT_INT
	NXPReward          DT_INT
	NGoldReward        DT_INT
}

func (t *KeyedDungeonTierEntry) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.NMonsterLevel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.Unk_a089b1c, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.Unk_171d567, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.FlHPScalar, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.FlDamageScalar, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.Unk_435a301, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.NMajorAffixCount, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.Unk_2db9e3b, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.Unk_838537c, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.Unk_d9508bd, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.NResurrectionLimit, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.NGlyphExperience, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.NXPReward, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.NGoldReward, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+56, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *KeyedDungeonTierEntry) Walk(cb WalkCallback) {
	cb.Do("NMonsterLevel", &t.NMonsterLevel)
	cb.Do("Unk_a089b1c", &t.Unk_a089b1c)
	cb.Do("Unk_171d567", &t.Unk_171d567)
	cb.Do("FlHPScalar", &t.FlHPScalar)
	cb.Do("FlDamageScalar", &t.FlDamageScalar)
	cb.Do("Unk_435a301", &t.Unk_435a301)
	cb.Do("NMajorAffixCount", &t.NMajorAffixCount)
	cb.Do("Unk_2db9e3b", &t.Unk_2db9e3b)
	cb.Do("Unk_838537c", &t.Unk_838537c)
	cb.Do("Unk_d9508bd", &t.Unk_d9508bd)
	cb.Do("NResurrectionLimit", &t.NResurrectionLimit)
	cb.Do("NGlyphExperience", &t.NGlyphExperience)
	cb.Do("NXPReward", &t.NXPReward)
	cb.Do("NGoldReward", &t.NGoldReward)
}

type UIPieChartStyle struct {
	// Inherits UIWindowStyle
	// Inherits UIControlStyle
	// Inherits PolymorphicBase
	DwType                    DT_UINT
	DwPad                     DT_UINT
	HParentStyle              UIControlHandle
	Unk_441f783               DT_INT64
	M_eHasModifiedPowerTagMap DT_TAGMAP[*DT_ENUM]
	TConsoleInput             UIControlConsoleInput
	Unk_b4f614c               DT_TAGMAP[*DT_ENUM]
}

func (t *UIPieChartStyle) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.HParentStyle, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_441f783, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.M_eHasModifiedPowerTagMap, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.TConsoleInput, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.Unk_b4f614c, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+80, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *UIPieChartStyle) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("HParentStyle", &t.HParentStyle)
	cb.Do("Unk_441f783", &t.Unk_441f783)
	cb.Do("M_eHasModifiedPowerTagMap", &t.M_eHasModifiedPowerTagMap)
	cb.Do("TConsoleInput", &t.TConsoleInput)
	cb.Do("Unk_b4f614c", &t.Unk_b4f614c)
}

type GameErrorData struct {
	EError DT_ENUM
	DwVal  DT_UINT
}

func (t *GameErrorData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.EError, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.DwVal, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *GameErrorData) Walk(cb WalkCallback) {
	cb.Do("EError", &t.EError)
	cb.Do("DwVal", &t.DwVal)
}

type PVPObeliskGizmoData struct {
	// Inherits NamedGizmoData
	// Inherits ActorGizmoData
	// Inherits PolymorphicBase
	DwType                       DT_UINT
	DwPad                        DT_UINT
	FDisableNonFriendlyOperation DT_INT
	FWalkToCenter                DT_INT
	FGizmoStartsDisabled         DT_INT
	FUseStringListName           DT_INT
	FForceMinimapIcon            DT_INT
	FlOperationRadius            DT_FLOAT
	Unk_d0b1df5                  DT_FLOAT
	FlGizmoUseTime               DT_FLOAT
	SnoChannelingEffect          DT_SNO
	Unk_2767229                  DT_INT
	FGizmoShowProgressBar        DT_INT
	Unk_6d9ebe1                  DT_INT
	Unk_5456245                  DT_INT
	Unk_af5815a                  DT_INT
	SnoOnClickEffect             DT_SNO
	SnoPickedUpEffect            DT_SNO
	SnoDropOnGroundEffect        DT_SNO
	TConditionData               GizmoConditionData
	SnoPowerOperator             DT_SNO
	SnoPowerOperate              DT_SNO
	SnoPowerOperatorActive       DT_SNO
	SnoPowerOperateActive        DT_SNO
	Unk_359810e                  DT_INT
	NCooldown                    DT_UINT
	Unk_9c8478e                  DT_UINT
	Unk_d45ed2d                  DT_INT
	Unk_f6b20b7                  DT_INT
	Unk_54513b8                  DT_INT
	Unk_fd1f378                  DT_UINT
	Unk_487c14                   DT_UINT
	Unk_87f2609                  DT_UINT
	Unk_158eb4f                  DT_FLOAT
	Unk_ab58cd3                  DT_ENUM
	Unk_91a3966                  DT_UINT
	Unk_25312e5                  DT_UINT
	Unk_4be4371                  DT_INT
	SnoActivationPower           DT_SNO
	Unk_6c381bd                  DT_INT
	SnoPlayerParticipatingEffect DT_FIXEDARRAY[*DT_SNO]
	Unk_1c10eb1                  DT_SNO
	Unk_a4fc05b                  DT_SNO
}

func (t *PVPObeliskGizmoData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.FDisableNonFriendlyOperation, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.FWalkToCenter, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.FGizmoStartsDisabled, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.FUseStringListName, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.FForceMinimapIcon, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.FlOperationRadius, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.Unk_d0b1df5, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.FlGizmoUseTime, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.SnoChannelingEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.Unk_2767229, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.FGizmoShowProgressBar, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+60, &t.Unk_6d9ebe1, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.Unk_5456245, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.Unk_af5815a, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.SnoOnClickEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.SnoPickedUpEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.SnoDropOnGroundEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.TConditionData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.SnoPowerOperator, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.SnoPowerOperate, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.SnoPowerOperatorActive, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+100, &t.SnoPowerOperateActive, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+104, &t.Unk_359810e, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+108, &t.NCooldown, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.Unk_9c8478e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+116, &t.Unk_d45ed2d, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.Unk_f6b20b7, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+124, &t.Unk_54513b8, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.Unk_fd1f378, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+132, &t.Unk_487c14, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+136, &t.Unk_87f2609, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+140, &t.Unk_158eb4f, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+144, &t.Unk_ab58cd3, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+148, &t.Unk_91a3966, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+152, &t.Unk_25312e5, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+156, &t.Unk_4be4371, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+160, &t.SnoActivationPower, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+164, &t.Unk_6c381bd, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+168, &t.SnoPlayerParticipatingEffect, r, &Options{
		ArrayLength: 4,
		Flags:       1,
		Group:       14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+184, &t.Unk_1c10eb1, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+188, &t.Unk_a4fc05b, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+192, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PVPObeliskGizmoData) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("FDisableNonFriendlyOperation", &t.FDisableNonFriendlyOperation)
	cb.Do("FWalkToCenter", &t.FWalkToCenter)
	cb.Do("FGizmoStartsDisabled", &t.FGizmoStartsDisabled)
	cb.Do("FUseStringListName", &t.FUseStringListName)
	cb.Do("FForceMinimapIcon", &t.FForceMinimapIcon)
	cb.Do("FlOperationRadius", &t.FlOperationRadius)
	cb.Do("Unk_d0b1df5", &t.Unk_d0b1df5)
	cb.Do("FlGizmoUseTime", &t.FlGizmoUseTime)
	cb.Do("SnoChannelingEffect", &t.SnoChannelingEffect)
	cb.Do("Unk_2767229", &t.Unk_2767229)
	cb.Do("FGizmoShowProgressBar", &t.FGizmoShowProgressBar)
	cb.Do("Unk_6d9ebe1", &t.Unk_6d9ebe1)
	cb.Do("Unk_5456245", &t.Unk_5456245)
	cb.Do("Unk_af5815a", &t.Unk_af5815a)
	cb.Do("SnoOnClickEffect", &t.SnoOnClickEffect)
	cb.Do("SnoPickedUpEffect", &t.SnoPickedUpEffect)
	cb.Do("SnoDropOnGroundEffect", &t.SnoDropOnGroundEffect)
	cb.Do("TConditionData", &t.TConditionData)
	cb.Do("SnoPowerOperator", &t.SnoPowerOperator)
	cb.Do("SnoPowerOperate", &t.SnoPowerOperate)
	cb.Do("SnoPowerOperatorActive", &t.SnoPowerOperatorActive)
	cb.Do("SnoPowerOperateActive", &t.SnoPowerOperateActive)
	cb.Do("Unk_359810e", &t.Unk_359810e)
	cb.Do("NCooldown", &t.NCooldown)
	cb.Do("Unk_9c8478e", &t.Unk_9c8478e)
	cb.Do("Unk_d45ed2d", &t.Unk_d45ed2d)
	cb.Do("Unk_f6b20b7", &t.Unk_f6b20b7)
	cb.Do("Unk_54513b8", &t.Unk_54513b8)
	cb.Do("Unk_fd1f378", &t.Unk_fd1f378)
	cb.Do("Unk_487c14", &t.Unk_487c14)
	cb.Do("Unk_87f2609", &t.Unk_87f2609)
	cb.Do("Unk_158eb4f", &t.Unk_158eb4f)
	cb.Do("Unk_ab58cd3", &t.Unk_ab58cd3)
	cb.Do("Unk_91a3966", &t.Unk_91a3966)
	cb.Do("Unk_25312e5", &t.Unk_25312e5)
	cb.Do("Unk_4be4371", &t.Unk_4be4371)
	cb.Do("SnoActivationPower", &t.SnoActivationPower)
	cb.Do("Unk_6c381bd", &t.Unk_6c381bd)
	cb.Do("SnoPlayerParticipatingEffect", &t.SnoPlayerParticipatingEffect)
	cb.Do("Unk_1c10eb1", &t.Unk_1c10eb1)
	cb.Do("Unk_a4fc05b", &t.Unk_a4fc05b)
}

type ScrollbarElementImages struct {
	HStateImages DT_FIXEDARRAY[*DT_UINT]
}

func (t *ScrollbarElementImages) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.HStateImages, r, &Options{
		ArrayLength: 3,
		Flags:       1,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+12, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ScrollbarElementImages) Walk(cb WalkCallback) {
	cb.Do("HStateImages", &t.HStateImages)
}

type AudioContextDefinition struct {
	SnoMusic     DT_SNO
	SnoAmbient   DT_SNO
	SnoReverb    DT_SNO
	Unk_2d0db3d  DT_INT
	Unk_e197f62  DT_INT
	Unk_d110c10  Type_fa97e5b9
	ArRainSounds DT_VARIABLEARRAY[*Type_b593e3c8]
}

func (t *AudioContextDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.SnoMusic, r, &Options{
		Flags: 1,
		Group: 62,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.SnoAmbient, r, &Options{
		Flags: 1,
		Group: 5,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoReverb, r, &Options{
		Flags: 1,
		Group: 60,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.Unk_2d0db3d, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_e197f62, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.Unk_d110c10, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.ArRainSounds, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+64, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *AudioContextDefinition) Walk(cb WalkCallback) {
	cb.Do("SnoMusic", &t.SnoMusic)
	cb.Do("SnoAmbient", &t.SnoAmbient)
	cb.Do("SnoReverb", &t.SnoReverb)
	cb.Do("Unk_2d0db3d", &t.Unk_2d0db3d)
	cb.Do("Unk_e197f62", &t.Unk_e197f62)
	cb.Do("Unk_d110c10", &t.Unk_d110c10)
	cb.Do("ArRainSounds", &t.ArRainSounds)
}

type ScriptEventDescription struct {
	EEventType          DT_ENUM
	SzDescription       DT_INT64
	SzGrammar           DT_INT64
	ArParamTypes        DT_FIXEDARRAY[*DT_ENUM]
	SzParamNames        DT_FIXEDARRAY[*DT_INT64]
	SzFuncParamNames    DT_FIXEDARRAY[*DT_INT64]
	SzParamDescriptions DT_FIXEDARRAY[*DT_INT64]
	Unk_aab17b3         DT_FIXEDARRAY[*DT_ENUM]
	Unk_7ef4b8b         DT_FIXEDARRAY[*DT_ENUM]
	Unk_336d153         DT_FIXEDARRAY[*DT_ENUM]
	Unk_41cdd20         DT_FIXEDARRAY[*DT_ENUM]
	DwFlags             DT_UINT
	Unk_165bc75         DT_INT64
}

func (t *ScriptEventDescription) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.EEventType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.SzDescription, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SzGrammar, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ArParamTypes, r, &Options{
		ArrayLength: 4,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.SzParamNames, r, &Options{
		ArrayLength: 4,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.SzFuncParamNames, r, &Options{
		ArrayLength: 4,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+104, &t.SzParamDescriptions, r, &Options{
		ArrayLength: 4,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+136, &t.Unk_aab17b3, r, &Options{
		ArrayLength: 4,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+152, &t.Unk_7ef4b8b, r, &Options{
		ArrayLength: 4,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+168, &t.Unk_336d153, r, &Options{
		ArrayLength: 4,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+184, &t.Unk_41cdd20, r, &Options{
		ArrayLength: 4,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+200, &t.DwFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+208, &t.Unk_165bc75, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+216, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ScriptEventDescription) Walk(cb WalkCallback) {
	cb.Do("EEventType", &t.EEventType)
	cb.Do("SzDescription", &t.SzDescription)
	cb.Do("SzGrammar", &t.SzGrammar)
	cb.Do("ArParamTypes", &t.ArParamTypes)
	cb.Do("SzParamNames", &t.SzParamNames)
	cb.Do("SzFuncParamNames", &t.SzFuncParamNames)
	cb.Do("SzParamDescriptions", &t.SzParamDescriptions)
	cb.Do("Unk_aab17b3", &t.Unk_aab17b3)
	cb.Do("Unk_7ef4b8b", &t.Unk_7ef4b8b)
	cb.Do("Unk_336d153", &t.Unk_336d153)
	cb.Do("Unk_41cdd20", &t.Unk_41cdd20)
	cb.Do("DwFlags", &t.DwFlags)
	cb.Do("Unk_165bc75", &t.Unk_165bc75)
}

type ItemSalvageLevel struct {
	SnoSalvageTreasureClassNormal    DT_SNO
	SnoSalvageTreasureClassMagic     DT_SNO
	SnoSalvageTreasureClassRare      DT_SNO
	SnoSalvageTreasureClassLegendary DT_SNO
	SnoSalvageTreasureClassUnique    DT_SNO
	SnoSalvageTreasureClassSetItem   DT_SNO
}

func (t *ItemSalvageLevel) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoSalvageTreasureClassNormal, r, &Options{
		Flags: 1,
		Group: 52,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.SnoSalvageTreasureClassMagic, r, &Options{
		Flags: 1,
		Group: 52,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.SnoSalvageTreasureClassRare, r, &Options{
		Flags: 1,
		Group: 52,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.SnoSalvageTreasureClassLegendary, r, &Options{
		Flags: 1,
		Group: 52,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoSalvageTreasureClassUnique, r, &Options{
		Flags: 1,
		Group: 52,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.SnoSalvageTreasureClassSetItem, r, &Options{
		Flags: 1,
		Group: 52,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ItemSalvageLevel) Walk(cb WalkCallback) {
	cb.Do("SnoSalvageTreasureClassNormal", &t.SnoSalvageTreasureClassNormal)
	cb.Do("SnoSalvageTreasureClassMagic", &t.SnoSalvageTreasureClassMagic)
	cb.Do("SnoSalvageTreasureClassRare", &t.SnoSalvageTreasureClassRare)
	cb.Do("SnoSalvageTreasureClassLegendary", &t.SnoSalvageTreasureClassLegendary)
	cb.Do("SnoSalvageTreasureClassUnique", &t.SnoSalvageTreasureClassUnique)
	cb.Do("SnoSalvageTreasureClassSetItem", &t.SnoSalvageTreasureClassSetItem)
}

type GlobalMarkerActorData struct {
	// Inherits PolymorphicBase
	DwType DT_UINT
	DwPad  DT_UINT
}

func (t *GlobalMarkerActorData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *GlobalMarkerActorData) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
}

type ConditionWrapper struct {
	SnoCondition      DT_SNO
	PtInlineCondition DT_POLYMORPHIC_VARIABLEARRAY[*Subcondition]
}

func (t *ConditionWrapper) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoCondition, r, &Options{
		Flags: 1,
		Group: 51,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.PtInlineCondition, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ConditionWrapper) Walk(cb WalkCallback) {
	cb.Do("SnoCondition", &t.SnoCondition)
	cb.Do("PtInlineCondition", &t.PtInlineCondition)
}

type RogueSpecializationGlobalData struct {
	SnoSpecPower       DT_SNO
	SnoUnlockQuest     DT_SNO
	NUnlockLevel       DT_INT
	HUnlockDescription DT_UINT
}

func (t *RogueSpecializationGlobalData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoSpecPower, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.SnoUnlockQuest, r, &Options{
		Flags: 1,
		Group: 31,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.NUnlockLevel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.HUnlockDescription, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *RogueSpecializationGlobalData) Walk(cb WalkCallback) {
	cb.Do("SnoSpecPower", &t.SnoSpecPower)
	cb.Do("SnoUnlockQuest", &t.SnoUnlockQuest)
	cb.Do("NUnlockLevel", &t.NUnlockLevel)
	cb.Do("HUnlockDescription", &t.HUnlockDescription)
}

type WorldSyncedData struct {
	SnoWeatherOverride            DT_SNO
	FlWeatherIntensityOverride    DT_FLOAT
	DwWeatherIntensityOverrideEnd DT_UINT
	ArRevealedPortalInfo          DT_FIXEDARRAY[*WorldRevealedPortalInfo]
	Unk_9b85c0f                   DT_FIXEDARRAY[*DT_SNO]
	ArLevelAreaSNOs               DT_FIXEDARRAY[*DT_SNO]
	SnoMusicOverride              DT_SNO
	Unk_f4f9d6f                   DT_INT
	Unk_55eead1                   DT_FLOAT
}

func (t *WorldSyncedData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoWeatherOverride, r, &Options{
		Flags: 1,
		Group: 47,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.FlWeatherIntensityOverride, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwWeatherIntensityOverrideEnd, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.ArRevealedPortalInfo, r, &Options{
		ArrayLength: 32,
		Flags:       8,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1296, &t.Unk_9b85c0f, r, &Options{
		ArrayLength: 32,
		Flags:       9,
		Group:       22,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1428, &t.ArLevelAreaSNOs, r, &Options{
		ArrayLength: 32,
		Flags:       9,
		Group:       22,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1560, &t.SnoMusicOverride, r, &Options{
		Flags: 1,
		Group: 62,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1564, &t.Unk_f4f9d6f, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1568, &t.Unk_55eead1, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+1572, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *WorldSyncedData) Walk(cb WalkCallback) {
	cb.Do("SnoWeatherOverride", &t.SnoWeatherOverride)
	cb.Do("FlWeatherIntensityOverride", &t.FlWeatherIntensityOverride)
	cb.Do("DwWeatherIntensityOverrideEnd", &t.DwWeatherIntensityOverrideEnd)
	cb.Do("ArRevealedPortalInfo", &t.ArRevealedPortalInfo)
	cb.Do("Unk_9b85c0f", &t.Unk_9b85c0f)
	cb.Do("ArLevelAreaSNOs", &t.ArLevelAreaSNOs)
	cb.Do("SnoMusicOverride", &t.SnoMusicOverride)
	cb.Do("Unk_f4f9d6f", &t.Unk_f4f9d6f)
	cb.Do("Unk_55eead1", &t.Unk_55eead1)
}

type Subcondition struct {
	// Inherits PolymorphicBase
	DwType  DT_UINT
	BNegate DT_INT
	DwPad   DT_UINT
}

func (t *Subcondition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BNegate, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Subcondition) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("BNegate", &t.BNegate)
	cb.Do("DwPad", &t.DwPad)
}

type Type_df8f2b75 struct {
	Unk_746f6e7 DT_FLOAT
	Unk_c60221b DT_FLOAT
	Unk_1f66e44 DT_INT
	Unk_86e9b87 DT_FLOAT
	Unk_af4aac3 DT_ENUM
	Unk_e0262a4 DT_ENUM
	Unk_29b6a75 DT_ENUM
	Unk_1ccce48 DT_ENUM
	Unk_6fc84d8 DT_ENUM
	Unk_a2f5bc6 DT_ENUM
	Unk_507fb94 DT_ENUM
	Unk_3c55dd8 DT_ENUM
}

func (t *Type_df8f2b75) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Unk_746f6e7, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.Unk_c60221b, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.Unk_1f66e44, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.Unk_86e9b87, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_af4aac3, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.Unk_e0262a4, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_29b6a75, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.Unk_1ccce48, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.Unk_6fc84d8, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.Unk_a2f5bc6, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.Unk_507fb94, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.Unk_3c55dd8, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_df8f2b75) Walk(cb WalkCallback) {
	cb.Do("Unk_746f6e7", &t.Unk_746f6e7)
	cb.Do("Unk_c60221b", &t.Unk_c60221b)
	cb.Do("Unk_1f66e44", &t.Unk_1f66e44)
	cb.Do("Unk_86e9b87", &t.Unk_86e9b87)
	cb.Do("Unk_af4aac3", &t.Unk_af4aac3)
	cb.Do("Unk_e0262a4", &t.Unk_e0262a4)
	cb.Do("Unk_29b6a75", &t.Unk_29b6a75)
	cb.Do("Unk_1ccce48", &t.Unk_1ccce48)
	cb.Do("Unk_6fc84d8", &t.Unk_6fc84d8)
	cb.Do("Unk_a2f5bc6", &t.Unk_a2f5bc6)
	cb.Do("Unk_507fb94", &t.Unk_507fb94)
	cb.Do("Unk_3c55dd8", &t.Unk_3c55dd8)
}

type Type_dff70e83 struct {
	Unk_bd0bed5 DT_FIXEDARRAY[*DT_SNO]
}

func (t *Type_dff70e83) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Unk_bd0bed5, r, &Options{
		ArrayLength: 3,
		Flags:       1,
		Group:       73,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+12, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_dff70e83) Walk(cb WalkCallback) {
	cb.Do("Unk_bd0bed5", &t.Unk_bd0bed5)
}

type BuffSubcondition struct {
	// Inherits Subcondition
	// Inherits PolymorphicBase
	DwType       DT_UINT
	BNegate      DT_INT
	DwPad        DT_UINT
	SnoBuffPower DT_SNO
	SzBuffDataID DT_UINT
	Unk_c7b2b18  DT_ENUM
}

func (t *BuffSubcondition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BNegate, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SnoBuffPower, r, &Options{
		Flags: 513,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.SzBuffDataID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.Unk_c7b2b18, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+40, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *BuffSubcondition) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("BNegate", &t.BNegate)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("SnoBuffPower", &t.SnoBuffPower)
	cb.Do("SzBuffDataID", &t.SzBuffDataID)
	cb.Do("Unk_c7b2b18", &t.Unk_c7b2b18)
}

type AnimContactFrame struct {
	NFrameNumber DT_INT
	VLocalOffset DT_VECTOR3D
}

func (t *AnimContactFrame) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.NFrameNumber, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.VLocalOffset, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *AnimContactFrame) Walk(cb WalkCallback) {
	cb.Do("NFrameNumber", &t.NFrameNumber)
	cb.Do("VLocalOffset", &t.VLocalOffset)
}

type EmitterDataBase struct {
	// Inherits PolymorphicBase
	DwType DT_UINT
	DwPad  DT_UINT
}

func (t *EmitterDataBase) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *EmitterDataBase) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
}

type ComplexEffectAddMessage struct {
	THeader           RequiredMessageHeader
	IdSComplexEffect  DT_ENUM
	EType             DT_ENUM
	SnoEffectGroup    DT_SNO
	AnnSource         DT_ACD_NETWORK_NAME
	AnnDest           DT_ACD_NETWORK_NAME
	AnnOrigin         DT_ACD_NETWORK_NAME
	DwParam1          DT_UINT
	DwParam2          DT_UINT
	BIgnoreOwnerAlpha DT_UINT
}

func (t *ComplexEffectAddMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.IdSComplexEffect, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.EType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SnoEffectGroup, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.AnnSource, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.AnnDest, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.AnnOrigin, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.DwParam1, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.DwParam2, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+60, &t.BIgnoreOwnerAlpha, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+64, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ComplexEffectAddMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("IdSComplexEffect", &t.IdSComplexEffect)
	cb.Do("EType", &t.EType)
	cb.Do("SnoEffectGroup", &t.SnoEffectGroup)
	cb.Do("AnnSource", &t.AnnSource)
	cb.Do("AnnDest", &t.AnnDest)
	cb.Do("AnnOrigin", &t.AnnOrigin)
	cb.Do("DwParam1", &t.DwParam1)
	cb.Do("DwParam2", &t.DwParam2)
	cb.Do("BIgnoreOwnerAlpha", &t.BIgnoreOwnerAlpha)
}

type SummonedActorsPreloadHelper struct {
	SnoActor        DT_SNO
	TSummonedActors SerialDataInfo
}

func (t *SummonedActorsPreloadHelper) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoActor, r, &Options{
		Flags: 1,
		Group: 1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.TSummonedActors, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+12, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *SummonedActorsPreloadHelper) Walk(cb WalkCallback) {
	cb.Do("SnoActor", &t.SnoActor)
	cb.Do("TSummonedActors", &t.TSummonedActors)
}

type Type_e12242af struct {
	Unk_cea351b DT_INT
}

func (t *Type_e12242af) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Unk_cea351b, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+4, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_e12242af) Walk(cb WalkCallback) {
	cb.Do("Unk_cea351b", &t.Unk_cea351b)
}

type Type_e1291b50 struct {
	EDevicePlugin DT_ENUM
	TName         WwiseName
	DwFlags       DT_UINT
}

func (t *Type_e1291b50) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.EDevicePlugin, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.TName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if _, err := r.Seek(p+12, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_e1291b50) Walk(cb WalkCallback) {
	cb.Do("EDevicePlugin", &t.EDevicePlugin)
	cb.Do("TName", &t.TName)
	cb.Do("DwFlags", &t.DwFlags)
}

type EffectGroupMaterialValueKeyData struct {
	// Inherits EffectGroupKeyData
	// Inherits PolymorphicBase
	DwType            DT_UINT
	DwPad             DT_UINT
	ArKeyItems        DT_VARIABLEARRAY[*EffectGroupKey]
	SnoMaterialValue  DT_SNO
	SnoMaterialFilter DT_SNO
}

func (t *EffectGroupMaterialValueKeyData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.ArKeyItems, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.SnoMaterialValue, r, &Options{
		Flags: 1,
		Group: 81,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.SnoMaterialFilter, r, &Options{
		Flags: 1,
		Group: 57,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+40, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *EffectGroupMaterialValueKeyData) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("ArKeyItems", &t.ArKeyItems)
	cb.Do("SnoMaterialValue", &t.SnoMaterialValue)
	cb.Do("SnoMaterialFilter", &t.SnoMaterialFilter)
}

type PowerConditionBase struct {
	// Inherits PolymorphicBase
	DwType   DT_UINT
	BInverse DT_INT
	DwPad    DT_UINT
}

func (t *PowerConditionBase) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BInverse, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PowerConditionBase) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("BInverse", &t.BInverse)
	cb.Do("DwPad", &t.DwPad)
}

type Type_e1a124f1 struct {
	SzBoneName           DT_UINT
	FlAdditionalRotation DT_FLOAT
}

func (t *Type_e1a124f1) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SzBoneName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.FlAdditionalRotation, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_e1a124f1) Walk(cb WalkCallback) {
	cb.Do("SzBoneName", &t.SzBoneName)
	cb.Do("FlAdditionalRotation", &t.FlAdditionalRotation)
}

type Type_e1ac09b4 struct {
	Offset      HardpointOffset
	SnoItemType DT_SNO
}

func (t *Type_e1ac09b4) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Offset, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.SnoItemType, r, &Options{
		Flags: 1,
		Group: 98,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+40, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_e1ac09b4) Walk(cb WalkCallback) {
	cb.Do("Offset", &t.Offset)
	cb.Do("SnoItemType", &t.SnoItemType)
}

type Type_e1bdd3f7 struct {
	THeader         GBIDHeader
	Unk_ec907a2     DT_FIXEDARRAY[*Type_a0b7f6f3]
	SnoCondition    DT_SNO
	ArForcedAffixes DT_VARIABLEARRAY[*DT_SNO]
	Unk_1f6b8a6     DT_VARIABLEARRAY[*DT_GBID]
	Unk_c816404     DT_UINT
	Unk_2f8528c     DT_VARIABLEARRAY[*DT_GBID]
	Unk_a6e2711     DT_VARIABLEARRAY[*DT_GBID]
}

func (t *Type_e1bdd3f7) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+260, &t.Unk_ec907a2, r, &Options{
		ArrayLength: 4,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+308, &t.SnoCondition, r, &Options{
		Flags: 1,
		Group: 51,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+312, &t.ArForcedAffixes, r, &Options{
		Flags: 1,
		Group: 107,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+328, &t.Unk_1f6b8a6, r, &Options{
		Flags: 1,
		Group: 66,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+344, &t.Unk_c816404, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+352, &t.Unk_2f8528c, r, &Options{Group: 66}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+368, &t.Unk_a6e2711, r, &Options{Group: 66}); err != nil {
		return err
	}
	if _, err := r.Seek(p+384, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_e1bdd3f7) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("Unk_ec907a2", &t.Unk_ec907a2)
	cb.Do("SnoCondition", &t.SnoCondition)
	cb.Do("ArForcedAffixes", &t.ArForcedAffixes)
	cb.Do("Unk_1f6b8a6", &t.Unk_1f6b8a6)
	cb.Do("Unk_c816404", &t.Unk_c816404)
	cb.Do("Unk_2f8528c", &t.Unk_2f8528c)
	cb.Do("Unk_a6e2711", &t.Unk_a6e2711)
}

type Type_e1f41032 struct {
	M_localTransform dmTransformMirror
	M_transform1     dmTransformMirror
	M_transform2     dmTransformMirror
	M_scale          DT_VECTOR4D
	M_invScale       DT_VECTOR4D
	Unk_fe69d65      DT_VECTOR4D
	M_params         DT_VECTOR4D
	M_type           DT_WORD
	M_boneIndex      DT_WORD
	M_padding        DT_FIXEDARRAY[*DT_WORD]
}

func (t *Type_e1f41032) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.M_localTransform, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.M_transform1, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.M_transform2, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.M_scale, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.M_invScale, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.Unk_fe69d65, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+144, &t.M_params, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+160, &t.M_type, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+162, &t.M_boneIndex, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+164, &t.M_padding, r, &Options{ArrayLength: 6}); err != nil {
		return err
	}
	if _, err := r.Seek(p+176, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_e1f41032) Walk(cb WalkCallback) {
	cb.Do("M_localTransform", &t.M_localTransform)
	cb.Do("M_transform1", &t.M_transform1)
	cb.Do("M_transform2", &t.M_transform2)
	cb.Do("M_scale", &t.M_scale)
	cb.Do("M_invScale", &t.M_invScale)
	cb.Do("Unk_fe69d65", &t.Unk_fe69d65)
	cb.Do("M_params", &t.M_params)
	cb.Do("M_type", &t.M_type)
	cb.Do("M_boneIndex", &t.M_boneIndex)
	cb.Do("M_padding", &t.M_padding)
}

type AttributesChangedBuffCallback struct {
	// Inherits BuffCallbackBase
	// Inherits PolymorphicBase
	DwType                DT_UINT
	DwPad                 DT_UINT
	SnoTriggerEffectGroup DT_SNO
	ArConditions          DT_POLYMORPHIC_VARIABLEARRAY[*DT_INT64]
}

func (t *AttributesChangedBuffCallback) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoTriggerEffectGroup, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ArConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *AttributesChangedBuffCallback) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("SnoTriggerEffectGroup", &t.SnoTriggerEffectGroup)
	cb.Do("ArConditions", &t.ArConditions)
}

type Type_e243df90 struct {
	Unk_62412ed    DT_RANGE[*DT_INT]
	NRequiredLevel DT_INT
	Unk_4d258da    DT_ENUM
	Unk_aeed93c    DT_RANGE[*DT_INT]
}

func (t *Type_e243df90) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Unk_62412ed, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.NRequiredLevel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.Unk_4d258da, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_aeed93c, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_e243df90) Walk(cb WalkCallback) {
	cb.Do("Unk_62412ed", &t.Unk_62412ed)
	cb.Do("NRequiredLevel", &t.NRequiredLevel)
	cb.Do("Unk_4d258da", &t.Unk_4d258da)
	cb.Do("Unk_aeed93c", &t.Unk_aeed93c)
}

type PowerPhaseInitialization struct {
	// Inherits PowerPhaseBase
	// Inherits PolymorphicBase
	DwType      DT_UINT
	DwPad       DT_UINT
	TPhaseName  DT_UINT
	Unk_fcb7313 DT_POLYMORPHIC_VARIABLEARRAY[*DT_INT64]
	Unk_d0d932b DT_INT
	Unk_9a8200e DT_INT
}

func (t *PowerPhaseInitialization) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TPhaseName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_fcb7313, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.Unk_d0d932b, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.Unk_9a8200e, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+56, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PowerPhaseInitialization) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("TPhaseName", &t.TPhaseName)
	cb.Do("Unk_fcb7313", &t.Unk_fcb7313)
	cb.Do("Unk_d0d932b", &t.Unk_d0d932b)
	cb.Do("Unk_9a8200e", &t.Unk_9a8200e)
}

type WallInstanceData struct {
	Unk_e246d5a   DT_VARIABLEARRAY[*Type_e6b22340]
	TCornerPieces WallCornerPieces
	Unk_7b78b21   DT_VARIABLEARRAY[*Type_bc07d3c7]
	Unk_3bd1636   DT_VARIABLEARRAY[*Type_bc07d3c7]
}

func (t *WallInstanceData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Unk_e246d5a, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TCornerPieces, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.Unk_7b78b21, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+136, &t.Unk_3bd1636, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+152, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *WallInstanceData) Walk(cb WalkCallback) {
	cb.Do("Unk_e246d5a", &t.Unk_e246d5a)
	cb.Do("TCornerPieces", &t.TCornerPieces)
	cb.Do("Unk_7b78b21", &t.Unk_7b78b21)
	cb.Do("Unk_3bd1636", &t.Unk_3bd1636)
}

type QuestChainDefinition struct {
	DwNextID                       DT_UINT
	SnoSubzone                     DT_SNO
	Unk_2feafdd                    DT_INT
	Unk_23523de                    DT_INT
	EQuestChainType                DT_ENUM
	ArRequiredCompletedQuestChains DT_VARIABLEARRAY[*DT_SNO]
	Unk_97b742f                    DT_VARIABLEARRAY[*DT_SNO]
	SnoCompletionSubzoneOverride   DT_SNO
	Unk_8c8a554                    DT_STARTLOC_NAME
	TMarkerHandle                  MarkerHandle
	VecMarkerLocation              DT_VECTOR3D
	TFlipLocationMarkerHandle      MarkerHandle
	VecFlipLocation                DT_VECTOR3D
	Unk_d35a97e                    DT_SNO
	SnoEffectGroupPreFlip          DT_SNO
	SnoEffectGroupPostFlip         DT_SNO
	Unk_62b3134                    DT_SNO
	ArSteps                        DT_VARIABLEARRAY[*QuestChainStep]
}

func (t *QuestChainDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwNextID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.SnoSubzone, r, &Options{
		Flags: 1,
		Group: 80,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_2feafdd, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.Unk_23523de, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.EQuestChainType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.ArRequiredCompletedQuestChains, r, &Options{
		Flags: 1,
		Group: 96,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.Unk_97b742f, r, &Options{
		Flags: 1,
		Group: 80,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.SnoCompletionSubzoneOverride, r, &Options{
		Flags: 1,
		Group: 80,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.Unk_8c8a554, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.TMarkerHandle, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.VecMarkerLocation, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.TFlipLocationMarkerHandle, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+100, &t.VecFlipLocation, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.Unk_d35a97e, r, &Options{
		Flags: 1,
		Group: 123,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+116, &t.SnoEffectGroupPreFlip, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.SnoEffectGroupPostFlip, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+124, &t.Unk_62b3134, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.ArSteps, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+144, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *QuestChainDefinition) Walk(cb WalkCallback) {
	cb.Do("DwNextID", &t.DwNextID)
	cb.Do("SnoSubzone", &t.SnoSubzone)
	cb.Do("Unk_2feafdd", &t.Unk_2feafdd)
	cb.Do("Unk_23523de", &t.Unk_23523de)
	cb.Do("EQuestChainType", &t.EQuestChainType)
	cb.Do("ArRequiredCompletedQuestChains", &t.ArRequiredCompletedQuestChains)
	cb.Do("Unk_97b742f", &t.Unk_97b742f)
	cb.Do("SnoCompletionSubzoneOverride", &t.SnoCompletionSubzoneOverride)
	cb.Do("Unk_8c8a554", &t.Unk_8c8a554)
	cb.Do("TMarkerHandle", &t.TMarkerHandle)
	cb.Do("VecMarkerLocation", &t.VecMarkerLocation)
	cb.Do("TFlipLocationMarkerHandle", &t.TFlipLocationMarkerHandle)
	cb.Do("VecFlipLocation", &t.VecFlipLocation)
	cb.Do("Unk_d35a97e", &t.Unk_d35a97e)
	cb.Do("SnoEffectGroupPreFlip", &t.SnoEffectGroupPreFlip)
	cb.Do("SnoEffectGroupPostFlip", &t.SnoEffectGroupPostFlip)
	cb.Do("Unk_62b3134", &t.Unk_62b3134)
	cb.Do("ArSteps", &t.ArSteps)
}

type GlobalRoadSegment struct {
	ERoadType      DT_ENUM
	ArWorldPoints  DT_VARIABLEARRAY[*DT_VECTOR3D]
	Unk_c70bbe2    DT_VARIABLEARRAY[*DT_INT]
	Unk_b833e44    DT_VARIABLEARRAY[*DT_INT]
	ArCurveLengths DT_VARIABLEARRAY[*DT_FLOAT]
	FlLength       DT_FLOAT
	FIsLoop        DT_INT
	AabbBounds     AABB
}

func (t *GlobalRoadSegment) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.ERoadType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.ArWorldPoints, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_c70bbe2, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.Unk_b833e44, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.ArCurveLengths, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.FlLength, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.FIsLoop, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.AabbBounds, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+104, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *GlobalRoadSegment) Walk(cb WalkCallback) {
	cb.Do("ERoadType", &t.ERoadType)
	cb.Do("ArWorldPoints", &t.ArWorldPoints)
	cb.Do("Unk_c70bbe2", &t.Unk_c70bbe2)
	cb.Do("Unk_b833e44", &t.Unk_b833e44)
	cb.Do("ArCurveLengths", &t.ArCurveLengths)
	cb.Do("FlLength", &t.FlLength)
	cb.Do("FIsLoop", &t.FIsLoop)
	cb.Do("AabbBounds", &t.AabbBounds)
}

type AnimTreeBlendCase struct {
	EParam         DT_ENUM
	NIntLiteral    DT_INT
	FlFloatLiteral DT_FLOAT
}

func (t *AnimTreeBlendCase) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.EParam, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.NIntLiteral, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.FlFloatLiteral, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+12, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *AnimTreeBlendCase) Walk(cb WalkCallback) {
	cb.Do("EParam", &t.EParam)
	cb.Do("NIntLiteral", &t.NIntLiteral)
	cb.Do("FlFloatLiteral", &t.FlFloatLiteral)
}

type Type_e2937db8 struct {
	// Inherits Type_7e418ba8
	// Inherits PolymorphicBase
	DwType       DT_UINT
	Unk_2de4987  DT_UINT
	ArConditions DT_POLYMORPHIC_VARIABLEARRAY[*DT_INT64]
	BEnd         DT_INT
	DwPad        DT_UINT
}

func (t *Type_e2937db8) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_2de4987, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ArConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.BEnd, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+56, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_e2937db8) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("Unk_2de4987", &t.Unk_2de4987)
	cb.Do("ArConditions", &t.ArConditions)
	cb.Do("BEnd", &t.BEnd)
	cb.Do("DwPad", &t.DwPad)
}

type SkillTreeNodeConnection struct {
	NIndexNodeA           DT_INT
	NIndexNodeB           DT_INT
	DwSourceId            DT_UINT
	DwDestinationId       DT_UINT
	ArCustomPathPositions DT_VARIABLEARRAY[*DT_VECTOR2D]
}

func (t *SkillTreeNodeConnection) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.NIndexNodeA, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.NIndexNodeB, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwSourceId, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwDestinationId, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.ArCustomPathPositions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *SkillTreeNodeConnection) Walk(cb WalkCallback) {
	cb.Do("NIndexNodeA", &t.NIndexNodeA)
	cb.Do("NIndexNodeB", &t.NIndexNodeB)
	cb.Do("DwSourceId", &t.DwSourceId)
	cb.Do("DwDestinationId", &t.DwDestinationId)
	cb.Do("ArCustomPathPositions", &t.ArCustomPathPositions)
}

type SoundPlayHistory struct {
	NLastPlayedPerm  DT_INT
	FlLastPlayedTime DT_FLOAT
	ArPlayedFlags    DT_FIXEDARRAY[*DT_BYTE]
}

func (t *SoundPlayHistory) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.NLastPlayedPerm, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.FlLastPlayedTime, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.ArPlayedFlags, r, &Options{
		ArrayLength: 16,
		Flags:       1,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *SoundPlayHistory) Walk(cb WalkCallback) {
	cb.Do("NLastPlayedPerm", &t.NLastPlayedPerm)
	cb.Do("FlLastPlayedTime", &t.FlLastPlayedTime)
	cb.Do("ArPlayedFlags", &t.ArPlayedFlags)
}

type TriggerEventEnableRagdoll struct {
	// Inherits TriggerEvent
	// Inherits PolymorphicBase
	DwType          DT_UINT
	DwPad           DT_UINT
	TConditions     TriggerConditions
	FGenerated      DT_INT
	Unk_6cba752     DT_INT
	DwParentActorID DT_UINT
	TRagdollParams  EnableRagdollParams
	DwActorID       DT_UINT
	Unk_279aa5a     DT_INT
}

func (t *TriggerEventEnableRagdoll) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.FGenerated, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_6cba752, r, &Options{Flags: 16}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.DwParentActorID, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.TRagdollParams, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.DwActorID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.Unk_279aa5a, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+104, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TriggerEventEnableRagdoll) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("TConditions", &t.TConditions)
	cb.Do("FGenerated", &t.FGenerated)
	cb.Do("Unk_6cba752", &t.Unk_6cba752)
	cb.Do("DwParentActorID", &t.DwParentActorID)
	cb.Do("TRagdollParams", &t.TRagdollParams)
	cb.Do("DwActorID", &t.DwActorID)
	cb.Do("Unk_279aa5a", &t.Unk_279aa5a)
}

type SkillTreeNodePersonalConnection struct {
	NIndexNode DT_INT
}

func (t *SkillTreeNodePersonalConnection) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.NIndexNode, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+4, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *SkillTreeNodePersonalConnection) Walk(cb WalkCallback) {
	cb.Do("NIndexNode", &t.NIndexNode)
}

type ActorEffectData struct {
	NHardpointIndexForRope          DT_INT
	FDoesntCauseCriticalBloodEffect DT_INT
	FNeverPlayGethitJitter          DT_INT
	Unk_2bf030e                     DT_FIXEDARRAY[*DT_SNO]
	Unk_e36d5f3                     DT_FIXEDARRAY[*DT_SNO]
	ArDOTEffectGroups               DT_FIXEDARRAY[*DT_SNO]
	Unk_4ed2a5b                     DT_FIXEDARRAY[*DT_SNO]
	SnoMonsterRarityEffectGroup     DT_SNO
	SnoShieldBlockEffectGroup       DT_SNO
}

func (t *ActorEffectData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.NHardpointIndexForRope, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.FDoesntCauseCriticalBloodEffect, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.FNeverPlayGethitJitter, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.Unk_2bf030e, r, &Options{
		ArrayLength: 6,
		Flags:       1,
		Group:       14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.Unk_e36d5f3, r, &Options{
		ArrayLength: 6,
		Flags:       1,
		Group:       14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+60, &t.ArDOTEffectGroups, r, &Options{
		ArrayLength: 6,
		Flags:       1,
		Group:       14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.Unk_4ed2a5b, r, &Options{
		ArrayLength: 6,
		Flags:       1,
		Group:       14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+108, &t.SnoMonsterRarityEffectGroup, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.SnoShieldBlockEffectGroup, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+116, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ActorEffectData) Walk(cb WalkCallback) {
	cb.Do("NHardpointIndexForRope", &t.NHardpointIndexForRope)
	cb.Do("FDoesntCauseCriticalBloodEffect", &t.FDoesntCauseCriticalBloodEffect)
	cb.Do("FNeverPlayGethitJitter", &t.FNeverPlayGethitJitter)
	cb.Do("Unk_2bf030e", &t.Unk_2bf030e)
	cb.Do("Unk_e36d5f3", &t.Unk_e36d5f3)
	cb.Do("ArDOTEffectGroups", &t.ArDOTEffectGroups)
	cb.Do("Unk_4ed2a5b", &t.Unk_4ed2a5b)
	cb.Do("SnoMonsterRarityEffectGroup", &t.SnoMonsterRarityEffectGroup)
	cb.Do("SnoShieldBlockEffectGroup", &t.SnoShieldBlockEffectGroup)
}

type FloatingNumberMessage struct {
	THeader          RequiredMessageHeader
	AnnTarget        DT_ACD_NETWORK_NAME
	FlDamage         DT_FLOAT
	FlDamageUnscaled DT_FLOAT
	EType            DT_ENUM
	VImpactPos       DT_OPTIONAL[*DT_VECTOR2D]
	Unk_741de7       DT_OPTIONAL[*DT_FLOAT]
}

func (t *FloatingNumberMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.AnnTarget, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.FlDamage, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.FlDamageUnscaled, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.EType, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.VImpactPos, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.Unk_741de7, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+56, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *FloatingNumberMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("AnnTarget", &t.AnnTarget)
	cb.Do("FlDamage", &t.FlDamage)
	cb.Do("FlDamageUnscaled", &t.FlDamageUnscaled)
	cb.Do("EType", &t.EType)
	cb.Do("VImpactPos", &t.VImpactPos)
	cb.Do("Unk_741de7", &t.Unk_741de7)
}

type Type_e3bec795 struct {
	Unk_27ff629     DT_VARIABLEARRAY[*Type_2cf6a209]
	SnoConversation DT_SNO
	DwNodeID        DT_UINT
	SnoSpeaker      DT_SNO
	ESpeakerGender  DT_ENUM
	ESpeakerClass   DT_ENUM
}

func (t *Type_e3bec795) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Unk_27ff629, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoConversation, r, &Options{
		Flags: 1,
		Group: 12,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwNodeID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SnoSpeaker, r, &Options{
		Flags: 1,
		Group: 72,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.ESpeakerGender, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.ESpeakerClass, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+40, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_e3bec795) Walk(cb WalkCallback) {
	cb.Do("Unk_27ff629", &t.Unk_27ff629)
	cb.Do("SnoConversation", &t.SnoConversation)
	cb.Do("DwNodeID", &t.DwNodeID)
	cb.Do("SnoSpeaker", &t.SnoSpeaker)
	cb.Do("ESpeakerGender", &t.ESpeakerGender)
	cb.Do("ESpeakerClass", &t.ESpeakerClass)
}

type BlizzconCVarsMessage struct {
	THeader              RequiredMessageHeader
	BMultiplayerEnabled  DT_INT
	BDHunterEnabled      DT_INT
	BBlizzconDropEnabled DT_INT
}

func (t *BlizzconCVarsMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BMultiplayerEnabled, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.BDHunterEnabled, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.BBlizzconDropEnabled, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+28, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *BlizzconCVarsMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("BMultiplayerEnabled", &t.BMultiplayerEnabled)
	cb.Do("BDHunterEnabled", &t.BDHunterEnabled)
	cb.Do("BBlizzconDropEnabled", &t.BBlizzconDropEnabled)
}

type Type_e3f28f16 struct {
	EDamageType              DT_ENUM
	TDamage                  HitpointSpecifier
	Unk_89dc285              DT_INT
	Unk_6331bb5              DT_FLOAT
	Unk_f551941              DT_ENUM
	Unk_dd4b5bf              DT_INT
	Unk_3d768b7              DT_INT
	Unk_b8f2b                DT_ENUM
	BHasCombatEffectOverride DT_INT
	TCombatEffectOverride    DT_STRING_FORMULA
	Unk_693b6db              DT_INT
	Unk_d50fe6e              DT_INT
}

func (t *Type_e3f28f16) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.EDamageType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.TDamage, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.Unk_89dc285, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.Unk_6331bb5, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.Unk_f551941, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.Unk_dd4b5bf, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.Unk_3d768b7, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+100, &t.Unk_b8f2b, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+104, &t.BHasCombatEffectOverride, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.TCombatEffectOverride, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+144, &t.Unk_693b6db, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+148, &t.Unk_d50fe6e, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+152, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_e3f28f16) Walk(cb WalkCallback) {
	cb.Do("EDamageType", &t.EDamageType)
	cb.Do("TDamage", &t.TDamage)
	cb.Do("Unk_89dc285", &t.Unk_89dc285)
	cb.Do("Unk_6331bb5", &t.Unk_6331bb5)
	cb.Do("Unk_f551941", &t.Unk_f551941)
	cb.Do("Unk_dd4b5bf", &t.Unk_dd4b5bf)
	cb.Do("Unk_3d768b7", &t.Unk_3d768b7)
	cb.Do("Unk_b8f2b", &t.Unk_b8f2b)
	cb.Do("BHasCombatEffectOverride", &t.BHasCombatEffectOverride)
	cb.Do("TCombatEffectOverride", &t.TCombatEffectOverride)
	cb.Do("Unk_693b6db", &t.Unk_693b6db)
	cb.Do("Unk_d50fe6e", &t.Unk_d50fe6e)
}

type ProximityDataBase struct {
	// Inherits PolymorphicBase
	DwType DT_UINT
	DwPad  DT_UINT
}

func (t *ProximityDataBase) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ProximityDataBase) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
}

type ItemRequirementDefinition struct {
	BAnyWeapon    DT_INT
	BDualWielding DT_INT
	Unk_901b272   DT_INT
	Unk_24a783    DT_INT
	Unk_9f5f4cb   DT_INT
	ArItemLabels  DT_VARIABLEARRAY[*DT_ENUM]
	Unk_853db38   DT_UINT
}

func (t *ItemRequirementDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.BAnyWeapon, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.BDualWielding, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_901b272, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.Unk_24a783, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_9f5f4cb, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.ArItemLabels, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.Unk_853db38, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+56, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ItemRequirementDefinition) Walk(cb WalkCallback) {
	cb.Do("BAnyWeapon", &t.BAnyWeapon)
	cb.Do("BDualWielding", &t.BDualWielding)
	cb.Do("Unk_901b272", &t.Unk_901b272)
	cb.Do("Unk_24a783", &t.Unk_24a783)
	cb.Do("Unk_9f5f4cb", &t.Unk_9f5f4cb)
	cb.Do("ArItemLabels", &t.ArItemLabels)
	cb.Do("Unk_853db38", &t.Unk_853db38)
}

type AIStateDebugSetAllEntryStatesMessage struct {
	THeader  RequiredMessageHeader
	AnnActor DT_ACD_NETWORK_NAME
	BEnabled DT_INT
}

func (t *AIStateDebugSetAllEntryStatesMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.AnnActor, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.BEnabled, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+28, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *AIStateDebugSetAllEntryStatesMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("AnnActor", &t.AnnActor)
	cb.Do("BEnabled", &t.BEnabled)
}

type ConstraintParameters struct {
	DwHash                DT_UINT
	DwHashPadding         DT_UINT
	DwFlags               DT_UINT
	EType                 DT_ENUM
	NBone1                DT_INT
	NBone2                DT_INT
	LocalFrame1           PRTransform
	LocalFrame2           PRTransform
	FlRevoluteAngleLow    DT_FLOAT
	FlRevoluteAngleHigh   DT_FLOAT
	FlRagdollConeAngle    DT_FLOAT
	FlRagdollTwistLow     DT_FLOAT
	FlRagdollTwistHigh    DT_FLOAT
	Unk_9d701d6           DT_INT
	FlFriction            DT_FLOAT
	FlCompliance          DT_FLOAT
	FlAngularFrequencyHz  DT_FLOAT
	FlAngularDampingRatio DT_FLOAT
	FlLinearFrequencyHz   DT_FLOAT
	FlLinearDampingRatio  DT_FLOAT
	Unk_66d7e12           DT_INT
	FlDuration            DT_FLOAT
	Unk_cfbfec2           DT_FLOAT
	FlStrengthRange       DT_RANGE[*DT_FLOAT]
	FIgnoreGravity        DT_INT
	QTwistAxis            bcQuat
	SnoParticleSystemSno  DT_SNO
	Unk_5cad7b9           DT_FLOAT
}

func (t *ConstraintParameters) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.DwHash, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.DwHashPadding, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.EType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.NBone1, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.NBone2, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.LocalFrame1, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.LocalFrame2, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.FlRevoluteAngleLow, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.FlRevoluteAngleHigh, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.FlRagdollConeAngle, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.FlRagdollTwistLow, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.FlRagdollTwistHigh, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+100, &t.Unk_9d701d6, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+104, &t.FlFriction, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+108, &t.FlCompliance, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.FlAngularFrequencyHz, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+116, &t.FlAngularDampingRatio, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.FlLinearFrequencyHz, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+124, &t.FlLinearDampingRatio, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.Unk_66d7e12, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+132, &t.FlDuration, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+136, &t.Unk_cfbfec2, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+140, &t.FlStrengthRange, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+148, &t.FIgnoreGravity, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+152, &t.QTwistAxis, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+168, &t.SnoParticleSystemSno, r, &Options{
		Flags: 1,
		Group: 27,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+172, &t.Unk_5cad7b9, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+176, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ConstraintParameters) Walk(cb WalkCallback) {
	cb.Do("DwHash", &t.DwHash)
	cb.Do("DwHashPadding", &t.DwHashPadding)
	cb.Do("DwFlags", &t.DwFlags)
	cb.Do("EType", &t.EType)
	cb.Do("NBone1", &t.NBone1)
	cb.Do("NBone2", &t.NBone2)
	cb.Do("LocalFrame1", &t.LocalFrame1)
	cb.Do("LocalFrame2", &t.LocalFrame2)
	cb.Do("FlRevoluteAngleLow", &t.FlRevoluteAngleLow)
	cb.Do("FlRevoluteAngleHigh", &t.FlRevoluteAngleHigh)
	cb.Do("FlRagdollConeAngle", &t.FlRagdollConeAngle)
	cb.Do("FlRagdollTwistLow", &t.FlRagdollTwistLow)
	cb.Do("FlRagdollTwistHigh", &t.FlRagdollTwistHigh)
	cb.Do("Unk_9d701d6", &t.Unk_9d701d6)
	cb.Do("FlFriction", &t.FlFriction)
	cb.Do("FlCompliance", &t.FlCompliance)
	cb.Do("FlAngularFrequencyHz", &t.FlAngularFrequencyHz)
	cb.Do("FlAngularDampingRatio", &t.FlAngularDampingRatio)
	cb.Do("FlLinearFrequencyHz", &t.FlLinearFrequencyHz)
	cb.Do("FlLinearDampingRatio", &t.FlLinearDampingRatio)
	cb.Do("Unk_66d7e12", &t.Unk_66d7e12)
	cb.Do("FlDuration", &t.FlDuration)
	cb.Do("Unk_cfbfec2", &t.Unk_cfbfec2)
	cb.Do("FlStrengthRange", &t.FlStrengthRange)
	cb.Do("FIgnoreGravity", &t.FIgnoreGravity)
	cb.Do("QTwistAxis", &t.QTwistAxis)
	cb.Do("SnoParticleSystemSno", &t.SnoParticleSystemSno)
	cb.Do("Unk_5cad7b9", &t.Unk_5cad7b9)
}

type WorldSyncedDataMessage struct {
	THeader     RequiredMessageHeader
	IdSWorld    DT_SHARED_SERVER_DATA_ID
	TSyncedData WorldSyncedData
}

func (t *WorldSyncedDataMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.IdSWorld, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.TSyncedData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+1596, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *WorldSyncedDataMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("IdSWorld", &t.IdSWorld)
	cb.Do("TSyncedData", &t.TSyncedData)
}

type ScriptEventParamTrackedReward struct {
	// Inherits ScriptEventParamBase
	// Inherits PolymorphicBase
	DwType           DT_UINT
	EParamType       DT_ENUM
	DwPad            DT_UINT
	SnoTrackedReward DT_SNO
}

func (t *ScriptEventParamTrackedReward) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.EParamType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SnoTrackedReward, r, &Options{
		Flags: 1,
		Group: 126,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ScriptEventParamTrackedReward) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("EParamType", &t.EParamType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("SnoTrackedReward", &t.SnoTrackedReward)
}

type Type_e48435d5 struct {
	// Inherits Subcondition
	// Inherits PolymorphicBase
	DwType      DT_UINT
	BNegate     DT_INT
	DwPad       DT_UINT
	Unk_d10605a DT_GBID
	Unk_c7b2b18 DT_ENUM
}

func (t *Type_e48435d5) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BNegate, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_d10605a, r, &Options{
		Flags: 1,
		Group: 66,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.Unk_c7b2b18, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_e48435d5) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("BNegate", &t.BNegate)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("Unk_d10605a", &t.Unk_d10605a)
	cb.Do("Unk_c7b2b18", &t.Unk_c7b2b18)
}

type DRLGWorldDebugInfoMessage struct {
	THeader        RequiredMessageHeader
	IdSWorld       DT_SHARED_SERVER_DATA_ID
	TDRLGDebugInfo DRLGWorldDebugInfo
}

func (t *DRLGWorldDebugInfoMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.IdSWorld, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.TDRLGDebugInfo, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16456, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *DRLGWorldDebugInfoMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("IdSWorld", &t.IdSWorld)
	cb.Do("TDRLGDebugInfo", &t.TDRLGDebugInfo)
}

type WallDefinition struct {
	TInstanceData WallInstanceData
}

func (t *WallDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.TInstanceData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+160, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *WallDefinition) Walk(cb WalkCallback) {
	cb.Do("TInstanceData", &t.TInstanceData)
}

type BountyIcons struct {
	HIconNormal       DT_UINT
	HIconDisabled     DT_UINT
	HNotificationIcon DT_UINT
}

func (t *BountyIcons) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.HIconNormal, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.HIconDisabled, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.HNotificationIcon, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+12, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *BountyIcons) Walk(cb WalkCallback) {
	cb.Do("HIconNormal", &t.HIconNormal)
	cb.Do("HIconDisabled", &t.HIconDisabled)
	cb.Do("HNotificationIcon", &t.HNotificationIcon)
}

type Type_e4c1af3e struct {
	// Inherits GameBalanceTable
	// Inherits PolymorphicBase
	DwType   DT_UINT
	DwPad    DT_UINT
	TEntries DT_VARIABLEARRAY[*Type_e1bdd3f7]
}

func (t *Type_e4c1af3e) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TEntries, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_e4c1af3e) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("TEntries", &t.TEntries)
}

type StringTableEntry struct {
	SzLabel DT_CSTRING[*DT_BYTE]
	SzText  DT_CSTRING[*DT_BYTE]
	HLabel  DT_UINT
}

func (t *StringTableEntry) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SzLabel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SzText, r, &Options{Flags: 1048577}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.HLabel, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+40, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *StringTableEntry) Walk(cb WalkCallback) {
	cb.Do("SzLabel", &t.SzLabel)
	cb.Do("SzText", &t.SzText)
	cb.Do("HLabel", &t.HLabel)
}

type PlayerQuestHistoryEntry struct {
	SnoQuest DT_SNO
	NStepUID DT_INT
}

func (t *PlayerQuestHistoryEntry) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoQuest, r, &Options{
		Flags: 1,
		Group: 31,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.NStepUID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PlayerQuestHistoryEntry) Walk(cb WalkCallback) {
	cb.Do("SnoQuest", &t.SnoQuest)
	cb.Do("NStepUID", &t.NStepUID)
}

type SpeedTree8RippleGroup struct {
	AfBend                DT_FIXEDARRAY[*DT_FLOAT]
	AfTurbulenceFrequency DT_FIXEDARRAY[*DT_FLOAT]
	AfTurbulence          DT_FIXEDARRAY[*DT_FLOAT]
	Unk_5c74a81           DT_FLOAT
}

func (t *SpeedTree8RippleGroup) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.AfBend, r, &Options{
		ArrayLength: 20,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.AfTurbulenceFrequency, r, &Options{
		ArrayLength: 20,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+160, &t.AfTurbulence, r, &Options{
		ArrayLength: 20,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+240, &t.Unk_5c74a81, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+244, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *SpeedTree8RippleGroup) Walk(cb WalkCallback) {
	cb.Do("AfBend", &t.AfBend)
	cb.Do("AfTurbulenceFrequency", &t.AfTurbulenceFrequency)
	cb.Do("AfTurbulence", &t.AfTurbulence)
	cb.Do("Unk_5c74a81", &t.Unk_5c74a81)
}

type MailSentResponseMessage struct {
	THeader RequiredMessageHeader
	IdMail  Type_f5ac91bb
	IdErr   DT_INT
}

func (t *MailSentResponseMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.IdMail, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.IdErr, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+40, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *MailSentResponseMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("IdMail", &t.IdMail)
	cb.Do("IdErr", &t.IdErr)
}

type CustomizationData struct {
	SnoFace         DT_SNO
	SnoHairColor    DT_SNO
	SnoHairStyle    DT_SNO
	SnoFacialHair   DT_SNO
	SnoJewelry      DT_SNO
	SnoEyeColor     DT_SNO
	NSkinColorIndex DT_INT
	SnoMakeup       DT_SNO
	SnoMarkingShape DT_SNO
	SnoMarkingColor DT_SNO
}

func (t *CustomizationData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoFace, r, &Options{
		Flags: 1,
		Group: 140,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.SnoHairColor, r, &Options{
		Flags: 1,
		Group: 134,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.SnoHairStyle, r, &Options{
		Flags: 1,
		Group: 138,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.SnoFacialHair, r, &Options{
		Flags: 1,
		Group: 139,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoJewelry, r, &Options{
		Flags: 1,
		Group: 119,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.SnoEyeColor, r, &Options{
		Flags: 1,
		Group: 131,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.NSkinColorIndex, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.SnoMakeup, r, &Options{
		Flags: 1,
		Group: 132,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.SnoMarkingShape, r, &Options{
		Flags: 1,
		Group: 115,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.SnoMarkingColor, r, &Options{
		Flags: 1,
		Group: 133,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+40, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *CustomizationData) Walk(cb WalkCallback) {
	cb.Do("SnoFace", &t.SnoFace)
	cb.Do("SnoHairColor", &t.SnoHairColor)
	cb.Do("SnoHairStyle", &t.SnoHairStyle)
	cb.Do("SnoFacialHair", &t.SnoFacialHair)
	cb.Do("SnoJewelry", &t.SnoJewelry)
	cb.Do("SnoEyeColor", &t.SnoEyeColor)
	cb.Do("NSkinColorIndex", &t.NSkinColorIndex)
	cb.Do("SnoMakeup", &t.SnoMakeup)
	cb.Do("SnoMarkingShape", &t.SnoMarkingShape)
	cb.Do("SnoMarkingColor", &t.SnoMarkingColor)
}

type dmFloat4Mirror struct {
	X DT_FLOAT
	Y DT_FLOAT
	Z DT_FLOAT
	W DT_FLOAT
}

func (t *dmFloat4Mirror) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.X, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.Y, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.Z, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.W, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *dmFloat4Mirror) Walk(cb WalkCallback) {
	cb.Do("X", &t.X)
	cb.Do("Y", &t.Y)
	cb.Do("Z", &t.Z)
	cb.Do("W", &t.W)
}

type BountyZones struct {
	EZone        DT_ENUM
	SnoCondition DT_SNO
	ArBounties   DT_VARIABLEARRAY[*BountyData]
}

func (t *BountyZones) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.EZone, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.SnoCondition, r, &Options{
		Flags: 1,
		Group: 51,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.ArBounties, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *BountyZones) Walk(cb WalkCallback) {
	cb.Do("EZone", &t.EZone)
	cb.Do("SnoCondition", &t.SnoCondition)
	cb.Do("ArBounties", &t.ArBounties)
}

type SurfaceDefinition struct {
	SnoSplashParticle                DT_SNO
	SnoFootstepEffectLeft            DT_SNO
	SnoFootstepEffectRight           DT_SNO
	SnoMonsterFootstepEffect         DT_SNO
	SnoMonsterFootstepWalkEffect     DT_SNO
	SnoResidualFootstepParticleLeft  DT_SNO
	SnoResidualFootstepParticleRight DT_SNO
	SnoFootstepDragEffect            DT_SNO
	SnoFootstepTrailEffect           DT_SNO
	SnoFootstepLiftEffect            DT_SNO
	SnoOverrideWhenWet               DT_SNO
	Unk_4b222fd                      DT_SNO
	FLiquid                          DT_INT
	FGrass                           DT_INT
}

func (t *SurfaceDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.SnoSplashParticle, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.SnoFootstepEffectLeft, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoFootstepEffectRight, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.SnoMonsterFootstepEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SnoMonsterFootstepWalkEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.SnoResidualFootstepParticleLeft, r, &Options{
		Flags: 1,
		Group: 27,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.SnoResidualFootstepParticleRight, r, &Options{
		Flags: 1,
		Group: 27,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.SnoFootstepDragEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.SnoFootstepTrailEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.SnoFootstepLiftEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.SnoOverrideWhenWet, r, &Options{
		Flags: 1,
		Group: 43,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.Unk_4b222fd, r, &Options{
		Flags: 1,
		Group: 43,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.FLiquid, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+60, &t.FGrass, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+64, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *SurfaceDefinition) Walk(cb WalkCallback) {
	cb.Do("SnoSplashParticle", &t.SnoSplashParticle)
	cb.Do("SnoFootstepEffectLeft", &t.SnoFootstepEffectLeft)
	cb.Do("SnoFootstepEffectRight", &t.SnoFootstepEffectRight)
	cb.Do("SnoMonsterFootstepEffect", &t.SnoMonsterFootstepEffect)
	cb.Do("SnoMonsterFootstepWalkEffect", &t.SnoMonsterFootstepWalkEffect)
	cb.Do("SnoResidualFootstepParticleLeft", &t.SnoResidualFootstepParticleLeft)
	cb.Do("SnoResidualFootstepParticleRight", &t.SnoResidualFootstepParticleRight)
	cb.Do("SnoFootstepDragEffect", &t.SnoFootstepDragEffect)
	cb.Do("SnoFootstepTrailEffect", &t.SnoFootstepTrailEffect)
	cb.Do("SnoFootstepLiftEffect", &t.SnoFootstepLiftEffect)
	cb.Do("SnoOverrideWhenWet", &t.SnoOverrideWhenWet)
	cb.Do("Unk_4b222fd", &t.Unk_4b222fd)
	cb.Do("FLiquid", &t.FLiquid)
	cb.Do("FGrass", &t.FGrass)
}

type UIActorTagStyle struct {
	// Inherits UIButtonStyle
	// Inherits UITextStyle
	// Inherits UIWindowStyle
	// Inherits UIControlStyle
	// Inherits PolymorphicBase
	DwType                    DT_UINT
	DwPad                     DT_UINT
	HParentStyle              UIControlHandle
	Unk_441f783               DT_INT64
	M_eHasModifiedPowerTagMap DT_TAGMAP[*DT_ENUM]
	TConsoleInput             UIControlConsoleInput
	Unk_b4f614c               DT_TAGMAP[*DT_ENUM]
	TFont                     UIControlFont
	Unk_4741819               DT_TAGMAP[*DT_ENUM]
	TIcon                     UIControlIcon
	TClickSounds              UIControlClickSounds
	Unk_10f81f0               DT_TAGMAP[*DT_ENUM]
}

func (t *UIActorTagStyle) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.HParentStyle, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_441f783, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.M_eHasModifiedPowerTagMap, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.TConsoleInput, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.Unk_b4f614c, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.TFont, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.Unk_4741819, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.TIcon, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.TClickSounds, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+144, &t.Unk_10f81f0, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+160, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *UIActorTagStyle) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("HParentStyle", &t.HParentStyle)
	cb.Do("Unk_441f783", &t.Unk_441f783)
	cb.Do("M_eHasModifiedPowerTagMap", &t.M_eHasModifiedPowerTagMap)
	cb.Do("TConsoleInput", &t.TConsoleInput)
	cb.Do("Unk_b4f614c", &t.Unk_b4f614c)
	cb.Do("TFont", &t.TFont)
	cb.Do("Unk_4741819", &t.Unk_4741819)
	cb.Do("TIcon", &t.TIcon)
	cb.Do("TClickSounds", &t.TClickSounds)
	cb.Do("Unk_10f81f0", &t.Unk_10f81f0)
}

type DynamicGameParameter struct {
	TName   WwiseName
	TRadius DT_RANGE[*DT_FLOAT]
	BInvert DT_INT
}

func (t *DynamicGameParameter) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.TName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.TRadius, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.BInvert, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *DynamicGameParameter) Walk(cb WalkCallback) {
	cb.Do("TName", &t.TName)
	cb.Do("TRadius", &t.TRadius)
	cb.Do("BInvert", &t.BInvert)
}

type SpawnerGizmoInstanceData struct {
	ESpawnTriggerType               DT_ENUM
	PtProxData                      DT_POLYMORPHIC_VARIABLEARRAY[*ProximityDataBase]
	SnoPowerSummoned                DT_SNO
	SnoEffectGroupSummoned          DT_SNO
	SnoSpawnEffectGroup             DT_SNO
	SnoSpawnEffectGroupActorToActor DT_SNO
	ESpawnMonsterRarity             DT_ENUM
	Unk_543b637                     DT_UINT
	SnoTreasureClassOverride        DT_SNO
	ArActorGroups                   DT_VARIABLEARRAY[*DT_GBID]
	ArPrefabScopedActorGroups       DT_VARIABLEARRAY[*DT_GBID]
	Unk_32f4537                     DT_VARIABLEARRAY[*Type_c8fd413e]
	Unk_5ba0830                     DT_INT
	Unk_6232e63                     DT_RANGE[*DT_FLOAT]
	TSpawnTimeRange                 DT_RANGE[*DT_FLOAT]
	TSpawnQuantityRange             DT_RANGE[*DT_INT]
	FlSpawnStayOpenTime             DT_FLOAT
	FlDelayBeforeDeath              DT_FLOAT
	FSpawnTimeIsADelay              DT_INT
	NSpawnMaxCount                  DT_INT
	NSpawnMaxGenerated              DT_INT
	SnoSpawnCondition               DT_SNO
	Unk_b123ad6                     DT_INT
	Unk_b694fec                     DT_FLOAT
	FDontPerturb                    DT_INT
	FUseLinkedMarkersForLocation    DT_INT
	Unk_915258d                     DT_INT
	Unk_b043709                     DT_INT
	TOffsetRadius                   DT_RANGE[*DT_INT]
	EFacingType                     DT_ENUM
	FlSpecificFacing                DT_FLOAT
	Unk_c9a925d                     DT_INT
	Unk_3d07f2f                     DT_RANGE[*DT_INT]
	FSpawnedMonstersGiveLoot        DT_INT
	FSpawnedMonstersGiveXP          DT_INT
}

func (t *SpawnerGizmoInstanceData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.ESpawnTriggerType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.PtProxData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.SnoPowerSummoned, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.SnoEffectGroupSummoned, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.SnoSpawnEffectGroup, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.SnoSpawnEffectGroupActorToActor, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.ESpawnMonsterRarity, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.Unk_543b637, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.SnoTreasureClassOverride, r, &Options{
		Flags: 1,
		Group: 52,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.ArActorGroups, r, &Options{
		Flags: 1,
		Group: 24,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.ArPrefabScopedActorGroups, r, &Options{
		Flags: 1,
		Group: 51,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.Unk_32f4537, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.Unk_5ba0830, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+116, &t.Unk_6232e63, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+124, &t.TSpawnTimeRange, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+132, &t.TSpawnQuantityRange, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+140, &t.FlSpawnStayOpenTime, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+144, &t.FlDelayBeforeDeath, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+148, &t.FSpawnTimeIsADelay, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+152, &t.NSpawnMaxCount, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+156, &t.NSpawnMaxGenerated, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+160, &t.SnoSpawnCondition, r, &Options{
		Flags: 1,
		Group: 51,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+164, &t.Unk_b123ad6, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+168, &t.Unk_b694fec, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+172, &t.FDontPerturb, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+176, &t.FUseLinkedMarkersForLocation, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+180, &t.Unk_915258d, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+184, &t.Unk_b043709, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+188, &t.TOffsetRadius, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+196, &t.EFacingType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+200, &t.FlSpecificFacing, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+204, &t.Unk_c9a925d, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+208, &t.Unk_3d07f2f, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+216, &t.FSpawnedMonstersGiveLoot, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+220, &t.FSpawnedMonstersGiveXP, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+224, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *SpawnerGizmoInstanceData) Walk(cb WalkCallback) {
	cb.Do("ESpawnTriggerType", &t.ESpawnTriggerType)
	cb.Do("PtProxData", &t.PtProxData)
	cb.Do("SnoPowerSummoned", &t.SnoPowerSummoned)
	cb.Do("SnoEffectGroupSummoned", &t.SnoEffectGroupSummoned)
	cb.Do("SnoSpawnEffectGroup", &t.SnoSpawnEffectGroup)
	cb.Do("SnoSpawnEffectGroupActorToActor", &t.SnoSpawnEffectGroupActorToActor)
	cb.Do("ESpawnMonsterRarity", &t.ESpawnMonsterRarity)
	cb.Do("Unk_543b637", &t.Unk_543b637)
	cb.Do("SnoTreasureClassOverride", &t.SnoTreasureClassOverride)
	cb.Do("ArActorGroups", &t.ArActorGroups)
	cb.Do("ArPrefabScopedActorGroups", &t.ArPrefabScopedActorGroups)
	cb.Do("Unk_32f4537", &t.Unk_32f4537)
	cb.Do("Unk_5ba0830", &t.Unk_5ba0830)
	cb.Do("Unk_6232e63", &t.Unk_6232e63)
	cb.Do("TSpawnTimeRange", &t.TSpawnTimeRange)
	cb.Do("TSpawnQuantityRange", &t.TSpawnQuantityRange)
	cb.Do("FlSpawnStayOpenTime", &t.FlSpawnStayOpenTime)
	cb.Do("FlDelayBeforeDeath", &t.FlDelayBeforeDeath)
	cb.Do("FSpawnTimeIsADelay", &t.FSpawnTimeIsADelay)
	cb.Do("NSpawnMaxCount", &t.NSpawnMaxCount)
	cb.Do("NSpawnMaxGenerated", &t.NSpawnMaxGenerated)
	cb.Do("SnoSpawnCondition", &t.SnoSpawnCondition)
	cb.Do("Unk_b123ad6", &t.Unk_b123ad6)
	cb.Do("Unk_b694fec", &t.Unk_b694fec)
	cb.Do("FDontPerturb", &t.FDontPerturb)
	cb.Do("FUseLinkedMarkersForLocation", &t.FUseLinkedMarkersForLocation)
	cb.Do("Unk_915258d", &t.Unk_915258d)
	cb.Do("Unk_b043709", &t.Unk_b043709)
	cb.Do("TOffsetRadius", &t.TOffsetRadius)
	cb.Do("EFacingType", &t.EFacingType)
	cb.Do("FlSpecificFacing", &t.FlSpecificFacing)
	cb.Do("Unk_c9a925d", &t.Unk_c9a925d)
	cb.Do("Unk_3d07f2f", &t.Unk_3d07f2f)
	cb.Do("FSpawnedMonstersGiveLoot", &t.FSpawnedMonstersGiveLoot)
	cb.Do("FSpawnedMonstersGiveXP", &t.FSpawnedMonstersGiveXP)
}

type AttributeFormulaEntry struct {
	THeader  GBIDHeader
	ArRanges DT_VARIABLEARRAY[*AttributeFormulaRange]
}

func (t *AttributeFormulaEntry) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+264, &t.ArRanges, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+280, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *AttributeFormulaEntry) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("ArRanges", &t.ArRanges)
}

type QuestChestGizmoData struct {
	// Inherits ActorGizmoData
	// Inherits PolymorphicBase
	DwType                       DT_UINT
	DwPad                        DT_UINT
	FDisableNonFriendlyOperation DT_INT
	FWalkToCenter                DT_INT
	FGizmoStartsDisabled         DT_INT
	FUseStringListName           DT_INT
	FForceMinimapIcon            DT_INT
	FlOperationRadius            DT_FLOAT
	Unk_d0b1df5                  DT_FLOAT
	FlGizmoUseTime               DT_FLOAT
	SnoChannelingEffect          DT_SNO
	Unk_2767229                  DT_INT
	FGizmoShowProgressBar        DT_INT
	Unk_6d9ebe1                  DT_INT
	Unk_5456245                  DT_INT
	Unk_af5815a                  DT_INT
	SnoOnClickEffect             DT_SNO
	SnoPickedUpEffect            DT_SNO
	SnoDropOnGroundEffect        DT_SNO
	TConditionData               GizmoConditionData
	SnoPowerOperator             DT_SNO
	SnoPowerOperate              DT_SNO
	SnoPowerOperatorActive       DT_SNO
	SnoPowerOperateActive        DT_SNO
	Unk_359810e                  DT_INT
	NCooldown                    DT_UINT
	Unk_9c8478e                  DT_UINT
	Unk_d45ed2d                  DT_INT
	Unk_f6b20b7                  DT_INT
	Unk_54513b8                  DT_INT
	Unk_fd1f378                  DT_UINT
	Unk_487c14                   DT_UINT
	Unk_87f2609                  DT_UINT
	Unk_158eb4f                  DT_FLOAT
	Unk_ab58cd3                  DT_ENUM
	Unk_91a3966                  DT_UINT
	Unk_25312e5                  DT_UINT
	Unk_4be4371                  DT_INT
	Unk_ebdd077                  DT_INT
}

func (t *QuestChestGizmoData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.FDisableNonFriendlyOperation, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.FWalkToCenter, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.FGizmoStartsDisabled, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.FUseStringListName, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.FForceMinimapIcon, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.FlOperationRadius, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.Unk_d0b1df5, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.FlGizmoUseTime, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.SnoChannelingEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.Unk_2767229, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.FGizmoShowProgressBar, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+60, &t.Unk_6d9ebe1, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.Unk_5456245, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.Unk_af5815a, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.SnoOnClickEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.SnoPickedUpEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.SnoDropOnGroundEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.TConditionData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.SnoPowerOperator, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.SnoPowerOperate, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.SnoPowerOperatorActive, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+100, &t.SnoPowerOperateActive, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+104, &t.Unk_359810e, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+108, &t.NCooldown, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.Unk_9c8478e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+116, &t.Unk_d45ed2d, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.Unk_f6b20b7, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+124, &t.Unk_54513b8, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.Unk_fd1f378, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+132, &t.Unk_487c14, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+136, &t.Unk_87f2609, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+140, &t.Unk_158eb4f, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+144, &t.Unk_ab58cd3, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+148, &t.Unk_91a3966, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+152, &t.Unk_25312e5, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+156, &t.Unk_4be4371, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+160, &t.Unk_ebdd077, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+168, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *QuestChestGizmoData) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("FDisableNonFriendlyOperation", &t.FDisableNonFriendlyOperation)
	cb.Do("FWalkToCenter", &t.FWalkToCenter)
	cb.Do("FGizmoStartsDisabled", &t.FGizmoStartsDisabled)
	cb.Do("FUseStringListName", &t.FUseStringListName)
	cb.Do("FForceMinimapIcon", &t.FForceMinimapIcon)
	cb.Do("FlOperationRadius", &t.FlOperationRadius)
	cb.Do("Unk_d0b1df5", &t.Unk_d0b1df5)
	cb.Do("FlGizmoUseTime", &t.FlGizmoUseTime)
	cb.Do("SnoChannelingEffect", &t.SnoChannelingEffect)
	cb.Do("Unk_2767229", &t.Unk_2767229)
	cb.Do("FGizmoShowProgressBar", &t.FGizmoShowProgressBar)
	cb.Do("Unk_6d9ebe1", &t.Unk_6d9ebe1)
	cb.Do("Unk_5456245", &t.Unk_5456245)
	cb.Do("Unk_af5815a", &t.Unk_af5815a)
	cb.Do("SnoOnClickEffect", &t.SnoOnClickEffect)
	cb.Do("SnoPickedUpEffect", &t.SnoPickedUpEffect)
	cb.Do("SnoDropOnGroundEffect", &t.SnoDropOnGroundEffect)
	cb.Do("TConditionData", &t.TConditionData)
	cb.Do("SnoPowerOperator", &t.SnoPowerOperator)
	cb.Do("SnoPowerOperate", &t.SnoPowerOperate)
	cb.Do("SnoPowerOperatorActive", &t.SnoPowerOperatorActive)
	cb.Do("SnoPowerOperateActive", &t.SnoPowerOperateActive)
	cb.Do("Unk_359810e", &t.Unk_359810e)
	cb.Do("NCooldown", &t.NCooldown)
	cb.Do("Unk_9c8478e", &t.Unk_9c8478e)
	cb.Do("Unk_d45ed2d", &t.Unk_d45ed2d)
	cb.Do("Unk_f6b20b7", &t.Unk_f6b20b7)
	cb.Do("Unk_54513b8", &t.Unk_54513b8)
	cb.Do("Unk_fd1f378", &t.Unk_fd1f378)
	cb.Do("Unk_487c14", &t.Unk_487c14)
	cb.Do("Unk_87f2609", &t.Unk_87f2609)
	cb.Do("Unk_158eb4f", &t.Unk_158eb4f)
	cb.Do("Unk_ab58cd3", &t.Unk_ab58cd3)
	cb.Do("Unk_91a3966", &t.Unk_91a3966)
	cb.Do("Unk_25312e5", &t.Unk_25312e5)
	cb.Do("Unk_4be4371", &t.Unk_4be4371)
	cb.Do("Unk_ebdd077", &t.Unk_ebdd077)
}

type CollisionHeightField struct {
	Transform            PRTransform
	FWater               DT_INT
	FLandscape           DT_INT
	Unk_81eccce          dmHeightDataMirror
	Unk_4e7e318          DT_VARIABLEARRAY[*dmHeightSampleMirror]
	PtWaterFlowDirection DT_VARIABLEARRAY[*DT_VECTOR2D]
}

func (t *CollisionHeightField) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Transform, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.FWater, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.FLandscape, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.Unk_81eccce, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_4e7e318, r, &Options{Flags: 2097153}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.PtWaterFlowDirection, r, &Options{Flags: 2097153}); err != nil {
		return err
	}
	if _, err := r.Seek(p+104, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *CollisionHeightField) Walk(cb WalkCallback) {
	cb.Do("Transform", &t.Transform)
	cb.Do("FWater", &t.FWater)
	cb.Do("FLandscape", &t.FLandscape)
	cb.Do("Unk_81eccce", &t.Unk_81eccce)
	cb.Do("Unk_4e7e318", &t.Unk_4e7e318)
	cb.Do("PtWaterFlowDirection", &t.PtWaterFlowDirection)
}

type TexAnimTranslation struct {
	// Inherits TexAnim
	// Inherits PolymorphicBase
	DwType               DT_UINT
	DwPad                DT_UINT
	FlUScale             DT_FLOAT
	FlVScale             DT_FLOAT
	FlUTransInitial      DT_FLOAT
	Unk_803e8a7          DT_RANGE[*DT_FLOAT]
	FlVTransInitial      DT_FLOAT
	Unk_42b1708          DT_RANGE[*DT_FLOAT]
	EPinTranslation      DT_ENUM
	EOrderOperation      DT_ENUM
	Unk_96b1a52          DT_UINT
	Unk_ec7cf93          DT_UINT
	DwAnimFlags          DT_UINT
	Unk_e5b0c7f          DT_RANGE[*DT_FLOAT]
	FXOffset             DT_FLOAT
	FYOffset             DT_FLOAT
	ARotationInitial     DT_FLOAT
	DwRotationRandomSeed DT_UINT
}

func (t *TexAnimTranslation) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.FlUScale, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.FlVScale, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.FlUTransInitial, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.Unk_803e8a7, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.FlVTransInitial, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.Unk_42b1708, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.EPinTranslation, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.EOrderOperation, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.Unk_96b1a52, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+60, &t.Unk_ec7cf93, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.DwAnimFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.Unk_e5b0c7f, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.FXOffset, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.FYOffset, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.ARotationInitial, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.DwRotationRandomSeed, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+96, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TexAnimTranslation) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("FlUScale", &t.FlUScale)
	cb.Do("FlVScale", &t.FlVScale)
	cb.Do("FlUTransInitial", &t.FlUTransInitial)
	cb.Do("Unk_803e8a7", &t.Unk_803e8a7)
	cb.Do("FlVTransInitial", &t.FlVTransInitial)
	cb.Do("Unk_42b1708", &t.Unk_42b1708)
	cb.Do("EPinTranslation", &t.EPinTranslation)
	cb.Do("EOrderOperation", &t.EOrderOperation)
	cb.Do("Unk_96b1a52", &t.Unk_96b1a52)
	cb.Do("Unk_ec7cf93", &t.Unk_ec7cf93)
	cb.Do("DwAnimFlags", &t.DwAnimFlags)
	cb.Do("Unk_e5b0c7f", &t.Unk_e5b0c7f)
	cb.Do("FXOffset", &t.FXOffset)
	cb.Do("FYOffset", &t.FYOffset)
	cb.Do("ARotationInitial", &t.ARotationInitial)
	cb.Do("DwRotationRandomSeed", &t.DwRotationRandomSeed)
}

type Type_e6b22340 struct {
	ArPieces          DT_VARIABLEARRAY[*WallPiece]
	EPieceSelectMode  DT_ENUM
	Unk_755f012       DT_RANGE[*DT_FLOAT]
	THorizontalOffset DT_RANGE[*DT_FLOAT]
	TScale            DT_RANGE[*DT_FLOAT]
	TYaw              DT_RANGE[*DT_FLOAT]
	Unk_609e23d       DT_INT
	Unk_d8fcfe4       DT_INT
	Unk_435bdfd       DT_INT
	Unk_f2dbd17       DT_INT
	TVerticalOffset   DT_RANGE[*DT_FLOAT]
	Unk_2a8c4b6       DT_FLOAT
}

func (t *Type_e6b22340) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.ArPieces, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.EPieceSelectMode, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.Unk_755f012, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.THorizontalOffset, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.TScale, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.TYaw, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.Unk_609e23d, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.Unk_d8fcfe4, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+60, &t.Unk_435bdfd, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.Unk_f2dbd17, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.TVerticalOffset, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.Unk_2a8c4b6, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+80, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_e6b22340) Walk(cb WalkCallback) {
	cb.Do("ArPieces", &t.ArPieces)
	cb.Do("EPieceSelectMode", &t.EPieceSelectMode)
	cb.Do("Unk_755f012", &t.Unk_755f012)
	cb.Do("THorizontalOffset", &t.THorizontalOffset)
	cb.Do("TScale", &t.TScale)
	cb.Do("TYaw", &t.TYaw)
	cb.Do("Unk_609e23d", &t.Unk_609e23d)
	cb.Do("Unk_d8fcfe4", &t.Unk_d8fcfe4)
	cb.Do("Unk_435bdfd", &t.Unk_435bdfd)
	cb.Do("Unk_f2dbd17", &t.Unk_f2dbd17)
	cb.Do("TVerticalOffset", &t.TVerticalOffset)
	cb.Do("Unk_2a8c4b6", &t.Unk_2a8c4b6)
}

type MarkerFolder struct {
	Unk_c5f0201   DT_INT
	NID           DT_INT
	EType         DT_ENUM
	SnoPrefab     DT_SNO
	Unk_5393220   DT_INT
	SzName        DT_CSTRING[*DT_BYTE]
	Unk_c7bd9ba   DT_INT
	Unk_5310d2c   DT_INT
	FIsSpawned    DT_INT
	Unk_cd2d0c6   DT_INT
	FIsCustomized DT_INT
}

func (t *MarkerFolder) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Unk_c5f0201, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.NID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.EType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.SnoPrefab, r, &Options{
		Flags: 1,
		Group: 24,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_5393220, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SzName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.Unk_c7bd9ba, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.Unk_5310d2c, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.FIsSpawned, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.Unk_cd2d0c6, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.FIsCustomized, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+64, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *MarkerFolder) Walk(cb WalkCallback) {
	cb.Do("Unk_c5f0201", &t.Unk_c5f0201)
	cb.Do("NID", &t.NID)
	cb.Do("EType", &t.EType)
	cb.Do("SnoPrefab", &t.SnoPrefab)
	cb.Do("Unk_5393220", &t.Unk_5393220)
	cb.Do("SzName", &t.SzName)
	cb.Do("Unk_c7bd9ba", &t.Unk_c7bd9ba)
	cb.Do("Unk_5310d2c", &t.Unk_5310d2c)
	cb.Do("FIsSpawned", &t.FIsSpawned)
	cb.Do("Unk_cd2d0c6", &t.Unk_cd2d0c6)
	cb.Do("FIsCustomized", &t.FIsCustomized)
}

type PowerFormulaTableEntry_Table struct {
	// Inherits GameBalanceTable
	// Inherits PolymorphicBase
	DwType   DT_UINT
	DwPad    DT_UINT
	TEntries DT_VARIABLEARRAY[*PowerFormulaTableEntry]
}

func (t *PowerFormulaTableEntry_Table) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TEntries, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PowerFormulaTableEntry_Table) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("TEntries", &t.TEntries)
}

type DesignerVariable struct {
	THeader         GBIDHeader
	EScope          DT_ENUM
	EType           DT_ENUM
	NDefaultValue   DT_INT
	NDefaultString  DT_UINT
	EGameReset      DT_ENUM
	EPlayerReset    DT_ENUM
	NResetDuration  DT_INT
	NResetInterval  DT_INT
	SnoResetSubzone DT_SNO
	SnoResetQuest   DT_SNO
	ArUsedStrings   DT_VARIABLEARRAY[*DT_UINT]
}

func (t *DesignerVariable) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+260, &t.EScope, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+264, &t.EType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+268, &t.NDefaultValue, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+272, &t.NDefaultString, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+276, &t.EGameReset, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+280, &t.EPlayerReset, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+284, &t.NResetDuration, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+288, &t.NResetInterval, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+292, &t.SnoResetSubzone, r, &Options{
		Flags: 1,
		Group: 80,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+296, &t.SnoResetQuest, r, &Options{
		Flags: 1,
		Group: 31,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+304, &t.ArUsedStrings, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+320, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *DesignerVariable) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("EScope", &t.EScope)
	cb.Do("EType", &t.EType)
	cb.Do("NDefaultValue", &t.NDefaultValue)
	cb.Do("NDefaultString", &t.NDefaultString)
	cb.Do("EGameReset", &t.EGameReset)
	cb.Do("EPlayerReset", &t.EPlayerReset)
	cb.Do("NResetDuration", &t.NResetDuration)
	cb.Do("NResetInterval", &t.NResetInterval)
	cb.Do("SnoResetSubzone", &t.SnoResetSubzone)
	cb.Do("SnoResetQuest", &t.SnoResetQuest)
	cb.Do("ArUsedStrings", &t.ArUsedStrings)
}

type AttributeFormulaRange struct {
	NItemPowerRangeStart DT_INT
	TValueRange          DT_RANGE[*DT_FLOAT]
	TFormula             DT_STRING_FORMULA
}

func (t *AttributeFormulaRange) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.NItemPowerRangeStart, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.TValueRange, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TFormula, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *AttributeFormulaRange) Walk(cb WalkCallback) {
	cb.Do("NItemPowerRangeStart", &t.NItemPowerRangeStart)
	cb.Do("TValueRange", &t.TValueRange)
	cb.Do("TFormula", &t.TFormula)
}

type Type_e730cffb struct {
	Unk_2f97460 DT_RANGE[*DT_INT]
	Unk_90a5a75 DT_FLOAT
	Unk_1ad4878 DT_SNO
	Unk_b0e2c7  DT_RANGE[*DT_INT]
	Unk_49f6f23 DT_INT
}

func (t *Type_e730cffb) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Unk_2f97460, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.Unk_90a5a75, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.Unk_1ad4878, r, &Options{
		Flags: 1,
		Group: 84,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_b0e2c7, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_49f6f23, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+28, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_e730cffb) Walk(cb WalkCallback) {
	cb.Do("Unk_2f97460", &t.Unk_2f97460)
	cb.Do("Unk_90a5a75", &t.Unk_90a5a75)
	cb.Do("Unk_1ad4878", &t.Unk_1ad4878)
	cb.Do("Unk_b0e2c7", &t.Unk_b0e2c7)
	cb.Do("Unk_49f6f23", &t.Unk_49f6f23)
}

type dmInputTriangleMirror struct {
	I1            DT_INT
	I2            DT_INT
	I3            DT_INT
	DwMaterialId  DT_WORD
	DwGameFlags   DT_WORD
	DwIncludeMask DT_WORD
}

func (t *dmInputTriangleMirror) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.I1, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.I2, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.I3, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwMaterialId, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+14, &t.DwGameFlags, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.DwIncludeMask, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+20, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *dmInputTriangleMirror) Walk(cb WalkCallback) {
	cb.Do("I1", &t.I1)
	cb.Do("I2", &t.I2)
	cb.Do("I3", &t.I3)
	cb.Do("DwMaterialId", &t.DwMaterialId)
	cb.Do("DwGameFlags", &t.DwGameFlags)
	cb.Do("DwIncludeMask", &t.DwIncludeMask)
}

type PowerConditionIsActorBerserk struct {
	// Inherits PowerConditionBase
	// Inherits PolymorphicBase
	DwType   DT_UINT
	BInverse DT_INT
	DwPad    DT_UINT
	ESubject DT_ENUM
}

func (t *PowerConditionIsActorBerserk) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BInverse, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ESubject, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PowerConditionIsActorBerserk) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("BInverse", &t.BInverse)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("ESubject", &t.ESubject)
}

type BoneKeyInfo struct {
	Unk_b3f7acb DT_INT
	Unk_b22ae3c DT_INT
	TTangents   AnimTangent
}

func (t *BoneKeyInfo) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Unk_b3f7acb, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.Unk_b22ae3c, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.TTangents, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+56, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *BoneKeyInfo) Walk(cb WalkCallback) {
	cb.Do("Unk_b3f7acb", &t.Unk_b3f7acb)
	cb.Do("Unk_b22ae3c", &t.Unk_b22ae3c)
	cb.Do("TTangents", &t.TTangents)
}

type CampaignChain struct {
	DwID          DT_UINT
	SnoQuestChain DT_SNO
}

func (t *CampaignChain) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.DwID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.SnoQuestChain, r, &Options{
		Flags: 1,
		Group: 96,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *CampaignChain) Walk(cb WalkCallback) {
	cb.Do("DwID", &t.DwID)
	cb.Do("SnoQuestChain", &t.SnoQuestChain)
}

type GameTestingSkillSamplingStartMessage struct {
	THeader     RequiredMessageHeader
	Unk_e99ade5 DT_CHARARRAY
	SzPowerName DT_CHARARRAY
	SnoClass    DT_SNO
}

func (t *GameTestingSkillSamplingStartMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_e99ade5, r, &Options{
		ArrayLength: 64,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.SzPowerName, r, &Options{
		ArrayLength: 64,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+144, &t.SnoClass, r, &Options{
		Flags: 1,
		Group: 74,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+148, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *GameTestingSkillSamplingStartMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("Unk_e99ade5", &t.Unk_e99ade5)
	cb.Do("SzPowerName", &t.SzPowerName)
	cb.Do("SnoClass", &t.SnoClass)
}

type OnDismountCallback struct {
	// Inherits BuffCallbackBase
	// Inherits PolymorphicBase
	DwType                DT_UINT
	DwPad                 DT_UINT
	SnoTriggerEffectGroup DT_SNO
	ArConditions          DT_POLYMORPHIC_VARIABLEARRAY[*DT_INT64]
}

func (t *OnDismountCallback) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoTriggerEffectGroup, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ArConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *OnDismountCallback) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("SnoTriggerEffectGroup", &t.SnoTriggerEffectGroup)
	cb.Do("ArConditions", &t.ArConditions)
}

type TriggerEventCameraFollowSpline struct {
	// Inherits TriggerEventRangedDuration
	// Inherits TriggerEvent
	// Inherits PolymorphicBase
	DwType              DT_UINT
	TConditions         TriggerConditions
	FGenerated          DT_INT
	Unk_6cba752         DT_INT
	DwParentActorID     DT_UINT
	TDuration           DT_FLOAT
	DwTriggerFlags      DT_UINT
	DwTriggerFlagsEx    DT_UINT
	TCleanup            TriggerCleanup
	Unk_49e9257         DT_INT
	Unk_5490979         DT_INT
	DwPad               DT_UINT
	FlBlendTime         DT_FLOAT
	SzSplineName        DT_UINT
	Unk_30b49c2         DT_ENUM
	Unk_8781d26         DT_UINT
	Unk_9a31592         DT_UINT
	FlFirstPercent      DT_FLOAT
	FlLastPercent       DT_FLOAT
	FlFirstDistance     DT_FLOAT
	FlLastDistance      DT_FLOAT
	Unk_71c05df         DT_INT
	Unk_325b1ab         DT_INT
	EEasing             DT_ENUM
	TEasingWeight       SplineEasingWeight
	Unk_802b7b          DT_INT
	Unk_e27112b         DT_SNO
	EOrientationMode    DT_ENUM
	TransformOffset     PRTransform
	Unk_daebe18         DT_ENUM
	Unk_6101673         DT_UINT
	Unk_8470ffc         HardpointLink
	Unk_46c8459         DT_UINT
	VecTargetOffset     DT_VECTOR3D
	EMicrophoneMode     DT_ENUM
	VecMicrophoneOffset DT_VECTOR3D
	EEasingType         DT_ENUM
	EBlendEasing        DT_ENUM
	Unk_90448b          DT_ENUM
	Unk_c443c2          DT_FLOAT
	Unk_741563          DT_FLOAT
}

func (t *TriggerEventCameraFollowSpline) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.FGenerated, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_6cba752, r, &Options{Flags: 16}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.DwParentActorID, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.TDuration, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.DwTriggerFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.DwTriggerFlagsEx, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.TCleanup, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+116, &t.Unk_49e9257, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.Unk_5490979, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+124, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.FlBlendTime, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+132, &t.SzSplineName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+136, &t.Unk_30b49c2, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+140, &t.Unk_8781d26, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+144, &t.Unk_9a31592, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+148, &t.FlFirstPercent, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+152, &t.FlLastPercent, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+156, &t.FlFirstDistance, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+160, &t.FlLastDistance, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+164, &t.Unk_71c05df, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+168, &t.Unk_325b1ab, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+172, &t.EEasing, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+176, &t.TEasingWeight, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+188, &t.Unk_802b7b, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+192, &t.Unk_e27112b, r, &Options{
		Flags: 1,
		Group: 26,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+196, &t.EOrientationMode, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+200, &t.TransformOffset, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+228, &t.Unk_daebe18, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+232, &t.Unk_6101673, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+236, &t.Unk_8470ffc, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+244, &t.Unk_46c8459, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+248, &t.VecTargetOffset, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+260, &t.EMicrophoneMode, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+264, &t.VecMicrophoneOffset, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+276, &t.EEasingType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+280, &t.EBlendEasing, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+284, &t.Unk_90448b, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+288, &t.Unk_c443c2, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+292, &t.Unk_741563, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+296, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TriggerEventCameraFollowSpline) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("TConditions", &t.TConditions)
	cb.Do("FGenerated", &t.FGenerated)
	cb.Do("Unk_6cba752", &t.Unk_6cba752)
	cb.Do("DwParentActorID", &t.DwParentActorID)
	cb.Do("TDuration", &t.TDuration)
	cb.Do("DwTriggerFlags", &t.DwTriggerFlags)
	cb.Do("DwTriggerFlagsEx", &t.DwTriggerFlagsEx)
	cb.Do("TCleanup", &t.TCleanup)
	cb.Do("Unk_49e9257", &t.Unk_49e9257)
	cb.Do("Unk_5490979", &t.Unk_5490979)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("FlBlendTime", &t.FlBlendTime)
	cb.Do("SzSplineName", &t.SzSplineName)
	cb.Do("Unk_30b49c2", &t.Unk_30b49c2)
	cb.Do("Unk_8781d26", &t.Unk_8781d26)
	cb.Do("Unk_9a31592", &t.Unk_9a31592)
	cb.Do("FlFirstPercent", &t.FlFirstPercent)
	cb.Do("FlLastPercent", &t.FlLastPercent)
	cb.Do("FlFirstDistance", &t.FlFirstDistance)
	cb.Do("FlLastDistance", &t.FlLastDistance)
	cb.Do("Unk_71c05df", &t.Unk_71c05df)
	cb.Do("Unk_325b1ab", &t.Unk_325b1ab)
	cb.Do("EEasing", &t.EEasing)
	cb.Do("TEasingWeight", &t.TEasingWeight)
	cb.Do("Unk_802b7b", &t.Unk_802b7b)
	cb.Do("Unk_e27112b", &t.Unk_e27112b)
	cb.Do("EOrientationMode", &t.EOrientationMode)
	cb.Do("TransformOffset", &t.TransformOffset)
	cb.Do("Unk_daebe18", &t.Unk_daebe18)
	cb.Do("Unk_6101673", &t.Unk_6101673)
	cb.Do("Unk_8470ffc", &t.Unk_8470ffc)
	cb.Do("Unk_46c8459", &t.Unk_46c8459)
	cb.Do("VecTargetOffset", &t.VecTargetOffset)
	cb.Do("EMicrophoneMode", &t.EMicrophoneMode)
	cb.Do("VecMicrophoneOffset", &t.VecMicrophoneOffset)
	cb.Do("EEasingType", &t.EEasingType)
	cb.Do("EBlendEasing", &t.EBlendEasing)
	cb.Do("Unk_90448b", &t.Unk_90448b)
	cb.Do("Unk_c443c2", &t.Unk_c443c2)
	cb.Do("Unk_741563", &t.Unk_741563)
}

type MaterialTexture struct {
	SnoTex      DT_SNO
	PtTexAnim   DT_POLYMORPHIC_VARIABLEARRAY[*TexAnim]
	Unk_908e73d DT_INT
}

func (t *MaterialTexture) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoTex, r, &Options{
		Flags: 1,
		Group: 44,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.PtTexAnim, r, &Options{Flags: 262145}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.Unk_908e73d, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+40, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *MaterialTexture) Walk(cb WalkCallback) {
	cb.Do("SnoTex", &t.SnoTex)
	cb.Do("PtTexAnim", &t.PtTexAnim)
	cb.Do("Unk_908e73d", &t.Unk_908e73d)
}

type Type_e7ead32b struct {
	SzBaseCamera DT_UINT
	FlScale      DT_FLOAT
	Unk_adeec18  DT_ENUM
	Unk_c1e1359  DT_FLOAT
	Unk_479eba2  PRTransform
	Unk_fc35c24  DT_FLOAT
	Unk_60a2e66  DT_FLOAT
	ArZoomLevels DT_VARIABLEARRAY[*Type_c5064aa7]
}

func (t *Type_e7ead32b) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SzBaseCamera, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.FlScale, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.Unk_adeec18, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.Unk_c1e1359, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_479eba2, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.Unk_fc35c24, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.Unk_60a2e66, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.ArZoomLevels, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+72, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_e7ead32b) Walk(cb WalkCallback) {
	cb.Do("SzBaseCamera", &t.SzBaseCamera)
	cb.Do("FlScale", &t.FlScale)
	cb.Do("Unk_adeec18", &t.Unk_adeec18)
	cb.Do("Unk_c1e1359", &t.Unk_c1e1359)
	cb.Do("Unk_479eba2", &t.Unk_479eba2)
	cb.Do("Unk_fc35c24", &t.Unk_fc35c24)
	cb.Do("Unk_60a2e66", &t.Unk_60a2e66)
	cb.Do("ArZoomLevels", &t.ArZoomLevels)
}

type Animation2DDefinition struct {
	TFrameAnim FrameAnim
	SnoSound   DT_SNO
	PtFrames   DT_VARIABLEARRAY[*Anim2DFrame]
}

func (t *Animation2DDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.TFrameAnim, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.SnoSound, r, &Options{
		Flags: 1,
		Group: 40,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.PtFrames, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+64, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Animation2DDefinition) Walk(cb WalkCallback) {
	cb.Do("TFrameAnim", &t.TFrameAnim)
	cb.Do("SnoSound", &t.SnoSound)
	cb.Do("PtFrames", &t.PtFrames)
}

type ShaderOverride struct {
	DwShaderMapOverride DT_UINT
	SnoMinDefault       DT_SNO
	Unk_b8d46b          DT_SNO
	SnoMedDefault       DT_SNO
	Unk_71e61d          DT_SNO
	SnoHighDefault      DT_SNO
	Unk_24ebc07         DT_SNO
	SnoHighlight        DT_SNO
	SnoLootOverlay      DT_SNO
	SnoOccluded         DT_SNO
	SnoDepth            DT_SNO
	SnoCookie           DT_SNO
	SnoCookieBaseShader DT_SNO
	SnoUIRActor         DT_SNO
	SnoFaded            DT_SNO
	SnoFur              DT_SNO
	SnoFurBaseShader    DT_SNO
	SnoPowerCenters     DT_SNO
}

func (t *ShaderOverride) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.DwShaderMapOverride, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.SnoMinDefault, r, &Options{
		Flags: 1,
		Group: 37,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.Unk_b8d46b, r, &Options{
		Flags: 1,
		Group: 37,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.SnoMedDefault, r, &Options{
		Flags: 1,
		Group: 37,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_71e61d, r, &Options{
		Flags: 1,
		Group: 37,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.SnoHighDefault, r, &Options{
		Flags: 1,
		Group: 37,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_24ebc07, r, &Options{
		Flags: 1,
		Group: 37,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.SnoHighlight, r, &Options{
		Flags: 1,
		Group: 37,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.SnoLootOverlay, r, &Options{
		Flags: 1,
		Group: 37,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.SnoOccluded, r, &Options{
		Flags: 1,
		Group: 37,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.SnoDepth, r, &Options{
		Flags: 1,
		Group: 37,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.SnoCookie, r, &Options{
		Flags: 1,
		Group: 37,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.SnoCookieBaseShader, r, &Options{
		Flags: 1,
		Group: 37,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.SnoUIRActor, r, &Options{
		Flags: 1,
		Group: 37,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.SnoFaded, r, &Options{
		Flags: 1,
		Group: 37,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+60, &t.SnoFur, r, &Options{
		Flags: 1,
		Group: 37,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.SnoFurBaseShader, r, &Options{
		Flags: 1,
		Group: 37,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.SnoPowerCenters, r, &Options{
		Flags: 1,
		Group: 37,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+72, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ShaderOverride) Walk(cb WalkCallback) {
	cb.Do("DwShaderMapOverride", &t.DwShaderMapOverride)
	cb.Do("SnoMinDefault", &t.SnoMinDefault)
	cb.Do("Unk_b8d46b", &t.Unk_b8d46b)
	cb.Do("SnoMedDefault", &t.SnoMedDefault)
	cb.Do("Unk_71e61d", &t.Unk_71e61d)
	cb.Do("SnoHighDefault", &t.SnoHighDefault)
	cb.Do("Unk_24ebc07", &t.Unk_24ebc07)
	cb.Do("SnoHighlight", &t.SnoHighlight)
	cb.Do("SnoLootOverlay", &t.SnoLootOverlay)
	cb.Do("SnoOccluded", &t.SnoOccluded)
	cb.Do("SnoDepth", &t.SnoDepth)
	cb.Do("SnoCookie", &t.SnoCookie)
	cb.Do("SnoCookieBaseShader", &t.SnoCookieBaseShader)
	cb.Do("SnoUIRActor", &t.SnoUIRActor)
	cb.Do("SnoFaded", &t.SnoFaded)
	cb.Do("SnoFur", &t.SnoFur)
	cb.Do("SnoFurBaseShader", &t.SnoFurBaseShader)
	cb.Do("SnoPowerCenters", &t.SnoPowerCenters)
}

type dmPolytopeDataMirror struct {
	M_aVertices     DT_INT64
	M_aPlanes       DT_INT64
	M_aSubEdges     DT_INT64
	M_aFaceSubEdges DT_INT64
	M_centroid      DT_VECTOR3D
	M_VertexCount   DT_INT
	M_FaceCount     DT_INT
	M_SubEdgeCount  DT_INT
	M_volume        DT_FLOAT
	M_area          DT_FLOAT
}

func (t *dmPolytopeDataMirror) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.M_aVertices, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.M_aPlanes, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.M_aSubEdges, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.M_aFaceSubEdges, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.M_centroid, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.M_VertexCount, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.M_FaceCount, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.M_SubEdgeCount, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.M_volume, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+60, &t.M_area, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+64, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *dmPolytopeDataMirror) Walk(cb WalkCallback) {
	cb.Do("M_aVertices", &t.M_aVertices)
	cb.Do("M_aPlanes", &t.M_aPlanes)
	cb.Do("M_aSubEdges", &t.M_aSubEdges)
	cb.Do("M_aFaceSubEdges", &t.M_aFaceSubEdges)
	cb.Do("M_centroid", &t.M_centroid)
	cb.Do("M_VertexCount", &t.M_VertexCount)
	cb.Do("M_FaceCount", &t.M_FaceCount)
	cb.Do("M_SubEdgeCount", &t.M_SubEdgeCount)
	cb.Do("M_volume", &t.M_volume)
	cb.Do("M_area", &t.M_area)
}

type DRLGEventDebugInfo struct {
	SzEventName DT_CHARARRAY
}

func (t *DRLGEventDebugInfo) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SzEventName, r, &Options{
		ArrayLength: 64,
		Flags:       1,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+64, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *DRLGEventDebugInfo) Walk(cb WalkCallback) {
	cb.Do("SzEventName", &t.SzEventName)
}

type OnProjectileCreateBuffCallback struct {
	// Inherits BuffCallbackBase
	// Inherits PolymorphicBase
	DwType                DT_UINT
	DwPad                 DT_UINT
	SnoTriggerEffectGroup DT_SNO
	ArConditions          DT_POLYMORPHIC_VARIABLEARRAY[*DT_INT64]
}

func (t *OnProjectileCreateBuffCallback) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoTriggerEffectGroup, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ArConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *OnProjectileCreateBuffCallback) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("SnoTriggerEffectGroup", &t.SnoTriggerEffectGroup)
	cb.Do("ArConditions", &t.ArConditions)
}

type Type_e84cd001 struct {
	FlTime DT_FLOAT
	QRot   bcQuat
}

func (t *Type_e84cd001) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.FlTime, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.QRot, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+20, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_e84cd001) Walk(cb WalkCallback) {
	cb.Do("FlTime", &t.FlTime)
	cb.Do("QRot", &t.QRot)
}

type EffectGroupKey struct {
	FlTime      DT_FLOAT
	FlValue     DT_FLOAT
	Unk_5fd7226 DT_VECTOR2D
	Unk_f044887 DT_VECTOR2D
}

func (t *EffectGroupKey) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.FlTime, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.FlValue, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.Unk_5fd7226, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_f044887, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *EffectGroupKey) Walk(cb WalkCallback) {
	cb.Do("FlTime", &t.FlTime)
	cb.Do("FlValue", &t.FlValue)
	cb.Do("Unk_5fd7226", &t.Unk_5fd7226)
	cb.Do("Unk_f044887", &t.Unk_f044887)
}

type Type_e8578394 struct{}

func (t *Type_e8578394) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if _, err := r.Seek(p+1, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_e8578394) Walk(cb WalkCallback) {}

type QuestRewardChoicePickedMessage struct {
	THeader     RequiredMessageHeader
	IdQuest     DT_ENUM
	Unk_14e1214 DT_INT
}

func (t *QuestRewardChoicePickedMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.IdQuest, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.Unk_14e1214, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *QuestRewardChoicePickedMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("IdQuest", &t.IdQuest)
	cb.Do("Unk_14e1214", &t.Unk_14e1214)
}

type UIMinimapFoWStyle struct {
	// Inherits UIWindowStyle
	// Inherits UIControlStyle
	// Inherits PolymorphicBase
	DwType                    DT_UINT
	DwPad                     DT_UINT
	HParentStyle              UIControlHandle
	Unk_441f783               DT_INT64
	M_eHasModifiedPowerTagMap DT_TAGMAP[*DT_ENUM]
	TConsoleInput             UIControlConsoleInput
	Unk_b4f614c               DT_TAGMAP[*DT_ENUM]
}

func (t *UIMinimapFoWStyle) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.HParentStyle, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_441f783, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.M_eHasModifiedPowerTagMap, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.TConsoleInput, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.Unk_b4f614c, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+80, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *UIMinimapFoWStyle) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("HParentStyle", &t.HParentStyle)
	cb.Do("Unk_441f783", &t.Unk_441f783)
	cb.Do("M_eHasModifiedPowerTagMap", &t.M_eHasModifiedPowerTagMap)
	cb.Do("TConsoleInput", &t.TConsoleInput)
	cb.Do("Unk_b4f614c", &t.Unk_b4f614c)
}

type SpawnLocOverrideData struct {
	Unk_1afeee0 DT_GBID
	Unk_2a1fbb4 DT_SNO
}

func (t *SpawnLocOverrideData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Unk_1afeee0, r, &Options{
		Flags: 1,
		Group: 20,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.Unk_2a1fbb4, r, &Options{
		Flags: 1,
		Group: 84,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *SpawnLocOverrideData) Walk(cb WalkCallback) {
	cb.Do("Unk_1afeee0", &t.Unk_1afeee0)
	cb.Do("Unk_2a1fbb4", &t.Unk_2a1fbb4)
}

type TriggerEventSetWeaponSheathedDuration struct {
	// Inherits TriggerEventRangedDuration
	// Inherits TriggerEvent
	// Inherits PolymorphicBase
	DwType           DT_UINT
	TConditions      TriggerConditions
	FGenerated       DT_INT
	Unk_6cba752      DT_INT
	DwParentActorID  DT_UINT
	TDuration        DT_FLOAT
	DwTriggerFlags   DT_UINT
	DwTriggerFlagsEx DT_UINT
	TCleanup         TriggerCleanup
	Unk_49e9257      DT_INT
	Unk_5490979      DT_INT
	DwPad            DT_UINT
	Unk_279aa5a      DT_INT
	DwActorID        DT_UINT
	BSheathed        DT_INT
}

func (t *TriggerEventSetWeaponSheathedDuration) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.FGenerated, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_6cba752, r, &Options{Flags: 16}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.DwParentActorID, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.TDuration, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.DwTriggerFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.DwTriggerFlagsEx, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.TCleanup, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+116, &t.Unk_49e9257, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.Unk_5490979, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+124, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.Unk_279aa5a, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+132, &t.DwActorID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+136, &t.BSheathed, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+144, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TriggerEventSetWeaponSheathedDuration) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("TConditions", &t.TConditions)
	cb.Do("FGenerated", &t.FGenerated)
	cb.Do("Unk_6cba752", &t.Unk_6cba752)
	cb.Do("DwParentActorID", &t.DwParentActorID)
	cb.Do("TDuration", &t.TDuration)
	cb.Do("DwTriggerFlags", &t.DwTriggerFlags)
	cb.Do("DwTriggerFlagsEx", &t.DwTriggerFlagsEx)
	cb.Do("TCleanup", &t.TCleanup)
	cb.Do("Unk_49e9257", &t.Unk_49e9257)
	cb.Do("Unk_5490979", &t.Unk_5490979)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("Unk_279aa5a", &t.Unk_279aa5a)
	cb.Do("DwActorID", &t.DwActorID)
	cb.Do("BSheathed", &t.BSheathed)
}

type ConversationTypeSounds struct {
	SnoGlobalChatterSound    DT_SNO
	SnoPersonalChatterSound  DT_SNO
	SnoLocalChatterSound     DT_SNO
	Unk_2fec1de              DT_SNO
	Unk_c2ef7ca              DT_SNO
	SnoDisembodiedVoiceSound DT_SNO
	Unk_5e34eb9              DT_SNO
	SnoEmoteSound            DT_SNO
}

func (t *ConversationTypeSounds) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoGlobalChatterSound, r, &Options{
		Flags: 1,
		Group: 40,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.SnoPersonalChatterSound, r, &Options{
		Flags: 1,
		Group: 40,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.SnoLocalChatterSound, r, &Options{
		Flags: 1,
		Group: 40,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.Unk_2fec1de, r, &Options{
		Flags: 1,
		Group: 40,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_c2ef7ca, r, &Options{
		Flags: 1,
		Group: 40,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.SnoDisembodiedVoiceSound, r, &Options{
		Flags: 1,
		Group: 40,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_5e34eb9, r, &Options{
		Flags: 1,
		Group: 40,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.SnoEmoteSound, r, &Options{
		Flags: 1,
		Group: 40,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ConversationTypeSounds) Walk(cb WalkCallback) {
	cb.Do("SnoGlobalChatterSound", &t.SnoGlobalChatterSound)
	cb.Do("SnoPersonalChatterSound", &t.SnoPersonalChatterSound)
	cb.Do("SnoLocalChatterSound", &t.SnoLocalChatterSound)
	cb.Do("Unk_2fec1de", &t.Unk_2fec1de)
	cb.Do("Unk_c2ef7ca", &t.Unk_c2ef7ca)
	cb.Do("SnoDisembodiedVoiceSound", &t.SnoDisembodiedVoiceSound)
	cb.Do("Unk_5e34eb9", &t.Unk_5e34eb9)
	cb.Do("SnoEmoteSound", &t.SnoEmoteSound)
}

type MarkerDataBase struct {
	// Inherits PolymorphicBase
	DwType DT_UINT
	DwPad  DT_UINT
}

func (t *MarkerDataBase) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *MarkerDataBase) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
}

type UITreeFolderStyle struct {
	// Inherits UIButtonStyle
	// Inherits UITextStyle
	// Inherits UIWindowStyle
	// Inherits UIControlStyle
	// Inherits PolymorphicBase
	DwType                    DT_UINT
	DwPad                     DT_UINT
	HParentStyle              UIControlHandle
	Unk_441f783               DT_INT64
	M_eHasModifiedPowerTagMap DT_TAGMAP[*DT_ENUM]
	TConsoleInput             UIControlConsoleInput
	Unk_b4f614c               DT_TAGMAP[*DT_ENUM]
	TFont                     UIControlFont
	Unk_4741819               DT_TAGMAP[*DT_ENUM]
	TIcon                     UIControlIcon
	TClickSounds              UIControlClickSounds
	Unk_10f81f0               DT_TAGMAP[*DT_ENUM]
	Unk_b6fa340               DT_TAGMAP[*DT_ENUM]
}

func (t *UITreeFolderStyle) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.HParentStyle, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_441f783, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.M_eHasModifiedPowerTagMap, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.TConsoleInput, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.Unk_b4f614c, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.TFont, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.Unk_4741819, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.TIcon, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.TClickSounds, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+144, &t.Unk_10f81f0, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+160, &t.Unk_b6fa340, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+176, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *UITreeFolderStyle) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("HParentStyle", &t.HParentStyle)
	cb.Do("Unk_441f783", &t.Unk_441f783)
	cb.Do("M_eHasModifiedPowerTagMap", &t.M_eHasModifiedPowerTagMap)
	cb.Do("TConsoleInput", &t.TConsoleInput)
	cb.Do("Unk_b4f614c", &t.Unk_b4f614c)
	cb.Do("TFont", &t.TFont)
	cb.Do("Unk_4741819", &t.Unk_4741819)
	cb.Do("TIcon", &t.TIcon)
	cb.Do("TClickSounds", &t.TClickSounds)
	cb.Do("Unk_10f81f0", &t.Unk_10f81f0)
	cb.Do("Unk_b6fa340", &t.Unk_b6fa340)
}

type EndOfTickMessage struct {
	THeader      RequiredMessageHeader
	DwTickEnding DT_UINT
	DwTickNext   DT_UINT
}

func (t *EndOfTickMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.DwTickEnding, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwTickNext, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *EndOfTickMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("DwTickEnding", &t.DwTickEnding)
	cb.Do("DwTickNext", &t.DwTickNext)
}

type CloneBeingDeletedMessage struct {
	THeader  RequiredMessageHeader
	AnnClone DT_ACD_NETWORK_NAME
	AnnNPC   DT_ACD_NETWORK_NAME
}

func (t *CloneBeingDeletedMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.AnnClone, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.AnnNPC, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *CloneBeingDeletedMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("AnnClone", &t.AnnClone)
	cb.Do("AnnNPC", &t.AnnNPC)
}

type QuitGameMessage struct {
	THeader         RequiredMessageHeader
	EReason         DT_ENUM
	DwLastHeartbeat DT_OPTIONAL[*DT_UINT]
}

func (t *QuitGameMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.EReason, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwLastHeartbeat, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+28, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *QuitGameMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("EReason", &t.EReason)
	cb.Do("DwLastHeartbeat", &t.DwLastHeartbeat)
}

type Type_e922358c struct {
	// Inherits PowerConditionBase
	// Inherits PolymorphicBase
	DwType      DT_UINT
	BInverse    DT_INT
	DwPad       DT_UINT
	Unk_1054c5e DT_ENUM
}

func (t *Type_e922358c) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BInverse, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_1054c5e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_e922358c) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("BInverse", &t.BInverse)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("Unk_1054c5e", &t.Unk_1054c5e)
}

type EffectGroupActorMovementTrack struct {
	// Inherits EffectGroupTrack
	// Inherits PolymorphicBase
	DwType DT_UINT
	DwPad  DT_UINT
}

func (t *EffectGroupActorMovementTrack) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *EffectGroupActorMovementTrack) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
}

type BannerColor struct {
	SzName    DT_UINT
	HLabel    StringLabelHandleEx
	RgbaColor DT_RGBACOLOR
}

func (t *BannerColor) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SzName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.HLabel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.RgbaColor, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *BannerColor) Walk(cb WalkCallback) {
	cb.Do("SzName", &t.SzName)
	cb.Do("HLabel", &t.HLabel)
	cb.Do("RgbaColor", &t.RgbaColor)
}

type HairColorDefinition struct {
	NSortOrder           DT_INT
	FUsableByClass       DT_FIXEDARRAY[*DT_INT]
	RgbaColors           DT_FIXEDARRAY[*DT_RGBACOLOR]
	FlHairColorInfluence DT_FLOAT
}

func (t *HairColorDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.NSortOrder, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.FUsableByClass, r, &Options{
		ArrayLength: 5,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.RgbaColors, r, &Options{
		ArrayLength: 3,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.FlHairColorInfluence, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *HairColorDefinition) Walk(cb WalkCallback) {
	cb.Do("NSortOrder", &t.NSortOrder)
	cb.Do("FUsableByClass", &t.FUsableByClass)
	cb.Do("RgbaColors", &t.RgbaColors)
	cb.Do("FlHairColorInfluence", &t.FlHairColorInfluence)
}

type Type_e97cce1f struct {
	Unk_9568563    DT_ENUM
	Unk_5c29242    DT_INT
	FlCameraOffset DT_FLOAT
}

func (t *Type_e97cce1f) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Unk_9568563, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.Unk_5c29242, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.FlCameraOffset, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+12, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_e97cce1f) Walk(cb WalkCallback) {
	cb.Do("Unk_9568563", &t.Unk_9568563)
	cb.Do("Unk_5c29242", &t.Unk_5c29242)
	cb.Do("FlCameraOffset", &t.FlCameraOffset)
}

type PowerConditionHasResource struct {
	// Inherits PowerConditionBase
	// Inherits PolymorphicBase
	DwType        DT_UINT
	BInverse      DT_INT
	DwPad         DT_UINT
	ESubject      DT_ENUM
	EResourceType DT_ENUM
	FlAmount      DT_FLOAT
}

func (t *PowerConditionHasResource) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BInverse, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ESubject, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.EResourceType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.FlAmount, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+40, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PowerConditionHasResource) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("BInverse", &t.BInverse)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("ESubject", &t.ESubject)
	cb.Do("EResourceType", &t.EResourceType)
	cb.Do("FlAmount", &t.FlAmount)
}

type ActorShaderMapOverrideChangedMessage struct {
	THeader             RequiredMessageHeader
	Ann                 DT_ACD_NETWORK_NAME
	NChange             DT_INT
	DwShaderMapOverride DT_UINT
}

func (t *ActorShaderMapOverrideChangedMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Ann, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.NChange, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.DwShaderMapOverride, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ActorShaderMapOverrideChangedMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("Ann", &t.Ann)
	cb.Do("NChange", &t.NChange)
	cb.Do("DwShaderMapOverride", &t.DwShaderMapOverride)
}

type Type_e9ff9a6f struct {
	// Inherits Type_7e418ba8
	// Inherits PolymorphicBase
	DwType       DT_UINT
	Unk_2de4987  DT_UINT
	ArConditions DT_POLYMORPHIC_VARIABLEARRAY[*DT_INT64]
	BEnd         DT_INT
	DwPad        DT_UINT
}

func (t *Type_e9ff9a6f) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_2de4987, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ArConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.BEnd, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+56, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_e9ff9a6f) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("Unk_2de4987", &t.Unk_2de4987)
	cb.Do("ArConditions", &t.ArConditions)
	cb.Do("BEnd", &t.BEnd)
	cb.Do("DwPad", &t.DwPad)
}

type DefaultTextureInfo struct {
	EShaderTex DT_ENUM
	SnoTexture DT_SNO
}

func (t *DefaultTextureInfo) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.EShaderTex, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.SnoTexture, r, &Options{
		Flags: 1,
		Group: 44,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *DefaultTextureInfo) Walk(cb WalkCallback) {
	cb.Do("EShaderTex", &t.EShaderTex)
	cb.Do("SnoTexture", &t.SnoTexture)
}

type TriggerEventObjectFollowSpline struct {
	// Inherits TriggerEventRangedDuration
	// Inherits TriggerEvent
	// Inherits PolymorphicBase
	DwType           DT_UINT
	TConditions      TriggerConditions
	FGenerated       DT_INT
	Unk_6cba752      DT_INT
	DwParentActorID  DT_UINT
	TDuration        DT_FLOAT
	DwTriggerFlags   DT_UINT
	DwTriggerFlagsEx DT_UINT
	TCleanup         TriggerCleanup
	Unk_49e9257      DT_INT
	Unk_5490979      DT_INT
	DwPad            DT_UINT
	DwObjectID       DT_UINT
	FlBlendTime      DT_FLOAT
	SzSplineName     DT_UINT
	Unk_30b49c2      DT_ENUM
	Unk_8781d26      DT_UINT
	Unk_9a31592      DT_UINT
	FlFirstPercent   DT_FLOAT
	FlLastPercent    DT_FLOAT
	FlFirstDistance  DT_FLOAT
	FlLastDistance   DT_FLOAT
	Unk_71c05df      DT_INT
	Unk_325b1ab      DT_INT
	EEasing          DT_ENUM
	TEasingWeight    SplineEasingWeight
	EOrientationMode DT_ENUM
	TransformOffset  PRTransform
	Unk_daebe18      DT_ENUM
	Unk_6101673      DT_UINT
	Unk_8470ffc      HardpointLink
	Unk_46c8459      DT_UINT
	EEasingType      DT_ENUM
	EBlendEasing     DT_ENUM
	Unk_90448b       DT_ENUM
	Unk_c443c2       DT_FLOAT
	Unk_741563       DT_FLOAT
}

func (t *TriggerEventObjectFollowSpline) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.FGenerated, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_6cba752, r, &Options{Flags: 16}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.DwParentActorID, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.TDuration, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.DwTriggerFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.DwTriggerFlagsEx, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.TCleanup, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+116, &t.Unk_49e9257, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.Unk_5490979, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+124, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.DwObjectID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+132, &t.FlBlendTime, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+136, &t.SzSplineName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+140, &t.Unk_30b49c2, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+144, &t.Unk_8781d26, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+148, &t.Unk_9a31592, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+152, &t.FlFirstPercent, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+156, &t.FlLastPercent, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+160, &t.FlFirstDistance, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+164, &t.FlLastDistance, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+168, &t.Unk_71c05df, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+172, &t.Unk_325b1ab, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+176, &t.EEasing, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+180, &t.TEasingWeight, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+192, &t.EOrientationMode, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+196, &t.TransformOffset, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+224, &t.Unk_daebe18, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+228, &t.Unk_6101673, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+232, &t.Unk_8470ffc, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+240, &t.Unk_46c8459, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+244, &t.EEasingType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+248, &t.EBlendEasing, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+252, &t.Unk_90448b, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+256, &t.Unk_c443c2, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+260, &t.Unk_741563, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+264, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TriggerEventObjectFollowSpline) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("TConditions", &t.TConditions)
	cb.Do("FGenerated", &t.FGenerated)
	cb.Do("Unk_6cba752", &t.Unk_6cba752)
	cb.Do("DwParentActorID", &t.DwParentActorID)
	cb.Do("TDuration", &t.TDuration)
	cb.Do("DwTriggerFlags", &t.DwTriggerFlags)
	cb.Do("DwTriggerFlagsEx", &t.DwTriggerFlagsEx)
	cb.Do("TCleanup", &t.TCleanup)
	cb.Do("Unk_49e9257", &t.Unk_49e9257)
	cb.Do("Unk_5490979", &t.Unk_5490979)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("DwObjectID", &t.DwObjectID)
	cb.Do("FlBlendTime", &t.FlBlendTime)
	cb.Do("SzSplineName", &t.SzSplineName)
	cb.Do("Unk_30b49c2", &t.Unk_30b49c2)
	cb.Do("Unk_8781d26", &t.Unk_8781d26)
	cb.Do("Unk_9a31592", &t.Unk_9a31592)
	cb.Do("FlFirstPercent", &t.FlFirstPercent)
	cb.Do("FlLastPercent", &t.FlLastPercent)
	cb.Do("FlFirstDistance", &t.FlFirstDistance)
	cb.Do("FlLastDistance", &t.FlLastDistance)
	cb.Do("Unk_71c05df", &t.Unk_71c05df)
	cb.Do("Unk_325b1ab", &t.Unk_325b1ab)
	cb.Do("EEasing", &t.EEasing)
	cb.Do("TEasingWeight", &t.TEasingWeight)
	cb.Do("EOrientationMode", &t.EOrientationMode)
	cb.Do("TransformOffset", &t.TransformOffset)
	cb.Do("Unk_daebe18", &t.Unk_daebe18)
	cb.Do("Unk_6101673", &t.Unk_6101673)
	cb.Do("Unk_8470ffc", &t.Unk_8470ffc)
	cb.Do("Unk_46c8459", &t.Unk_46c8459)
	cb.Do("EEasingType", &t.EEasingType)
	cb.Do("EBlendEasing", &t.EBlendEasing)
	cb.Do("Unk_90448b", &t.Unk_90448b)
	cb.Do("Unk_c443c2", &t.Unk_c443c2)
	cb.Do("Unk_741563", &t.Unk_741563)
}

type MarkerHandle struct {
	SnoMarkerSet DT_SNO
	NID          DT_INT
}

func (t *MarkerHandle) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoMarkerSet, r, &Options{
		Flags: 1,
		Group: 24,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.NID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *MarkerHandle) Walk(cb WalkCallback) {
	cb.Do("SnoMarkerSet", &t.SnoMarkerSet)
	cb.Do("NID", &t.NID)
}

type ParametricInfo struct {
	SnoBaseLayer       DT_SNO
	ArParametricLayers DT_VARIABLEARRAY[*ParametricLayer]
}

func (t *ParametricInfo) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoBaseLayer, r, &Options{
		Flags: 1,
		Group: 57,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.ArParametricLayers, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ParametricInfo) Walk(cb WalkCallback) {
	cb.Do("SnoBaseLayer", &t.SnoBaseLayer)
	cb.Do("ArParametricLayers", &t.ArParametricLayers)
}

type RestrictedComponent struct {
	TComponentId      DT_UINT
	PtValidComponents DT_FIXEDARRAY[*ValidComponents]
}

func (t *RestrictedComponent) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.TComponentId, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.PtValidComponents, r, &Options{
		ArrayLength: 4,
		Flags:       1,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+72, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *RestrictedComponent) Walk(cb WalkCallback) {
	cb.Do("TComponentId", &t.TComponentId)
	cb.Do("PtValidComponents", &t.PtValidComponents)
}

type dmSubEdgeMirror struct {
	TwinOffset DT_BYTE
	Tail       DT_BYTE
	Left       DT_BYTE
	Next       DT_BYTE
}

func (t *dmSubEdgeMirror) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.TwinOffset, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1, &t.Tail, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2, &t.Left, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+3, &t.Next, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+4, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *dmSubEdgeMirror) Walk(cb WalkCallback) {
	cb.Do("TwinOffset", &t.TwinOffset)
	cb.Do("Tail", &t.Tail)
	cb.Do("Left", &t.Left)
	cb.Do("Next", &t.Next)
}

type DPathSinData struct {
	FlSinIncPerTick            DT_FLOAT
	FlSinIncAccel              DT_FLOAT
	FlLateralMaxDistance       DT_FLOAT
	FlOOLateralDistanceToScale DT_FLOAT
	FlLateralStartDistance     DT_FLOAT
	FlSpeed                    DT_FLOAT
	AnnOwner                   DT_ACD_NETWORK_NAME
}

func (t *DPathSinData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.FlSinIncPerTick, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.FlSinIncAccel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.FlLateralMaxDistance, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.FlOOLateralDistanceToScale, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.FlLateralStartDistance, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.FlSpeed, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.AnnOwner, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *DPathSinData) Walk(cb WalkCallback) {
	cb.Do("FlSinIncPerTick", &t.FlSinIncPerTick)
	cb.Do("FlSinIncAccel", &t.FlSinIncAccel)
	cb.Do("FlLateralMaxDistance", &t.FlLateralMaxDistance)
	cb.Do("FlOOLateralDistanceToScale", &t.FlOOLateralDistanceToScale)
	cb.Do("FlLateralStartDistance", &t.FlLateralStartDistance)
	cb.Do("FlSpeed", &t.FlSpeed)
	cb.Do("AnnOwner", &t.AnnOwner)
}

type QuestSubcondition struct {
	// Inherits QuestSubconditionBase
	// Inherits Subcondition
	// Inherits PolymorphicBase
	DwType          DT_UINT
	BNegate         DT_INT
	SnoQuest        DT_SNO
	DwPad           DT_UINT
	EState          DT_ENUM
	EStepComparison DT_ENUM
	NStepUID        DT_INT
}

func (t *QuestSubcondition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BNegate, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SnoQuest, r, &Options{
		Flags: 513,
		Group: 31,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.EState, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.EStepComparison, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.NStepUID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *QuestSubcondition) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("BNegate", &t.BNegate)
	cb.Do("SnoQuest", &t.SnoQuest)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("EState", &t.EState)
	cb.Do("EStepComparison", &t.EStepComparison)
	cb.Do("NStepUID", &t.NStepUID)
}

type SalvageResultsMessage struct {
	THeader             RequiredMessageHeader
	ArNewItems          DT_FIXEDARRAY[*SalvageResultItem]
	ArUnlockedTransmogs DT_FIXEDARRAY[*DT_SNO]
}

func (t *SalvageResultsMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.ArNewItems, r, &Options{
		ArrayLength: 16,
		Flags:       8,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+148, &t.ArUnlockedTransmogs, r, &Options{
		ArrayLength: 64,
		Flags:       9,
		Group:       73,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+408, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *SalvageResultsMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("ArNewItems", &t.ArNewItems)
	cb.Do("ArUnlockedTransmogs", &t.ArUnlockedTransmogs)
}

type ServerLogMessage struct {
	THeader   RequiredMessageHeader
	UsMessage DT_CHARARRAY
}

func (t *ServerLogMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.UsMessage, r, &Options{
		ArrayLength: 1024,
		Flags:       1,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+1040, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ServerLogMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("UsMessage", &t.UsMessage)
}

type GenericBlobRequestMessage struct {
	THeader   RequiredRequestMessageHeader
	UBlobSize DT_WORD
}

func (t *GenericBlobRequestMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.UBlobSize, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *GenericBlobRequestMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("UBlobSize", &t.UBlobSize)
}

type Type_eb48e229 struct {
	// Inherits Type_d4213c9b
	DwType      DT_UINT
	Unk_9b2bc26 Type_80554fed
	Unk_77ed19a DT_ENUM
	DwPad       DT_UINT
}

func (t *Type_eb48e229) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_9b2bc26, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.Unk_77ed19a, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+56, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_eb48e229) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("Unk_9b2bc26", &t.Unk_9b2bc26)
	cb.Do("Unk_77ed19a", &t.Unk_77ed19a)
	cb.Do("DwPad", &t.DwPad)
}

type Type_eb8eea32 struct {
	// Inherits ScriptEventParamBase
	// Inherits PolymorphicBase
	DwType           DT_UINT
	EParamType       DT_ENUM
	DwPad            DT_UINT
	SnoMonsterFamily DT_SNO
	SzArchetype      DT_UINT
	DwArchetypeHash  DT_UINT
	EOptionalRarity  DT_ENUM
}

func (t *Type_eb8eea32) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.EParamType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SnoMonsterFamily, r, &Options{
		Flags: 513,
		Group: 82,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.SzArchetype, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.DwArchetypeHash, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.EOptionalRarity, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+40, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_eb8eea32) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("EParamType", &t.EParamType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("SnoMonsterFamily", &t.SnoMonsterFamily)
	cb.Do("SzArchetype", &t.SzArchetype)
	cb.Do("DwArchetypeHash", &t.DwArchetypeHash)
	cb.Do("EOptionalRarity", &t.EOptionalRarity)
}

type MaterialScalarValuesUsed struct {
	SnoMaterialValue DT_SNO
	FlDefaultValue   DT_FLOAT
}

func (t *MaterialScalarValuesUsed) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoMaterialValue, r, &Options{
		Flags: 1,
		Group: 81,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.FlDefaultValue, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *MaterialScalarValuesUsed) Walk(cb WalkCallback) {
	cb.Do("SnoMaterialValue", &t.SnoMaterialValue)
	cb.Do("FlDefaultValue", &t.FlDefaultValue)
}

type bcQuat struct {
	X DT_FLOAT
	Y DT_FLOAT
	Z DT_FLOAT
	W DT_FLOAT
}

func (t *bcQuat) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.X, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.Y, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.Z, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.W, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *bcQuat) Walk(cb WalkCallback) {
	cb.Do("X", &t.X)
	cb.Do("Y", &t.Y)
	cb.Do("Z", &t.Z)
	cb.Do("W", &t.W)
}

type PowerConditionIsFortified struct {
	// Inherits PowerConditionBase
	// Inherits PolymorphicBase
	DwType   DT_UINT
	BInverse DT_INT
	DwPad    DT_UINT
	ESubject DT_ENUM
}

func (t *PowerConditionIsFortified) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BInverse, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ESubject, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PowerConditionIsFortified) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("BInverse", &t.BInverse)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("ESubject", &t.ESubject)
}

type ACDPickupFailedMessage struct {
	THeader         RequiredMessageHeader
	ECurrencyType   DT_ENUM
	Unk_c9b5ba6     DT_INT
	EPickupResponse DT_ENUM
	AnnPickee       DT_ACD_NETWORK_NAME
}

func (t *ACDPickupFailedMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.ECurrencyType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.Unk_c9b5ba6, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.EPickupResponse, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.AnnPickee, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+36, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ACDPickupFailedMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("ECurrencyType", &t.ECurrencyType)
	cb.Do("Unk_c9b5ba6", &t.Unk_c9b5ba6)
	cb.Do("EPickupResponse", &t.EPickupResponse)
	cb.Do("AnnPickee", &t.AnnPickee)
}

type DungeonStateSubcondition struct {
	// Inherits Subcondition
	// Inherits PolymorphicBase
	DwType      DT_UINT
	BNegate     DT_INT
	DwPad       DT_UINT
	Unk_b23f628 DT_GBID
}

func (t *DungeonStateSubcondition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BNegate, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_b23f628, r, &Options{
		Flags: 1,
		Group: 31,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *DungeonStateSubcondition) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("BNegate", &t.BNegate)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("Unk_b23f628", &t.Unk_b23f628)
}

type AnimFacingWindow struct {
	NFrameStart DT_INT
	NFrameEnd   DT_INT
	Unk_f28aa5a DT_FLOAT
	Unk_963cba8 DT_INT
	Unk_65d9350 DT_INT
}

func (t *AnimFacingWindow) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.NFrameStart, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.NFrameEnd, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.Unk_f28aa5a, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.Unk_963cba8, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_65d9350, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+20, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *AnimFacingWindow) Walk(cb WalkCallback) {
	cb.Do("NFrameStart", &t.NFrameStart)
	cb.Do("NFrameEnd", &t.NFrameEnd)
	cb.Do("Unk_f28aa5a", &t.Unk_f28aa5a)
	cb.Do("Unk_963cba8", &t.Unk_963cba8)
	cb.Do("Unk_65d9350", &t.Unk_65d9350)
}

type GlobalDefinition struct {
	DwNextID  DT_UINT
	PtContent DT_POLYMORPHIC_VARIABLEARRAY[*GlobalBase]
}

func (t *GlobalDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwNextID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.PtContent, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+40, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *GlobalDefinition) Walk(cb WalkCallback) {
	cb.Do("DwNextID", &t.DwNextID)
	cb.Do("PtContent", &t.PtContent)
}

type EventSubcondition struct {
	// Inherits QuestSubconditionBase
	// Inherits Subcondition
	// Inherits PolymorphicBase
	DwType          DT_UINT
	BNegate         DT_INT
	SnoQuest        DT_SNO
	DwPad           DT_UINT
	EState          DT_ENUM
	EStepComparison DT_ENUM
	NStepUID        DT_INT
}

func (t *EventSubcondition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BNegate, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SnoQuest, r, &Options{
		Flags: 513,
		Group: 31,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.EState, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.EStepComparison, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.NStepUID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *EventSubcondition) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("BNegate", &t.BNegate)
	cb.Do("SnoQuest", &t.SnoQuest)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("EState", &t.EState)
	cb.Do("EStepComparison", &t.EStepComparison)
	cb.Do("NStepUID", &t.NStepUID)
}

type Type_ec9d1911 struct {
	// Inherits Type_4e43aa7a
	DwType      DT_UINT
	Unk_9b2bc26 Type_80fa280c
	Unk_77ed19a DT_ENUM
	DwPad       DT_UINT
}

func (t *Type_ec9d1911) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_9b2bc26, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.Unk_77ed19a, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+56, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_ec9d1911) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("Unk_9b2bc26", &t.Unk_9b2bc26)
	cb.Do("Unk_77ed19a", &t.Unk_77ed19a)
	cb.Do("DwPad", &t.DwPad)
}

type GeoChunk struct {
	AabbBounds           AABB
	PtLODs               DT_VARIABLEARRAY[*GeoSet]
	PtChunkVertexBuffers DT_VARIABLEARRAY[*GeoChunkVertexBuffer]
	PtChunkIndexBuffers  DT_VARIABLEARRAY[*GeoChunkIndexBuffer]
	Unk_8c8b576          DT_VARIABLEARRAY[*DT_FLOAT]
}

func (t *GeoChunk) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.AabbBounds, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.PtLODs, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.PtChunkVertexBuffers, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.PtChunkIndexBuffers, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_8c8b576, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+88, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *GeoChunk) Walk(cb WalkCallback) {
	cb.Do("AabbBounds", &t.AabbBounds)
	cb.Do("PtLODs", &t.PtLODs)
	cb.Do("PtChunkVertexBuffers", &t.PtChunkVertexBuffers)
	cb.Do("PtChunkIndexBuffers", &t.PtChunkIndexBuffers)
	cb.Do("Unk_8c8b576", &t.Unk_8c8b576)
}

type EffectGroupRotationPitchKeyData struct {
	// Inherits EffectGroupKeyData
	// Inherits PolymorphicBase
	DwType     DT_UINT
	DwPad      DT_UINT
	ArKeyItems DT_VARIABLEARRAY[*EffectGroupKey]
}

func (t *EffectGroupRotationPitchKeyData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.ArKeyItems, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *EffectGroupRotationPitchKeyData) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("ArKeyItems", &t.ArKeyItems)
}

type MarkerBoneTransform struct {
	SzName    DT_UINT
	Transform PRSTransform
}

func (t *MarkerBoneTransform) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SzName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.Transform, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+44, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *MarkerBoneTransform) Walk(cb WalkCallback) {
	cb.Do("SzName", &t.SzName)
	cb.Do("Transform", &t.Transform)
}

type GlobalHealerEvents struct {
	SnoConversations DT_FIXEDARRAY[*DT_SNO]
}

func (t *GlobalHealerEvents) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoConversations, r, &Options{
		ArrayLength: 1,
		Flags:       1,
		Group:       12,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+4, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *GlobalHealerEvents) Walk(cb WalkCallback) {
	cb.Do("SnoConversations", &t.SnoConversations)
}

type NPCComponentRestrictionEntry struct {
	PtRestrictedComponents DT_VARIABLEARRAY[*RestrictedComponent]
}

func (t *NPCComponentRestrictionEntry) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.PtRestrictedComponents, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *NPCComponentRestrictionEntry) Walk(cb WalkCallback) {
	cb.Do("PtRestrictedComponents", &t.PtRestrictedComponents)
}

type OnShapeshiftCallback struct {
	// Inherits BuffCallbackBase
	// Inherits PolymorphicBase
	DwType                DT_UINT
	DwPad                 DT_UINT
	SnoTriggerEffectGroup DT_SNO
	ArConditions          DT_POLYMORPHIC_VARIABLEARRAY[*DT_INT64]
	Unk_49ab17c           DT_INT
}

func (t *OnShapeshiftCallback) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoTriggerEffectGroup, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ArConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.Unk_49ab17c, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+56, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *OnShapeshiftCallback) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("SnoTriggerEffectGroup", &t.SnoTriggerEffectGroup)
	cb.Do("ArConditions", &t.ArConditions)
	cb.Do("Unk_49ab17c", &t.Unk_49ab17c)
}

type LookVariantMaterialOverride struct {
	SnoBaseMaterial     DT_SNO
	SnoOverrideMaterial DT_SNO
}

func (t *LookVariantMaterialOverride) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoBaseMaterial, r, &Options{
		Flags: 1,
		Group: 57,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.SnoOverrideMaterial, r, &Options{
		Flags: 1,
		Group: 57,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *LookVariantMaterialOverride) Walk(cb WalkCallback) {
	cb.Do("SnoBaseMaterial", &t.SnoBaseMaterial)
	cb.Do("SnoOverrideMaterial", &t.SnoOverrideMaterial)
}

type GlobalPortalData struct {
	// Inherits GlobalBase
	// Inherits PolymorphicBase
	DwType             DT_UINT
	DwPad              DT_UINT
	Unk_94ef354        PortalInfo
	Unk_17b3d69        PortalInfo
	Unk_40a7880        PortalInfo
	Unk_5b9ef28        PortalInfo
	TDefaultPortalInfo PortalInfo
	Unk_1b0f21b        PortalInfo
	Unk_10d5c7e        DT_SNO
	Unk_e9f1d74        DT_SNO
	Unk_5d1c931        DT_FIXEDARRAY[*StaticLoadingImages]
	Unk_2c9374e        DT_FIXEDARRAY[*Type_dcddca9e]
	Unk_834e1aa        DT_INT
	Unk_c169c8f        DT_FIXEDARRAY[*Type_dcddca9e]
	ArPortalTypes      DT_VARIABLEARRAY[*DynamicPortalInfo]
	DwTownPortalType   DT_UINT
	Unk_f3c5748        DT_UINT
	Unk_2b9b577        DT_UINT
	Unk_706c5c5        DT_UINT
	Unk_dbc4b77        DT_INT
	Unk_dfb0a77        DT_INT
}

func (t *GlobalPortalData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_94ef354, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+232, &t.Unk_17b3d69, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+448, &t.Unk_40a7880, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+664, &t.Unk_5b9ef28, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+880, &t.TDefaultPortalInfo, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1096, &t.Unk_1b0f21b, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1312, &t.Unk_10d5c7e, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1316, &t.Unk_e9f1d74, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1320, &t.Unk_5d1c931, r, &Options{
		ArrayLength: 8,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1576, &t.Unk_2c9374e, r, &Options{
		ArrayLength: 5,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2276, &t.Unk_834e1aa, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2280, &t.Unk_c169c8f, r, &Options{
		ArrayLength: 3,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2704, &t.ArPortalTypes, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2720, &t.DwTownPortalType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2724, &t.Unk_f3c5748, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2728, &t.Unk_2b9b577, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2732, &t.Unk_706c5c5, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2736, &t.Unk_dbc4b77, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2740, &t.Unk_dfb0a77, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+2744, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *GlobalPortalData) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("Unk_94ef354", &t.Unk_94ef354)
	cb.Do("Unk_17b3d69", &t.Unk_17b3d69)
	cb.Do("Unk_40a7880", &t.Unk_40a7880)
	cb.Do("Unk_5b9ef28", &t.Unk_5b9ef28)
	cb.Do("TDefaultPortalInfo", &t.TDefaultPortalInfo)
	cb.Do("Unk_1b0f21b", &t.Unk_1b0f21b)
	cb.Do("Unk_10d5c7e", &t.Unk_10d5c7e)
	cb.Do("Unk_e9f1d74", &t.Unk_e9f1d74)
	cb.Do("Unk_5d1c931", &t.Unk_5d1c931)
	cb.Do("Unk_2c9374e", &t.Unk_2c9374e)
	cb.Do("Unk_834e1aa", &t.Unk_834e1aa)
	cb.Do("Unk_c169c8f", &t.Unk_c169c8f)
	cb.Do("ArPortalTypes", &t.ArPortalTypes)
	cb.Do("DwTownPortalType", &t.DwTownPortalType)
	cb.Do("Unk_f3c5748", &t.Unk_f3c5748)
	cb.Do("Unk_2b9b577", &t.Unk_2b9b577)
	cb.Do("Unk_706c5c5", &t.Unk_706c5c5)
	cb.Do("Unk_dbc4b77", &t.Unk_dbc4b77)
	cb.Do("Unk_dfb0a77", &t.Unk_dfb0a77)
}

type InventoryStackTransferMessage struct {
	THeader     RequiredMessageHeader
	AnnItemSrc  DT_ACD_NETWORK_NAME
	AnnItemDest DT_ACD_NETWORK_NAME
	UAmount     DT_INT64
}

func (t *InventoryStackTransferMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.AnnItemSrc, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.AnnItemDest, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.UAmount, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+40, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *InventoryStackTransferMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("AnnItemSrc", &t.AnnItemSrc)
	cb.Do("AnnItemDest", &t.AnnItemDest)
	cb.Do("UAmount", &t.UAmount)
}

type ShakeDefinition struct {
	DwShakeFlags                DT_UINT
	TSystemDuration             DT_FLOAT
	TOutroDuration              DT_FLOAT
	WdMinRange                  DT_FLOAT
	WdMaxRange                  DT_FLOAT
	PathCameraPositionAmplitude VectorPath
	PathCameraPositionFrequency VectorPath
}

func (t *ShakeDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwShakeFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.TSystemDuration, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TOutroDuration, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.WdMinRange, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.WdMaxRange, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.PathCameraPositionAmplitude, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.PathCameraPositionFrequency, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+144, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ShakeDefinition) Walk(cb WalkCallback) {
	cb.Do("DwShakeFlags", &t.DwShakeFlags)
	cb.Do("TSystemDuration", &t.TSystemDuration)
	cb.Do("TOutroDuration", &t.TOutroDuration)
	cb.Do("WdMinRange", &t.WdMinRange)
	cb.Do("WdMaxRange", &t.WdMaxRange)
	cb.Do("PathCameraPositionAmplitude", &t.PathCameraPositionAmplitude)
	cb.Do("PathCameraPositionFrequency", &t.PathCameraPositionFrequency)
}

type MarkerTextLabelData struct {
	// Inherits MarkerDataBase
	// Inherits PolymorphicBase
	DwType     DT_UINT
	DwPad      DT_UINT
	SzLabel    DT_CHARARRAY
	Unk_590b8b DT_INT
	FHidden    DT_INT
}

func (t *MarkerTextLabelData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SzLabel, r, &Options{
		ArrayLength: 128,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+144, &t.Unk_590b8b, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+148, &t.FHidden, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+152, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *MarkerTextLabelData) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("SzLabel", &t.SzLabel)
	cb.Do("Unk_590b8b", &t.Unk_590b8b)
	cb.Do("FHidden", &t.FHidden)
}

type Type_eda64360 struct {
	DwID          DT_UINT
	DwRowIndex    DT_UINT
	DwColumnIndex DT_UINT
	ArQuestChains DT_VARIABLEARRAY[*DT_SNO]
}

func (t *Type_eda64360) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.DwID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.DwRowIndex, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwColumnIndex, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.ArQuestChains, r, &Options{
		Flags: 1,
		Group: 96,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_eda64360) Walk(cb WalkCallback) {
	cb.Do("DwID", &t.DwID)
	cb.Do("DwRowIndex", &t.DwRowIndex)
	cb.Do("DwColumnIndex", &t.DwColumnIndex)
	cb.Do("ArQuestChains", &t.ArQuestChains)
}

type BannerTextileTexture struct {
	SzName       DT_UINT
	HLabel       StringLabelHandleEx
	SnoNormal    DT_SNO
	SnoAlbedo    DT_SNO
	SnoRoughness DT_SNO
	HIcon        UIImageHandleReference
}

func (t *BannerTextileTexture) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SzName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.HLabel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.SnoNormal, r, &Options{
		Flags: 1,
		Group: 44,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoAlbedo, r, &Options{
		Flags: 1,
		Group: 44,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.SnoRoughness, r, &Options{
		Flags: 1,
		Group: 44,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.HIcon, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+28, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *BannerTextileTexture) Walk(cb WalkCallback) {
	cb.Do("SzName", &t.SzName)
	cb.Do("HLabel", &t.HLabel)
	cb.Do("SnoNormal", &t.SnoNormal)
	cb.Do("SnoAlbedo", &t.SnoAlbedo)
	cb.Do("SnoRoughness", &t.SnoRoughness)
	cb.Do("HIcon", &t.HIcon)
}

type HeadstoneGizmoData struct {
	// Inherits ActorGizmoData
	// Inherits PolymorphicBase
	DwType                       DT_UINT
	DwPad                        DT_UINT
	FDisableNonFriendlyOperation DT_INT
	FWalkToCenter                DT_INT
	FGizmoStartsDisabled         DT_INT
	FUseStringListName           DT_INT
	FForceMinimapIcon            DT_INT
	FlOperationRadius            DT_FLOAT
	Unk_d0b1df5                  DT_FLOAT
	FlGizmoUseTime               DT_FLOAT
	SnoChannelingEffect          DT_SNO
	Unk_2767229                  DT_INT
	FGizmoShowProgressBar        DT_INT
	Unk_6d9ebe1                  DT_INT
	Unk_5456245                  DT_INT
	Unk_af5815a                  DT_INT
	SnoOnClickEffect             DT_SNO
	SnoPickedUpEffect            DT_SNO
	SnoDropOnGroundEffect        DT_SNO
	TConditionData               GizmoConditionData
	SnoPowerOperator             DT_SNO
	SnoPowerOperate              DT_SNO
	SnoPowerOperatorActive       DT_SNO
	SnoPowerOperateActive        DT_SNO
	Unk_359810e                  DT_INT
	NCooldown                    DT_UINT
	Unk_9c8478e                  DT_UINT
	Unk_d45ed2d                  DT_INT
	Unk_f6b20b7                  DT_INT
	Unk_54513b8                  DT_INT
	Unk_fd1f378                  DT_UINT
	Unk_487c14                   DT_UINT
	Unk_87f2609                  DT_UINT
	Unk_158eb4f                  DT_FLOAT
	Unk_ab58cd3                  DT_ENUM
	Unk_91a3966                  DT_UINT
	Unk_25312e5                  DT_UINT
	Unk_4be4371                  DT_INT
	EClassRestriction            DT_ENUM
}

func (t *HeadstoneGizmoData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.FDisableNonFriendlyOperation, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.FWalkToCenter, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.FGizmoStartsDisabled, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.FUseStringListName, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.FForceMinimapIcon, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.FlOperationRadius, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.Unk_d0b1df5, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.FlGizmoUseTime, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.SnoChannelingEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.Unk_2767229, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.FGizmoShowProgressBar, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+60, &t.Unk_6d9ebe1, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.Unk_5456245, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.Unk_af5815a, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.SnoOnClickEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.SnoPickedUpEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.SnoDropOnGroundEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.TConditionData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.SnoPowerOperator, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.SnoPowerOperate, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.SnoPowerOperatorActive, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+100, &t.SnoPowerOperateActive, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+104, &t.Unk_359810e, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+108, &t.NCooldown, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.Unk_9c8478e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+116, &t.Unk_d45ed2d, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.Unk_f6b20b7, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+124, &t.Unk_54513b8, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.Unk_fd1f378, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+132, &t.Unk_487c14, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+136, &t.Unk_87f2609, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+140, &t.Unk_158eb4f, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+144, &t.Unk_ab58cd3, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+148, &t.Unk_91a3966, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+152, &t.Unk_25312e5, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+156, &t.Unk_4be4371, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+160, &t.EClassRestriction, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+168, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *HeadstoneGizmoData) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("FDisableNonFriendlyOperation", &t.FDisableNonFriendlyOperation)
	cb.Do("FWalkToCenter", &t.FWalkToCenter)
	cb.Do("FGizmoStartsDisabled", &t.FGizmoStartsDisabled)
	cb.Do("FUseStringListName", &t.FUseStringListName)
	cb.Do("FForceMinimapIcon", &t.FForceMinimapIcon)
	cb.Do("FlOperationRadius", &t.FlOperationRadius)
	cb.Do("Unk_d0b1df5", &t.Unk_d0b1df5)
	cb.Do("FlGizmoUseTime", &t.FlGizmoUseTime)
	cb.Do("SnoChannelingEffect", &t.SnoChannelingEffect)
	cb.Do("Unk_2767229", &t.Unk_2767229)
	cb.Do("FGizmoShowProgressBar", &t.FGizmoShowProgressBar)
	cb.Do("Unk_6d9ebe1", &t.Unk_6d9ebe1)
	cb.Do("Unk_5456245", &t.Unk_5456245)
	cb.Do("Unk_af5815a", &t.Unk_af5815a)
	cb.Do("SnoOnClickEffect", &t.SnoOnClickEffect)
	cb.Do("SnoPickedUpEffect", &t.SnoPickedUpEffect)
	cb.Do("SnoDropOnGroundEffect", &t.SnoDropOnGroundEffect)
	cb.Do("TConditionData", &t.TConditionData)
	cb.Do("SnoPowerOperator", &t.SnoPowerOperator)
	cb.Do("SnoPowerOperate", &t.SnoPowerOperate)
	cb.Do("SnoPowerOperatorActive", &t.SnoPowerOperatorActive)
	cb.Do("SnoPowerOperateActive", &t.SnoPowerOperateActive)
	cb.Do("Unk_359810e", &t.Unk_359810e)
	cb.Do("NCooldown", &t.NCooldown)
	cb.Do("Unk_9c8478e", &t.Unk_9c8478e)
	cb.Do("Unk_d45ed2d", &t.Unk_d45ed2d)
	cb.Do("Unk_f6b20b7", &t.Unk_f6b20b7)
	cb.Do("Unk_54513b8", &t.Unk_54513b8)
	cb.Do("Unk_fd1f378", &t.Unk_fd1f378)
	cb.Do("Unk_487c14", &t.Unk_487c14)
	cb.Do("Unk_87f2609", &t.Unk_87f2609)
	cb.Do("Unk_158eb4f", &t.Unk_158eb4f)
	cb.Do("Unk_ab58cd3", &t.Unk_ab58cd3)
	cb.Do("Unk_91a3966", &t.Unk_91a3966)
	cb.Do("Unk_25312e5", &t.Unk_25312e5)
	cb.Do("Unk_4be4371", &t.Unk_4be4371)
	cb.Do("EClassRestriction", &t.EClassRestriction)
}

type PrefabData struct {
	DwFlags                 DT_UINT
	Unk_32bf9c6             DT_ENUM
	EFadeMethod             DT_ENUM
	NFadeGroup              DT_INT
	Unk_d094b9a             DT_ENUM
	ECullingLevel           DT_ENUM
	SzLookOverride          DT_UINT
	DwShaderMapOverride     DT_UINT
	SnoTraversalSurface     DT_SNO
	PtRunTimeMaterialValues DT_VARIABLEARRAY[*RunTimeMaterialValues]
}

func (t *PrefabData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.DwFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.Unk_32bf9c6, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.EFadeMethod, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.NFadeGroup, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_d094b9a, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.ECullingLevel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SzLookOverride, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.DwShaderMapOverride, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.SnoTraversalSurface, r, &Options{
		Flags: 1,
		Group: 43,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.PtRunTimeMaterialValues, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+56, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PrefabData) Walk(cb WalkCallback) {
	cb.Do("DwFlags", &t.DwFlags)
	cb.Do("Unk_32bf9c6", &t.Unk_32bf9c6)
	cb.Do("EFadeMethod", &t.EFadeMethod)
	cb.Do("NFadeGroup", &t.NFadeGroup)
	cb.Do("Unk_d094b9a", &t.Unk_d094b9a)
	cb.Do("ECullingLevel", &t.ECullingLevel)
	cb.Do("SzLookOverride", &t.SzLookOverride)
	cb.Do("DwShaderMapOverride", &t.DwShaderMapOverride)
	cb.Do("SnoTraversalSurface", &t.SnoTraversalSurface)
	cb.Do("PtRunTimeMaterialValues", &t.PtRunTimeMaterialValues)
}

type MaterialEnumValue struct {
	Value DT_UINT
}

func (t *MaterialEnumValue) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Value, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+4, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *MaterialEnumValue) Walk(cb WalkCallback) {
	cb.Do("Value", &t.Value)
}

type Type_edf178eb struct {
	// Inherits BuffCallbackBase
	// Inherits PolymorphicBase
	DwType                DT_UINT
	DwPad                 DT_UINT
	SnoTriggerEffectGroup DT_SNO
	ArConditions          DT_POLYMORPHIC_VARIABLEARRAY[*DT_INT64]
}

func (t *Type_edf178eb) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoTriggerEffectGroup, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ArConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_edf178eb) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("SnoTriggerEffectGroup", &t.SnoTriggerEffectGroup)
	cb.Do("ArConditions", &t.ArConditions)
}

type Type_ee444ea1 struct {
	THeader  RequiredMessageHeader
	DwID     DT_UINT
	TSNOName DT_SNO_NAME
}

func (t *Type_ee444ea1) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.DwID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.TSNOName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+28, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_ee444ea1) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("DwID", &t.DwID)
	cb.Do("TSNOName", &t.TSNOName)
}

type Type_ee5a7d4a struct {
	// Inherits PowerConditionBase
	// Inherits PolymorphicBase
	DwType         DT_UINT
	BInverse       DT_INT
	DwPad          DT_UINT
	SzVariableName DT_UINT
	FlValue        DT_FLOAT
}

func (t *Type_ee5a7d4a) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BInverse, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SzVariableName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.FlValue, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_ee5a7d4a) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("BInverse", &t.BInverse)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("SzVariableName", &t.SzVariableName)
	cb.Do("FlValue", &t.FlValue)
}

type SkillTagStruct struct {
	GbidSkillTag DT_GBID
	BSearchOnly  DT_INT
}

func (t *SkillTagStruct) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.GbidSkillTag, r, &Options{
		Flags: 1,
		Group: 56,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.BSearchOnly, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *SkillTagStruct) Walk(cb WalkCallback) {
	cb.Do("GbidSkillTag", &t.GbidSkillTag)
	cb.Do("BSearchOnly", &t.BSearchOnly)
}

type TriggerEventRestoreTimeOfDay struct {
	// Inherits TriggerEvent
	// Inherits PolymorphicBase
	DwType          DT_UINT
	DwPad           DT_UINT
	TConditions     TriggerConditions
	FGenerated      DT_INT
	Unk_6cba752     DT_INT
	DwParentActorID DT_UINT
}

func (t *TriggerEventRestoreTimeOfDay) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.FGenerated, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_6cba752, r, &Options{Flags: 16}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.DwParentActorID, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+80, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TriggerEventRestoreTimeOfDay) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("TConditions", &t.TConditions)
	cb.Do("FGenerated", &t.FGenerated)
	cb.Do("Unk_6cba752", &t.Unk_6cba752)
	cb.Do("DwParentActorID", &t.DwParentActorID)
}

type TempCollisionMesh struct {
	PtVertices  DT_VARIABLEARRAY[*dmFloat4Mirror]
	PtTriangles DT_VARIABLEARRAY[*dmInputTriangleMirror]
}

func (t *TempCollisionMesh) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.PtVertices, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.PtTriangles, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TempCollisionMesh) Walk(cb WalkCallback) {
	cb.Do("PtVertices", &t.PtVertices)
	cb.Do("PtTriangles", &t.PtTriangles)
}

type ExplosionDefinition struct {
	DwFlags               DT_UINT
	EType                 DT_ENUM
	WvDirection           DT_VECTOR3D
	Unk_d03716d           Type_cbfdd2ea
	PathRadius            Type_cbfdd2ea
	THorizontalAngleRange DT_RANGE[*DT_FLOAT]
	TVerticalAngleRange   DT_RANGE[*DT_FLOAT]
	FlCutoffRadius        DT_FLOAT
	AHorizontalAngle      DT_FLOAT
	AVerticalAngle        DT_FLOAT
	FlDuration            DT_FLOAT
	FlChance              DT_FLOAT
	FlFrequency           DT_FLOAT
	WpOffsetMin           DT_VECTOR3D
	WpOffsetMax           DT_VECTOR3D
	Unk_c5b3851           DT_FLOAT
}

func (t *ExplosionDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.EType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.WvDirection, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.Unk_d03716d, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.PathRadius, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+144, &t.THorizontalAngleRange, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+152, &t.TVerticalAngleRange, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+160, &t.FlCutoffRadius, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+164, &t.AHorizontalAngle, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+168, &t.AVerticalAngle, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+172, &t.FlDuration, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+176, &t.FlChance, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+180, &t.FlFrequency, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+184, &t.WpOffsetMin, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+196, &t.WpOffsetMax, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+208, &t.Unk_c5b3851, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+216, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ExplosionDefinition) Walk(cb WalkCallback) {
	cb.Do("DwFlags", &t.DwFlags)
	cb.Do("EType", &t.EType)
	cb.Do("WvDirection", &t.WvDirection)
	cb.Do("Unk_d03716d", &t.Unk_d03716d)
	cb.Do("PathRadius", &t.PathRadius)
	cb.Do("THorizontalAngleRange", &t.THorizontalAngleRange)
	cb.Do("TVerticalAngleRange", &t.TVerticalAngleRange)
	cb.Do("FlCutoffRadius", &t.FlCutoffRadius)
	cb.Do("AHorizontalAngle", &t.AHorizontalAngle)
	cb.Do("AVerticalAngle", &t.AVerticalAngle)
	cb.Do("FlDuration", &t.FlDuration)
	cb.Do("FlChance", &t.FlChance)
	cb.Do("FlFrequency", &t.FlFrequency)
	cb.Do("WpOffsetMin", &t.WpOffsetMin)
	cb.Do("WpOffsetMax", &t.WpOffsetMax)
	cb.Do("Unk_c5b3851", &t.Unk_c5b3851)
}

type GameTestingProfilingStarted struct {
	THeader     RequiredMessageHeader
	SampleIndex DT_INT
}

func (t *GameTestingProfilingStarted) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SampleIndex, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+20, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *GameTestingProfilingStarted) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("SampleIndex", &t.SampleIndex)
}

type MarkerLevelAreaVolumeData struct {
	// Inherits MarkerDataBase
	// Inherits PolymorphicBase
	DwType       DT_UINT
	DwPad        DT_UINT
	Unk_97fcdff  DT_ENUM
	SnoLevelArea DT_SNO
}

func (t *MarkerLevelAreaVolumeData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_97fcdff, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.SnoLevelArea, r, &Options{
		Flags: 1,
		Group: 22,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *MarkerLevelAreaVolumeData) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("Unk_97fcdff", &t.Unk_97fcdff)
	cb.Do("SnoLevelArea", &t.SnoLevelArea)
}

type Type_ef933d53 struct {
	Unk_e61966d DT_GBID
	Unk_c80f300 DT_VARIABLEARRAY[*DT_GBID]
	Unk_215b063 DT_GBID
}

func (t *Type_ef933d53) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Unk_e61966d, r, &Options{
		Flags: 1,
		Group: 66,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.Unk_c80f300, r, &Options{
		Flags: 1,
		Group: 66,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_215b063, r, &Options{
		Flags: 1,
		Group: 66,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_ef933d53) Walk(cb WalkCallback) {
	cb.Do("Unk_e61966d", &t.Unk_e61966d)
	cb.Do("Unk_c80f300", &t.Unk_c80f300)
	cb.Do("Unk_215b063", &t.Unk_215b063)
}

type VectorFieldDefinition struct {
	NDimX     DT_INT
	NDimY     DT_INT
	NDimZ     DT_INT
	FlMagMin  DT_FLOAT
	FlMagMax  DT_FLOAT
	Aabb      AABB
	PtSamples DT_VARIABLEARRAY[*DT_VECTOR3D]
}

func (t *VectorFieldDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.NDimX, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.NDimY, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.NDimZ, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.FlMagMin, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.FlMagMax, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.Aabb, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.PtSamples, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+72, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *VectorFieldDefinition) Walk(cb WalkCallback) {
	cb.Do("NDimX", &t.NDimX)
	cb.Do("NDimY", &t.NDimY)
	cb.Do("NDimZ", &t.NDimZ)
	cb.Do("FlMagMin", &t.FlMagMin)
	cb.Do("FlMagMax", &t.FlMagMax)
	cb.Do("Aabb", &t.Aabb)
	cb.Do("PtSamples", &t.PtSamples)
}

type Type_f013302b struct {
	Unk_51d08f2             UIControlHandle
	Unk_a97a767             DT_SNO
	Unk_9a8825c             DT_FLOAT
	Unk_a17abed             DT_INT
	Unk_e5c42a5             DT_INT
	Unk_3e85a0f             DT_RGBACOLOR
	Unk_6b07c49             UIEffect
	SzClickPredicate        DT_CSTRING[*DT_BYTE]
	SzMiddleMax             DT_CSTRING[*DT_BYTE]
	Unk_520cc33             DT_CSTRING[*DT_BYTE]
	Unk_60529d7             DT_CSTRING[*DT_BYTE]
	SzOnGainedFocus         DT_CSTRING[*DT_BYTE]
	SzOnLostFocus           DT_CSTRING[*DT_BYTE]
	SzOnHitRegionEnter      DT_CSTRING[*DT_BYTE]
	SzOnHitRegionExit       DT_CSTRING[*DT_BYTE]
	EHotkey                 DT_ENUM
	EHotkeyAlternate        DT_ENUM
	NButtonPressHorizontal  DT_INT
	NButtonPressVertical    DT_INT
	SnoRightClickSound      DT_SNO
	SnoMiddleClickSound     DT_SNO
	HImageFrameMouseOver    UIImageHandleReference
	HImageFramePressed      UIImageHandleReference
	HImageFrameDisable      UIImageHandleReference
	Unk_1844a00             DT_SNO
	Unk_c43c17c             DT_SNO
	Unk_219d52d             DT_SNO
	Unk_ccba90f             DT_SNO
	RgbaForegroundHighlight DT_RGBACOLOR
	Unk_62ef7cf             DT_RGBACOLOR
	RgbaForegroundPushed    DT_RGBACOLOR
	Unk_9e1e600             DT_RGBACOLOR
	Unk_860d478             DT_RGBACOLOR
	Unk_2895fd8             DT_RGBACOLOR
	Unk_3368b               DT_INT
}

func (t *Type_f013302b) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Unk_51d08f2, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.Unk_a97a767, r, &Options{
		Flags: 1,
		Group: 40,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.Unk_9a8825c, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_a17abed, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.Unk_e5c42a5, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_3e85a0f, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.Unk_6b07c49, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.SzClickPredicate, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.SzMiddleMax, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+104, &t.Unk_520cc33, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.Unk_60529d7, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+136, &t.SzOnGainedFocus, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+152, &t.SzOnLostFocus, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+168, &t.SzOnHitRegionEnter, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+184, &t.SzOnHitRegionExit, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+200, &t.EHotkey, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+204, &t.EHotkeyAlternate, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+208, &t.NButtonPressHorizontal, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+212, &t.NButtonPressVertical, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+216, &t.SnoRightClickSound, r, &Options{
		Flags: 1,
		Group: 40,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+220, &t.SnoMiddleClickSound, r, &Options{
		Flags: 1,
		Group: 40,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+224, &t.HImageFrameMouseOver, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+228, &t.HImageFramePressed, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+232, &t.HImageFrameDisable, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+236, &t.Unk_1844a00, r, &Options{
		Flags: 1,
		Group: 103,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+240, &t.Unk_c43c17c, r, &Options{
		Flags: 1,
		Group: 103,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+244, &t.Unk_219d52d, r, &Options{
		Flags: 1,
		Group: 103,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+248, &t.Unk_ccba90f, r, &Options{
		Flags: 1,
		Group: 103,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+252, &t.RgbaForegroundHighlight, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+256, &t.Unk_62ef7cf, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+260, &t.RgbaForegroundPushed, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+264, &t.Unk_9e1e600, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+268, &t.Unk_860d478, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+272, &t.Unk_2895fd8, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+276, &t.Unk_3368b, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+280, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_f013302b) Walk(cb WalkCallback) {
	cb.Do("Unk_51d08f2", &t.Unk_51d08f2)
	cb.Do("Unk_a97a767", &t.Unk_a97a767)
	cb.Do("Unk_9a8825c", &t.Unk_9a8825c)
	cb.Do("Unk_a17abed", &t.Unk_a17abed)
	cb.Do("Unk_e5c42a5", &t.Unk_e5c42a5)
	cb.Do("Unk_3e85a0f", &t.Unk_3e85a0f)
	cb.Do("Unk_6b07c49", &t.Unk_6b07c49)
	cb.Do("SzClickPredicate", &t.SzClickPredicate)
	cb.Do("SzMiddleMax", &t.SzMiddleMax)
	cb.Do("Unk_520cc33", &t.Unk_520cc33)
	cb.Do("Unk_60529d7", &t.Unk_60529d7)
	cb.Do("SzOnGainedFocus", &t.SzOnGainedFocus)
	cb.Do("SzOnLostFocus", &t.SzOnLostFocus)
	cb.Do("SzOnHitRegionEnter", &t.SzOnHitRegionEnter)
	cb.Do("SzOnHitRegionExit", &t.SzOnHitRegionExit)
	cb.Do("EHotkey", &t.EHotkey)
	cb.Do("EHotkeyAlternate", &t.EHotkeyAlternate)
	cb.Do("NButtonPressHorizontal", &t.NButtonPressHorizontal)
	cb.Do("NButtonPressVertical", &t.NButtonPressVertical)
	cb.Do("SnoRightClickSound", &t.SnoRightClickSound)
	cb.Do("SnoMiddleClickSound", &t.SnoMiddleClickSound)
	cb.Do("HImageFrameMouseOver", &t.HImageFrameMouseOver)
	cb.Do("HImageFramePressed", &t.HImageFramePressed)
	cb.Do("HImageFrameDisable", &t.HImageFrameDisable)
	cb.Do("Unk_1844a00", &t.Unk_1844a00)
	cb.Do("Unk_c43c17c", &t.Unk_c43c17c)
	cb.Do("Unk_219d52d", &t.Unk_219d52d)
	cb.Do("Unk_ccba90f", &t.Unk_ccba90f)
	cb.Do("RgbaForegroundHighlight", &t.RgbaForegroundHighlight)
	cb.Do("Unk_62ef7cf", &t.Unk_62ef7cf)
	cb.Do("RgbaForegroundPushed", &t.RgbaForegroundPushed)
	cb.Do("Unk_9e1e600", &t.Unk_9e1e600)
	cb.Do("Unk_860d478", &t.Unk_860d478)
	cb.Do("Unk_2895fd8", &t.Unk_2895fd8)
	cb.Do("Unk_3368b", &t.Unk_3368b)
}

type EffectGroupPositionXKeyData struct {
	// Inherits EffectGroupKeyData
	// Inherits PolymorphicBase
	DwType     DT_UINT
	DwPad      DT_UINT
	ArKeyItems DT_VARIABLEARRAY[*EffectGroupKey]
}

func (t *EffectGroupPositionXKeyData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.ArKeyItems, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *EffectGroupPositionXKeyData) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("ArKeyItems", &t.ArKeyItems)
}

type AttachActorToActorMessage struct {
	THeader                 RequiredMessageHeader
	AnnMain                 DT_ACD_NETWORK_NAME
	AnnAttachment           DT_ACD_NETWORK_NAME
	DwHardPointMain         DT_UINT
	DwHardPointAttachment   DT_UINT
	QRot                    DT_OPTIONAL[*bcQuat]
	FImportHardpointRetreat DT_OPTIONAL[*DT_INT]
}

func (t *AttachActorToActorMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.AnnMain, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.AnnAttachment, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.DwHardPointMain, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.DwHardPointAttachment, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.QRot, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+60, &t.FImportHardpointRetreat, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+68, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *AttachActorToActorMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("AnnMain", &t.AnnMain)
	cb.Do("AnnAttachment", &t.AnnAttachment)
	cb.Do("DwHardPointMain", &t.DwHardPointMain)
	cb.Do("DwHardPointAttachment", &t.DwHardPointAttachment)
	cb.Do("QRot", &t.QRot)
	cb.Do("FImportHardpointRetreat", &t.FImportHardpointRetreat)
}

type ActorBrainData struct {
	EDefaultBrain         DT_ENUM
	EBehaviorType         DT_ENUM
	FlRadiusTriggerRadius DT_FLOAT
	Unk_95830e2           DT_RANGE[*DT_FLOAT]
	FRadiusTriggerOneShot DT_INT
	Unk_595c677           Type_3ecfe93c
	SnoRetreatOverride    DT_SNO
}

func (t *ActorBrainData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.EDefaultBrain, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.EBehaviorType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.FlRadiusTriggerRadius, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.Unk_95830e2, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.FRadiusTriggerOneShot, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_595c677, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.SnoRetreatOverride, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ActorBrainData) Walk(cb WalkCallback) {
	cb.Do("EDefaultBrain", &t.EDefaultBrain)
	cb.Do("EBehaviorType", &t.EBehaviorType)
	cb.Do("FlRadiusTriggerRadius", &t.FlRadiusTriggerRadius)
	cb.Do("Unk_95830e2", &t.Unk_95830e2)
	cb.Do("FRadiusTriggerOneShot", &t.FRadiusTriggerOneShot)
	cb.Do("Unk_595c677", &t.Unk_595c677)
	cb.Do("SnoRetreatOverride", &t.SnoRetreatOverride)
}

type SavePointPortalGizmoData struct {
	// Inherits ActorGizmoData
	// Inherits PolymorphicBase
	DwType                       DT_UINT
	DwPad                        DT_UINT
	FDisableNonFriendlyOperation DT_INT
	FWalkToCenter                DT_INT
	FGizmoStartsDisabled         DT_INT
	FUseStringListName           DT_INT
	FForceMinimapIcon            DT_INT
	FlOperationRadius            DT_FLOAT
	Unk_d0b1df5                  DT_FLOAT
	FlGizmoUseTime               DT_FLOAT
	SnoChannelingEffect          DT_SNO
	Unk_2767229                  DT_INT
	FGizmoShowProgressBar        DT_INT
	Unk_6d9ebe1                  DT_INT
	Unk_5456245                  DT_INT
	Unk_af5815a                  DT_INT
	SnoOnClickEffect             DT_SNO
	SnoPickedUpEffect            DT_SNO
	SnoDropOnGroundEffect        DT_SNO
	TConditionData               GizmoConditionData
	SnoPowerOperator             DT_SNO
	SnoPowerOperate              DT_SNO
	SnoPowerOperatorActive       DT_SNO
	SnoPowerOperateActive        DT_SNO
	Unk_359810e                  DT_INT
	NCooldown                    DT_UINT
	Unk_9c8478e                  DT_UINT
	Unk_d45ed2d                  DT_INT
	Unk_f6b20b7                  DT_INT
	Unk_54513b8                  DT_INT
	Unk_fd1f378                  DT_UINT
	Unk_487c14                   DT_UINT
	Unk_87f2609                  DT_UINT
	Unk_158eb4f                  DT_FLOAT
	Unk_ab58cd3                  DT_ENUM
	Unk_91a3966                  DT_UINT
	Unk_25312e5                  DT_UINT
	Unk_4be4371                  DT_INT
	DwEntranceName               DT_STARTLOC_NAME
	Unk_d2a1272                  DT_INT
}

func (t *SavePointPortalGizmoData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.FDisableNonFriendlyOperation, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.FWalkToCenter, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.FGizmoStartsDisabled, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.FUseStringListName, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.FForceMinimapIcon, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.FlOperationRadius, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.Unk_d0b1df5, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.FlGizmoUseTime, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.SnoChannelingEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.Unk_2767229, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.FGizmoShowProgressBar, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+60, &t.Unk_6d9ebe1, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.Unk_5456245, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.Unk_af5815a, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.SnoOnClickEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.SnoPickedUpEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.SnoDropOnGroundEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.TConditionData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.SnoPowerOperator, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.SnoPowerOperate, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.SnoPowerOperatorActive, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+100, &t.SnoPowerOperateActive, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+104, &t.Unk_359810e, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+108, &t.NCooldown, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.Unk_9c8478e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+116, &t.Unk_d45ed2d, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.Unk_f6b20b7, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+124, &t.Unk_54513b8, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.Unk_fd1f378, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+132, &t.Unk_487c14, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+136, &t.Unk_87f2609, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+140, &t.Unk_158eb4f, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+144, &t.Unk_ab58cd3, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+148, &t.Unk_91a3966, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+152, &t.Unk_25312e5, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+156, &t.Unk_4be4371, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+160, &t.DwEntranceName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+164, &t.Unk_d2a1272, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+168, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *SavePointPortalGizmoData) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("FDisableNonFriendlyOperation", &t.FDisableNonFriendlyOperation)
	cb.Do("FWalkToCenter", &t.FWalkToCenter)
	cb.Do("FGizmoStartsDisabled", &t.FGizmoStartsDisabled)
	cb.Do("FUseStringListName", &t.FUseStringListName)
	cb.Do("FForceMinimapIcon", &t.FForceMinimapIcon)
	cb.Do("FlOperationRadius", &t.FlOperationRadius)
	cb.Do("Unk_d0b1df5", &t.Unk_d0b1df5)
	cb.Do("FlGizmoUseTime", &t.FlGizmoUseTime)
	cb.Do("SnoChannelingEffect", &t.SnoChannelingEffect)
	cb.Do("Unk_2767229", &t.Unk_2767229)
	cb.Do("FGizmoShowProgressBar", &t.FGizmoShowProgressBar)
	cb.Do("Unk_6d9ebe1", &t.Unk_6d9ebe1)
	cb.Do("Unk_5456245", &t.Unk_5456245)
	cb.Do("Unk_af5815a", &t.Unk_af5815a)
	cb.Do("SnoOnClickEffect", &t.SnoOnClickEffect)
	cb.Do("SnoPickedUpEffect", &t.SnoPickedUpEffect)
	cb.Do("SnoDropOnGroundEffect", &t.SnoDropOnGroundEffect)
	cb.Do("TConditionData", &t.TConditionData)
	cb.Do("SnoPowerOperator", &t.SnoPowerOperator)
	cb.Do("SnoPowerOperate", &t.SnoPowerOperate)
	cb.Do("SnoPowerOperatorActive", &t.SnoPowerOperatorActive)
	cb.Do("SnoPowerOperateActive", &t.SnoPowerOperateActive)
	cb.Do("Unk_359810e", &t.Unk_359810e)
	cb.Do("NCooldown", &t.NCooldown)
	cb.Do("Unk_9c8478e", &t.Unk_9c8478e)
	cb.Do("Unk_d45ed2d", &t.Unk_d45ed2d)
	cb.Do("Unk_f6b20b7", &t.Unk_f6b20b7)
	cb.Do("Unk_54513b8", &t.Unk_54513b8)
	cb.Do("Unk_fd1f378", &t.Unk_fd1f378)
	cb.Do("Unk_487c14", &t.Unk_487c14)
	cb.Do("Unk_87f2609", &t.Unk_87f2609)
	cb.Do("Unk_158eb4f", &t.Unk_158eb4f)
	cb.Do("Unk_ab58cd3", &t.Unk_ab58cd3)
	cb.Do("Unk_91a3966", &t.Unk_91a3966)
	cb.Do("Unk_25312e5", &t.Unk_25312e5)
	cb.Do("Unk_4be4371", &t.Unk_4be4371)
	cb.Do("DwEntranceName", &t.DwEntranceName)
	cb.Do("Unk_d2a1272", &t.Unk_d2a1272)
}

type EffectItem struct {
	DwWeight            DT_UINT
	SnoSurfaces         DT_VARIABLEARRAY[*DT_SNO]
	ArWeaponItemTypes   DT_VARIABLEARRAY[*DT_SNO]
	ArMonsterArchetypes DT_VARIABLEARRAY[*DT_UINT]
	ArActorVariantTypes DT_VARIABLEARRAY[*DT_ENUM]
	ArTopology          DT_VARIABLEARRAY[*DT_ENUM]
	Unk_43e7b5a         DT_VARIABLEARRAY[*DT_ENUM]
	DwHash              DT_UINT
	TMsgTriggeredEvents MsgTriggeredEvent
}

func (t *EffectItem) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.DwWeight, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.SnoSurfaces, r, &Options{
		Flags: 1,
		Group: 43,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ArWeaponItemTypes, r, &Options{
		Flags: 1,
		Group: 98,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.ArMonsterArchetypes, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.ArActorVariantTypes, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.ArTopology, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.Unk_43e7b5a, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+104, &t.DwHash, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.TMsgTriggeredEvents, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+152, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *EffectItem) Walk(cb WalkCallback) {
	cb.Do("DwWeight", &t.DwWeight)
	cb.Do("SnoSurfaces", &t.SnoSurfaces)
	cb.Do("ArWeaponItemTypes", &t.ArWeaponItemTypes)
	cb.Do("ArMonsterArchetypes", &t.ArMonsterArchetypes)
	cb.Do("ArActorVariantTypes", &t.ArActorVariantTypes)
	cb.Do("ArTopology", &t.ArTopology)
	cb.Do("Unk_43e7b5a", &t.Unk_43e7b5a)
	cb.Do("DwHash", &t.DwHash)
	cb.Do("TMsgTriggeredEvents", &t.TMsgTriggeredEvents)
}

type AppearanceMaterial struct {
	DwMaterialHash   DT_UINT
	FPersonaMaterial DT_INT
	DwPersona        DT_BYTE
	PtSOAs           DT_VARIABLEARRAY[*SubObjectAppearance]
}

func (t *AppearanceMaterial) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.DwMaterialHash, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.FPersonaMaterial, r, &Options{Flags: 16}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwPersona, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.PtSOAs, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *AppearanceMaterial) Walk(cb WalkCallback) {
	cb.Do("DwMaterialHash", &t.DwMaterialHash)
	cb.Do("FPersonaMaterial", &t.FPersonaMaterial)
	cb.Do("DwPersona", &t.DwPersona)
	cb.Do("PtSOAs", &t.PtSOAs)
}

type ScriptEventParamPrefabScopedActorGroup struct {
	// Inherits ScriptEventParamBase
	// Inherits PolymorphicBase
	DwType                     DT_UINT
	EParamType                 DT_ENUM
	DwPad                      DT_UINT
	GbidPrefabScopedActorGroup DT_GBID
}

func (t *ScriptEventParamPrefabScopedActorGroup) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.EParamType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.GbidPrefabScopedActorGroup, r, &Options{
		Flags: 1,
		Group: 51,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ScriptEventParamPrefabScopedActorGroup) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("EParamType", &t.EParamType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("GbidPrefabScopedActorGroup", &t.GbidPrefabScopedActorGroup)
}

type Type_f0f63f3d struct {
	Unk_c6ab696 DT_UINT
}

func (t *Type_f0f63f3d) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Unk_c6ab696, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+4, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_f0f63f3d) Walk(cb WalkCallback) {
	cb.Do("Unk_c6ab696", &t.Unk_c6ab696)
}

type HiddenCacheEntry struct {
	THeader          GBIDHeader
	SnoTrackedReward DT_SNO
}

func (t *HiddenCacheEntry) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+260, &t.SnoTrackedReward, r, &Options{
		Flags: 1,
		Group: 126,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+264, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *HiddenCacheEntry) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("SnoTrackedReward", &t.SnoTrackedReward)
}

type ScriptEventParamLinkedMarkerInGroup struct {
	// Inherits ScriptEventParamBase
	// Inherits PolymorphicBase
	DwType      DT_UINT
	EParamType  DT_ENUM
	DwPad       DT_UINT
	DwGroupHash DT_UINT
	IdValue     DT_INT
	SzGroup     DT_CSTRING[*DT_BYTE]
}

func (t *ScriptEventParamLinkedMarkerInGroup) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.EParamType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.DwGroupHash, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.IdValue, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.SzGroup, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ScriptEventParamLinkedMarkerInGroup) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("EParamType", &t.EParamType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("DwGroupHash", &t.DwGroupHash)
	cb.Do("IdValue", &t.IdValue)
	cb.Do("SzGroup", &t.SzGroup)
}

type Type_f1ddf15d struct {
	THeader RequiredMessageHeader
	TTrace  TraceMessage
}

func (t *Type_f1ddf15d) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TTrace, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+96, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_f1ddf15d) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("TTrace", &t.TTrace)
}

type GameSyncedDebugDataMessage struct {
	THeader     RequiredMessageHeader
	Unk_b6d083b GameSyncedDebugData
}

func (t *GameSyncedDebugDataMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_b6d083b, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+416, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *GameSyncedDebugDataMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("Unk_b6d083b", &t.Unk_b6d083b)
}

type dmFrameMirror struct {
	Q DT_VECTOR4D
	P DT_VECTOR4D
	S DT_VECTOR4D
}

func (t *dmFrameMirror) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Q, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.P, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.S, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *dmFrameMirror) Walk(cb WalkCallback) {
	cb.Do("Q", &t.Q)
	cb.Do("P", &t.P)
	cb.Do("S", &t.S)
}

type LookAtBone struct {
	Unk_e1f84a7         HardpointLink
	AYawMin             DT_FLOAT
	AYawMax             DT_FLOAT
	Unk_5559079         DT_RANGE[*DT_FLOAT]
	APitchMin           DT_FLOAT
	APitchMax           DT_FLOAT
	Unk_5d19a0          DT_RANGE[*DT_FLOAT]
	APitchOffset        DT_FLOAT
	ASpeed              DT_FLOAT
	BYawOnly            DT_INT
	BDynamicPitchOffset DT_INT
	FlDelay             DT_FLOAT
}

func (t *LookAtBone) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Unk_e1f84a7, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.AYawMin, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.AYawMax, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_5559079, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.APitchMin, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.APitchMax, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.Unk_5d19a0, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.APitchOffset, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.ASpeed, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.BYawOnly, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.BDynamicPitchOffset, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.FlDelay, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+60, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *LookAtBone) Walk(cb WalkCallback) {
	cb.Do("Unk_e1f84a7", &t.Unk_e1f84a7)
	cb.Do("AYawMin", &t.AYawMin)
	cb.Do("AYawMax", &t.AYawMax)
	cb.Do("Unk_5559079", &t.Unk_5559079)
	cb.Do("APitchMin", &t.APitchMin)
	cb.Do("APitchMax", &t.APitchMax)
	cb.Do("Unk_5d19a0", &t.Unk_5d19a0)
	cb.Do("APitchOffset", &t.APitchOffset)
	cb.Do("ASpeed", &t.ASpeed)
	cb.Do("BYawOnly", &t.BYawOnly)
	cb.Do("BDynamicPitchOffset", &t.BDynamicPitchOffset)
	cb.Do("FlDelay", &t.FlDelay)
}

type LookAtData struct {
	FlRange     DT_FLOAT
	Unk_5115351 DT_FLOAT
	ArBones     DT_VARIABLEARRAY[*LookAtBone]
	TSlopeBone  SlopeBone
	Unk_8470ffc HardpointLink
}

func (t *LookAtData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.FlRange, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.Unk_5115351, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.ArBones, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.TSlopeBone, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.Unk_8470ffc, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *LookAtData) Walk(cb WalkCallback) {
	cb.Do("FlRange", &t.FlRange)
	cb.Do("Unk_5115351", &t.Unk_5115351)
	cb.Do("ArBones", &t.ArBones)
	cb.Do("TSlopeBone", &t.TSlopeBone)
	cb.Do("Unk_8470ffc", &t.Unk_8470ffc)
}

type NecroArmySpecMessage struct {
	THeader         RequiredMessageHeader
	EUnitType       DT_ENUM
	ESpecialization DT_ENUM
}

func (t *NecroArmySpecMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.EUnitType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.ESpecialization, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *NecroArmySpecMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("EUnitType", &t.EUnitType)
	cb.Do("ESpecialization", &t.ESpecialization)
}

type OnRetreatCallback struct {
	// Inherits BuffCallbackBase
	// Inherits PolymorphicBase
	DwType                DT_UINT
	DwPad                 DT_UINT
	SnoTriggerEffectGroup DT_SNO
	ArConditions          DT_POLYMORPHIC_VARIABLEARRAY[*DT_INT64]
}

func (t *OnRetreatCallback) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoTriggerEffectGroup, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ArConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *OnRetreatCallback) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("SnoTriggerEffectGroup", &t.SnoTriggerEffectGroup)
	cb.Do("ArConditions", &t.ArConditions)
}

type GlobalCharacterPresets struct {
	// Inherits GlobalBase
	// Inherits PolymorphicBase
	DwType   DT_UINT
	DwPad    DT_UINT
	ArHeroes DT_VARIABLEARRAY[*HeroPreset]
	ArMounts DT_VARIABLEARRAY[*MountPreset]
	ArNPCs   DT_VARIABLEARRAY[*NPCPreset]
}

func (t *GlobalCharacterPresets) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.ArHeroes, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.ArMounts, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.ArNPCs, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+64, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *GlobalCharacterPresets) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("ArHeroes", &t.ArHeroes)
	cb.Do("ArMounts", &t.ArMounts)
	cb.Do("ArNPCs", &t.ArNPCs)
}

type StopConvLineMessage struct {
	THeader        RequiredMessageHeader
	NConvLineGUID  DT_INT
	FStoppedByUser DT_INT
}

func (t *StopConvLineMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.NConvLineGUID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.FStoppedByUser, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *StopConvLineMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("NConvLineGUID", &t.NConvLineGUID)
	cb.Do("FStoppedByUser", &t.FStoppedByUser)
}

type Type_f2e060ba struct {
	Unk_bafabd7             UIImageHandleReference
	HImageFrameSelected     UIImageHandleReference
	HImageFrameUnselected   UIImageHandleReference
	SnoTiledStyleMouseOver  DT_SNO
	SnoTiledStyleSelected   DT_SNO
	SnoTiledStyleUnselected DT_SNO
}

func (t *Type_f2e060ba) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Unk_bafabd7, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.HImageFrameSelected, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.HImageFrameUnselected, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.SnoTiledStyleMouseOver, r, &Options{
		Flags: 1,
		Group: 103,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoTiledStyleSelected, r, &Options{
		Flags: 1,
		Group: 103,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.SnoTiledStyleUnselected, r, &Options{
		Flags: 1,
		Group: 103,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_f2e060ba) Walk(cb WalkCallback) {
	cb.Do("Unk_bafabd7", &t.Unk_bafabd7)
	cb.Do("HImageFrameSelected", &t.HImageFrameSelected)
	cb.Do("HImageFrameUnselected", &t.HImageFrameUnselected)
	cb.Do("SnoTiledStyleMouseOver", &t.SnoTiledStyleMouseOver)
	cb.Do("SnoTiledStyleSelected", &t.SnoTiledStyleSelected)
	cb.Do("SnoTiledStyleUnselected", &t.SnoTiledStyleUnselected)
}

type ActorDeathData struct {
	ArDeathEffectGroups DT_FIXEDARRAY[*DT_SNO]
	SnoPowerDeath       DT_SNO
	Unk_2a26311         DT_SNO
	Unk_6f9a204         DT_INT
}

func (t *ActorDeathData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.ArDeathEffectGroups, r, &Options{
		ArrayLength: 6,
		Flags:       1,
		Group:       14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SnoPowerDeath, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.Unk_2a26311, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.Unk_6f9a204, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+36, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ActorDeathData) Walk(cb WalkCallback) {
	cb.Do("ArDeathEffectGroups", &t.ArDeathEffectGroups)
	cb.Do("SnoPowerDeath", &t.SnoPowerDeath)
	cb.Do("Unk_2a26311", &t.Unk_2a26311)
	cb.Do("Unk_6f9a204", &t.Unk_6f9a204)
}

type PowerConditionParagonNodeIsPurchased struct {
	// Inherits PowerConditionBase
	// Inherits PolymorphicBase
	DwType         DT_UINT
	BInverse       DT_INT
	DwPad          DT_UINT
	ESubject       DT_ENUM
	SnoParagonNode DT_SNO
}

func (t *PowerConditionParagonNodeIsPurchased) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BInverse, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ESubject, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.SnoParagonNode, r, &Options{
		Flags: 513,
		Group: 106,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PowerConditionParagonNodeIsPurchased) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("BInverse", &t.BInverse)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("ESubject", &t.ESubject)
	cb.Do("SnoParagonNode", &t.SnoParagonNode)
}

type TriggerEventPlayConversationLine struct {
	// Inherits TriggerEventRangedDuration
	// Inherits TriggerEvent
	// Inherits PolymorphicBase
	DwType               DT_UINT
	TConditions          TriggerConditions
	FGenerated           DT_INT
	Unk_6cba752          DT_INT
	DwParentActorID      DT_UINT
	TDuration            DT_FLOAT
	DwTriggerFlags       DT_UINT
	DwTriggerFlagsEx     DT_UINT
	TCleanup             TriggerCleanup
	Unk_49e9257          DT_INT
	Unk_5490979          DT_INT
	DwPad                DT_UINT
	DwConversationNodeID DT_UINT
	DwActorID            DT_UINT
	Unk_acdb8a3          DT_INT
	Unk_e8a81a5          DT_UINT
}

func (t *TriggerEventPlayConversationLine) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.FGenerated, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_6cba752, r, &Options{Flags: 16}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.DwParentActorID, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.TDuration, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.DwTriggerFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.DwTriggerFlagsEx, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.TCleanup, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+116, &t.Unk_49e9257, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.Unk_5490979, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+124, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.DwConversationNodeID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+132, &t.DwActorID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+136, &t.Unk_acdb8a3, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+140, &t.Unk_e8a81a5, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+144, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TriggerEventPlayConversationLine) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("TConditions", &t.TConditions)
	cb.Do("FGenerated", &t.FGenerated)
	cb.Do("Unk_6cba752", &t.Unk_6cba752)
	cb.Do("DwParentActorID", &t.DwParentActorID)
	cb.Do("TDuration", &t.TDuration)
	cb.Do("DwTriggerFlags", &t.DwTriggerFlags)
	cb.Do("DwTriggerFlagsEx", &t.DwTriggerFlagsEx)
	cb.Do("TCleanup", &t.TCleanup)
	cb.Do("Unk_49e9257", &t.Unk_49e9257)
	cb.Do("Unk_5490979", &t.Unk_5490979)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("DwConversationNodeID", &t.DwConversationNodeID)
	cb.Do("DwActorID", &t.DwActorID)
	cb.Do("Unk_acdb8a3", &t.Unk_acdb8a3)
	cb.Do("Unk_e8a81a5", &t.Unk_e8a81a5)
}

type ACDTranslateDetPathMessage struct {
	THeader             RequiredMessageHeader
	Ann                 DT_ACD_NETWORK_NAME
	EDPath              DT_ENUM
	TSeed               RandomNumberGenerator
	WvVelocity          DT_VECTOR3D
	AOriginalYaw        DT_FLOAT
	VStartPos           DT_VECTOR3D
	VTargetPos          DT_VECTOR3D
	UMoveFlags          DT_UINT
	SnoPowerPassability DT_SNO
	NInt0               DT_INT
	FlVar0              DT_FLOAT
	FlVar1              DT_FLOAT
	FlVar2              DT_FLOAT
	FlVar3              DT_FLOAT
	FlVar4              DT_FLOAT
	FlSpeedMult         DT_FLOAT
}

func (t *ACDTranslateDetPathMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Ann, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.EDPath, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.TSeed, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.WvVelocity, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.AOriginalYaw, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.VStartPos, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.VTargetPos, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.UMoveFlags, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.SnoPowerPassability, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.NInt0, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.FlVar0, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.FlVar1, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.FlVar2, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+100, &t.FlVar3, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+104, &t.FlVar4, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+108, &t.FlSpeedMult, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+112, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ACDTranslateDetPathMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("Ann", &t.Ann)
	cb.Do("EDPath", &t.EDPath)
	cb.Do("TSeed", &t.TSeed)
	cb.Do("WvVelocity", &t.WvVelocity)
	cb.Do("AOriginalYaw", &t.AOriginalYaw)
	cb.Do("VStartPos", &t.VStartPos)
	cb.Do("VTargetPos", &t.VTargetPos)
	cb.Do("UMoveFlags", &t.UMoveFlags)
	cb.Do("SnoPowerPassability", &t.SnoPowerPassability)
	cb.Do("NInt0", &t.NInt0)
	cb.Do("FlVar0", &t.FlVar0)
	cb.Do("FlVar1", &t.FlVar1)
	cb.Do("FlVar2", &t.FlVar2)
	cb.Do("FlVar3", &t.FlVar3)
	cb.Do("FlVar4", &t.FlVar4)
	cb.Do("FlSpeedMult", &t.FlSpeedMult)
}

type EndConversationMessage struct {
	THeader         RequiredMessageHeader
	SnoConversation DT_SNO
	Unk_1dc956e     DT_UINT
}

func (t *EndConversationMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoConversation, r, &Options{
		Flags: 1,
		Group: 12,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.Unk_1dc956e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *EndConversationMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("SnoConversation", &t.SnoConversation)
	cb.Do("Unk_1dc956e", &t.Unk_1dc956e)
}

type Type_f3f5a120 struct {
	SzOnKey     DT_CSTRING[*DT_BYTE]
	Unk_147ed31 DT_INT
}

func (t *Type_f3f5a120) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SzOnKey, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_147ed31, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_f3f5a120) Walk(cb WalkCallback) {
	cb.Do("SzOnKey", &t.SzOnKey)
	cb.Do("Unk_147ed31", &t.Unk_147ed31)
}

type MarkerSetDefinition struct {
	TMarkerSet                 DT_VARIABLEARRAY[*Marker]
	DwMarkerSetFlags           DT_UINT
	NLabel                     DT_GBID
	SnoCampaignEnableCondition DT_SNO
	ArPrefabDataInfo           DT_VARIABLEARRAY[*PrefabDataInfo]
	PtPrefabDataMap            DT_INT64
	PtChunks                   DT_VARIABLEARRAY[*MarkerInstanceChunk]
	ArVertexAOOffsets          DT_VARIABLEARRAY[*Type_9e555889]
	Unk_6458d11                DT_VARIABLEARRAY[*Type_6ee9427a]
	Unk_2bbd1d                 Type_c8d78ce7
	ArVertexAO                 DT_VARIABLEARRAY[*DT_BYTE]
	Unk_2f217b0                DT_INT
	Unk_d0a9662                DT_INT64
}

func (t *MarkerSetDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.TMarkerSet, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.DwMarkerSetFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.NLabel, r, &Options{
		Flags: 1,
		Group: 4,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.SnoCampaignEnableCondition, r, &Options{
		Flags: 1,
		Group: 51,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.ArPrefabDataInfo, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.PtPrefabDataMap, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.PtChunks, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.ArVertexAOOffsets, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.Unk_6458d11, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.Unk_2bbd1d, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+256, &t.ArVertexAO, r, &Options{Flags: 2097152}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+272, &t.Unk_2f217b0, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+280, &t.Unk_d0a9662, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if _, err := r.Seek(p+288, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *MarkerSetDefinition) Walk(cb WalkCallback) {
	cb.Do("TMarkerSet", &t.TMarkerSet)
	cb.Do("DwMarkerSetFlags", &t.DwMarkerSetFlags)
	cb.Do("NLabel", &t.NLabel)
	cb.Do("SnoCampaignEnableCondition", &t.SnoCampaignEnableCondition)
	cb.Do("ArPrefabDataInfo", &t.ArPrefabDataInfo)
	cb.Do("PtPrefabDataMap", &t.PtPrefabDataMap)
	cb.Do("PtChunks", &t.PtChunks)
	cb.Do("ArVertexAOOffsets", &t.ArVertexAOOffsets)
	cb.Do("Unk_6458d11", &t.Unk_6458d11)
	cb.Do("Unk_2bbd1d", &t.Unk_2bbd1d)
	cb.Do("ArVertexAO", &t.ArVertexAO)
	cb.Do("Unk_2f217b0", &t.Unk_2f217b0)
	cb.Do("Unk_d0a9662", &t.Unk_d0a9662)
}

type PrefabCustomizedMarker struct {
	TMarker Marker
}

func (t *PrefabCustomizedMarker) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.TMarker, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+192, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PrefabCustomizedMarker) Walk(cb WalkCallback) {
	cb.Do("TMarker", &t.TMarker)
}

type EffectGroupMaterialTrack struct {
	// Inherits EffectGroupStandardTrack
	// Inherits EffectGroupTrack
	// Inherits PolymorphicBase
	DwType DT_UINT
	DwPad  DT_UINT
}

func (t *EffectGroupMaterialTrack) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *EffectGroupMaterialTrack) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
}

type PlayerWarpedMessage struct {
	THeader     RequiredMessageHeader
	Unk_e012d2b DT_INT
	EWarpReason DT_ENUM
}

func (t *PlayerWarpedMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_e012d2b, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.EWarpReason, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PlayerWarpedMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("Unk_e012d2b", &t.Unk_e012d2b)
	cb.Do("EWarpReason", &t.EWarpReason)
}

type TryConsoleCommand struct {
	THeader               RequiredMessageHeader
	DwPlayerGameAccountId DT_UINT
	Unk_243faa3           DT_OPTIONAL[*DT_UINT]
	UsMessage             DT_CHARARRAY
	TPlaceTarget          SharedServerWorldPlace
	AnnTarget             DT_ACD_NETWORK_NAME
	DwFlags               DT_UINT
}

func (t *TryConsoleCommand) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.DwPlayerGameAccountId, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.Unk_243faa3, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.UsMessage, r, &Options{
		ArrayLength: 1024,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1052, &t.TPlaceTarget, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1072, &t.AnnTarget, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1080, &t.DwFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if _, err := r.Seek(p+1084, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TryConsoleCommand) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("DwPlayerGameAccountId", &t.DwPlayerGameAccountId)
	cb.Do("Unk_243faa3", &t.Unk_243faa3)
	cb.Do("UsMessage", &t.UsMessage)
	cb.Do("TPlaceTarget", &t.TPlaceTarget)
	cb.Do("AnnTarget", &t.AnnTarget)
	cb.Do("DwFlags", &t.DwFlags)
}

type Type_f49e9532 struct {
	BEnabled               DT_INT
	Unk_f14ffed            DT_VECTOR3D
	Unk_4899292            Type_cbfdd2ea
	Unk_169823a            Type_cbfdd2ea
	FlCloudIntensity       DT_FLOAT
	Unk_beb976c            Type_cbfdd2ea
	Unk_99175b8            Type_cbfdd2ea
	PathCloudTypeBias      Type_cbfdd2ea
	Unk_d14bc79            DT_FLOAT
	Unk_f852d87            DT_FLOAT
	Unk_86d2585            DT_FLOAT
	Unk_331d48f            DT_VECTOR2D
	Unk_67b3c4a            DT_FLOAT
	Unk_1ecb588            DT_FLOAT
	Unk_211837d            DT_VECTOR2D
	Unk_95e2b10            Type_cbfdd2ea
	Unk_b9a067e            Type_cbfdd2ea
	Unk_2f13301            Type_cbfdd2ea
	Unk_caea994            DT_FLOAT
	Unk_e4f6034            DT_FLOAT
	PathTurbulenceStrength Type_cbfdd2ea
	VCloudWind             DT_VECTOR3D
	Unk_ab0e39e            Type_cbfdd2ea
	Unk_b75acc5            DT_FLOAT
	Unk_fd448cd            DT_FLOAT
	FlCloudStartingHeight  DT_FLOAT
	Unk_6b9f105            DT_INT
	Unk_ddba751            DT_VECTOR3D
	Unk_48b7873            DT_FLOAT
	Unk_b74898b            DT_SNO
	Unk_3ce7419            DT_SNO
}

func (t *Type_f49e9532) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.BEnabled, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.Unk_f14ffed, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_4899292, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_169823a, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.FlCloudIntensity, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+136, &t.Unk_beb976c, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+192, &t.Unk_99175b8, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+248, &t.PathCloudTypeBias, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+304, &t.Unk_d14bc79, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+308, &t.Unk_f852d87, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+312, &t.Unk_86d2585, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+316, &t.Unk_331d48f, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+324, &t.Unk_67b3c4a, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+328, &t.Unk_1ecb588, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+332, &t.Unk_211837d, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+344, &t.Unk_95e2b10, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+400, &t.Unk_b9a067e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+456, &t.Unk_2f13301, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+512, &t.Unk_caea994, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+516, &t.Unk_e4f6034, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+520, &t.PathTurbulenceStrength, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+576, &t.VCloudWind, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+592, &t.Unk_ab0e39e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+648, &t.Unk_b75acc5, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+652, &t.Unk_fd448cd, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+656, &t.FlCloudStartingHeight, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+660, &t.Unk_6b9f105, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+664, &t.Unk_ddba751, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+676, &t.Unk_48b7873, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+680, &t.Unk_b74898b, r, &Options{
		Flags: 1,
		Group: 44,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+684, &t.Unk_3ce7419, r, &Options{
		Flags: 1,
		Group: 44,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+688, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_f49e9532) Walk(cb WalkCallback) {
	cb.Do("BEnabled", &t.BEnabled)
	cb.Do("Unk_f14ffed", &t.Unk_f14ffed)
	cb.Do("Unk_4899292", &t.Unk_4899292)
	cb.Do("Unk_169823a", &t.Unk_169823a)
	cb.Do("FlCloudIntensity", &t.FlCloudIntensity)
	cb.Do("Unk_beb976c", &t.Unk_beb976c)
	cb.Do("Unk_99175b8", &t.Unk_99175b8)
	cb.Do("PathCloudTypeBias", &t.PathCloudTypeBias)
	cb.Do("Unk_d14bc79", &t.Unk_d14bc79)
	cb.Do("Unk_f852d87", &t.Unk_f852d87)
	cb.Do("Unk_86d2585", &t.Unk_86d2585)
	cb.Do("Unk_331d48f", &t.Unk_331d48f)
	cb.Do("Unk_67b3c4a", &t.Unk_67b3c4a)
	cb.Do("Unk_1ecb588", &t.Unk_1ecb588)
	cb.Do("Unk_211837d", &t.Unk_211837d)
	cb.Do("Unk_95e2b10", &t.Unk_95e2b10)
	cb.Do("Unk_b9a067e", &t.Unk_b9a067e)
	cb.Do("Unk_2f13301", &t.Unk_2f13301)
	cb.Do("Unk_caea994", &t.Unk_caea994)
	cb.Do("Unk_e4f6034", &t.Unk_e4f6034)
	cb.Do("PathTurbulenceStrength", &t.PathTurbulenceStrength)
	cb.Do("VCloudWind", &t.VCloudWind)
	cb.Do("Unk_ab0e39e", &t.Unk_ab0e39e)
	cb.Do("Unk_b75acc5", &t.Unk_b75acc5)
	cb.Do("Unk_fd448cd", &t.Unk_fd448cd)
	cb.Do("FlCloudStartingHeight", &t.FlCloudStartingHeight)
	cb.Do("Unk_6b9f105", &t.Unk_6b9f105)
	cb.Do("Unk_ddba751", &t.Unk_ddba751)
	cb.Do("Unk_48b7873", &t.Unk_48b7873)
	cb.Do("Unk_b74898b", &t.Unk_b74898b)
	cb.Do("Unk_3ce7419", &t.Unk_3ce7419)
}

type GlobalQuestData struct {
	// Inherits GlobalBase
	// Inherits PolymorphicBase
	DwType           DT_UINT
	DwPad            DT_UINT
	Unk_23c11ba      DT_INT64
	Unk_8bd826d      DT_INT64
	Unk_d9bddf0      DT_INT64
	Unk_70db485      DT_INT64
	Unk_daeff02      DT_INT64
	Unk_de43c60      DT_INT64
	Unk_8726862      DT_INT64
	Unk_4b26f7       DT_INT64
	Unk_c6d58a9      DT_UINT
	Unk_e318094      DT_UINT
	Unk_a49964c      DT_UINT
	SnoStartingQuest DT_SNO
	TCampaignData    CampaignData
	Unk_36bc0dc      DT_VARIABLEARRAY[*DT_SNO]
	Unk_b419a05      DT_VARIABLEARRAY[*DT_SNO]
	Unk_a70acb6      DT_VARIABLEARRAY[*DT_SNO]
	Unk_68fb226      DT_UINT
	Unk_3286df3      ConnectorProperties
	Unk_dd4bd56      ConnectorProperties
	Unk_195043d      DT_UINT
}

func (t *GlobalQuestData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_23c11ba, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_8bd826d, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.Unk_d9bddf0, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.Unk_70db485, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.Unk_daeff02, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.Unk_de43c60, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.Unk_8726862, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_4b26f7, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.Unk_c6d58a9, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.Unk_e318094, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.Unk_a49964c, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.SnoStartingQuest, r, &Options{
		Flags: 513,
		Group: 31,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.TCampaignData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.Unk_36bc0dc, r, &Options{
		Flags: 513,
		Group: 31,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.Unk_b419a05, r, &Options{
		Flags: 513,
		Group: 22,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+144, &t.Unk_a70acb6, r, &Options{
		Flags: 513,
		Group: 123,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+160, &t.Unk_68fb226, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+164, &t.Unk_3286df3, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+192, &t.Unk_dd4bd56, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+220, &t.Unk_195043d, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+224, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *GlobalQuestData) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("Unk_23c11ba", &t.Unk_23c11ba)
	cb.Do("Unk_8bd826d", &t.Unk_8bd826d)
	cb.Do("Unk_d9bddf0", &t.Unk_d9bddf0)
	cb.Do("Unk_70db485", &t.Unk_70db485)
	cb.Do("Unk_daeff02", &t.Unk_daeff02)
	cb.Do("Unk_de43c60", &t.Unk_de43c60)
	cb.Do("Unk_8726862", &t.Unk_8726862)
	cb.Do("Unk_4b26f7", &t.Unk_4b26f7)
	cb.Do("Unk_c6d58a9", &t.Unk_c6d58a9)
	cb.Do("Unk_e318094", &t.Unk_e318094)
	cb.Do("Unk_a49964c", &t.Unk_a49964c)
	cb.Do("SnoStartingQuest", &t.SnoStartingQuest)
	cb.Do("TCampaignData", &t.TCampaignData)
	cb.Do("Unk_36bc0dc", &t.Unk_36bc0dc)
	cb.Do("Unk_b419a05", &t.Unk_b419a05)
	cb.Do("Unk_a70acb6", &t.Unk_a70acb6)
	cb.Do("Unk_68fb226", &t.Unk_68fb226)
	cb.Do("Unk_3286df3", &t.Unk_3286df3)
	cb.Do("Unk_dd4bd56", &t.Unk_dd4bd56)
	cb.Do("Unk_195043d", &t.Unk_195043d)
}

type BreakableContainerGizmoData struct {
	// Inherits NamedGizmoData
	// Inherits ActorGizmoData
	// Inherits PolymorphicBase
	DwType                       DT_UINT
	DwPad                        DT_UINT
	FDisableNonFriendlyOperation DT_INT
	FWalkToCenter                DT_INT
	FGizmoStartsDisabled         DT_INT
	FUseStringListName           DT_INT
	FForceMinimapIcon            DT_INT
	FlOperationRadius            DT_FLOAT
	Unk_d0b1df5                  DT_FLOAT
	FlGizmoUseTime               DT_FLOAT
	SnoChannelingEffect          DT_SNO
	Unk_2767229                  DT_INT
	FGizmoShowProgressBar        DT_INT
	Unk_6d9ebe1                  DT_INT
	Unk_5456245                  DT_INT
	Unk_af5815a                  DT_INT
	SnoOnClickEffect             DT_SNO
	SnoPickedUpEffect            DT_SNO
	SnoDropOnGroundEffect        DT_SNO
	TConditionData               GizmoConditionData
	SnoPowerOperator             DT_SNO
	SnoPowerOperate              DT_SNO
	SnoPowerOperatorActive       DT_SNO
	SnoPowerOperateActive        DT_SNO
	Unk_359810e                  DT_INT
	NCooldown                    DT_UINT
	Unk_9c8478e                  DT_UINT
	Unk_d45ed2d                  DT_INT
	Unk_f6b20b7                  DT_INT
	Unk_54513b8                  DT_INT
	Unk_fd1f378                  DT_UINT
	Unk_487c14                   DT_UINT
	Unk_87f2609                  DT_UINT
	Unk_158eb4f                  DT_FLOAT
	Unk_ab58cd3                  DT_ENUM
	Unk_91a3966                  DT_UINT
	Unk_25312e5                  DT_UINT
	Unk_4be4371                  DT_INT
	SnoTreasureClass             DT_SNO
	SnoDeathPower                DT_SNO
	SnoPostDeathPower            DT_SNO
	Unk_6f5394d                  DT_FLOAT
	Unk_c0f7c                    DT_INT
	Unk_4d93264                  DT_ENUM
}

func (t *BreakableContainerGizmoData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.FDisableNonFriendlyOperation, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.FWalkToCenter, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.FGizmoStartsDisabled, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.FUseStringListName, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.FForceMinimapIcon, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.FlOperationRadius, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.Unk_d0b1df5, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.FlGizmoUseTime, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.SnoChannelingEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.Unk_2767229, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.FGizmoShowProgressBar, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+60, &t.Unk_6d9ebe1, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.Unk_5456245, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.Unk_af5815a, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.SnoOnClickEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.SnoPickedUpEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.SnoDropOnGroundEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.TConditionData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.SnoPowerOperator, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.SnoPowerOperate, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.SnoPowerOperatorActive, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+100, &t.SnoPowerOperateActive, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+104, &t.Unk_359810e, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+108, &t.NCooldown, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.Unk_9c8478e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+116, &t.Unk_d45ed2d, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.Unk_f6b20b7, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+124, &t.Unk_54513b8, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.Unk_fd1f378, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+132, &t.Unk_487c14, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+136, &t.Unk_87f2609, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+140, &t.Unk_158eb4f, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+144, &t.Unk_ab58cd3, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+148, &t.Unk_91a3966, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+152, &t.Unk_25312e5, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+156, &t.Unk_4be4371, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+160, &t.SnoTreasureClass, r, &Options{
		Flags: 1,
		Group: 52,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+164, &t.SnoDeathPower, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+168, &t.SnoPostDeathPower, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+172, &t.Unk_6f5394d, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+176, &t.Unk_c0f7c, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+180, &t.Unk_4d93264, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+184, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *BreakableContainerGizmoData) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("FDisableNonFriendlyOperation", &t.FDisableNonFriendlyOperation)
	cb.Do("FWalkToCenter", &t.FWalkToCenter)
	cb.Do("FGizmoStartsDisabled", &t.FGizmoStartsDisabled)
	cb.Do("FUseStringListName", &t.FUseStringListName)
	cb.Do("FForceMinimapIcon", &t.FForceMinimapIcon)
	cb.Do("FlOperationRadius", &t.FlOperationRadius)
	cb.Do("Unk_d0b1df5", &t.Unk_d0b1df5)
	cb.Do("FlGizmoUseTime", &t.FlGizmoUseTime)
	cb.Do("SnoChannelingEffect", &t.SnoChannelingEffect)
	cb.Do("Unk_2767229", &t.Unk_2767229)
	cb.Do("FGizmoShowProgressBar", &t.FGizmoShowProgressBar)
	cb.Do("Unk_6d9ebe1", &t.Unk_6d9ebe1)
	cb.Do("Unk_5456245", &t.Unk_5456245)
	cb.Do("Unk_af5815a", &t.Unk_af5815a)
	cb.Do("SnoOnClickEffect", &t.SnoOnClickEffect)
	cb.Do("SnoPickedUpEffect", &t.SnoPickedUpEffect)
	cb.Do("SnoDropOnGroundEffect", &t.SnoDropOnGroundEffect)
	cb.Do("TConditionData", &t.TConditionData)
	cb.Do("SnoPowerOperator", &t.SnoPowerOperator)
	cb.Do("SnoPowerOperate", &t.SnoPowerOperate)
	cb.Do("SnoPowerOperatorActive", &t.SnoPowerOperatorActive)
	cb.Do("SnoPowerOperateActive", &t.SnoPowerOperateActive)
	cb.Do("Unk_359810e", &t.Unk_359810e)
	cb.Do("NCooldown", &t.NCooldown)
	cb.Do("Unk_9c8478e", &t.Unk_9c8478e)
	cb.Do("Unk_d45ed2d", &t.Unk_d45ed2d)
	cb.Do("Unk_f6b20b7", &t.Unk_f6b20b7)
	cb.Do("Unk_54513b8", &t.Unk_54513b8)
	cb.Do("Unk_fd1f378", &t.Unk_fd1f378)
	cb.Do("Unk_487c14", &t.Unk_487c14)
	cb.Do("Unk_87f2609", &t.Unk_87f2609)
	cb.Do("Unk_158eb4f", &t.Unk_158eb4f)
	cb.Do("Unk_ab58cd3", &t.Unk_ab58cd3)
	cb.Do("Unk_91a3966", &t.Unk_91a3966)
	cb.Do("Unk_25312e5", &t.Unk_25312e5)
	cb.Do("Unk_4be4371", &t.Unk_4be4371)
	cb.Do("SnoTreasureClass", &t.SnoTreasureClass)
	cb.Do("SnoDeathPower", &t.SnoDeathPower)
	cb.Do("SnoPostDeathPower", &t.SnoPostDeathPower)
	cb.Do("Unk_6f5394d", &t.Unk_6f5394d)
	cb.Do("Unk_c0f7c", &t.Unk_c0f7c)
	cb.Do("Unk_4d93264", &t.Unk_4d93264)
}

type TriggerEventOutroObject struct {
	// Inherits TriggerEvent
	// Inherits PolymorphicBase
	DwType          DT_UINT
	DwPad           DT_UINT
	TConditions     TriggerConditions
	FGenerated      DT_INT
	Unk_6cba752     DT_INT
	DwParentActorID DT_UINT
	DwID            DT_UINT
}

func (t *TriggerEventOutroObject) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.FGenerated, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_6cba752, r, &Options{Flags: 16}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.DwParentActorID, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.DwID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+88, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TriggerEventOutroObject) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("TConditions", &t.TConditions)
	cb.Do("FGenerated", &t.FGenerated)
	cb.Do("Unk_6cba752", &t.Unk_6cba752)
	cb.Do("DwParentActorID", &t.DwParentActorID)
	cb.Do("DwID", &t.DwID)
}

type PRSTransform struct {
	Q      bcQuat
	Wp     DT_VECTOR3D
	VScale DT_VECTOR3D
}

func (t *PRSTransform) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Q, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Wp, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.VScale, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+40, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PRSTransform) Walk(cb WalkCallback) {
	cb.Do("Q", &t.Q)
	cb.Do("Wp", &t.Wp)
	cb.Do("VScale", &t.VScale)
}

type OnFirstHitPowerCallback struct {
	// Inherits PowerCallbackBase
	// Inherits PolymorphicBase
	DwType                DT_UINT
	DwPad                 DT_UINT
	SnoTriggerEffectGroup DT_SNO
	BCouldHaveRagdolled   DT_INT
}

func (t *OnFirstHitPowerCallback) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoTriggerEffectGroup, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.BCouldHaveRagdolled, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *OnFirstHitPowerCallback) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("SnoTriggerEffectGroup", &t.SnoTriggerEffectGroup)
	cb.Do("BCouldHaveRagdolled", &t.BCouldHaveRagdolled)
}

type HairStyleDefinition struct {
	FUsableByClass   DT_FIXEDARRAY[*DT_INT]
	DwSubObjectStyle DT_UINT
}

func (t *HairStyleDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.FUsableByClass, r, &Options{
		ArrayLength: 5,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.DwSubObjectStyle, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *HairStyleDefinition) Walk(cb WalkCallback) {
	cb.Do("FUsableByClass", &t.FUsableByClass)
	cb.Do("DwSubObjectStyle", &t.DwSubObjectStyle)
}

type GroupRegionEntry struct {
	THeader GBIDHeader
}

func (t *GroupRegionEntry) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+260, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *GroupRegionEntry) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
}

type OnEquipPowerCallback struct {
	// Inherits PowerCallbackBase
	// Inherits PolymorphicBase
	DwType                DT_UINT
	DwPad                 DT_UINT
	SnoTriggerEffectGroup DT_SNO
	BCouldHaveRagdolled   DT_INT
}

func (t *OnEquipPowerCallback) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoTriggerEffectGroup, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.BCouldHaveRagdolled, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *OnEquipPowerCallback) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("SnoTriggerEffectGroup", &t.SnoTriggerEffectGroup)
	cb.Do("BCouldHaveRagdolled", &t.BCouldHaveRagdolled)
}

type MaterialVectorValuesUsed struct {
	SnoMaterialValue DT_SNO
	VDefaultValue    DT_VECTOR4D
}

func (t *MaterialVectorValuesUsed) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoMaterialValue, r, &Options{
		Flags: 1,
		Group: 81,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.VDefaultValue, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+20, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *MaterialVectorValuesUsed) Walk(cb WalkCallback) {
	cb.Do("SnoMaterialValue", &t.SnoMaterialValue)
	cb.Do("VDefaultValue", &t.VDefaultValue)
}

type ResolvedPortalDestination struct {
	SnoWorld         DT_SNO
	UEntranceGUID    DT_STARTLOC_NAME
	SnoDestLevelArea DT_SNO
}

func (t *ResolvedPortalDestination) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoWorld, r, &Options{
		Flags: 1,
		Group: 48,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.UEntranceGUID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.SnoDestLevelArea, r, &Options{
		Flags: 1,
		Group: 22,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+12, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ResolvedPortalDestination) Walk(cb WalkCallback) {
	cb.Do("SnoWorld", &t.SnoWorld)
	cb.Do("UEntranceGUID", &t.UEntranceGUID)
	cb.Do("SnoDestLevelArea", &t.SnoDestLevelArea)
}

type SubObject struct {
	DwFlags                        DT_UINT
	Unk_334eb2d                    DT_INT
	PtClothData                    DT_VARIABLEARRAY[*ClothData]
	Unk_26f39c1                    DT_VARIABLEARRAY[*Type_72081710]
	DwBAOffset                     DT_UINT
	Unk_87b4c64                    DT_UINT
	Unk_d28c748                    DT_UINT
	DwBASize                       DT_UINT
	TNameInfo                      SubObjectNameInfo
	NMaterialIndex                 DT_INT
	DwSubObjectHash                DT_UINT
	Unk_79283f                     DT_INT
	NVertBufferIndex               DT_INT
	NIndexBufferIndex              DT_INT
	Unk_a758781                    DT_INT
	Unk_a1b71f5                    DT_INT
	Unk_95f2e14                    DT_INT
	DwShaderMapOverride            DT_UINT
	SnoCampaignVisibilityCondition DT_SNO
	AabbBounds                     AABB
	PtShapes                       DT_VARIABLEARRAY[*CollisionShape]
	Unk_eba16f                     DT_VARIABLEARRAY[*DT_BYTE]
	PtPostprocessed                DT_INT64
	PtSegments                     DT_VARIABLEARRAY[*SubObjectSegment]
	WpFixedPointPosOffset          DT_VECTOR3D
	WpFixedPointPosScale           DT_VECTOR3D
}

func (t *SubObject) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.DwFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.Unk_334eb2d, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.PtClothData, r, &Options{Flags: 2097152}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_26f39c1, r, &Options{Flags: 2097152}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.DwBAOffset, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.Unk_87b4c64, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.Unk_d28c748, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.DwBASize, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.TNameInfo, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.NMaterialIndex, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+100, &t.DwSubObjectHash, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+104, &t.Unk_79283f, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+108, &t.NVertBufferIndex, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.NIndexBufferIndex, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+116, &t.Unk_a758781, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.Unk_a1b71f5, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+124, &t.Unk_95f2e14, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.DwShaderMapOverride, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+132, &t.SnoCampaignVisibilityCondition, r, &Options{Group: 51}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+136, &t.AabbBounds, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+160, &t.PtShapes, r, &Options{Flags: 2097152}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+176, &t.Unk_eba16f, r, &Options{Flags: 2097152}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+192, &t.PtPostprocessed, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+200, &t.PtSegments, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+216, &t.WpFixedPointPosOffset, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+228, &t.WpFixedPointPosScale, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+240, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *SubObject) Walk(cb WalkCallback) {
	cb.Do("DwFlags", &t.DwFlags)
	cb.Do("Unk_334eb2d", &t.Unk_334eb2d)
	cb.Do("PtClothData", &t.PtClothData)
	cb.Do("Unk_26f39c1", &t.Unk_26f39c1)
	cb.Do("DwBAOffset", &t.DwBAOffset)
	cb.Do("Unk_87b4c64", &t.Unk_87b4c64)
	cb.Do("Unk_d28c748", &t.Unk_d28c748)
	cb.Do("DwBASize", &t.DwBASize)
	cb.Do("TNameInfo", &t.TNameInfo)
	cb.Do("NMaterialIndex", &t.NMaterialIndex)
	cb.Do("DwSubObjectHash", &t.DwSubObjectHash)
	cb.Do("Unk_79283f", &t.Unk_79283f)
	cb.Do("NVertBufferIndex", &t.NVertBufferIndex)
	cb.Do("NIndexBufferIndex", &t.NIndexBufferIndex)
	cb.Do("Unk_a758781", &t.Unk_a758781)
	cb.Do("Unk_a1b71f5", &t.Unk_a1b71f5)
	cb.Do("Unk_95f2e14", &t.Unk_95f2e14)
	cb.Do("DwShaderMapOverride", &t.DwShaderMapOverride)
	cb.Do("SnoCampaignVisibilityCondition", &t.SnoCampaignVisibilityCondition)
	cb.Do("AabbBounds", &t.AabbBounds)
	cb.Do("PtShapes", &t.PtShapes)
	cb.Do("Unk_eba16f", &t.Unk_eba16f)
	cb.Do("PtPostprocessed", &t.PtPostprocessed)
	cb.Do("PtSegments", &t.PtSegments)
	cb.Do("WpFixedPointPosOffset", &t.WpFixedPointPosOffset)
	cb.Do("WpFixedPointPosScale", &t.WpFixedPointPosScale)
}

type Type_f5ac91bb struct {
	Data1 DT_INT64
	Data2 DT_INT64
}

func (t *Type_f5ac91bb) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Data1, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.Data2, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_f5ac91bb) Walk(cb WalkCallback) {
	cb.Do("Data1", &t.Data1)
	cb.Do("Data2", &t.Data2)
}

type WwiseGameParameter struct {
	TName   WwiseName
	FlValue DT_FLOAT
	FlMin   DT_FLOAT
	FlMax   DT_FLOAT
}

func (t *WwiseGameParameter) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.TName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.FlValue, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.FlMin, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.FlMax, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *WwiseGameParameter) Walk(cb WalkCallback) {
	cb.Do("TName", &t.TName)
	cb.Do("FlValue", &t.FlValue)
	cb.Do("FlMin", &t.FlMin)
	cb.Do("FlMax", &t.FlMax)
}

type SurveyTypeEntry struct {
	THeader          GBIDHeader
	FlChance         DT_FLOAT
	Unk_b28752e      DT_VARIABLEARRAY[*DT_SNO]
	BIgnoresCooldown DT_INT
	Unk_69022        DT_INT
	Unk_e04d458      DT_INT
}

func (t *SurveyTypeEntry) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+260, &t.FlChance, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+264, &t.Unk_b28752e, r, &Options{
		Flags: 1,
		Group: 42,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+280, &t.BIgnoresCooldown, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+284, &t.Unk_69022, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+288, &t.Unk_e04d458, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+296, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *SurveyTypeEntry) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("FlChance", &t.FlChance)
	cb.Do("Unk_b28752e", &t.Unk_b28752e)
	cb.Do("BIgnoresCooldown", &t.BIgnoresCooldown)
	cb.Do("Unk_69022", &t.Unk_69022)
	cb.Do("Unk_e04d458", &t.Unk_e04d458)
}

type Type_f5c4e3ed struct {
	TAppearance SerialDataInfo
	TMaterial   SerialDataInfo
}

func (t *Type_f5c4e3ed) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.TAppearance, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.TMaterial, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_f5c4e3ed) Walk(cb WalkCallback) {
	cb.Do("TAppearance", &t.TAppearance)
	cb.Do("TMaterial", &t.TMaterial)
}

type Type_f5cd87eb struct {
	TCapsule   CollisionCapsule
	DwSlotHash DT_UINT
}

func (t *Type_f5cd87eb) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.TCapsule, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.DwSlotHash, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+68, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_f5cd87eb) Walk(cb WalkCallback) {
	cb.Do("TCapsule", &t.TCapsule)
	cb.Do("DwSlotHash", &t.DwSlotHash)
}

type SplineEasingWeight struct {
	FlFirstWeight  DT_FLOAT
	FlMiddleWeight DT_FLOAT
	FlLastWeight   DT_FLOAT
}

func (t *SplineEasingWeight) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.FlFirstWeight, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.FlMiddleWeight, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.FlLastWeight, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+12, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *SplineEasingWeight) Walk(cb WalkCallback) {
	cb.Do("FlFirstWeight", &t.FlFirstWeight)
	cb.Do("FlMiddleWeight", &t.FlMiddleWeight)
	cb.Do("FlLastWeight", &t.FlLastWeight)
}

type TrackedCheckpointGizmoData struct {
	// Inherits ActorGizmoData
	// Inherits PolymorphicBase
	DwType                       DT_UINT
	DwPad                        DT_UINT
	FDisableNonFriendlyOperation DT_INT
	FWalkToCenter                DT_INT
	FGizmoStartsDisabled         DT_INT
	FUseStringListName           DT_INT
	FForceMinimapIcon            DT_INT
	FlOperationRadius            DT_FLOAT
	Unk_d0b1df5                  DT_FLOAT
	FlGizmoUseTime               DT_FLOAT
	SnoChannelingEffect          DT_SNO
	Unk_2767229                  DT_INT
	FGizmoShowProgressBar        DT_INT
	Unk_6d9ebe1                  DT_INT
	Unk_5456245                  DT_INT
	Unk_af5815a                  DT_INT
	SnoOnClickEffect             DT_SNO
	SnoPickedUpEffect            DT_SNO
	SnoDropOnGroundEffect        DT_SNO
	TConditionData               GizmoConditionData
	SnoPowerOperator             DT_SNO
	SnoPowerOperate              DT_SNO
	SnoPowerOperatorActive       DT_SNO
	SnoPowerOperateActive        DT_SNO
	Unk_359810e                  DT_INT
	NCooldown                    DT_UINT
	Unk_9c8478e                  DT_UINT
	Unk_d45ed2d                  DT_INT
	Unk_f6b20b7                  DT_INT
	Unk_54513b8                  DT_INT
	Unk_fd1f378                  DT_UINT
	Unk_487c14                   DT_UINT
	Unk_87f2609                  DT_UINT
	Unk_158eb4f                  DT_FLOAT
	Unk_ab58cd3                  DT_ENUM
	Unk_91a3966                  DT_UINT
	Unk_25312e5                  DT_UINT
	Unk_4be4371                  DT_INT
	PtProxData                   DT_POLYMORPHIC_VARIABLEARRAY[*ProximityDataBase]
	Unk_c0f24ec                  DT_INT
}

func (t *TrackedCheckpointGizmoData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.FDisableNonFriendlyOperation, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.FWalkToCenter, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.FGizmoStartsDisabled, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.FUseStringListName, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.FForceMinimapIcon, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.FlOperationRadius, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.Unk_d0b1df5, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.FlGizmoUseTime, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.SnoChannelingEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.Unk_2767229, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.FGizmoShowProgressBar, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+60, &t.Unk_6d9ebe1, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.Unk_5456245, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.Unk_af5815a, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.SnoOnClickEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.SnoPickedUpEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.SnoDropOnGroundEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.TConditionData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.SnoPowerOperator, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.SnoPowerOperate, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.SnoPowerOperatorActive, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+100, &t.SnoPowerOperateActive, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+104, &t.Unk_359810e, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+108, &t.NCooldown, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.Unk_9c8478e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+116, &t.Unk_d45ed2d, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.Unk_f6b20b7, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+124, &t.Unk_54513b8, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.Unk_fd1f378, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+132, &t.Unk_487c14, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+136, &t.Unk_87f2609, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+140, &t.Unk_158eb4f, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+144, &t.Unk_ab58cd3, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+148, &t.Unk_91a3966, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+152, &t.Unk_25312e5, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+156, &t.Unk_4be4371, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+160, &t.PtProxData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+184, &t.Unk_c0f24ec, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+192, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TrackedCheckpointGizmoData) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("FDisableNonFriendlyOperation", &t.FDisableNonFriendlyOperation)
	cb.Do("FWalkToCenter", &t.FWalkToCenter)
	cb.Do("FGizmoStartsDisabled", &t.FGizmoStartsDisabled)
	cb.Do("FUseStringListName", &t.FUseStringListName)
	cb.Do("FForceMinimapIcon", &t.FForceMinimapIcon)
	cb.Do("FlOperationRadius", &t.FlOperationRadius)
	cb.Do("Unk_d0b1df5", &t.Unk_d0b1df5)
	cb.Do("FlGizmoUseTime", &t.FlGizmoUseTime)
	cb.Do("SnoChannelingEffect", &t.SnoChannelingEffect)
	cb.Do("Unk_2767229", &t.Unk_2767229)
	cb.Do("FGizmoShowProgressBar", &t.FGizmoShowProgressBar)
	cb.Do("Unk_6d9ebe1", &t.Unk_6d9ebe1)
	cb.Do("Unk_5456245", &t.Unk_5456245)
	cb.Do("Unk_af5815a", &t.Unk_af5815a)
	cb.Do("SnoOnClickEffect", &t.SnoOnClickEffect)
	cb.Do("SnoPickedUpEffect", &t.SnoPickedUpEffect)
	cb.Do("SnoDropOnGroundEffect", &t.SnoDropOnGroundEffect)
	cb.Do("TConditionData", &t.TConditionData)
	cb.Do("SnoPowerOperator", &t.SnoPowerOperator)
	cb.Do("SnoPowerOperate", &t.SnoPowerOperate)
	cb.Do("SnoPowerOperatorActive", &t.SnoPowerOperatorActive)
	cb.Do("SnoPowerOperateActive", &t.SnoPowerOperateActive)
	cb.Do("Unk_359810e", &t.Unk_359810e)
	cb.Do("NCooldown", &t.NCooldown)
	cb.Do("Unk_9c8478e", &t.Unk_9c8478e)
	cb.Do("Unk_d45ed2d", &t.Unk_d45ed2d)
	cb.Do("Unk_f6b20b7", &t.Unk_f6b20b7)
	cb.Do("Unk_54513b8", &t.Unk_54513b8)
	cb.Do("Unk_fd1f378", &t.Unk_fd1f378)
	cb.Do("Unk_487c14", &t.Unk_487c14)
	cb.Do("Unk_87f2609", &t.Unk_87f2609)
	cb.Do("Unk_158eb4f", &t.Unk_158eb4f)
	cb.Do("Unk_ab58cd3", &t.Unk_ab58cd3)
	cb.Do("Unk_91a3966", &t.Unk_91a3966)
	cb.Do("Unk_25312e5", &t.Unk_25312e5)
	cb.Do("Unk_4be4371", &t.Unk_4be4371)
	cb.Do("PtProxData", &t.PtProxData)
	cb.Do("Unk_c0f24ec", &t.Unk_c0f24ec)
}

type MarkerSpawnLocData struct {
	// Inherits MarkerDataBase
	// Inherits PolymorphicBase
	DwType                    DT_UINT
	DwPad                     DT_UINT
	SnoScript                 DT_VARIABLEARRAY[*DT_SNO]
	GbidSpawnLocType          DT_GBID
	ArActorGroups             DT_VARIABLEARRAY[*DT_GBID]
	ArPrefabScopedActorGroups DT_VARIABLEARRAY[*DT_GBID]
	ArPrefabCustomizations    DT_VARIABLEARRAY[*PrefabCustomization]
	BIsChild                  DT_INT
}

func (t *MarkerSpawnLocData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoScript, r, &Options{
		Flags: 1,
		Group: 35,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.GbidSpawnLocType, r, &Options{
		Flags: 1,
		Group: 20,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.ArActorGroups, r, &Options{
		Flags: 1,
		Group: 24,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.ArPrefabScopedActorGroups, r, &Options{
		Flags: 1,
		Group: 51,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.ArPrefabCustomizations, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.BIsChild, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+96, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *MarkerSpawnLocData) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("SnoScript", &t.SnoScript)
	cb.Do("GbidSpawnLocType", &t.GbidSpawnLocType)
	cb.Do("ArActorGroups", &t.ArActorGroups)
	cb.Do("ArPrefabScopedActorGroups", &t.ArPrefabScopedActorGroups)
	cb.Do("ArPrefabCustomizations", &t.ArPrefabCustomizations)
	cb.Do("BIsChild", &t.BIsChild)
}

type MsgTriggeredEvent struct {
	DwMsgKey       DT_ENUM
	PtTriggerEvent DT_POLYMORPHIC_VARIABLEARRAY[*TriggerEvent]
	TCooldown      DT_FLOAT
}

func (t *MsgTriggeredEvent) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.DwMsgKey, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.PtTriggerEvent, r, &Options{Flags: 262145}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.TCooldown, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+40, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *MsgTriggeredEvent) Walk(cb WalkCallback) {
	cb.Do("DwMsgKey", &t.DwMsgKey)
	cb.Do("PtTriggerEvent", &t.PtTriggerEvent)
	cb.Do("TCooldown", &t.TCooldown)
}

type UIProgressBarBase struct {
	Unk_b2b0e88 DT_TAGMAP[*DT_ENUM]
}

func (t *UIProgressBarBase) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Unk_b2b0e88, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *UIProgressBarBase) Walk(cb WalkCallback) {
	cb.Do("Unk_b2b0e88", &t.Unk_b2b0e88)
}

type LevelScalingDefinition_Table struct {
	// Inherits GameBalanceTable
	// Inherits PolymorphicBase
	DwType   DT_UINT
	DwPad    DT_UINT
	TEntries DT_VARIABLEARRAY[*LevelScalingDefinition]
}

func (t *LevelScalingDefinition_Table) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TEntries, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *LevelScalingDefinition_Table) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("TEntries", &t.TEntries)
}

type Type_f67f903d struct {
	// Inherits StoryboardTrack
	// Inherits PolymorphicBase
	DwType DT_UINT
	DwPad  DT_UINT
}

func (t *Type_f67f903d) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_f67f903d) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
}

type PowerConditionHasSkillRequirement struct {
	// Inherits PowerConditionBase
	// Inherits PolymorphicBase
	DwType              DT_UINT
	BInverse            DT_INT
	DwPad               DT_UINT
	SnoSkillRequirement DT_SNO
}

func (t *PowerConditionHasSkillRequirement) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BInverse, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SnoSkillRequirement, r, &Options{
		Flags: 513,
		Group: 116,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PowerConditionHasSkillRequirement) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("BInverse", &t.BInverse)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("SnoSkillRequirement", &t.SnoSkillRequirement)
}

type AccountProfilePrivacyFlagMessage struct {
	THeader               RequiredMessageHeader
	DwPlayerGameAccountId DT_UINT
	BPrivacyFlag          DT_INT
}

func (t *AccountProfilePrivacyFlagMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.DwPlayerGameAccountId, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.BPrivacyFlag, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *AccountProfilePrivacyFlagMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("DwPlayerGameAccountId", &t.DwPlayerGameAccountId)
	cb.Do("BPrivacyFlag", &t.BPrivacyFlag)
}

type SetBonusTier struct {
	NRequired DT_INT
	SnoAffix  DT_SNO
}

func (t *SetBonusTier) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.NRequired, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.SnoAffix, r, &Options{
		Flags: 1,
		Group: 104,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *SetBonusTier) Walk(cb WalkCallback) {
	cb.Do("NRequired", &t.NRequired)
	cb.Do("SnoAffix", &t.SnoAffix)
}

type EffectGroupRotationYawKeyData struct {
	// Inherits EffectGroupKeyData
	// Inherits PolymorphicBase
	DwType     DT_UINT
	DwPad      DT_UINT
	ArKeyItems DT_VARIABLEARRAY[*EffectGroupKey]
}

func (t *EffectGroupRotationYawKeyData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.ArKeyItems, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *EffectGroupRotationYawKeyData) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("ArKeyItems", &t.ArKeyItems)
}

type PowerBuffCrowdControl struct {
	Unk_c63f49e        DT_INT
	DwCCFlags          DT_UINT
	TSlowAmount        DT_STRING_FORMULA
	TChillAmount       DT_STRING_FORMULA
	TStaggerMultiplier DT_STRING_FORMULA
}

func (t *PowerBuffCrowdControl) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Unk_c63f49e, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.DwCCFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.TSlowAmount, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.TChillAmount, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.TStaggerMultiplier, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+104, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PowerBuffCrowdControl) Walk(cb WalkCallback) {
	cb.Do("Unk_c63f49e", &t.Unk_c63f49e)
	cb.Do("DwCCFlags", &t.DwCCFlags)
	cb.Do("TSlowAmount", &t.TSlowAmount)
	cb.Do("TChillAmount", &t.TChillAmount)
	cb.Do("TStaggerMultiplier", &t.TStaggerMultiplier)
}

type WeaponExpertiseRankReward struct {
	NRequiredRank   DT_INT
	SnoPassivePower DT_SNO
}

func (t *WeaponExpertiseRankReward) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.NRequiredRank, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.SnoPassivePower, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *WeaponExpertiseRankReward) Walk(cb WalkCallback) {
	cb.Do("NRequiredRank", &t.NRequiredRank)
	cb.Do("SnoPassivePower", &t.SnoPassivePower)
}

type NPCComponentInstanceData struct {
	TNPCColorSet NPCColorSet
	PtComponents DT_FIXEDARRAY[*ValidComponent]
}

func (t *NPCComponentInstanceData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.TNPCColorSet, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.PtComponents, r, &Options{
		ArrayLength: 4,
		Flags:       1,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+40, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *NPCComponentInstanceData) Walk(cb WalkCallback) {
	cb.Do("TNPCColorSet", &t.TNPCColorSet)
	cb.Do("PtComponents", &t.PtComponents)
}

type Type_f7485455 struct {
	// Inherits Subcondition
	// Inherits PolymorphicBase
	DwType  DT_UINT
	BNegate DT_INT
	DwPad   DT_UINT
}

func (t *Type_f7485455) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BNegate, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_f7485455) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("BNegate", &t.BNegate)
	cb.Do("DwPad", &t.DwPad)
}

type Type_f7abefc8 struct {
	// Inherits Type_303dbf00
	DwType      DT_UINT
	Unk_9b2bc26 Type_340f2b52
	Unk_77ed19a DT_ENUM
	DwPad       DT_UINT
}

func (t *Type_f7abefc8) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_9b2bc26, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.Unk_77ed19a, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+56, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_f7abefc8) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("Unk_9b2bc26", &t.Unk_9b2bc26)
	cb.Do("Unk_77ed19a", &t.Unk_77ed19a)
	cb.Do("DwPad", &t.DwPad)
}

type Type_f7c3172d struct {
	THeader RequiredMessageHeader
	Ann     DT_ACD_NETWORK_NAME
}

func (t *Type_f7c3172d) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Ann, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_f7c3172d) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("Ann", &t.Ann)
}

type BossDoorGizmoData struct {
	// Inherits NamedGizmoData
	// Inherits ActorGizmoData
	// Inherits PolymorphicBase
	DwType                       DT_UINT
	DwPad                        DT_UINT
	FDisableNonFriendlyOperation DT_INT
	FWalkToCenter                DT_INT
	FGizmoStartsDisabled         DT_INT
	FUseStringListName           DT_INT
	FForceMinimapIcon            DT_INT
	FlOperationRadius            DT_FLOAT
	Unk_d0b1df5                  DT_FLOAT
	FlGizmoUseTime               DT_FLOAT
	SnoChannelingEffect          DT_SNO
	Unk_2767229                  DT_INT
	FGizmoShowProgressBar        DT_INT
	Unk_6d9ebe1                  DT_INT
	Unk_5456245                  DT_INT
	Unk_af5815a                  DT_INT
	SnoOnClickEffect             DT_SNO
	SnoPickedUpEffect            DT_SNO
	SnoDropOnGroundEffect        DT_SNO
	TConditionData               GizmoConditionData
	SnoPowerOperator             DT_SNO
	SnoPowerOperate              DT_SNO
	SnoPowerOperatorActive       DT_SNO
	SnoPowerOperateActive        DT_SNO
	Unk_359810e                  DT_INT
	NCooldown                    DT_UINT
	Unk_9c8478e                  DT_UINT
	Unk_d45ed2d                  DT_INT
	Unk_f6b20b7                  DT_INT
	Unk_54513b8                  DT_INT
	Unk_fd1f378                  DT_UINT
	Unk_487c14                   DT_UINT
	Unk_87f2609                  DT_UINT
	Unk_158eb4f                  DT_FLOAT
	Unk_ab58cd3                  DT_ENUM
	Unk_91a3966                  DT_UINT
	Unk_25312e5                  DT_UINT
	Unk_4be4371                  DT_INT
	TBossDoorData                BossDoorInstanceData
}

func (t *BossDoorGizmoData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.FDisableNonFriendlyOperation, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.FWalkToCenter, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.FGizmoStartsDisabled, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.FUseStringListName, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.FForceMinimapIcon, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.FlOperationRadius, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.Unk_d0b1df5, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.FlGizmoUseTime, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.SnoChannelingEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.Unk_2767229, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.FGizmoShowProgressBar, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+60, &t.Unk_6d9ebe1, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.Unk_5456245, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.Unk_af5815a, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.SnoOnClickEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.SnoPickedUpEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.SnoDropOnGroundEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.TConditionData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.SnoPowerOperator, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.SnoPowerOperate, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.SnoPowerOperatorActive, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+100, &t.SnoPowerOperateActive, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+104, &t.Unk_359810e, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+108, &t.NCooldown, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.Unk_9c8478e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+116, &t.Unk_d45ed2d, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.Unk_f6b20b7, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+124, &t.Unk_54513b8, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.Unk_fd1f378, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+132, &t.Unk_487c14, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+136, &t.Unk_87f2609, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+140, &t.Unk_158eb4f, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+144, &t.Unk_ab58cd3, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+148, &t.Unk_91a3966, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+152, &t.Unk_25312e5, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+156, &t.Unk_4be4371, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+160, &t.TBossDoorData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+168, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *BossDoorGizmoData) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("FDisableNonFriendlyOperation", &t.FDisableNonFriendlyOperation)
	cb.Do("FWalkToCenter", &t.FWalkToCenter)
	cb.Do("FGizmoStartsDisabled", &t.FGizmoStartsDisabled)
	cb.Do("FUseStringListName", &t.FUseStringListName)
	cb.Do("FForceMinimapIcon", &t.FForceMinimapIcon)
	cb.Do("FlOperationRadius", &t.FlOperationRadius)
	cb.Do("Unk_d0b1df5", &t.Unk_d0b1df5)
	cb.Do("FlGizmoUseTime", &t.FlGizmoUseTime)
	cb.Do("SnoChannelingEffect", &t.SnoChannelingEffect)
	cb.Do("Unk_2767229", &t.Unk_2767229)
	cb.Do("FGizmoShowProgressBar", &t.FGizmoShowProgressBar)
	cb.Do("Unk_6d9ebe1", &t.Unk_6d9ebe1)
	cb.Do("Unk_5456245", &t.Unk_5456245)
	cb.Do("Unk_af5815a", &t.Unk_af5815a)
	cb.Do("SnoOnClickEffect", &t.SnoOnClickEffect)
	cb.Do("SnoPickedUpEffect", &t.SnoPickedUpEffect)
	cb.Do("SnoDropOnGroundEffect", &t.SnoDropOnGroundEffect)
	cb.Do("TConditionData", &t.TConditionData)
	cb.Do("SnoPowerOperator", &t.SnoPowerOperator)
	cb.Do("SnoPowerOperate", &t.SnoPowerOperate)
	cb.Do("SnoPowerOperatorActive", &t.SnoPowerOperatorActive)
	cb.Do("SnoPowerOperateActive", &t.SnoPowerOperateActive)
	cb.Do("Unk_359810e", &t.Unk_359810e)
	cb.Do("NCooldown", &t.NCooldown)
	cb.Do("Unk_9c8478e", &t.Unk_9c8478e)
	cb.Do("Unk_d45ed2d", &t.Unk_d45ed2d)
	cb.Do("Unk_f6b20b7", &t.Unk_f6b20b7)
	cb.Do("Unk_54513b8", &t.Unk_54513b8)
	cb.Do("Unk_fd1f378", &t.Unk_fd1f378)
	cb.Do("Unk_487c14", &t.Unk_487c14)
	cb.Do("Unk_87f2609", &t.Unk_87f2609)
	cb.Do("Unk_158eb4f", &t.Unk_158eb4f)
	cb.Do("Unk_ab58cd3", &t.Unk_ab58cd3)
	cb.Do("Unk_91a3966", &t.Unk_91a3966)
	cb.Do("Unk_25312e5", &t.Unk_25312e5)
	cb.Do("Unk_4be4371", &t.Unk_4be4371)
	cb.Do("TBossDoorData", &t.TBossDoorData)
}

type MountSetMessage struct {
	THeader     RequiredMessageHeader
	Unk_70bf7e7 DT_UINT
	AnnMount    DT_ACD_NETWORK_NAME
}

func (t *MountSetMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_70bf7e7, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.AnnMount, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+28, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *MountSetMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("Unk_70bf7e7", &t.Unk_70bf7e7)
	cb.Do("AnnMount", &t.AnnMount)
}

type PowerConditionIsMonsterFamilyArchetype struct {
	// Inherits PowerConditionBase
	// Inherits PolymorphicBase
	DwType            DT_UINT
	BInverse          DT_INT
	DwPad             DT_UINT
	ESubject          DT_ENUM
	SnoMonsterFamily  DT_SNO
	BTargetFullFamily DT_INT
	SzArchetype       DT_UINT
}

func (t *PowerConditionIsMonsterFamilyArchetype) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BInverse, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ESubject, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.SnoMonsterFamily, r, &Options{
		Flags: 513,
		Group: 82,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.BTargetFullFamily, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.SzArchetype, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+40, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PowerConditionIsMonsterFamilyArchetype) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("BInverse", &t.BInverse)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("ESubject", &t.ESubject)
	cb.Do("SnoMonsterFamily", &t.SnoMonsterFamily)
	cb.Do("BTargetFullFamily", &t.BTargetFullFamily)
	cb.Do("SzArchetype", &t.SzArchetype)
}

type GlobalHealthPotionData struct {
	// Inherits GlobalBase
	// Inherits PolymorphicBase
	DwType          DT_UINT
	DwPad           DT_UINT
	ArHealthPotions DT_VARIABLEARRAY[*HealthPotionData]
}

func (t *GlobalHealthPotionData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.ArHealthPotions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *GlobalHealthPotionData) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("ArHealthPotions", &t.ArHealthPotions)
}

type Type_f85d750a struct {
	// Inherits TriggerEvent
	// Inherits PolymorphicBase
	DwType          DT_UINT
	DwPad           DT_UINT
	TConditions     TriggerConditions
	FGenerated      DT_INT
	Unk_6cba752     DT_INT
	DwParentActorID DT_UINT
}

func (t *Type_f85d750a) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.FGenerated, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_6cba752, r, &Options{Flags: 16}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.DwParentActorID, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+80, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_f85d750a) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("TConditions", &t.TConditions)
	cb.Do("FGenerated", &t.FGenerated)
	cb.Do("Unk_6cba752", &t.Unk_6cba752)
	cb.Do("DwParentActorID", &t.DwParentActorID)
}

type CompInfluence struct{}

func (t *CompInfluence) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if _, err := r.Seek(p+1, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *CompInfluence) Walk(cb WalkCallback) {}

type TriggerEventOutroServicesDisable struct {
	// Inherits TriggerEvent
	// Inherits PolymorphicBase
	DwType          DT_UINT
	DwPad           DT_UINT
	TConditions     TriggerConditions
	FGenerated      DT_INT
	Unk_6cba752     DT_INT
	DwParentActorID DT_UINT
	Unk_a82d707     DT_ENUM
	FlDuration      DT_FLOAT
	FlDistance      DT_FLOAT
	EBlendEasing    DT_ENUM
}

func (t *TriggerEventOutroServicesDisable) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.FGenerated, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_6cba752, r, &Options{Flags: 16}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.DwParentActorID, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.Unk_a82d707, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.FlDuration, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.FlDistance, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.EBlendEasing, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+96, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TriggerEventOutroServicesDisable) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("TConditions", &t.TConditions)
	cb.Do("FGenerated", &t.FGenerated)
	cb.Do("Unk_6cba752", &t.Unk_6cba752)
	cb.Do("DwParentActorID", &t.DwParentActorID)
	cb.Do("Unk_a82d707", &t.Unk_a82d707)
	cb.Do("FlDuration", &t.FlDuration)
	cb.Do("FlDistance", &t.FlDistance)
	cb.Do("EBlendEasing", &t.EBlendEasing)
}

type ACDTranslateSnappedMessage struct {
	THeader              RequiredMessageHeader
	Ann                  DT_ACD_NETWORK_NAME
	VDestX               DT_OPTIONAL[*DT_INT]
	VDestY               DT_OPTIONAL[*DT_INT]
	VDestZ               DT_OPTIONAL[*DT_INT]
	ADesiredYaw          DT_FLOAT
	BSnapFacing          DT_INT
	UMoveFlags           DT_UINT
	UAckValue            DT_OPTIONAL[*DT_UINT]
	UCameraSmoothingTime DT_OPTIONAL[*DT_UINT]
	Unk_91b31d5          DT_OPTIONAL[*DT_UINT]
}

func (t *ACDTranslateSnappedMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Ann, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.VDestX, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.VDestY, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.VDestZ, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.ADesiredYaw, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.BSnapFacing, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.UMoveFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+60, &t.UAckValue, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.UCameraSmoothingTime, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.Unk_91b31d5, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+84, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ACDTranslateSnappedMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("Ann", &t.Ann)
	cb.Do("VDestX", &t.VDestX)
	cb.Do("VDestY", &t.VDestY)
	cb.Do("VDestZ", &t.VDestZ)
	cb.Do("ADesiredYaw", &t.ADesiredYaw)
	cb.Do("BSnapFacing", &t.BSnapFacing)
	cb.Do("UMoveFlags", &t.UMoveFlags)
	cb.Do("UAckValue", &t.UAckValue)
	cb.Do("UCameraSmoothingTime", &t.UCameraSmoothingTime)
	cb.Do("Unk_91b31d5", &t.Unk_91b31d5)
}

type TriggerEventRangedDuration struct {
	// Inherits TriggerEvent
	// Inherits PolymorphicBase
	DwType           DT_UINT
	TConditions      TriggerConditions
	FGenerated       DT_INT
	Unk_6cba752      DT_INT
	DwParentActorID  DT_UINT
	TDuration        DT_FLOAT
	DwTriggerFlags   DT_UINT
	DwTriggerFlagsEx DT_UINT
	TCleanup         TriggerCleanup
	Unk_49e9257      DT_INT
	Unk_5490979      DT_INT
	DwPad            DT_UINT
}

func (t *TriggerEventRangedDuration) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.FGenerated, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_6cba752, r, &Options{Flags: 16}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.DwParentActorID, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.TDuration, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.DwTriggerFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.DwTriggerFlagsEx, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.TCleanup, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+116, &t.Unk_49e9257, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.Unk_5490979, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+124, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+128, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TriggerEventRangedDuration) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("TConditions", &t.TConditions)
	cb.Do("FGenerated", &t.FGenerated)
	cb.Do("Unk_6cba752", &t.Unk_6cba752)
	cb.Do("DwParentActorID", &t.DwParentActorID)
	cb.Do("TDuration", &t.TDuration)
	cb.Do("DwTriggerFlags", &t.DwTriggerFlags)
	cb.Do("DwTriggerFlagsEx", &t.DwTriggerFlagsEx)
	cb.Do("TCleanup", &t.TCleanup)
	cb.Do("Unk_49e9257", &t.Unk_49e9257)
	cb.Do("Unk_5490979", &t.Unk_5490979)
	cb.Do("DwPad", &t.DwPad)
}

type GlobalUIData struct {
	// Inherits GlobalBase
	// Inherits PolymorphicBase
	DwType                      DT_UINT
	DwPad                       DT_UINT
	ArUILayoutEntries           DT_FIXEDARRAY[*UILayoutList]
	Unk_7e4617a                 DT_FLOAT
	Unk_1598718                 DT_FLOAT
	Unk_2c2d08c                 DT_FLOAT
	Unk_3687be2                 DT_FLOAT
	Unk_f29cf9f                 DT_FLOAT
	Unk_a1a0b99                 DT_FLOAT
	Unk_8fd95d7                 DT_FLOAT
	Unk_7fad401                 DT_FLOAT
	Unk_5610641                 DT_FLOAT
	Unk_876f67                  DT_FLOAT
	Unk_196eaf0                 DT_FLOAT
	Unk_cd8b828                 DT_FLOAT
	Unk_c13ed3                  DT_FLOAT
	Unk_b86032f                 DT_FLOAT
	FlMapZoomScaleMax           DT_FLOAT
	Unk_6ccfe46                 DT_FLOAT
	Unk_837ae57                 DT_FLOAT
	Unk_3e0d388                 DT_FLOAT
	Unk_4708c6a                 DT_FLOAT
	Unk_faf290a                 DT_FLOAT
	Unk_57eb5c3                 DT_FLOAT
	Unk_1224aa7                 DT_FLOAT
	Unk_9801a36                 DT_FLOAT
	Unk_9946cbb                 DT_FLOAT
	Unk_9f87fb4                 DT_FLOAT
	Unk_aaf0c18                 DT_FLOAT
	Unk_e16b011                 DT_UINT
	Unk_4f3cd66                 DT_UINT
	Unk_b825f41                 DT_UINT
	Unk_478de7c                 DT_UINT
	Unk_5e323f0                 DT_UINT
	Unk_c47180a                 DT_FLOAT
	Unk_b12c0aa                 DT_FLOAT
	Unk_9b4effb                 DT_FLOAT
	Unk_f65fa83                 DT_FLOAT
	Unk_d30a7e3                 DT_VECTOR2D
	Unk_1b1414e                 DT_SNO
	SnoMinimapNoiseTexture      DT_SNO
	Unk_a48542c                 DT_SNO
	Unk_ef09f54                 DT_FLOAT
	Unk_11c15f5                 DT_FLOAT
	Unk_6ed18a4                 DT_RGBACOLOR
	Unk_29e5ce5                 DT_RGBACOLOR
	Unk_6f7d3ac                 DT_RGBACOLOR
	Unk_2a917ed                 DT_RGBACOLOR
	Unk_72266f8                 DT_RGBACOLOR
	Unk_435bf79                 DT_RGBACOLOR
	Unk_ac1d2c7                 DT_RGBACOLOR
	Unk_72dd8a6                 DT_RGBACOLOR
	FlBorderWidth               DT_FLOAT
	FlBorderStrength            DT_FLOAT
	FlHighlightedBorderStrength DT_FLOAT
	Unk_c4559fc                 DT_FLOAT
	Unk_786fe3d                 DT_FLOAT
	FlMinimapDistortionFactor   DT_FLOAT
	FlMinimapDistortionScale    DT_FLOAT
	Unk_8badfc2                 DT_FLOAT
	Unk_d55c009                 DT_FLOAT
	Unk_d0f26d6                 DT_FLOAT
	Unk_7a8104a                 DT_FLOAT
	Unk_ce839dc                 DT_FLOAT
	Unk_1a7cebb                 DT_VECTOR2D
	Unk_cd7a774                 DT_FLOAT
	Unk_2dbafe8                 DT_FLOAT
	Unk_f1bb679                 DT_FLOAT
	Unk_f1bb57b                 DT_FLOAT
	Unk_ecabd08                 DT_FLOAT
	FlDurationMicroseconds      DT_FLOAT
	Unk_dbf4030                 DT_FLOAT
	Unk_a133a8                  DT_FLOAT
	Unk_f577b0                  DT_FLOAT
	Unk_3ab43a3                 DT_INT
	Unk_9c8f277                 DT_FLOAT
	Unk_f2cc835                 DT_UINT
	Unk_a5093bf                 DT_FLOAT
	Unk_eeb8012                 DT_UINT
	SnoFoWShader                DT_SNO
	Unk_5dbe647                 DT_SNO
	Unk_149bdee                 DT_FLOAT
	Unk_10d9d74                 DT_FLOAT
	Unk_d347c44                 DT_FLOAT
	Unk_430d091                 DT_FLOAT
	Unk_7a41cb9                 DT_FLOAT
	Unk_5c6981e                 DT_FLOAT
	Unk_62b69ec                 DT_INT
	Unk_3a17c48                 DT_FLOAT
	TRegions                    DT_FIXEDARRAY[*ObjectiveRegionParams]
	TTerritoryRegion            TerritoryRegionParams
	Unk_2c3270                  DT_FLOAT
	Unk_ec0001f                 DT_FLOAT
	Unk_c0496bf                 DT_FLOAT
	Unk_ec858c                  DT_FLOAT
	Unk_5135a05                 DT_FLOAT
	Unk_3f64492                 DT_FLOAT
	Unk_c993839                 DT_FLOAT
	Unk_4cf9be8                 DT_FLOAT
	Unk_eee69a4                 DT_FLOAT
	Unk_df2414f                 DT_FLOAT
	Unk_3fdcbeb                 DT_FLOAT
	Unk_3fdcaed                 DT_FLOAT
	Unk_b0e8e55                 DT_FLOAT
	Unk_85356ef                 DT_FLOAT
	TPathProps                  RoadTypeProperties
	Unk_cfff5f6                 RoadTypeProperties
	TRoadProps                  DT_FIXEDARRAY[*RoadTypeProperties]
	Unk_d9fccf3                 Type_31220ee1
	Unk_c0e1b71                 DT_VECTOR2D
	Unk_5161778                 DT_VECTOR2D
	Unk_78b2a91                 DT_VECTOR2D
	Unk_10c7eaa                 DT_FLOAT
	Unk_a61c4bf                 DT_FLOAT
	Unk_e058ac2                 Type_55ee8277
	Unk_abdc576                 ConnectorProperties
	Unk_55e00d8                 ConnectorProperties
	Unk_3ba9d7b                 ConnectorProperties
	Unk_575246e                 ConnectorProperties
	Unk_155fd0                  ConnectorProperties
	Unk_9c59a73                 ConnectorProperties
	Unk_88a6181                 ConnectorProperties
	Unk_cfbdf91                 DT_RGBACOLOR
	Unk_62538b3                 DT_RGBACOLOR
	Unk_988bcb0                 DT_RGBACOLOR
	Unk_f581a6f                 DT_RGBACOLOR
	Unk_78ed1cc                 Type_31220ee1
	Unk_5cf738e                 DT_FLOAT
	Unk_695a8a5                 DT_FLOAT
	Unk_b2e2e43                 DT_FLOAT
	Unk_e2be78                  DT_FLOAT
	Unk_dada65f                 DT_FLOAT
	Unk_ccab046                 DT_BYTE
	Unk_78e60c2                 DT_BYTE
	Unk_1333341                 DT_BYTE
	Unk_15a4084                 DT_BYTE
	Unk_c019b27                 DT_BYTE
	Unk_c091278                 DT_BYTE
	Unk_7c3f20c                 DT_FLOAT
	Unk_f993efd                 DT_UINT
	Unk_ba98f17                 DT_UINT
	ArHeroDetailsEntries        DT_FIXEDARRAY[*HeroDetailsArray]
	Unk_a4d68a1                 DT_VARIABLEARRAY[*Type_cd74fce5]
	Unk_934d708                 DT_FLOAT
	FCreatedTangents            DT_FLOAT
	Unk_e3de54d                 DT_FLOAT
	Unk_2bdd3a2                 DT_UINT
	Unk_6d92ca8                 DT_FLOAT
	Unk_124d5ff                 DT_FLOAT
	Unk_99df291                 DT_FLOAT
	Unk_ecfa0a0                 DT_FLOAT
	Unk_599fb20                 DT_FLOAT
	Unk_6fd1380                 DT_UINT
	Unk_71f6e7e                 DT_UINT
	Unk_5df2c46                 DT_UINT
	Unk_80370e6                 DT_UINT
	Unk_321b8d8                 DT_UINT
	Unk_59d8d4                  DT_BYTE
	Unk_15da863                 DT_BYTE
	Unk_67c326a                 DT_FLOAT
	TScrollbarStyles            DT_FIXEDARRAY[*ScrollbarStyle]
	NMaxRecentAchievements      DT_UINT
	Unk_90ccf89                 DT_VARIABLEARRAY[*DT_SNO]
	Unk_2738127                 DT_UINT
	Unk_d9cee69                 Type_22d9402d
	Unk_d9cee6a                 Type_22d9402d
	Unk_d9cee6b                 Type_22d9402d
	Unk_d9cee6c                 Type_22d9402d
	Unk_d9cee6d                 Type_22d9402d
	Unk_d9cee6e                 Type_22d9402d
	Unk_d9cee6f                 Type_22d9402d
	Unk_d9cee70                 Type_22d9402d
	Unk_d9cf2aa                 Type_22d9402d
	Unk_d9cf2ab                 Type_22d9402d
	Unk_d9cf2ac                 Type_22d9402d
	Unk_d9cf2ad                 Type_22d9402d
	Unk_d9cf2ae                 Type_22d9402d
	Unk_d9cf2af                 Type_22d9402d
	Unk_d9cf2b0                 Type_22d9402d
	Unk_d9cf2b1                 Type_22d9402d
	Unk_d9cf6eb                 Type_22d9402d
	Unk_d9cf6ec                 Type_22d9402d
	Unk_d9cf6ed                 Type_22d9402d
	Unk_d9cf6ee                 Type_22d9402d
	Unk_d9cf6ef                 Type_22d9402d
	Unk_d9cf6f0                 Type_22d9402d
	Unk_d9cf6f1                 Type_22d9402d
	Unk_d9cf6f2                 Type_22d9402d
	Unk_db41c87                 DT_UINT
	Unk_ee3ceab                 DT_UINT
	Unk_bd7d800                 DT_UINT
	Unk_9d49dc4                 DT_UINT
	Unk_537458b                 DT_UINT
	Unk_d1d3a2f                 DT_UINT
	Unk_8e05798                 DT_UINT
	Unk_d949c5c                 DT_UINT
	Unk_d3dd9b3                 DT_UINT
	Unk_1aea757                 DT_UINT
	Unk_ac8d9e4                 DT_UINT
	Unk_666e28                  DT_UINT
	Unk_a47711                  DT_UINT
	SzDetailThreshhold          DT_UINT
	Unk_81f03e4                 DT_UINT
	Unk_c26d828                 DT_UINT
	SzDetailOptimize            DT_UINT
	Unk_dd1f975                 DT_UINT
	Unk_444be6e                 DT_UINT
	Unk_8d8b8f2                 DT_UINT
	Unk_b45637b                 DT_UINT
	Unk_15b8e1f                 DT_UINT
	Unk_84522db                 DT_UINT
	Unk_ef9e97f                 DT_UINT
	Unk_da9dee8                 DT_UINT
	Unk_b0735ac                 DT_UINT
	Unk_41cf76a                 DT_UINT
	Unk_c67ef6e                 DT_UINT
	Unk_47c4557                 DT_UINT
	Unk_635f97b                 DT_UINT
	Unk_2e61264                 DT_UINT
	Unk_e1af6a8                 DT_UINT
	Unk_c68bf91                 DT_UINT
	Unk_e49e7f5                 DT_UINT
	Unk_6eebf91                 DT_UINT
	Unk_c8fe7f5                 DT_UINT
	Unk_187125e                 DT_UINT
	Unk_b5d02e2                 DT_UINT
	Unk_e931d19                 DT_FIXEDARRAY[*DT_UINT]
	ArBountyIcons               DT_FIXEDARRAY[*BountyIcons]
	ArBountyTierIcons           DT_FIXEDARRAY[*BountyTierIcons]
	Unk_aa34698                 DT_UINT
	TClassInfo                  DT_FIXEDARRAY[*ClassInfoDataArray]
	Unk_51e3091                 DT_VARIABLEARRAY[*Type_7a02a8d6]
	Unk_dc621b6                 DT_VARIABLEARRAY[*DT_ENUM]
	Unk_1ff54e                  DT_VARIABLEARRAY[*DT_ENUM]
	Unk_6a92c0c                 DT_VARIABLEARRAY[*DT_ENUM]
	Unk_2db68                   DT_VARIABLEARRAY[*DT_ENUM]
	Unk_dbd3ebc                 DT_VARIABLEARRAY[*DT_ENUM]
	Unk_bb45514                 DT_VARIABLEARRAY[*DT_FLOAT]
	Unk_6494906                 DT_INT
	Unk_31fce21                 DT_FLOAT
	Unk_774d89f                 DT_FLOAT
	Unk_ef2cbab                 DT_FLOAT
	Unk_4f23516                 DT_FLOAT
	Unk_d3ef4e8                 DT_FLOAT
	Unk_618bf22                 DT_FLOAT
	Unk_199897                  DT_VARIABLEARRAY[*DT_SNO]
	Unk_17dc82                  DT_FLOAT
	Unk_29f26f5                 DT_FLOAT
	FlMinimapRevealRadius       DT_FLOAT
	Unk_b8c638c                 DT_UINT
	Unk_2b6498d                 DT_VARIABLEARRAY[*GlobalFontColor]
	Unk_7b6861c                 DT_FLOAT
	Unk_c56ad90                 DT_FLOAT
	Unk_1f7cfee                 DT_FLOAT
	Unk_85af920                 DT_FLOAT
	Unk_3ec7e81                 DT_FLOAT
	Unk_586724                  DT_FLOAT
	Unk_1fa8d3c                 DT_INT
	Unk_1fa8c3e                 DT_INT
	Unk_17a967d                 DT_INT
	Unk_f063bba                 DT_INT
	Unk_ce72bfa                 DT_INT
	Unk_ce72afc                 DT_INT
	Unk_9ecbbb                  DT_INT
	Unk_39edff8                 DT_INT
	Unk_c79c16e                 DT_INT
	Unk_c79c070                 DT_INT
	Unk_c70a82f                 DT_INT
	BInfiniteAmount             DT_INT
	Unk_26a4b93                 DT_FIXEDARRAY[*Type_e3bec795]
}

func (t *GlobalUIData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.ArUILayoutEntries, r, &Options{
		ArrayLength: 3,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.Unk_7e4617a, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.Unk_1598718, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_2c2d08c, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.Unk_3687be2, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.Unk_f29cf9f, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.Unk_a1a0b99, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.Unk_8fd95d7, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.Unk_7fad401, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.Unk_5610641, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+100, &t.Unk_876f67, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+104, &t.Unk_196eaf0, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+108, &t.Unk_cd8b828, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.Unk_c13ed3, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+116, &t.Unk_b86032f, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.FlMapZoomScaleMax, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+124, &t.Unk_6ccfe46, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.Unk_837ae57, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+132, &t.Unk_3e0d388, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+136, &t.Unk_4708c6a, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+140, &t.Unk_faf290a, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+144, &t.Unk_57eb5c3, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+148, &t.Unk_1224aa7, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+152, &t.Unk_9801a36, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+156, &t.Unk_9946cbb, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+160, &t.Unk_9f87fb4, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+164, &t.Unk_aaf0c18, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+168, &t.Unk_e16b011, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+172, &t.Unk_4f3cd66, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+176, &t.Unk_b825f41, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+180, &t.Unk_478de7c, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+184, &t.Unk_5e323f0, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+188, &t.Unk_c47180a, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+192, &t.Unk_b12c0aa, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+196, &t.Unk_9b4effb, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+200, &t.Unk_f65fa83, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+204, &t.Unk_d30a7e3, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+212, &t.Unk_1b1414e, r, &Options{
		Flags: 1,
		Group: 44,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+216, &t.SnoMinimapNoiseTexture, r, &Options{
		Flags: 1,
		Group: 44,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+220, &t.Unk_a48542c, r, &Options{
		Flags: 1,
		Group: 44,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+224, &t.Unk_ef09f54, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+228, &t.Unk_11c15f5, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+232, &t.Unk_6ed18a4, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+236, &t.Unk_29e5ce5, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+240, &t.Unk_6f7d3ac, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+244, &t.Unk_2a917ed, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+248, &t.Unk_72266f8, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+252, &t.Unk_435bf79, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+256, &t.Unk_ac1d2c7, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+260, &t.Unk_72dd8a6, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+264, &t.FlBorderWidth, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+268, &t.FlBorderStrength, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+272, &t.FlHighlightedBorderStrength, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+276, &t.Unk_c4559fc, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+280, &t.Unk_786fe3d, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+284, &t.FlMinimapDistortionFactor, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+288, &t.FlMinimapDistortionScale, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+292, &t.Unk_8badfc2, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+296, &t.Unk_d55c009, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+300, &t.Unk_d0f26d6, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+304, &t.Unk_7a8104a, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+308, &t.Unk_ce839dc, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+312, &t.Unk_1a7cebb, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+320, &t.Unk_cd7a774, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+324, &t.Unk_2dbafe8, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+328, &t.Unk_f1bb679, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+332, &t.Unk_f1bb57b, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+336, &t.Unk_ecabd08, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+340, &t.FlDurationMicroseconds, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+344, &t.Unk_dbf4030, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+348, &t.Unk_a133a8, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+352, &t.Unk_f577b0, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+356, &t.Unk_3ab43a3, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+360, &t.Unk_9c8f277, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+364, &t.Unk_f2cc835, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+368, &t.Unk_a5093bf, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+372, &t.Unk_eeb8012, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+376, &t.SnoFoWShader, r, &Options{
		Flags: 1,
		Group: 37,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+380, &t.Unk_5dbe647, r, &Options{
		Flags: 1,
		Group: 37,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+384, &t.Unk_149bdee, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+388, &t.Unk_10d9d74, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+392, &t.Unk_d347c44, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+396, &t.Unk_430d091, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+400, &t.Unk_7a41cb9, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+404, &t.Unk_5c6981e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+408, &t.Unk_62b69ec, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+412, &t.Unk_3a17c48, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+416, &t.TRegions, r, &Options{
		ArrayLength: 6,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+920, &t.TTerritoryRegion, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+944, &t.Unk_2c3270, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+948, &t.Unk_ec0001f, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+952, &t.Unk_c0496bf, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+956, &t.Unk_ec858c, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+960, &t.Unk_5135a05, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+964, &t.Unk_3f64492, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+968, &t.Unk_c993839, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+972, &t.Unk_4cf9be8, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+976, &t.Unk_eee69a4, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+980, &t.Unk_df2414f, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+984, &t.Unk_3fdcbeb, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+988, &t.Unk_3fdcaed, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+992, &t.Unk_b0e8e55, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+996, &t.Unk_85356ef, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1000, &t.TPathProps, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1036, &t.Unk_cfff5f6, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1072, &t.TRoadProps, r, &Options{
		ArrayLength: 2,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1144, &t.Unk_d9fccf3, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1212, &t.Unk_c0e1b71, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1220, &t.Unk_5161778, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1228, &t.Unk_78b2a91, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1236, &t.Unk_10c7eaa, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1240, &t.Unk_a61c4bf, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1244, &t.Unk_e058ac2, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1280, &t.Unk_abdc576, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1308, &t.Unk_55e00d8, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1336, &t.Unk_3ba9d7b, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1364, &t.Unk_575246e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1392, &t.Unk_155fd0, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1420, &t.Unk_9c59a73, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1448, &t.Unk_88a6181, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1476, &t.Unk_cfbdf91, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1480, &t.Unk_62538b3, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1484, &t.Unk_988bcb0, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1488, &t.Unk_f581a6f, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1492, &t.Unk_78ed1cc, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1560, &t.Unk_5cf738e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1564, &t.Unk_695a8a5, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1568, &t.Unk_b2e2e43, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1572, &t.Unk_e2be78, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1576, &t.Unk_dada65f, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1580, &t.Unk_ccab046, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1581, &t.Unk_78e60c2, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1582, &t.Unk_1333341, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1583, &t.Unk_15a4084, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1584, &t.Unk_c019b27, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1585, &t.Unk_c091278, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1588, &t.Unk_7c3f20c, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1592, &t.Unk_f993efd, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1596, &t.Unk_ba98f17, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1600, &t.ArHeroDetailsEntries, r, &Options{
		ArrayLength: 6,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1696, &t.Unk_a4d68a1, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1712, &t.Unk_934d708, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1716, &t.FCreatedTangents, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1720, &t.Unk_e3de54d, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1724, &t.Unk_2bdd3a2, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1728, &t.Unk_6d92ca8, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1732, &t.Unk_124d5ff, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1736, &t.Unk_99df291, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1740, &t.Unk_ecfa0a0, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1744, &t.Unk_599fb20, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1748, &t.Unk_6fd1380, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1752, &t.Unk_71f6e7e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1756, &t.Unk_5df2c46, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1760, &t.Unk_80370e6, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1764, &t.Unk_321b8d8, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1768, &t.Unk_59d8d4, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1769, &t.Unk_15da863, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1772, &t.Unk_67c326a, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1776, &t.TScrollbarStyles, r, &Options{
		ArrayLength: 4,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2016, &t.NMaxRecentAchievements, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2024, &t.Unk_90ccf89, r, &Options{
		Flags: 1,
		Group: 73,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2040, &t.Unk_2738127, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2044, &t.Unk_d9cee69, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2060, &t.Unk_d9cee6a, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2076, &t.Unk_d9cee6b, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2092, &t.Unk_d9cee6c, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2108, &t.Unk_d9cee6d, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2124, &t.Unk_d9cee6e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2140, &t.Unk_d9cee6f, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2156, &t.Unk_d9cee70, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2172, &t.Unk_d9cf2aa, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2188, &t.Unk_d9cf2ab, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2204, &t.Unk_d9cf2ac, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2220, &t.Unk_d9cf2ad, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2236, &t.Unk_d9cf2ae, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2252, &t.Unk_d9cf2af, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2268, &t.Unk_d9cf2b0, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2284, &t.Unk_d9cf2b1, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2300, &t.Unk_d9cf6eb, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2316, &t.Unk_d9cf6ec, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2332, &t.Unk_d9cf6ed, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2348, &t.Unk_d9cf6ee, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2364, &t.Unk_d9cf6ef, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2380, &t.Unk_d9cf6f0, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2396, &t.Unk_d9cf6f1, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2412, &t.Unk_d9cf6f2, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2428, &t.Unk_db41c87, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2432, &t.Unk_ee3ceab, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2436, &t.Unk_bd7d800, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2440, &t.Unk_9d49dc4, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2444, &t.Unk_537458b, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2448, &t.Unk_d1d3a2f, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2452, &t.Unk_8e05798, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2456, &t.Unk_d949c5c, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2460, &t.Unk_d3dd9b3, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2464, &t.Unk_1aea757, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2468, &t.Unk_ac8d9e4, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2472, &t.Unk_666e28, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2476, &t.Unk_a47711, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2480, &t.SzDetailThreshhold, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2484, &t.Unk_81f03e4, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2488, &t.Unk_c26d828, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2492, &t.SzDetailOptimize, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2496, &t.Unk_dd1f975, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2500, &t.Unk_444be6e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2504, &t.Unk_8d8b8f2, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2508, &t.Unk_b45637b, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2512, &t.Unk_15b8e1f, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2516, &t.Unk_84522db, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2520, &t.Unk_ef9e97f, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2524, &t.Unk_da9dee8, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2528, &t.Unk_b0735ac, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2532, &t.Unk_41cf76a, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2536, &t.Unk_c67ef6e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2540, &t.Unk_47c4557, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2544, &t.Unk_635f97b, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2548, &t.Unk_2e61264, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2552, &t.Unk_e1af6a8, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2556, &t.Unk_c68bf91, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2560, &t.Unk_e49e7f5, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2564, &t.Unk_6eebf91, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2568, &t.Unk_c8fe7f5, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2572, &t.Unk_187125e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2576, &t.Unk_b5d02e2, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2580, &t.Unk_e931d19, r, &Options{
		ArrayLength: 23,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2672, &t.ArBountyIcons, r, &Options{
		ArrayLength: 10,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2792, &t.ArBountyTierIcons, r, &Options{
		ArrayLength: 3,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2840, &t.Unk_aa34698, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2848, &t.TClassInfo, r, &Options{
		ArrayLength: 5,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+3008, &t.Unk_51e3091, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+3024, &t.Unk_dc621b6, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+3040, &t.Unk_1ff54e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+3056, &t.Unk_6a92c0c, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+3072, &t.Unk_2db68, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+3088, &t.Unk_dbd3ebc, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+3104, &t.Unk_bb45514, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+3120, &t.Unk_6494906, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+3124, &t.Unk_31fce21, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+3128, &t.Unk_774d89f, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+3132, &t.Unk_ef2cbab, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+3136, &t.Unk_4f23516, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+3140, &t.Unk_d3ef4e8, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+3144, &t.Unk_618bf22, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+3152, &t.Unk_199897, r, &Options{
		Flags: 513,
		Group: 44,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+3168, &t.Unk_17dc82, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+3172, &t.Unk_29f26f5, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+3176, &t.FlMinimapRevealRadius, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+3180, &t.Unk_b8c638c, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+3184, &t.Unk_2b6498d, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+3200, &t.Unk_7b6861c, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+3204, &t.Unk_c56ad90, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+3208, &t.Unk_1f7cfee, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+3212, &t.Unk_85af920, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+3216, &t.Unk_3ec7e81, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+3220, &t.Unk_586724, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+3224, &t.Unk_1fa8d3c, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+3228, &t.Unk_1fa8c3e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+3232, &t.Unk_17a967d, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+3236, &t.Unk_f063bba, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+3240, &t.Unk_ce72bfa, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+3244, &t.Unk_ce72afc, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+3248, &t.Unk_9ecbbb, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+3252, &t.Unk_39edff8, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+3256, &t.Unk_c79c16e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+3260, &t.Unk_c79c070, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+3264, &t.Unk_c70a82f, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+3268, &t.BInfiniteAmount, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+3272, &t.Unk_26a4b93, r, &Options{
		ArrayLength: 1,
		Flags:       1,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+3312, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *GlobalUIData) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("ArUILayoutEntries", &t.ArUILayoutEntries)
	cb.Do("Unk_7e4617a", &t.Unk_7e4617a)
	cb.Do("Unk_1598718", &t.Unk_1598718)
	cb.Do("Unk_2c2d08c", &t.Unk_2c2d08c)
	cb.Do("Unk_3687be2", &t.Unk_3687be2)
	cb.Do("Unk_f29cf9f", &t.Unk_f29cf9f)
	cb.Do("Unk_a1a0b99", &t.Unk_a1a0b99)
	cb.Do("Unk_8fd95d7", &t.Unk_8fd95d7)
	cb.Do("Unk_7fad401", &t.Unk_7fad401)
	cb.Do("Unk_5610641", &t.Unk_5610641)
	cb.Do("Unk_876f67", &t.Unk_876f67)
	cb.Do("Unk_196eaf0", &t.Unk_196eaf0)
	cb.Do("Unk_cd8b828", &t.Unk_cd8b828)
	cb.Do("Unk_c13ed3", &t.Unk_c13ed3)
	cb.Do("Unk_b86032f", &t.Unk_b86032f)
	cb.Do("FlMapZoomScaleMax", &t.FlMapZoomScaleMax)
	cb.Do("Unk_6ccfe46", &t.Unk_6ccfe46)
	cb.Do("Unk_837ae57", &t.Unk_837ae57)
	cb.Do("Unk_3e0d388", &t.Unk_3e0d388)
	cb.Do("Unk_4708c6a", &t.Unk_4708c6a)
	cb.Do("Unk_faf290a", &t.Unk_faf290a)
	cb.Do("Unk_57eb5c3", &t.Unk_57eb5c3)
	cb.Do("Unk_1224aa7", &t.Unk_1224aa7)
	cb.Do("Unk_9801a36", &t.Unk_9801a36)
	cb.Do("Unk_9946cbb", &t.Unk_9946cbb)
	cb.Do("Unk_9f87fb4", &t.Unk_9f87fb4)
	cb.Do("Unk_aaf0c18", &t.Unk_aaf0c18)
	cb.Do("Unk_e16b011", &t.Unk_e16b011)
	cb.Do("Unk_4f3cd66", &t.Unk_4f3cd66)
	cb.Do("Unk_b825f41", &t.Unk_b825f41)
	cb.Do("Unk_478de7c", &t.Unk_478de7c)
	cb.Do("Unk_5e323f0", &t.Unk_5e323f0)
	cb.Do("Unk_c47180a", &t.Unk_c47180a)
	cb.Do("Unk_b12c0aa", &t.Unk_b12c0aa)
	cb.Do("Unk_9b4effb", &t.Unk_9b4effb)
	cb.Do("Unk_f65fa83", &t.Unk_f65fa83)
	cb.Do("Unk_d30a7e3", &t.Unk_d30a7e3)
	cb.Do("Unk_1b1414e", &t.Unk_1b1414e)
	cb.Do("SnoMinimapNoiseTexture", &t.SnoMinimapNoiseTexture)
	cb.Do("Unk_a48542c", &t.Unk_a48542c)
	cb.Do("Unk_ef09f54", &t.Unk_ef09f54)
	cb.Do("Unk_11c15f5", &t.Unk_11c15f5)
	cb.Do("Unk_6ed18a4", &t.Unk_6ed18a4)
	cb.Do("Unk_29e5ce5", &t.Unk_29e5ce5)
	cb.Do("Unk_6f7d3ac", &t.Unk_6f7d3ac)
	cb.Do("Unk_2a917ed", &t.Unk_2a917ed)
	cb.Do("Unk_72266f8", &t.Unk_72266f8)
	cb.Do("Unk_435bf79", &t.Unk_435bf79)
	cb.Do("Unk_ac1d2c7", &t.Unk_ac1d2c7)
	cb.Do("Unk_72dd8a6", &t.Unk_72dd8a6)
	cb.Do("FlBorderWidth", &t.FlBorderWidth)
	cb.Do("FlBorderStrength", &t.FlBorderStrength)
	cb.Do("FlHighlightedBorderStrength", &t.FlHighlightedBorderStrength)
	cb.Do("Unk_c4559fc", &t.Unk_c4559fc)
	cb.Do("Unk_786fe3d", &t.Unk_786fe3d)
	cb.Do("FlMinimapDistortionFactor", &t.FlMinimapDistortionFactor)
	cb.Do("FlMinimapDistortionScale", &t.FlMinimapDistortionScale)
	cb.Do("Unk_8badfc2", &t.Unk_8badfc2)
	cb.Do("Unk_d55c009", &t.Unk_d55c009)
	cb.Do("Unk_d0f26d6", &t.Unk_d0f26d6)
	cb.Do("Unk_7a8104a", &t.Unk_7a8104a)
	cb.Do("Unk_ce839dc", &t.Unk_ce839dc)
	cb.Do("Unk_1a7cebb", &t.Unk_1a7cebb)
	cb.Do("Unk_cd7a774", &t.Unk_cd7a774)
	cb.Do("Unk_2dbafe8", &t.Unk_2dbafe8)
	cb.Do("Unk_f1bb679", &t.Unk_f1bb679)
	cb.Do("Unk_f1bb57b", &t.Unk_f1bb57b)
	cb.Do("Unk_ecabd08", &t.Unk_ecabd08)
	cb.Do("FlDurationMicroseconds", &t.FlDurationMicroseconds)
	cb.Do("Unk_dbf4030", &t.Unk_dbf4030)
	cb.Do("Unk_a133a8", &t.Unk_a133a8)
	cb.Do("Unk_f577b0", &t.Unk_f577b0)
	cb.Do("Unk_3ab43a3", &t.Unk_3ab43a3)
	cb.Do("Unk_9c8f277", &t.Unk_9c8f277)
	cb.Do("Unk_f2cc835", &t.Unk_f2cc835)
	cb.Do("Unk_a5093bf", &t.Unk_a5093bf)
	cb.Do("Unk_eeb8012", &t.Unk_eeb8012)
	cb.Do("SnoFoWShader", &t.SnoFoWShader)
	cb.Do("Unk_5dbe647", &t.Unk_5dbe647)
	cb.Do("Unk_149bdee", &t.Unk_149bdee)
	cb.Do("Unk_10d9d74", &t.Unk_10d9d74)
	cb.Do("Unk_d347c44", &t.Unk_d347c44)
	cb.Do("Unk_430d091", &t.Unk_430d091)
	cb.Do("Unk_7a41cb9", &t.Unk_7a41cb9)
	cb.Do("Unk_5c6981e", &t.Unk_5c6981e)
	cb.Do("Unk_62b69ec", &t.Unk_62b69ec)
	cb.Do("Unk_3a17c48", &t.Unk_3a17c48)
	cb.Do("TRegions", &t.TRegions)
	cb.Do("TTerritoryRegion", &t.TTerritoryRegion)
	cb.Do("Unk_2c3270", &t.Unk_2c3270)
	cb.Do("Unk_ec0001f", &t.Unk_ec0001f)
	cb.Do("Unk_c0496bf", &t.Unk_c0496bf)
	cb.Do("Unk_ec858c", &t.Unk_ec858c)
	cb.Do("Unk_5135a05", &t.Unk_5135a05)
	cb.Do("Unk_3f64492", &t.Unk_3f64492)
	cb.Do("Unk_c993839", &t.Unk_c993839)
	cb.Do("Unk_4cf9be8", &t.Unk_4cf9be8)
	cb.Do("Unk_eee69a4", &t.Unk_eee69a4)
	cb.Do("Unk_df2414f", &t.Unk_df2414f)
	cb.Do("Unk_3fdcbeb", &t.Unk_3fdcbeb)
	cb.Do("Unk_3fdcaed", &t.Unk_3fdcaed)
	cb.Do("Unk_b0e8e55", &t.Unk_b0e8e55)
	cb.Do("Unk_85356ef", &t.Unk_85356ef)
	cb.Do("TPathProps", &t.TPathProps)
	cb.Do("Unk_cfff5f6", &t.Unk_cfff5f6)
	cb.Do("TRoadProps", &t.TRoadProps)
	cb.Do("Unk_d9fccf3", &t.Unk_d9fccf3)
	cb.Do("Unk_c0e1b71", &t.Unk_c0e1b71)
	cb.Do("Unk_5161778", &t.Unk_5161778)
	cb.Do("Unk_78b2a91", &t.Unk_78b2a91)
	cb.Do("Unk_10c7eaa", &t.Unk_10c7eaa)
	cb.Do("Unk_a61c4bf", &t.Unk_a61c4bf)
	cb.Do("Unk_e058ac2", &t.Unk_e058ac2)
	cb.Do("Unk_abdc576", &t.Unk_abdc576)
	cb.Do("Unk_55e00d8", &t.Unk_55e00d8)
	cb.Do("Unk_3ba9d7b", &t.Unk_3ba9d7b)
	cb.Do("Unk_575246e", &t.Unk_575246e)
	cb.Do("Unk_155fd0", &t.Unk_155fd0)
	cb.Do("Unk_9c59a73", &t.Unk_9c59a73)
	cb.Do("Unk_88a6181", &t.Unk_88a6181)
	cb.Do("Unk_cfbdf91", &t.Unk_cfbdf91)
	cb.Do("Unk_62538b3", &t.Unk_62538b3)
	cb.Do("Unk_988bcb0", &t.Unk_988bcb0)
	cb.Do("Unk_f581a6f", &t.Unk_f581a6f)
	cb.Do("Unk_78ed1cc", &t.Unk_78ed1cc)
	cb.Do("Unk_5cf738e", &t.Unk_5cf738e)
	cb.Do("Unk_695a8a5", &t.Unk_695a8a5)
	cb.Do("Unk_b2e2e43", &t.Unk_b2e2e43)
	cb.Do("Unk_e2be78", &t.Unk_e2be78)
	cb.Do("Unk_dada65f", &t.Unk_dada65f)
	cb.Do("Unk_ccab046", &t.Unk_ccab046)
	cb.Do("Unk_78e60c2", &t.Unk_78e60c2)
	cb.Do("Unk_1333341", &t.Unk_1333341)
	cb.Do("Unk_15a4084", &t.Unk_15a4084)
	cb.Do("Unk_c019b27", &t.Unk_c019b27)
	cb.Do("Unk_c091278", &t.Unk_c091278)
	cb.Do("Unk_7c3f20c", &t.Unk_7c3f20c)
	cb.Do("Unk_f993efd", &t.Unk_f993efd)
	cb.Do("Unk_ba98f17", &t.Unk_ba98f17)
	cb.Do("ArHeroDetailsEntries", &t.ArHeroDetailsEntries)
	cb.Do("Unk_a4d68a1", &t.Unk_a4d68a1)
	cb.Do("Unk_934d708", &t.Unk_934d708)
	cb.Do("FCreatedTangents", &t.FCreatedTangents)
	cb.Do("Unk_e3de54d", &t.Unk_e3de54d)
	cb.Do("Unk_2bdd3a2", &t.Unk_2bdd3a2)
	cb.Do("Unk_6d92ca8", &t.Unk_6d92ca8)
	cb.Do("Unk_124d5ff", &t.Unk_124d5ff)
	cb.Do("Unk_99df291", &t.Unk_99df291)
	cb.Do("Unk_ecfa0a0", &t.Unk_ecfa0a0)
	cb.Do("Unk_599fb20", &t.Unk_599fb20)
	cb.Do("Unk_6fd1380", &t.Unk_6fd1380)
	cb.Do("Unk_71f6e7e", &t.Unk_71f6e7e)
	cb.Do("Unk_5df2c46", &t.Unk_5df2c46)
	cb.Do("Unk_80370e6", &t.Unk_80370e6)
	cb.Do("Unk_321b8d8", &t.Unk_321b8d8)
	cb.Do("Unk_59d8d4", &t.Unk_59d8d4)
	cb.Do("Unk_15da863", &t.Unk_15da863)
	cb.Do("Unk_67c326a", &t.Unk_67c326a)
	cb.Do("TScrollbarStyles", &t.TScrollbarStyles)
	cb.Do("NMaxRecentAchievements", &t.NMaxRecentAchievements)
	cb.Do("Unk_90ccf89", &t.Unk_90ccf89)
	cb.Do("Unk_2738127", &t.Unk_2738127)
	cb.Do("Unk_d9cee69", &t.Unk_d9cee69)
	cb.Do("Unk_d9cee6a", &t.Unk_d9cee6a)
	cb.Do("Unk_d9cee6b", &t.Unk_d9cee6b)
	cb.Do("Unk_d9cee6c", &t.Unk_d9cee6c)
	cb.Do("Unk_d9cee6d", &t.Unk_d9cee6d)
	cb.Do("Unk_d9cee6e", &t.Unk_d9cee6e)
	cb.Do("Unk_d9cee6f", &t.Unk_d9cee6f)
	cb.Do("Unk_d9cee70", &t.Unk_d9cee70)
	cb.Do("Unk_d9cf2aa", &t.Unk_d9cf2aa)
	cb.Do("Unk_d9cf2ab", &t.Unk_d9cf2ab)
	cb.Do("Unk_d9cf2ac", &t.Unk_d9cf2ac)
	cb.Do("Unk_d9cf2ad", &t.Unk_d9cf2ad)
	cb.Do("Unk_d9cf2ae", &t.Unk_d9cf2ae)
	cb.Do("Unk_d9cf2af", &t.Unk_d9cf2af)
	cb.Do("Unk_d9cf2b0", &t.Unk_d9cf2b0)
	cb.Do("Unk_d9cf2b1", &t.Unk_d9cf2b1)
	cb.Do("Unk_d9cf6eb", &t.Unk_d9cf6eb)
	cb.Do("Unk_d9cf6ec", &t.Unk_d9cf6ec)
	cb.Do("Unk_d9cf6ed", &t.Unk_d9cf6ed)
	cb.Do("Unk_d9cf6ee", &t.Unk_d9cf6ee)
	cb.Do("Unk_d9cf6ef", &t.Unk_d9cf6ef)
	cb.Do("Unk_d9cf6f0", &t.Unk_d9cf6f0)
	cb.Do("Unk_d9cf6f1", &t.Unk_d9cf6f1)
	cb.Do("Unk_d9cf6f2", &t.Unk_d9cf6f2)
	cb.Do("Unk_db41c87", &t.Unk_db41c87)
	cb.Do("Unk_ee3ceab", &t.Unk_ee3ceab)
	cb.Do("Unk_bd7d800", &t.Unk_bd7d800)
	cb.Do("Unk_9d49dc4", &t.Unk_9d49dc4)
	cb.Do("Unk_537458b", &t.Unk_537458b)
	cb.Do("Unk_d1d3a2f", &t.Unk_d1d3a2f)
	cb.Do("Unk_8e05798", &t.Unk_8e05798)
	cb.Do("Unk_d949c5c", &t.Unk_d949c5c)
	cb.Do("Unk_d3dd9b3", &t.Unk_d3dd9b3)
	cb.Do("Unk_1aea757", &t.Unk_1aea757)
	cb.Do("Unk_ac8d9e4", &t.Unk_ac8d9e4)
	cb.Do("Unk_666e28", &t.Unk_666e28)
	cb.Do("Unk_a47711", &t.Unk_a47711)
	cb.Do("SzDetailThreshhold", &t.SzDetailThreshhold)
	cb.Do("Unk_81f03e4", &t.Unk_81f03e4)
	cb.Do("Unk_c26d828", &t.Unk_c26d828)
	cb.Do("SzDetailOptimize", &t.SzDetailOptimize)
	cb.Do("Unk_dd1f975", &t.Unk_dd1f975)
	cb.Do("Unk_444be6e", &t.Unk_444be6e)
	cb.Do("Unk_8d8b8f2", &t.Unk_8d8b8f2)
	cb.Do("Unk_b45637b", &t.Unk_b45637b)
	cb.Do("Unk_15b8e1f", &t.Unk_15b8e1f)
	cb.Do("Unk_84522db", &t.Unk_84522db)
	cb.Do("Unk_ef9e97f", &t.Unk_ef9e97f)
	cb.Do("Unk_da9dee8", &t.Unk_da9dee8)
	cb.Do("Unk_b0735ac", &t.Unk_b0735ac)
	cb.Do("Unk_41cf76a", &t.Unk_41cf76a)
	cb.Do("Unk_c67ef6e", &t.Unk_c67ef6e)
	cb.Do("Unk_47c4557", &t.Unk_47c4557)
	cb.Do("Unk_635f97b", &t.Unk_635f97b)
	cb.Do("Unk_2e61264", &t.Unk_2e61264)
	cb.Do("Unk_e1af6a8", &t.Unk_e1af6a8)
	cb.Do("Unk_c68bf91", &t.Unk_c68bf91)
	cb.Do("Unk_e49e7f5", &t.Unk_e49e7f5)
	cb.Do("Unk_6eebf91", &t.Unk_6eebf91)
	cb.Do("Unk_c8fe7f5", &t.Unk_c8fe7f5)
	cb.Do("Unk_187125e", &t.Unk_187125e)
	cb.Do("Unk_b5d02e2", &t.Unk_b5d02e2)
	cb.Do("Unk_e931d19", &t.Unk_e931d19)
	cb.Do("ArBountyIcons", &t.ArBountyIcons)
	cb.Do("ArBountyTierIcons", &t.ArBountyTierIcons)
	cb.Do("Unk_aa34698", &t.Unk_aa34698)
	cb.Do("TClassInfo", &t.TClassInfo)
	cb.Do("Unk_51e3091", &t.Unk_51e3091)
	cb.Do("Unk_dc621b6", &t.Unk_dc621b6)
	cb.Do("Unk_1ff54e", &t.Unk_1ff54e)
	cb.Do("Unk_6a92c0c", &t.Unk_6a92c0c)
	cb.Do("Unk_2db68", &t.Unk_2db68)
	cb.Do("Unk_dbd3ebc", &t.Unk_dbd3ebc)
	cb.Do("Unk_bb45514", &t.Unk_bb45514)
	cb.Do("Unk_6494906", &t.Unk_6494906)
	cb.Do("Unk_31fce21", &t.Unk_31fce21)
	cb.Do("Unk_774d89f", &t.Unk_774d89f)
	cb.Do("Unk_ef2cbab", &t.Unk_ef2cbab)
	cb.Do("Unk_4f23516", &t.Unk_4f23516)
	cb.Do("Unk_d3ef4e8", &t.Unk_d3ef4e8)
	cb.Do("Unk_618bf22", &t.Unk_618bf22)
	cb.Do("Unk_199897", &t.Unk_199897)
	cb.Do("Unk_17dc82", &t.Unk_17dc82)
	cb.Do("Unk_29f26f5", &t.Unk_29f26f5)
	cb.Do("FlMinimapRevealRadius", &t.FlMinimapRevealRadius)
	cb.Do("Unk_b8c638c", &t.Unk_b8c638c)
	cb.Do("Unk_2b6498d", &t.Unk_2b6498d)
	cb.Do("Unk_7b6861c", &t.Unk_7b6861c)
	cb.Do("Unk_c56ad90", &t.Unk_c56ad90)
	cb.Do("Unk_1f7cfee", &t.Unk_1f7cfee)
	cb.Do("Unk_85af920", &t.Unk_85af920)
	cb.Do("Unk_3ec7e81", &t.Unk_3ec7e81)
	cb.Do("Unk_586724", &t.Unk_586724)
	cb.Do("Unk_1fa8d3c", &t.Unk_1fa8d3c)
	cb.Do("Unk_1fa8c3e", &t.Unk_1fa8c3e)
	cb.Do("Unk_17a967d", &t.Unk_17a967d)
	cb.Do("Unk_f063bba", &t.Unk_f063bba)
	cb.Do("Unk_ce72bfa", &t.Unk_ce72bfa)
	cb.Do("Unk_ce72afc", &t.Unk_ce72afc)
	cb.Do("Unk_9ecbbb", &t.Unk_9ecbbb)
	cb.Do("Unk_39edff8", &t.Unk_39edff8)
	cb.Do("Unk_c79c16e", &t.Unk_c79c16e)
	cb.Do("Unk_c79c070", &t.Unk_c79c070)
	cb.Do("Unk_c70a82f", &t.Unk_c70a82f)
	cb.Do("BInfiniteAmount", &t.BInfiniteAmount)
	cb.Do("Unk_26a4b93", &t.Unk_26a4b93)
}

type CompVertInfluences struct{}

func (t *CompVertInfluences) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if _, err := r.Seek(p+1, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *CompVertInfluences) Walk(cb WalkCallback) {}

type DebugActorTooltipMessage struct {
	THeader   RequiredMessageHeader
	Ann       DT_ACD_NETWORK_NAME
	SzTooltip DT_CHARARRAY
}

func (t *DebugActorTooltipMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Ann, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SzTooltip, r, &Options{
		ArrayLength: 1024,
		Flags:       1,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+1048, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *DebugActorTooltipMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("Ann", &t.Ann)
	cb.Do("SzTooltip", &t.SzTooltip)
}

type AnimSetDefinition struct {
	PtWeaponClasses  DT_VARIABLEARRAY[*DT_ENUM]
	EAnimsetType     DT_ENUM
	PtPowerEntryList DT_VARIABLEARRAY[*AnimSetPowerEntry]
	Unk_d9dcd40      DT_VARIABLEARRAY[*PowerBlendOverrideList]
	Unk_4ff6b8e      DT_VARIABLEARRAY[*Type_a1889860]
}

func (t *AnimSetDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.PtWeaponClasses, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.EAnimsetType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.PtPowerEntryList, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.Unk_d9dcd40, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.Unk_4ff6b8e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+80, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *AnimSetDefinition) Walk(cb WalkCallback) {
	cb.Do("PtWeaponClasses", &t.PtWeaponClasses)
	cb.Do("EAnimsetType", &t.EAnimsetType)
	cb.Do("PtPowerEntryList", &t.PtPowerEntryList)
	cb.Do("Unk_d9dcd40", &t.Unk_d9dcd40)
	cb.Do("Unk_4ff6b8e", &t.Unk_4ff6b8e)
}

type RevealWorldMessage struct {
	THeader               RequiredMessageHeader
	IdSWorld              DT_SHARED_SERVER_DATA_ID
	SnoWorld              DT_SNO
	Unk_2573139           DT_UINT
	Unk_b4055da           DT_OPTIONAL[*DT_VECTOR2D]
	UKeyedDungeonTier     DT_OPTIONAL[*DT_UINT]
	ArDungeonStates       DT_FIXEDARRAY[*DT_GBID]
	NDungeonStatesCount   DT_INT
	ArDungeonAffixes      DT_FIXEDARRAY[*DT_SNO]
	Unk_6966598           DT_FIXEDARRAY[*DT_SNO]
	NRemainingReviveCount DT_INT
}

func (t *RevealWorldMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.IdSWorld, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SnoWorld, r, &Options{
		Flags: 1,
		Group: 48,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.Unk_2573139, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.Unk_b4055da, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.UKeyedDungeonTier, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.ArDungeonStates, r, &Options{
		ArrayLength: 32,
		Flags:       1,
		Group:       31,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+180, &t.NDungeonStatesCount, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+184, &t.ArDungeonAffixes, r, &Options{
		ArrayLength: 8,
		Flags:       9,
		Group:       135,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+220, &t.Unk_6966598, r, &Options{
		ArrayLength: 8,
		Flags:       9,
		Group:       31,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+256, &t.NRemainingReviveCount, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+260, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *RevealWorldMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("IdSWorld", &t.IdSWorld)
	cb.Do("SnoWorld", &t.SnoWorld)
	cb.Do("Unk_2573139", &t.Unk_2573139)
	cb.Do("Unk_b4055da", &t.Unk_b4055da)
	cb.Do("UKeyedDungeonTier", &t.UKeyedDungeonTier)
	cb.Do("ArDungeonStates", &t.ArDungeonStates)
	cb.Do("NDungeonStatesCount", &t.NDungeonStatesCount)
	cb.Do("ArDungeonAffixes", &t.ArDungeonAffixes)
	cb.Do("Unk_6966598", &t.Unk_6966598)
	cb.Do("NRemainingReviveCount", &t.NRemainingReviveCount)
}

type EffectGroupStandardTrack struct {
	// Inherits EffectGroupTrack
	// Inherits PolymorphicBase
	DwType DT_UINT
	DwPad  DT_UINT
}

func (t *EffectGroupStandardTrack) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *EffectGroupStandardTrack) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
}

type UIDrawHookStyle struct {
	// Inherits UIControlStyle
	// Inherits PolymorphicBase
	DwType                    DT_UINT
	DwPad                     DT_UINT
	HParentStyle              UIControlHandle
	Unk_441f783               DT_INT64
	M_eHasModifiedPowerTagMap DT_TAGMAP[*DT_ENUM]
	Unk_db47553               DT_TAGMAP[*DT_ENUM]
}

func (t *UIDrawHookStyle) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.HParentStyle, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_441f783, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.M_eHasModifiedPowerTagMap, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.Unk_db47553, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+64, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *UIDrawHookStyle) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("HParentStyle", &t.HParentStyle)
	cb.Do("Unk_441f783", &t.Unk_441f783)
	cb.Do("M_eHasModifiedPowerTagMap", &t.M_eHasModifiedPowerTagMap)
	cb.Do("Unk_db47553", &t.Unk_db47553)
}

type Type_fa8eb4a0 struct {
	FlTime       DT_FLOAT
	FlDistortion DT_FLOAT
}

func (t *Type_fa8eb4a0) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.FlTime, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.FlDistortion, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_fa8eb4a0) Walk(cb WalkCallback) {
	cb.Do("FlTime", &t.FlTime)
	cb.Do("FlDistortion", &t.FlDistortion)
}

type Type_fa97e5b9 struct {
	SnoOceanAmbient     DT_SNO
	Unk_31e7772         DT_SNO
	SnoRiverAmbient     DT_SNO
	SnoStreamAmbient    DT_SNO
	SnoCliffEdgeAmbient DT_SNO
}

func (t *Type_fa97e5b9) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoOceanAmbient, r, &Options{
		Flags: 1,
		Group: 5,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.Unk_31e7772, r, &Options{
		Flags: 1,
		Group: 5,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.SnoRiverAmbient, r, &Options{
		Flags: 1,
		Group: 5,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.SnoStreamAmbient, r, &Options{
		Flags: 1,
		Group: 5,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoCliffEdgeAmbient, r, &Options{
		Flags: 1,
		Group: 5,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+20, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_fa97e5b9) Walk(cb WalkCallback) {
	cb.Do("SnoOceanAmbient", &t.SnoOceanAmbient)
	cb.Do("Unk_31e7772", &t.Unk_31e7772)
	cb.Do("SnoRiverAmbient", &t.SnoRiverAmbient)
	cb.Do("SnoStreamAmbient", &t.SnoStreamAmbient)
	cb.Do("SnoCliffEdgeAmbient", &t.SnoCliffEdgeAmbient)
}

type ACDCollFlagsMessage struct {
	THeader                RequiredMessageHeader
	Ann                    DT_ACD_NETWORK_NAME
	UDynamicFlagsNoOverlap DT_UINT
	UDynamicMyFlags        DT_UINT
}

func (t *ACDCollFlagsMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Ann, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.UDynamicFlagsNoOverlap, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.UDynamicMyFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ACDCollFlagsMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("Ann", &t.Ann)
	cb.Do("UDynamicFlagsNoOverlap", &t.UDynamicFlagsNoOverlap)
	cb.Do("UDynamicMyFlags", &t.UDynamicMyFlags)
}

type PopGroupHandle struct {
	SnoPopulation DT_SNO
	GbidType      DT_GBID
	NID           DT_INT
}

func (t *PopGroupHandle) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoPopulation, r, &Options{
		Flags: 1,
		Group: 84,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.GbidType, r, &Options{
		Flags: 1,
		Group: 20,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.NID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+12, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PopGroupHandle) Walk(cb WalkCallback) {
	cb.Do("SnoPopulation", &t.SnoPopulation)
	cb.Do("GbidType", &t.GbidType)
	cb.Do("NID", &t.NID)
}

type ConnectorProperties struct {
	FlThickness      DT_FLOAT
	RgbaColor        DT_RGBACOLOR
	SnoTexPattern    DT_SNO
	Unk_74b9406      DT_FLOAT
	Unk_a7a54fd      DT_FLOAT
	HDownCornerImage DT_UINT
	HUpCornerImage   DT_UINT
}

func (t *ConnectorProperties) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.FlThickness, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.RgbaColor, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.SnoTexPattern, r, &Options{
		Flags: 1,
		Group: 44,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.Unk_74b9406, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_a7a54fd, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.HDownCornerImage, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.HUpCornerImage, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+28, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ConnectorProperties) Walk(cb WalkCallback) {
	cb.Do("FlThickness", &t.FlThickness)
	cb.Do("RgbaColor", &t.RgbaColor)
	cb.Do("SnoTexPattern", &t.SnoTexPattern)
	cb.Do("Unk_74b9406", &t.Unk_74b9406)
	cb.Do("Unk_a7a54fd", &t.Unk_a7a54fd)
	cb.Do("HDownCornerImage", &t.HDownCornerImage)
	cb.Do("HUpCornerImage", &t.HUpCornerImage)
}

type MainHandItemLabelSubcondition struct {
	// Inherits Subcondition
	// Inherits PolymorphicBase
	DwType     DT_UINT
	BNegate    DT_INT
	DwPad      DT_UINT
	NItemLabel DT_ENUM
}

func (t *MainHandItemLabelSubcondition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BNegate, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.NItemLabel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *MainHandItemLabelSubcondition) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("BNegate", &t.BNegate)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("NItemLabel", &t.NItemLabel)
}

type RequestPvPInfo struct {
	THeader RequiredMessageHeader
}

func (t *RequestPvPInfo) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *RequestPvPInfo) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
}

type TriggerGizmoData struct {
	// Inherits ActorGizmoData
	// Inherits PolymorphicBase
	DwType                       DT_UINT
	DwPad                        DT_UINT
	FDisableNonFriendlyOperation DT_INT
	FWalkToCenter                DT_INT
	FGizmoStartsDisabled         DT_INT
	FUseStringListName           DT_INT
	FForceMinimapIcon            DT_INT
	FlOperationRadius            DT_FLOAT
	Unk_d0b1df5                  DT_FLOAT
	FlGizmoUseTime               DT_FLOAT
	SnoChannelingEffect          DT_SNO
	Unk_2767229                  DT_INT
	FGizmoShowProgressBar        DT_INT
	Unk_6d9ebe1                  DT_INT
	Unk_5456245                  DT_INT
	Unk_af5815a                  DT_INT
	SnoOnClickEffect             DT_SNO
	SnoPickedUpEffect            DT_SNO
	SnoDropOnGroundEffect        DT_SNO
	TConditionData               GizmoConditionData
	SnoPowerOperator             DT_SNO
	SnoPowerOperate              DT_SNO
	SnoPowerOperatorActive       DT_SNO
	SnoPowerOperateActive        DT_SNO
	Unk_359810e                  DT_INT
	NCooldown                    DT_UINT
	Unk_9c8478e                  DT_UINT
	Unk_d45ed2d                  DT_INT
	Unk_f6b20b7                  DT_INT
	Unk_54513b8                  DT_INT
	Unk_fd1f378                  DT_UINT
	Unk_487c14                   DT_UINT
	Unk_87f2609                  DT_UINT
	Unk_158eb4f                  DT_FLOAT
	Unk_ab58cd3                  DT_ENUM
	Unk_91a3966                  DT_UINT
	Unk_25312e5                  DT_UINT
	Unk_4be4371                  DT_INT
	TTriggerData                 TriggerData
}

func (t *TriggerGizmoData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.FDisableNonFriendlyOperation, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.FWalkToCenter, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.FGizmoStartsDisabled, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.FUseStringListName, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.FForceMinimapIcon, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.FlOperationRadius, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.Unk_d0b1df5, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.FlGizmoUseTime, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.SnoChannelingEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.Unk_2767229, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.FGizmoShowProgressBar, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+60, &t.Unk_6d9ebe1, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.Unk_5456245, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.Unk_af5815a, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.SnoOnClickEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.SnoPickedUpEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.SnoDropOnGroundEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.TConditionData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.SnoPowerOperator, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.SnoPowerOperate, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.SnoPowerOperatorActive, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+100, &t.SnoPowerOperateActive, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+104, &t.Unk_359810e, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+108, &t.NCooldown, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.Unk_9c8478e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+116, &t.Unk_d45ed2d, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.Unk_f6b20b7, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+124, &t.Unk_54513b8, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.Unk_fd1f378, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+132, &t.Unk_487c14, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+136, &t.Unk_87f2609, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+140, &t.Unk_158eb4f, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+144, &t.Unk_ab58cd3, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+148, &t.Unk_91a3966, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+152, &t.Unk_25312e5, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+156, &t.Unk_4be4371, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+160, &t.TTriggerData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+240, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TriggerGizmoData) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("FDisableNonFriendlyOperation", &t.FDisableNonFriendlyOperation)
	cb.Do("FWalkToCenter", &t.FWalkToCenter)
	cb.Do("FGizmoStartsDisabled", &t.FGizmoStartsDisabled)
	cb.Do("FUseStringListName", &t.FUseStringListName)
	cb.Do("FForceMinimapIcon", &t.FForceMinimapIcon)
	cb.Do("FlOperationRadius", &t.FlOperationRadius)
	cb.Do("Unk_d0b1df5", &t.Unk_d0b1df5)
	cb.Do("FlGizmoUseTime", &t.FlGizmoUseTime)
	cb.Do("SnoChannelingEffect", &t.SnoChannelingEffect)
	cb.Do("Unk_2767229", &t.Unk_2767229)
	cb.Do("FGizmoShowProgressBar", &t.FGizmoShowProgressBar)
	cb.Do("Unk_6d9ebe1", &t.Unk_6d9ebe1)
	cb.Do("Unk_5456245", &t.Unk_5456245)
	cb.Do("Unk_af5815a", &t.Unk_af5815a)
	cb.Do("SnoOnClickEffect", &t.SnoOnClickEffect)
	cb.Do("SnoPickedUpEffect", &t.SnoPickedUpEffect)
	cb.Do("SnoDropOnGroundEffect", &t.SnoDropOnGroundEffect)
	cb.Do("TConditionData", &t.TConditionData)
	cb.Do("SnoPowerOperator", &t.SnoPowerOperator)
	cb.Do("SnoPowerOperate", &t.SnoPowerOperate)
	cb.Do("SnoPowerOperatorActive", &t.SnoPowerOperatorActive)
	cb.Do("SnoPowerOperateActive", &t.SnoPowerOperateActive)
	cb.Do("Unk_359810e", &t.Unk_359810e)
	cb.Do("NCooldown", &t.NCooldown)
	cb.Do("Unk_9c8478e", &t.Unk_9c8478e)
	cb.Do("Unk_d45ed2d", &t.Unk_d45ed2d)
	cb.Do("Unk_f6b20b7", &t.Unk_f6b20b7)
	cb.Do("Unk_54513b8", &t.Unk_54513b8)
	cb.Do("Unk_fd1f378", &t.Unk_fd1f378)
	cb.Do("Unk_487c14", &t.Unk_487c14)
	cb.Do("Unk_87f2609", &t.Unk_87f2609)
	cb.Do("Unk_158eb4f", &t.Unk_158eb4f)
	cb.Do("Unk_ab58cd3", &t.Unk_ab58cd3)
	cb.Do("Unk_91a3966", &t.Unk_91a3966)
	cb.Do("Unk_25312e5", &t.Unk_25312e5)
	cb.Do("Unk_4be4371", &t.Unk_4be4371)
	cb.Do("TTriggerData", &t.TTriggerData)
}

type Type_fb1b44b9 struct {
	SzProgressTarget                DT_CSTRING[*DT_BYTE]
	SzForegroundChild               DT_CSTRING[*DT_BYTE]
	SnoProgressForegroundTiledStyle DT_SNO
	SnoProgressBackgroundTiledStyle DT_SNO
	Unk_309438d                     DT_SNO
	ESmoothing                      DT_ENUM
	FlSmoothingSpeed                DT_FLOAT
}

func (t *Type_fb1b44b9) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SzProgressTarget, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SzForegroundChild, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.SnoProgressForegroundTiledStyle, r, &Options{
		Flags: 1,
		Group: 103,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.SnoProgressBackgroundTiledStyle, r, &Options{
		Flags: 1,
		Group: 103,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.Unk_309438d, r, &Options{
		Flags: 1,
		Group: 40,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.ESmoothing, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.FlSmoothingSpeed, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+56, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_fb1b44b9) Walk(cb WalkCallback) {
	cb.Do("SzProgressTarget", &t.SzProgressTarget)
	cb.Do("SzForegroundChild", &t.SzForegroundChild)
	cb.Do("SnoProgressForegroundTiledStyle", &t.SnoProgressForegroundTiledStyle)
	cb.Do("SnoProgressBackgroundTiledStyle", &t.SnoProgressBackgroundTiledStyle)
	cb.Do("Unk_309438d", &t.Unk_309438d)
	cb.Do("ESmoothing", &t.ESmoothing)
	cb.Do("FlSmoothingSpeed", &t.FlSmoothingSpeed)
}

type TransmogSlot struct {
	ESlot     DT_ENUM
	TTransmog Transmog
	BEnabled  DT_INT
}

func (t *TransmogSlot) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.ESlot, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.TTransmog, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.BEnabled, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TransmogSlot) Walk(cb WalkCallback) {
	cb.Do("ESlot", &t.ESlot)
	cb.Do("TTransmog", &t.TTransmog)
	cb.Do("BEnabled", &t.BEnabled)
}

type LogoutTickTimeMessage struct {
	THeader       RequiredMessageHeader
	EContext      DT_ENUM
	UMinWaitTicks DT_UINT
	UMaxWaitTicks DT_UINT
	UKickTicks    DT_UINT
}

func (t *LogoutTickTimeMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.EContext, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.UMinWaitTicks, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.UMaxWaitTicks, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.UKickTicks, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *LogoutTickTimeMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("EContext", &t.EContext)
	cb.Do("UMinWaitTicks", &t.UMinWaitTicks)
	cb.Do("UMaxWaitTicks", &t.UMaxWaitTicks)
	cb.Do("UKickTicks", &t.UKickTicks)
}

type ImageFileID struct {
	SzFileName       DT_CHARARRAY
	SzSourceFileName DT_CHARARRAY
	NFrameIndex      DT_INT
}

func (t *ImageFileID) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SzFileName, r, &Options{
		ArrayLength: 256,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+256, &t.SzSourceFileName, r, &Options{
		ArrayLength: 256,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+512, &t.NFrameIndex, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+516, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ImageFileID) Walk(cb WalkCallback) {
	cb.Do("SzFileName", &t.SzFileName)
	cb.Do("SzSourceFileName", &t.SzSourceFileName)
	cb.Do("NFrameIndex", &t.NFrameIndex)
}

type EffectGroupScaleZKeyData struct {
	// Inherits EffectGroupKeyData
	// Inherits PolymorphicBase
	DwType     DT_UINT
	DwPad      DT_UINT
	ArKeyItems DT_VARIABLEARRAY[*EffectGroupKey]
}

func (t *EffectGroupScaleZKeyData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.ArKeyItems, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *EffectGroupScaleZKeyData) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("ArKeyItems", &t.ArKeyItems)
}

type MountSelectMessage struct {
	THeader              RequiredMessageHeader
	SnoSelectedMountItem DT_SNO
}

func (t *MountSelectMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoSelectedMountItem, r, &Options{
		Flags: 1,
		Group: 73,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+20, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *MountSelectMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("SnoSelectedMountItem", &t.SnoSelectedMountItem)
}

type dmPlaneMirror struct {
	Normal DT_VECTOR3D
	Offset DT_FLOAT
}

func (t *dmPlaneMirror) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Normal, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.Offset, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *dmPlaneMirror) Walk(cb WalkCallback) {
	cb.Do("Normal", &t.Normal)
	cb.Do("Offset", &t.Offset)
}

type Type_fbb7557a struct {
	DwPlaylistID    DT_UINT
	DwPlaylistIndex DT_UINT
}

func (t *Type_fbb7557a) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.DwPlaylistID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.DwPlaylistIndex, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_fbb7557a) Walk(cb WalkCallback) {
	cb.Do("DwPlaylistID", &t.DwPlaylistID)
	cb.Do("DwPlaylistIndex", &t.DwPlaylistIndex)
}

type Type_fbdf1440 struct {
	ArBones DT_VARIABLEARRAY[*AppBone]
}

func (t *Type_fbdf1440) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.ArBones, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_fbdf1440) Walk(cb WalkCallback) {
	cb.Do("ArBones", &t.ArBones)
}

type EmitterSubObjectData struct {
	// Inherits EmitterDataBase
	// Inherits PolymorphicBase
	DwType              DT_UINT
	DwPad               DT_UINT
	FSequential         DT_INT
	SzSubObjectName     DT_UINT
	PathSequentialRange Type_cbfdd2ea
}

func (t *EmitterSubObjectData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.FSequential, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.SzSubObjectName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.PathSequentialRange, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+80, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *EmitterSubObjectData) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("FSequential", &t.FSequential)
	cb.Do("SzSubObjectName", &t.SzSubObjectName)
	cb.Do("PathSequentialRange", &t.PathSequentialRange)
}

type Type_fbecf664 struct {
	// Inherits Type_4e43aa7a
	DwType      DT_UINT
	Unk_9b2bc26 Type_80fa280c
	Unk_77ed19a DT_ENUM
	DwPad       DT_UINT
}

func (t *Type_fbecf664) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_9b2bc26, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.Unk_77ed19a, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+56, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_fbecf664) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("Unk_9b2bc26", &t.Unk_9b2bc26)
	cb.Do("Unk_77ed19a", &t.Unk_77ed19a)
	cb.Do("DwPad", &t.DwPad)
}

type GlobalMarkerActorHiddenCacheData struct {
	// Inherits GlobalMarkerActorData
	// Inherits PolymorphicBase
	DwType          DT_UINT
	DwPad           DT_UINT
	GbidHiddenCache DT_GBID
}

func (t *GlobalMarkerActorHiddenCacheData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.GbidHiddenCache, r, &Options{
		Flags: 1,
		Group: 28,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *GlobalMarkerActorHiddenCacheData) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("GbidHiddenCache", &t.GbidHiddenCache)
}

type TranslationKey struct {
	NFrame DT_INT
	Wp     DT_VECTOR3D
}

func (t *TranslationKey) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.NFrame, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.Wp, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TranslationKey) Walk(cb WalkCallback) {
	cb.Do("NFrame", &t.NFrame)
	cb.Do("Wp", &t.Wp)
}

type IconScale struct {
	Unk_19dc976 DT_TAGMAP[*DT_ENUM]
}

func (t *IconScale) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Unk_19dc976, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *IconScale) Walk(cb WalkCallback) {
	cb.Do("Unk_19dc976", &t.Unk_19dc976)
}

type IconAnchorPoint struct {
	SzName      DT_UINT
	Unk_fd93db3 DT_TAGMAP[*DT_ENUM]
}

func (t *IconAnchorPoint) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SzName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.Unk_fd93db3, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *IconAnchorPoint) Walk(cb WalkCallback) {
	cb.Do("SzName", &t.SzName)
	cb.Do("Unk_fd93db3", &t.Unk_fd93db3)
}

type DungeonStatesEntry_Table struct {
	// Inherits GameBalanceTable
	// Inherits PolymorphicBase
	DwType   DT_UINT
	DwPad    DT_UINT
	TEntries DT_VARIABLEARRAY[*DungeonStatesEntry]
}

func (t *DungeonStatesEntry_Table) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TEntries, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *DungeonStatesEntry_Table) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("TEntries", &t.TEntries)
}

type MailReadResponseMessage struct {
	THeader RequiredMessageHeader
	IdMail  Type_f5ac91bb
	IdErr   DT_INT
}

func (t *MailReadResponseMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.IdMail, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.IdErr, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+40, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *MailReadResponseMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("IdMail", &t.IdMail)
	cb.Do("IdErr", &t.IdErr)
}

type NecroArmySpecUpgradeMessage struct {
	THeader                  RequiredMessageHeader
	EUnitType                DT_ENUM
	ESpecialization          DT_ENUM
	SnoSpecializationUpgrade DT_SNO
}

func (t *NecroArmySpecUpgradeMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.EUnitType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.ESpecialization, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SnoSpecializationUpgrade, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+28, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *NecroArmySpecUpgradeMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("EUnitType", &t.EUnitType)
	cb.Do("ESpecialization", &t.ESpecialization)
	cb.Do("SnoSpecializationUpgrade", &t.SnoSpecializationUpgrade)
}

type Type_fcb18f8f struct {
	// Inherits ScriptEventParamBase
	// Inherits PolymorphicBase
	DwType        DT_UINT
	EParamType    DT_ENUM
	DwPad         DT_UINT
	TMarkerHandle MarkerHandle
	DwGroupHash   DT_UINT
	IdValue       DT_INT
	SzGroup       DT_CSTRING[*DT_BYTE]
}

func (t *Type_fcb18f8f) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.EParamType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.TMarkerHandle, r, &Options{Flags: 513}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.DwGroupHash, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.IdValue, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.SzGroup, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+56, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_fcb18f8f) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("EParamType", &t.EParamType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("TMarkerHandle", &t.TMarkerHandle)
	cb.Do("DwGroupHash", &t.DwGroupHash)
	cb.Do("IdValue", &t.IdValue)
	cb.Do("SzGroup", &t.SzGroup)
}

type ExternalPlatform struct {
	SzProductId DT_CSTRING[*DT_BYTE]
}

func (t *ExternalPlatform) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SzProductId, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ExternalPlatform) Walk(cb WalkCallback) {
	cb.Do("SzProductId", &t.SzProductId)
}

type SkillKitDefinition struct {
	ArActiveSkillEntries     DT_VARIABLEARRAY[*ActiveSkillEntry]
	ArDefaultSkillLoadout    DT_VARIABLEARRAY[*DT_SNO]
	ArNodes                  DT_VARIABLEARRAY[*SkillTreeNode]
	ArConnections            DT_VARIABLEARRAY[*SkillTreeNodeConnection]
	DwNextID                 DT_UINT
	VNodeMinPositions        DT_VECTOR2D
	VNodeMaxPositions        DT_VECTOR2D
	VRootNodeCenterPosition  DT_VECTOR2D
	VBackgroundImagePosition DT_VECTOR2D
}

func (t *SkillKitDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.ArActiveSkillEntries, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ArDefaultSkillLoadout, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.ArNodes, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.ArConnections, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.DwNextID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.VNodeMinPositions, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.VNodeMaxPositions, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.VRootNodeCenterPosition, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+100, &t.VBackgroundImagePosition, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+112, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *SkillKitDefinition) Walk(cb WalkCallback) {
	cb.Do("ArActiveSkillEntries", &t.ArActiveSkillEntries)
	cb.Do("ArDefaultSkillLoadout", &t.ArDefaultSkillLoadout)
	cb.Do("ArNodes", &t.ArNodes)
	cb.Do("ArConnections", &t.ArConnections)
	cb.Do("DwNextID", &t.DwNextID)
	cb.Do("VNodeMinPositions", &t.VNodeMinPositions)
	cb.Do("VNodeMaxPositions", &t.VNodeMaxPositions)
	cb.Do("VRootNodeCenterPosition", &t.VRootNodeCenterPosition)
	cb.Do("VBackgroundImagePosition", &t.VBackgroundImagePosition)
}

type MarkingColorDefinition struct {
	NSortOrder  DT_INT
	FIsTattoo   DT_INT
	Unk_fc3d8a3 DT_FIXEDARRAY[*DT_RGBACOLORVALUE]
	Unk_37592cc DT_FLOAT
	Unk_7c43e7a DT_FLOAT
}

func (t *MarkingColorDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.NSortOrder, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.FIsTattoo, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_fc3d8a3, r, &Options{ArrayLength: 3}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.Unk_37592cc, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.Unk_7c43e7a, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+72, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *MarkingColorDefinition) Walk(cb WalkCallback) {
	cb.Do("NSortOrder", &t.NSortOrder)
	cb.Do("FIsTattoo", &t.FIsTattoo)
	cb.Do("Unk_fc3d8a3", &t.Unk_fc3d8a3)
	cb.Do("Unk_37592cc", &t.Unk_37592cc)
	cb.Do("Unk_7c43e7a", &t.Unk_7c43e7a)
}

type BountyTierIcons struct {
	HIconSelected         DT_UINT
	HIconNormal           DT_UINT
	HIconDisabled         DT_UINT
	HIconDisabledSelected DT_UINT
}

func (t *BountyTierIcons) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.HIconSelected, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.HIconNormal, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.HIconDisabled, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.HIconDisabledSelected, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *BountyTierIcons) Walk(cb WalkCallback) {
	cb.Do("HIconSelected", &t.HIconSelected)
	cb.Do("HIconNormal", &t.HIconNormal)
	cb.Do("HIconDisabled", &t.HIconDisabled)
	cb.Do("HIconDisabledSelected", &t.HIconDisabledSelected)
}

type ItemPVPEarDataMessage struct {
	THeader       RequiredMessageHeader
	Ann           DT_ACD_NETWORK_NAME
	IdGameAccount DT_UINT
	Unk_81ffda3   DT_UINT
	NPlayerClass  DT_INT
	BIsMale       DT_INT
	NLevel        DT_INT
	SnoLevelArea  DT_SNO
}

func (t *ItemPVPEarDataMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Ann, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.IdGameAccount, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.Unk_81ffda3, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.NPlayerClass, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.BIsMale, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.NLevel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.SnoLevelArea, r, &Options{
		Flags: 1,
		Group: 22,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ItemPVPEarDataMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("Ann", &t.Ann)
	cb.Do("IdGameAccount", &t.IdGameAccount)
	cb.Do("Unk_81ffda3", &t.Unk_81ffda3)
	cb.Do("NPlayerClass", &t.NPlayerClass)
	cb.Do("BIsMale", &t.BIsMale)
	cb.Do("NLevel", &t.NLevel)
	cb.Do("SnoLevelArea", &t.SnoLevelArea)
}

type MarkerHeightFieldSection struct {
	NWidth            DT_INT
	NHeight           DT_INT
	NMaxHeight        DT_WORD
	NMinHeight        DT_WORD
	Unk_784cc0a       DT_FLOAT
	Unk_96d4a3a       DT_VARIABLEARRAY[*DT_SNO]
	Unk_92a8c46       DT_VARIABLEARRAY[*MarkerHeightFieldTextureInfo]
	Unk_66ea301       MarkerHeightFieldTextureInfo
	Unk_573867e       MarkerHeightFieldTextureInfo
	Unk_50ad237       MarkerHeightFieldTextureInfo
	Unk_b7e82ff       MarkerHeightFieldTextureInfo
	Unk_aae2d5e       MarkerHeightFieldTextureInfo
	ArBiomes          DT_VARIABLEARRAY[*DT_SNO]
	ArClutter         DT_VARIABLEARRAY[*MarkerHeightFieldClutter]
	TOceanIndicesInfo Type_bf456a16
	Unk_4fbebbf       Type_bf456a16
	TIndicesInfo      Type_bf456a16
	Unk_eb5aed9       Type_bf456a16
	Unk_7c5feb2       Type_bf456a16
	Unk_4963bda       Type_bf456a16
	ArLODs            DT_VARIABLEARRAY[*Type_bf456a16]
	ArFogMask         DT_VARIABLEARRAY[*DT_BYTE]
	ArOceanMask       DT_VARIABLEARRAY[*DT_BYTE]
	Unk_131b0a2       DT_VECTOR4D
}

func (t *MarkerHeightFieldSection) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.NWidth, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.NHeight, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.NMaxHeight, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+10, &t.NMinHeight, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.Unk_784cc0a, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_96d4a3a, r, &Options{
		Flags: 1,
		Group: 57,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.Unk_92a8c46, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.Unk_66ea301, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+60, &t.Unk_573867e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_50ad237, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.Unk_b7e82ff, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.Unk_aae2d5e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.ArBiomes, r, &Options{
		Flags: 1,
		Group: 77,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.ArClutter, r, &Options{Flags: 2097153}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+144, &t.TOceanIndicesInfo, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+152, &t.Unk_4fbebbf, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+160, &t.TIndicesInfo, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+168, &t.Unk_eb5aed9, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+176, &t.Unk_7c5feb2, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+184, &t.Unk_4963bda, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+192, &t.ArLODs, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+208, &t.ArFogMask, r, &Options{Flags: 2097153}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+224, &t.ArOceanMask, r, &Options{Flags: 2097153}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+240, &t.Unk_131b0a2, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+256, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *MarkerHeightFieldSection) Walk(cb WalkCallback) {
	cb.Do("NWidth", &t.NWidth)
	cb.Do("NHeight", &t.NHeight)
	cb.Do("NMaxHeight", &t.NMaxHeight)
	cb.Do("NMinHeight", &t.NMinHeight)
	cb.Do("Unk_784cc0a", &t.Unk_784cc0a)
	cb.Do("Unk_96d4a3a", &t.Unk_96d4a3a)
	cb.Do("Unk_92a8c46", &t.Unk_92a8c46)
	cb.Do("Unk_66ea301", &t.Unk_66ea301)
	cb.Do("Unk_573867e", &t.Unk_573867e)
	cb.Do("Unk_50ad237", &t.Unk_50ad237)
	cb.Do("Unk_b7e82ff", &t.Unk_b7e82ff)
	cb.Do("Unk_aae2d5e", &t.Unk_aae2d5e)
	cb.Do("ArBiomes", &t.ArBiomes)
	cb.Do("ArClutter", &t.ArClutter)
	cb.Do("TOceanIndicesInfo", &t.TOceanIndicesInfo)
	cb.Do("Unk_4fbebbf", &t.Unk_4fbebbf)
	cb.Do("TIndicesInfo", &t.TIndicesInfo)
	cb.Do("Unk_eb5aed9", &t.Unk_eb5aed9)
	cb.Do("Unk_7c5feb2", &t.Unk_7c5feb2)
	cb.Do("Unk_4963bda", &t.Unk_4963bda)
	cb.Do("ArLODs", &t.ArLODs)
	cb.Do("ArFogMask", &t.ArFogMask)
	cb.Do("ArOceanMask", &t.ArOceanMask)
	cb.Do("Unk_131b0a2", &t.Unk_131b0a2)
}

type VertexCountSettings struct {
	NVertexCountMin DT_INT
	NVertexCountMax DT_INT
}

func (t *VertexCountSettings) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.NVertexCountMin, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.NVertexCountMax, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *VertexCountSettings) Walk(cb WalkCallback) {
	cb.Do("NVertexCountMin", &t.NVertexCountMin)
	cb.Do("NVertexCountMax", &t.NVertexCountMax)
}

type PlayerPotionDosesSubcondition struct {
	// Inherits Type_d3c3637f
	// Inherits Subcondition
	// Inherits PolymorphicBase
	DwType        DT_UINT
	BNegate       DT_INT
	EComparisonOp DT_ENUM
	DwPad         DT_UINT
	NPotionCount  DT_INT
}

func (t *PlayerPotionDosesSubcondition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BNegate, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.EComparisonOp, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.NPotionCount, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+40, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PlayerPotionDosesSubcondition) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("BNegate", &t.BNegate)
	cb.Do("EComparisonOp", &t.EComparisonOp)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("NPotionCount", &t.NPotionCount)
}

type Type_fd884ad3 struct {
	StartIndex DT_WORD
	EndIndex   DT_WORD
}

func (t *Type_fd884ad3) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.StartIndex, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2, &t.EndIndex, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+4, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_fd884ad3) Walk(cb WalkCallback) {
	cb.Do("StartIndex", &t.StartIndex)
	cb.Do("EndIndex", &t.EndIndex)
}

type PrefetchMarkerSetMessage struct {
	THeader      RequiredMessageHeader
	SnoMarkerSet DT_SNO
	Unk_a61d97   DT_OPTIONAL[*DT_INT]
}

func (t *PrefetchMarkerSetMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoMarkerSet, r, &Options{
		Flags: 1,
		Group: 24,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.Unk_a61d97, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+28, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PrefetchMarkerSetMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("SnoMarkerSet", &t.SnoMarkerSet)
	cb.Do("Unk_a61d97", &t.Unk_a61d97)
}

type SurfaceGridPrimitive struct {
	DwHeight   DT_BYTE
	SnoSurface DT_UINT
}

func (t *SurfaceGridPrimitive) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.DwHeight, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.SnoSurface, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *SurfaceGridPrimitive) Walk(cb WalkCallback) {
	cb.Do("DwHeight", &t.DwHeight)
	cb.Do("SnoSurface", &t.SnoSurface)
}

type Type_fe183d60 struct {
	Unk_651223  DT_FLOAT
	Unk_651224  DT_FLOAT
	Unk_651225  DT_FLOAT
	Unk_651226  DT_FLOAT
	Unk_651227  DT_FLOAT
	Unk_651228  DT_FLOAT
	Unk_bd37344 DT_RGBACOLOR
	Unk_bd37345 DT_RGBACOLOR
	Unk_bd37346 DT_RGBACOLOR
	Unk_bd37347 DT_RGBACOLOR
	Unk_bd37348 DT_RGBACOLOR
	Unk_bd37349 DT_RGBACOLOR
}

func (t *Type_fe183d60) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Unk_651223, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.Unk_651224, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.Unk_651225, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.Unk_651226, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_651227, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.Unk_651228, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_bd37344, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.Unk_bd37345, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.Unk_bd37346, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.Unk_bd37347, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.Unk_bd37348, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.Unk_bd37349, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_fe183d60) Walk(cb WalkCallback) {
	cb.Do("Unk_651223", &t.Unk_651223)
	cb.Do("Unk_651224", &t.Unk_651224)
	cb.Do("Unk_651225", &t.Unk_651225)
	cb.Do("Unk_651226", &t.Unk_651226)
	cb.Do("Unk_651227", &t.Unk_651227)
	cb.Do("Unk_651228", &t.Unk_651228)
	cb.Do("Unk_bd37344", &t.Unk_bd37344)
	cb.Do("Unk_bd37345", &t.Unk_bd37345)
	cb.Do("Unk_bd37346", &t.Unk_bd37346)
	cb.Do("Unk_bd37347", &t.Unk_bd37347)
	cb.Do("Unk_bd37348", &t.Unk_bd37348)
	cb.Do("Unk_bd37349", &t.Unk_bd37349)
}

type DynamicAudioState struct {
	TAudioState       WwiseSwitchValue
	TTriggerRange     DT_RANGE[*DT_FLOAT]
	FlMinimumDuration DT_FLOAT
}

func (t *DynamicAudioState) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.TAudioState, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.TTriggerRange, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.FlMinimumDuration, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+20, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *DynamicAudioState) Walk(cb WalkCallback) {
	cb.Do("TAudioState", &t.TAudioState)
	cb.Do("TTriggerRange", &t.TTriggerRange)
	cb.Do("FlMinimumDuration", &t.FlMinimumDuration)
}

type Type_fe214945 struct {
	// Inherits PowerCallbackBase
	// Inherits PolymorphicBase
	DwType                DT_UINT
	DwPad                 DT_UINT
	SnoTriggerEffectGroup DT_SNO
	BCouldHaveRagdolled   DT_INT
}

func (t *Type_fe214945) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoTriggerEffectGroup, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.BCouldHaveRagdolled, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_fe214945) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("SnoTriggerEffectGroup", &t.SnoTriggerEffectGroup)
	cb.Do("BCouldHaveRagdolled", &t.BCouldHaveRagdolled)
}

type OnPhaseExitedPowerCallback struct {
	// Inherits PowerCallbackBase
	// Inherits PolymorphicBase
	DwType                DT_UINT
	DwPad                 DT_UINT
	SnoTriggerEffectGroup DT_SNO
	BCouldHaveRagdolled   DT_INT
	TPhaseName            DT_UINT
}

func (t *OnPhaseExitedPowerCallback) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoTriggerEffectGroup, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.BCouldHaveRagdolled, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.TPhaseName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *OnPhaseExitedPowerCallback) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("SnoTriggerEffectGroup", &t.SnoTriggerEffectGroup)
	cb.Do("BCouldHaveRagdolled", &t.BCouldHaveRagdolled)
	cb.Do("TPhaseName", &t.TPhaseName)
}

type LabelRuleSet struct {
	ArRules DT_VARIABLEARRAY[*LabelRule]
}

func (t *LabelRuleSet) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.ArRules, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *LabelRuleSet) Walk(cb WalkCallback) {
	cb.Do("ArRules", &t.ArRules)
}

type AIStateDebugSetLoopMessage struct {
	THeader       RequiredMessageHeader
	AnnActor      DT_ACD_NETWORK_NAME
	DwCooldownKey DT_INT64
	FlCooldown    DT_FLOAT
}

func (t *AIStateDebugSetLoopMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.AnnActor, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.DwCooldownKey, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.FlCooldown, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+40, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *AIStateDebugSetLoopMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("AnnActor", &t.AnnActor)
	cb.Do("DwCooldownKey", &t.DwCooldownKey)
	cb.Do("FlCooldown", &t.FlCooldown)
}

type SetTetherInfoForPlayerMessage struct {
	THeader        RequiredMessageHeader
	AnnPlayer      DT_ACD_NETWORK_NAME
	FlTetherRadius DT_FLOAT
	WpTetherPoint  SharedServerWorldPlace
}

func (t *SetTetherInfoForPlayerMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.AnnPlayer, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.FlTetherRadius, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.WpTetherPoint, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *SetTetherInfoForPlayerMessage) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("AnnPlayer", &t.AnnPlayer)
	cb.Do("FlTetherRadius", &t.FlTetherRadius)
	cb.Do("WpTetherPoint", &t.WpTetherPoint)
}

type TrackPieces struct {
	// Inherits WindowPiecesBase
	// Inherits PolymorphicBase
	DwType       DT_UINT
	DwPad        DT_UINT
	FlImageScale DT_FLOAT
	NPadding     DT_UINT
	HPieceFrame  DT_FIXEDARRAY[*DT_UINT]
}

func (t *TrackPieces) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.FlImageScale, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.NPadding, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.HPieceFrame, r, &Options{
		ArrayLength: 3,
		Flags:       1,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+40, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TrackPieces) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("FlImageScale", &t.FlImageScale)
	cb.Do("NPadding", &t.NPadding)
	cb.Do("HPieceFrame", &t.HPieceFrame)
}

type SkillExtraAndArsenalEntry struct {
	SnoPower     DT_SNO
	DwWeaponSlot DT_INT
}

func (t *SkillExtraAndArsenalEntry) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoPower, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.DwWeaponSlot, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *SkillExtraAndArsenalEntry) Walk(cb WalkCallback) {
	cb.Do("SnoPower", &t.SnoPower)
	cb.Do("DwWeaponSlot", &t.DwWeaponSlot)
}

type Type_feb5d551 struct {
	// Inherits TriggerEvent
	// Inherits PolymorphicBase
	DwType            DT_UINT
	DwPad             DT_UINT
	TConditions       TriggerConditions
	FGenerated        DT_INT
	Unk_6cba752       DT_INT
	DwParentActorID   DT_UINT
	BOverridePosition DT_INT
	VecPosition       DT_VECTOR2D
}

func (t *Type_feb5d551) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.FGenerated, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_6cba752, r, &Options{Flags: 16}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.DwParentActorID, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.BOverridePosition, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.VecPosition, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+96, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_feb5d551) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("TConditions", &t.TConditions)
	cb.Do("FGenerated", &t.FGenerated)
	cb.Do("Unk_6cba752", &t.Unk_6cba752)
	cb.Do("DwParentActorID", &t.DwParentActorID)
	cb.Do("BOverridePosition", &t.BOverridePosition)
	cb.Do("VecPosition", &t.VecPosition)
}

type Type_ff4098b9 struct {
	ArSnos      DT_VARIABLEARRAY[*DT_SNO]
	Unk_7fc1b58 DT_INT
	Unk_cc11a8e DT_VARIABLEARRAY[*DT_BYTE]
}

func (t *Type_ff4098b9) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.ArSnos, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_7fc1b58, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_cc11a8e, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+40, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_ff4098b9) Walk(cb WalkCallback) {
	cb.Do("ArSnos", &t.ArSnos)
	cb.Do("Unk_7fc1b58", &t.Unk_7fc1b58)
	cb.Do("Unk_cc11a8e", &t.Unk_cc11a8e)
}

type DeathTemplate struct{}

func (t *DeathTemplate) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if _, err := r.Seek(p+1, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *DeathTemplate) Walk(cb WalkCallback) {}

type CriteriaStartEvent struct {
	// Inherits CriteriaEvent
	// Inherits PolymorphicBase
	DwType               DT_UINT
	EId                  DT_ENUM
	ArModifier           DT_VARIABLEARRAY[*CriteriaModifier]
	Snoname              DT_SNO_NAME
	EGizmoType           DT_ENUM
	EIQL                 DT_ENUM
	ESlot                DT_ENUM
	EHealType            DT_ENUM
	ECurrencyType        DT_ENUM
	EZone                DT_ENUM
	UVal                 DT_UINT
	GbidAchievementEvent DT_GBID
	UOperand             DT_INT64
	BUsesOperand         DT_INT
	DwPad                DT_UINT
	UTimerDuration       DT_INT64
}

func (t *CriteriaStartEvent) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.EId, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ArModifier, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.Snoname, r, &Options{Flags: 513}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.EGizmoType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.EIQL, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.ESlot, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+60, &t.EHealType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.ECurrencyType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.EZone, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.UVal, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.GbidAchievementEvent, r, &Options{
		Flags: 1,
		Group: 62,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.UOperand, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.BUsesOperand, r, &Options{Flags: 16}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.UTimerDuration, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+104, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *CriteriaStartEvent) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("EId", &t.EId)
	cb.Do("ArModifier", &t.ArModifier)
	cb.Do("Snoname", &t.Snoname)
	cb.Do("EGizmoType", &t.EGizmoType)
	cb.Do("EIQL", &t.EIQL)
	cb.Do("ESlot", &t.ESlot)
	cb.Do("EHealType", &t.EHealType)
	cb.Do("ECurrencyType", &t.ECurrencyType)
	cb.Do("EZone", &t.EZone)
	cb.Do("UVal", &t.UVal)
	cb.Do("GbidAchievementEvent", &t.GbidAchievementEvent)
	cb.Do("UOperand", &t.UOperand)
	cb.Do("BUsesOperand", &t.BUsesOperand)
	cb.Do("DwPad", &t.DwPad)
	cb.Do("UTimerDuration", &t.UTimerDuration)
}

type SubzoneModifierTagsEntry struct {
	THeader             GBIDHeader
	SnoPower            DT_SNO
	SnoBuff             DT_SNO
	Unk_891f4a8         DT_SNO
	Unk_82ec588         DT_FLOAT
	NMonsterLevelOffset DT_INT
	ArSpawnLocOverrides DT_VARIABLEARRAY[*SpawnLocOverrideData]
	Unk_a60ef1c         DT_INT
}

func (t *SubzoneModifierTagsEntry) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+260, &t.SnoPower, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+264, &t.SnoBuff, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+268, &t.Unk_891f4a8, r, &Options{
		Flags: 1,
		Group: 31,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+272, &t.Unk_82ec588, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+276, &t.NMonsterLevelOffset, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+280, &t.ArSpawnLocOverrides, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+296, &t.Unk_a60ef1c, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+304, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *SubzoneModifierTagsEntry) Walk(cb WalkCallback) {
	cb.Do("THeader", &t.THeader)
	cb.Do("SnoPower", &t.SnoPower)
	cb.Do("SnoBuff", &t.SnoBuff)
	cb.Do("Unk_891f4a8", &t.Unk_891f4a8)
	cb.Do("Unk_82ec588", &t.Unk_82ec588)
	cb.Do("NMonsterLevelOffset", &t.NMonsterLevelOffset)
	cb.Do("ArSpawnLocOverrides", &t.ArSpawnLocOverrides)
	cb.Do("Unk_a60ef1c", &t.Unk_a60ef1c)
}

type PowerConditionIsPlayerActiveSkill struct {
	// Inherits PowerConditionBase
	// Inherits PolymorphicBase
	DwType   DT_UINT
	BInverse DT_INT
	DwPad    DT_UINT
}

func (t *PowerConditionIsPlayerActiveSkill) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BInverse, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PowerConditionIsPlayerActiveSkill) Walk(cb WalkCallback) {
	cb.Do("DwType", &t.DwType)
	cb.Do("BInverse", &t.BInverse)
	cb.Do("DwPad", &t.DwPad)
}
