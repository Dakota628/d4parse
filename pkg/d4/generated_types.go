// Code generated by structgen ../../d4data/definitions.json generated_types.go; DO NOT EDIT.

package d4

import (
	bin "github.com/Dakota628/d4parse/pkg/bin"
	"io"
)

func NewByFormatHash(h int) Object {
	switch h {
	case 123576589:
		return &SoundTableDefinition{}
	case 2705556582:
		return &TiledStyleDefinition{}
	case 1401597153:
		return &ObserverDefinition{}
	case 2771942927:
		return &BiomeDefinition{}
	case 3566681776:
		return &WorldDefinition{}
	case 1192308202:
		return &AffixDefinition{}
	case 7088667:
		return &SetItemBonusDefinition{}
	case 395883757:
		return &ConditionDefinition{}
	case 82396672:
		return &FogVolumeDefinition{}
	case 1250305163:
		return &PowerDefinition{}
	case 2697244277:
		return &TutorialDefinition{}
	case 2584104448:
		return &ParagonGlyphAffixDefinition{}
	case 755559698:
		return &MakeupDefinition{}
	case 897638220:
		return &MonsterAffixDefinition{}
	case 3033698537:
		return &TownPortalCosmeticDefinition{}
	case 2207565651:
		return &MountProfileDefinition{}
	case 1714036886:
		return &ABTestDefinition{}
	case 3351210737:
		return &TrailDefinition{}
	case 1348840568:
		return &WeatherDefinition{}
	case 2398128145:
		return &ParagonNodeDefinition{}
	case 1910834368:
		return &FootstepTableDefinition{}
	case 58941310:
		return &LoreDefinition{}
	case 191874965:
		return &RopeDefinition{}
	case 3028891766:
		return &AnimationDefinition{}
	case 658565223:
		return &PassivePowerContainerDefinition{}
	case 2485415156:
		return &ShaderDefinition{}
	case 750077193:
		return &EmoteDefinition{}
	case 3487489608:
		return &WorldStateDefinition{}
	case 33576486:
		return &CollisionSettingsDefinition{}
	case 922271651:
		return &TrackedRewardDefinition{}
	case 1299127163:
		return &QuestDefinition{}
	case 2493266938:
		return &ChallengeDefinition{}
	case 3344435680:
		return &PlayerTitleDefinition{}
	case 3013920168:
		return &ParagonThresholdDefinition{}
	case 2623583028:
		return &StaggerDefinition{}
	case 961417760:
		return &FlagSetDefinition{}
	case 103202468:
		return &MusicDefinition{}
	case 3175752678:
		return &ClothDefinition{}
	case 4226195413:
		return &DungeonAffixDefinition{}
	case 2677795827:
		return &VibrationDefinition{}
	case 1886836184:
		return &DemonScrollDefinition{}
	case 382634586:
		return &GameBalanceDefinition{}
	case 122651675:
		return &ParagonGlyphDefinition{}
	case 1765209194:
		return &NPCComponentSetDefinition{}
	case 35622378:
		return &AccountDefinition{}
	case 2720737509:
		return &HoudiniParticlesSimDefinition{}
	case 3649590056:
		return &FogOfWarDefinition{}
	case 4236165849:
		return &HeroDefinition{}
	case 2101942109:
		return &MonsterFamilyDefinition{}
	case 1505457976:
		return &BoostDefinition{}
	case 729361343:
		return &MaterialValueSetDefinition{}
	case 3207332567:
		return &SpeakerDefinition{}
	case 3842295831:
		return &EffectGroupDefinition{}
	case 1687861366:
		return &ParticleDefinition{}
	case 1601016377:
		return &AppearanceDefinition{}
	case 3541482380:
		return &ItemTypeDefinition{}
	case 3459178706:
		return &ReputationDefinition{}
	case 1086588205:
		return &AnimTreeDefinition{}
	case 4110251921:
		return &EncounterDefinition{}
	case 78014346:
		return &ReverbDefinition{}
	case 602045172:
		return &MarkingShapeDefinition{}
	case 3222142198:
		return &SceneDefinition{}
	case 3509507267:
		return &FaceDefinition{}
	case 685009452:
		return &ActivityDefinition{}
	case 37210879:
		return &RecipeDefinition{}
	case 855891767:
		return &DyeDefinition{}
	case 748469283:
		return &FacialHairDefinition{}
	case 3403712277:
		return &JewelryDefinition{}
	case 2806960416:
		return &TerritoryDefinition{}
	case 309486477:
		return &StoryboardDefinition{}
	case 3355844357:
		return &CrafterTabDefinition{}
	case 4017262157:
		return &AmbientSoundDefinition{}
	case 1043973718:
		return &MaterialValueDefinition{}
	case 248985203:
		return &EyeColorDefinition{}
	case 106063450:
		return &ParagonBoardDefinition{}
	case 1119267768:
		return &ActorDefinition{}
	case 2275272900:
		return &MaterialDefinition{}
	case 2004765514:
		return &ItemDefinition{}
	case 1504275146:
		return &UIDialogDefinition{}
	case 2071915418:
		return &SubzoneDefinition{}
	case 3030242118:
		return &ConversationDefinition{}
	case 1288736363:
		return &CrafterDefinition{}
	case 2373541310:
		return &SeasonDefinition{}
	case 1819819386:
		return &StoreProductDefinition{}
	case 3810204214:
		return &AchievementDefinition{}
	case 2464455401:
		return &LightDefinition{}
	case 3789396461:
		return &SoundDefinition{}
	case 72915516:
		return &PhysicsDefinition{}
	case 2210875563:
		return &ShaderMapDefinition{}
	case 2420016543:
		return &AspectDefinition{}
	case 406598172:
		return &wWiseSoundBankDefinition{}
	case 2733136186:
		return &LevelAreaDefinition{}
	case 3643810545:
		return &EmblemDefinition{}
	case 1231555560:
		return &PlayerClassDefinition{}
	case 3488048028:
		return &TextureDefinition{}
	case 628718817:
		return &FontDefinition{}
	case 1743771856:
		return &MovieDefinition{}
	case 1340376441:
		return &StringListDefinition{}
	case 2511652383:
		return &AudioContextDefinition{}
	case 1421702363:
		return &QuestChainDefinition{}
	case 1229771660:
		return &ItemRequirementDefinition{}
	case 2180915558:
		return &WallDefinition{}
	case 901299759:
		return &SurfaceDefinition{}
	case 2713967435:
		return &Animation2DDefinition{}
	case 1395860536:
		return &HairColorDefinition{}
	case 3651709548:
		return &GlobalDefinition{}
	case 2977402162:
		return &ShakeDefinition{}
	case 3147741350:
		return &ExplosionDefinition{}
	case 2168367308:
		return &VectorFieldDefinition{}
	case 4247016790:
		return &MarkerSetDefinition{}
	case 1271134248:
		return &HairStyleDefinition{}
	case 3959966581:
		return &AnimSetDefinition{}
	case 138216317:
		return &SkillKitDefinition{}
	case 1776463076:
		return &MarkingColorDefinition{}
	default:
		return nil
	}
}

func NewByTypeHash[T Object](h int, subType T) Object {
	switch h {
	case 88275:
		return &OBB{}
	case 861281:
		return &GBIDBlocklistDataChanged{}
	case 2408934:
		return &AABB{}
	case 3112412:
		return &Stat{}
	case 5337680:
		return &PowerLimitedActorType{}
	case 5640122:
		return &SoundTableDefinition{}
	case 8510589:
		return &SavedCameraState{}
	case 9306245:
		return &ShaderInputLayout{}
	case 12265920:
		return &PowerConditionIsVulnerable{}
	case 12875460:
		return &PlayerParagonPointMessage{}
	case 18808552:
		return &AttributesSetValuesMessage{}
	case 21780289:
		return &NpcPortrayalType{}
	case 24231676:
		return &TexFrame{}
	case 26944936:
		return &MarkerBakedAISplineData{}
	case 30471230:
		return &WwiseSwitchValue{}
	case 31035945:
		return &AssignSkillMessage{}
	case 36650923:
		return &PetType{}
	case 38885574:
		return &OutroWaypointEffectMessage{}
	case 45134984:
		return &LimboWarpPrefetchBeginMessage{}
	case 48209924:
		return &MarkerWeatherVolumeData{}
	case 48522627:
		return &TiledWindowPieces{}
	case 49637164:
		return &TiledStyleDefinition{}
	case 51081978:
		return &Type_30b72fa{}
	case 57812962:
		return &StoryboardUIControlSetHeightTrack{}
	case 59500993:
		return &StoryboardValueNode_float{}
	case 64253465:
		return &IKGeneralBoneChain{}
	case 67331420:
		return &CurrentWorldSubcondition{}
	case 71815918:
		return &Type_447d2ee{}
	case 72180526:
		return &IconAnchorPointOptionalFieldMapDefaults{}
	case 75652318:
		return &ZoneMapParams{}
	case 78452166:
		return &GameTestingSetTimeOfDay{}
	case 79564513:
		return &ProjectileAttachmentOnHitMessage{}
	case 79879298:
		return &dmClothCapsuleDefMirror{}
	case 82777608:
		return &GameBalanceTable{}
	case 87940067:
		return &AimTargetMessage{}
	case 88475393:
		return &ActorFoleySoundOverride{}
	case 89349493:
		return &IKHip{}
	case 89353708:
		return &IKLeg{}
	case 90985183:
		return &BlockedDamageVisualsMessage{}
	case 92261083:
		return &DRLGForcedWorldParamsDebugInfo{}
	case 92721210:
		return &LocalEventTrackingData{}
	case 93816786:
		return &DungeonAffixFamilyEntry{}
	case 98864240:
		return &Plane{}
	case 99314398:
		return &Type_5eb6ade{}
	case 99338022:
		return &GeoChunkIndexBuffer{}
	case 100099747:
		return &PresetBannerData{}
	case 100864898:
		return &Ray2D{}
	case 100864931:
		return &Ray3D{}
	case 102278321:
		return &Shape{}
	case 105310949:
		return &MarkerCameraData{}
	case 106673333:
		return &ScriptEventParamPlayer{}
	case 107073724:
		return &StoryboardUIControlSetTopTrack{}
	case 112892379:
		return &StoryboardUIControlSetPivotTrack{}
	case 117231958:
		return &BlendSettings{}
	case 118576961:
		return &ChallengeCategory{}
	case 126352052:
		return &MaterialColorValueDefinition{}
	case 127673428:
		return &UITextStyle{}
	case 131857979:
		return &AnimTreeNodeOverride{}
	case 132838840:
		return &Type_7eaf5b8{}
	case 134857105:
		return &ObserverDefinition{}
	case 135947440:
		return &MarkerFogVolumeData{}
	case 136631170:
		return &SkillTag_Table{}
	case 137922517:
		return &WeatherStateParams{}
	case 145726193:
		return &AffixSyncComponents{}
	case 146224836:
		return &IndicatorTypeMinor{}
	case 147061427:
		return &PowerConditionIsShapeshiftForm{}
	case 148976275:
		return &PlayerEmblemResponseMessage{}
	case 152386499:
		return &UIProgressBarBaseOptionalFieldMapDefaults{}
	case 155004991:
		return &UIParagonBoardStyle{}
	case 158271388:
		return &GameTestingPvpSamplingStartMessage{}
	case 164326720:
		return &TrySalvageAllMessage{}
	case 165130238:
		return &Type_9d7affe{}
	case 165581846:
		return &UIBlinkerStyleOptionalFieldMapDefaults{}
	case 167120374:
		return &UICheckBoxStyle{}
	case 171121941:
		return &BiomeDefinition{}
	case 173900177:
		return &WorldDefinition{}
	case 174716335:
		return &AnimSyncGroup{}
	case 176697472:
		return &ScriptEventParamRecipe{}
	case 177635266:
		return &MarkerHiddenCacheGizmoData{}
	case 183786009:
		return &GlobalAffixData{}
	case 185354185:
		return &Type_b0c47c9{}
	case 188761711:
		return &BiomeClutter{}
	case 189792993:
		return &Type_b5002e1{}
	case 193950776:
		return &ModifyCurrencyMessage{}
	case 199422900:
		return &JoinGameFailedMessage{}
	case 200235594:
		return &ZoneMapGridSecretTextures{}
	case 202596751:
		return &MarkerEncounterData{}
	case 203401058:
		return &CriteriaModifier{}
	case 203483570:
		return &MailSendMessage{}
	case 203752552:
		return &TriggerEventFadeOtherPlayers{}
	case 204122261:
		return &ScrollbarStyle{}
	case 207751246:
		return &IntDataRequest{}
	case 207826213:
		return &PlayHotbarUIFlourishMessage{}
	case 208996826:
		return &UIMinimapStyle{}
	case 213896766:
		return &MarkerBakedSplineData{}
	case 214270858:
		return &MarkerBakedSplineNode{}
	case 214586038:
		return &AddSocketResultMessage{}
	case 215453821:
		return &PowerConditionIsPower{}
	case 216509239:
		return &AffixDefinition{}
	case 216733152:
		return &ExperienceLevel{}
	case 224697917:
		return &OutroPortalEffectMessage{}
	case 228221451:
		return &UIEffect{}
	case 228359364:
		return &TryImbueAffixMessage{}
	case 228865963:
		return &SetItemBonusDefinition{}
	case 231895989:
		return &GBHandle{}
	case 232788579:
		return &PowerCastingEffectOverride{}
	case 234160671:
		return &ScriptEventParamString{}
	case 234624765:
		return &NPCComponentHardpointOverride{}
	case 235192742:
		return &ParticleSimKeyFramePosition{}
	case 236738320:
		return &UIControlStyle{}
	case 239012676:
		return &OnAssistBuffCallback{}
	case 248064347:
		return &SharedServerWorldPlace{}
	case 250193936:
		return &ConditionDefinition{}
	case 253272816:
		return &WwiseName{}
	case 255596702:
		return &EffectGroupScaleYKeyData{}
	case 258676623:
		return &RitualTetherEffectMessage{}
	case 260563484:
		return &OnPetDeathBuffCallback{}
	case 264669227:
		return &ConsoleAwardDefinition{}
	case 266386765:
		return &TriggerEventStoreUIIntro{}
	case 267260813:
		return &Capsule{}
	case 269037185:
		return &CardArt{}
	case 274458137:
		return &FatVertex{}
	case 275314580:
		return &ParagonGlyphExperience{}
	case 276390936:
		return &PrefetchWorldDataMessage{}
	case 277417732:
		return &LogoutContextMessage{}
	case 279687928:
		return &ACDEnterKnownMessage{}
	case 280849552:
		return &SavedCameraStates{}
	case 285850372:
		return &Type_1109bb04{}
	case 287416921:
		return &MarkerChestGizmoData{}
	case 287728085:
		return &UIStackPanelStyle{}
	case 288988602:
		return &JoinExistingGameMessage{}
	case 294654905:
		return &MarkerHeightFieldData{}
	case 294950919:
		return &MarkerHeightFieldLine{}
	case 295800455:
		return &UIWindowStyleOptionalFieldMapDefaults{}
	case 295985342:
		return &PlayerUnpossessActorMessage{}
	case 296386918:
		return &DataIDDataMessage{}
	case 297390777:
		return &QuestObjectiveSet{}
	case 298327223:
		return &Type_11c81cb7{}
	case 300410424:
		return &AudioMonsterCategory{}
	case 303887094:
		return &TriggerEventAttachSpawnedActor{}
	case 307762844:
		return &DestroyOnProximityGizmoData{}
	case 307879080:
		return &Type_1259dca8{}
	case 309879163:
		return &StoryboardGenericTrack{}
	case 311539709:
		return &FogVolumeDefinition{}
	case 312499914:
		return &TexAnimTranslationCurve{}
	case 316337160:
		return &FoliageSettings{}
	case 316559119:
		return &PowerConditionIsSpecificActor{}
	case 318793304:
		return &BoxProximityData{}
	case 324361903:
		return &SceneSpecification{}
	case 330209804:
		return &TriggerEventRelaxCloth{}
	case 332218139:
		return &OnDotReceivedBuffCallback{}
	case 334330977:
		return &PVPGizmoMessage{}
	case 335066719:
		return &OnPetAddBuffCallback{}
	case 336944377:
		return &GameVariableIsSetSubcondition{}
	case 337203476:
		return &TutorialScreen{}
	case 340493133:
		return &GameTestingMonsterSkillSamplingStartMessage{}
	case 341256100:
		return &StoreDisclaimerData{}
	case 341778518:
		return &UIBlinkerStyle{}
	case 342198450:
		return &NpcLookTemplate{}
	case 342818969:
		return &PowerCrowdControlInfo{}
	case 346303511:
		return &MonsterPerPlayerScalingData{}
	case 347016374:
		return &PowerDefinition{}
	case 347583877:
		return &OnAttackBuffCallback{}
	case 350245922:
		return &ACDInventoryUpdateActorSNO{}
	case 351116421:
		return &NamedGizmoData{}
	case 351209529:
		return &PowerConditionIsPet{}
	case 353175414:
		return &UILayoutEntries{}
	case 359225989:
		return &MarkerAmbientSoundData{}
	case 361180618:
		return &MapRevealWorldMessage{}
	case 362087135:
		return &Type_159502df{}
	case 365739947:
		return &Currency{}
	case 366023756:
		return &GlobalBase{}
	case 366095659:
		return &GlobalData{}
	case 366375197:
		return &TutorialDefinition{}
	case 367818336:
		return &EventCallbackSubcondition{}
	case 375153600:
		return &GameTestingTakeScreenshotMessage{}
	case 377055229:
		return &UberMaterial{}
	case 377108136:
		return &StartLocationName{}
	case 378061786:
		return &CampaignData{}
	case 378671321:
		return &PlayerOwnsAMountSubcondition{}
	case 380017523:
		return &SurveyMessage{}
	case 380944299:
		return &HelpCode_Table{}
	case 382532488:
		return &FogMask{}
	case 384027390:
		return &StoryboardUIControlSetBottomTrack{}
	case 385403115:
		return &DebugProjectileMovementUpdateMessage{}
	case 387731069:
		return &GameTestingSalvageItems{}
	case 389048112:
		return &NpcFollowerArchetype{}
	case 392807017:
		return &GlobalClanData{}
	case 394027396:
		return &DetachCarryableFromPlayerMessage{}
	case 394717690:
		return &UIRadioButtonStyleOptionalFieldMapDefaults{}
	case 398282971:
		return &ActorHitCollisionShape{}
	case 404172836:
		return &DRLGWorldDebugInfo{}
	case 405077397:
		return &TriggerEventSetAudioState{}
	case 408415486:
		return &ConvLocaleDisplayTimes{}
	case 413517284:
		return &MarkerFadeVolumeData{}
	case 415892117:
		return &UIStackPanelStyleOptionalFieldMapDefaults{}
	case 417636351:
		return &dmHeightDataMirror{}
	case 417796692:
		return &AIPropType_Table{}
	case 418395020:
		return &HeroStateRewardsMessage{}
	case 419152424:
		return &TriggerEventObjectTurnToFace{}
	case 422165983:
		return &QuestTimerUpdatedMessage{}
	case 424839738:
		return &UIRadioButtonStyle{}
	case 427805145:
		return &ClassPassiveSkillSaveData{}
	case 430464268:
		return &UpgradedItemLabelSubcondition{}
	case 432411082:
		return &LuxSettings{}
	case 434197565:
		return &GlobalServiceNPCData{}
	case 443290979:
		return &ParagonGlyphAffixDefinition{}
	case 446843337:
		return &PVPShrineEventUpdateMessage{}
	case 446984143:
		return &StoryboardUIControlActivationTrack{}
	case 447120107:
		return &MarkerItemData{}
	case 448289747:
		return &UIMenuItemStyle{}
	case 450842144:
		return &SpawnerGizmoData{}
	case 452207452:
		return &ActorVelocityPerSecondSubcondition{}
	case 454347093:
		return &PrefabScopedActorGroupData_Table{}
	case 456561964:
		return &MakeupDefinition{}
	case 457007016:
		return &GameVariableStringSubcondition{}
	case 458282602:
		return &WwiseSoundBankContentBase{}
	case 459349266:
		return &PlatformAccount{}
	case 459613767:
		return &NPCLegFoleyMaterialOverride{}
	case 461739888:
		return &ScriptEventParamGizmoType{}
	case 466375807:
		return &PlayerClassCoreStatBenefitData{}
	case 467583236:
		return &ActorProjectileData{}
	case 469047295:
		return &MonsterAffixDefinition{}
	case 469541751:
		return &TriggerEventChangeShaderMapOverrideDuration{}
	case 471636391:
		return &StoryboardUIControlSetRightTrack{}
	case 475975077:
		return &Type_1c5ecda5{}
	case 476946996:
		return &TimedSpawningData{}
	case 481077997:
		return &PowerConditionStoredValueEquals{}
	case 485930233:
		return &WeatherDefinitionOptionalFieldMapDefaults{}
	case 487980657:
		return &Type_1d15fe71{}
	case 489718821:
		return &ShoreWaveSettings{}
	case 490076731:
		return &MailDeleteMessage{}
	case 490118052:
		return &DebugForceSpawnMessage{}
	case 491575639:
		return &ClanBankDepositMessage{}
	case 494586042:
		return &Type_1d7ac8ba{}
	case 494681324:
		return &TiledStyleDefinitionOptionalFieldMapDefaults{}
	case 495345607:
		return &GlobalFontColor{}
	case 500700259:
		return &UIHotkeyStyleOptionalFieldMapDefaults{}
	case 501814863:
		return &UIMargins{}
	case 501899601:
		return &ItemAffixAttribute{}
	case 503094317:
		return &PlayHitEffectMessage{}
	case 506492871:
		return &UIWindowStyle{}
	case 509045980:
		return &TriggerEventShadow{}
	case 513386483:
		return &GameTestingCharacterSamplingStartMessage{}
	case 514913766:
		return &Type_1eb0f5e6{}
	case 516822506:
		return &DynamicMovementData{}
	case 518656708:
		return &AIStateDebugSetStateMessage{}
	case 523544037:
		return &Type_1f34a5e5{}
	case 528427185:
		return &SignGizmoData{}
	case 528757367:
		return &RopeEventAttachPoint{}
	case 531649295:
		return &GameTestingRTCSamplingStartMessage{}
	case 532046846:
		return &EmitterPointData{}
	case 540107926:
		return &IKBoneChainBase{}
	case 540613693:
		return &CollisionShape{}
	case 541981023:
		return &PowerConditionIsHealthy{}
	case 544227643:
		return &SharedChildFile{}
	case 546095827:
		return &ScriptEventParamReputation{}
	case 546182319:
		return &DebugDataRequestMessage{}
	case 547442486:
		return &TriggerEventHidePoIUI{}
	case 551002818:
		return &TriggerEventShadowDuration{}
	case 551777591:
		return &ScriptFormulaInfo{}
	case 552516018:
		return &MaterialTextureEntry{}
	case 557181583:
		return &WeaponExpertiseRank{}
	case 559004334:
		return &StoryboardPlaySoundNode{}
	case 563099623:
		return &Type_219037e7{}
	case 568298472:
		return &Type_21df8be8{}
	case 568526390:
		return &TriggerEventAddObject{}
	case 570318784:
		return &TriggerEventDeleteObject{}
	case 571402940:
		return &NitSettings{}
	case 582599742:
		return &PowerPhaseOneShot{}
	case 582690490:
		return &TownPortalCosmeticDefinition{}
	case 584010957:
		return &MountProfileDefinition{}
	case 584663085:
		return &SocialWheelSlotBinding{}
	case 585896597:
		return &PlayerClassDruidData{}
	case 586826685:
		return &EffectGroupScaleXKeyData{}
	case 592804084:
		return &TranslationCurve{}
	case 596227098:
		return &TriggerEventActorMovement{}
	case 598155613:
		return &MarkerBaseGizmoData{}
	case 600059248:
		return &DebugEventLogMessage{}
	case 600875676:
		return &StaticLoadingImages{}
	case 601368518:
		return &PrefetchSubzoneEntranceDataMessage{}
	case 601452812:
		return &ABTestDefinition{}
	case 601822657:
		return &PrefetchActorMessageEntry{}
	case 607927028:
		return &DebugProjectileRaycastMessage{}
	case 609698022:
		return &Type_245740e6{}
	case 612856310:
		return &AnimTangent{}
	case 615033278:
		return &ShaderMapDefinitionOptionalFieldMapDefaults{}
	case 615324205:
		return &EliteKilledMessage{}
	case 619659323:
		return &PowerConditionHasAffixEquipped{}
	case 621008261:
		return &TrailDefinition{}
	case 623688299:
		return &ParticleSimKeyFrameSpin{}
	case 626815792:
		return &ErrorWithContextMessage{}
	case 632575071:
		return &OnPhaseContactFramePowerCallback{}
	case 635232813:
		return &DungeonSigilTierSubcondition{}
	case 636207354:
		return &UIListItemStyle{}
	case 641859515:
		return &UIControlTemplate{}
	case 646020626:
		return &EffectGroupACDToACDMessage{}
	case 650798075:
		return &PlayAnimationMessage{}
	case 651877178:
		return &RecipeEventGizmoData{}
	case 654904231:
		return &SkyColorSettings{}
	case 656451641:
		return &WeatherDefinition{}
	case 657629450:
		return &Blessings{}
	case 658153198:
		return &Type_273a9eee{}
	case 658729586:
		return &LabelEntry{}
	case 665473065:
		return &Type_27aa5029{}
	case 667403575:
		return &ClassPassiveSkillPowerData{}
	case 668846681:
		return &DesignerWorldFeatureFlags_Table{}
	case 679896568:
		return &ConsoleProperty{}
	case 680168459:
		return &PlayerCustomizationMessage{}
	case 685542235:
		return &Type_28dc8b5b{}
	case 685760733:
		return &EmitterBoxData{}
	case 687910683:
		return &ActorFacingData{}
	case 693826374:
		return &FoleyOverridePreloadHelper{}
	case 694569815:
		return &ParagonNodeDefinition{}
	case 696164520:
		return &LookVariantMap{}
	case 698965827:
		return &PRTransformMessage{}
	case 699316394:
		return &DRLGSpawningData{}
	case 699762730:
		return &DRLGSpawningPool{}
	case 701532932:
		return &WorldDeletedMessage{}
	case 701717625:
		return &QuestPreloadHelper{}
	case 702155408:
		return &EnableRagdollParams{}
	case 702892200:
		return &OnItemPickupBuffCallback{}
	case 708398011:
		return &DisplayMode{}
	case 708924230:
		return &SeasonJourneyBlessingData{}
	case 714854064:
		return &CurrentZoneSubcondition{}
	case 715283015:
		return &ZoneProgressRewardInfoMessage{}
	case 716315941:
		return &WwiseStandardSoundBank{}
	case 719000045:
		return &ConversationRandomChoiceNode{}
	case 721304485:
		return &SerializeContainerData{}
	case 721585600:
		return &StringLabelHandleEx{}
	case 724022612:
		return &PlayerClassBarbData{}
	case 725763710:
		return &EventRewardChestGizmoData{}
	case 730132346:
		return &RareItemName{}
	case 730445861:
		return &FootstepTableDefinition{}
	case 730988871:
		return &QuestObjectiveSetLink{}
	case 731368717:
		return &SNODiskEntry{}
	case 733725688:
		return &RogueSpecChangeMessage{}
	case 735016212:
		return &LinearAxisParams{}
	case 735885398:
		return &MarkerNPCActorData{}
	case 738942754:
		return &ScriptEventParamEffectGroup{}
	case 750243227:
		return &WaypointGizmoData{}
	case 753613154:
		return &GemLevelSubcondition{}
	case 754360841:
		return &Type_2cf6a209{}
	case 754688451:
		return &ActorMovingData{}
	case 755154324:
		return &MarkerInstanceGroupAO{}
	case 756611932:
		return &LightingDepthSettings{}
	case 758869941:
		return &PlayerHasUnlockedMountsSubcondition{}
	case 759236416:
		return &POICameraInstanceData{}
	case 761532415:
		return &UITreeStyle{}
	case 761777473:
		return &PlayerBuffSubcondition{}
	case 761993241:
		return &DebugSetActorUpdateIntervalMessage{}
	case 765028544:
		return &MonsterFixedAffixData{}
	case 768702240:
		return &EssencePowerTierEntry_Table{}
	case 769249943:
		return &GameTestingBuyItem{}
	case 773758990:
		return &PrefetchRunOnDisk{}
	case 777063961:
		return &WorldServerData{}
	case 779531282:
		return &SocketedEffects{}
	case 779841713:
		return &ActorAnimSetPreloadHelper{}
	case 784153608:
		return &Type_2ebd3c08{}
	case 790690301:
		return &FavorLevel_Table{}
	case 792493210:
		return &PlayerSkillModPointsSubcondition{}
	case 796243964:
		return &ParagonUnequipBoardMessage{}
	case 797044827:
		return &ActorMonsterData{}
	case 797606314:
		return &MaterialEnumValueDefinition{}
	case 797648367:
		return &dmMeshTriangleMirror{}
	case 798453786:
		return &Currencies_Table{}
	case 800593142:
		return &WorldTierUnlockedMessage{}
	case 802058580:
		return &ScoreStatistic{}
	case 804883275:
		return &SpeedTreeWind8{}
	case 805216097:
		return &BoneStructureInfo{}
	case 805226337:
		return &PlayerActorSetInitialMessage{}
	case 805969435:
		return &PhaseJumpDestinationReached{}
	case 809352960:
		return &StoryboardUIControlSetValueTrack_RGBAColor{}
	case 809704699:
		return &LoreDefinition{}
	case 810622396:
		return &ShaderNodeBBEFormula{}
	case 812773786:
		return &OnDotApplyBuffCallback{}
	case 812993760:
		return &PowerPayloadDefinition{}
	case 814048081:
		return &AICellBytes{}
	case 815039567:
		return &SurfaceGrid{}
	case 818712694:
		return &TrackedAchievementChangedMessage{}
	case 821344136:
		return &ExperienceLevelAlt_Table{}
	case 821665730:
		return &SavedPlayerTitle{}
	case 824315617:
		return &Type_31220ee1{}
	case 826038293:
		return &WwiseMetaDataSoundBank{}
	case 827674886:
		return &Type_31555106{}
	case 829893397:
		return &PrioritySideQuestIcons{}
	case 830630473:
		return &GlobalRoadGraphCell{}
	case 833093383:
		return &FavorSeason{}
	case 834055373:
		return &PortalTransferSetupMessage{}
	case 834825378:
		return &MaterialValue_bcVec4{}
	case 835243889:
		return &Structure{}
	case 836615167:
		return &RopeDefinition{}
	case 838073325:
		return &WorldTierSubcondition{}
	case 839614209:
		return &StoryboardActivationNode{}
	case 843622019:
		return &FogVolumeInstanceData{}
	case 844554497:
		return &UIControlClickSoundsOptionalFieldMapDefaults{}
	case 854376920:
		return &ACDTranslateSyncMessage{}
	case 857617376:
		return &TryRepairAllMessage{}
	case 859173317:
		return &MarkerSoundData{}
	case 859971517:
		return &ServerNotificationDataMessage{}
	case 864007404:
		return &OnHealingReceivedBuffCallback{}
	case 866553347:
		return &ItemTier{}
	case 871413486:
		return &ACDForceAddedMessage{}
	case 872540109:
		return &ActiveSkillEntry{}
	case 873111065:
		return &CollisionCapsule{}
	case 873409362:
		return &StoryboardValueNodeCollection_RGBAColor{}
	case 874191810:
		return &PlayLineParams{}
	case 874267018:
		return &UIDownloadImageStyle{}
	case 875081095:
		return &GameTestingNPCSamplingStartMessage{}
	case 876325571:
		return &ParametricClutterIndex{}
	case 878162020:
		return &QuestSwitchGizmoData{}
	case 880817737:
		return &AnimationDefinition{}
	case 881828868:
		return &MarkerNoMountVolumeData{}
	case 881999589:
		return &Type_34923ee5{}
	case 882615838:
		return &HeroNameChangedMessage{}
	case 884063201:
		return &VoiceActorEntry{}
	case 885929342:
		return &CrafterTab{}
	case 888105884:
		return &UpgradeItemMessage{}
	case 888408526:
		return &TriggerConditions{}
	case 892291564:
		return &Type_352f49ec{}
	case 893154457:
		return &OnKillBuffCallback{}
	case 894232435:
		return &AnimDepthOfField{}
	case 897096220:
		return &GlobalZoneProgressData{}
	case 897321246:
		return &IKRopeTraversal{}
	case 899754116:
		return &OnDeflectBuffCallback{}
	case 900462496:
		return &ActorPlayerData{}
	case 901079139:
		return &PlayerLevelRangeSubcondition{}
	case 906169645:
		return &Type_36030d2d{}
	case 907176602:
		return &UniqueOperatorChestGizmoData{}
	case 910005755:
		return &SubzoneModifierStateMessage{}
	case 911325909:
		return &TriggerEventFoley{}
	case 911604182:
		return &TexAnim{}
	case 912556216:
		return &PowerConditionDungeonTier{}
	case 912566260:
		return &PassivePowerContainerDefinition{}
	case 912941483:
		return &CommandFrameSynchronizeMessage{}
	case 914586851:
		return &ObjectiveRegionParams{}
	case 919850711:
		return &TriggerEventMusic{}
	case 923517792:
		return &ShaderDefinition{}
	case 928568907:
		return &BoolDataMessage{}
	case 930297292:
		return &TriggerEventVoice{}
	case 931132840:
		return &NpcLookEntry{}
	case 933677803:
		return &UIHotbarButtonStyle{}
	case 934402691:
		return &EmoteDefinition{}
	case 934747956:
		return &MarkerLightData{}
	case 935473883:
		return &ListenerReaction{}
	case 936375859:
		return &EnterKnownShaderMapOverrides{}
	case 939032690:
		return &NecroArmyUnitSpecializationSacrificeData{}
	case 939553606:
		return &SoundEventGameParameter{}
	case 941161779:
		return &AnimTreeLayerName{}
	case 941445633:
		return &MaterialValue_float{}
	case 945079131:
		return &MaterialValue_int32{}
	case 948891356:
		return &DebugPlayerProcessHelpCodeMessage{}
	case 950929648:
		return &NotLogicSubcondition{}
	case 951791235:
		return &EffectGroupHardpoint{}
	case 958873913:
		return &ParametricSettings{}
	case 959143181:
		return &GeneratorToItemResponseMessage{}
	case 960545022:
		return &OnHitSounds{}
	case 962397665:
		return &CraftMultipleMessage{}
	case 962865390:
		return &BloodSealSetExperienceMessage{}
	case 962881663:
		return &MarkerReflectionProbeData{}
	case 963792479:
		return &HearthPortalInfoMessage{}
	case 964455581:
		return &ScriptEventParamOwnerFollower{}
	case 966075911:
		return &ConditionalAudioState{}
	case 971002810:
		return &PlayerWorldTierSubcondition{}
	case 977570672:
		return &AnimSetPowerEntry{}
	case 981125895:
		return &FreezeDirectionMessage{}
	case 982587744:
		return &dmClothDataMirror{}
	case 983502194:
		return &Type_3a9f0d72{}
	case 987746260:
		return &NPCPreset{}
	case 988032103:
		return &NpcGenerationData{}
	case 988753460:
		return &StoryboardUIControlSetLeftTrack{}
	case 989915321:
		return &Type_3b00e8b9{}
	case 991471482:
		return &Cylinder{}
	case 991799518:
		return &InterpolationScalar{}
	case 992657102:
		return &StoryboardPlayStoryboardNode{}
	case 1001478021:
		return &ParametricLayer{}
	case 1001740690:
		return &WorldStateDefinition{}
	case 1003082940:
		return &ChangedPlayerMessage{}
	case 1007410546:
		return &WallCornerPieces{}
	case 1007904609:
		return &StoreCameraTransition{}
	case 1011253607:
		return &TexAnimFrameByFrame{}
	case 1011655352:
		return &PlasmaAttachMessage{}
	case 1013293730:
		return &MalignantColorWeight{}
	case 1014113135:
		return &TriggerEventDisableRagdollAnimationOverride{}
	case 1014763069:
		return &CancelGroupTransferMessage{}
	case 1014796656:
		return &ConversationNodeReference{}
	case 1014817440:
		return &ParticipantTimerGizmoData{}
	case 1015376646:
		return &ActorMountData{}
	case 1018331041:
		return &PlayerACDInfo{}
	case 1020310943:
		return &PlayerSavedDataMessage{}
	case 1023716882:
		return &TransmogSlotMessage{}
	case 1026071916:
		return &RecipeTier{}
	case 1028015787:
		return &DT_BYTE{}
	case 1028111660:
		return &DT_ENUM{}
	case 1028170061:
		return &DT_GBID{}
	case 1028442418:
		return &DT_NULL{}
	case 1028641394:
		return &ActorHitRotationJoint{}
	case 1028680983:
		return &DT_UINT{}
	case 1028759507:
		return &DT_WORD{}
	case 1030159526:
		return &CollisionSettingsDefinition{}
	case 1031323553:
		return &PlayerVariableValueSubcondition{}
	case 1032599996:
		return &AssetList{}
	case 1036833962:
		return &TriggerEventChangeClothParameters{}
	case 1038063251:
		return &WallDeformPiece{}
	case 1038618161:
		return &DebugDataBlockMessage{}
	case 1043704300:
		return &TrackedRewardDefinition{}
	case 1051891831:
		return &SpeedTreeWindParams{}
	case 1053813052:
		return &ActorAIDisperseData{}
	case 1053929211:
		return &QuestDefinition{}
	case 1055008700:
		return &VendorInventory{}
	case 1055046034:
		return &Type_3ee2b992{}
	case 1056455724:
		return &ChallengeDefinition{}
	case 1058180893:
		return &LightStateParams{}
	case 1059956194:
		return &MarkerHeightFieldClutter{}
	case 1061475052:
		return &ParagonGlyphAffixAttributeMap{}
	case 1063987433:
		return &ShrineGizmoData{}
	case 1064833490:
		return &Type_3f7811d2{}
	case 1066764433:
		return &TriggerEventChangeShaderMapOverride{}
	case 1068774800:
		return &FrameAnim{}
	case 1071057721:
		return &PowerBuffDefinition{}
	case 1074679724:
		return &CollSettingsParam{}
	case 1077456687:
		return &TriggerEventHitFlashDuration{}
	case 1079088876:
		return &TextureContent{}
	case 1083074776:
		return &PlayerTitleDefinition{}
	case 1083389844:
		return &PreloadSceneDataMessage{}
	case 1087707231:
		return &DWordDataMessage{}
	case 1090497837:
		return &AlwaysFalseSubcondition{}
	case 1091889950:
		return &ParagonThresholdDefinition{}
	case 1093951926:
		return &StaggerDefinition{}
	case 1098162516:
		return &Type_4174a154{}
	case 1101891844:
		return &OpenDungeonForLFDMessage{}
	case 1102252714:
		return &InterpolationPath_bcVec3{}
	case 1102252715:
		return &InterpolationPath_bcVec4{}
	case 1103586575:
		return &FlagSetDefinition{}
	case 1105471552:
		return &DemonSummoningQuestBucket{}
	case 1105628966:
		return &StoryboardValueNode_RGBAColor{}
	case 1106225244:
		return &AnimTreeNodeOverrideWrapper{}
	case 1106358970:
		return &TriggerEventFrostBreath{}
	case 1107537454:
		return &SubzoneWorldMarkerSetEntry{}
	case 1109533772:
		return &TriggerEventDeleteAllObjects{}
	case 1110936387:
		return &Type_42378b43{}
	case 1113609512:
		return &StoryboardUIControlSetFontScaleTrack{}
	case 1113825987:
		return &BiomeObject{}
	case 1113883424:
		return &ConversationCooldown{}
	case 1121250797:
		return &PowerConditionHasModPoints{}
	case 1121634143:
		return &PhaseJumpDurationReached{}
	case 1122569254:
		return &MountPreset{}
	case 1125787639:
		return &RenderPassOptionalFieldMapDefaults{}
	case 1127608961:
		return &EffectGroupPreloadHelper{}
	case 1127767451:
		return &BoneStructureInfoData{}
	case 1130943864:
		return &RopeEffectMessageACDToPlace{}
	case 1131078565:
		return &TriggerEventAddBaseMountLoadout{}
	case 1134541503:
		return &TriggerEventSubObjectVisibility{}
	case 1137498125:
		return &PvPChestGizmoData{}
	case 1143552823:
		return &UIScrollableTextStyleOptionalFieldMapDefaults{}
	case 1144581000:
		return &TriggerEventHideWarpUI{}
	case 1144835562:
		return &MusicDefinition{}
	case 1146575562:
		return &Type_44575aca{}
	case 1150600713:
		return &PlayerCurrentWorldSubcondition{}
	case 1154619828:
		return &ProximityAdjustment{}
	case 1155821708:
		return &VisualEquipment{}
	case 1156716628:
		return &TraversalGizmoData{}
	case 1161022673:
		return &ScriptEventParamAchievement{}
	case 1161896531:
		return &OnDeathBuffCallback{}
	case 1162201207:
		return &CheckBoxTree{}
	case 1163953319:
		return &ParagonThresholdEntry{}
	case 1173939491:
		return &ClothDefinition{}
	case 1175697692:
		return &GameTestingCloseVendor{}
	case 1178593178:
		return &UIItemButtonStyle{}
	case 1181604269:
		return &Quaternion16{}
	case 1185241065:
		return &HitpointSpecifier{}
	case 1187027022:
		return &AssetListEntry{}
	case 1187455164:
		return &StoryboardUIControlPlayStoryboardTrack{}
	case 1188733192:
		return &EffectGroupActorTrack{}
	case 1189512303:
		return &OperateRecipeEventMessage{}
	case 1191591578:
		return &DefaultMaterialValueDefinition{}
	case 1195077723:
		return &TriggerEventAddTrail{}
	case 1196096041:
		return &PowerConditionDistanceToTarget{}
	case 1199573104:
		return &EngagedMessage{}
	case 1201772373:
		return &DestroyableObjectGizmoData{}
	case 1207123170:
		return &WeaponExpertiseRanks{}
	case 1208547332:
		return &TriggerEventCameraMoveToCameraMarker{}
	case 1210377699:
		return &ScriptEventParamBase{}
	case 1210430033:
		return &WorldStateUpdateMessage{}
	case 1210649495:
		return &ScriptEventParamItem{}
	case 1210992754:
		return &ScriptEventParamSelf{}
	case 1211952593:
		return &ScaleKey{}
	case 1213843687:
		return &DungeonAffixDefinition{}
	case 1215544921:
		return &UIWrapPanelStyle{}
	case 1220959089:
		return &DynamicMovementData_Table{}
	case 1221882697:
		return &InventoryRequestUseMessage{}
	case 1224073241:
		return &ParagonEquipBoardMessage{}
	case 1225817687:
		return &VibrationDefinition{}
	case 1228895741:
		return &ConnectionEstablishedMessage{}
	case 1236371119:
		return &EffectGroupTrack{}
	case 1237626281:
		return &SceneSubzoneMarkerSetPreloadHelper{}
	case 1238677571:
		return &Type_49d4b843{}
	case 1245475889:
		return &IconScaleOptionalFieldMapDefaults{}
	case 1245693876:
		return &ActorPropData{}
	case 1247230898:
		return &OnGetHitBuffCallback{}
	case 1250952257:
		return &HeightFieldWaveSettings{}
	case 1251504619:
		return &DemonScrollDefinition{}
	case 1252355170:
		return &ArmorPactCost{}
	case 1252497901:
		return &ScaleCurve{}
	case 1252976875:
		return &ArmorPactType{}
	case 1254730756:
		return &AIStateDebugTestPowerMessage{}
	case 1260918711:
		return &LookVariantMaterialMap{}
	case 1263412124:
		return &TryUnlockRecipeTierMessage{}
	case 1265777792:
		return &PlayerIntValMessage{}
	case 1266660523:
		return &GroundNormalTests{}
	case 1269686704:
		return &MarkerHeightFieldTexture{}
	case 1270559160:
		return &StringWrapper{}
	case 1271971574:
		return &HairAndBeardState{}
	case 1274493949:
		return &StoryboardPlaySoundTrack{}
	case 1274683599:
		return &DebugDataHeaderMessage{}
	case 1274748969:
		return &UInt64DataMessage{}
	case 1278380139:
		return &RareMonsterNamesMessage{}
	case 1281316753:
		return &QuestTrackedQuestChangedMessage{}
	case 1281777099:
		return &BloodSealAddExperienceMessage{}
	case 1282659427:
		return &PVPMonsterMessage{}
	case 1286645889:
		return &ScriptEventParamActor{}
	case 1288253615:
		return &TriggerEventDisableConstraint{}
	case 1288668428:
		return &Triangle2D{}
	case 1288668461:
		return &Triangle3D{}
	case 1288926662:
		return &PowerConditionSkillRankCompare{}
	case 1289731112:
		return &ScriptEventParamDWORD{}
	case 1292893022:
		return &ScriptEventParamFloat{}
	case 1295852463:
		return &ScriptEventParamAllowAny{}
	case 1300029571:
		return &RunTimeMaterialValues{}
	case 1304868885:
		return &ScriptEventParamPower{}
	case 1305923393:
		return &MalignantColor_Table{}
	case 1306251290:
		return &ScriptEventParamQuest{}
	case 1306363395:
		return &TraversalInstanceData{}
	case 1306543934:
		return &VersionsMessage{}
	case 1307976086:
		return &ScriptEventParamScene{}
	case 1308611305:
		return &SpawnLocType{}
	case 1310250065:
		return &TriggerEventCancelLook{}
	case 1313057402:
		return &StoryboardUIControlSetValueTrack_bcVec2{}
	case 1313165104:
		return &ScriptEventParamWorld{}
	case 1313940188:
		return &MarkerHeightFieldTextureInfo{}
	case 1317228073:
		return &GameBalanceDefinition{}
	case 1317967588:
		return &SubzoneRelation{}
	case 1320052487:
		return &BlockingActorLoadMessage{}
	case 1325067928:
		return &RareMonsterNamesEntry{}
	case 1325950502:
		return &WorldStateUpdateData{}
	case 1328668874:
		return &TriggerEventFootstep{}
	case 1330480459:
		return &WwiseAudioBus{}
	case 1334189719:
		return &ActorGroupSubcondition{}
	case 1335413793:
		return &OnOtherBuffAddedCallback{}
	case 1338965781:
		return &TriggerEventCameraTransitionToObserver{}
	case 1340417938:
		return &HirelingSwapMessage{}
	case 1345508590:
		return &ActivityMetadata{}
	case 1352167279:
		return &Material{}
	case 1353876900:
		return &Type_50b285a4{}
	case 1357984967:
		return &SalvagedItemLabelSubcondition{}
	case 1358693725:
		return &AnimPermutation{}
	case 1359885118:
		return &ACDPrimaryPowerMessage{}
	case 1361343054:
		return &TriggerData{}
	case 1362850202:
		return &DRLGDungeonState{}
	case 1364074038:
		return &ActorPhysicsData{}
	case 1364938622:
		return &BoneData{}
	case 1365215937:
		return &RecipeIngredient{}
	case 1365297765:
		return &BoneName{}
	case 1367839516:
		return &TriggerEventHideCaptionUI{}
	case 1370498779:
		return &PlayerPossessActorMessage{}
	case 1370930836:
		return &SubObjectSegment{}
	case 1375908409:
		return &OnFirstHitAttemptBuffCallback{}
	case 1376535853:
		return &PowerMod{}
	case 1378962479:
		return &Type_52314c2f{}
	case 1380971296:
		return &WorldLocationMessageData{}
	case 1381884558:
		return &SorcererEnchantSlotUnlockData{}
	case 1384905369:
		return &TriggerEventAddEffectGroup{}
	case 1385175149:
		return &ExtractAffixResultMessage{}
	case 1385267894:
		return &MarkerEffectGroupData{}
	case 1391978581:
		return &EnchantAffixChooseMessage{}
	case 1395779955:
		return &SimpleRequest{}
	case 1398161649:
		return &AdditionalStatistic{}
	case 1401177745:
		return &WwiseMusicPlaylistItem{}
	case 1403384113:
		return &AIPathData{}
	case 1404327310:
		return &OnContactFramePowerCallback{}
	case 1404527137:
		return &ConditionData{}
	case 1405707193:
		return &GoToWaypointMessage{}
	case 1406641541:
		return &MonsterExtRaritySubcondition{}
	case 1410120192:
		return &ScriptEventInvalidType{}
	case 1411504817:
		return &POICameraGizmoData{}
	case 1412871082:
		return &SupportedServices{}
	case 1414125715:
		return &ScriptEventParamFloatGreaterThan{}
	case 1414307203:
		return &AffixSortGroup{}
	case 1414743843:
		return &TriggerEventShowCaptionUIOptionalFieldMapDefaults{}
	case 1420342763:
		return &EnterWorldMessage{}
	case 1428470990:
		return &PowerBlendOverrideList{}
	case 1428538427:
		return &BiomeItem{}
	case 1429869474:
		return &GlobalRoadSpline{}
	case 1429922773:
		return &OnKnockbackEndPowerCallback{}
	case 1431372750:
		return &GameTestingWorldSamplingStartMessage{}
	case 1441694327:
		return &SkillTreeConnectionFrameProperties{}
	case 1442604930:
		return &AnimSetOrderTagEntry_Table{}
	case 1443554511:
		return &InterpolationPath_RGBAColor{}
	case 1445759116:
		return &UIColorPickerStyleOptionalFieldMapDefaults{}
	case 1452860828:
		return &MarkerObserverVolumeData{}
	case 1455359337:
		return &PrefabCustomization{}
	case 1455893936:
		return &PowerStartVariant{}
	case 1457308015:
		return &StoryboardUIControlSetAlphaTrack{}
	case 1457360706:
		return &ActorItemData{}
	case 1459584362:
		return &Type_56ff7d6a{}
	case 1460440831:
		return &TrackedQuestChangedMessage{}
	case 1462511893:
		return &ParagonGlyphDefinition{}
	case 1462706204:
		return &Type_572f201c{}
	case 1462760288:
		return &ACDSyncBuffsMessage{}
	case 1466985016:
		return &AllLogicSubcondition{}
	case 1469357787:
		return &MonsterFamilySubcondition{}
	case 1472988405:
		return &GlobalTownPortalCosmetics{}
	case 1480752787:
		return &ArmorPactTypeWeight{}
	case 1481956267:
		return &GizmoMessage{}
	case 1482076039:
		return &ActorGroupData_Table{}
	case 1484526036:
		return &TraceMessage{}
	case 1485298337:
		return &Type_5887daa1{}
	case 1487816389:
		return &TriggerEventActorPlayAnimation{}
	case 1488082503:
		return &DemonSummoningQuestBucket_Table{}
	case 1490043571:
		return &ScriptEventParamSpawnerParentName{}
	case 1490227580:
		return &ScriptEventParamSpawnerParentSelf{}
	case 1490385319:
		return &MarkerSplineData{}
	case 1492891980:
		return &ClassPassiveSkillSlotData{}
	case 1494553099:
		return &UIThumbButtonStyle{}
	case 1496684361:
		return &NPCComponentSetDefinition{}
	case 1496944793:
		return &ParagonGlyphUpgradeMessage{}
	case 1497572237:
		return &HorizontalTiledWindowPieces{}
	case 1498808798:
		return &ClanLabel{}
	case 1499500636:
		return &TerritoryRegionParams{}
	case 1499847222:
		return &AccountDefinition{}
	case 1500149896:
		return &UIComboBoxStyle{}
	case 1500520594:
		return &SwitchGizmoData{}
	case 1505533788:
		return &MonsterACDInfo{}
	case 1506311405:
		return &GlobalCrafterEvents{}
	case 1510485680:
		return &PlayerPartitionLevelSubcondition{}
	case 1510969510:
		return &DemonSummoningRitualQuests{}
	case 1512482878:
		return &GameTestingPersonaSamplingStartMessage{}
	case 1515056329:
		return &SurveyTypeEntry_Table{}
	case 1515542467:
		return &SoundTableEntry{}
	case 1516041750:
		return &PlayerLevelSubcondition{}
	case 1519954155:
		return &MaterialScalarValueDefinition{}
	case 1524322706:
		return &TriggerEventFadeRemotePlayers{}
	case 1527347021:
		return &VertInfluences{}
	case 1527797171:
		return &EnterKnownLookOverrides{}
	case 1529384342:
		return &AIStateDebugSetEntryStateMessage{}
	case 1530760901:
		return &GlobalNPCCustomizationData{}
	case 1531705921:
		return &PowerConditionDamageIsCrit{}
	case 1532086805:
		return &PowerConditionDamageIsNear{}
	case 1536548129:
		return &VertexElem{}
	case 1539306012:
		return &PostApplyBuffCallback{}
	case 1539764745:
		return &HoudiniParticlesSimDefinition{}
	case 1542498662:
		return &InventoryLocationMessageData{}
	case 1545009353:
		return &NecroArmyUnitSpecializationData{}
	case 1545908648:
		return &UIControlIconOptionalFieldMapDefaults{}
	case 1548004936:
		return &MonsterDamageStateThresholds{}
	case 1548404444:
		return &MapImageHandleReference{}
	case 1548498258:
		return &OnHitBuffCallback{}
	case 1549763492:
		return &FogOfWarDefinition{}
	case 1552149356:
		return &ScriptEventParamHashedString{}
	case 1553481155:
		return &VisualItem{}
	case 1553851092:
		return &PlayerClassNecroData{}
	case 1557633509:
		return &InventoryRequestSocketMessage{}
	case 1560350015:
		return &OnResourceSpentBuffCallback{}
	case 1561306520:
		return &SceneCommonSpecification{}
	case 1563449722:
		return &PlayerSavedData{}
	case 1565240433:
		return &PolymorphicBase{}
	case 1567071638:
		return &PolytopeData{}
	case 1567658692:
		return &PrefetchSceneMessage{}
	case 1572611965:
		return &NpcTemplate{}
	case 1573591793:
		return &PowerConditionIsSkillSlot{}
	case 1578429650:
		return &AssignTechniqueSlotMessage{}
	case 1579502660:
		return &GroundTestPosition{}
	case 1579898130:
		return &ScriptEventParamMonsterFamily{}
	case 1580383550:
		return &ConditionalAudioStateSetter{}
	case 1583616832:
		return &SpeedTreeWindGroup{}
	case 1583864588:
		return &SteamAchievementDefinition{}
	case 1585147788:
		return &MusicTransition{}
	case 1585421177:
		return &TrophyUnlockCondition{}
	case 1587276558:
		return &PowerConditionIsStealthed{}
	case 1589989121:
		return &DecalLookVariantMap{}
	case 1595431348:
		return &Type_5f1859b4{}
	case 1596648439:
		return &HeroDefinition{}
	case 1598717599:
		return &RareMonsterNamesEntry_Table{}
	case 1599239464:
		return &dmTransformMirror{}
	case 1600030893:
		return &PowerFacingWindow{}
	case 1600853111:
		return &UIScrollableTextStyle{}
	case 1606406480:
		return &SNONameDataMessage{}
	case 1609541836:
		return &MarkerWallData{}
	case 1612373481:
		return &ScriptEventParamLinkedMarkerAny{}
	case 1613488483:
		return &PS5ConsoleAwardDefinition{}
	case 1613933674:
		return &LookVariant{}
	case 1620996494:
		return &EmitterCylinderData{}
	case 1621969581:
		return &RunTimeMaterialScalarGraphEntry{}
	case 1627723867:
		return &Type_6105185b{}
	case 1629427722:
		return &AbortPowerMessage{}
	case 1632310600:
		return &CheckpointGizmoData{}
	case 1634307306:
		return &UIStoryboard2StyleOptionalFieldMapDefaults{}
	case 1635348238:
		return &PetMessage{}
	case 1636896932:
		return &Type_619110a4{}
	case 1640357264:
		return &AnimTreeBlendTriangle{}
	case 1641549773:
		return &PowerConditionIsInActorGroup{}
	case 1645595534:
		return &LargeBiomeObject{}
	case 1647198707:
		return &MonsterFamilyDefinition{}
	case 1648188489:
		return &TriggerEventHitFlash{}
	case 1661010243:
		return &InterpolationNode_bcVec3{}
	case 1661010244:
		return &InterpolationNode_bcVec4{}
	case 1662164195:
		return &QuestPhase{}
	case 1664425892:
		return &ImbueAffixResultMessage{}
	case 1665901277:
		return &AnimSetAnimPreloadHelper{}
	case 1668292200:
		return &GlobalMarkerActorPortalDestData{}
	case 1670410600:
		return &TriggerEventFootstepDrag{}
	case 1670688473:
		return &TriggerEventFootstepLift{}
	case 1671323816:
		return &ConversationSpeakerCaseNode{}
	case 1672889714:
		return &PlayerTalentRankSubcondition{}
	case 1675052528:
		return &BoostDefinition{}
	case 1680851546:
		return &StoryboardPlaySoundNodeCollection{}
	case 1681337108:
		return &OnGetHitWithCCBuffCallback{}
	case 1683664497:
		return &DT_POLYMORPHIC_VARIABLEARRAY[T]{}
	case 1687293198:
		return &TriggerEventDisableCollisionMessages{}
	case 1688351367:
		return &UIScrollBoxStyle{}
	case 1693956821:
		return &InventorySplitStackMessage{}
	case 1697033285:
		return &PlayerWorldTierEligibilityMessage{}
	case 1697914509:
		return &AIPropType{}
	case 1698657718:
		return &UIControlFont{}
	case 1698752488:
		return &UIControlIcon{}
	case 1700805074:
		return &PortalGizmoData{}
	case 1703620037:
		return &TelemetryBugEnteredMessage{}
	case 1706747121:
		return &SalvageResultItem{}
	case 1707030331:
		return &ItemUpgradeResultMessage{}
	case 1708090461:
		return &FoliageGrid{}
	case 1708808756:
		return &GlobalVendorEvents{}
	case 1709841508:
		return &PlayerQuestMessage{}
	case 1712030165:
		return &UIEditStyleOptionalFieldMapDefaults{}
	case 1717523836:
		return &DebugProjectileDetPathData{}
	case 1718506033:
		return &Type_666e5231{}
	case 1718849905:
		return &NecroArmyUnitSpecializationUpgradeData{}
	case 1724776431:
		return &TriggerEventSequenceEnded{}
	case 1725462643:
		return &UIMinimapRoadsStyle{}
	case 1728814485:
		return &ShaderMapOverrideOptionalFieldMapDefaults{}
	case 1733186626:
		return &AIPropPowerPairing{}
	case 1738300573:
		return &MarkerMonsterActorData{}
	case 1738373142:
		return &PowerConditionDamageIsDot{}
	case 1738374856:
		return &PowerConditionDamageIsFar{}
	case 1738588147:
		return &MalignantMonsterColorSubcondition{}
	case 1739069350:
		return &SeasonalPostCampaignCompleteSubcondition{}
	case 1740982451:
		return &PlayerIndexRequestMessage{}
	case 1745318875:
		return &ActorSlotHelper{}
	case 1745391946:
		return &Type_6808914a{}
	case 1747991279:
		return &Type_68303aef{}
	case 1751632332:
		return &PreloadSpawnMarkerData{}
	case 1752813939:
		return &UInt64DataResponse{}
	case 1753871156:
		return &WaypointEffectInfo{}
	case 1755847107:
		return &HardpointOffsets{}
	case 1756881483:
		return &RevealTeamMessage{}
	case 1760724339:
		return &IKLegBoneChain{}
	case 1762254162:
		return &Type_6909dd52{}
	case 1766737593:
		return &SNOFileHeader{}
	case 1769463365:
		return &ShortcutKey{}
	case 1770847088:
		return &UITimerStyle{}
	case 1771829381:
		return &OnStartPowerCallback{}
	case 1771985748:
		return &PowerConditionHasMonsterTag{}
	case 1773382450:
		return &ArmorPactType_Table{}
	case 1775775341:
		return &AtLeastLogicSubcondition{}
	case 1776237801:
		return &ItemCountSubcondition{}
	case 1777060346:
		return &NecroPetData{}
	case 1777318472:
		return &EffectGroupActorAnimationTrack{}
	case 1780051193:
		return &ScriptEventParamLevelArea{}
	case 1781863288:
		return &ItemQualityModifierSubcondition{}
	case 1782591369:
		return &UIContextMenuStyle{}
	case 1786551918:
		return &CraftingMatCategory{}
	case 1786644177:
		return &DeathMaterialTemplate{}
	case 1787454432:
		return &ParametricClutterIndexLayer{}
	case 1789096554:
		return &RunTimeMaterialVectorGraphEntry{}
	case 1791638909:
		return &GameTestingActorUseSkill{}
	case 1795423328:
		return &StoryboardValueNode_bcVec2{}
	case 1797021084:
		return &UIImageHandleReference{}
	case 1797564205:
		return &PlayerWeaponExpertiseLevelMessage{}
	case 1800961110:
		return &SphereProximityData{}
	case 1801469402:
		return &ShaderPermShaderProgram{}
	case 1805383760:
		return &DebugDataFinishedMessage{}
	case 1806235108:
		return &ACDTranslateNormalMessage{}
	case 1806875813:
		return &GameFlagSubcondition{}
	case 1810202905:
		return &Influence{}
	case 1811863812:
		return &VertTiledWindowPieces{}
	case 1812237195:
		return &LayerVertexAO{}
	case 1812693783:
		return &ParagonGlyphObtainedMessage{}
	case 1812719981:
		return &DemonScrollNodeMessage{}
	case 1815184996:
		return &PlayPlayerMountSoundMessage{}
	case 1815206818:
		return &PvPResurrectTriggeredBuffCallback{}
	case 1816168716:
		return &ConditionProperty{}
	case 1817937405:
		return &ParagonUnequipSocketMessage{}
	case 1826826915:
		return &Type_6ce32aa3{}
	case 1827034945:
		return &MaterialValueSetDefinition{}
	case 1827228827:
		return &SkillTreeReward_Table{}
	case 1828129294:
		return &WorldRevealedPortalInfo{}
	case 1835606997:
		return &PlayCutsceneMessage{}
	case 1843934011:
		return &Type_6de8333b{}
	case 1845219085:
		return &PowerConditionDamageIsFromPayload{}
	case 1849409482:
		return &MapPinMessage{}
	case 1852155541:
		return &ActorVariantPreloadHelper{}
	case 1853817945:
		return &InterpolationPath_uint32{}
	case 1855390010:
		return &Type_6e97013a{}
	case 1860709698:
		return &AttributeSetValueMessage{}
	case 1860780666:
		return &MergedMsgTriggeredEvent{}
	case 1863894076:
		return &Type_6f18c43c{}
	case 1866279015:
		return &LockingGizmoData{}
	case 1868650677:
		return &GameTestingCloseCrafter{}
	case 1869689402:
		return &HitReactionOverride{}
	case 1872500871:
		return &IconLayout{}
	case 1874071251:
		return &TriggerEventChangePhysicsParameters{}
	case 1874856805:
		return &ClanBankMoveItemMessage{}
	case 1877253458:
		return &PlayerCurrentLevelAreaSubcondition{}
	case 1878327400:
		return &PlayerPartySummonReceivedMessage{}
	case 1886370288:
		return &TriggerEventTransparency{}
	case 1887511799:
		return &TriggerEventObjectLookAt{}
	case 1887910602:
		return &CraftingRecipeResultMessage{}
	case 1890695261:
		return &ScriptEventParamSecondaryGroup{}
	case 1892122433:
		return &HeroPreset{}
	case 1894103222:
		return &PrefabDataInfo{}
	case 1894312142:
		return &PrefabScopedActorGroupData{}
	case 1894444122:
		return &UIAutoScrollingTextStyle{}
	case 1896923476:
		return &BarbWeaponExpertiseData{}
	case 1899575067:
		return &PlayerNonAuthoritativePositionMessage{}
	case 1900436670:
		return &GeneratorToItemMessage{}
	case 1900454970:
		return &Type_7146a43a{}
	case 1904113869:
		return &ItemPowerSubcondition{}
	case 1904447052:
		return &PersonaSkinColor{}
	case 1905862367:
		return &ActorCollisionData{}
	case 1910102078:
		return &StarsSettingsOptionalFieldMapDefaults{}
	case 1913132816:
		return &Type_72081710{}
	case 1914659836:
		return &AssignClassPassiveSkillSlotMessage{}
	case 1915825028:
		return &MediumBiomeObject{}
	case 1917309641:
		return &NightmareDungeonGlobalSpawn{}
	case 1919141278:
		return &LooteeLevelRangeSubcondition{}
	case 1921550813:
		return &TriggerEventMsg{}
	case 1922961974:
		return &StencilParams{}
	case 1925015032:
		return &RequiredRequestMessageHeader{}
	case 1927540920:
		return &GlobalMarkerActorPortalData{}
	case 1928395195:
		return &ChangeAppearanceMessage{}
	case 1929374276:
		return &PlayLineActorNameInfo{}
	case 1929750214:
		return &GameTestingStatusTextMessage{}
	case 1931092405:
		return &DT_BCVEC2I{}
	case 1931790071:
		return &MarkerDestroyableObjectGizmoData{}
	case 1932093566:
		return &ForcedPrefetchData{}
	case 1932832286:
		return &OnInitializeDamageBuffCallback{}
	case 1934448837:
		return &VoteKickMessage{}
	case 1937283260:
		return &Type_737898bc{}
	case 1937804743:
		return &SkillTreeNodeEntry{}
	case 1941067946:
		return &ChangedHeroIdMessage{}
	case 1941343248:
		return &PowerConditionHasActorTarget{}
	case 1946425919:
		return &LogicSubcondition{}
	case 1947080328:
		return &UIConsoleEditStyle{}
	case 1948409699:
		return &Type_74225f63{}
	case 1954392551:
		return &DRLGPortalInfo{}
	case 1955932002:
		return &JoinExistingGamePlayer{}
	case 1956557694:
		return &BoostCheatEntry{}
	case 1958909611:
		return &NpcLookTagEntry_Table{}
	case 1961073695:
		return &CameraModeSetMessage{}
	case 1963650241:
		return &ExperienceLevelAlt{}
	case 1966453421:
		return &Type_7535b2ad{}
	case 1970160507:
		return &ColorCorrectionParams{}
	case 1975688513:
		return &UIMinimapArtStyle{}
	case 1976178896:
		return &UIControlStyleOptionalFieldMapDefaults{}
	case 1976572630:
		return &TriggerEvent{}
	case 1976971716:
		return &AICellData{}
	case 1977693790:
		return &PlayMusicOverlayMessage{}
	case 1981600684:
		return &ServiceAvailability{}
	case 1982581444:
		return &BannerMaskOnly{}
	case 1983770026:
		return &DeathFadeTimeMessage{}
	case 1984123993:
		return &ActorGizmoData{}
	case 1986190036:
		return &FlagLookup{}
	case 1988397685:
		return &TriggerEventAddRope{}
	case 1989677168:
		return &GenericBlobResponseMessage{}
	case 1994605866:
		return &BloodSealUnequipSocketMessage{}
	case 1994743229:
		return &EffectGroupActorPositionTrack{}
	case 1996222619:
		return &WorldEventStartingMessage{}
	case 1996866922:
		return &ImbueRecipe{}
	case 1999091988:
		return &Type_7727b914{}
	case 2003228405:
		return &NecroArmyUnitMessage{}
	case 2004372852:
		return &SpeakerDefinition{}
	case 2006826034:
		return &TriggerEventSetWeaponSheathed{}
	case 2007470353:
		return &LoudnessParamsOptionalFieldMapDefaults{}
	case 2007685731:
		return &InterpolationNode_float{}
	case 2011319229:
		return &InterpolationNode_int32{}
	case 2012569092:
		return &OnInterruptPowerCallback{}
	case 2018777882:
		return &Type_78541b1a{}
	case 2019694123:
		return &OnCreatePowerCallback{}
	case 2021184730:
		return &ACDGroupMessage{}
	case 2022002312:
		return &SceneCommonSpecAudioVisual{}
	case 2024104618:
		return &ClassPassiveSkillData{}
	case 2028905861:
		return &PlayerClassResourceData{}
	case 2029186460:
		return &TriggerCleanup{}
	case 2029827469:
		return &ClientDebugLogMessage{}
	case 2030959986:
		return &ActivityReward{}
	case 2031655355:
		return &PowerPhasePreplay{}
	case 2032769695:
		return &ReputationItemReward{}
	case 2034679227:
		return &ScriptEventParamQuestName{}
	case 2036903461:
		return &CurrentLevelAreaSubcondition{}
	case 2037513697:
		return &GlobalMarkerActorWaypointData{}
	case 2041894246:
		return &PrivateGameSubcondition{}
	case 2042987558:
		return &GameTestingDungeonEntranceSamplingStartMessage{}
	case 2046453424:
		return &MarkerInstanceChunk{}
	case 2046994646:
		return &LevelUpNotificationEntry{}
	case 2049702795:
		return &ScriptEventParamMonsterRarity{}
	case 2051550180:
		return &MarkerInstanceGroup{}
	case 2052605128:
		return &PrefetchQuestMessage{}
	case 2056603216:
		return &NPCComponentSlotComponentPreloadHelper{}
	case 2057617923:
		return &EffectGroupDefinition{}
	case 2057942129:
		return &CurrencyModifiedMessage{}
	case 2058477748:
		return &UIListBoxStyleOptionalFieldMapDefaults{}
	case 2059036506:
		return &UIItemButtonStyleOptionalFieldMapDefaults{}
	case 2059654736:
		return &GameTestingUnlockRecipeTier{}
	case 2060105275:
		return &ColorCorrectionParamsOptionalFieldMapDefaults{}
	case 2060884859:
		return &OctreePrimitive{}
	case 2061652930:
		return &DebugProjectileCollisionCheck{}
	case 2064769380:
		return &MarkerPortalDestGizmoData{}
	case 2065256525:
		return &ItemSourceWorldTierSubcondition{}
	case 2066859665:
		return &ItemUpgradeCountSubcondition{}
	case 2066998999:
		return &NPCHairColors{}
	case 2067380477:
		return &OnResourceGainedBuffCallback{}
	case 2073439808:
		return &ScriptEventParamSpawnerParentMarkerHandle{}
	case 2074591759:
		return &Type_7ba7c20f{}
	case 2077459498:
		return &FoleyMaterialTag{}
	case 2079139131:
		return &ClassPassiveSkillTypeSaveData{}
	case 2087454851:
		return &ScriptEventParamConversation{}
	case 2088474641:
		return &SubObjectAppearance{}
	case 2088915018:
		return &PowerConditionIsValidForWeaponExpertise{}
	case 2092006570:
		return &OnBerserkRemovedCallback{}
	case 2092121213:
		return &BloodSealIntoSocketMessage{}
	case 2094206499:
		return &AnimSetOverrideEntry{}
	case 2098572313:
		return &CollisionMesh{}
	case 2104860565:
		return &SkillTreeNode{}
	case 2105554066:
		return &DungeonKeyBlockedMessage{}
	case 2112201650:
		return &ScriptEventParamFloatRangeEntered{}
	case 2112421053:
		return &ItemQualityLevelPowerRanges{}
	case 2114060201:
		return &ActorCombatData{}
	case 2114606337:
		return &GameSyncedDebugData{}
	case 2118224808:
		return &PhaseJumpBase{}
	case 2121213381:
		return &GameTestingActorDeathSamplingStartMessage{}
	case 2126649151:
		return &SeasonWorldTierData{}
	case 2127931882:
		return &WorldEvent{}
	case 2137439767:
		return &DeathLookTemplate{}
	case 2142531194:
		return &StoryboardPlayStoryboardNodeCollection{}
	case 2142750046:
		return &HirelingInfo{}
	case 2143433921:
		return &dmClothCapsuleDefOldMirror{}
	case 2144199072:
		return &HiddenCacheGizmoData{}
	case 2145337385:
		return &PhaseJumpAnimEnd{}
	case 2145377512:
		return &TriggerEventCameraStayOnSpline{}
	case 2145577021:
		return &ParticleDefinition{}
	case 2146499348:
		return &dmClothFaceOldMirror{}
	case 2149480436:
		return &TriggerEventSetWeaponVisibility{}
	case 2151397172:
		return &SonyConsoleAwardDefinition{}
	case 2151579788:
		return &LocalEventSpawnerDataMessage{}
	case 2153074669:
		return &StoryboardValueNodeCollection_float{}
	case 2155009884:
		return &AnimPreplayData{}
	case 2157773438:
		return &ConversationSpeakerSwitchNode{}
	case 2160968233:
		return &Hardpoint{}
	case 2163877900:
		return &StoryboardValueNodeCollection_bcVec2{}
	case 2163881319:
		return &UIRadioButtonGroupStyleOptionalFieldMapDefaults{}
	case 2166886397:
		return &LineSeg2D{}
	case 2166886430:
		return &LineSeg3D{}
	case 2170423475:
		return &Matrix3x3{}
	case 2170424565:
		return &Matrix4x4{}
	case 2170992511:
		return &PeriodicBuffCallback{}
	case 2171505484:
		return &CollisionCapsuleToAppearance{}
	case 2172679889:
		return &RandomNumberGenerator{}
	case 2172682041:
		return &Type_81807f39{}
	case 2174682268:
		return &ANNDataMessage{}
	case 2175310548:
		return &DT_CHARARRAY{}
	case 2176853528:
		return &RunTimeMaterialScalarValueEntry{}
	case 2179972544:
		return &CrowdControlEffects{}
	case 2181073666:
		return &RNGStateData{}
	case 2181465511:
		return &ScriptEventParamPlayerAlly{}
	case 2183663603:
		return &PowerBuffIdentifier{}
	case 2184063125:
		return &WeatherStateParamsOptionalFieldMapDefaults{}
	case 2185067100:
		return &BlizzconSubcondition{}
	case 2193642883:
		return &DT_STARTLOC_NAME{}
	case 2196035606:
		return &ParticleLifeEvent{}
	case 2196661953:
		return &PowerConditionIsInjured{}
	case 2201739835:
		return &QuestItemCountSubcondition{}
	case 2203797867:
		return &PowerConditionDamageHasFortified{}
	case 2203850545:
		return &Type_835c1731{}
	case 2204929451:
		return &UIHotbarButtonStyleOptionalFieldMapDefaults{}
	case 2209846478:
		return &InitiateGroupTransferMessage{}
	case 2214406937:
		return &AppearanceDefinition{}
	case 2215366883:
		return &WwiseExternalSource{}
	case 2216403567:
		return &Type_841ba26f{}
	case 2217400535:
		return &TriggerEventChangeLookDuration{}
	case 2218862017:
		return &LocalPlayerNetEvent{}
	case 2221046122:
		return &DRLGTileDebugInfo{}
	case 2224583688:
		return &ConvexHull{}
	case 2228087293:
		return &ActorWeaponData{}
	case 2231778435:
		return &ConditionalMaterialOverride{}
	case 2231852322:
		return &BasicGizmoData{}
	case 2232542902:
		return &LabelGBID{}
	case 2232906326:
		return &FoleyMaterialTagInfo{}
	case 2232994936:
		return &LabelRule{}
	case 2236788925:
		return &PowerConditionIsInCombat{}
	case 2237510224:
		return &InventoryRequestQuickMoveMessage{}
	case 2239531469:
		return &Type_857c89cd{}
	case 2241053736:
		return &WwiseInitSoundBank{}
	case 2241554070:
		return &WardrobeGizmoData{}
	case 2241717353:
		return &GlobalRoadGraph{}
	case 2244038972:
		return &TerritoryRegionBoundary{}
	case 2246606637:
		return &WorldSetRemainingReviveCountMessage{}
	case 2247187911:
		return &TalentRankAssignedMessage{}
	case 2247750652:
		return &OnHitEffectTriggeredBuffCallback{}
	case 2251741487:
		return &Type_8636d92f{}
	case 2254079268:
		return &SpeakerActorOverride{}
	case 2256765564:
		return &PowerConditionHasItemEquipped{}
	case 2257212908:
		return &SchedulerGlobalUniqueCategory_Table{}
	case 2264191210:
		return &PlayerIndexMessage{}
	case 2266988989:
		return &DRLGNodeLink{}
	case 2268617325:
		return &Type_87385a6d{}
	case 2271882673:
		return &AssignArsenalSkillSlotMessage{}
	case 2273327169:
		return &DesignerVariablePayload{}
	case 2273337114:
		return &ItemTypeDefinition{}
	case 2275911501:
		return &PlayerHasUnlockedSpiritBondSubcondition{}
	case 2281806197:
		return &FloatDataMessage{}
	case 2286345736:
		return &ACDChangeGBHandleMessage{}
	case 2286607278:
		return &MailRetrieveMessage{}
	case 2288649288:
		return &SceneData{}
	case 2289366803:
		return &LevelScalingData{}
	case 2289552381:
		return &MailRetrieveResponseMessage{}
	case 2291044736:
		return &ActorGroupData{}
	case 2292633268:
		return &TimeSinceEventSubcondition{}
	case 2294093111:
		return &LoreMessage{}
	case 2294355469:
		return &Type_88c1160d{}
	case 2296234344:
		return &ActiveSkillSavedData{}
	case 2303447637:
		return &RoadTypeProperties{}
	case 2305778229:
		return &PowerCallbackBase{}
	case 2306151105:
		return &ProcChanceBuffCallbackBase{}
	case 2307863150:
		return &GameTestingMonsterSamplingStartMessage{}
	case 2308255985:
		return &ScriptEventParamGameTime{}
	case 2309166548:
		return &Int64DataMessage{}
	case 2310565829:
		return &ForcedArmorPactCount{}
	case 2311704666:
		return &UIItemTagStyle{}
	case 2313381993:
		return &AnimPayloadData{}
	case 2314008733:
		return &ActorAIData{}
	case 2314185754:
		return &UIAutoScrollingTextStyleOptionalFieldMapDefaults{}
	case 2316484023:
		return &Type_8a12bdb7{}
	case 2317315368:
		return &PostFXParams{}
	case 2319005362:
		return &LevelAreaTagsEntry{}
	case 2321101556:
		return &UIListBoxStyle{}
	case 2322101684:
		return &PlayerClassSubcondition{}
	case 2322205255:
		return &OnGizmoOperatedBuffCallback{}
	case 2322513553:
		return &Blessings_Table{}
	case 2322586175:
		return &PowerConditionDamageHasVulnerable{}
	case 2330953703:
		return &dmHeightSampleMirror{}
	case 2332138205:
		return &AIBroadcast{}
	case 2335353143:
		return &InstanceGroupInstance{}
	case 2339908716:
		return &UnassignSkillMessage{}
	case 2340576936:
		return &VoiceActorEntry_Table{}
	case 2342148084:
		return &ReputationDefinition{}
	case 2342641194:
		return &IntDataMessage{}
	case 2343980501:
		return &RunTimeMaterialVectorValueEntry{}
	case 2345705581:
		return &GroupTransferQueryMessage{}
	case 2350164363:
		return &PowerConditionHasSkillTag{}
	case 2351673709:
		return &SkillEnchantSavedData{}
	case 2352207656:
		return &Type_8c33d728{}
	case 2354163126:
		return &CampaignArc{}
	case 2354985244:
		return &ReputationSubcondition{}
	case 2359108143:
		return &TriggerEventShowWarpUI{}
	case 2363268517:
		return &GameTestingSmokeSamplingStartMessage{}
	case 2365357836:
		return &ACDChangeActorMessage{}
	case 2366025409:
		return &dmClothBendingConstraintOldMirror{}
	case 2366029567:
		return &CollectAchievementItemRewardsRequest{}
	case 2366545239:
		return &Type_8d0e9d57{}
	case 2366876290:
		return &LevelScalingDefinition{}
	case 2367854564:
		return &GlobalCustomizationData{}
	case 2368820934:
		return &PlayAnimationMessageSpec{}
	case 2369645379:
		return &TriggerProximityData{}
	case 2370441714:
		return &PetType_Table{}
	case 2372115555:
		return &TriggerEventShowCaptionUI{}
	case 2378235681:
		return &MaterialBoolValueDefinition{}
	case 2378676899:
		return &AttributeFormulaEntry_Table{}
	case 2381837287:
		return &GameFoundForTransferMessage{}
	case 2382044172:
		return &PlayerDWordDataMessage{}
	case 2382427025:
		return &WindowPieces{}
	case 2384880434:
		return &DT_RGBACOLOR{}
	case 2385389941:
		return &ConsoleEvent{}
	case 2387944564:
		return &PlayerHealthSubcondition{}
	case 2388214534:
		return &DT_FIXEDARRAY[T]{}
	case 2388963472:
		return &GameTestingWorldEventSamplingStartMessage{}
	case 2394108998:
		return &BloodSealUnlockMessage{}
	case 2394153027:
		return &LookLink{}
	case 2394280102:
		return &MarkerAudioVolumeData{}
	case 2395658582:
		return &MarkerDoorGizmoData{}
	case 2395819864:
		return &PlayerIsMaxLevelSubcondition{}
	case 2400971897:
		return &FlippyMessage{}
	case 2401292714:
		return &NullProximityData{}
	case 2402010415:
		return &VertexDensitySettings{}
	case 2404505973:
		return &GBIDDataMessage{}
	case 2405096309:
		return &DecalTemplate{}
	case 2409250148:
		return &PlayerHasFollowerSubcondition{}
	case 2412575474:
		return &InterpolationNode_uint32{}
	case 2417105777:
		return &PlayNonPositionalSoundMessage{}
	case 2420814353:
		return &Type_904ab211{}
	case 2421467334:
		return &ActorGroup{}
	case 2423935966:
		return &AnimTreeDefinition{}
	case 2430479134:
		return &SavedTransmog{}
	case 2433333811:
		return &FadeGroupParentInfo{}
	case 2438391130:
		return &OnRetreatCompleteCallback{}
	case 2442380883:
		return &PowerConditionOnChance{}
	case 2450313795:
		return &DT_STRING_FORMULA{}
	case 2451485018:
		return &EnchantAffixChoice{}
	case 2451870822:
		return &NPCComponentEntry{}
	case 2454123799:
		return &PetDetachMessage{}
	case 2454381057:
		return &NPCComponentGroup{}
	case 2454888476:
		return &EncounterDefinition{}
	case 2456833659:
		return &UITreeFolderStyleOptionalFieldMapDefaults{}
	case 2465803619:
		return &DungeonSpawningPoolEntry{}
	case 2469691855:
		return &ReverbDefinition{}
	case 2473743515:
		return &ParagonGlyphExperience_Table{}
	case 2474805987:
		return &PlayerCompletedRepeatableQuestEntry{}
	case 2475257601:
		return &OctreeCube{}
	case 2475563578:
		return &OctreeLeaf{}
	case 2475646440:
		return &OctreeNode{}
	case 2476623806:
		return &ClothParamsOverride{}
	case 2478508419:
		return &GlobalIntensityLevels{}
	case 2478744539:
		return &PersistentEventUpdateMessage{}
	case 2486290493:
		return &BroadcastTextMessage{}
	case 2489740473:
		return &Type_94666cb9{}
	case 2489826166:
		return &FavorLevel{}
	case 2498157443:
		return &MarkingShapeDefinition{}
	case 2499966838:
		return &MaxKeyedDungeonCompletedSubcondition{}
	case 2500959896:
		return &DRLGSceneCreationInfo{}
	case 2502332464:
		return &ActorAIDisperseTierData{}
	case 2504911729:
		return &Type_954deb71{}
	case 2507153527:
		return &PlayerClassCoreStatBenefitEntry{}
	case 2508478640:
		return &QuestCallbackSubcondition{}
	case 2510049735:
		return &SceneChunk{}
	case 2511145847:
		return &SceneDefinition{}
	case 2517296881:
		return &OperateWorldTierSelectMessage{}
	case 2517800201:
		return &HealthPotionData{}
	case 2519410570:
		return &MailDeleteResponseMessage{}
	case 2519917715:
		return &TrickleMessage{}
	case 2520702334:
		return &InterpolationPathHeader{}
	case 2522697303:
		return &TransmogEnableMessage{}
	case 2526923990:
		return &WallPiece{}
	case 2529552754:
		return &RevealSceneMessage{}
	case 2531064807:
		return &ExperienceLevel_Table{}
	case 2532034596:
		return &OnAIUpdatePowerCallback{}
	case 2535282083:
		return &ScriptEventParamOwnerParty{}
	case 2537782937:
		return &MonsterSubcondition{}
	case 2538390904:
		return &FaceDefinition{}
	case 2540505462:
		return &UIControlFontOptionalFieldMapDefaults{}
	case 2540765384:
		return &InterpolationNode_RGBAColor{}
	case 2543084619:
		return &ActorMovementPowerData{}
	case 2544145426:
		return &IKFrames{}
	case 2544485076:
		return &MonsterRaritySubcondition{}
	case 2548851047:
		return &DemonScrollRewardChoicePickedMessage{}
	case 2549076906:
		return &GlobalSnoTemplatesData{}
	case 2549498530:
		return &PS4ConsoleAwardDefinition{}
	case 2549709590:
		return &ActivityDefinition{}
	case 2549930403:
		return &AngularAxisParams{}
	case 2550988783:
		return &ActivateDungeonKeyMessage{}
	case 2554403987:
		return &PowerConditionHasBuff{}
	case 2554746855:
		return &SkillTreeBonusRequirement{}
	case 2562866241:
		return &UIControlClickSounds{}
	case 2563239354:
		return &MalignantColor{}
	case 2563708935:
		return &VisualInventoryMessage{}
	case 2564089914:
		return &UIRActorStyle{}
	case 2564555685:
		return &AppBone{}
	case 2567036372:
		return &ZoneProgressClaimRewardsMessage{}
	case 2568734177:
		return &RecipeDefinition{}
	case 2568815379:
		return &UIScrollbarStyleOptionalFieldMapDefaults{}
	case 2569096240:
		return &ACDTranslateDetPathSpiralMessage{}
	case 2570366766:
		return &Type_9934af2e{}
	case 2570990031:
		return &NPCLegFootstepTypeOverride{}
	case 2571326005:
		return &Environment{}
	case 2571982133:
		return &ConversationLineSetNode{}
	case 2575985446:
		return &Type_998a6b26{}
	case 2577181091:
		return &UIHotkeyStyle{}
	case 2580339411:
		return &PowerScriptParam{}
	case 2580740532:
		return &KnownListUpdateQuestACDObjectives{}
	case 2581622842:
		return &DisplayGameTextMessage{}
	case 2582092633:
		return &DungeonAffixFamilyEntry_Table{}
	case 2583917793:
		return &OnOtherBuffRemovedCallback{}
	case 2584931415:
		return &PowerLimitedActorType_Table{}
	case 2586870554:
		return &SkillTreeSkillRankMod{}
	case 2588169118:
		return &PRTransform{}
	case 2592055163:
		return &AVParams{}
	case 2594652800:
		return &VectorPath{}
	case 2595039391:
		return &HirelingSavedData{}
	case 2597480017:
		return &IncludePath{}
	case 2598565419:
		return &DyeDefinition{}
	case 2599303564:
		return &NPCInteractOptionsMessage{}
	case 2600087323:
		return &RopeEffectMessageACDToACD{}
	case 2601544319:
		return &Type_9b106a7f{}
	case 2602744819:
		return &PowerConditionIsMonsterRarity{}
	case 2603594083:
		return &DynamicPortalInfo{}
	case 2607134593:
		return &TriggerEventFadeMonsters{}
	case 2612133870:
		return &RewardDefinition{}
	case 2613264313:
		return &SimpleCommandFrameMessage{}
	case 2613318812:
		return &UIDateTimeStyle{}
	case 2615077772:
		return &NPCColorSet{}
	case 2616788302:
		return &PowerResourceCost{}
	case 2621793879:
		return &ACDLookAtMessage{}
	case 2623909960:
		return &ActorFaceHelper{}
	case 2624747364:
		return &MailReadMessage{}
	case 2625658112:
		return &NameSuffixPairing{}
	case 2626405485:
		return &FloatingAmountMessage{}
	case 2627400883:
		return &SpeedTreeWind{}
	case 2629560997:
		return &SkillDeclaration{}
	case 2630271823:
		return &PrefetchActorMessage{}
	case 2632036962:
		return &SerializeData{}
	case 2633518996:
		return &IntDataResponse{}
	case 2635124950:
		return &GlobalEmblems{}
	case 2637916746:
		return &QuestSideQuestAbandonedMessage{}
	case 2638826700:
		return &DebugEventLogMetaData{}
	case 2642956622:
		return &FootstepTableEntry{}
	case 2649429830:
		return &TriggerEventFadePlayers{}
	case 2650697781:
		return &MarkerDecalData{}
	case 2653177306:
		return &TriggerEventSetWeaponVisibilityDuration{}
	case 2655029985:
		return &NPCInteraction{}
	case 2656393353:
		return &MarkerPathToAOOffset{}
	case 2659267804:
		return &AnimSweptBone{}
	case 2661866676:
		return &OnHitWithCCBuffCallback{}
	case 2664386791:
		return &GizmoConditionData{}
	case 2665518925:
		return &FacialHairDefinition{}
	case 2666466548:
		return &ClothData{}
	case 2671035274:
		return &PlayerLevelMessage{}
	case 2677649540:
		return &ActorSoundTableData{}
	case 2679332817:
		return &VictimMessage{}
	case 2692507939:
		return &PortedToPlayerMessage{}
	case 2693985039:
		return &BaseACDInfo{}
	case 2696054852:
		return &WorldStateFullUpdateMessage{}
	case 2696410867:
		return &MonsterTagTuningData{}
	case 2698056971:
		return &JewelryDefinition{}
	case 2699874909:
		return &TerritoryDefinition{}
	case 2703348374:
		return &TriggerEventSpawnObject{}
	case 2704697578:
		return &LookVariantOverride{}
	case 2705520630:
		return &PowerConditionIsActorUnstoppable{}
	case 2710083680:
		return &Type_a1889860{}
	case 2710729343:
		return &MountClearMessage{}
	case 2711713996:
		return &TriggerEventCameraChangeTarget{}
	case 2714300283:
		return &SNOBlocklistDataChanged{}
	case 2715697063:
		return &PowerConditionIsTrackedActor{}
	case 2715997611:
		return &ZoneProgressRewardPerTierData{}
	case 2716429438:
		return &StarsSettings{}
	case 2718809169:
		return &LoudnessParams{}
	case 2720386370:
		return &TriggerEventEnableRagdollAnimationOverride{}
	case 2722037534:
		return &DesignerVariable_Table{}
	case 2722473312:
		return &StartPowerMessage{}
	case 2722669670:
		return &PowerConditionParagonGlyphAffixIsActive{}
	case 2729507990:
		return &Type_a2b0fc96{}
	case 2738650612:
		return &ParagonGlyphIntoSocketMessage{}
	case 2740285311:
		return &PlayerClassRogueData{}
	case 2740921528:
		return &ReputationGainedMessage{}
	case 2750801330:
		return &Circle{}
	case 2751678841:
		return &RotationKey{}
	case 2752714698:
		return &ACDTranslateAckMessage{}
	case 2753673685:
		return &NPCACDInfo{}
	case 2755888482:
		return &PowerConditionHasFortifiedHealth{}
	case 2758429349:
		return &PowerConditionIsCrowdControlled{}
	case 2760098121:
		return &ConsoleCommandResultsMessage{}
	case 2760774118:
		return &BlendTimeOverrideEntry{}
	case 2763598860:
		return &PlayerVariableIsSetSubcondition{}
	case 2763918557:
		return &ConversationSample{}
	case 2764320258:
		return &DT_INT{}
	case 2764331143:
		return &DT_SNO{}
	case 2765613286:
		return &Anim2DFrame{}
	case 2766662738:
		return &ActorCollisionFlags{}
	case 2767272062:
		return &PlayerAnimSetOverride{}
	case 2768795568:
		return &ZoneProgressRewardData{}
	case 2770795733:
		return &ShaderMapOverride{}
	case 2771980683:
		return &ACDBuffSyncedData{}
	case 2772503601:
		return &PvPInfoResponse{}
	case 2777232529:
		return &PowerConditionIsDamageType{}
	case 2777898273:
		return &GenericBlobMessage{}
	case 2778042845:
		return &PlayerEnterKnownMessage{}
	case 2778974978:
		return &Type_a5a3cb02{}
	case 2780317717:
		return &MarkerActorData{}
	case 2780951310:
		return &SpeedTreeWindBase{}
	case 2781228885:
		return &dmClothDistanceConstraintOldMirror{}
	case 2782855569:
		return &Type_a5df0191{}
	case 2784838746:
		return &RepairResultsMessage{}
	case 2795391298:
		return &RemovedBuffCallback{}
	case 2800636746:
		return &GroupRegionEntry_Table{}
	case 2800793622:
		return &TriggerEventDetachObject{}
	case 2803017583:
		return &KeyedDungeonTierEntry_Table{}
	case 2803465218:
		return &PlayerClassSorcererData{}
	case 2809861339:
		return &ClassInfoDataArray{}
	case 2811181471:
		return &GBIDHeader{}
	case 2811314006:
		return &HotbarButtonData{}
	case 2818394733:
		return &StoryboardActivationNodeCollection{}
	case 2820249283:
		return &Type_a81996c3{}
	case 2822536850:
		return &StoryboardDefinition{}
	case 2823526119:
		return &ScriptEventParamFloatRangeInside{}
	case 2823824643:
		return &UITutorialStyle{}
	case 2824118202:
		return &CurrencyItem{}
	case 2825252704:
		return &UIKeyMappingButtonStyle{}
	case 2826025722:
		return &MarkerNoSpawnVolumeData{}
	case 2826925415:
		return &CrafterTabDefinition{}
	case 2827109142:
		return &AnimTreeNodeBase{}
	case 2828840794:
		return &SkillTreeNodeMessage{}
	case 2828952640:
		return &ActorPreloadHelper{}
	case 2829109539:
		return &TriggerEventRestoreCamera{}
	case 2833801029:
		return &RunTimeMaterialValue_float{}
	case 2837178646:
		return &MonsterFootstepTableEntry{}
	case 2838399059:
		return &UIScrollbarStyle{}
	case 2839639157:
		return &QuestACDObjective{}
	case 2842269379:
		return &ValidComponent{}
	case 2847726419:
		return &WwiseChildFile{}
	case 2857749912:
		return &BlankBannerData{}
	case 2863656093:
		return &EffectGroupKeyData{}
	case 2865538525:
		return &PreApplyBuffCallback{}
	case 2866333320:
		return &DT_ACD_NETWORK_NAME{}
	case 2867390635:
		return &LayerInstanceChunk{}
	case 2871889556:
		return &ReputationValuePair{}
	case 2872085037:
		return &Type_ab308a2d{}
	case 2873585262:
		return &OnEndPowerCallback{}
	case 2876844401:
		return &ItemSalvageLevel_Table{}
	case 2877507578:
		return &UIRActorStyleOptionalFieldMapDefaults{}
	case 2882940688:
		return &ActorCritterData{}
	case 2884204419:
		return &QuestCallbackRegion{}
	case 2884411237:
		return &Type_abec9f65{}
	case 2885013475:
		return &NPCItems{}
	case 2887578027:
		return &UITemplateStyleOverride{}
	case 2888871135:
		return &dmClothDataOldMirror{}
	case 2890825383:
		return &UIRadioButtonGroupStyle{}
	case 2891320840:
		return &GameTestingBuybackItem{}
	case 2893246136:
		return &MaterialBoolValue{}
	case 2894373936:
		return &TriggerEventSetHelmVisibility{}
	case 2899228989:
		return &SubzoneModifierTagsEntry_Table{}
	case 2899636366:
		return &GameVariableValueSubcondition{}
	case 2901213531:
		return &dmClothTuningMirror{}
	case 2902473767:
		return &GeoSet{}
	case 2902494846:
		return &RequiredResponseMessageHeader{}
	case 2907517865:
		return &Type_ad4d33a9{}
	case 2907865191:
		return &MountACDInfo{}
	case 2908600322:
		return &PlayerTradeMessage{}
	case 2909661697:
		return &DesignerVariableChanged{}
	case 2917036215:
		return &GameTestingSellItem{}
	case 2918685438:
		return &StoryboardUIControlSetPositionTrack{}
	case 2920294703:
		return &SetIdleAnimationMessage{}
	case 2926955773:
		return &TriggerEventShowPoIUI{}
	case 2928454866:
		return &AmbientSoundDefinition{}
	case 2932113843:
		return &HeroDetailsArray{}
	case 2935055576:
		return &ScriptMessageMap{}
	case 2935158038:
		return &Type_aef2f516{}
	case 2936716518:
		return &HeroDetailsEntry{}
	case 2940213818:
		return &WorldStateSubcondition{}
	case 2940719703:
		return &PowerConditionHasDot{}
	case 2940723648:
		return &PowerConditionHasICD{}
	case 2941496629:
		return &MaterialValueDefinition{}
	case 2942321358:
		return &UIDrawHookStyleOptionalFieldMapDefaults{}
	case 2943074919:
		return &SkyColorSettingsOptionalFieldMapDefaults{}
	case 2943327539:
		return &Type_af6f9d33{}
	case 2944981941:
		return &Type_af88dbb5{}
	case 2948324216:
		return &IKBone{}
	case 2948381038:
		return &IKData{}
	case 2949726179:
		return &ACDTranslateFacingMessage{}
	case 2952710408:
		return &MalignantMonsterTierSubcondition{}
	case 2953843760:
		return &MarkerLink{}
	case 2956401361:
		return &HeroDetailsValue{}
	case 2956903311:
		return &PowerConditionHasDamage{}
	case 2958127092:
		return &PowerConditionIsAutoCast{}
	case 2959453771:
		return &EyeColorDefinition{}
	case 2963039083:
		return &DungeonAffixRange{}
	case 2963051637:
		return &PlayerKickTimerMessage{}
	case 2964990786:
		return &UIControlConsoleInputOptionalFieldMapDefaults{}
	case 2965426892:
		return &UIColorPickerStyle{}
	case 2968578253:
		return &StoryboardUIControlSetTextColorTrack{}
	case 2968693081:
		return &RequiredCommandFrameMessageHeader{}
	case 2971327593:
		return &WeaponExpertiseRanks_Table{}
	case 2974720179:
		return &InventoryChangeSkillAvailabilityMessage{}
	case 2974844252:
		return &QuestFollower{}
	case 2977136533:
		return &RotationCurve{}
	case 2977505002:
		return &QuestPhasePreloadHelper{}
	case 2979382107:
		return &BountyData{}
	case 2980280668:
		return &MarkerRecipeEventGizmoData{}
	case 2980650101:
		return &CarryableGizmoData{}
	case 2982009401:
		return &StoryboardUIControlSetRotationTrack{}
	case 2982989742:
		return &ZoneProgressPerZoneData{}
	case 2983615105:
		return &MarkerAxeMapIconData{}
	case 2985547766:
		return &OffHandItemLabelSubcondition{}
	case 2985980787:
		return &ConstraintLink{}
	case 2987561328:
		return &MapRevealSceneMessage{}
	case 2990104049:
		return &QuestChainStep{}
	case 2990129354:
		return &SummonActorEntry{}
	case 2991662091:
		return &InvLoc{}
	case 2997763859:
		return &InventoryRequestMoveMessage{}
	case 3000146908:
		return &UIDateTimeSettings{}
	case 3001537487:
		return &ShaderPermutation{}
	case 3002009882:
		return &BossDoorInstanceData{}
	case 3002505909:
		return &AnimTreeOverride{}
	case 3009706448:
		return &DesignerWorldFeatureFlagSubcondition{}
	case 3009884126:
		return &LevelAreaTagSubcondition{}
	case 3015841888:
		return &BountyDataMessage{}
	case 3015895646:
		return &Type_b3c2ea5e{}
	case 3017070665:
		return &AxialCylinder{}
	case 3017273369:
		return &Type_b3d7f019{}
	case 3017681211:
		return &TriggerEventObjectMoveToLocator{}
	case 3019282580:
		return &Type_b3f69894{}
	case 3019833463:
		return &Type_b3ff0077{}
	case 3020586783:
		return &PlayerSetCameraDefaultsMessage{}
	case 3021124313:
		return &ParagonBoardDefinition{}
	case 3021334823:
		return &PreloadHelper{}
	case 3021717351:
		return &SeasonalDungeonState{}
	case 3022074310:
		return &SerialDataInfo{}
	case 3024805895:
		return &PresetNPCComponent{}
	case 3025939855:
		return &TransmogSaveSnapshotMessage{}
	case 3026081009:
		return &UIRechargeTimerStyle{}
	case 3028624595:
		return &PowerBuffSaveAttribute{}
	case 3029538669:
		return &ItemImageHandleReference{}
	case 3032334607:
		return &SpeedTreeWind8Params{}
	case 3032830054:
		return &PRUSTransform{}
	case 3043022828:
		return &XboxConsoleAwardDefinition{}
	case 3043119527:
		return &EventCurrencyData{}
	case 3043783025:
		return &PortedToWaypointMessage{}
	case 3044153190:
		return &MaterialValue_RGBAColor{}
	case 3045089718:
		return &UICheckBoxStyleOptionalFieldMapDefaults{}
	case 3045283369:
		return &DT_SHARED_SERVER_DATA_ID{}
	case 3046368200:
		return &RainSoundSurfaceSet{}
	case 3047785107:
		return &MarkerServerData{}
	case 3048628370:
		return &DebugDrawPrimMessage{}
	case 3052003491:
		return &EmitterSphericalCapData{}
	case 3054048017:
		return &HirelingRequestLearnSkillMessage{}
	case 3059929473:
		return &Type_b662d181{}
	case 3063971755:
		return &UIControlHandle{}
	case 3066101868:
		return &TexAnimFrameByFrameCurve{}
	case 3066352125:
		return &CollisionSettings{}
	case 3067360607:
		return &QuestCallback{}
	case 3068002867:
		return &PowerBuffAttributeModifier{}
	case 3068519038:
		return &PowerConditionIsChannelled{}
	case 3070558196:
		return &ReputationLevelSubcondition{}
	case 3075465310:
		return &QuestKillAllMonstersUpdatedMessage{}
	case 3075785259:
		return &Transmog{}
	case 3076557727:
		return &RareItemNameMessage{}
	case 3076704615:
		return &ChairGizmoData{}
	case 3077127225:
		return &ScriptEventParamPrimaryGroup{}
	case 3077190069:
		return &dmClothPlaneOldMirror{}
	case 3078666273:
		return &DebugDataRequestOptionalParam{}
	case 3078833356:
		return &LocalEventDataMessage{}
	case 3081830969:
		return &ConfirmDungeonKeyUseMessage{}
	case 3083504987:
		return &DebugTrackedCheckpointRequestMessage{}
	case 3085005858:
		return &ActorDefinition{}
	case 3085544830:
		return &OnUnequipPowerCallback{}
	case 3089331074:
		return &UIControlConsoleInput{}
	case 3090765995:
		return &UIBrowserWindowStyle{}
	case 3094316551:
		return &LightInstanceData{}
	case 3095149691:
		return &CommonPortalGizmoData{}
	case 3096238958:
		return &PreloadACDDataMessage{}
	case 3096396389:
		return &dmMtxMirror{}
	case 3096716593:
		return &ActorUIData{}
	case 3100302512:
		return &OnDodgeBuffCallback{}
	case 3101063468:
		return &GetInventoryLocationMessage{}
	case 3101715391:
		return &AnimTreeNodeChild{}
	case 3101771039:
		return &dmMeshNodeMirror{}
	case 3101980087:
		return &ChestGizmoData{}
	case 3102876383:
		return &Line3D{}
	case 3105203439:
		return &WwiseConversationSoundBank{}
	case 3106010889:
		return &ItemQualitySubcondition{}
	case 3109214426:
		return &KillCountMessage{}
	case 3110834328:
		return &MaterialDefinition{}
	case 3112270847:
		return &BannerIcon{}
	case 3112682290:
		return &BannerTrim{}
	case 3114240327:
		return &UIScrollBoxStyleOptionalFieldMapDefaults{}
	case 3115140505:
		return &PowerPhaseBase{}
	case 3115515000:
		return &PowerPhaseLoop{}
	case 3116261682:
		return &ScalarFunctionFormula{}
	case 3117769734:
		return &PowerConditionHasHealth{}
	case 3118959544:
		return &ItemDefinition{}
	case 3120447277:
		return &IRect2D{}
	case 3120951188:
		return &SkillTreeReward{}
	case 3121633597:
		return &DT_OPTIONAL[T]{}
	case 3122866172:
		return &Type_ba2327fc{}
	case 3123636279:
		return &UIDialogDefinition{}
	case 3124492544:
		return &DT_VECTOR2D{}
	case 3124492577:
		return &DT_VECTOR3D{}
	case 3124492610:
		return &DT_VECTOR4D{}
	case 3126228816:
		return &BossEncounterStateMessage{}
	case 3127494188:
		return &MarkerPrefabData{}
	case 3128190323:
		return &TriggerEventCameraChangeDepthOfField{}
	case 3128795864:
		return &TriggerEventSetLightingLabelOverride{}
	case 3130001275:
		return &GetInventoryLocationResponseMessage{}
	case 3132676386:
		return &Marker{}
	case 3133380173:
		return &Type_bac3964d{}
	case 3135495650:
		return &DamageTakenBuffCallback{}
	case 3135734846:
		return &QuestSubconditionBase{}
	case 3137045551:
		return &MonsterFamilyArchetype{}
	case 3138400357:
		return &AppearanceLook{}
	case 3141460973:
		return &CarryableReceptacleGizmoData{}
	case 3142967512:
		return &ActorVOData{}
	case 3144084119:
		return &IndexedTriangle{}
	case 3144630075:
		return &Type_bb6f3f3b{}
	case 3144984891:
		return &AnimSetOrderTagEntry{}
	case 3145411138:
		return &ActiveSubzoneModifierSubcondition{}
	case 3145668840:
		return &PowerConditionIsPowerOwner{}
	case 3152339101:
		return &DestroySceneMessage{}
	case 3153011302:
		return &RunTimeMaterialValue_bcVec4{}
	case 3153797075:
		return &Currencies{}
	case 3154629575:
		return &WallDeformData{}
	case 3154991006:
		return &NSlice{}
	case 3156652577:
		return &TriggerEventObjectKeyFrame{}
	case 3158181227:
		return &BuffCallbackBase{}
	case 3161684625:
		return &TransmogMultipleSlotsMessage{}
	case 3162215415:
		return &PreloadSpawnWorldDataMessage{}
	case 3162763801:
		return &QuestFollowerPhaseInfo{}
	case 3169008909:
		return &AnimTreeLeaf{}
	case 3169091771:
		return &AnimTreeNode{}
	case 3174582404:
		return &MaterialEnum{}
	case 3176841574:
		return &QuestChainSubcondition{}
	case 3179414430:
		return &ScriptMessageMapFilter{}
	case 3179509402:
		return &AnimationClothOverride{}
	case 3183760729:
		return &SimpleResponse{}
	case 3184245915:
		return &ReputationClaimRewardMessage{}
	case 3185513958:
		return &HirelingInfoUpdateMessage{}
	case 3186488010:
		return &ConversationCannedNode{}
	case 3186581877:
		return &ActorVisualInventoryData{}
	case 3188175834:
		return &CampDiscoveredSubcondition{}
	case 3188626749:
		return &LabelGBID_Table{}
	case 3188635763:
		return &ByteDataMessage{}
	case 3190432702:
		return &CampaignCallbackSubcondition{}
	case 3193003306:
		return &UIStoryboard2Style{}
	case 3195183391:
		return &AttachCarryableToPlayerMessage{}
	case 3196250645:
		return &CriteriaEvent{}
	case 3199231532:
		return &IKWindow{}
	case 3203271662:
		return &RandomAmbientSoundParams{}
	case 3203307102:
		return &ChargeableGizmoData{}
	case 3205258018:
		return &SwitchBehaviorGizmoData{}
	case 3207113136:
		return &ServerSimulationTimeMessage{}
	case 3207444007:
		return &WorldTierChangeMessage{}
	case 3208364871:
		return &ZoneMapSecretCondition{}
	case 3208997398:
		return &MarkerHeightFieldIBInfo{}
	case 3212271855:
		return &DT_RGBACOLORVALUE{}
	case 3213398498:
		return &Octree{}
	case 3218190286:
		return &AttributeSpecifier{}
	case 3218202504:
		return &PlayEffectMessage{}
	case 3220679561:
		return &ConversationLineNode{}
	case 3225564917:
		return &CraftingMatCategory_Table{}
	case 3227031434:
		return &PublicGameSubcondition{}
	case 3227193627:
		return &PlayerVariableStringSubcondition{}
	case 3228260825:
		return &SpeedTreeBranchWindLevel{}
	case 3228520127:
		return &UITreeStyleOptionalFieldMapDefaults{}
	case 3228758260:
		return &ActorNPCData{}
	case 3229621050:
		return &QuestTagsEntry_Table{}
	case 3230174094:
		return &PlayErrorSoundMessage{}
	case 3231772010:
		return &JoinLANGameMessage{}
	case 3232228768:
		return &BloodSealUpgradeChoicesMessage{}
	case 3237647452:
		return &Type_c0fa945c{}
	case 3244749660:
		return &DT_VARIABLEARRAY[T]{}
	case 3245746969:
		return &UIWrapPanelStyleOptionalFieldMapDefaults{}
	case 3249363227:
		return &Type_c1ad591b{}
	case 3251137226:
		return &Type_c1c86aca{}
	case 3251419010:
		return &NpcArchetypeTemplate{}
	case 3251854358:
		return &ItemPreloadHelper{}
	case 3251898289:
		return &ConversationTreeNode{}
	case 3252537043:
		return &dmMeshDataMirror{}
	case 3256968112:
		return &SpawnGenerator{}
	case 3262450273:
		return &PlayerClassIsInGameSubcondition{}
	case 3267106107:
		return &SkillTag{}
	case 3268314499:
		return &dmClothVertexOldMirror{}
	case 3268886310:
		return &TriggerEventScreenFade{}
	case 3269576188:
		return &ProjectileImpactEffect{}
	case 3274290366:
		return &FogOfWarImage{}
	case 3278523656:
		return &StoryboardTimePointNode{}
	case 3278877880:
		return &UILayoutList{}
	case 3280532025:
		return &LevelAreaTagsEntry_Table{}
	case 3281363526:
		return &TriggerEventFade{}
	case 3281673073:
		return &TriggerEventNull{}
	case 3289294727:
		return &DotApplicationVisualsMessage{}
	case 3291325597:
		return &BuffExclusiveType{}
	case 3291807044:
		return &TryChatMessage{}
	case 3292961903:
		return &SubzoneDefinition{}
	case 3297622236:
		return &CapsuleProximityData{}
	case 3297641649:
		return &Type_c48e04b1{}
	case 3297747400:
		return &ConversationRandomSelectionNode{}
	case 3300608366:
		return &SubObjectNameInfo{}
	case 3301016084:
		return &GameTestingExecuteClientCheatMessage{}
	case 3303422751:
		return &PowerPetSpawn{}
	case 3304344920:
		return &IntensityParam{}
	case 3305523879:
		return &StoreCameraZoomMapping{}
	case 3308252139:
		return &AIStateDebugSetConditionStateMessage{}
	case 3308326094:
		return &ActivityLinks{}
	case 3309501108:
		return &MarkerPortalGizmoData{}
	case 3311139638:
		return &ScriptEventParamMarkerHandle{}
	case 3311804693:
		return &UIEditStyle{}
	case 3312843337:
		return &MarkerGroupData{}
	case 3313504794:
		return &SeasonSubcondition{}
	case 3314464778:
		return &TownPortalReturnDest{}
	case 3315275999:
		return &PartyVoteReplyMessage{}
	case 3316134124:
		return &WindowPiecesBase{}
	case 3316219731:
		return &PlayerGenderSubcondition{}
	case 3319843167:
		return &PvPBucketLevels{}
	case 3320317005:
		return &PowerEffectOverrides{}
	case 3322368510:
		return &PortalInfo{}
	case 3323553519:
		return &RequiredMessageHeader{}
	case 3326311639:
		return &OnBerserkAppliedCallback{}
	case 3326716277:
		return &TriggerEventPOISkip{}
	case 3328092972:
		return &GlobalMarkerActor{}
	case 3328579492:
		return &ConversationDefinition{}
	case 3328833529:
		return &UIProgressBarStyle{}
	case 3330224177:
		return &PayloadOnHitMessage{}
	case 3332118356:
		return &Type_c69c1754{}
	case 3332566052:
		return &Rect2D{}
	case 3334207401:
		return &ScriptedAchievementEvent{}
	case 3335434764:
		return &NPCServiceData{}
	case 3335832649:
		return &ClassInfoPlayStyle{}
	case 3339108615:
		return &DT_SNO_NAME{}
	case 3342454473:
		return &UICutsceneStyle{}
	case 3343271695:
		return &ActorJitterJoint{}
	case 3343492614:
		return &StackPortionMessage{}
	case 3346038647:
		return &GameTestingCraftItem{}
	case 3346910512:
		return &ACDInventoryPositionMessage{}
	case 3351197648:
		return &CrafterDefinition{}
	case 3352174724:
		return &RenderParams{}
	case 3352290229:
		return &BoneStructure{}
	case 3352680818:
		return &SeasonDefinition{}
	case 3352785496:
		return &PlayerFlagSubcondition{}
	case 3356365191:
		return &TransmogSlotData{}
	case 3357404523:
		return &UIButtonStyle{}
	case 3363235252:
		return &TriggerEventAttachCamera{}
	case 3365671474:
		return &TriggerEventOutroAllObjects{}
	case 3368440460:
		return &EffectGroupPositionZKeyData{}
	case 3369569511:
		return &Type_c8d78ce7{}
	case 3372040510:
		return &MonsterTagOverrideData{}
	case 3374369047:
		return &StoreProductDefinition{}
	case 3378075250:
		return &AchievementDefinition{}
	case 3381331198:
		return &UISkillTreeStyle{}
	case 3381982601:
		return &UpdateConvAutoAdvanceMessage{}
	case 3382837424:
		return &ParticleSimKeyFrameColor{}
	case 3384912071:
		return &Sphere{}
	case 3387295447:
		return &QuestReward{}
	case 3391081376:
		return &AdvancedBloomSettings{}
	case 3394879799:
		return &RenderPass{}
	case 3398293218:
		return &GizmoTemplate{}
	case 3398933424:
		return &SpawnLocType_Table{}
	case 3399256911:
		return &OnPhaseEnteredPowerCallback{}
	case 3401368825:
		return &ParticleSimKeyFrameScale{}
	case 3402153949:
		return &ActorLookOverrideChangedMessage{}
	case 3403053865:
		return &AIStateDebugTestSwitchMessage{}
	case 3405923948:
		return &DungeonList{}
	case 3406869682:
		return &PlayerIsShapeshiftedSubcondition{}
	case 3409009058:
		return &GlobalAVData{}
	case 3409962653:
		return &AlphaBlendFactors{}
	case 3410126194:
		return &PlayerHasEarnedAchievementSubcondition{}
	case 3412473811:
		return &GameTestingInteractNPC{}
	case 3413477057:
		return &NetAttributeKeyValue{}
	case 3414193985:
		return &PhaseJumpScriptTriggeredEvent{}
	case 3414881765:
		return &ZoneProgressEarnedMessage{}
	case 3417499265:
		return &LightDefinition{}
	case 3421175403:
		return &CheatCampaignStateMessage{}
	case 3422409450:
		return &InterpolationPath_float{}
	case 3422446376:
		return &PowerConditionHasDamageShield{}
	case 3423838001:
		return &SpeedTree8BranchWindLevel{}
	case 3423973094:
		return &OnProjectileImpactPowerCallback{}
	case 3426042948:
		return &InterpolationPath_int32{}
	case 3426612283:
		return &PlayerFootstepTableEntry{}
	case 3427954348:
		return &GemTypeSubcondition{}
	case 3430954138:
		return &SkillRankChangedMessage{}
	case 3431030737:
		return &PortalSpecifierMessage{}
	case 3431747696:
		return &ScriptedAchievementEvent_Table{}
	case 3433075868:
		return &CriteriaDefinition{}
	case 3434678791:
		return &NPCComponentSetPreloadHelper{}
	case 3436800625:
		return &ZoneMapSecretTexture{}
	case 3438967867:
		return &ConversationScopeNode{}
	case 3440513314:
		return &LightInfluenceSettings{}
	case 3442930196:
		return &UITextStyleOptionalFieldMapDefaults{}
	case 3443761618:
		return &SoundDefinition{}
	case 3445310279:
		return &MarkerInstanceGroupsAO{}
	case 3446996197:
		return &UILoadscreenTipData{}
	case 3447305554:
		return &GameTestingPurchaseSkill{}
	case 3453107854:
		return &ScriptEventParamSubzone{}
	case 3457286220:
		return &PhysicsDefinition{}
	case 3457307456:
		return &CharacterPreset{}
	case 3457543411:
		return &AffixMessage{}
	case 3460647206:
		return &GlobalWaypointData{}
	case 3460728073:
		return &TriggerEventOutroEffectGroup{}
	case 3464528123:
		return &MarkerActorGizmoData{}
	case 3464679862:
		return &TriggerEventSetIGCMusic{}
	case 3468767588:
		return &ParticleSimKeyFrameNonUniformScale{}
	case 3469121019:
		return &ParticleKeyFrames{}
	case 3469228022:
		return &Type_cec837f6{}
	case 3470756225:
		return &PVPGameSubcondition{}
	case 3471665578:
		return &DungeonSpawningPoolEntry_Table{}
	case 3477503045:
		return &AttributeSubcondition{}
	case 3480546724:
		return &NpcLookTagEntry{}
	case 3481819086:
		return &ScriptEventParamActorGroup{}
	case 3484213849:
		return &SpawnCountOffset{}
	case 3485436892:
		return &PhaseJumpImmediate{}
	case 3485974543:
		return &BlessingLevel{}
	case 3489737491:
		return &TriggerEventCameraKeyFrame{}
	case 3493213809:
		return &DT_TAGMAP[T]{}
	case 3493835382:
		return &TriggerEventObjectTurnToOriginalFacing{}
	case 3494179431:
		return &AnyLogicSubcondition{}
	case 3494624766:
		return &ShaderMapDefinition{}
	case 3495291529:
		return &AspectDefinition{}
	case 3496006087:
		return &DemonScrollReward{}
	case 3496443013:
		return &SavedWorldCameraState{}
	case 3500735359:
		return &GameTestingInvitePlayersToPartyMessage{}
	case 3503113420:
		return &TriggerEventPlayMovie{}
	case 3503394193:
		return &HeroStatusDataMessage{}
	case 3507066932:
		return &EnchantAffixMessage{}
	case 3507772913:
		return &TriggerEventChangeLook{}
	case 3509688990:
		return &GlobalStore{}
	case 3512347645:
		return &wWiseSoundBankDefinition{}
	case 3513188739:
		return &ItemSpecifierData{}
	case 3514741062:
		return &SubObjectAppearanceVariant{}
	case 3520446032:
		return &GameSetupMessage{}
	case 3524572566:
		return &DungeonStatesEntry{}
	case 3525105315:
		return &ReputationLevel{}
	case 3529217166:
		return &PhaseJumpNotMoving{}
	case 3530669903:
		return &SimpleMessage{}
	case 3531049129:
		return &ClanBankWithdrawMessage{}
	case 3531482778:
		return &GlobalNightmareDungeonData{}
	case 3531501022:
		return &StoryboardTrack{}
	case 3533883397:
		return &AITargetDebugSetState{}
	case 3533966913:
		return &OnAssistTriggeredBuffCallback{}
	case 3539111973:
		return &SchedulerGlobalUniqueCategory{}
	case 3540363826:
		return &ActorCustomizationHelper{}
	case 3542510007:
		return &RequestBuffCancelMessage{}
	case 3543556157:
		return &CountdownStartedMessage{}
	case 3544827702:
		return &OnKillTriggeredBuffCallback{}
	case 3549813337:
		return &EssencePowerTierEntry{}
	case 3549816935:
		return &ItemDungeonKeyDataMessage{}
	case 3550172668:
		return &ScriptEventParamTimeInterval{}
	case 3552797567:
		return &NumericComparisonSubcondition{}
	case 3553323383:
		return &OnInitializeAttackBuffCallback{}
	case 3555289754:
		return &LevelAreaDefinition{}
	case 3557025358:
		return &FavorSeason_Table{}
	case 3558947995:
		return &StoryboardUIControlSetValueTrack_float{}
	case 3559084288:
		return &Type_d4235100{}
	case 3560147884:
		return &ACDTranslateProjectileMessage{}
	case 3561077891:
		return &PlayerTitleResponseMessage{}
	case 3564584333:
		return &PowerOverride{}
	case 3568752688:
		return &PlayerForceShapeshiftMessage{}
	case 3573101747:
		return &TriggerEventFadeGroup{}
	case 3577501348:
		return &HelpCode{}
	case 3579684057:
		return &PlayConvLineMessage{}
	case 3581869265:
		return &GlobalRoadData{}
	case 3582883756:
		return &NecroArmyUnitTypeData{}
	case 3587671698:
		return &PlayHitJitterMessage{}
	case 3591048543:
		return &OnDoDamageBuffCallback{}
	case 3594392318:
		return &GlobalEmotes{}
	case 3595026749:
		return &UIControlGroupStyle{}
	case 3595429894:
		return &EffectGroupRotationRollKeyData{}
	case 3597846649:
		return &HiddenCacheEntry_Table{}
	case 3600465269:
		return &PVPShrineEventParticipatingMessage{}
	case 3600576406:
		return &ValidComponents{}
	case 3602917158:
		return &TriggerEventFootstepTrail{}
	case 3603241256:
		return &WwiseExternalSourceSoundBank{}
	case 3604059869:
		return &PowerFormulaTableEntry{}
	case 3604657485:
		return &WwiseStreamedSound{}
	case 3608616152:
		return &EffectGroupCameraTrack{}
	case 3610736854:
		return &WorldTierData{}
	case 3611725540:
		return &TriggerEventSetTimeOfDay{}
	case 3614745956:
		return &PhaseJumpDistanceReached{}
	case 3615195411:
		return &ParagonNodeMessage{}
	case 3620255269:
		return &ChatMessage{}
	case 3622735654:
		return &Type_d7ee8f26{}
	case 3622949179:
		return &EmblemDefinition{}
	case 3627847308:
		return &PlayerClassDefinition{}
	case 3631199318:
		return &ForcedPrefetchEntry{}
	case 3631735738:
		return &TextureDefinition{}
	case 3632414755:
		return &GroupTransferReplyMessage{}
	case 3633663932:
		return &PlayerTownPortalReturnDestMessage{}
	case 3635012279:
		return &UIStyleResource{}
	case 3636736964:
		return &InventoryRequestSortMessage{}
	case 3639515093:
		return &HardpointInfo{}
	case 3639617719:
		return &HardpointLink{}
	case 3639680842:
		return &HardpointName{}
	case 3640855436:
		return &GlobalBountyData{}
	case 3643369700:
		return &InventoryImages{}
	case 3643941448:
		return &UIComboBoxStyleOptionalFieldMapDefaults{}
	case 3644249578:
		return &ACDWorldPositionMessage{}
	case 3646617580:
		return &GeoChunkVertexBuffer{}
	case 3647138944:
		return &FontDefinition{}
	case 3648032783:
		return &ACDTranslateDetPathSinMessage{}
	case 3648845914:
		return &RandomItemUnluckyBonuses{}
	case 3650222889:
		return &MovieDefinition{}
	case 3652303092:
		return &DoorGizmoData{}
	case 3656025176:
		return &PowerConditionDamageIsOverpower{}
	case 3658540132:
		return &BuffExclusiveType_Table{}
	case 3659646211:
		return &Type_da21c503{}
	case 3660521401:
		return &SubzoneTypeSubcondition{}
	case 3661168133:
		return &dmClothPlaneDefMirror{}
	case 3666486037:
		return &QuestFollowerSpawnBehavior{}
	case 3672216444:
		return &StringListDefinition{}
	case 3674862323:
		return &QuestTagsEntry{}
	case 3677631049:
		return &PlayerSkillRankSubcondition{}
	case 3678340364:
		return &PowerPhaseBranch{}
	case 3682172275:
		return &EnterWorldPlayer{}
	case 3682266269:
		return &MonsterAwarenessInfo{}
	case 3683293384:
		return &EffectGroupActorVariant{}
	case 3687515379:
		return &Type_dbcb04f3{}
	case 3688169642:
		return &ActorServerData{}
	case 3692201372:
		return &OnProjectileImpactBuffCallback{}
	case 3693220108:
		return &BoneKeysInfo{}
	case 3696177905:
		return &MapPingMessage{}
	case 3697422160:
		return &HardpointOffset{}
	case 3697515930:
		return &PortToPlayerMessage{}
	case 3699670443:
		return &EffectGroupPositionYKeyData{}
	case 3700819239:
		return &Type_dc960527{}
	case 3701792450:
		return &IntensitySubParam{}
	case 3704120622:
		return &ParagonGlyphAffixAttribute{}
	case 3705522846:
		return &PlayerLoadingScreens{}
	case 3707753598:
		return &TriggerEventObjectMoveToObject{}
	case 3708548105:
		return &TraversalSurfaceOptions{}
	case 3709235023:
		return &SNODataMessage{}
	case 3710538503:
		return &SlopeBone{}
	case 3712531304:
		return &KeyedDungeonTierEntry{}
	case 3716696767:
		return &UIPieChartStyle{}
	case 3718463390:
		return &GameErrorData{}
	case 3722141311:
		return &PVPObeliskGizmoData{}
	case 3730208466:
		return &DesignerWorldFeatureFlags{}
	case 3735052004:
		return &ScrollbarElementImages{}
	case 3735262368:
		return &AudioContextDefinition{}
	case 3736356571:
		return &ScriptEventDescription{}
	case 3741213674:
		return &ItemSalvageLevel{}
	case 3741275878:
		return &GlobalMarkerActorData{}
	case 3742548360:
		return &ConditionWrapper{}
	case 3742728940:
		return &RogueSpecializationGlobalData{}
	case 3743094869:
		return &ReputationIncrementMessage{}
	case 3748836680:
		return &WorldSyncedData{}
	case 3748928721:
		return &Subcondition{}
	case 3750701941:
		return &Type_df8f2b75{}
	case 3757510275:
		return &Type_dff70e83{}
	case 3762407828:
		return &BuffSubcondition{}
	case 3763372188:
		return &AnimContactFrame{}
	case 3763808751:
		return &EmitterDataBase{}
	case 3769072179:
		return &ComplexEffectAddMessage{}
	case 3776831931:
		return &SummonedActorsPreloadHelper{}
	case 3777118895:
		return &QuestRewardLevelOverride{}
	case 3777567568:
		return &Type_e1291b50{}
	case 3782874409:
		return &EffectGroupMaterialValueKeyData{}
	case 3784737903:
		return &PowerConditionBase{}
	case 3785434353:
		return &ActorChildRotationJoint{}
	case 3786148276:
		return &NPCWeaponHardpointOverride{}
	case 3787314167:
		return &MonsterTags{}
	case 3790868530:
		return &dmClothCapsuleOldMirror{}
	case 3795316385:
		return &AttributesChangedBuffCallback{}
	case 3796098960:
		return &Type_e243df90{}
	case 3796435398:
		return &PowerPhaseInitialization{}
	case 3797928927:
		return &WallInstanceData{}
	case 3798222270:
		return &QuestChainDefinition{}
	case 3799735114:
		return &GlobalRoadSegment{}
	case 3799976182:
		return &AnimTreeBlendCase{}
	case 3801316792:
		return &PhaseJumpServerTriggeredEnd{}
	case 3802158917:
		return &SkillTreeNodeConnection{}
	case 3805829137:
		return &SoundPlayHistory{}
	case 3810234018:
		return &TriggerEventEnableRagdoll{}
	case 3814410313:
		return &SkillTreeNodePersonalConnection{}
	case 3817037376:
		return &ActorEffectData{}
	case 3818149954:
		return &FloatingNumberMessage{}
	case 3820930965:
		return &Type_e3bec795{}
	case 3822890031:
		return &BlizzconCVarsMessage{}
	case 3824324374:
		return &PowerBuffDOTDamage{}
	case 3824510090:
		return &ProximityDataBase{}
	case 3825953289:
		return &ItemRequirementDefinition{}
	case 3826475810:
		return &AIStateDebugSetAllEntryStatesMessage{}
	case 3831299673:
		return &ConstraintParameters{}
	case 3833068973:
		return &WorldSyncedDataMessage{}
	case 3833381323:
		return &ScriptEventParamTrackedReward{}
	case 3833869781:
		return &MonsterTagSubcondition{}
	case 3835832585:
		return &DRLGWorldDebugInfoMessage{}
	case 3836204633:
		return &WallDefinition{}
	case 3836325597:
		return &BountyIcons{}
	case 3837898558:
		return &MonsterTags_Table{}
	case 3844612145:
		return &StringTableEntry{}
	case 3845014595:
		return &PlayerQuestHistoryEntry{}
	case 3846829457:
		return &DT_CSTRING[T]{}
	case 3848460434:
		return &SpeedTree8RippleGroup{}
	case 3854564369:
		return &MailSentResponseMessage{}
	case 3856437459:
		return &CustomizationData{}
	case 3856914134:
		return &dmFloat4Mirror{}
	case 3856916112:
		return &BountyZones{}
	case 3859902386:
		return &SurfaceDefinition{}
	case 3860176388:
		return &UIActorTagStyle{}
	case 3861122336:
		return &DynamicGameParameter{}
	case 3862192725:
		return &SpawnerGizmoInstanceData{}
	case 3863771036:
		return &AttributeFormulaEntry{}
	case 3864020909:
		return &DT_FLOAT{}
	case 3864023881:
		return &QuestChestGizmoData{}
	case 3865659177:
		return &CollisionHeightField{}
	case 3866881285:
		return &TexAnimTranslation{}
	case 3867655596:
		return &DT_INT64{}
	case 3870434112:
		return &WallScatterData{}
	case 3872544350:
		return &MarkerFolder{}
	case 3874588324:
		return &PowerFormulaTableEntry_Table{}
	case 3874798551:
		return &DesignerVariable{}
	case 3877855748:
		return &DT_RANGE[T]{}
	case 3878713911:
		return &AttributeFormulaRange{}
	case 3878735867:
		return &DRLGSpawnGroupTypeData{}
	case 3879849394:
		return &dmInputTriangleMirror{}
	case 3882395607:
		return &PowerConditionIsActorBerserk{}
	case 3884811641:
		return &BoneKeyInfo{}
	case 3885149667:
		return &CampaignChain{}
	case 3889109893:
		return &GameTestingSkillSamplingStartMessage{}
	case 3889375613:
		return &OnDismountCallback{}
	case 3890074365:
		return &TriggerEventCameraFollowSpline{}
	case 3890408608:
		return &MaterialTexture{}
	case 3890926379:
		return &StorePreviewCameraPositioning{}
	case 3891466367:
		return &Animation2DDefinition{}
	case 3892462007:
		return &ShaderOverride{}
	case 3894303202:
		return &dmPolytopeDataMirror{}
	case 3895665662:
		return &DRLGEventDebugInfo{}
	case 3896035154:
		return &OnProjectileCreateBuffCallback{}
	case 3897348097:
		return &ParticleSimKeyFrameRotation{}
	case 3897752931:
		return &EffectGroupKey{}
	case 3898049428:
		return &Type_e8578394{}
	case 3898498167:
		return &QuestRewardChoicePickedMessage{}
	case 3900142886:
		return &UIMinimapFoWStyle{}
	case 3900534977:
		return &SpawnLocOverrideData{}
	case 3905611800:
		return &TriggerEventSetWeaponSheathedDuration{}
	case 3907208665:
		return &ConversationTypeSounds{}
	case 3907910327:
		return &MarkerDataBase{}
	case 3908508603:
		return &UITreeFolderStyle{}
	case 3909729180:
		return &EndOfTickMessage{}
	case 3910588210:
		return &CloneBeingDeletedMessage{}
	case 3911232674:
		return &QuitGameMessage{}
	case 3911333260:
		return &PowerConditionDamageDeliveryMechanism{}
	case 3913967859:
		return &EffectGroupActorMovementTrack{}
	case 3914002741:
		return &BannerColor{}
	case 3914528908:
		return &HairColorDefinition{}
	case 3917270559:
		return &Type_e97cce1f{}
	case 3917788984:
		return &PowerConditionHasResource{}
	case 3921845715:
		return &ScriptEventParamPassivePowerContainer{}
	case 3923895581:
		return &ActorShaderMapOverrideChangedMessage{}
	case 3925002404:
		return &ReputationRewardEarnedMessage{}
	case 3925842543:
		return &PhaseJumpStoppedChannelling{}
	case 3928304546:
		return &DefaultTextureInfo{}
	case 3932958987:
		return &TriggerEventObjectFollowSpline{}
	case 3934284334:
		return &MarkerHandle{}
	case 3934769268:
		return &ParametricInfo{}
	case 3934834412:
		return &RestrictedComponent{}
	case 3938200363:
		return &dmSubEdgeMirror{}
	case 3938253109:
		return &DPathSinData{}
	case 3938938339:
		return &QuestSubcondition{}
	case 3941658074:
		return &SalvageResultsMessage{}
	case 3941725086:
		return &ServerLogMessage{}
	case 3945992458:
		return &GenericBlobRequestMessage{}
	case 3947422249:
		return &StoryboardUIControlSetWidthTrack{}
	case 3952011826:
		return &ScriptEventParamMonsterFamilyArchetypeRarity{}
	case 3952663046:
		return &MaterialScalarValuesUsed{}
	case 3955716320:
		return &bcQuat{}
	case 3955895500:
		return &PowerConditionIsFortified{}
	case 3956651678:
		return &ACDPickupFailedMessage{}
	case 3964094914:
		return &DungeonStateSubcondition{}
	case 3965580581:
		return &AnimFacingWindow{}
	case 3967226522:
		return &GlobalDefinition{}
	case 3968129939:
		return &EventSubcondition{}
	case 3969718545:
		return &StoryboardUIControlSetScaleTrack{}
	case 3974107604:
		return &GeoChunk{}
	case 3976143237:
		return &EffectGroupRotationPitchKeyData{}
	case 3976816482:
		return &MarkerBoneTransform{}
	case 3981645687:
		return &GlobalHealerEvents{}
	case 3981727516:
		return &NPCComponentRestrictionEntry{}
	case 3982191897:
		return &OnShapeshiftCallback{}
	case 3982467417:
		return &LookVariantMaterialOverride{}
	case 3983648445:
		return &GlobalPortalData{}
	case 3984646638:
		return &InventoryStackTransferMessage{}
	case 3986156917:
		return &ShakeDefinition{}
	case 3986397825:
		return &MarkerTextLabelData{}
	case 3987096416:
		return &Type_eda64360{}
	case 3987413862:
		return &BannerTextileTexture{}
	case 3987819995:
		return &HeadstoneGizmoData{}
	case 3988626058:
		return &PrefabData{}
	case 3990454785:
		return &MaterialEnumValue{}
	case 3992025323:
		return &OnNecroCorpseConsumedCallback{}
	case 3993395850:
		return &SlowAmountSettings{}
	case 3993581322:
		return &StoreProductTemplate{}
	case 3997453985:
		return &PreloadInactiveMarkerMessage{}
	case 3998907722:
		return &Type_ee5a7d4a{}
	case 4000554560:
		return &SkillTagStruct{}
	case 4006089948:
		return &TriggerEventRestoreTimeOfDay{}
	case 4010719183:
		return &TempCollisionMesh{}
	case 4012831658:
		return &ExplosionDefinition{}
	case 4014476633:
		return &GameTestingProfilingStarted{}
	case 4014883557:
		return &MarkerLevelAreaVolumeData{}
	case 4019404115:
		return &MalignantGeneralData{}
	case 4022121664:
		return &VectorFieldDefinition{}
	case 4027789355:
		return &UIButtonStyleOptionalFieldMapDefaults{}
	case 4030900426:
		return &EffectGroupPositionXKeyData{}
	case 4031654575:
		return &AttachActorToActorMessage{}
	case 4031705439:
		return &ActorBrainData{}
	case 4037362027:
		return &SavePointPortalGizmoData{}
	case 4037984604:
		return &EffectItem{}
	case 4040942623:
		return &AppearanceMaterial{}
	case 4041606172:
		return &ScriptEventParamPrefabScopedActorGroup{}
	case 4042669885:
		return &Type_f0f63f3d{}
	case 4044315890:
		return &HiddenCacheEntry{}
	case 4047712805:
		return &ScriptEventParamLinkedMarkerInGroup{}
	case 4057854301:
		return &AuthorityTransferredAckMessage{}
	case 4059665222:
		return &GameSyncedDebugDataMessage{}
	case 4060009143:
		return &dmFrameMirror{}
	case 4063447694:
		return &LookAtBone{}
	case 4063504516:
		return &LookAtData{}
	case 4067534784:
		return &NecroArmySpecMessage{}
	case 4068810465:
		return &OnRetreatCallback{}
	case 4068844708:
		return &GlobalCharacterPresets{}
	case 4071223241:
		return &StopConvLineMessage{}
	case 4074791098:
		return &UIListItemStyleOptionalFieldMapDefaults{}
	case 4078287893:
		return &BloodSealUpdateDisabledMessage{}
	case 4079759321:
		return &ActorDeathData{}
	case 4083908541:
		return &PowerConditionParagonNodeIsPurchased{}
	case 4088142735:
		return &TriggerEventPlayConversationLine{}
	case 4088798277:
		return &ACDTranslateDetPathMessage{}
	case 4088842039:
		return &EndConversationMessage{}
	case 4092961056:
		return &UIKeyMappingButtonStyleOptionalFieldMapDefaults{}
	case 4093179991:
		return &MarkerSetDefinition{}
	case 4100996537:
		return &PrefabCustomizedMarker{}
	case 4101156222:
		return &EffectGroupMaterialTrack{}
	case 4101687256:
		return &Type_f47ac7d8{}
	case 4102386549:
		return &PlayerWarpedMessage{}
	case 4103184625:
		return &TryConsoleCommand{}
	case 4104033586:
		return &Type_f49e9532{}
	case 4104641245:
		return &GlobalQuestData{}
	case 4106185116:
		return &BreakableContainerGizmoData{}
	case 4107356838:
		return &TriggerEventOutroObject{}
	case 4111826321:
		return &PRSTransform{}
	case 4113664708:
		return &OnFirstHitPowerCallback{}
	case 4115604446:
		return &HairStyleDefinition{}
	case 4117978883:
		return &GroupRegionEntry{}
	case 4118521851:
		return &OnEquipPowerCallback{}
	case 4119790019:
		return &MaterialVectorValuesUsed{}
	case 4120944920:
		return &ResolvedPortalDestination{}
	case 4121622049:
		return &SubObject{}
	case 4121727419:
		return &Type_f5ac91bb{}
	case 4122208010:
		return &WwiseGameParameter{}
	case 4122576194:
		return &SurveyTypeEntry{}
	case 4123321325:
		return &AppearanceAndMaterialContent{}
	case 4123887595:
		return &Type_f5cd87eb{}
	case 4128871178:
		return &SplineEasingWeight{}
	case 4129646214:
		return &TrackedCheckpointGizmoData{}
	case 4133241699:
		return &MarkerSpawnLocData{}
	case 4134809062:
		return &MsgTriggeredEvent{}
	case 4134908163:
		return &UIProgressBarBase{}
	case 4135518729:
		return &LevelScalingDefinition_Table{}
	case 4135555133:
		return &StoryboardUIControlTrack{}
	case 4136813248:
		return &PowerConditionHasSkillRequirement{}
	case 4137156027:
		return &AccountProfilePrivacyFlagMessage{}
	case 4138174023:
		return &SetBonusTier{}
	case 4138637758:
		return &EffectGroupRotationYawKeyData{}
	case 4138865712:
		return &PowerBuffCrowdControl{}
	case 4143117588:
		return &WeaponExpertiseRankReward{}
	case 4145151151:
		return &ScriptEventParamCrafter{}
	case 4148177091:
		return &NPCComponentInstanceData{}
	case 4148712533:
		return &NonPremiumGameSubcondition{}
	case 4155240392:
		return &StoryboardUIControlSetTintTrack{}
	case 4156757805:
		return &PreloadCompleteACDMessage{}
	case 4158233291:
		return &BossDoorGizmoData{}
	case 4159814500:
		return &MountSetMessage{}
	case 4160730271:
		return &PowerConditionIsMonsterFamilyArchetype{}
	case 4164648442:
		return &GlobalHealthPotionData{}
	case 4166874378:
		return &TriggerEventHideWarpDestinationUI{}
	case 4167247368:
		return &CompInfluence{}
	case 4171238087:
		return &TriggerEventOutroServicesDisable{}
	case 4171504262:
		return &ACDTranslateSnappedMessage{}
	case 4173985261:
		return &TriggerEventRangedDuration{}
	case 4176299945:
		return &GlobalUIData{}
	case 4180576668:
		return &CompVertInfluences{}
	case 4180938800:
		return &DebugActorTooltipMessage{}
	case 4188868250:
		return &AnimSetDefinition{}
	case 4198139340:
		return &RevealWorldMessage{}
	case 4199705024:
		return &EffectGroupStandardTrack{}
	case 4201850638:
		return &UIDrawHookStyle{}
	case 4203656352:
		return &ParticleSimKeyFrameDistortion{}
	case 4204258745:
		return &Type_fa97e5b9{}
	case 4206682020:
		return &ACDCollFlagsMessage{}
	case 4206722984:
		return &PopGroupHandle{}
	case 4206949144:
		return &ConnectorProperties{}
	case 4208099680:
		return &MainHandItemLabelSubcondition{}
	case 4211607403:
		return &RequestPvPInfo{}
	case 4211930836:
		return &TriggerGizmoData{}
	case 4212868281:
		return &UIProgressBarStyleOptionalFieldMapDefaults{}
	case 4213128525:
		return &TransmogSlot{}
	case 4214119801:
		return &LogoutTickTimeMessage{}
	case 4215210960:
		return &ImageFileID{}
	case 4219334015:
		return &EffectGroupScaleZKeyData{}
	case 4219842648:
		return &MountSelectMessage{}
	case 4221588828:
		return &dmPlaneMirror{}
	case 4223096186:
		return &WwiseMusicPlaylistItemKey{}
	case 4225124683:
		return &Type_fbd6494b{}
	case 4225700928:
		return &LockedRotationBoneData{}
	case 4226459381:
		return &EmitterSubObjectData{}
	case 4226610788:
		return &StoryboardUIControlSetSizeTrack{}
	case 4227218246:
		return &GlobalMarkerActorHiddenCacheData{}
	case 4228472600:
		return &TranslationKey{}
	case 4229906289:
		return &IconScale{}
	case 4232128366:
		return &IconAnchorPoint{}
	case 4234742813:
		return &DungeonStatesEntry_Table{}
	case 4236426675:
		return &MailReadResponseMessage{}
	case 4239082984:
		return &NecroArmySpecUpgradeMessage{}
	case 4239495055:
		return &ScriptEventParamMarkerHandleHasLinkedMarkerInGroup{}
	case 4243792680:
		return &ExternalPlatform{}
	case 4244287280:
		return &SkillKitDefinition{}
	case 4245213777:
		return &MarkingColorDefinition{}
	case 4246870993:
		return &BountyTierIcons{}
	case 4248156668:
		return &ItemPVPEarDataMessage{}
	case 4248268532:
		return &MarkerHeightFieldSection{}
	case 4249306872:
		return &VertexCountSettings{}
	case 4252885141:
		return &PlayerPotionDosesSubcondition{}
	case 4253567699:
		return &dmConstraintClusterMirror{}
	case 4257156132:
		return &PrefetchMarkerSetMessage{}
	case 4260534408:
		return &SurfaceGridPrimitive{}
	case 4263001440:
		return &AdvancedBloomSettingsOptionalFieldMapDefaults{}
	case 4263299288:
		return &DynamicAudioState{}
	case 4263594309:
		return &Type_fe214945{}
	case 4263957835:
		return &OnPhaseExitedPowerCallback{}
	case 4265117700:
		return &LabelRuleSet{}
	case 4265474781:
		return &AIStateDebugSetLoopMessage{}
	case 4267045533:
		return &SetTetherInfoForPlayerMessage{}
	case 4271208238:
		return &TrackPieces{}
	case 4272741198:
		return &SkillExtraAndArsenalEntry{}
	case 4273329489:
		return &TriggerEventShowWarpDestinationUI{}
	case 4282423481:
		return &PaintedSceneGrid{}
	case 4286083682:
		return &DeathTemplate{}
	case 4286658627:
		return &CriteriaStartEvent{}
	case 4287040182:
		return &SubzoneModifierTagsEntry{}
	case 4294183896:
		return &PowerConditionIsPlayerActiveSkill{}
	default:
		return nil
	}
}

type OBB struct {
	Transform PRTransform
	WvExt     DT_VECTOR3D
}

func (t *OBB) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Transform, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.WvExt, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+40, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *OBB) Walk(cb WalkCallback, d ...any) {
	cb.Do("Transform", &t.Transform, d...)
	cb.Do("WvExt", &t.WvExt, d...)
}

type GBIDBlocklistDataChanged struct {
	THeader            RequiredMessageHeader
	TBlockedGbids      DT_FIXEDARRAY[*GBHandle]
	TBlockedGbidsFlags DT_FIXEDARRAY[*DT_UINT]
}

func (t *GBIDBlocklistDataChanged) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TBlockedGbids, r, &Options{
		ArrayLength: 64,
		Flags:       8,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+532, &t.TBlockedGbidsFlags, r, &Options{
		ArrayLength: 64,
		Flags:       8,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+792, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *GBIDBlocklistDataChanged) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("TBlockedGbids", &t.TBlockedGbids, d...)
	cb.Do("TBlockedGbidsFlags", &t.TBlockedGbidsFlags, d...)
}

type AABB struct {
	Wp    DT_VECTOR3D
	WvExt DT_VECTOR3D
}

func (t *AABB) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Wp, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.WvExt, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *AABB) Walk(cb WalkCallback, d ...any) {
	cb.Do("Wp", &t.Wp, d...)
	cb.Do("WvExt", &t.WvExt, d...)
}

type Stat struct{}

func (t *Stat) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if _, err := r.Seek(p+1, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Stat) Walk(cb WalkCallback, d ...any) {}

type PowerLimitedActorType struct {
	THeader         GBIDHeader
	DwMaxActorCount DT_UINT
}

func (t *PowerLimitedActorType) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+260, &t.DwMaxActorCount, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+264, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PowerLimitedActorType) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("DwMaxActorCount", &t.DwMaxActorCount, d...)
}

type SoundTableDefinition struct {
	EType            DT_ENUM
	TEntries         DT_VARIABLEARRAY[*SoundTableEntry]
	SnoFallbackTable DT_SNO
	TDefaultEntry    SoundTableEntry
	PtPostprocessed  DT_INT64
}

func (t *SoundTableDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.EType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TEntries, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.SnoFallbackTable, r, &Options{
		Flags: 1,
		Group: 79,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.TDefaultEntry, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.PtPostprocessed, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if _, err := r.Seek(p+72, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *SoundTableDefinition) Walk(cb WalkCallback, d ...any) {
	cb.Do("EType", &t.EType, d...)
	cb.Do("TEntries", &t.TEntries, d...)
	cb.Do("SnoFallbackTable", &t.SnoFallbackTable, d...)
	cb.Do("TDefaultEntry", &t.TDefaultEntry, d...)
	cb.Do("PtPostprocessed", &t.PtPostprocessed, d...)
}

type SavedCameraState struct {
	Transform            PRTransform
	WvCameraOffsetVector DT_VECTOR3D
	WvLookAtOffsetVector DT_VECTOR3D
	WvLastPOI            DT_VECTOR3D
}

func (t *SavedCameraState) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Transform, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.WvCameraOffsetVector, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.WvLookAtOffsetVector, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.WvLastPOI, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+64, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *SavedCameraState) Walk(cb WalkCallback, d ...any) {
	cb.Do("Transform", &t.Transform, d...)
	cb.Do("WvCameraOffsetVector", &t.WvCameraOffsetVector, d...)
	cb.Do("WvLookAtOffsetVector", &t.WvLookAtOffsetVector, d...)
	cb.Do("WvLastPOI", &t.WvLastPOI, d...)
}

type ShaderInputLayout struct {
	EVBFormat DT_ENUM
}

func (t *ShaderInputLayout) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.EVBFormat, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+4, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ShaderInputLayout) Walk(cb WalkCallback, d ...any) {
	cb.Do("EVBFormat", &t.EVBFormat, d...)
}

type PowerConditionIsVulnerable struct {
	// Inherits PowerConditionBase
	// Inherits PolymorphicBase
	DwType   DT_UINT
	BInverse DT_INT
	DwPad    DT_UINT
	ESubject DT_ENUM
}

func (t *PowerConditionIsVulnerable) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BInverse, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ESubject, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PowerConditionIsVulnerable) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("BInverse", &t.BInverse, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("ESubject", &t.ESubject, d...)
}

type PlayerParagonPointMessage struct {
	THeader               RequiredMessageHeader
	DwPlayerGameAccountId DT_UINT
	NNewPoints            DT_INT
}

func (t *PlayerParagonPointMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.DwPlayerGameAccountId, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.NNewPoints, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PlayerParagonPointMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("DwPlayerGameAccountId", &t.DwPlayerGameAccountId, d...)
	cb.Do("NNewPoints", &t.NNewPoints, d...)
}

type AttributesSetValuesMessage struct {
	THeader   RequiredMessageHeader
	Ann       DT_ACD_NETWORK_NAME
	AtKeyVals DT_FIXEDARRAY[*NetAttributeKeyValue]
}

func (t *AttributesSetValuesMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Ann, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.AtKeyVals, r, &Options{
		ArrayLength: 15,
		Flags:       8,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+268, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *AttributesSetValuesMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("Ann", &t.Ann, d...)
	cb.Do("AtKeyVals", &t.AtKeyVals, d...)
}

type NpcPortrayalType struct {
	SzName     DT_CSTRING[*DT_BYTE]
	SzToolTip  DT_CSTRING[*DT_BYTE]
	ArAnimSets DT_VARIABLEARRAY[*DT_SNO]
}

func (t *NpcPortrayalType) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SzName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SzToolTip, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.ArAnimSets, r, &Options{
		Flags: 1,
		Group: 8,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *NpcPortrayalType) Walk(cb WalkCallback, d ...any) {
	cb.Do("SzName", &t.SzName, d...)
	cb.Do("SzToolTip", &t.SzToolTip, d...)
	cb.Do("ArAnimSets", &t.ArAnimSets, d...)
}

type TexFrame struct {
	HImageHandle DT_UINT
	FlU0         DT_FLOAT
	FlV0         DT_FLOAT
	FlU1         DT_FLOAT
	FlV1         DT_FLOAT
	FlTrimU0     DT_FLOAT
	FlTrimV0     DT_FLOAT
	FlTrimU1     DT_FLOAT
	FlTrimV1     DT_FLOAT
}

func (t *TexFrame) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.HImageHandle, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.FlU0, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.FlV0, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.FlU1, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.FlV1, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.FlTrimU0, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.FlTrimV0, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.FlTrimU1, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.FlTrimV1, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+36, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TexFrame) Walk(cb WalkCallback, d ...any) {
	cb.Do("HImageHandle", &t.HImageHandle, d...)
	cb.Do("FlU0", &t.FlU0, d...)
	cb.Do("FlV0", &t.FlV0, d...)
	cb.Do("FlU1", &t.FlU1, d...)
	cb.Do("FlV1", &t.FlV1, d...)
	cb.Do("FlTrimU0", &t.FlTrimU0, d...)
	cb.Do("FlTrimV0", &t.FlTrimV0, d...)
	cb.Do("FlTrimU1", &t.FlTrimU1, d...)
	cb.Do("FlTrimV1", &t.FlTrimV1, d...)
}

type MarkerBakedAISplineData struct {
	// Inherits MarkerBakedSplineData
	// Inherits MarkerSplineData
	// Inherits MarkerDataBase
	// Inherits PolymorphicBase
	DwType             DT_UINT
	EInterpolationMode DT_ENUM
	Unk_a3f1699        DT_FLOAT
	ArBakedSplineNodes DT_VARIABLEARRAY[*MarkerBakedSplineNode]
	FlTotalLength      DT_FLOAT
	EType              DT_ENUM
	ERoadType          DT_ENUM
	DwPad              DT_UINT
}

func (t *MarkerBakedAISplineData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.EInterpolationMode, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.Unk_a3f1699, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ArBakedSplineNodes, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.FlTotalLength, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.EType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.ERoadType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+56, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *MarkerBakedAISplineData) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("EInterpolationMode", &t.EInterpolationMode, d...)
	cb.Do("Unk_a3f1699", &t.Unk_a3f1699, d...)
	cb.Do("ArBakedSplineNodes", &t.ArBakedSplineNodes, d...)
	cb.Do("FlTotalLength", &t.FlTotalLength, d...)
	cb.Do("EType", &t.EType, d...)
	cb.Do("ERoadType", &t.ERoadType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
}

type WwiseSwitchValue struct {
	TGroup WwiseName
	TValue WwiseName
}

func (t *WwiseSwitchValue) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.TGroup, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.TValue, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *WwiseSwitchValue) Walk(cb WalkCallback, d ...any) {
	cb.Do("TGroup", &t.TGroup, d...)
	cb.Do("TValue", &t.TValue, d...)
}

type AssignSkillMessage struct {
	THeader               RequiredMessageHeader
	SnoPower              DT_SNO
	NSlot                 DT_INT
	NEnchantSlot          DT_INT
	BIsEnchant            DT_INT
	BIsAutoAssign         DT_INT
	DwPlayerGameAccountId DT_UINT
}

func (t *AssignSkillMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoPower, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.NSlot, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.NEnchantSlot, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.BIsEnchant, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.BIsAutoAssign, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.DwPlayerGameAccountId, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+40, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *AssignSkillMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("SnoPower", &t.SnoPower, d...)
	cb.Do("NSlot", &t.NSlot, d...)
	cb.Do("NEnchantSlot", &t.NEnchantSlot, d...)
	cb.Do("BIsEnchant", &t.BIsEnchant, d...)
	cb.Do("BIsAutoAssign", &t.BIsAutoAssign, d...)
	cb.Do("DwPlayerGameAccountId", &t.DwPlayerGameAccountId, d...)
}

type PetType struct {
	THeader             GBIDHeader
	EPetTypePortrait    DT_ENUM
	Unk_17d5315         DT_INT
	Unk_a9f95f3         DT_INT
	BHasPlayerIndicator DT_INT
}

func (t *PetType) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+260, &t.EPetTypePortrait, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+264, &t.Unk_17d5315, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+268, &t.Unk_a9f95f3, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+272, &t.BHasPlayerIndicator, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+276, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PetType) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("EPetTypePortrait", &t.EPetTypePortrait, d...)
	cb.Do("Unk_17d5315", &t.Unk_17d5315, d...)
	cb.Do("Unk_a9f95f3", &t.Unk_a9f95f3, d...)
	cb.Do("BHasPlayerIndicator", &t.BHasPlayerIndicator, d...)
}

type OutroWaypointEffectMessage struct {
	THeader      RequiredMessageHeader
	SnoLevelArea DT_SNO
}

func (t *OutroWaypointEffectMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoLevelArea, r, &Options{
		Flags: 1,
		Group: 22,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+20, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *OutroWaypointEffectMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("SnoLevelArea", &t.SnoLevelArea, d...)
}

type LimboWarpPrefetchBeginMessage struct {
	THeader      RequiredMessageHeader
	SnoWorld     DT_SNO
	WpLocation   DT_VECTOR3D
	DwPortalType DT_UINT
	Unk_164ef1e  DT_INT
}

func (t *LimboWarpPrefetchBeginMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoWorld, r, &Options{
		Flags: 1,
		Group: 48,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.WpLocation, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.DwPortalType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.Unk_164ef1e, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+40, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *LimboWarpPrefetchBeginMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("SnoWorld", &t.SnoWorld, d...)
	cb.Do("WpLocation", &t.WpLocation, d...)
	cb.Do("DwPortalType", &t.DwPortalType, d...)
	cb.Do("Unk_164ef1e", &t.Unk_164ef1e, d...)
}

type MarkerWeatherVolumeData struct {
	// Inherits MarkerDataBase
	// Inherits PolymorphicBase
	DwType                              DT_UINT
	DwPad                               DT_UINT
	PtProxData                          DT_POLYMORPHIC_VARIABLEARRAY[*ProximityDataBase]
	SnoAudioContext                     DT_SNO
	SnoEffectGroupAttachToOverrideSound DT_SNO
	FDisabled                           DT_INT
	Unk_80c961e                         DT_INT
}

func (t *MarkerWeatherVolumeData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.PtProxData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.SnoAudioContext, r, &Options{
		Flags: 1,
		Group: 93,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.SnoEffectGroupAttachToOverrideSound, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.FDisabled, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.Unk_80c961e, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+56, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *MarkerWeatherVolumeData) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("PtProxData", &t.PtProxData, d...)
	cb.Do("SnoAudioContext", &t.SnoAudioContext, d...)
	cb.Do("SnoEffectGroupAttachToOverrideSound", &t.SnoEffectGroupAttachToOverrideSound, d...)
	cb.Do("FDisabled", &t.FDisabled, d...)
	cb.Do("Unk_80c961e", &t.Unk_80c961e, d...)
}

type TiledWindowPieces struct {
	// Inherits WindowPiecesBase
	// Inherits PolymorphicBase
	DwType           DT_UINT
	DwPad            DT_UINT
	FlImageScale     DT_FLOAT
	NPadding         DT_UINT
	HCornerFrames    DT_FIXEDARRAY[*DT_UINT]
	HBackground      DT_UINT
	HLeftBorder      DT_UINT
	HTopBorder       DT_UINT
	HRightBorder     DT_UINT
	HBottomBorder    DT_UINT
	FInsetBackground DT_INT
	FTileBackground  DT_INT
	Unk_d661bef      DT_INT
	Unk_1ec53df      DT_INT
}

func (t *TiledWindowPieces) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.FlImageScale, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.NPadding, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.HCornerFrames, r, &Options{
		ArrayLength: 4,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.HBackground, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.HLeftBorder, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.HTopBorder, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.HRightBorder, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.HBottomBorder, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+60, &t.FInsetBackground, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.FTileBackground, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.Unk_d661bef, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_1ec53df, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+80, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TiledWindowPieces) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("FlImageScale", &t.FlImageScale, d...)
	cb.Do("NPadding", &t.NPadding, d...)
	cb.Do("HCornerFrames", &t.HCornerFrames, d...)
	cb.Do("HBackground", &t.HBackground, d...)
	cb.Do("HLeftBorder", &t.HLeftBorder, d...)
	cb.Do("HTopBorder", &t.HTopBorder, d...)
	cb.Do("HRightBorder", &t.HRightBorder, d...)
	cb.Do("HBottomBorder", &t.HBottomBorder, d...)
	cb.Do("FInsetBackground", &t.FInsetBackground, d...)
	cb.Do("FTileBackground", &t.FTileBackground, d...)
	cb.Do("Unk_d661bef", &t.Unk_d661bef, d...)
	cb.Do("Unk_1ec53df", &t.Unk_1ec53df, d...)
}

type TiledStyleDefinition struct {
	PtWindowPiece DT_POLYMORPHIC_VARIABLEARRAY[*WindowPiecesBase]
	Unk_b66d648   DT_TAGMAP[*DT_ENUM]
}

func (t *TiledStyleDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.PtWindowPiece, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.Unk_b66d648, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TiledStyleDefinition) Walk(cb WalkCallback, d ...any) {
	cb.Do("PtWindowPiece", &t.PtWindowPiece, d...)
	cb.Do("Unk_b66d648", &t.Unk_b66d648, d...)
}

type Type_30b72fa struct {
	// Inherits BuffCallbackBase
	// Inherits PolymorphicBase
	DwType                DT_UINT
	DwPad                 DT_UINT
	SnoTriggerEffectGroup DT_SNO
	ArConditions          DT_POLYMORPHIC_VARIABLEARRAY[*DT_INT64]
}

func (t *Type_30b72fa) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoTriggerEffectGroup, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ArConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_30b72fa) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("SnoTriggerEffectGroup", &t.SnoTriggerEffectGroup, d...)
	cb.Do("ArConditions", &t.ArConditions, d...)
}

type StoryboardUIControlSetHeightTrack struct {
	// Inherits StoryboardUIControlSetValueTrack_float
	DwType          DT_UINT
	TNodeCollection StoryboardValueNodeCollection_float
	Unk_77ed19a     DT_ENUM
	DwPad           DT_UINT
}

func (t *StoryboardUIControlSetHeightTrack) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TNodeCollection, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.Unk_77ed19a, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+56, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *StoryboardUIControlSetHeightTrack) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("TNodeCollection", &t.TNodeCollection, d...)
	cb.Do("Unk_77ed19a", &t.Unk_77ed19a, d...)
	cb.Do("DwPad", &t.DwPad, d...)
}

type StoryboardValueNode_float struct {
	DwType  DT_UINT
	FlTime  DT_FLOAT
	DwPad   DT_UINT
	TValue  DT_FLOAT
	EEasing DT_ENUM
}

func (t *StoryboardValueNode_float) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.FlTime, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.TValue, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.EEasing, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *StoryboardValueNode_float) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("FlTime", &t.FlTime, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("TValue", &t.TValue, d...)
	cb.Do("EEasing", &t.EEasing, d...)
}

type IKGeneralBoneChain struct {
	// Inherits IKBoneChainBase
	// Inherits PolymorphicBase
	DwType         DT_UINT
	DwPad          DT_UINT
	EIKLimb        DT_ENUM
	EIKTarget      DT_ENUM
	PtIKBones      DT_VARIABLEARRAY[*IKBone]
	EIKTargetActor DT_ENUM
	TIKHardpoint   HardpointLink
}

func (t *IKGeneralBoneChain) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.EIKLimb, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.EIKTarget, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.PtIKBones, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.EIKTargetActor, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.TIKHardpoint, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+56, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *IKGeneralBoneChain) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("EIKLimb", &t.EIKLimb, d...)
	cb.Do("EIKTarget", &t.EIKTarget, d...)
	cb.Do("PtIKBones", &t.PtIKBones, d...)
	cb.Do("EIKTargetActor", &t.EIKTargetActor, d...)
	cb.Do("TIKHardpoint", &t.TIKHardpoint, d...)
}

type CurrentWorldSubcondition struct {
	// Inherits Subcondition
	// Inherits PolymorphicBase
	DwType           DT_UINT
	BNegate          DT_INT
	DwPad            DT_UINT
	SnoWorld         DT_SNO
	EActorToEvaluate DT_ENUM
}

func (t *CurrentWorldSubcondition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BNegate, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SnoWorld, r, &Options{
		Flags: 513,
		Group: 48,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.EActorToEvaluate, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *CurrentWorldSubcondition) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("BNegate", &t.BNegate, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("SnoWorld", &t.SnoWorld, d...)
	cb.Do("EActorToEvaluate", &t.EActorToEvaluate, d...)
}

type Type_447d2ee struct {
	// Inherits BuffCallbackBase
	// Inherits PolymorphicBase
	DwType                DT_UINT
	DwPad                 DT_UINT
	SnoTriggerEffectGroup DT_SNO
	ArConditions          DT_POLYMORPHIC_VARIABLEARRAY[*DT_INT64]
}

func (t *Type_447d2ee) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoTriggerEffectGroup, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ArConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_447d2ee) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("SnoTriggerEffectGroup", &t.SnoTriggerEffectGroup, d...)
	cb.Do("ArConditions", &t.ArConditions, d...)
}

type IconAnchorPointOptionalFieldMapDefaults struct {
	FlX DT_FLOAT
	FlY DT_FLOAT
}

func (t *IconAnchorPointOptionalFieldMapDefaults) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.FlX, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.FlY, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *IconAnchorPointOptionalFieldMapDefaults) Walk(cb WalkCallback, d ...any) {
	cb.Do("FlX", &t.FlX, d...)
	cb.Do("FlY", &t.FlY, d...)
}

type ZoneMapParams struct {
	FlZoneArtScale       DT_FLOAT
	VecZoneArtCenter     DT_VECTOR2D
	FlZoneBaseScale      DT_FLOAT
	FlZoneZoomScaleMax   DT_FLOAT
	Unk_4e79635          DT_FLOAT
	Unk_341cf9b          DT_FLOAT
	Unk_7ed5974          DT_FLOAT
	Unk_f373e7a          DT_FLOAT
	Unk_77999b9          DT_FLOAT
	ArZoomBreakpoints    DT_VARIABLEARRAY[*DT_FLOAT]
	Unk_42cbe27          DT_INT
	SnoMagMaxBoxMap      DT_SNO
	Unk_3620f37          DT_INT
	Unk_c60b9b0          DT_INT
	SnoFoWMaskOverlay    DT_SNO
	ArFogOfWar           DT_VARIABLEARRAY[*FogOfWarImage]
	ArGridSecretTextures DT_VARIABLEARRAY[*ZoneMapGridSecretTextures]
}

func (t *ZoneMapParams) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.FlZoneArtScale, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.VecZoneArtCenter, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.FlZoneBaseScale, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.FlZoneZoomScaleMax, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.Unk_4e79635, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_341cf9b, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.Unk_7ed5974, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.Unk_f373e7a, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.Unk_77999b9, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.ArZoomBreakpoints, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.Unk_42cbe27, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+60, &t.SnoMagMaxBoxMap, r, &Options{
		Flags: 1,
		Group: 44,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.Unk_3620f37, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.Unk_c60b9b0, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.SnoFoWMaskOverlay, r, &Options{
		Flags: 1,
		Group: 44,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.ArFogOfWar, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.ArGridSecretTextures, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+112, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ZoneMapParams) Walk(cb WalkCallback, d ...any) {
	cb.Do("FlZoneArtScale", &t.FlZoneArtScale, d...)
	cb.Do("VecZoneArtCenter", &t.VecZoneArtCenter, d...)
	cb.Do("FlZoneBaseScale", &t.FlZoneBaseScale, d...)
	cb.Do("FlZoneZoomScaleMax", &t.FlZoneZoomScaleMax, d...)
	cb.Do("Unk_4e79635", &t.Unk_4e79635, d...)
	cb.Do("Unk_341cf9b", &t.Unk_341cf9b, d...)
	cb.Do("Unk_7ed5974", &t.Unk_7ed5974, d...)
	cb.Do("Unk_f373e7a", &t.Unk_f373e7a, d...)
	cb.Do("Unk_77999b9", &t.Unk_77999b9, d...)
	cb.Do("ArZoomBreakpoints", &t.ArZoomBreakpoints, d...)
	cb.Do("Unk_42cbe27", &t.Unk_42cbe27, d...)
	cb.Do("SnoMagMaxBoxMap", &t.SnoMagMaxBoxMap, d...)
	cb.Do("Unk_3620f37", &t.Unk_3620f37, d...)
	cb.Do("Unk_c60b9b0", &t.Unk_c60b9b0, d...)
	cb.Do("SnoFoWMaskOverlay", &t.SnoFoWMaskOverlay, d...)
	cb.Do("ArFogOfWar", &t.ArFogOfWar, d...)
	cb.Do("ArGridSecretTextures", &t.ArGridSecretTextures, d...)
}

type GameTestingSetTimeOfDay struct {
	THeader           RequiredMessageHeader
	FlForcedTimeOfDay DT_FLOAT
}

func (t *GameTestingSetTimeOfDay) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.FlForcedTimeOfDay, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+20, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *GameTestingSetTimeOfDay) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("FlForcedTimeOfDay", &t.FlForcedTimeOfDay, d...)
}

type ProjectileAttachmentOnHitMessage struct {
	THeader                    RequiredMessageHeader
	AnnTarget                  DT_ACD_NETWORK_NAME
	AnnAttacker                DT_ACD_NETWORK_NAME
	VLocalImpactPos            DT_OPTIONAL[*DT_VECTOR3D]
	VProjectileImpactDirection DT_OPTIONAL[*DT_VECTOR3D]
	FlImpactDirection          DT_OPTIONAL[*DT_FLOAT]
	FlImpactPitch              DT_OPTIONAL[*DT_FLOAT]
	SnoEffectGroup             DT_SNO
}

func (t *ProjectileAttachmentOnHitMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.AnnTarget, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.AnnAttacker, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.VLocalImpactPos, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.VProjectileImpactDirection, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.FlImpactDirection, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.FlImpactPitch, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.SnoEffectGroup, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+84, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ProjectileAttachmentOnHitMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("AnnTarget", &t.AnnTarget, d...)
	cb.Do("AnnAttacker", &t.AnnAttacker, d...)
	cb.Do("VLocalImpactPos", &t.VLocalImpactPos, d...)
	cb.Do("VProjectileImpactDirection", &t.VProjectileImpactDirection, d...)
	cb.Do("FlImpactDirection", &t.FlImpactDirection, d...)
	cb.Do("FlImpactPitch", &t.FlImpactPitch, d...)
	cb.Do("SnoEffectGroup", &t.SnoEffectGroup, d...)
}

type dmClothCapsuleDefMirror struct {
	LocalTransform dmTransformMirror
	Scale          DT_VECTOR4D
	Radius1        DT_FLOAT
	Radius2        DT_FLOAT
	Height         DT_FLOAT
	Friction       DT_FLOAT
	BoneIndex      DT_WORD
	Solver         DT_BYTE
	Padding        DT_FIXEDARRAY[*DT_WORD]
}

func (t *dmClothCapsuleDefMirror) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.LocalTransform, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.Scale, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.Radius1, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.Radius2, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.Height, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+60, &t.Friction, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.BoneIndex, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+66, &t.Solver, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.Padding, r, &Options{ArrayLength: 5}); err != nil {
		return err
	}
	if _, err := r.Seek(p+80, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *dmClothCapsuleDefMirror) Walk(cb WalkCallback, d ...any) {
	cb.Do("LocalTransform", &t.LocalTransform, d...)
	cb.Do("Scale", &t.Scale, d...)
	cb.Do("Radius1", &t.Radius1, d...)
	cb.Do("Radius2", &t.Radius2, d...)
	cb.Do("Height", &t.Height, d...)
	cb.Do("Friction", &t.Friction, d...)
	cb.Do("BoneIndex", &t.BoneIndex, d...)
	cb.Do("Solver", &t.Solver, d...)
	cb.Do("Padding", &t.Padding, d...)
}

type GameBalanceTable struct {
	// Inherits PolymorphicBase
	DwType DT_UINT
	DwPad  DT_UINT
}

func (t *GameBalanceTable) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *GameBalanceTable) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
}

type AimTargetMessage struct {
	THeader   RequiredMessageHeader
	Ann       DT_ACD_NETWORK_NAME
	EType     DT_ENUM
	AnnTarget DT_ACD_NETWORK_NAME
	TPlace    SharedServerWorldPlace
}

func (t *AimTargetMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Ann, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.EType, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.AnnTarget, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.TPlace, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+56, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *AimTargetMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("Ann", &t.Ann, d...)
	cb.Do("EType", &t.EType, d...)
	cb.Do("AnnTarget", &t.AnnTarget, d...)
	cb.Do("TPlace", &t.TPlace, d...)
}

type ActorFoleySoundOverride struct {
	TFoleyMaterialTag FoleyMaterialTag
	Unk_f77a839       DT_FIXEDARRAY[*DT_SNO]
}

func (t *ActorFoleySoundOverride) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.TFoleyMaterialTag, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.Unk_f77a839, r, &Options{
		ArrayLength: 4,
		Flags:       1,
		Group:       79,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+20, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ActorFoleySoundOverride) Walk(cb WalkCallback, d ...any) {
	cb.Do("TFoleyMaterialTag", &t.TFoleyMaterialTag, d...)
	cb.Do("Unk_f77a839", &t.Unk_f77a839, d...)
}

type IKHip struct {
	TIKHipBone IKBone
	Unk_155967 DT_FLOAT
}

func (t *IKHip) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.TIKHipBone, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.Unk_155967, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *IKHip) Walk(cb WalkCallback, d ...any) {
	cb.Do("TIKHipBone", &t.TIKHipBone, d...)
	cb.Do("Unk_155967", &t.Unk_155967, d...)
}

type IKLeg struct {
	EIKLimb               DT_ENUM
	PtUpperLegs           DT_VARIABLEARRAY[*IKBone]
	BUseAnimatedOffset    DT_INT
	FlOffsetHeight        DT_FLOAT
	TAlternateBone        IKBone
	FlAlternateBoneHeight DT_FLOAT
}

func (t *IKLeg) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.EIKLimb, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.PtUpperLegs, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.BUseAnimatedOffset, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.FlOffsetHeight, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.TAlternateBone, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.FlAlternateBoneHeight, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+40, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *IKLeg) Walk(cb WalkCallback, d ...any) {
	cb.Do("EIKLimb", &t.EIKLimb, d...)
	cb.Do("PtUpperLegs", &t.PtUpperLegs, d...)
	cb.Do("BUseAnimatedOffset", &t.BUseAnimatedOffset, d...)
	cb.Do("FlOffsetHeight", &t.FlOffsetHeight, d...)
	cb.Do("TAlternateBone", &t.TAlternateBone, d...)
	cb.Do("FlAlternateBoneHeight", &t.FlAlternateBoneHeight, d...)
}

type BlockedDamageVisualsMessage struct {
	THeader                    RequiredMessageHeader
	AnnDefender                DT_ACD_NETWORK_NAME
	AnnAttacker                DT_ACD_NETWORK_NAME
	VLocalImpactPos            DT_OPTIONAL[*DT_VECTOR3D]
	VProjectileImpactDirection DT_OPTIONAL[*DT_VECTOR3D]
	FlImpactDirection          DT_OPTIONAL[*DT_FLOAT]
	FlImpactPitch              DT_OPTIONAL[*DT_FLOAT]
}

func (t *BlockedDamageVisualsMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.AnnDefender, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.AnnAttacker, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.VLocalImpactPos, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.VProjectileImpactDirection, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.FlImpactDirection, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.FlImpactPitch, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+80, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *BlockedDamageVisualsMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("AnnDefender", &t.AnnDefender, d...)
	cb.Do("AnnAttacker", &t.AnnAttacker, d...)
	cb.Do("VLocalImpactPos", &t.VLocalImpactPos, d...)
	cb.Do("VProjectileImpactDirection", &t.VProjectileImpactDirection, d...)
	cb.Do("FlImpactDirection", &t.FlImpactDirection, d...)
	cb.Do("FlImpactPitch", &t.FlImpactPitch, d...)
}

type DRLGForcedWorldParamsDebugInfo struct {
	NSeed                        DT_INT
	ArForcedLabels               DT_FIXEDARRAY[*DT_GBID]
	ArForcedDungeonStates        DT_FIXEDARRAY[*DT_GBID]
	ArPotentialDungeonStates     DT_FIXEDARRAY[*DT_GBID]
	Unk_4ab8ccb                  DT_INT
	BDisableDefaultLabels        DT_INT
	BDisableDefaultDungeonStates DT_INT
}

func (t *DRLGForcedWorldParamsDebugInfo) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.NSeed, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.ArForcedLabels, r, &Options{
		ArrayLength: 32,
		Flags:       9,
		Group:       4,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+136, &t.ArForcedDungeonStates, r, &Options{
		ArrayLength: 32,
		Flags:       9,
		Group:       31,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+268, &t.ArPotentialDungeonStates, r, &Options{
		ArrayLength: 64,
		Flags:       9,
		Group:       31,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+528, &t.Unk_4ab8ccb, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+532, &t.BDisableDefaultLabels, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+536, &t.BDisableDefaultDungeonStates, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+540, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *DRLGForcedWorldParamsDebugInfo) Walk(cb WalkCallback, d ...any) {
	cb.Do("NSeed", &t.NSeed, d...)
	cb.Do("ArForcedLabels", &t.ArForcedLabels, d...)
	cb.Do("ArForcedDungeonStates", &t.ArForcedDungeonStates, d...)
	cb.Do("ArPotentialDungeonStates", &t.ArPotentialDungeonStates, d...)
	cb.Do("Unk_4ab8ccb", &t.Unk_4ab8ccb, d...)
	cb.Do("BDisableDefaultLabels", &t.BDisableDefaultLabels, d...)
	cb.Do("BDisableDefaultDungeonStates", &t.BDisableDefaultDungeonStates, d...)
}

type LocalEventTrackingData struct {
	NOccurrence  DT_INT
	SnoMarker    DT_INT
	NMarkerIndex DT_INT
}

func (t *LocalEventTrackingData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.NOccurrence, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.SnoMarker, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.NMarkerIndex, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+12, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *LocalEventTrackingData) Walk(cb WalkCallback, d ...any) {
	cb.Do("NOccurrence", &t.NOccurrence, d...)
	cb.Do("SnoMarker", &t.SnoMarker, d...)
	cb.Do("NMarkerIndex", &t.NMarkerIndex, d...)
}

type DungeonAffixFamilyEntry struct {
	THeader   GBIDHeader
	BIsUnique DT_INT
}

func (t *DungeonAffixFamilyEntry) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+260, &t.BIsUnique, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+264, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *DungeonAffixFamilyEntry) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("BIsUnique", &t.BIsUnique, d...)
}

type Plane struct {
	WvNormal DT_VECTOR3D
	WdD      DT_FLOAT
}

func (t *Plane) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.WvNormal, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.WdD, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Plane) Walk(cb WalkCallback, d ...any) {
	cb.Do("WvNormal", &t.WvNormal, d...)
	cb.Do("WdD", &t.WdD, d...)
}

type Type_5eb6ade struct {
	THardpointLinkTarget HardpointLink
	DwTargetID           DT_UINT
	FlWeight             DT_FLOAT
}

func (t *Type_5eb6ade) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THardpointLinkTarget, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwTargetID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.FlWeight, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_5eb6ade) Walk(cb WalkCallback, d ...any) {
	cb.Do("THardpointLinkTarget", &t.THardpointLinkTarget, d...)
	cb.Do("DwTargetID", &t.DwTargetID, d...)
	cb.Do("FlWeight", &t.FlWeight, d...)
}

type GeoChunkIndexBuffer struct {
	PdwChunkIndices DT_VARIABLEARRAY[*DT_WORD]
	Ibid            DT_INT
	FOptional       DT_INT
}

func (t *GeoChunkIndexBuffer) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.PdwChunkIndices, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Ibid, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.FOptional, r, &Options{Flags: 16}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *GeoChunkIndexBuffer) Walk(cb WalkCallback, d ...any) {
	cb.Do("PdwChunkIndices", &t.PdwChunkIndices, d...)
	cb.Do("Ibid", &t.Ibid, d...)
	cb.Do("FOptional", &t.FOptional, d...)
}

type PresetBannerData struct {
	SzName DT_UINT
	SzData DT_CSTRING[*DT_BYTE]
}

func (t *PresetBannerData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SzName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.SzData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PresetBannerData) Walk(cb WalkCallback, d ...any) {
	cb.Do("SzName", &t.SzName, d...)
	cb.Do("SzData", &t.SzData, d...)
}

type Ray2D struct {
	WpOrigin    DT_VECTOR2D
	WvDirection DT_VECTOR2D
}

func (t *Ray2D) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.WpOrigin, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.WvDirection, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Ray2D) Walk(cb WalkCallback, d ...any) {
	cb.Do("WpOrigin", &t.WpOrigin, d...)
	cb.Do("WvDirection", &t.WvDirection, d...)
}

type Ray3D struct {
	WpOrigin    DT_VECTOR3D
	WvDirection DT_VECTOR3D
}

func (t *Ray3D) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.WpOrigin, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.WvDirection, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Ray3D) Walk(cb WalkCallback, d ...any) {
	cb.Do("WpOrigin", &t.WpOrigin, d...)
	cb.Do("WvDirection", &t.WvDirection, d...)
}

type Shape struct {
	DwFlags           DT_UINT
	EType             DT_ENUM
	EMaterial         DT_ENUM
	NDegrade          DT_INT
	FlDensityFactor   DT_FLOAT
	FlExplosionFactor DT_FLOAT
	FlVelocityFactor  DT_FLOAT
	THull             ConvexHull
	TBox              OBB
	TSphere           Sphere
	TCylinder         Cylinder
	TCapsule          Capsule
}

func (t *Shape) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.DwFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.EType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.EMaterial, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.NDegrade, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.FlDensityFactor, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.FlExplosionFactor, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.FlVelocityFactor, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.THull, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+160, &t.TBox, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+200, &t.TSphere, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+216, &t.TCylinder, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+244, &t.TCapsule, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+272, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Shape) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwFlags", &t.DwFlags, d...)
	cb.Do("EType", &t.EType, d...)
	cb.Do("EMaterial", &t.EMaterial, d...)
	cb.Do("NDegrade", &t.NDegrade, d...)
	cb.Do("FlDensityFactor", &t.FlDensityFactor, d...)
	cb.Do("FlExplosionFactor", &t.FlExplosionFactor, d...)
	cb.Do("FlVelocityFactor", &t.FlVelocityFactor, d...)
	cb.Do("THull", &t.THull, d...)
	cb.Do("TBox", &t.TBox, d...)
	cb.Do("TSphere", &t.TSphere, d...)
	cb.Do("TCylinder", &t.TCylinder, d...)
	cb.Do("TCapsule", &t.TCapsule, d...)
}

type MarkerCameraData struct {
	// Inherits MarkerDataBase
	// Inherits PolymorphicBase
	DwType       DT_UINT
	DwPad        DT_UINT
	AFOV         DT_FLOAT
	FlFocalPlane DT_FLOAT
	FlFStop      DT_FLOAT
	Unk_101b2fc  DT_FLOAT
	Unk_6749d34  DT_FLOAT
	Unk_839bfef  DT_FLOAT
	FlNearPlane  DT_FLOAT
	FlFarPlane   DT_FLOAT
}

func (t *MarkerCameraData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.AFOV, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.FlFocalPlane, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.FlFStop, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.Unk_101b2fc, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.Unk_6749d34, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.Unk_839bfef, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.FlNearPlane, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.FlFarPlane, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *MarkerCameraData) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("AFOV", &t.AFOV, d...)
	cb.Do("FlFocalPlane", &t.FlFocalPlane, d...)
	cb.Do("FlFStop", &t.FlFStop, d...)
	cb.Do("Unk_101b2fc", &t.Unk_101b2fc, d...)
	cb.Do("Unk_6749d34", &t.Unk_6749d34, d...)
	cb.Do("Unk_839bfef", &t.Unk_839bfef, d...)
	cb.Do("FlNearPlane", &t.FlNearPlane, d...)
	cb.Do("FlFarPlane", &t.FlFarPlane, d...)
}

type ScriptEventParamPlayer struct {
	// Inherits ScriptEventParamBase
	// Inherits PolymorphicBase
	DwType     DT_UINT
	EParamType DT_ENUM
	DwPad      DT_UINT
	BIsPlayer  DT_INT
}

func (t *ScriptEventParamPlayer) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.EParamType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.BIsPlayer, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ScriptEventParamPlayer) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("EParamType", &t.EParamType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("BIsPlayer", &t.BIsPlayer, d...)
}

type StoryboardUIControlSetTopTrack struct {
	// Inherits StoryboardUIControlSetValueTrack_float
	DwType          DT_UINT
	TNodeCollection StoryboardValueNodeCollection_float
	Unk_77ed19a     DT_ENUM
	DwPad           DT_UINT
}

func (t *StoryboardUIControlSetTopTrack) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TNodeCollection, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.Unk_77ed19a, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+56, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *StoryboardUIControlSetTopTrack) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("TNodeCollection", &t.TNodeCollection, d...)
	cb.Do("Unk_77ed19a", &t.Unk_77ed19a, d...)
	cb.Do("DwPad", &t.DwPad, d...)
}

type StoryboardUIControlSetPivotTrack struct {
	// Inherits StoryboardUIControlSetValueTrack_bcVec2
	DwType          DT_UINT
	TNodeCollection StoryboardValueNodeCollection_bcVec2
	Unk_77ed19a     DT_ENUM
	DwPad           DT_UINT
}

func (t *StoryboardUIControlSetPivotTrack) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TNodeCollection, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.Unk_77ed19a, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+56, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *StoryboardUIControlSetPivotTrack) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("TNodeCollection", &t.TNodeCollection, d...)
	cb.Do("Unk_77ed19a", &t.Unk_77ed19a, d...)
	cb.Do("DwPad", &t.DwPad, d...)
}

type BlendSettings struct {
	FlBlendTime DT_FLOAT
	EBlendCurve DT_ENUM
}

func (t *BlendSettings) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.FlBlendTime, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.EBlendCurve, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *BlendSettings) Walk(cb WalkCallback, d ...any) {
	cb.Do("FlBlendTime", &t.FlBlendTime, d...)
	cb.Do("EBlendCurve", &t.EBlendCurve, d...)
}

type ChallengeCategory struct {
	DwID              DT_UINT
	ArCategories      DT_VARIABLEARRAY[*ChallengeCategory]
	ArAchievementSnos DT_VARIABLEARRAY[*DT_SNO]
	UFlags            DT_UINT
}

func (t *ChallengeCategory) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.DwID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.ArCategories, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ArAchievementSnos, r, &Options{
		Flags: 1,
		Group: 99,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.UFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ChallengeCategory) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwID", &t.DwID, d...)
	cb.Do("ArCategories", &t.ArCategories, d...)
	cb.Do("ArAchievementSnos", &t.ArAchievementSnos, d...)
	cb.Do("UFlags", &t.UFlags, d...)
}

type MaterialColorValueDefinition struct {
	// Inherits DefaultMaterialValueDefinition
	// Inherits PolymorphicBase
	DwType DT_UINT
	DwPad  DT_UINT
	VValue DT_VECTOR4D
}

func (t *MaterialColorValueDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.VValue, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *MaterialColorValueDefinition) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("VValue", &t.VValue, d...)
}

type UITextStyle struct {
	// Inherits UIWindowStyle
	// Inherits UIControlStyle
	// Inherits PolymorphicBase
	DwType                      DT_UINT
	DwPad                       DT_UINT
	HParentStyle                UIControlHandle
	Unk_441f783                 DT_INT64
	M_eHasModifiedPowerTagMap   DT_TAGMAP[*DT_ENUM]
	TConsoleInput               UIControlConsoleInput
	Unk_b4f614c                 DT_TAGMAP[*DT_ENUM]
	TFont                       UIControlFont
	PtUIControlTagMapIconLabels DT_TAGMAP[*DT_ENUM]
}

func (t *UITextStyle) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.HParentStyle, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_441f783, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.M_eHasModifiedPowerTagMap, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.TConsoleInput, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.Unk_b4f614c, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.TFont, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.PtUIControlTagMapIconLabels, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+112, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *UITextStyle) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("HParentStyle", &t.HParentStyle, d...)
	cb.Do("Unk_441f783", &t.Unk_441f783, d...)
	cb.Do("M_eHasModifiedPowerTagMap", &t.M_eHasModifiedPowerTagMap, d...)
	cb.Do("TConsoleInput", &t.TConsoleInput, d...)
	cb.Do("Unk_b4f614c", &t.Unk_b4f614c, d...)
	cb.Do("TFont", &t.TFont, d...)
	cb.Do("PtUIControlTagMapIconLabels", &t.PtUIControlTagMapIconLabels, d...)
}

type AnimTreeNodeOverride struct {
	// Inherits AnimTreeNodeBase
	// Inherits PolymorphicBase
	DwType               DT_UINT
	DwPad                DT_UINT
	DwID                 DT_UINT
	ENodeType            DT_ENUM
	EAnimLayer           DT_ENUM
	PtChildren           DT_VARIABLEARRAY[*AnimTreeNodeChild]
	EBlendParam          DT_ENUM
	ESecondaryBlendParam DT_ENUM
	Pt2DBlendTriangles   DT_VARIABLEARRAY[*AnimTreeBlendTriangle]
	TMinBlend            DT_VECTOR2D
	TMaxBlend            DT_VECTOR2D
	TBlendIn             BlendSettings
	TBlendOut            BlendSettings
	NDefaultChildIndex   DT_INT
	NSyncGroupIndex      DT_INT
	NOverrideID          DT_INT
}

func (t *AnimTreeNodeOverride) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.DwID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.ENodeType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.EAnimLayer, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.PtChildren, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.EBlendParam, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.ESecondaryBlendParam, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.Pt2DBlendTriangles, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.TMinBlend, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.TMaxBlend, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.TBlendIn, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.TBlendOut, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+104, &t.NDefaultChildIndex, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+108, &t.NSyncGroupIndex, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.NOverrideID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+120, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *AnimTreeNodeOverride) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("DwID", &t.DwID, d...)
	cb.Do("ENodeType", &t.ENodeType, d...)
	cb.Do("EAnimLayer", &t.EAnimLayer, d...)
	cb.Do("PtChildren", &t.PtChildren, d...)
	cb.Do("EBlendParam", &t.EBlendParam, d...)
	cb.Do("ESecondaryBlendParam", &t.ESecondaryBlendParam, d...)
	cb.Do("Pt2DBlendTriangles", &t.Pt2DBlendTriangles, d...)
	cb.Do("TMinBlend", &t.TMinBlend, d...)
	cb.Do("TMaxBlend", &t.TMaxBlend, d...)
	cb.Do("TBlendIn", &t.TBlendIn, d...)
	cb.Do("TBlendOut", &t.TBlendOut, d...)
	cb.Do("NDefaultChildIndex", &t.NDefaultChildIndex, d...)
	cb.Do("NSyncGroupIndex", &t.NSyncGroupIndex, d...)
	cb.Do("NOverrideID", &t.NOverrideID, d...)
}

type Type_7eaf5b8 struct {
	// Inherits BuffCallbackBase
	// Inherits PolymorphicBase
	DwType                DT_UINT
	DwPad                 DT_UINT
	SnoTriggerEffectGroup DT_SNO
	ArConditions          DT_POLYMORPHIC_VARIABLEARRAY[*DT_INT64]
}

func (t *Type_7eaf5b8) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoTriggerEffectGroup, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ArConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_7eaf5b8) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("SnoTriggerEffectGroup", &t.SnoTriggerEffectGroup, d...)
	cb.Do("ArConditions", &t.ArConditions, d...)
}

type ObserverDefinition struct {
	AFOV                               DT_FLOAT
	WvLookAtOffsetVector               DT_VECTOR3D
	WvCameraOffsetVector               DT_VECTOR3D
	Unk_5a947a6                        DT_INT
	Unk_5c0680d                        DT_VECTOR3D
	FlCameraOffsetScalar               DT_FLOAT
	FlMaximumCameraOffsetScalar        DT_FLOAT
	Unk_c9a32ec                        DT_FLOAT
	Unk_3ac51ed                        DT_FLOAT
	FOrthographic                      DT_INT
	FlFocalPlane                       DT_FLOAT
	FlFStop                            DT_FLOAT
	Unk_101b2fc                        DT_FLOAT
	Unk_6749d34                        DT_FLOAT
	Unk_839bfef                        DT_FLOAT
	FlZFar                             DT_FLOAT
	FlHeight                           DT_FLOAT
	FlFogStartScalar                   DT_FLOAT
	FlFogExponentScalar                DT_FLOAT
	Unk_551d996                        DT_FLOAT
	Unk_e8a7758                        DT_FLOAT
	Unk_4f566f0                        DT_FLOAT
	Unk_4771732                        DT_FLOAT
	FlFollowSpeed                      DT_FLOAT
	Unk_9fb28df                        DT_FLOAT
	Unk_f4da6b2                        DT_FLOAT
	Unk_483b79                         DT_FLOAT
	Unk_57e840d                        DT_FLOAT
	Unk_d6fad4                         DT_FLOAT
	Unk_6b455b8                        DT_FLOAT
	Unk_15b7944                        DT_FLOAT
	FCameraPercentFogDensity           DT_FLOAT
	BVelocityCamera                    DT_INT
	FlVelocityCameraSpeedModifier      DT_FLOAT
	FlVelocityCameraInterpolationSpeed DT_FLOAT
	FlVelocityCameraMaxDistance        DT_FLOAT
	FlItemUntargetable                 DT_FLOAT
	Unk_ee8e3a                         DT_FLOAT
	Unk_e45f065                        DT_FLOAT
}

func (t *ObserverDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.AFOV, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.WvLookAtOffsetVector, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.WvCameraOffsetVector, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.Unk_5a947a6, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.Unk_5c0680d, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.FlCameraOffsetScalar, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.FlMaximumCameraOffsetScalar, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+60, &t.Unk_c9a32ec, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.Unk_3ac51ed, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.FOrthographic, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.FlFocalPlane, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.FlFStop, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.Unk_101b2fc, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.Unk_6749d34, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.Unk_839bfef, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.FlZFar, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.FlHeight, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+100, &t.FlFogStartScalar, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+104, &t.FlFogExponentScalar, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+108, &t.Unk_551d996, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.Unk_e8a7758, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+116, &t.Unk_4f566f0, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.Unk_4771732, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+124, &t.FlFollowSpeed, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.Unk_9fb28df, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+132, &t.Unk_f4da6b2, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+136, &t.Unk_483b79, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+140, &t.Unk_57e840d, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+144, &t.Unk_d6fad4, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+148, &t.Unk_6b455b8, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+152, &t.Unk_15b7944, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+156, &t.FCameraPercentFogDensity, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+160, &t.BVelocityCamera, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+164, &t.FlVelocityCameraSpeedModifier, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+168, &t.FlVelocityCameraInterpolationSpeed, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+172, &t.FlVelocityCameraMaxDistance, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+176, &t.FlItemUntargetable, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+180, &t.Unk_ee8e3a, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+184, &t.Unk_e45f065, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+188, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ObserverDefinition) Walk(cb WalkCallback, d ...any) {
	cb.Do("AFOV", &t.AFOV, d...)
	cb.Do("WvLookAtOffsetVector", &t.WvLookAtOffsetVector, d...)
	cb.Do("WvCameraOffsetVector", &t.WvCameraOffsetVector, d...)
	cb.Do("Unk_5a947a6", &t.Unk_5a947a6, d...)
	cb.Do("Unk_5c0680d", &t.Unk_5c0680d, d...)
	cb.Do("FlCameraOffsetScalar", &t.FlCameraOffsetScalar, d...)
	cb.Do("FlMaximumCameraOffsetScalar", &t.FlMaximumCameraOffsetScalar, d...)
	cb.Do("Unk_c9a32ec", &t.Unk_c9a32ec, d...)
	cb.Do("Unk_3ac51ed", &t.Unk_3ac51ed, d...)
	cb.Do("FOrthographic", &t.FOrthographic, d...)
	cb.Do("FlFocalPlane", &t.FlFocalPlane, d...)
	cb.Do("FlFStop", &t.FlFStop, d...)
	cb.Do("Unk_101b2fc", &t.Unk_101b2fc, d...)
	cb.Do("Unk_6749d34", &t.Unk_6749d34, d...)
	cb.Do("Unk_839bfef", &t.Unk_839bfef, d...)
	cb.Do("FlZFar", &t.FlZFar, d...)
	cb.Do("FlHeight", &t.FlHeight, d...)
	cb.Do("FlFogStartScalar", &t.FlFogStartScalar, d...)
	cb.Do("FlFogExponentScalar", &t.FlFogExponentScalar, d...)
	cb.Do("Unk_551d996", &t.Unk_551d996, d...)
	cb.Do("Unk_e8a7758", &t.Unk_e8a7758, d...)
	cb.Do("Unk_4f566f0", &t.Unk_4f566f0, d...)
	cb.Do("Unk_4771732", &t.Unk_4771732, d...)
	cb.Do("FlFollowSpeed", &t.FlFollowSpeed, d...)
	cb.Do("Unk_9fb28df", &t.Unk_9fb28df, d...)
	cb.Do("Unk_f4da6b2", &t.Unk_f4da6b2, d...)
	cb.Do("Unk_483b79", &t.Unk_483b79, d...)
	cb.Do("Unk_57e840d", &t.Unk_57e840d, d...)
	cb.Do("Unk_d6fad4", &t.Unk_d6fad4, d...)
	cb.Do("Unk_6b455b8", &t.Unk_6b455b8, d...)
	cb.Do("Unk_15b7944", &t.Unk_15b7944, d...)
	cb.Do("FCameraPercentFogDensity", &t.FCameraPercentFogDensity, d...)
	cb.Do("BVelocityCamera", &t.BVelocityCamera, d...)
	cb.Do("FlVelocityCameraSpeedModifier", &t.FlVelocityCameraSpeedModifier, d...)
	cb.Do("FlVelocityCameraInterpolationSpeed", &t.FlVelocityCameraInterpolationSpeed, d...)
	cb.Do("FlVelocityCameraMaxDistance", &t.FlVelocityCameraMaxDistance, d...)
	cb.Do("FlItemUntargetable", &t.FlItemUntargetable, d...)
	cb.Do("Unk_ee8e3a", &t.Unk_ee8e3a, d...)
	cb.Do("Unk_e45f065", &t.Unk_e45f065, d...)
}

type MarkerFogVolumeData struct {
	// Inherits MarkerDataBase
	// Inherits PolymorphicBase
	DwType        DT_UINT
	DwPad         DT_UINT
	TInstanceData FogVolumeInstanceData
}

func (t *MarkerFogVolumeData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TInstanceData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+152, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *MarkerFogVolumeData) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("TInstanceData", &t.TInstanceData, d...)
}

type SkillTag_Table struct {
	// Inherits GameBalanceTable
	// Inherits PolymorphicBase
	DwType   DT_UINT
	DwPad    DT_UINT
	TEntries DT_VARIABLEARRAY[*SkillTag]
}

func (t *SkillTag_Table) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TEntries, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *SkillTag_Table) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("TEntries", &t.TEntries, d...)
}

type WeatherStateParams struct {
	Unk_d6ca49a DT_TAGMAP[*DT_ENUM]
}

func (t *WeatherStateParams) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Unk_d6ca49a, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *WeatherStateParams) Walk(cb WalkCallback, d ...any) {
	cb.Do("Unk_d6ca49a", &t.Unk_d6ca49a, d...)
}

type AffixSyncComponents struct {
	// Inherits BuffCallbackBase
	// Inherits PolymorphicBase
	DwType                DT_UINT
	DwPad                 DT_UINT
	SnoTriggerEffectGroup DT_SNO
	ArConditions          DT_POLYMORPHIC_VARIABLEARRAY[*DT_INT64]
}

func (t *AffixSyncComponents) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoTriggerEffectGroup, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ArConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *AffixSyncComponents) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("SnoTriggerEffectGroup", &t.SnoTriggerEffectGroup, d...)
	cb.Do("ArConditions", &t.ArConditions, d...)
}

type IndicatorTypeMinor struct {
	RgbaOuterFalloff DT_RGBACOLOR
	RgbaOuter        DT_RGBACOLOR
	RgbaInner        DT_RGBACOLOR
	Unk_d9d4850      DT_FLOAT
}

func (t *IndicatorTypeMinor) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.RgbaOuterFalloff, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.RgbaOuter, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.RgbaInner, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.Unk_d9d4850, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *IndicatorTypeMinor) Walk(cb WalkCallback, d ...any) {
	cb.Do("RgbaOuterFalloff", &t.RgbaOuterFalloff, d...)
	cb.Do("RgbaOuter", &t.RgbaOuter, d...)
	cb.Do("RgbaInner", &t.RgbaInner, d...)
	cb.Do("Unk_d9d4850", &t.Unk_d9d4850, d...)
}

type PowerConditionIsShapeshiftForm struct {
	// Inherits PowerConditionBase
	// Inherits PolymorphicBase
	DwType          DT_UINT
	BInverse        DT_INT
	DwPad           DT_UINT
	EShapeshiftForm DT_ENUM
	ESubject        DT_ENUM
}

func (t *PowerConditionIsShapeshiftForm) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BInverse, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.EShapeshiftForm, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.ESubject, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PowerConditionIsShapeshiftForm) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("BInverse", &t.BInverse, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("EShapeshiftForm", &t.EShapeshiftForm, d...)
	cb.Do("ESubject", &t.ESubject, d...)
}

type PlayerEmblemResponseMessage struct {
	THeader               RequiredRequestMessageHeader
	DwPlayerGameAccountId DT_UINT
	SnoEmblem             DT_SNO
}

func (t *PlayerEmblemResponseMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPlayerGameAccountId, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SnoEmblem, r, &Options{
		Flags: 1,
		Group: 121,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+28, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PlayerEmblemResponseMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("DwPlayerGameAccountId", &t.DwPlayerGameAccountId, d...)
	cb.Do("SnoEmblem", &t.SnoEmblem, d...)
}

type UIProgressBarBaseOptionalFieldMapDefaults struct {
	FlProgressMin            DT_FLOAT
	FlProgressMax            DT_FLOAT
	BVertical                DT_INT
	HProgressForegroundImage UIImageHandleReference
	HProgressBackgroundImage UIImageHandleReference
	HProgressFillLineImage   UIImageHandleReference
	BReversed                DT_INT
	FlThickness              DT_FLOAT
}

func (t *UIProgressBarBaseOptionalFieldMapDefaults) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.FlProgressMin, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.FlProgressMax, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.BVertical, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.HProgressForegroundImage, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.HProgressBackgroundImage, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.HProgressFillLineImage, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.BReversed, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.FlThickness, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *UIProgressBarBaseOptionalFieldMapDefaults) Walk(cb WalkCallback, d ...any) {
	cb.Do("FlProgressMin", &t.FlProgressMin, d...)
	cb.Do("FlProgressMax", &t.FlProgressMax, d...)
	cb.Do("BVertical", &t.BVertical, d...)
	cb.Do("HProgressForegroundImage", &t.HProgressForegroundImage, d...)
	cb.Do("HProgressBackgroundImage", &t.HProgressBackgroundImage, d...)
	cb.Do("HProgressFillLineImage", &t.HProgressFillLineImage, d...)
	cb.Do("BReversed", &t.BReversed, d...)
	cb.Do("FlThickness", &t.FlThickness, d...)
}

type UIParagonBoardStyle struct {
	// Inherits UIWindowStyle
	// Inherits UIControlStyle
	// Inherits PolymorphicBase
	DwType                    DT_UINT
	DwPad                     DT_UINT
	HParentStyle              UIControlHandle
	Unk_441f783               DT_INT64
	M_eHasModifiedPowerTagMap DT_TAGMAP[*DT_ENUM]
	TConsoleInput             UIControlConsoleInput
	Unk_b4f614c               DT_TAGMAP[*DT_ENUM]
}

func (t *UIParagonBoardStyle) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.HParentStyle, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_441f783, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.M_eHasModifiedPowerTagMap, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.TConsoleInput, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.Unk_b4f614c, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+80, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *UIParagonBoardStyle) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("HParentStyle", &t.HParentStyle, d...)
	cb.Do("Unk_441f783", &t.Unk_441f783, d...)
	cb.Do("M_eHasModifiedPowerTagMap", &t.M_eHasModifiedPowerTagMap, d...)
	cb.Do("TConsoleInput", &t.TConsoleInput, d...)
	cb.Do("Unk_b4f614c", &t.Unk_b4f614c, d...)
}

type GameTestingPvpSamplingStartMessage struct {
	THeader    RequiredMessageHeader
	SzTestName DT_CHARARRAY
}

func (t *GameTestingPvpSamplingStartMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SzTestName, r, &Options{
		ArrayLength: 64,
		Flags:       1,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+80, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *GameTestingPvpSamplingStartMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("SzTestName", &t.SzTestName, d...)
}

type TrySalvageAllMessage struct {
	THeader      RequiredMessageHeader
	ESalvageType DT_ENUM
}

func (t *TrySalvageAllMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.ESalvageType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+20, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TrySalvageAllMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("ESalvageType", &t.ESalvageType, d...)
}

type Type_9d7affe struct {
	// Inherits BuffCallbackBase
	// Inherits PolymorphicBase
	DwType                DT_UINT
	DwPad                 DT_UINT
	SnoTriggerEffectGroup DT_SNO
	ArConditions          DT_POLYMORPHIC_VARIABLEARRAY[*DT_INT64]
	BTriggersOnce         DT_INT
	Unk_74544d1           DT_INT
	FIsHFists             DT_INT
	ArThresholds          DT_VARIABLEARRAY[*DT_FLOAT]
}

func (t *Type_9d7affe) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoTriggerEffectGroup, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ArConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.BTriggersOnce, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.Unk_74544d1, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.FIsHFists, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.ArThresholds, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+80, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_9d7affe) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("SnoTriggerEffectGroup", &t.SnoTriggerEffectGroup, d...)
	cb.Do("ArConditions", &t.ArConditions, d...)
	cb.Do("BTriggersOnce", &t.BTriggersOnce, d...)
	cb.Do("Unk_74544d1", &t.Unk_74544d1, d...)
	cb.Do("FIsHFists", &t.FIsHFists, d...)
	cb.Do("ArThresholds", &t.ArThresholds, d...)
}

type UIBlinkerStyleOptionalFieldMapDefaults struct {
	BBlinkForever          DT_INT
	FlBlinkerMinAlpha      DT_FLOAT
	FlBlinkerRotationSpeed DT_FLOAT
	FlBlinkerAlphaSpeed    DT_FLOAT
}

func (t *UIBlinkerStyleOptionalFieldMapDefaults) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.BBlinkForever, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.FlBlinkerMinAlpha, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.FlBlinkerRotationSpeed, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.FlBlinkerAlphaSpeed, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *UIBlinkerStyleOptionalFieldMapDefaults) Walk(cb WalkCallback, d ...any) {
	cb.Do("BBlinkForever", &t.BBlinkForever, d...)
	cb.Do("FlBlinkerMinAlpha", &t.FlBlinkerMinAlpha, d...)
	cb.Do("FlBlinkerRotationSpeed", &t.FlBlinkerRotationSpeed, d...)
	cb.Do("FlBlinkerAlphaSpeed", &t.FlBlinkerAlphaSpeed, d...)
}

type UICheckBoxStyle struct {
	// Inherits UIButtonStyle
	// Inherits UITextStyle
	// Inherits UIWindowStyle
	// Inherits UIControlStyle
	// Inherits PolymorphicBase
	DwType                      DT_UINT
	DwPad                       DT_UINT
	HParentStyle                UIControlHandle
	Unk_441f783                 DT_INT64
	M_eHasModifiedPowerTagMap   DT_TAGMAP[*DT_ENUM]
	TConsoleInput               UIControlConsoleInput
	Unk_b4f614c                 DT_TAGMAP[*DT_ENUM]
	TFont                       UIControlFont
	PtUIControlTagMapIconLabels DT_TAGMAP[*DT_ENUM]
	TIcon                       UIControlIcon
	TClickSounds                UIControlClickSounds
	Unk_10f81f0                 DT_TAGMAP[*DT_ENUM]
	Unk_c12ea3b                 DT_TAGMAP[*DT_ENUM]
}

func (t *UICheckBoxStyle) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.HParentStyle, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_441f783, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.M_eHasModifiedPowerTagMap, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.TConsoleInput, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.Unk_b4f614c, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.TFont, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.PtUIControlTagMapIconLabels, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.TIcon, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.TClickSounds, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+144, &t.Unk_10f81f0, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+160, &t.Unk_c12ea3b, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+176, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *UICheckBoxStyle) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("HParentStyle", &t.HParentStyle, d...)
	cb.Do("Unk_441f783", &t.Unk_441f783, d...)
	cb.Do("M_eHasModifiedPowerTagMap", &t.M_eHasModifiedPowerTagMap, d...)
	cb.Do("TConsoleInput", &t.TConsoleInput, d...)
	cb.Do("Unk_b4f614c", &t.Unk_b4f614c, d...)
	cb.Do("TFont", &t.TFont, d...)
	cb.Do("PtUIControlTagMapIconLabels", &t.PtUIControlTagMapIconLabels, d...)
	cb.Do("TIcon", &t.TIcon, d...)
	cb.Do("TClickSounds", &t.TClickSounds, d...)
	cb.Do("Unk_10f81f0", &t.Unk_10f81f0, d...)
	cb.Do("Unk_c12ea3b", &t.Unk_c12ea3b, d...)
}

type BiomeDefinition struct {
	DwFlags              DT_UINT
	Unk_742ea83          DT_FLOAT
	ArBiomeClutters      DT_FIXEDARRAY[*BiomeClutter]
	ArMediumBiomeObjects DT_VARIABLEARRAY[*MediumBiomeObject]
	ArLargeBiomeObjects  DT_VARIABLEARRAY[*LargeBiomeObject]
}

func (t *BiomeDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.Unk_742ea83, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.ArBiomeClutters, r, &Options{
		ArrayLength: 4,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1040, &t.ArMediumBiomeObjects, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1056, &t.ArLargeBiomeObjects, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+1072, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *BiomeDefinition) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwFlags", &t.DwFlags, d...)
	cb.Do("Unk_742ea83", &t.Unk_742ea83, d...)
	cb.Do("ArBiomeClutters", &t.ArBiomeClutters, d...)
	cb.Do("ArMediumBiomeObjects", &t.ArMediumBiomeObjects, d...)
	cb.Do("ArLargeBiomeObjects", &t.ArLargeBiomeObjects, d...)
}

type WorldDefinition struct {
	PtServerData            DT_VARIABLEARRAY[*WorldServerData]
	ELayoutType             DT_ENUM
	FlGridSize              DT_FLOAT
	TEnvironment            Environment
	FlDeformationScale      DT_FLOAT
	UFlags                  DT_UINT
	SnoGameObserverOverride DT_SNO
	SnoSubzoneDefault       DT_SNO
	ArDRLGLevelAreas        DT_VARIABLEARRAY[*DT_SNO]
	FHasZoneMap             DT_INT
	ArRegionBoundaries      DT_VARIABLEARRAY[*TerritoryRegionBoundary]
	DwFeatureFlags          DT_UINT
	EDungeonFlavorType      DT_ENUM
	ArDesignerFeatureFlags  DT_VARIABLEARRAY[*DT_GBID]
	TMatTexCloud            MaterialTexture
	TMatTexCloud2           MaterialTexture
	FlCloudScale            DT_FLOAT
	TZoneMapParams          ZoneMapParams
}

func (t *WorldDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.PtServerData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ELayoutType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.FlGridSize, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.TEnvironment, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+140, &t.FlDeformationScale, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+144, &t.UFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+148, &t.SnoGameObserverOverride, r, &Options{
		Flags: 1,
		Group: 26,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+152, &t.SnoSubzoneDefault, r, &Options{
		Flags: 1,
		Group: 80,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+160, &t.ArDRLGLevelAreas, r, &Options{Group: 22}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+176, &t.FHasZoneMap, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+184, &t.ArRegionBoundaries, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+200, &t.DwFeatureFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+204, &t.EDungeonFlavorType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+208, &t.ArDesignerFeatureFlags, r, &Options{
		Flags: 1,
		Group: 74,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+224, &t.TMatTexCloud, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+264, &t.TMatTexCloud2, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+304, &t.FlCloudScale, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+312, &t.TZoneMapParams, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+424, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *WorldDefinition) Walk(cb WalkCallback, d ...any) {
	cb.Do("PtServerData", &t.PtServerData, d...)
	cb.Do("ELayoutType", &t.ELayoutType, d...)
	cb.Do("FlGridSize", &t.FlGridSize, d...)
	cb.Do("TEnvironment", &t.TEnvironment, d...)
	cb.Do("FlDeformationScale", &t.FlDeformationScale, d...)
	cb.Do("UFlags", &t.UFlags, d...)
	cb.Do("SnoGameObserverOverride", &t.SnoGameObserverOverride, d...)
	cb.Do("SnoSubzoneDefault", &t.SnoSubzoneDefault, d...)
	cb.Do("ArDRLGLevelAreas", &t.ArDRLGLevelAreas, d...)
	cb.Do("FHasZoneMap", &t.FHasZoneMap, d...)
	cb.Do("ArRegionBoundaries", &t.ArRegionBoundaries, d...)
	cb.Do("DwFeatureFlags", &t.DwFeatureFlags, d...)
	cb.Do("EDungeonFlavorType", &t.EDungeonFlavorType, d...)
	cb.Do("ArDesignerFeatureFlags", &t.ArDesignerFeatureFlags, d...)
	cb.Do("TMatTexCloud", &t.TMatTexCloud, d...)
	cb.Do("TMatTexCloud2", &t.TMatTexCloud2, d...)
	cb.Do("FlCloudScale", &t.FlCloudScale, d...)
	cb.Do("TZoneMapParams", &t.TZoneMapParams, d...)
}

type AnimSyncGroup struct {
	ESyncGroupType DT_ENUM
}

func (t *AnimSyncGroup) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.ESyncGroupType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+4, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *AnimSyncGroup) Walk(cb WalkCallback, d ...any) {
	cb.Do("ESyncGroupType", &t.ESyncGroupType, d...)
}

type ScriptEventParamRecipe struct {
	// Inherits ScriptEventParamBase
	// Inherits PolymorphicBase
	DwType     DT_UINT
	EParamType DT_ENUM
	DwPad      DT_UINT
	SnoRecipe  DT_SNO
}

func (t *ScriptEventParamRecipe) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.EParamType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SnoRecipe, r, &Options{
		Flags: 513,
		Group: 49,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ScriptEventParamRecipe) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("EParamType", &t.EParamType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("SnoRecipe", &t.SnoRecipe, d...)
}

type MarkerHiddenCacheGizmoData struct {
	GbidHiddenCache DT_GBID
}

func (t *MarkerHiddenCacheGizmoData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.GbidHiddenCache, r, &Options{
		Flags: 1,
		Group: 28,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+4, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *MarkerHiddenCacheGizmoData) Walk(cb WalkCallback, d ...any) {
	cb.Do("GbidHiddenCache", &t.GbidHiddenCache, d...)
}

type GlobalAffixData struct {
	// Inherits GlobalBase
	// Inherits PolymorphicBase
	DwType              DT_UINT
	DwPad               DT_UINT
	ArSortedAffixGroups DT_VARIABLEARRAY[*AffixSortGroup]
}

func (t *GlobalAffixData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.ArSortedAffixGroups, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *GlobalAffixData) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("ArSortedAffixGroups", &t.ArSortedAffixGroups, d...)
}

type Type_b0c47c9 struct{}

func (t *Type_b0c47c9) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if _, err := r.Seek(p+1, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_b0c47c9) Walk(cb WalkCallback, d ...any) {}

type BiomeClutter struct {
	// Inherits BiomeItem
	// Inherits PolymorphicBase
	DwType                      DT_UINT
	DwPad                       DT_UINT
	FlRadius                    DT_FLOAT
	Unk_2fd1cdb                 DT_FLOAT
	TAllowedScaleRange          DT_RANGE[*DT_FLOAT]
	FlItemNonAngularFrequencyA  DT_RANGE[*DT_FLOAT]
	FlItemNonAngularFrequencyB  DT_RANGE[*DT_FLOAT]
	FlItemNonAngularFrequencyC  DT_RANGE[*DT_FLOAT]
	TAllowedVerticalOffsetRange DT_RANGE[*DT_FLOAT]
	FlChance                    DT_FLOAT
	DwFlags                     DT_UINT
	Unk_2a8c4b6                 DT_FLOAT
	AAzimuthAngle               DT_FLOAT
	AAltitudeAngle              DT_FLOAT
	Unk_6ead041                 DT_RANGE[*DT_FLOAT]
	TParametricSettings         ParametricSettings
	ArProximityAdjustments      DT_VARIABLEARRAY[*ProximityAdjustment]
	SnoClutter                  DT_SNO
	SzLookName                  DT_UINT
	DwShaderMapOverride         DT_UINT
}

func (t *BiomeClutter) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.FlRadius, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.Unk_2fd1cdb, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.TAllowedScaleRange, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.FlItemNonAngularFrequencyA, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.FlItemNonAngularFrequencyB, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.FlItemNonAngularFrequencyC, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.TAllowedVerticalOffsetRange, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.FlChance, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.DwFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_2a8c4b6, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.AAzimuthAngle, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.AAltitudeAngle, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.Unk_6ead041, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.TParametricSettings, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+224, &t.ArProximityAdjustments, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+240, &t.SnoClutter, r, &Options{
		Flags: 1,
		Group: 9,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+244, &t.SzLookName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+248, &t.DwShaderMapOverride, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+256, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *BiomeClutter) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("FlRadius", &t.FlRadius, d...)
	cb.Do("Unk_2fd1cdb", &t.Unk_2fd1cdb, d...)
	cb.Do("TAllowedScaleRange", &t.TAllowedScaleRange, d...)
	cb.Do("FlItemNonAngularFrequencyA", &t.FlItemNonAngularFrequencyA, d...)
	cb.Do("FlItemNonAngularFrequencyB", &t.FlItemNonAngularFrequencyB, d...)
	cb.Do("FlItemNonAngularFrequencyC", &t.FlItemNonAngularFrequencyC, d...)
	cb.Do("TAllowedVerticalOffsetRange", &t.TAllowedVerticalOffsetRange, d...)
	cb.Do("FlChance", &t.FlChance, d...)
	cb.Do("DwFlags", &t.DwFlags, d...)
	cb.Do("Unk_2a8c4b6", &t.Unk_2a8c4b6, d...)
	cb.Do("AAzimuthAngle", &t.AAzimuthAngle, d...)
	cb.Do("AAltitudeAngle", &t.AAltitudeAngle, d...)
	cb.Do("Unk_6ead041", &t.Unk_6ead041, d...)
	cb.Do("TParametricSettings", &t.TParametricSettings, d...)
	cb.Do("ArProximityAdjustments", &t.ArProximityAdjustments, d...)
	cb.Do("SnoClutter", &t.SnoClutter, d...)
	cb.Do("SzLookName", &t.SzLookName, d...)
	cb.Do("DwShaderMapOverride", &t.DwShaderMapOverride, d...)
}

type Type_b5002e1 struct {
	GbidSpawnLocType        DT_GBID
	FlGlobalCooldownSeconds DT_FLOAT
}

func (t *Type_b5002e1) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.GbidSpawnLocType, r, &Options{
		Flags: 1,
		Group: 20,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.FlGlobalCooldownSeconds, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_b5002e1) Walk(cb WalkCallback, d ...any) {
	cb.Do("GbidSpawnLocType", &t.GbidSpawnLocType, d...)
	cb.Do("FlGlobalCooldownSeconds", &t.FlGlobalCooldownSeconds, d...)
}

type ModifyCurrencyMessage struct {
	THeader       RequiredRequestMessageHeader
	ECurrencyType DT_ENUM
	NOpAmount     DT_INT64
}

func (t *ModifyCurrencyMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.ECurrencyType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.NOpAmount, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ModifyCurrencyMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("ECurrencyType", &t.ECurrencyType, d...)
	cb.Do("NOpAmount", &t.NOpAmount, d...)
}

type JoinGameFailedMessage struct {
	THeader RequiredMessageHeader
	Reason  DT_UINT
}

func (t *JoinGameFailedMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Reason, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+20, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *JoinGameFailedMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("Reason", &t.Reason, d...)
}

type ZoneMapGridSecretTextures struct {
	NX               DT_INT
	NY               DT_INT
	ArSecretTextures DT_VARIABLEARRAY[*ZoneMapSecretTexture]
}

func (t *ZoneMapGridSecretTextures) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.NX, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.NY, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.ArSecretTextures, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ZoneMapGridSecretTextures) Walk(cb WalkCallback, d ...any) {
	cb.Do("NX", &t.NX, d...)
	cb.Do("NY", &t.NY, d...)
	cb.Do("ArSecretTextures", &t.ArSecretTextures, d...)
}

type MarkerEncounterData struct {
	// Inherits MarkerDataBase
	// Inherits PolymorphicBase
	DwType                        DT_UINT
	DwPad                         DT_UINT
	SnoStartingAIBehaviorOverride DT_SNO
	SnoStartingAnimSetOverride    DT_SNO
	SnoPhasingVisibilityCondition DT_SNO
}

func (t *MarkerEncounterData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoStartingAIBehaviorOverride, r, &Options{
		Flags: 1,
		Group: 3,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.SnoStartingAnimSetOverride, r, &Options{
		Flags: 1,
		Group: 8,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SnoPhasingVisibilityCondition, r, &Options{
		Flags: 1,
		Group: 51,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *MarkerEncounterData) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("SnoStartingAIBehaviorOverride", &t.SnoStartingAIBehaviorOverride, d...)
	cb.Do("SnoStartingAnimSetOverride", &t.SnoStartingAnimSetOverride, d...)
	cb.Do("SnoPhasingVisibilityCondition", &t.SnoPhasingVisibilityCondition, d...)
}

type CriteriaModifier struct {
	ENecessaryCondition DT_ENUM
	EOperandType        DT_ENUM
	Snoname             DT_SNO_NAME
	EPowerCategory      DT_ENUM
	ESlot               DT_ENUM
	ECrafterType        DT_ENUM
	ECCType             DT_ENUM
	SzName              DT_UINT
	EIQL                DT_ENUM
	Unk_38a38c          DT_ENUM
	EMonsterRarity      DT_ENUM
	EDamageType         DT_ENUM
	EShapeshiftForm     DT_ENUM
	EDungeonFlavorType  DT_ENUM
	EDungeonTier        DT_ENUM
	EZone               DT_ENUM
	EWorldTier          DT_ENUM
	EParagonNodeRarity  DT_ENUM
	UVal                DT_UINT
	EBountyType         DT_ENUM
	ERogueImbueType     DT_ENUM
	GbidPetType         DT_GBID
	EGizmoType          DT_ENUM
	GbidArmorPactType   DT_GBID
	TDateTime           DT_INT64
	UOperand            DT_INT64
}

func (t *CriteriaModifier) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.ENecessaryCondition, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.EOperandType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.Snoname, r, &Options{Flags: 513}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.EPowerCategory, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.ESlot, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ECrafterType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.ECCType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.SzName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.EIQL, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.Unk_38a38c, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.EMonsterRarity, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.EDamageType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.EShapeshiftForm, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.EDungeonFlavorType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+60, &t.EDungeonTier, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.EZone, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.EWorldTier, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.EParagonNodeRarity, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.UVal, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.EBountyType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.ERogueImbueType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.GbidPetType, r, &Options{
		Flags: 1,
		Group: 23,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.EGizmoType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.GbidArmorPactType, r, &Options{
		Flags: 1,
		Group: 68,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+104, &t.TDateTime, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.UOperand, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+120, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *CriteriaModifier) Walk(cb WalkCallback, d ...any) {
	cb.Do("ENecessaryCondition", &t.ENecessaryCondition, d...)
	cb.Do("EOperandType", &t.EOperandType, d...)
	cb.Do("Snoname", &t.Snoname, d...)
	cb.Do("EPowerCategory", &t.EPowerCategory, d...)
	cb.Do("ESlot", &t.ESlot, d...)
	cb.Do("ECrafterType", &t.ECrafterType, d...)
	cb.Do("ECCType", &t.ECCType, d...)
	cb.Do("SzName", &t.SzName, d...)
	cb.Do("EIQL", &t.EIQL, d...)
	cb.Do("Unk_38a38c", &t.Unk_38a38c, d...)
	cb.Do("EMonsterRarity", &t.EMonsterRarity, d...)
	cb.Do("EDamageType", &t.EDamageType, d...)
	cb.Do("EShapeshiftForm", &t.EShapeshiftForm, d...)
	cb.Do("EDungeonFlavorType", &t.EDungeonFlavorType, d...)
	cb.Do("EDungeonTier", &t.EDungeonTier, d...)
	cb.Do("EZone", &t.EZone, d...)
	cb.Do("EWorldTier", &t.EWorldTier, d...)
	cb.Do("EParagonNodeRarity", &t.EParagonNodeRarity, d...)
	cb.Do("UVal", &t.UVal, d...)
	cb.Do("EBountyType", &t.EBountyType, d...)
	cb.Do("ERogueImbueType", &t.ERogueImbueType, d...)
	cb.Do("GbidPetType", &t.GbidPetType, d...)
	cb.Do("EGizmoType", &t.EGizmoType, d...)
	cb.Do("GbidArmorPactType", &t.GbidArmorPactType, d...)
	cb.Do("TDateTime", &t.TDateTime, d...)
	cb.Do("UOperand", &t.UOperand, d...)
}

type MailSendMessage struct {
	THeader    RequiredMessageHeader
	NToAccount DT_INT64
}

func (t *MailSendMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.NToAccount, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *MailSendMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("NToAccount", &t.NToAccount, d...)
}

type TriggerEventFadeOtherPlayers struct {
	// Inherits TriggerEventRangedDuration
	// Inherits TriggerEvent
	// Inherits PolymorphicBase
	DwType           DT_UINT
	TConditions      TriggerConditions
	FGenerated       DT_INT
	Unk_6cba752      DT_INT
	DwParentActorID  DT_UINT
	TDuration        DT_FLOAT
	DwTriggerFlags   DT_UINT
	DwTriggerFlagsEx DT_UINT
	TCleanup         TriggerCleanup
	Unk_49e9257      DT_INT
	Unk_5490979      DT_INT
	DwPad            DT_UINT
}

func (t *TriggerEventFadeOtherPlayers) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.FGenerated, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_6cba752, r, &Options{Flags: 16}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.DwParentActorID, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.TDuration, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.DwTriggerFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.DwTriggerFlagsEx, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.TCleanup, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+116, &t.Unk_49e9257, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.Unk_5490979, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+124, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+128, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TriggerEventFadeOtherPlayers) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("TConditions", &t.TConditions, d...)
	cb.Do("FGenerated", &t.FGenerated, d...)
	cb.Do("Unk_6cba752", &t.Unk_6cba752, d...)
	cb.Do("DwParentActorID", &t.DwParentActorID, d...)
	cb.Do("TDuration", &t.TDuration, d...)
	cb.Do("DwTriggerFlags", &t.DwTriggerFlags, d...)
	cb.Do("DwTriggerFlagsEx", &t.DwTriggerFlagsEx, d...)
	cb.Do("TCleanup", &t.TCleanup, d...)
	cb.Do("Unk_49e9257", &t.Unk_49e9257, d...)
	cb.Do("Unk_5490979", &t.Unk_5490979, d...)
	cb.Do("DwPad", &t.DwPad, d...)
}

type ScrollbarStyle struct {
	TElements DT_FIXEDARRAY[*ScrollbarElementImages]
}

func (t *ScrollbarStyle) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.TElements, r, &Options{
		ArrayLength: 5,
		Flags:       1,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+60, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ScrollbarStyle) Walk(cb WalkCallback, d ...any) {
	cb.Do("TElements", &t.TElements, d...)
}

type IntDataRequest struct {
	THeader RequiredRequestMessageHeader
	NData   DT_INT
}

func (t *IntDataRequest) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.NData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *IntDataRequest) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("NData", &t.NData, d...)
}

type PlayHotbarUIFlourishMessage struct {
	THeader               RequiredCommandFrameMessageHeader
	DwPlayerGameAccountId DT_UINT
	SnoPower              DT_SNO
}

func (t *PlayHotbarUIFlourishMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPlayerGameAccountId, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SnoPower, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+28, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PlayHotbarUIFlourishMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("DwPlayerGameAccountId", &t.DwPlayerGameAccountId, d...)
	cb.Do("SnoPower", &t.SnoPower, d...)
}

type UIMinimapStyle struct {
	// Inherits UIWindowStyle
	// Inherits UIControlStyle
	// Inherits PolymorphicBase
	DwType                    DT_UINT
	DwPad                     DT_UINT
	HParentStyle              UIControlHandle
	Unk_441f783               DT_INT64
	M_eHasModifiedPowerTagMap DT_TAGMAP[*DT_ENUM]
	TConsoleInput             UIControlConsoleInput
	Unk_b4f614c               DT_TAGMAP[*DT_ENUM]
}

func (t *UIMinimapStyle) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.HParentStyle, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_441f783, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.M_eHasModifiedPowerTagMap, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.TConsoleInput, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.Unk_b4f614c, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+80, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *UIMinimapStyle) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("HParentStyle", &t.HParentStyle, d...)
	cb.Do("Unk_441f783", &t.Unk_441f783, d...)
	cb.Do("M_eHasModifiedPowerTagMap", &t.M_eHasModifiedPowerTagMap, d...)
	cb.Do("TConsoleInput", &t.TConsoleInput, d...)
	cb.Do("Unk_b4f614c", &t.Unk_b4f614c, d...)
}

type MarkerBakedSplineData struct {
	// Inherits MarkerSplineData
	// Inherits MarkerDataBase
	// Inherits PolymorphicBase
	DwType             DT_UINT
	EInterpolationMode DT_ENUM
	Unk_a3f1699        DT_FLOAT
	ArBakedSplineNodes DT_VARIABLEARRAY[*MarkerBakedSplineNode]
	FlTotalLength      DT_FLOAT
	EType              DT_ENUM
	ERoadType          DT_ENUM
	DwPad              DT_UINT
}

func (t *MarkerBakedSplineData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.EInterpolationMode, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.Unk_a3f1699, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ArBakedSplineNodes, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.FlTotalLength, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.EType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.ERoadType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+56, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *MarkerBakedSplineData) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("EInterpolationMode", &t.EInterpolationMode, d...)
	cb.Do("Unk_a3f1699", &t.Unk_a3f1699, d...)
	cb.Do("ArBakedSplineNodes", &t.ArBakedSplineNodes, d...)
	cb.Do("FlTotalLength", &t.FlTotalLength, d...)
	cb.Do("EType", &t.EType, d...)
	cb.Do("ERoadType", &t.ERoadType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
}

type MarkerBakedSplineNode struct {
	SzName      DT_UINT
	Transform   PRTransform
	Unk_644027a DT_FLOAT
	Unk_83cc220 DT_RANGE[*DT_INT]
	Unk_81a5ef8 DT_FLOAT
	Unk_2e8bbc0 DT_RANGE[*DT_INT]
	Unk_2cc466b DT_FLOAT
	Unk_375223b DT_INT
}

func (t *MarkerBakedSplineNode) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SzName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.Transform, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.Unk_644027a, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.Unk_83cc220, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.Unk_81a5ef8, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.Unk_2e8bbc0, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.Unk_2cc466b, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+60, &t.Unk_375223b, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+64, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *MarkerBakedSplineNode) Walk(cb WalkCallback, d ...any) {
	cb.Do("SzName", &t.SzName, d...)
	cb.Do("Transform", &t.Transform, d...)
	cb.Do("Unk_644027a", &t.Unk_644027a, d...)
	cb.Do("Unk_83cc220", &t.Unk_83cc220, d...)
	cb.Do("Unk_81a5ef8", &t.Unk_81a5ef8, d...)
	cb.Do("Unk_2e8bbc0", &t.Unk_2e8bbc0, d...)
	cb.Do("Unk_2cc466b", &t.Unk_2cc466b, d...)
	cb.Do("Unk_375223b", &t.Unk_375223b, d...)
}

type AddSocketResultMessage struct {
	THeader  RequiredMessageHeader
	BSuccess DT_INT
	AnnItem  DT_ACD_NETWORK_NAME
}

func (t *AddSocketResultMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BSuccess, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.AnnItem, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+28, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *AddSocketResultMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("BSuccess", &t.BSuccess, d...)
	cb.Do("AnnItem", &t.AnnItem, d...)
}

type PowerConditionIsPower struct {
	// Inherits PowerConditionBase
	// Inherits PolymorphicBase
	DwType   DT_UINT
	BInverse DT_INT
	DwPad    DT_UINT
	SnoPower DT_SNO
}

func (t *PowerConditionIsPower) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BInverse, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SnoPower, r, &Options{
		Flags: 513,
		Group: 29,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PowerConditionIsPower) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("BInverse", &t.BInverse, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("SnoPower", &t.SnoPower, d...)
}

type AffixDefinition struct {
	DwFlags                     DT_UINT
	EMagicType                  DT_ENUM
	ECategory                   DT_ENUM
	NItemPowerMin               DT_INT
	NItemPowerMax               DT_INT
	TCost                       DT_STRING_FORMULA
	SnoRareNamePrefixStringList DT_SNO
	SnoRareNameSuffixStringList DT_SNO
	GbidAffixFamily             DT_GBID
	FAllowedForPlayerClass      DT_FIXEDARRAY[*DT_INT]
	ArAllowedItemLabels         DT_VARIABLEARRAY[*DT_ENUM]
	DwAllowedQualityLevels      DT_UINT
	EAffixType                  DT_ENUM
	PtItemAffixAttributes       DT_VARIABLEARRAY[*ItemAffixAttribute]
	ArStaticValues              DT_VARIABLEARRAY[*DT_FLOAT]
	SnoPassivePower             DT_SNO
	SnoClassRequirement         DT_SNO
	ArAffixSkillTags            DT_VARIABLEARRAY[*DT_GBID]
	ArPowerToModify             DT_VARIABLEARRAY[*DT_SNO]
	ArSkillTagsToAdd            DT_VARIABLEARRAY[*DT_GBID]
	ArSkillTagsToRemove         DT_VARIABLEARRAY[*DT_GBID]
	GbidMalignantColor          DT_GBID
}

func (t *AffixDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.EMagicType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.ECategory, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.NItemPowerMin, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.NItemPowerMax, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.TCost, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.SnoRareNamePrefixStringList, r, &Options{
		Flags: 1,
		Group: 42,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.SnoRareNameSuffixStringList, r, &Options{
		Flags: 1,
		Group: 42,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.GbidAffixFamily, r, &Options{
		Flags: 1,
		Group: 18,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.FAllowedForPlayerClass, r, &Options{
		ArrayLength: 5,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.ArAllowedItemLabels, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.DwAllowedQualityLevels, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+116, &t.EAffixType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.PtItemAffixAttributes, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+136, &t.ArStaticValues, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+152, &t.SnoPassivePower, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+156, &t.SnoClassRequirement, r, &Options{
		Flags: 513,
		Group: 74,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+160, &t.ArAffixSkillTags, r, &Options{
		Flags: 1,
		Group: 56,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+176, &t.ArPowerToModify, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+192, &t.ArSkillTagsToAdd, r, &Options{
		Flags: 1,
		Group: 56,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+208, &t.ArSkillTagsToRemove, r, &Options{
		Flags: 1,
		Group: 56,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+224, &t.GbidMalignantColor, r, &Options{
		Flags: 1,
		Group: 63,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+232, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *AffixDefinition) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwFlags", &t.DwFlags, d...)
	cb.Do("EMagicType", &t.EMagicType, d...)
	cb.Do("ECategory", &t.ECategory, d...)
	cb.Do("NItemPowerMin", &t.NItemPowerMin, d...)
	cb.Do("NItemPowerMax", &t.NItemPowerMax, d...)
	cb.Do("TCost", &t.TCost, d...)
	cb.Do("SnoRareNamePrefixStringList", &t.SnoRareNamePrefixStringList, d...)
	cb.Do("SnoRareNameSuffixStringList", &t.SnoRareNameSuffixStringList, d...)
	cb.Do("GbidAffixFamily", &t.GbidAffixFamily, d...)
	cb.Do("FAllowedForPlayerClass", &t.FAllowedForPlayerClass, d...)
	cb.Do("ArAllowedItemLabels", &t.ArAllowedItemLabels, d...)
	cb.Do("DwAllowedQualityLevels", &t.DwAllowedQualityLevels, d...)
	cb.Do("EAffixType", &t.EAffixType, d...)
	cb.Do("PtItemAffixAttributes", &t.PtItemAffixAttributes, d...)
	cb.Do("ArStaticValues", &t.ArStaticValues, d...)
	cb.Do("SnoPassivePower", &t.SnoPassivePower, d...)
	cb.Do("SnoClassRequirement", &t.SnoClassRequirement, d...)
	cb.Do("ArAffixSkillTags", &t.ArAffixSkillTags, d...)
	cb.Do("ArPowerToModify", &t.ArPowerToModify, d...)
	cb.Do("ArSkillTagsToAdd", &t.ArSkillTagsToAdd, d...)
	cb.Do("ArSkillTagsToRemove", &t.ArSkillTagsToRemove, d...)
	cb.Do("GbidMalignantColor", &t.GbidMalignantColor, d...)
}

type ExperienceLevel struct {
	NDeltaXP              DT_INT64
	Unk_66201eb           DT_INT
	FlLifeStealMultiplier DT_FLOAT
}

func (t *ExperienceLevel) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.NDeltaXP, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.Unk_66201eb, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.FlLifeStealMultiplier, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ExperienceLevel) Walk(cb WalkCallback, d ...any) {
	cb.Do("NDeltaXP", &t.NDeltaXP, d...)
	cb.Do("Unk_66201eb", &t.Unk_66201eb, d...)
	cb.Do("FlLifeStealMultiplier", &t.FlLifeStealMultiplier, d...)
}

type OutroPortalEffectMessage struct {
	THeader      RequiredMessageHeader
	DwPortalType DT_UINT
}

func (t *OutroPortalEffectMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.DwPortalType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+20, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *OutroPortalEffectMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("DwPortalType", &t.DwPortalType, d...)
}

type UIEffect struct {
	SnoEffectGroup DT_SNO
	Unk_25f3563    DT_CSTRING[*DT_BYTE]
	EScaleMethod   DT_ENUM
	VecScale       DT_VECTOR2D
}

func (t *UIEffect) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoEffectGroup, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.Unk_25f3563, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.EScaleMethod, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.VecScale, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+40, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *UIEffect) Walk(cb WalkCallback, d ...any) {
	cb.Do("SnoEffectGroup", &t.SnoEffectGroup, d...)
	cb.Do("Unk_25f3563", &t.Unk_25f3563, d...)
	cb.Do("EScaleMethod", &t.EScaleMethod, d...)
	cb.Do("VecScale", &t.VecScale, d...)
}

type TryImbueAffixMessage struct {
	THeader       RequiredMessageHeader
	AnnTargetItem DT_ACD_NETWORK_NAME
	BFromItem     DT_INT
	AnnAspectItem DT_ACD_NETWORK_NAME
	SnoAspect     DT_SNO
}

func (t *TryImbueAffixMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.AnnTargetItem, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.BFromItem, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.AnnAspectItem, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.SnoAspect, r, &Options{
		Flags: 1,
		Group: 128,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+40, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TryImbueAffixMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("AnnTargetItem", &t.AnnTargetItem, d...)
	cb.Do("BFromItem", &t.BFromItem, d...)
	cb.Do("AnnAspectItem", &t.AnnAspectItem, d...)
	cb.Do("SnoAspect", &t.SnoAspect, d...)
}

type SetItemBonusDefinition struct {
	PtTiers DT_VARIABLEARRAY[*SetBonusTier]
}

func (t *SetItemBonusDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.PtTiers, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *SetItemBonusDefinition) Walk(cb WalkCallback, d ...any) {
	cb.Do("PtTiers", &t.PtTiers, d...)
}

type GBHandle struct {
	EType DT_ENUM
	Gbid  DT_GBID
}

func (t *GBHandle) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.EType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.Gbid, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *GBHandle) Walk(cb WalkCallback, d ...any) {
	cb.Do("EType", &t.EType, d...)
	cb.Do("Gbid", &t.Gbid, d...)
}

type PowerCastingEffectOverride struct {
	Unk_aa3fdee               DT_SNO
	SnoCastingEffectGroup     DT_SNO
	SnoAutoCastingEffectGroup DT_SNO
}

func (t *PowerCastingEffectOverride) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Unk_aa3fdee, r, &Options{
		Flags: 1,
		Group: 104,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.SnoCastingEffectGroup, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.SnoAutoCastingEffectGroup, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+12, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PowerCastingEffectOverride) Walk(cb WalkCallback, d ...any) {
	cb.Do("Unk_aa3fdee", &t.Unk_aa3fdee, d...)
	cb.Do("SnoCastingEffectGroup", &t.SnoCastingEffectGroup, d...)
	cb.Do("SnoAutoCastingEffectGroup", &t.SnoAutoCastingEffectGroup, d...)
}

type ScriptEventParamString struct {
	// Inherits ScriptEventParamBase
	// Inherits PolymorphicBase
	DwType       DT_UINT
	EParamType   DT_ENUM
	DwPad        DT_UINT
	DwStringHash DT_UINT
	SzString     DT_CSTRING[*DT_BYTE]
}

func (t *ScriptEventParamString) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.EParamType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.DwStringHash, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.SzString, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ScriptEventParamString) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("EParamType", &t.EParamType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("DwStringHash", &t.DwStringHash, d...)
	cb.Do("SzString", &t.SzString, d...)
}

type NPCComponentHardpointOverride struct {
	THardpointOverride HardpointLink
	PositionOffset     DT_VECTOR3D
	EComponentType     DT_ENUM
	SzComponent        DT_UINT
}

func (t *NPCComponentHardpointOverride) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THardpointOverride, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.PositionOffset, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.EComponentType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SzComponent, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+28, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *NPCComponentHardpointOverride) Walk(cb WalkCallback, d ...any) {
	cb.Do("THardpointOverride", &t.THardpointOverride, d...)
	cb.Do("PositionOffset", &t.PositionOffset, d...)
	cb.Do("EComponentType", &t.EComponentType, d...)
	cb.Do("SzComponent", &t.SzComponent, d...)
}

type ParticleSimKeyFramePosition struct {
	FlTime    DT_FLOAT
	VPosition DT_VECTOR3D
}

func (t *ParticleSimKeyFramePosition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.FlTime, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.VPosition, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ParticleSimKeyFramePosition) Walk(cb WalkCallback, d ...any) {
	cb.Do("FlTime", &t.FlTime, d...)
	cb.Do("VPosition", &t.VPosition, d...)
}

type UIControlStyle struct {
	// Inherits PolymorphicBase
	DwType                    DT_UINT
	DwPad                     DT_UINT
	HParentStyle              UIControlHandle
	Unk_441f783               DT_INT64
	M_eHasModifiedPowerTagMap DT_TAGMAP[*DT_ENUM]
}

func (t *UIControlStyle) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.HParentStyle, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_441f783, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.M_eHasModifiedPowerTagMap, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *UIControlStyle) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("HParentStyle", &t.HParentStyle, d...)
	cb.Do("Unk_441f783", &t.Unk_441f783, d...)
	cb.Do("M_eHasModifiedPowerTagMap", &t.M_eHasModifiedPowerTagMap, d...)
}

type OnAssistBuffCallback struct {
	// Inherits BuffCallbackBase
	// Inherits PolymorphicBase
	DwType                DT_UINT
	DwPad                 DT_UINT
	SnoTriggerEffectGroup DT_SNO
	ArConditions          DT_POLYMORPHIC_VARIABLEARRAY[*DT_INT64]
}

func (t *OnAssistBuffCallback) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoTriggerEffectGroup, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ArConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *OnAssistBuffCallback) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("SnoTriggerEffectGroup", &t.SnoTriggerEffectGroup, d...)
	cb.Do("ArConditions", &t.ArConditions, d...)
}

type SharedServerWorldPlace struct {
	Wp       DT_VECTOR3D
	IdSWorld DT_SHARED_SERVER_DATA_ID
}

func (t *SharedServerWorldPlace) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Wp, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.IdSWorld, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+20, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *SharedServerWorldPlace) Walk(cb WalkCallback, d ...any) {
	cb.Do("Wp", &t.Wp, d...)
	cb.Do("IdSWorld", &t.IdSWorld, d...)
}

type ConditionDefinition struct {
	PtRootCondition DT_POLYMORPHIC_VARIABLEARRAY[*Subcondition]
}

func (t *ConditionDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.PtRootCondition, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ConditionDefinition) Walk(cb WalkCallback, d ...any) {
	cb.Do("PtRootCondition", &t.PtRootCondition, d...)
}

type WwiseName struct {
	UID DT_UINT
}

func (t *WwiseName) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.UID, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+4, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *WwiseName) Walk(cb WalkCallback, d ...any) {
	cb.Do("UID", &t.UID, d...)
}

type EffectGroupScaleYKeyData struct {
	// Inherits EffectGroupKeyData
	// Inherits PolymorphicBase
	DwType     DT_UINT
	DwPad      DT_UINT
	ArKeyItems DT_VARIABLEARRAY[*EffectGroupKey]
}

func (t *EffectGroupScaleYKeyData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.ArKeyItems, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *EffectGroupScaleYKeyData) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("ArKeyItems", &t.ArKeyItems, d...)
}

type RitualTetherEffectMessage struct {
	THeader    RequiredMessageHeader
	AnnFrom    DT_ACD_NETWORK_NAME
	TPlaceDest SharedServerWorldPlace
}

func (t *RitualTetherEffectMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.AnnFrom, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.TPlaceDest, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+44, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *RitualTetherEffectMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("AnnFrom", &t.AnnFrom, d...)
	cb.Do("TPlaceDest", &t.TPlaceDest, d...)
}

type OnPetDeathBuffCallback struct {
	// Inherits BuffCallbackBase
	// Inherits PolymorphicBase
	DwType                DT_UINT
	DwPad                 DT_UINT
	SnoTriggerEffectGroup DT_SNO
	ArConditions          DT_POLYMORPHIC_VARIABLEARRAY[*DT_INT64]
}

func (t *OnPetDeathBuffCallback) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoTriggerEffectGroup, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ArConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *OnPetDeathBuffCallback) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("SnoTriggerEffectGroup", &t.SnoTriggerEffectGroup, d...)
	cb.Do("ArConditions", &t.ArConditions, d...)
}

type ConsoleAwardDefinition struct {
	// Inherits PolymorphicBase
	DwType          DT_UINT
	UProfileAwardId DT_UINT
	DwPad           DT_UINT
}

func (t *ConsoleAwardDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.UProfileAwardId, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ConsoleAwardDefinition) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("UProfileAwardId", &t.UProfileAwardId, d...)
	cb.Do("DwPad", &t.DwPad, d...)
}

type TriggerEventStoreUIIntro struct {
	// Inherits TriggerEvent
	// Inherits PolymorphicBase
	DwType          DT_UINT
	DwPad           DT_UINT
	TConditions     TriggerConditions
	FGenerated      DT_INT
	Unk_6cba752     DT_INT
	DwParentActorID DT_UINT
}

func (t *TriggerEventStoreUIIntro) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.FGenerated, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_6cba752, r, &Options{Flags: 16}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.DwParentActorID, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+80, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TriggerEventStoreUIIntro) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("TConditions", &t.TConditions, d...)
	cb.Do("FGenerated", &t.FGenerated, d...)
	cb.Do("Unk_6cba752", &t.Unk_6cba752, d...)
	cb.Do("DwParentActorID", &t.DwParentActorID, d...)
}

type Capsule struct {
	Wp1      DT_VECTOR3D
	Wp2      DT_VECTOR3D
	FlRadius DT_FLOAT
}

func (t *Capsule) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Wp1, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.Wp2, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.FlRadius, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+28, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Capsule) Walk(cb WalkCallback, d ...any) {
	cb.Do("Wp1", &t.Wp1, d...)
	cb.Do("Wp2", &t.Wp2, d...)
	cb.Do("FlRadius", &t.FlRadius, d...)
}

type CardArt struct {
	HCardImage      DT_UINT
	HCardHoverImage DT_UINT
}

func (t *CardArt) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.HCardImage, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.HCardHoverImage, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *CardArt) Walk(cb WalkCallback, d ...any) {
	cb.Do("HCardImage", &t.HCardImage, d...)
	cb.Do("HCardHoverImage", &t.HCardHoverImage, d...)
}

type FatVertex struct {
	WpPos      DT_VECTOR3D
	WvNormal   DT_VECTOR3D
	RgbaColor  DT_FIXEDARRAY[*DT_RGBACOLOR]
	VUVSet     DT_FIXEDARRAY[*DT_VECTOR2D]
	VecTangent DT_VECTOR4D
}

func (t *FatVertex) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.WpPos, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.WvNormal, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.RgbaColor, r, &Options{
		ArrayLength: 2,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.VUVSet, r, &Options{
		ArrayLength: 4,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.VecTangent, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+80, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *FatVertex) Walk(cb WalkCallback, d ...any) {
	cb.Do("WpPos", &t.WpPos, d...)
	cb.Do("WvNormal", &t.WvNormal, d...)
	cb.Do("RgbaColor", &t.RgbaColor, d...)
	cb.Do("VUVSet", &t.VUVSet, d...)
	cb.Do("VecTangent", &t.VecTangent, d...)
}

type ParagonGlyphExperience struct {
	NDeltaXP DT_UINT
}

func (t *ParagonGlyphExperience) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.NDeltaXP, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+4, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ParagonGlyphExperience) Walk(cb WalkCallback, d ...any) {
	cb.Do("NDeltaXP", &t.NDeltaXP, d...)
}

type PrefetchWorldDataMessage struct {
	THeader    RequiredMessageHeader
	SnoWorld   DT_SNO
	SnoSubzone DT_SNO
}

func (t *PrefetchWorldDataMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoWorld, r, &Options{
		Flags: 1,
		Group: 48,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.SnoSubzone, r, &Options{
		Flags: 1,
		Group: 80,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PrefetchWorldDataMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("SnoWorld", &t.SnoWorld, d...)
	cb.Do("SnoSubzone", &t.SnoSubzone, d...)
}

type LogoutContextMessage struct {
	THeader        RequiredMessageHeader
	ELogoutContext DT_ENUM
}

func (t *LogoutContextMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.ELogoutContext, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+20, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *LogoutContextMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("ELogoutContext", &t.ELogoutContext, d...)
}

type ACDEnterKnownMessage struct {
	THeader                             RequiredMessageHeader
	Ann                                 DT_ACD_NETWORK_NAME
	SnoActor                            DT_SNO
	DwFlags                             DT_UINT
	ELocationType                       DT_ENUM
	TWorldLocationData                  DT_OPTIONAL[*WorldLocationMessageData]
	TInvLocationData                    DT_OPTIONAL[*InventoryLocationMessageData]
	Unk_aa2bbb9                         DT_SNO_NAME
	NMonsterRarity                      DT_OPTIONAL[*DT_INT]
	NItemQuality                        DT_OPTIONAL[*DT_INT]
	NItemQualityModifier                DT_OPTIONAL[*DT_INT]
	DwLookHash                          DT_UINT
	DwShaderMapOverride                 DT_UINT
	SnoMarkerSet                        DT_OPTIONAL[*DT_SNO]
	NMarkerId                           DT_OPTIONAL[*DT_INT]
	SnoRootMarkerSet                    DT_OPTIONAL[*DT_SNO]
	Unk_7a55b3f                         DT_OPTIONAL[*DT_UINT]
	Unk_7d23397                         DT_OPTIONAL[*DT_SNO]
	Unk_3125d0e                         DT_OPTIONAL[*DT_UINT]
	SnoAmbientOcclusionOverrideTex      DT_OPTIONAL[*DT_SNO]
	DwTimeActorCreated                  DT_OPTIONAL[*DT_UINT]
	TEnterKnownLookOverrides            DT_OPTIONAL[*EnterKnownLookOverrides]
	TEnterKnownShaderMapOverrides       DT_OPTIONAL[*EnterKnownShaderMapOverrides]
	UGizmoHash                          DT_OPTIONAL[*DT_UINT]
	Unk_9e938b5                         DT_OPTIONAL[*DT_INT64]
	AnnSummonedBy                       DT_OPTIONAL[*DT_ACD_NETWORK_NAME]
	SnoAttachedRenderActor              DT_OPTIONAL[*DT_SNO]
	DwAttachedHardpoint                 DT_OPTIONAL[*DT_UINT]
	DwAttachHardpoint                   DT_OPTIONAL[*DT_UINT]
	AnnClonedFrom                       DT_OPTIONAL[*DT_ACD_NETWORK_NAME]
	ArQuestACDObjectivesPrimaryPlayer   DT_FIXEDARRAY[*QuestACDObjective]
	ArQuestACDObjectivesSecondaryPlayer DT_FIXEDARRAY[*QuestACDObjective]
}

func (t *ACDEnterKnownMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Ann, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SnoActor, r, &Options{
		Flags: 1,
		Group: 1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.DwFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.ELocationType, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.TWorldLocationData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.TInvLocationData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.Unk_aa2bbb9, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.NMonsterRarity, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.NItemQuality, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+136, &t.NItemQualityModifier, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+144, &t.DwLookHash, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+148, &t.DwShaderMapOverride, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+152, &t.SnoMarkerSet, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+160, &t.NMarkerId, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+168, &t.SnoRootMarkerSet, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+176, &t.Unk_7a55b3f, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+184, &t.Unk_7d23397, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+192, &t.Unk_3125d0e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+200, &t.SnoAmbientOcclusionOverrideTex, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+208, &t.DwTimeActorCreated, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+216, &t.TEnterKnownLookOverrides, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+268, &t.TEnterKnownShaderMapOverrides, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+296, &t.UGizmoHash, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+304, &t.Unk_9e938b5, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+320, &t.AnnSummonedBy, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+332, &t.SnoAttachedRenderActor, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+340, &t.DwAttachedHardpoint, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+348, &t.DwAttachHardpoint, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+356, &t.AnnClonedFrom, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+368, &t.ArQuestACDObjectivesPrimaryPlayer, r, &Options{
		ArrayLength: 4,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+432, &t.ArQuestACDObjectivesSecondaryPlayer, r, &Options{
		ArrayLength: 4,
		Flags:       1,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+496, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ACDEnterKnownMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("Ann", &t.Ann, d...)
	cb.Do("SnoActor", &t.SnoActor, d...)
	cb.Do("DwFlags", &t.DwFlags, d...)
	cb.Do("ELocationType", &t.ELocationType, d...)
	cb.Do("TWorldLocationData", &t.TWorldLocationData, d...)
	cb.Do("TInvLocationData", &t.TInvLocationData, d...)
	cb.Do("Unk_aa2bbb9", &t.Unk_aa2bbb9, d...)
	cb.Do("NMonsterRarity", &t.NMonsterRarity, d...)
	cb.Do("NItemQuality", &t.NItemQuality, d...)
	cb.Do("NItemQualityModifier", &t.NItemQualityModifier, d...)
	cb.Do("DwLookHash", &t.DwLookHash, d...)
	cb.Do("DwShaderMapOverride", &t.DwShaderMapOverride, d...)
	cb.Do("SnoMarkerSet", &t.SnoMarkerSet, d...)
	cb.Do("NMarkerId", &t.NMarkerId, d...)
	cb.Do("SnoRootMarkerSet", &t.SnoRootMarkerSet, d...)
	cb.Do("Unk_7a55b3f", &t.Unk_7a55b3f, d...)
	cb.Do("Unk_7d23397", &t.Unk_7d23397, d...)
	cb.Do("Unk_3125d0e", &t.Unk_3125d0e, d...)
	cb.Do("SnoAmbientOcclusionOverrideTex", &t.SnoAmbientOcclusionOverrideTex, d...)
	cb.Do("DwTimeActorCreated", &t.DwTimeActorCreated, d...)
	cb.Do("TEnterKnownLookOverrides", &t.TEnterKnownLookOverrides, d...)
	cb.Do("TEnterKnownShaderMapOverrides", &t.TEnterKnownShaderMapOverrides, d...)
	cb.Do("UGizmoHash", &t.UGizmoHash, d...)
	cb.Do("Unk_9e938b5", &t.Unk_9e938b5, d...)
	cb.Do("AnnSummonedBy", &t.AnnSummonedBy, d...)
	cb.Do("SnoAttachedRenderActor", &t.SnoAttachedRenderActor, d...)
	cb.Do("DwAttachedHardpoint", &t.DwAttachedHardpoint, d...)
	cb.Do("DwAttachHardpoint", &t.DwAttachHardpoint, d...)
	cb.Do("AnnClonedFrom", &t.AnnClonedFrom, d...)
	cb.Do("ArQuestACDObjectivesPrimaryPlayer", &t.ArQuestACDObjectivesPrimaryPlayer, d...)
	cb.Do("ArQuestACDObjectivesSecondaryPlayer", &t.ArQuestACDObjectivesSecondaryPlayer, d...)
}

type SavedCameraStates struct {
	ArCameraStates DT_VARIABLEARRAY[*SavedWorldCameraState]
}

func (t *SavedCameraStates) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.ArCameraStates, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *SavedCameraStates) Walk(cb WalkCallback, d ...any) {
	cb.Do("ArCameraStates", &t.ArCameraStates, d...)
}

type Type_1109bb04 struct {
	TComponentId     DT_UINT
	ArLegComponents  DT_VARIABLEARRAY[*DT_UINT]
	ArHelmComponents DT_VARIABLEARRAY[*DT_UINT]
}

func (t *Type_1109bb04) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.TComponentId, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.ArLegComponents, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ArHelmComponents, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+40, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_1109bb04) Walk(cb WalkCallback, d ...any) {
	cb.Do("TComponentId", &t.TComponentId, d...)
	cb.Do("ArLegComponents", &t.ArLegComponents, d...)
	cb.Do("ArHelmComponents", &t.ArHelmComponents, d...)
}

type MarkerChestGizmoData struct {
	SnoTreasureClass DT_SNO
	Unk_2a0e071      DT_INT
	Unk_e86679d      DT_FLOAT
}

func (t *MarkerChestGizmoData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoTreasureClass, r, &Options{
		Flags: 1,
		Group: 52,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.Unk_2a0e071, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.Unk_e86679d, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+12, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *MarkerChestGizmoData) Walk(cb WalkCallback, d ...any) {
	cb.Do("SnoTreasureClass", &t.SnoTreasureClass, d...)
	cb.Do("Unk_2a0e071", &t.Unk_2a0e071, d...)
	cb.Do("Unk_e86679d", &t.Unk_e86679d, d...)
}

type UIStackPanelStyle struct {
	// Inherits UIWindowStyle
	// Inherits UIControlStyle
	// Inherits PolymorphicBase
	DwType                    DT_UINT
	DwPad                     DT_UINT
	HParentStyle              UIControlHandle
	Unk_441f783               DT_INT64
	M_eHasModifiedPowerTagMap DT_TAGMAP[*DT_ENUM]
	TConsoleInput             UIControlConsoleInput
	Unk_b4f614c               DT_TAGMAP[*DT_ENUM]
	Unk_8e594da               DT_TAGMAP[*DT_ENUM]
}

func (t *UIStackPanelStyle) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.HParentStyle, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_441f783, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.M_eHasModifiedPowerTagMap, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.TConsoleInput, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.Unk_b4f614c, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.Unk_8e594da, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+96, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *UIStackPanelStyle) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("HParentStyle", &t.HParentStyle, d...)
	cb.Do("Unk_441f783", &t.Unk_441f783, d...)
	cb.Do("M_eHasModifiedPowerTagMap", &t.M_eHasModifiedPowerTagMap, d...)
	cb.Do("TConsoleInput", &t.TConsoleInput, d...)
	cb.Do("Unk_b4f614c", &t.Unk_b4f614c, d...)
	cb.Do("Unk_8e594da", &t.Unk_8e594da, d...)
}

type JoinExistingGameMessage struct {
	THeader       RequiredMessageHeader
	IdSGame       DT_INT
	EXLocale      DT_ENUM
	FlAspectRatio DT_FLOAT
	UProtocolHash DT_UINT
	AtPlayers     DT_FIXEDARRAY[*JoinExistingGamePlayer]
	TTrace        TraceMessage
}

func (t *JoinExistingGameMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.IdSGame, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.EXLocale, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.FlAspectRatio, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.UProtocolHash, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.AtPlayers, r, &Options{
		ArrayLength: 2,
		Flags:       8,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+344, &t.TTrace, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+424, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *JoinExistingGameMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("IdSGame", &t.IdSGame, d...)
	cb.Do("EXLocale", &t.EXLocale, d...)
	cb.Do("FlAspectRatio", &t.FlAspectRatio, d...)
	cb.Do("UProtocolHash", &t.UProtocolHash, d...)
	cb.Do("AtPlayers", &t.AtPlayers, d...)
	cb.Do("TTrace", &t.TTrace, d...)
}

type MarkerHeightFieldData struct {
	// Inherits MarkerDataBase
	// Inherits PolymorphicBase
	DwType                         DT_UINT
	DwPad                          DT_UINT
	NHeightSampleDensity           DT_INT
	Unk_b677151                    DT_INT
	SnoBaseMaterial                DT_SNO
	FlSystemDuration               DT_FLOAT
	TWaveSettings                  HeightFieldWaveSettings
	Unk_fb50809                    DT_FLOAT
	ArAtlasTextures                DT_VARIABLEARRAY[*MarkerHeightFieldTexture]
	ArIndices                      DT_VARIABLEARRAY[*DT_WORD]
	IbidIndices                    DT_INT
	Unk_f481a51                    DT_INT
	ArLookVariantMaterialMap       DT_VARIABLEARRAY[*LookVariantMaterialMap]
	ArConditionalMaterialOverrides DT_VARIABLEARRAY[*ConditionalMaterialOverride]
	ArLines                        DT_VARIABLEARRAY[*MarkerHeightFieldLine]
}

func (t *MarkerHeightFieldData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.NHeightSampleDensity, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.Unk_b677151, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SnoBaseMaterial, r, &Options{
		Flags: 1,
		Group: 57,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.FlSystemDuration, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.TWaveSettings, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.Unk_fb50809, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.ArAtlasTextures, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.ArIndices, r, &Options{Flags: 2097152}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.IbidIndices, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.Unk_f481a51, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.ArLookVariantMaterialMap, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.ArConditionalMaterialOverrides, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.ArLines, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+144, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *MarkerHeightFieldData) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("NHeightSampleDensity", &t.NHeightSampleDensity, d...)
	cb.Do("Unk_b677151", &t.Unk_b677151, d...)
	cb.Do("SnoBaseMaterial", &t.SnoBaseMaterial, d...)
	cb.Do("FlSystemDuration", &t.FlSystemDuration, d...)
	cb.Do("TWaveSettings", &t.TWaveSettings, d...)
	cb.Do("Unk_fb50809", &t.Unk_fb50809, d...)
	cb.Do("ArAtlasTextures", &t.ArAtlasTextures, d...)
	cb.Do("ArIndices", &t.ArIndices, d...)
	cb.Do("IbidIndices", &t.IbidIndices, d...)
	cb.Do("Unk_f481a51", &t.Unk_f481a51, d...)
	cb.Do("ArLookVariantMaterialMap", &t.ArLookVariantMaterialMap, d...)
	cb.Do("ArConditionalMaterialOverrides", &t.ArConditionalMaterialOverrides, d...)
	cb.Do("ArLines", &t.ArLines, d...)
}

type MarkerHeightFieldLine struct {
	ArSections DT_VARIABLEARRAY[*MarkerHeightFieldSection]
}

func (t *MarkerHeightFieldLine) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.ArSections, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *MarkerHeightFieldLine) Walk(cb WalkCallback, d ...any) {
	cb.Do("ArSections", &t.ArSections, d...)
}

type UIWindowStyleOptionalFieldMapDefaults struct {
	NLeft                            DT_INT
	NTop                             DT_INT
	NWidth                           DT_INT
	NHeight                          DT_INT
	NRight                           DT_INT
	NBottom                          DT_INT
	NMaxWidth                        DT_INT
	NMaxHeight                       DT_INT
	NMinWidth                        DT_INT
	NMinHeight                       DT_INT
	HTooltipText                     StringLabelHandleEx
	ETooltipTextJustify              DT_ENUM
	NTooltip                         DT_CSTRING[*DT_BYTE]
	NTooltipOffsetX                  DT_INT
	NTooltipOffsetY                  DT_INT
	ETooltipAlignHorizontal          DT_ENUM
	ETooltipAlignVertical            DT_ENUM
	NTooltipWidth                    DT_INT
	Unk_bffade6                      DT_FLOAT
	DwAlpha                          DT_BYTE
	EAlphaInheritanceType            DT_ENUM
	SnoShader                        DT_SNO
	Unk_fdd6382                      DT_VARIABLEARRAY[*UIEffect]
	Unk_3c22535                      DT_VARIABLEARRAY[*UIEffect]
	TOnClickEffect                   UIEffect
	Unk_4c24000                      DT_INT
	HImageFrame                      UIImageHandleReference
	HMaskImage                       UIImageHandleReference
	HHitMaskImage                    UIImageHandleReference
	Unk_902601b                      DT_INT
	HImageRenderSourceOverlay        UIImageHandleReference
	SnoChildHoverTiledStyle          DT_SNO
	Unk_7cf5f9e                      DT_SNO
	BWinDraggable                    DT_INT
	Unk_849b3d9                      DT_INT
	Unk_f9614a9                      DT_INT
	EClipBehavior                    DT_ENUM
	BRolledUp                        DT_INT
	BEncloseChildren                 DT_INT
	Unk_b0ab75a                      DT_INT
	Unk_52796f5                      DT_INT
	Unk_f6e00c8                      DT_INT
	Unk_ab7c81f                      DT_INT
	Unk_90fbd84                      DT_INT
	Unk_28714d                       DT_INT
	BWindowIsInputFocusGroup         DT_INT
	NInputFocusOrder                 DT_INT
	EVisibilityCondition             DT_ENUM
	SnoTiledStyle                    DT_SNO
	SnoControllerHighlightTiledStyle DT_SNO
	Unk_3dc9f06                      DT_INT
	Unk_3dc9f07                      DT_INT
	Unk_438e5c1                      DT_INT
	EWindowEatsClicks                DT_ENUM
	BContextMenuToggle               DT_INT
	SzOnClick                        DT_CSTRING[*DT_BYTE]
	SzOnLMBHeld                      DT_CSTRING[*DT_BYTE]
	Unk_c6ae8ed                      DT_INT
	SzOnDoubleClick                  DT_CSTRING[*DT_BYTE]
	SzOnRightClick                   DT_CSTRING[*DT_BYTE]
	SzOnRMBHeld                      DT_CSTRING[*DT_BYTE]
	Unk_1894e73                      DT_INT
	SzOnMiddleClick                  DT_CSTRING[*DT_BYTE]
	SzOnDragStart                    DT_CSTRING[*DT_BYTE]
	SzOnDrag                         DT_CSTRING[*DT_BYTE]
	SzOnDragStop                     DT_CSTRING[*DT_BYTE]
	BIsDragTarget                    DT_INT
	SzOnDragTargetRelease            DT_CSTRING[*DT_BYTE]
	SzOnContextMenu                  DT_CSTRING[*DT_BYTE]
	Unk_d31cd22                      DT_INT
	Unk_37f7289                      DT_INT
	Unk_354e749                      DT_INT
	Unk_63b1deb                      DT_INT
	Unk_26045e0                      DT_INT
	SzChangedArsenal                 DT_CSTRING[*DT_BYTE]
	FlRotation                       DT_FLOAT
	VecPivot                         DT_VECTOR2D
	BMirrorX                         DT_INT
	BMirrorY                         DT_INT
	BNoSnap                          DT_INT
	Unk_93cbaa8                      DT_ENUM
	Unk_3d55658                      DT_ENUM
	RgbaTint                         DT_RGBACOLOR
	RgbaForeground                   DT_RGBACOLOR
	RgbaForegroundDisabled           DT_RGBACOLOR
	RgbaDropShadow                   DT_RGBACOLOR
	RgbaChildHoverForeground         DT_RGBACOLOR
	RgbaChildHoverForegroundDisabled DT_RGBACOLOR
}

func (t *UIWindowStyleOptionalFieldMapDefaults) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.NLeft, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.NTop, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.NWidth, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.NHeight, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.NRight, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.NBottom, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.NMaxWidth, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.NMaxHeight, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.NMinWidth, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.NMinHeight, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.HTooltipText, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.ETooltipTextJustify, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.NTooltip, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.NTooltipOffsetX, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.NTooltipOffsetY, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.ETooltipAlignHorizontal, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.ETooltipAlignVertical, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.NTooltipWidth, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.Unk_bffade6, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.DwAlpha, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+100, &t.EAlphaInheritanceType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+104, &t.SnoShader, r, &Options{
		Flags: 1,
		Group: 37,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.Unk_fdd6382, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.Unk_3c22535, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+144, &t.TOnClickEffect, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+184, &t.Unk_4c24000, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+188, &t.HImageFrame, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+192, &t.HMaskImage, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+196, &t.HHitMaskImage, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+200, &t.Unk_902601b, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+204, &t.HImageRenderSourceOverlay, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+208, &t.SnoChildHoverTiledStyle, r, &Options{
		Flags: 1,
		Group: 103,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+212, &t.Unk_7cf5f9e, r, &Options{
		Flags: 1,
		Group: 7,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+216, &t.BWinDraggable, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+220, &t.Unk_849b3d9, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+224, &t.Unk_f9614a9, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+228, &t.EClipBehavior, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+232, &t.BRolledUp, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+236, &t.BEncloseChildren, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+240, &t.Unk_b0ab75a, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+244, &t.Unk_52796f5, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+248, &t.Unk_f6e00c8, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+252, &t.Unk_ab7c81f, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+256, &t.Unk_90fbd84, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+260, &t.Unk_28714d, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+264, &t.BWindowIsInputFocusGroup, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+268, &t.NInputFocusOrder, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+272, &t.EVisibilityCondition, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+276, &t.SnoTiledStyle, r, &Options{
		Flags: 1,
		Group: 103,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+280, &t.SnoControllerHighlightTiledStyle, r, &Options{
		Flags: 1,
		Group: 103,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+284, &t.Unk_3dc9f06, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+288, &t.Unk_3dc9f07, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+292, &t.Unk_438e5c1, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+296, &t.EWindowEatsClicks, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+300, &t.BContextMenuToggle, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+304, &t.SzOnClick, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+320, &t.SzOnLMBHeld, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+336, &t.Unk_c6ae8ed, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+344, &t.SzOnDoubleClick, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+360, &t.SzOnRightClick, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+376, &t.SzOnRMBHeld, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+392, &t.Unk_1894e73, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+400, &t.SzOnMiddleClick, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+416, &t.SzOnDragStart, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+432, &t.SzOnDrag, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+448, &t.SzOnDragStop, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+464, &t.BIsDragTarget, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+472, &t.SzOnDragTargetRelease, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+488, &t.SzOnContextMenu, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+504, &t.Unk_d31cd22, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+508, &t.Unk_37f7289, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+512, &t.Unk_354e749, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+516, &t.Unk_63b1deb, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+520, &t.Unk_26045e0, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+528, &t.SzChangedArsenal, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+544, &t.FlRotation, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+548, &t.VecPivot, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+556, &t.BMirrorX, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+560, &t.BMirrorY, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+564, &t.BNoSnap, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+568, &t.Unk_93cbaa8, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+572, &t.Unk_3d55658, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+576, &t.RgbaTint, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+580, &t.RgbaForeground, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+584, &t.RgbaForegroundDisabled, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+588, &t.RgbaDropShadow, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+592, &t.RgbaChildHoverForeground, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+596, &t.RgbaChildHoverForegroundDisabled, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+600, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *UIWindowStyleOptionalFieldMapDefaults) Walk(cb WalkCallback, d ...any) {
	cb.Do("NLeft", &t.NLeft, d...)
	cb.Do("NTop", &t.NTop, d...)
	cb.Do("NWidth", &t.NWidth, d...)
	cb.Do("NHeight", &t.NHeight, d...)
	cb.Do("NRight", &t.NRight, d...)
	cb.Do("NBottom", &t.NBottom, d...)
	cb.Do("NMaxWidth", &t.NMaxWidth, d...)
	cb.Do("NMaxHeight", &t.NMaxHeight, d...)
	cb.Do("NMinWidth", &t.NMinWidth, d...)
	cb.Do("NMinHeight", &t.NMinHeight, d...)
	cb.Do("HTooltipText", &t.HTooltipText, d...)
	cb.Do("ETooltipTextJustify", &t.ETooltipTextJustify, d...)
	cb.Do("NTooltip", &t.NTooltip, d...)
	cb.Do("NTooltipOffsetX", &t.NTooltipOffsetX, d...)
	cb.Do("NTooltipOffsetY", &t.NTooltipOffsetY, d...)
	cb.Do("ETooltipAlignHorizontal", &t.ETooltipAlignHorizontal, d...)
	cb.Do("ETooltipAlignVertical", &t.ETooltipAlignVertical, d...)
	cb.Do("NTooltipWidth", &t.NTooltipWidth, d...)
	cb.Do("Unk_bffade6", &t.Unk_bffade6, d...)
	cb.Do("DwAlpha", &t.DwAlpha, d...)
	cb.Do("EAlphaInheritanceType", &t.EAlphaInheritanceType, d...)
	cb.Do("SnoShader", &t.SnoShader, d...)
	cb.Do("Unk_fdd6382", &t.Unk_fdd6382, d...)
	cb.Do("Unk_3c22535", &t.Unk_3c22535, d...)
	cb.Do("TOnClickEffect", &t.TOnClickEffect, d...)
	cb.Do("Unk_4c24000", &t.Unk_4c24000, d...)
	cb.Do("HImageFrame", &t.HImageFrame, d...)
	cb.Do("HMaskImage", &t.HMaskImage, d...)
	cb.Do("HHitMaskImage", &t.HHitMaskImage, d...)
	cb.Do("Unk_902601b", &t.Unk_902601b, d...)
	cb.Do("HImageRenderSourceOverlay", &t.HImageRenderSourceOverlay, d...)
	cb.Do("SnoChildHoverTiledStyle", &t.SnoChildHoverTiledStyle, d...)
	cb.Do("Unk_7cf5f9e", &t.Unk_7cf5f9e, d...)
	cb.Do("BWinDraggable", &t.BWinDraggable, d...)
	cb.Do("Unk_849b3d9", &t.Unk_849b3d9, d...)
	cb.Do("Unk_f9614a9", &t.Unk_f9614a9, d...)
	cb.Do("EClipBehavior", &t.EClipBehavior, d...)
	cb.Do("BRolledUp", &t.BRolledUp, d...)
	cb.Do("BEncloseChildren", &t.BEncloseChildren, d...)
	cb.Do("Unk_b0ab75a", &t.Unk_b0ab75a, d...)
	cb.Do("Unk_52796f5", &t.Unk_52796f5, d...)
	cb.Do("Unk_f6e00c8", &t.Unk_f6e00c8, d...)
	cb.Do("Unk_ab7c81f", &t.Unk_ab7c81f, d...)
	cb.Do("Unk_90fbd84", &t.Unk_90fbd84, d...)
	cb.Do("Unk_28714d", &t.Unk_28714d, d...)
	cb.Do("BWindowIsInputFocusGroup", &t.BWindowIsInputFocusGroup, d...)
	cb.Do("NInputFocusOrder", &t.NInputFocusOrder, d...)
	cb.Do("EVisibilityCondition", &t.EVisibilityCondition, d...)
	cb.Do("SnoTiledStyle", &t.SnoTiledStyle, d...)
	cb.Do("SnoControllerHighlightTiledStyle", &t.SnoControllerHighlightTiledStyle, d...)
	cb.Do("Unk_3dc9f06", &t.Unk_3dc9f06, d...)
	cb.Do("Unk_3dc9f07", &t.Unk_3dc9f07, d...)
	cb.Do("Unk_438e5c1", &t.Unk_438e5c1, d...)
	cb.Do("EWindowEatsClicks", &t.EWindowEatsClicks, d...)
	cb.Do("BContextMenuToggle", &t.BContextMenuToggle, d...)
	cb.Do("SzOnClick", &t.SzOnClick, d...)
	cb.Do("SzOnLMBHeld", &t.SzOnLMBHeld, d...)
	cb.Do("Unk_c6ae8ed", &t.Unk_c6ae8ed, d...)
	cb.Do("SzOnDoubleClick", &t.SzOnDoubleClick, d...)
	cb.Do("SzOnRightClick", &t.SzOnRightClick, d...)
	cb.Do("SzOnRMBHeld", &t.SzOnRMBHeld, d...)
	cb.Do("Unk_1894e73", &t.Unk_1894e73, d...)
	cb.Do("SzOnMiddleClick", &t.SzOnMiddleClick, d...)
	cb.Do("SzOnDragStart", &t.SzOnDragStart, d...)
	cb.Do("SzOnDrag", &t.SzOnDrag, d...)
	cb.Do("SzOnDragStop", &t.SzOnDragStop, d...)
	cb.Do("BIsDragTarget", &t.BIsDragTarget, d...)
	cb.Do("SzOnDragTargetRelease", &t.SzOnDragTargetRelease, d...)
	cb.Do("SzOnContextMenu", &t.SzOnContextMenu, d...)
	cb.Do("Unk_d31cd22", &t.Unk_d31cd22, d...)
	cb.Do("Unk_37f7289", &t.Unk_37f7289, d...)
	cb.Do("Unk_354e749", &t.Unk_354e749, d...)
	cb.Do("Unk_63b1deb", &t.Unk_63b1deb, d...)
	cb.Do("Unk_26045e0", &t.Unk_26045e0, d...)
	cb.Do("SzChangedArsenal", &t.SzChangedArsenal, d...)
	cb.Do("FlRotation", &t.FlRotation, d...)
	cb.Do("VecPivot", &t.VecPivot, d...)
	cb.Do("BMirrorX", &t.BMirrorX, d...)
	cb.Do("BMirrorY", &t.BMirrorY, d...)
	cb.Do("BNoSnap", &t.BNoSnap, d...)
	cb.Do("Unk_93cbaa8", &t.Unk_93cbaa8, d...)
	cb.Do("Unk_3d55658", &t.Unk_3d55658, d...)
	cb.Do("RgbaTint", &t.RgbaTint, d...)
	cb.Do("RgbaForeground", &t.RgbaForeground, d...)
	cb.Do("RgbaForegroundDisabled", &t.RgbaForegroundDisabled, d...)
	cb.Do("RgbaDropShadow", &t.RgbaDropShadow, d...)
	cb.Do("RgbaChildHoverForeground", &t.RgbaChildHoverForeground, d...)
	cb.Do("RgbaChildHoverForegroundDisabled", &t.RgbaChildHoverForegroundDisabled, d...)
}

type PlayerUnpossessActorMessage struct {
	THeader               RequiredMessageHeader
	DwPlayerGameAccountId DT_UINT
}

func (t *PlayerUnpossessActorMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.DwPlayerGameAccountId, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+20, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PlayerUnpossessActorMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("DwPlayerGameAccountId", &t.DwPlayerGameAccountId, d...)
}

type DataIDDataMessage struct {
	THeader RequiredMessageHeader
	Id      DT_INT
}

func (t *DataIDDataMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Id, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+20, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *DataIDDataMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("Id", &t.Id, d...)
}

type QuestObjectiveSet struct {
	DwUID                              DT_UINT
	PtLink                             DT_VARIABLEARRAY[*QuestObjectiveSetLink]
	ArCallbacks                        DT_VARIABLEARRAY[*QuestCallback]
	BGiveFirstTimeReward               DT_INT
	SnoFirstTimeRewardDisplayItem      DT_SNO
	TFirstTimeReward                   QuestReward
	TReward                            QuestReward
	TKeyedDungeonReward                QuestReward
	Unk_8c63f3c                        DT_INT
	SnoObjectiveDiscoveredConversation DT_SNO
	ArQuestItemsToRemove               DT_VARIABLEARRAY[*DT_SNO]
}

func (t *QuestObjectiveSet) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.DwUID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.PtLink, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ArCallbacks, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.BGiveFirstTimeReward, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.SnoFirstTimeRewardDisplayItem, r, &Options{
		Flags: 1,
		Group: 73,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.TFirstTimeReward, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.TReward, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+144, &t.TKeyedDungeonReward, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+192, &t.Unk_8c63f3c, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+196, &t.SnoObjectiveDiscoveredConversation, r, &Options{
		Flags: 1,
		Group: 12,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+200, &t.ArQuestItemsToRemove, r, &Options{
		Flags: 1,
		Group: 73,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+216, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *QuestObjectiveSet) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwUID", &t.DwUID, d...)
	cb.Do("PtLink", &t.PtLink, d...)
	cb.Do("ArCallbacks", &t.ArCallbacks, d...)
	cb.Do("BGiveFirstTimeReward", &t.BGiveFirstTimeReward, d...)
	cb.Do("SnoFirstTimeRewardDisplayItem", &t.SnoFirstTimeRewardDisplayItem, d...)
	cb.Do("TFirstTimeReward", &t.TFirstTimeReward, d...)
	cb.Do("TReward", &t.TReward, d...)
	cb.Do("TKeyedDungeonReward", &t.TKeyedDungeonReward, d...)
	cb.Do("Unk_8c63f3c", &t.Unk_8c63f3c, d...)
	cb.Do("SnoObjectiveDiscoveredConversation", &t.SnoObjectiveDiscoveredConversation, d...)
	cb.Do("ArQuestItemsToRemove", &t.ArQuestItemsToRemove, d...)
}

type Type_11c81cb7 struct {
	THeader      RequiredMessageHeader
	Ann          DT_ACD_NETWORK_NAME
	NKey         DT_INT64
	NIntValue    DT_INT
	FlFloatValue DT_FLOAT
}

func (t *Type_11c81cb7) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Ann, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.NKey, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.NIntValue, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.FlFloatValue, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+40, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_11c81cb7) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("Ann", &t.Ann, d...)
	cb.Do("NKey", &t.NKey, d...)
	cb.Do("NIntValue", &t.NIntValue, d...)
	cb.Do("FlFloatValue", &t.FlFloatValue, d...)
}

type AudioMonsterCategory struct {
	SzName      DT_UINT
	NScore      DT_INT
	Unk_8105d80 InterpolationPath_float
	Unk_bb98fd8 DT_CSTRING[*DT_BYTE]
}

func (t *AudioMonsterCategory) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SzName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.NScore, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.Unk_8105d80, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.Unk_bb98fd8, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+80, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *AudioMonsterCategory) Walk(cb WalkCallback, d ...any) {
	cb.Do("SzName", &t.SzName, d...)
	cb.Do("NScore", &t.NScore, d...)
	cb.Do("Unk_8105d80", &t.Unk_8105d80, d...)
	cb.Do("Unk_bb98fd8", &t.Unk_bb98fd8, d...)
}

type TriggerEventAttachSpawnedActor struct {
	// Inherits TriggerEvent
	// Inherits PolymorphicBase
	DwType          DT_UINT
	DwPad           DT_UINT
	TConditions     TriggerConditions
	FGenerated      DT_INT
	Unk_6cba752     DT_INT
	DwParentActorID DT_UINT
	DwID            DT_UINT
	THardpointLink  HardpointLink
}

func (t *TriggerEventAttachSpawnedActor) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.FGenerated, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_6cba752, r, &Options{Flags: 16}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.DwParentActorID, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.DwID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.THardpointLink, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+96, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TriggerEventAttachSpawnedActor) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("TConditions", &t.TConditions, d...)
	cb.Do("FGenerated", &t.FGenerated, d...)
	cb.Do("Unk_6cba752", &t.Unk_6cba752, d...)
	cb.Do("DwParentActorID", &t.DwParentActorID, d...)
	cb.Do("DwID", &t.DwID, d...)
	cb.Do("THardpointLink", &t.THardpointLink, d...)
}

type DestroyOnProximityGizmoData struct {
	// Inherits ActorGizmoData
	// Inherits PolymorphicBase
	DwType                           DT_UINT
	DwPad                            DT_UINT
	FDisableNonFriendlyOperation     DT_INT
	FWalkToCenter                    DT_INT
	FGizmoStartsDisabled             DT_INT
	FUseStringListName               DT_INT
	FForceMinimapIcon                DT_INT
	FlOperationRadius                DT_FLOAT
	Unk_d0b1df5                      DT_FLOAT
	FlGizmoUseTime                   DT_FLOAT
	SnoChannelingEffect              DT_SNO
	Unk_2767229                      DT_INT
	FGizmoShowProgressBar            DT_INT
	Unk_6d9ebe1                      DT_INT
	Unk_5456245                      DT_INT
	Unk_af5815a                      DT_INT
	SnoOnClickEffect                 DT_SNO
	SnoPickedUpEffect                DT_SNO
	SnoDropOnGroundEffect            DT_SNO
	TConditionData                   GizmoConditionData
	SnoPowerOperator                 DT_SNO
	SnoPowerOperate                  DT_SNO
	SnoPowerOperatorActive           DT_SNO
	SnoPowerOperateActive            DT_SNO
	Unk_359810e                      DT_INT
	NCooldown                        DT_UINT
	Unk_9c8478e                      DT_UINT
	Unk_d45ed2d                      DT_INT
	Unk_f6b20b7                      DT_INT
	Unk_54513b8                      DT_INT
	Unk_fd1f378                      DT_UINT
	HGizmoOperateFlavorTextMsgLabel  DT_UINT
	HGizmoOperateDescriptionMsgLabel DT_UINT
	FlGizmoOperateOffset             DT_FLOAT
	Unk_ab58cd3                      DT_ENUM
	Unk_91a3966                      DT_UINT
	HGizmoChannelingLabel            DT_UINT
	Unk_4be4371                      DT_INT
	PtProxData                       DT_POLYMORPHIC_VARIABLEARRAY[*ProximityDataBase]
	SnoDeathPower                    DT_SNO
}

func (t *DestroyOnProximityGizmoData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.FDisableNonFriendlyOperation, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.FWalkToCenter, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.FGizmoStartsDisabled, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.FUseStringListName, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.FForceMinimapIcon, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.FlOperationRadius, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.Unk_d0b1df5, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.FlGizmoUseTime, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.SnoChannelingEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.Unk_2767229, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.FGizmoShowProgressBar, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+60, &t.Unk_6d9ebe1, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.Unk_5456245, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.Unk_af5815a, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.SnoOnClickEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.SnoPickedUpEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.SnoDropOnGroundEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.TConditionData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.SnoPowerOperator, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.SnoPowerOperate, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.SnoPowerOperatorActive, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+100, &t.SnoPowerOperateActive, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+104, &t.Unk_359810e, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+108, &t.NCooldown, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.Unk_9c8478e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+116, &t.Unk_d45ed2d, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.Unk_f6b20b7, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+124, &t.Unk_54513b8, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.Unk_fd1f378, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+132, &t.HGizmoOperateFlavorTextMsgLabel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+136, &t.HGizmoOperateDescriptionMsgLabel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+140, &t.FlGizmoOperateOffset, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+144, &t.Unk_ab58cd3, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+148, &t.Unk_91a3966, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+152, &t.HGizmoChannelingLabel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+156, &t.Unk_4be4371, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+160, &t.PtProxData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+184, &t.SnoDeathPower, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+192, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *DestroyOnProximityGizmoData) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("FDisableNonFriendlyOperation", &t.FDisableNonFriendlyOperation, d...)
	cb.Do("FWalkToCenter", &t.FWalkToCenter, d...)
	cb.Do("FGizmoStartsDisabled", &t.FGizmoStartsDisabled, d...)
	cb.Do("FUseStringListName", &t.FUseStringListName, d...)
	cb.Do("FForceMinimapIcon", &t.FForceMinimapIcon, d...)
	cb.Do("FlOperationRadius", &t.FlOperationRadius, d...)
	cb.Do("Unk_d0b1df5", &t.Unk_d0b1df5, d...)
	cb.Do("FlGizmoUseTime", &t.FlGizmoUseTime, d...)
	cb.Do("SnoChannelingEffect", &t.SnoChannelingEffect, d...)
	cb.Do("Unk_2767229", &t.Unk_2767229, d...)
	cb.Do("FGizmoShowProgressBar", &t.FGizmoShowProgressBar, d...)
	cb.Do("Unk_6d9ebe1", &t.Unk_6d9ebe1, d...)
	cb.Do("Unk_5456245", &t.Unk_5456245, d...)
	cb.Do("Unk_af5815a", &t.Unk_af5815a, d...)
	cb.Do("SnoOnClickEffect", &t.SnoOnClickEffect, d...)
	cb.Do("SnoPickedUpEffect", &t.SnoPickedUpEffect, d...)
	cb.Do("SnoDropOnGroundEffect", &t.SnoDropOnGroundEffect, d...)
	cb.Do("TConditionData", &t.TConditionData, d...)
	cb.Do("SnoPowerOperator", &t.SnoPowerOperator, d...)
	cb.Do("SnoPowerOperate", &t.SnoPowerOperate, d...)
	cb.Do("SnoPowerOperatorActive", &t.SnoPowerOperatorActive, d...)
	cb.Do("SnoPowerOperateActive", &t.SnoPowerOperateActive, d...)
	cb.Do("Unk_359810e", &t.Unk_359810e, d...)
	cb.Do("NCooldown", &t.NCooldown, d...)
	cb.Do("Unk_9c8478e", &t.Unk_9c8478e, d...)
	cb.Do("Unk_d45ed2d", &t.Unk_d45ed2d, d...)
	cb.Do("Unk_f6b20b7", &t.Unk_f6b20b7, d...)
	cb.Do("Unk_54513b8", &t.Unk_54513b8, d...)
	cb.Do("Unk_fd1f378", &t.Unk_fd1f378, d...)
	cb.Do("HGizmoOperateFlavorTextMsgLabel", &t.HGizmoOperateFlavorTextMsgLabel, d...)
	cb.Do("HGizmoOperateDescriptionMsgLabel", &t.HGizmoOperateDescriptionMsgLabel, d...)
	cb.Do("FlGizmoOperateOffset", &t.FlGizmoOperateOffset, d...)
	cb.Do("Unk_ab58cd3", &t.Unk_ab58cd3, d...)
	cb.Do("Unk_91a3966", &t.Unk_91a3966, d...)
	cb.Do("HGizmoChannelingLabel", &t.HGizmoChannelingLabel, d...)
	cb.Do("Unk_4be4371", &t.Unk_4be4371, d...)
	cb.Do("PtProxData", &t.PtProxData, d...)
	cb.Do("SnoDeathPower", &t.SnoDeathPower, d...)
}

type Type_1259dca8 struct {
	SnoWorld         DT_SNO
	SnoPortraitWorld DT_SNO
	SnoActor         DT_SNO
}

func (t *Type_1259dca8) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoWorld, r, &Options{
		Flags: 513,
		Group: 48,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.SnoPortraitWorld, r, &Options{
		Flags: 513,
		Group: 48,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.SnoActor, r, &Options{
		Flags: 1,
		Group: 1,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+12, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_1259dca8) Walk(cb WalkCallback, d ...any) {
	cb.Do("SnoWorld", &t.SnoWorld, d...)
	cb.Do("SnoPortraitWorld", &t.SnoPortraitWorld, d...)
	cb.Do("SnoActor", &t.SnoActor, d...)
}

type StoryboardGenericTrack struct {
	// Inherits StoryboardTrack
	// Inherits PolymorphicBase
	DwType DT_UINT
	DwPad  DT_UINT
}

func (t *StoryboardGenericTrack) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *StoryboardGenericTrack) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
}

type FogVolumeDefinition struct {
	TInstanceData FogVolumeInstanceData
	VecScale      DT_VECTOR3D
}

func (t *FogVolumeDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.TInstanceData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+144, &t.VecScale, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+160, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *FogVolumeDefinition) Walk(cb WalkCallback, d ...any) {
	cb.Do("TInstanceData", &t.TInstanceData, d...)
	cb.Do("VecScale", &t.VecScale, d...)
}

type TexAnimTranslationCurve struct {
	// Inherits TexAnim
	// Inherits PolymorphicBase
	DwType        DT_UINT
	DwPad         DT_UINT
	FlUScale      DT_FLOAT
	FlVScale      DT_FLOAT
	PathU         InterpolationPath_float
	PathV         InterpolationPath_float
	DwAnimFlags   DT_UINT
	TUScaleScalar InterpolationScalar
	TVScaleScalar InterpolationScalar
}

func (t *TexAnimTranslationCurve) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.FlUScale, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.FlVScale, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.PathU, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.PathV, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+136, &t.DwAnimFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+140, &t.TUScaleScalar, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+172, &t.TVScaleScalar, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+208, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TexAnimTranslationCurve) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("FlUScale", &t.FlUScale, d...)
	cb.Do("FlVScale", &t.FlVScale, d...)
	cb.Do("PathU", &t.PathU, d...)
	cb.Do("PathV", &t.PathV, d...)
	cb.Do("DwAnimFlags", &t.DwAnimFlags, d...)
	cb.Do("TUScaleScalar", &t.TUScaleScalar, d...)
	cb.Do("TVScaleScalar", &t.TVScaleScalar, d...)
}

type FoliageSettings struct {
	FlExplosionFactor DT_FLOAT
	FlFrequency       DT_FLOAT
	FlDampingRatio    DT_FLOAT
	FlMaxOffsetFactor DT_FLOAT
	FlRadiusRatio     DT_FLOAT
	SnoSoundDisturbed DT_SNO
	SnoSoundImpact    DT_SNO
	SnoAmbientSound   DT_SNO
	Unk_620b5c3       DT_FLOAT
	Unk_bf229f9       DT_FLOAT
}

func (t *FoliageSettings) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.FlExplosionFactor, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.FlFrequency, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.FlDampingRatio, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.FlMaxOffsetFactor, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.FlRadiusRatio, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.SnoSoundDisturbed, r, &Options{
		Flags: 1,
		Group: 40,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SnoSoundImpact, r, &Options{
		Flags: 1,
		Group: 40,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.SnoAmbientSound, r, &Options{
		Flags: 1,
		Group: 5,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.Unk_620b5c3, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.Unk_bf229f9, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+40, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *FoliageSettings) Walk(cb WalkCallback, d ...any) {
	cb.Do("FlExplosionFactor", &t.FlExplosionFactor, d...)
	cb.Do("FlFrequency", &t.FlFrequency, d...)
	cb.Do("FlDampingRatio", &t.FlDampingRatio, d...)
	cb.Do("FlMaxOffsetFactor", &t.FlMaxOffsetFactor, d...)
	cb.Do("FlRadiusRatio", &t.FlRadiusRatio, d...)
	cb.Do("SnoSoundDisturbed", &t.SnoSoundDisturbed, d...)
	cb.Do("SnoSoundImpact", &t.SnoSoundImpact, d...)
	cb.Do("SnoAmbientSound", &t.SnoAmbientSound, d...)
	cb.Do("Unk_620b5c3", &t.Unk_620b5c3, d...)
	cb.Do("Unk_bf229f9", &t.Unk_bf229f9, d...)
}

type PowerConditionIsSpecificActor struct {
	// Inherits PowerConditionBase
	// Inherits PolymorphicBase
	DwType   DT_UINT
	BInverse DT_INT
	DwPad    DT_UINT
	ESubject DT_ENUM
	SnoActor DT_SNO
}

func (t *PowerConditionIsSpecificActor) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BInverse, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ESubject, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.SnoActor, r, &Options{
		Flags: 513,
		Group: 1,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PowerConditionIsSpecificActor) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("BInverse", &t.BInverse, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("ESubject", &t.ESubject, d...)
	cb.Do("SnoActor", &t.SnoActor, d...)
}

type BoxProximityData struct {
	// Inherits ProximityDataBase
	// Inherits PolymorphicBase
	DwType DT_UINT
	DwPad  DT_UINT
	WvOBB  DT_VECTOR3D
}

func (t *BoxProximityData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.WvOBB, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *BoxProximityData) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("WvOBB", &t.WvOBB, d...)
}

type SceneSpecification struct {
	DwFlags                 DT_UINT
	SnoLevelArea            DT_SNO
	UProceduralEntranceName DT_STARTLOC_NAME
	SnoPrevWorld            DT_SNO
	UPrevEntranceGUID       DT_STARTLOC_NAME
	SnoPrevLevelArea        DT_SNO
	SnoAudioContext         DT_SNO
	SnoWeather              DT_SNO
	SnoPresetWorld          DT_SNO
	NSceneChunk             DT_INT
	ArSubzones              DT_VARIABLEARRAY[*SubzoneRelation]
}

func (t *SceneSpecification) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.DwFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.SnoLevelArea, r, &Options{
		Flags: 1,
		Group: 22,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.UProceduralEntranceName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.SnoPrevWorld, r, &Options{
		Flags: 513,
		Group: 48,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.UPrevEntranceGUID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.SnoPrevLevelArea, r, &Options{
		Flags: 513,
		Group: 22,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SnoAudioContext, r, &Options{
		Flags: 1,
		Group: 93,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.SnoWeather, r, &Options{
		Flags: 1,
		Group: 47,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.SnoPresetWorld, r, &Options{
		Flags: 512,
		Group: 48,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.NSceneChunk, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.ArSubzones, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+56, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *SceneSpecification) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwFlags", &t.DwFlags, d...)
	cb.Do("SnoLevelArea", &t.SnoLevelArea, d...)
	cb.Do("UProceduralEntranceName", &t.UProceduralEntranceName, d...)
	cb.Do("SnoPrevWorld", &t.SnoPrevWorld, d...)
	cb.Do("UPrevEntranceGUID", &t.UPrevEntranceGUID, d...)
	cb.Do("SnoPrevLevelArea", &t.SnoPrevLevelArea, d...)
	cb.Do("SnoAudioContext", &t.SnoAudioContext, d...)
	cb.Do("SnoWeather", &t.SnoWeather, d...)
	cb.Do("SnoPresetWorld", &t.SnoPresetWorld, d...)
	cb.Do("NSceneChunk", &t.NSceneChunk, d...)
	cb.Do("ArSubzones", &t.ArSubzones, d...)
}

type TriggerEventRelaxCloth struct {
	// Inherits TriggerEvent
	// Inherits PolymorphicBase
	DwType          DT_UINT
	DwPad           DT_UINT
	TConditions     TriggerConditions
	FGenerated      DT_INT
	Unk_6cba752     DT_INT
	DwParentActorID DT_UINT
	Unk_85269a4     DT_INT
	DwActorID       DT_UINT
	Unk_54489ef     DT_INT
}

func (t *TriggerEventRelaxCloth) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.FGenerated, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_6cba752, r, &Options{Flags: 16}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.DwParentActorID, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.Unk_85269a4, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.DwActorID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.Unk_54489ef, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+96, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TriggerEventRelaxCloth) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("TConditions", &t.TConditions, d...)
	cb.Do("FGenerated", &t.FGenerated, d...)
	cb.Do("Unk_6cba752", &t.Unk_6cba752, d...)
	cb.Do("DwParentActorID", &t.DwParentActorID, d...)
	cb.Do("Unk_85269a4", &t.Unk_85269a4, d...)
	cb.Do("DwActorID", &t.DwActorID, d...)
	cb.Do("Unk_54489ef", &t.Unk_54489ef, d...)
}

type OnDotReceivedBuffCallback struct {
	// Inherits BuffCallbackBase
	// Inherits PolymorphicBase
	DwType                DT_UINT
	DwPad                 DT_UINT
	SnoTriggerEffectGroup DT_SNO
	ArConditions          DT_POLYMORPHIC_VARIABLEARRAY[*DT_INT64]
}

func (t *OnDotReceivedBuffCallback) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoTriggerEffectGroup, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ArConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *OnDotReceivedBuffCallback) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("SnoTriggerEffectGroup", &t.SnoTriggerEffectGroup, d...)
	cb.Do("ArConditions", &t.ArConditions, d...)
}

type PVPGizmoMessage struct {
	THeader           RequiredMessageHeader
	SnoGizmo          DT_SNO
	WpLocation        DT_VECTOR3D
	DwCooldownEndTime DT_UINT
}

func (t *PVPGizmoMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoGizmo, r, &Options{
		Flags: 1,
		Group: 1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.WpLocation, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.DwCooldownEndTime, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+36, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PVPGizmoMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("SnoGizmo", &t.SnoGizmo, d...)
	cb.Do("WpLocation", &t.WpLocation, d...)
	cb.Do("DwCooldownEndTime", &t.DwCooldownEndTime, d...)
}

type OnPetAddBuffCallback struct {
	// Inherits BuffCallbackBase
	// Inherits PolymorphicBase
	DwType                DT_UINT
	DwPad                 DT_UINT
	SnoTriggerEffectGroup DT_SNO
	ArConditions          DT_POLYMORPHIC_VARIABLEARRAY[*DT_INT64]
}

func (t *OnPetAddBuffCallback) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoTriggerEffectGroup, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ArConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *OnPetAddBuffCallback) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("SnoTriggerEffectGroup", &t.SnoTriggerEffectGroup, d...)
	cb.Do("ArConditions", &t.ArConditions, d...)
}

type GameVariableIsSetSubcondition struct {
	// Inherits Subcondition
	// Inherits PolymorphicBase
	DwType               DT_UINT
	BNegate              DT_INT
	DwPad                DT_UINT
	GbidDesignerVariable DT_GBID
}

func (t *GameVariableIsSetSubcondition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BNegate, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.GbidDesignerVariable, r, &Options{
		Flags: 1,
		Group: 45,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *GameVariableIsSetSubcondition) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("BNegate", &t.BNegate, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("GbidDesignerVariable", &t.GbidDesignerVariable, d...)
}

type TutorialScreen struct {
	DwID     DT_UINT
	HImage   DT_UINT
	SnoMovie DT_SNO
}

func (t *TutorialScreen) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.DwID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.HImage, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.SnoMovie, r, &Options{
		Flags: 1,
		Group: 102,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+12, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TutorialScreen) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwID", &t.DwID, d...)
	cb.Do("HImage", &t.HImage, d...)
	cb.Do("SnoMovie", &t.SnoMovie, d...)
}

type GameTestingMonsterSkillSamplingStartMessage struct {
	THeader     RequiredMessageHeader
	SzGroupType DT_CHARARRAY
	SnoMonster  DT_SNO
	SnoSkill    DT_SNO
	UCount      DT_UINT
}

func (t *GameTestingMonsterSkillSamplingStartMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SzGroupType, r, &Options{
		ArrayLength: 16,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.SnoMonster, r, &Options{
		Flags: 1,
		Group: 1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.SnoSkill, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.UCount, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+44, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *GameTestingMonsterSkillSamplingStartMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("SzGroupType", &t.SzGroupType, d...)
	cb.Do("SnoMonster", &t.SnoMonster, d...)
	cb.Do("SnoSkill", &t.SnoSkill, d...)
	cb.Do("UCount", &t.UCount, d...)
}

type StoreDisclaimerData struct {
	HLabel StringLabelHandleEx
}

func (t *StoreDisclaimerData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.HLabel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *StoreDisclaimerData) Walk(cb WalkCallback, d ...any) {
	cb.Do("HLabel", &t.HLabel, d...)
}

type UIBlinkerStyle struct {
	// Inherits UITextStyle
	// Inherits UIWindowStyle
	// Inherits UIControlStyle
	// Inherits PolymorphicBase
	DwType                      DT_UINT
	DwPad                       DT_UINT
	HParentStyle                UIControlHandle
	Unk_441f783                 DT_INT64
	M_eHasModifiedPowerTagMap   DT_TAGMAP[*DT_ENUM]
	TConsoleInput               UIControlConsoleInput
	Unk_b4f614c                 DT_TAGMAP[*DT_ENUM]
	TFont                       UIControlFont
	PtUIControlTagMapIconLabels DT_TAGMAP[*DT_ENUM]
	Unk_16582db                 DT_TAGMAP[*DT_ENUM]
}

func (t *UIBlinkerStyle) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.HParentStyle, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_441f783, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.M_eHasModifiedPowerTagMap, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.TConsoleInput, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.Unk_b4f614c, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.TFont, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.PtUIControlTagMapIconLabels, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.Unk_16582db, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+128, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *UIBlinkerStyle) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("HParentStyle", &t.HParentStyle, d...)
	cb.Do("Unk_441f783", &t.Unk_441f783, d...)
	cb.Do("M_eHasModifiedPowerTagMap", &t.M_eHasModifiedPowerTagMap, d...)
	cb.Do("TConsoleInput", &t.TConsoleInput, d...)
	cb.Do("Unk_b4f614c", &t.Unk_b4f614c, d...)
	cb.Do("TFont", &t.TFont, d...)
	cb.Do("PtUIControlTagMapIconLabels", &t.PtUIControlTagMapIconLabels, d...)
	cb.Do("Unk_16582db", &t.Unk_16582db, d...)
}

type NpcLookTemplate struct {
	SzRegionName     DT_CSTRING[*DT_BYTE]
	EZone            DT_ENUM
	SzToolTip        DT_CSTRING[*DT_BYTE]
	ArNpcLookEntries DT_VARIABLEARRAY[*NpcLookEntry]
}

func (t *NpcLookTemplate) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SzRegionName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.EZone, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SzToolTip, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.ArNpcLookEntries, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+56, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *NpcLookTemplate) Walk(cb WalkCallback, d ...any) {
	cb.Do("SzRegionName", &t.SzRegionName, d...)
	cb.Do("EZone", &t.EZone, d...)
	cb.Do("SzToolTip", &t.SzToolTip, d...)
	cb.Do("ArNpcLookEntries", &t.ArNpcLookEntries, d...)
}

type PowerCrowdControlInfo struct {
	TBreaksCC   DT_STRING_FORMULA
	Unk_5143c1f DT_STRING_FORMULA
	Unk_982fe71 DT_STRING_FORMULA
}

func (t *PowerCrowdControlInfo) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.TBreaksCC, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.Unk_5143c1f, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.Unk_982fe71, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+96, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PowerCrowdControlInfo) Walk(cb WalkCallback, d ...any) {
	cb.Do("TBreaksCC", &t.TBreaksCC, d...)
	cb.Do("Unk_5143c1f", &t.Unk_5143c1f, d...)
	cb.Do("Unk_982fe71", &t.Unk_982fe71, d...)
}

type MonsterPerPlayerScalingData struct {
	Unk_6942446 DT_FLOAT
	Unk_11ed90c DT_FLOAT
	Unk_b9b72f0 DT_FLOAT
	Unk_9cca79f DT_FLOAT
	Unk_ae42774 DT_FLOAT
	Unk_5342bdc DT_FLOAT
	Unk_f2e6be7 DT_FLOAT
}

func (t *MonsterPerPlayerScalingData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Unk_6942446, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.Unk_11ed90c, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.Unk_b9b72f0, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.Unk_9cca79f, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_ae42774, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.Unk_5342bdc, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_f2e6be7, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+28, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *MonsterPerPlayerScalingData) Walk(cb WalkCallback, d ...any) {
	cb.Do("Unk_6942446", &t.Unk_6942446, d...)
	cb.Do("Unk_11ed90c", &t.Unk_11ed90c, d...)
	cb.Do("Unk_b9b72f0", &t.Unk_b9b72f0, d...)
	cb.Do("Unk_9cca79f", &t.Unk_9cca79f, d...)
	cb.Do("Unk_ae42774", &t.Unk_ae42774, d...)
	cb.Do("Unk_5342bdc", &t.Unk_5342bdc, d...)
	cb.Do("Unk_f2e6be7", &t.Unk_f2e6be7, d...)
}

type PowerDefinition struct {
	SzInternalName                       DT_CHARARRAY
	BDefensive                           DT_INT
	Unk_bd561bf                          DT_INT
	TPrimaryTag                          SkillTagStruct
	ArSkillTags                          DT_VARIABLEARRAY[*SkillTagStruct]
	ESkillCat                            DT_ENUM
	EType                                DT_ENUM
	ECategory                            DT_ENUM
	EPowerAnimPriority                   DT_ENUM
	Unk_9a3836e                          DT_ENUM
	EPowerAnimMovement                   DT_ENUM
	Unk_1450715                          DT_INT
	BChannelled                          DT_INT
	BChannelledMovement                  DT_INT
	BAutoChannelled                      DT_INT
	Unk_3837f2a                          DT_INT
	Unk_6c6eb6b                          DT_INT
	TAutoChannelledDuration              DT_STRING_FORMULA
	Unk_9aad0d1                          DT_INT
	BIsBasicAttack                       DT_INT
	BIsPassive                           DT_INT
	Unk_30531f7                          DT_INT
	BAimedPower                          DT_INT
	Unk_1f1fcc                           DT_INT
	EPowerFallback                       DT_ENUM
	Unk_49572b0                          DT_ENUM
	EPowerTargetingType                  DT_ENUM
	ArLinkedPassivePowers                DT_VARIABLEARRAY[*DT_SNO]
	SnoEnchantmentPower                  DT_SNO
	SnoMountedRiderPower                 DT_SNO
	BUsesWeaponExpertise                 DT_INT
	Unk_fca3b69                          DT_INT
	BIgnoreSkillRanks                    DT_INT
	SnoPowerAnimationOverride            DT_SNO
	BPreplayAnimation                    DT_INT
	Unk_99e0ced                          DT_INT
	EAnimationLayer                      DT_ENUM
	Unk_3616d3                           DT_ENUM
	Unk_41a3d22                          DT_INT
	Unk_2df4181                          DT_INT
	BSetLookAtTarget                     DT_INT
	BForceSheath                         DT_INT
	Unk_48531b6                          DT_INT
	ArEndingPreplayed                    DT_POLYMORPHIC_VARIABLEARRAY[*PowerPhasePreplay]
	PtPhaseInitialization                DT_POLYMORPHIC_VARIABLEARRAY[*PowerPhaseInitialization]
	ArPhases                             DT_POLYMORPHIC_VARIABLEARRAY[*DT_INT64]
	Unk_92fea1c                          DT_INT
	Unk_8cdde38                          DT_INT
	ArFacingWindows                      DT_VARIABLEARRAY[*PowerFacingWindow]
	Unk_4bf03ff                          DT_INT
	TAttackSpeed                         DT_STRING_FORMULA
	Unk_6deb090                          DT_INT
	Unk_ed2bdad                          DT_INT
	BOverkillStacked                     DT_INT
	Unk_7a86b64                          DT_INT
	EDamageType                          DT_ENUM
	Unk_752edeb                          DT_INT
	TCombatEffectChance                  DT_STRING_FORMULA
	Unk_923b5fb                          DT_INT
	BPlayNormalHitSound                  DT_INT
	EHitSound                            DT_ENUM
	OnHitSounds                          OnHitSounds
	Unk_1a5392                           DT_INT
	SnoConversation                      DT_SNO
	Unk_97eadb8                          DT_UINT
	Unk_5e1a52d                          DT_INT
	BCaptionsInside                      DT_INT
	EShapeshiftForm                      DT_ENUM
	ArResourceCosts                      DT_VARIABLEARRAY[*PowerResourceCost]
	THealthCost                          DT_STRING_FORMULA
	TChargeCost                          DT_STRING_FORMULA
	TMaxCharges                          DT_STRING_FORMULA
	TRechargeTime                        DT_STRING_FORMULA
	TCooldownTime                        DT_STRING_FORMULA
	TResourceCostReductionCoefficient    DT_STRING_FORMULA
	TCooldownReductionCoefficient        DT_STRING_FORMULA
	BTargetGroundOnly                    DT_INT
	ETargetLockBehavior                  DT_ENUM
	BWalksCloserIfOutOfRange             DT_INT
	BCanSteer                            DT_INT
	Unk_67b65e9                          DT_INT
	BAutoTargetingEnabled                DT_INT
	Unk_42057f3                          DT_INT
	Unk_fbccf7                           DT_INT
	Unk_7cdc8cb                          DT_INT
	Unk_37d51de                          DT_SNO
	Unk_be5487b                          DT_SNO
	Unk_66bbae7                          DT_INT
	Unk_5efc45c                          DT_INT
	Unk_b9ffd91                          DT_INT
	Unk_4d9cc58                          DT_INT
	Unk_950971c                          DT_FLOAT
	Unk_79e716a                          DT_FLOAT
	Unk_ead9008                          DT_FLOAT
	Unk_767809                           DT_FLOAT
	BCastTargetAllies                    DT_INT
	BCastTargetEnemies                   DT_INT
	BCastTargetPlayersOnly               DT_INT
	TCastTargetNecroCorpsesOnly          DT_STRING_FORMULA
	Unk_b9b985                           DT_STRING_FORMULA
	Unk_bcdb405                          DT_INT
	Unk_6e40571                          DT_INT
	Unk_807540f                          DT_STRING_FORMULA
	VAttributesResistFireValue           DT_STRING_FORMULA
	Unk_e96cf25                          DT_INT
	Unk_d8f7885                          DT_INT
	Unk_8d0166c                          DT_INT
	Unk_1539714                          DT_FLOAT
	Unk_e9ac57a                          DT_INT
	Unk_61e06df                          DT_INT
	Unk_787b722                          DT_FLOAT
	Unk_b2d506d                          DT_FLOAT
	Unk_8b4e7a                           DT_ENUM
	Unk_44bbb8e                          DT_INT
	TAttackRadius                        DT_STRING_FORMULA
	BRequiresPathToTarget                DT_INT
	BIsApproachPower                     DT_INT
	SnoPowerApproach                     DT_SNO
	Unk_f70b0d                           DT_ENUM
	Unk_e65d245                          DT_GBID
	Unk_17dddfd                          DT_INT
	TMovementPowerData                   ActorMovementPowerData
	EMovementStyleOverride               DT_ENUM
	EFacingStyleOverride                 DT_ENUM
	Unk_6714077                          DT_INT
	BRequiresActorTarget                 DT_INT
	Unk_805ebfc                          DT_INT
	Unk_b4ad6e7                          DT_INT
	ELOSCheck                            DT_ENUM
	Unk_ea58c49                          DT_FLOAT
	Unk_692752d                          DT_FLOAT
	Unk_eb84fbe                          DT_INT
	BInvisibleDuring                     DT_INT
	BInvulnerableDuring                  DT_INT
	BUntargetableDuring                  DT_INT
	BCannotDieDuring                     DT_INT
	BCannotBeInterruptedDuring           DT_INT
	BStunnedUnstoppableIdDuring          DT_INT
	BIgnoreGravityDuring                 DT_INT
	Unk_7a416a6                          DT_INT
	ArCCInfo                             DT_FIXEDARRAY[*PowerCrowdControlInfo]
	Unk_6afae78                          DT_INT
	SnoClassRequirement                  DT_SNO
	SnoSkillRequirement                  DT_SNO
	SnoItemRequirement                   DT_SNO
	SnoHeroConditionRequirement          DT_SNO
	BUsableInTown                        DT_INT
	BUsableInCombat                      DT_INT
	BIsCraftItemName                     DT_INT
	Unk_744a4fd                          DT_INT
	Unk_a8611dd                          DT_INT
	BUsableInPrologue                    DT_INT
	Unk_83d96df                          DT_INT
	Unk_9aaab79                          DT_INT
	Unk_b15bf7f                          DT_INT
	Unk_8fe39cf                          DT_UINT
	BPassabilityDuringEnabled            DT_INT
	BPassabilityDestEnabled              DT_INT
	ArCollisionSettings                  DT_FIXEDARRAY[*CollisionSettings]
	FCannotLMBAssign                     DT_INT
	FMouseAssignable                     DT_INT
	FHotbarAssignable                    DT_INT
	Unk_a75e08a                          DT_INT
	Unk_89134c5                          DT_INT
	HIconNormal                          DT_UINT
	HIconMouseover                       DT_UINT
	HIconPushed                          DT_UINT
	HIconInactive                        DT_UINT
	HIconInactiveMouseover               DT_UINT
	HIconRound                           DT_UINT
	GbidHotbarCountPetType               DT_GBID
	Unk_159fc50                          DT_UINT
	Unk_cecdfc8                          DT_INT
	Unk_210b5d5                          DT_INT
	Unk_1c331c3                          DT_INT
	Unk_3f7ac9c                          DT_INT
	Unk_36a68ce                          DT_INT
	ArHitReactionOverrides               DT_VARIABLEARRAY[*HitReactionOverride]
	ArBuffs                              DT_VARIABLEARRAY[*PowerBuffDefinition]
	NFormulaCount                        DT_INT
	PtScriptFormulas                     DT_VARIABLEARRAY[*ScriptFormulaInfo]
	ArPayloads                           DT_VARIABLEARRAY[*PowerPayloadDefinition]
	ArMods                               DT_VARIABLEARRAY[*PowerMod]
	SnoCastingEffectGroup                DT_SNO
	SnoAutoCastingEffectGroup            DT_SNO
	TCastingEffectGroupHardpointOverride HardpointLink
	FlCastingEffectGroupDuration         DT_FLOAT
	ArCastingEffectOverrides             DT_VARIABLEARRAY[*PowerCastingEffectOverride]
	ArPetSpawns                          DT_VARIABLEARRAY[*PowerPetSpawn]
}

func (t *PowerDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.SzInternalName, r, &Options{
		ArrayLength: 64,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.BDefensive, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.Unk_bd561bf, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.TPrimaryTag, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.ArSkillTags, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+104, &t.ESkillCat, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+108, &t.EType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.ECategory, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+116, &t.EPowerAnimPriority, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.Unk_9a3836e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+124, &t.EPowerAnimMovement, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.Unk_1450715, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+132, &t.BChannelled, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+136, &t.BChannelledMovement, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+140, &t.BAutoChannelled, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+144, &t.Unk_3837f2a, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+148, &t.Unk_6c6eb6b, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+152, &t.TAutoChannelledDuration, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+184, &t.Unk_9aad0d1, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+188, &t.BIsBasicAttack, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+192, &t.BIsPassive, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+196, &t.Unk_30531f7, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+200, &t.BAimedPower, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+204, &t.Unk_1f1fcc, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+208, &t.EPowerFallback, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+212, &t.Unk_49572b0, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+216, &t.EPowerTargetingType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+224, &t.ArLinkedPassivePowers, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+240, &t.SnoEnchantmentPower, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+244, &t.SnoMountedRiderPower, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+248, &t.BUsesWeaponExpertise, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+252, &t.Unk_fca3b69, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+256, &t.BIgnoreSkillRanks, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+260, &t.SnoPowerAnimationOverride, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+264, &t.BPreplayAnimation, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+268, &t.Unk_99e0ced, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+272, &t.EAnimationLayer, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+276, &t.Unk_3616d3, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+280, &t.Unk_41a3d22, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+284, &t.Unk_2df4181, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+288, &t.BSetLookAtTarget, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+292, &t.BForceSheath, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+296, &t.Unk_48531b6, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+304, &t.ArEndingPreplayed, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+328, &t.PtPhaseInitialization, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+352, &t.ArPhases, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+376, &t.Unk_92fea1c, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+380, &t.Unk_8cdde38, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+384, &t.ArFacingWindows, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+400, &t.Unk_4bf03ff, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+408, &t.TAttackSpeed, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+440, &t.Unk_6deb090, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+444, &t.Unk_ed2bdad, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+448, &t.BOverkillStacked, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+452, &t.Unk_7a86b64, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+456, &t.EDamageType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+460, &t.Unk_752edeb, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+464, &t.TCombatEffectChance, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+496, &t.Unk_923b5fb, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+500, &t.BPlayNormalHitSound, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+504, &t.EHitSound, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+508, &t.OnHitSounds, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+520, &t.Unk_1a5392, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+524, &t.SnoConversation, r, &Options{
		Flags: 1,
		Group: 12,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+528, &t.Unk_97eadb8, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+532, &t.Unk_5e1a52d, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+536, &t.BCaptionsInside, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+540, &t.EShapeshiftForm, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+544, &t.ArResourceCosts, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+560, &t.THealthCost, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+592, &t.TChargeCost, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+624, &t.TMaxCharges, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+656, &t.TRechargeTime, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+688, &t.TCooldownTime, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+720, &t.TResourceCostReductionCoefficient, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+752, &t.TCooldownReductionCoefficient, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+784, &t.BTargetGroundOnly, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+788, &t.ETargetLockBehavior, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+792, &t.BWalksCloserIfOutOfRange, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+796, &t.BCanSteer, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+800, &t.Unk_67b65e9, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+804, &t.BAutoTargetingEnabled, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+808, &t.Unk_42057f3, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+812, &t.Unk_fbccf7, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+816, &t.Unk_7cdc8cb, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+820, &t.Unk_37d51de, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+824, &t.Unk_be5487b, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+828, &t.Unk_66bbae7, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+832, &t.Unk_5efc45c, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+836, &t.Unk_b9ffd91, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+840, &t.Unk_4d9cc58, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+844, &t.Unk_950971c, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+848, &t.Unk_79e716a, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+852, &t.Unk_ead9008, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+856, &t.Unk_767809, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+860, &t.BCastTargetAllies, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+864, &t.BCastTargetEnemies, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+868, &t.BCastTargetPlayersOnly, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+872, &t.TCastTargetNecroCorpsesOnly, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+904, &t.Unk_b9b985, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+936, &t.Unk_bcdb405, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+940, &t.Unk_6e40571, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+944, &t.Unk_807540f, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+976, &t.VAttributesResistFireValue, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1008, &t.Unk_e96cf25, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1012, &t.Unk_d8f7885, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1016, &t.Unk_8d0166c, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1020, &t.Unk_1539714, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1024, &t.Unk_e9ac57a, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1028, &t.Unk_61e06df, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1032, &t.Unk_787b722, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1036, &t.Unk_b2d506d, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1040, &t.Unk_8b4e7a, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1044, &t.Unk_44bbb8e, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1048, &t.TAttackRadius, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1080, &t.BRequiresPathToTarget, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1084, &t.BIsApproachPower, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1088, &t.SnoPowerApproach, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1092, &t.Unk_f70b0d, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1096, &t.Unk_e65d245, r, &Options{
		Flags: 1,
		Group: 34,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1100, &t.Unk_17dddfd, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1104, &t.TMovementPowerData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1224, &t.EMovementStyleOverride, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1228, &t.EFacingStyleOverride, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1232, &t.Unk_6714077, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1236, &t.BRequiresActorTarget, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1240, &t.Unk_805ebfc, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1244, &t.Unk_b4ad6e7, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1248, &t.ELOSCheck, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1252, &t.Unk_ea58c49, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1256, &t.Unk_692752d, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1260, &t.Unk_eb84fbe, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1264, &t.BInvisibleDuring, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1268, &t.BInvulnerableDuring, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1272, &t.BUntargetableDuring, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1276, &t.BCannotDieDuring, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1280, &t.BCannotBeInterruptedDuring, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1284, &t.BStunnedUnstoppableIdDuring, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1288, &t.BIgnoreGravityDuring, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1292, &t.Unk_7a416a6, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1296, &t.ArCCInfo, r, &Options{
		ArrayLength: 14,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2640, &t.Unk_6afae78, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2644, &t.SnoClassRequirement, r, &Options{
		Flags: 513,
		Group: 74,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2648, &t.SnoSkillRequirement, r, &Options{
		Flags: 1,
		Group: 116,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2652, &t.SnoItemRequirement, r, &Options{
		Flags: 513,
		Group: 73,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2656, &t.SnoHeroConditionRequirement, r, &Options{
		Flags: 513,
		Group: 51,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2660, &t.BUsableInTown, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2664, &t.BUsableInCombat, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2668, &t.BIsCraftItemName, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2672, &t.Unk_744a4fd, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2676, &t.Unk_a8611dd, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2680, &t.BUsableInPrologue, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2684, &t.Unk_83d96df, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2688, &t.Unk_9aaab79, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2692, &t.Unk_b15bf7f, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2696, &t.Unk_8fe39cf, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2700, &t.BPassabilityDuringEnabled, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2704, &t.BPassabilityDestEnabled, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2708, &t.ArCollisionSettings, r, &Options{
		ArrayLength: 2,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2748, &t.FCannotLMBAssign, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2752, &t.FMouseAssignable, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2756, &t.FHotbarAssignable, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2760, &t.Unk_a75e08a, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2764, &t.Unk_89134c5, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2768, &t.HIconNormal, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2772, &t.HIconMouseover, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2776, &t.HIconPushed, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2780, &t.HIconInactive, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2784, &t.HIconInactiveMouseover, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2788, &t.HIconRound, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2792, &t.GbidHotbarCountPetType, r, &Options{
		Flags: 1,
		Group: 23,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2796, &t.Unk_159fc50, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2800, &t.Unk_cecdfc8, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2804, &t.Unk_210b5d5, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2808, &t.Unk_1c331c3, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2812, &t.Unk_3f7ac9c, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2816, &t.Unk_36a68ce, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2824, &t.ArHitReactionOverrides, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2840, &t.ArBuffs, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2856, &t.NFormulaCount, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2864, &t.PtScriptFormulas, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2880, &t.ArPayloads, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2896, &t.ArMods, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2912, &t.SnoCastingEffectGroup, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2916, &t.SnoAutoCastingEffectGroup, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2920, &t.TCastingEffectGroupHardpointOverride, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2928, &t.FlCastingEffectGroupDuration, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2936, &t.ArCastingEffectOverrides, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2952, &t.ArPetSpawns, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+2968, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PowerDefinition) Walk(cb WalkCallback, d ...any) {
	cb.Do("SzInternalName", &t.SzInternalName, d...)
	cb.Do("BDefensive", &t.BDefensive, d...)
	cb.Do("Unk_bd561bf", &t.Unk_bd561bf, d...)
	cb.Do("TPrimaryTag", &t.TPrimaryTag, d...)
	cb.Do("ArSkillTags", &t.ArSkillTags, d...)
	cb.Do("ESkillCat", &t.ESkillCat, d...)
	cb.Do("EType", &t.EType, d...)
	cb.Do("ECategory", &t.ECategory, d...)
	cb.Do("EPowerAnimPriority", &t.EPowerAnimPriority, d...)
	cb.Do("Unk_9a3836e", &t.Unk_9a3836e, d...)
	cb.Do("EPowerAnimMovement", &t.EPowerAnimMovement, d...)
	cb.Do("Unk_1450715", &t.Unk_1450715, d...)
	cb.Do("BChannelled", &t.BChannelled, d...)
	cb.Do("BChannelledMovement", &t.BChannelledMovement, d...)
	cb.Do("BAutoChannelled", &t.BAutoChannelled, d...)
	cb.Do("Unk_3837f2a", &t.Unk_3837f2a, d...)
	cb.Do("Unk_6c6eb6b", &t.Unk_6c6eb6b, d...)
	cb.Do("TAutoChannelledDuration", &t.TAutoChannelledDuration, d...)
	cb.Do("Unk_9aad0d1", &t.Unk_9aad0d1, d...)
	cb.Do("BIsBasicAttack", &t.BIsBasicAttack, d...)
	cb.Do("BIsPassive", &t.BIsPassive, d...)
	cb.Do("Unk_30531f7", &t.Unk_30531f7, d...)
	cb.Do("BAimedPower", &t.BAimedPower, d...)
	cb.Do("Unk_1f1fcc", &t.Unk_1f1fcc, d...)
	cb.Do("EPowerFallback", &t.EPowerFallback, d...)
	cb.Do("Unk_49572b0", &t.Unk_49572b0, d...)
	cb.Do("EPowerTargetingType", &t.EPowerTargetingType, d...)
	cb.Do("ArLinkedPassivePowers", &t.ArLinkedPassivePowers, d...)
	cb.Do("SnoEnchantmentPower", &t.SnoEnchantmentPower, d...)
	cb.Do("SnoMountedRiderPower", &t.SnoMountedRiderPower, d...)
	cb.Do("BUsesWeaponExpertise", &t.BUsesWeaponExpertise, d...)
	cb.Do("Unk_fca3b69", &t.Unk_fca3b69, d...)
	cb.Do("BIgnoreSkillRanks", &t.BIgnoreSkillRanks, d...)
	cb.Do("SnoPowerAnimationOverride", &t.SnoPowerAnimationOverride, d...)
	cb.Do("BPreplayAnimation", &t.BPreplayAnimation, d...)
	cb.Do("Unk_99e0ced", &t.Unk_99e0ced, d...)
	cb.Do("EAnimationLayer", &t.EAnimationLayer, d...)
	cb.Do("Unk_3616d3", &t.Unk_3616d3, d...)
	cb.Do("Unk_41a3d22", &t.Unk_41a3d22, d...)
	cb.Do("Unk_2df4181", &t.Unk_2df4181, d...)
	cb.Do("BSetLookAtTarget", &t.BSetLookAtTarget, d...)
	cb.Do("BForceSheath", &t.BForceSheath, d...)
	cb.Do("Unk_48531b6", &t.Unk_48531b6, d...)
	cb.Do("ArEndingPreplayed", &t.ArEndingPreplayed, d...)
	cb.Do("PtPhaseInitialization", &t.PtPhaseInitialization, d...)
	cb.Do("ArPhases", &t.ArPhases, d...)
	cb.Do("Unk_92fea1c", &t.Unk_92fea1c, d...)
	cb.Do("Unk_8cdde38", &t.Unk_8cdde38, d...)
	cb.Do("ArFacingWindows", &t.ArFacingWindows, d...)
	cb.Do("Unk_4bf03ff", &t.Unk_4bf03ff, d...)
	cb.Do("TAttackSpeed", &t.TAttackSpeed, d...)
	cb.Do("Unk_6deb090", &t.Unk_6deb090, d...)
	cb.Do("Unk_ed2bdad", &t.Unk_ed2bdad, d...)
	cb.Do("BOverkillStacked", &t.BOverkillStacked, d...)
	cb.Do("Unk_7a86b64", &t.Unk_7a86b64, d...)
	cb.Do("EDamageType", &t.EDamageType, d...)
	cb.Do("Unk_752edeb", &t.Unk_752edeb, d...)
	cb.Do("TCombatEffectChance", &t.TCombatEffectChance, d...)
	cb.Do("Unk_923b5fb", &t.Unk_923b5fb, d...)
	cb.Do("BPlayNormalHitSound", &t.BPlayNormalHitSound, d...)
	cb.Do("EHitSound", &t.EHitSound, d...)
	cb.Do("OnHitSounds", &t.OnHitSounds, d...)
	cb.Do("Unk_1a5392", &t.Unk_1a5392, d...)
	cb.Do("SnoConversation", &t.SnoConversation, d...)
	cb.Do("Unk_97eadb8", &t.Unk_97eadb8, d...)
	cb.Do("Unk_5e1a52d", &t.Unk_5e1a52d, d...)
	cb.Do("BCaptionsInside", &t.BCaptionsInside, d...)
	cb.Do("EShapeshiftForm", &t.EShapeshiftForm, d...)
	cb.Do("ArResourceCosts", &t.ArResourceCosts, d...)
	cb.Do("THealthCost", &t.THealthCost, d...)
	cb.Do("TChargeCost", &t.TChargeCost, d...)
	cb.Do("TMaxCharges", &t.TMaxCharges, d...)
	cb.Do("TRechargeTime", &t.TRechargeTime, d...)
	cb.Do("TCooldownTime", &t.TCooldownTime, d...)
	cb.Do("TResourceCostReductionCoefficient", &t.TResourceCostReductionCoefficient, d...)
	cb.Do("TCooldownReductionCoefficient", &t.TCooldownReductionCoefficient, d...)
	cb.Do("BTargetGroundOnly", &t.BTargetGroundOnly, d...)
	cb.Do("ETargetLockBehavior", &t.ETargetLockBehavior, d...)
	cb.Do("BWalksCloserIfOutOfRange", &t.BWalksCloserIfOutOfRange, d...)
	cb.Do("BCanSteer", &t.BCanSteer, d...)
	cb.Do("Unk_67b65e9", &t.Unk_67b65e9, d...)
	cb.Do("BAutoTargetingEnabled", &t.BAutoTargetingEnabled, d...)
	cb.Do("Unk_42057f3", &t.Unk_42057f3, d...)
	cb.Do("Unk_fbccf7", &t.Unk_fbccf7, d...)
	cb.Do("Unk_7cdc8cb", &t.Unk_7cdc8cb, d...)
	cb.Do("Unk_37d51de", &t.Unk_37d51de, d...)
	cb.Do("Unk_be5487b", &t.Unk_be5487b, d...)
	cb.Do("Unk_66bbae7", &t.Unk_66bbae7, d...)
	cb.Do("Unk_5efc45c", &t.Unk_5efc45c, d...)
	cb.Do("Unk_b9ffd91", &t.Unk_b9ffd91, d...)
	cb.Do("Unk_4d9cc58", &t.Unk_4d9cc58, d...)
	cb.Do("Unk_950971c", &t.Unk_950971c, d...)
	cb.Do("Unk_79e716a", &t.Unk_79e716a, d...)
	cb.Do("Unk_ead9008", &t.Unk_ead9008, d...)
	cb.Do("Unk_767809", &t.Unk_767809, d...)
	cb.Do("BCastTargetAllies", &t.BCastTargetAllies, d...)
	cb.Do("BCastTargetEnemies", &t.BCastTargetEnemies, d...)
	cb.Do("BCastTargetPlayersOnly", &t.BCastTargetPlayersOnly, d...)
	cb.Do("TCastTargetNecroCorpsesOnly", &t.TCastTargetNecroCorpsesOnly, d...)
	cb.Do("Unk_b9b985", &t.Unk_b9b985, d...)
	cb.Do("Unk_bcdb405", &t.Unk_bcdb405, d...)
	cb.Do("Unk_6e40571", &t.Unk_6e40571, d...)
	cb.Do("Unk_807540f", &t.Unk_807540f, d...)
	cb.Do("VAttributesResistFireValue", &t.VAttributesResistFireValue, d...)
	cb.Do("Unk_e96cf25", &t.Unk_e96cf25, d...)
	cb.Do("Unk_d8f7885", &t.Unk_d8f7885, d...)
	cb.Do("Unk_8d0166c", &t.Unk_8d0166c, d...)
	cb.Do("Unk_1539714", &t.Unk_1539714, d...)
	cb.Do("Unk_e9ac57a", &t.Unk_e9ac57a, d...)
	cb.Do("Unk_61e06df", &t.Unk_61e06df, d...)
	cb.Do("Unk_787b722", &t.Unk_787b722, d...)
	cb.Do("Unk_b2d506d", &t.Unk_b2d506d, d...)
	cb.Do("Unk_8b4e7a", &t.Unk_8b4e7a, d...)
	cb.Do("Unk_44bbb8e", &t.Unk_44bbb8e, d...)
	cb.Do("TAttackRadius", &t.TAttackRadius, d...)
	cb.Do("BRequiresPathToTarget", &t.BRequiresPathToTarget, d...)
	cb.Do("BIsApproachPower", &t.BIsApproachPower, d...)
	cb.Do("SnoPowerApproach", &t.SnoPowerApproach, d...)
	cb.Do("Unk_f70b0d", &t.Unk_f70b0d, d...)
	cb.Do("Unk_e65d245", &t.Unk_e65d245, d...)
	cb.Do("Unk_17dddfd", &t.Unk_17dddfd, d...)
	cb.Do("TMovementPowerData", &t.TMovementPowerData, d...)
	cb.Do("EMovementStyleOverride", &t.EMovementStyleOverride, d...)
	cb.Do("EFacingStyleOverride", &t.EFacingStyleOverride, d...)
	cb.Do("Unk_6714077", &t.Unk_6714077, d...)
	cb.Do("BRequiresActorTarget", &t.BRequiresActorTarget, d...)
	cb.Do("Unk_805ebfc", &t.Unk_805ebfc, d...)
	cb.Do("Unk_b4ad6e7", &t.Unk_b4ad6e7, d...)
	cb.Do("ELOSCheck", &t.ELOSCheck, d...)
	cb.Do("Unk_ea58c49", &t.Unk_ea58c49, d...)
	cb.Do("Unk_692752d", &t.Unk_692752d, d...)
	cb.Do("Unk_eb84fbe", &t.Unk_eb84fbe, d...)
	cb.Do("BInvisibleDuring", &t.BInvisibleDuring, d...)
	cb.Do("BInvulnerableDuring", &t.BInvulnerableDuring, d...)
	cb.Do("BUntargetableDuring", &t.BUntargetableDuring, d...)
	cb.Do("BCannotDieDuring", &t.BCannotDieDuring, d...)
	cb.Do("BCannotBeInterruptedDuring", &t.BCannotBeInterruptedDuring, d...)
	cb.Do("BStunnedUnstoppableIdDuring", &t.BStunnedUnstoppableIdDuring, d...)
	cb.Do("BIgnoreGravityDuring", &t.BIgnoreGravityDuring, d...)
	cb.Do("Unk_7a416a6", &t.Unk_7a416a6, d...)
	cb.Do("ArCCInfo", &t.ArCCInfo, d...)
	cb.Do("Unk_6afae78", &t.Unk_6afae78, d...)
	cb.Do("SnoClassRequirement", &t.SnoClassRequirement, d...)
	cb.Do("SnoSkillRequirement", &t.SnoSkillRequirement, d...)
	cb.Do("SnoItemRequirement", &t.SnoItemRequirement, d...)
	cb.Do("SnoHeroConditionRequirement", &t.SnoHeroConditionRequirement, d...)
	cb.Do("BUsableInTown", &t.BUsableInTown, d...)
	cb.Do("BUsableInCombat", &t.BUsableInCombat, d...)
	cb.Do("BIsCraftItemName", &t.BIsCraftItemName, d...)
	cb.Do("Unk_744a4fd", &t.Unk_744a4fd, d...)
	cb.Do("Unk_a8611dd", &t.Unk_a8611dd, d...)
	cb.Do("BUsableInPrologue", &t.BUsableInPrologue, d...)
	cb.Do("Unk_83d96df", &t.Unk_83d96df, d...)
	cb.Do("Unk_9aaab79", &t.Unk_9aaab79, d...)
	cb.Do("Unk_b15bf7f", &t.Unk_b15bf7f, d...)
	cb.Do("Unk_8fe39cf", &t.Unk_8fe39cf, d...)
	cb.Do("BPassabilityDuringEnabled", &t.BPassabilityDuringEnabled, d...)
	cb.Do("BPassabilityDestEnabled", &t.BPassabilityDestEnabled, d...)
	cb.Do("ArCollisionSettings", &t.ArCollisionSettings, d...)
	cb.Do("FCannotLMBAssign", &t.FCannotLMBAssign, d...)
	cb.Do("FMouseAssignable", &t.FMouseAssignable, d...)
	cb.Do("FHotbarAssignable", &t.FHotbarAssignable, d...)
	cb.Do("Unk_a75e08a", &t.Unk_a75e08a, d...)
	cb.Do("Unk_89134c5", &t.Unk_89134c5, d...)
	cb.Do("HIconNormal", &t.HIconNormal, d...)
	cb.Do("HIconMouseover", &t.HIconMouseover, d...)
	cb.Do("HIconPushed", &t.HIconPushed, d...)
	cb.Do("HIconInactive", &t.HIconInactive, d...)
	cb.Do("HIconInactiveMouseover", &t.HIconInactiveMouseover, d...)
	cb.Do("HIconRound", &t.HIconRound, d...)
	cb.Do("GbidHotbarCountPetType", &t.GbidHotbarCountPetType, d...)
	cb.Do("Unk_159fc50", &t.Unk_159fc50, d...)
	cb.Do("Unk_cecdfc8", &t.Unk_cecdfc8, d...)
	cb.Do("Unk_210b5d5", &t.Unk_210b5d5, d...)
	cb.Do("Unk_1c331c3", &t.Unk_1c331c3, d...)
	cb.Do("Unk_3f7ac9c", &t.Unk_3f7ac9c, d...)
	cb.Do("Unk_36a68ce", &t.Unk_36a68ce, d...)
	cb.Do("ArHitReactionOverrides", &t.ArHitReactionOverrides, d...)
	cb.Do("ArBuffs", &t.ArBuffs, d...)
	cb.Do("NFormulaCount", &t.NFormulaCount, d...)
	cb.Do("PtScriptFormulas", &t.PtScriptFormulas, d...)
	cb.Do("ArPayloads", &t.ArPayloads, d...)
	cb.Do("ArMods", &t.ArMods, d...)
	cb.Do("SnoCastingEffectGroup", &t.SnoCastingEffectGroup, d...)
	cb.Do("SnoAutoCastingEffectGroup", &t.SnoAutoCastingEffectGroup, d...)
	cb.Do("TCastingEffectGroupHardpointOverride", &t.TCastingEffectGroupHardpointOverride, d...)
	cb.Do("FlCastingEffectGroupDuration", &t.FlCastingEffectGroupDuration, d...)
	cb.Do("ArCastingEffectOverrides", &t.ArCastingEffectOverrides, d...)
	cb.Do("ArPetSpawns", &t.ArPetSpawns, d...)
}

type OnAttackBuffCallback struct {
	// Inherits BuffCallbackBase
	// Inherits PolymorphicBase
	DwType                DT_UINT
	DwPad                 DT_UINT
	SnoTriggerEffectGroup DT_SNO
	ArConditions          DT_POLYMORPHIC_VARIABLEARRAY[*DT_INT64]
}

func (t *OnAttackBuffCallback) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoTriggerEffectGroup, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ArConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *OnAttackBuffCallback) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("SnoTriggerEffectGroup", &t.SnoTriggerEffectGroup, d...)
	cb.Do("ArConditions", &t.ArConditions, d...)
}

type ACDInventoryUpdateActorSNO struct {
	THeader  RequiredMessageHeader
	Ann      DT_ACD_NETWORK_NAME
	SnoActor DT_SNO
}

func (t *ACDInventoryUpdateActorSNO) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Ann, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SnoActor, r, &Options{
		Flags: 1,
		Group: 1,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+28, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ACDInventoryUpdateActorSNO) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("Ann", &t.Ann, d...)
	cb.Do("SnoActor", &t.SnoActor, d...)
}

type NamedGizmoData struct {
	// Inherits ActorGizmoData
	// Inherits PolymorphicBase
	DwType                           DT_UINT
	DwPad                            DT_UINT
	FDisableNonFriendlyOperation     DT_INT
	FWalkToCenter                    DT_INT
	FGizmoStartsDisabled             DT_INT
	FUseStringListName               DT_INT
	FForceMinimapIcon                DT_INT
	FlOperationRadius                DT_FLOAT
	Unk_d0b1df5                      DT_FLOAT
	FlGizmoUseTime                   DT_FLOAT
	SnoChannelingEffect              DT_SNO
	Unk_2767229                      DT_INT
	FGizmoShowProgressBar            DT_INT
	Unk_6d9ebe1                      DT_INT
	Unk_5456245                      DT_INT
	Unk_af5815a                      DT_INT
	SnoOnClickEffect                 DT_SNO
	SnoPickedUpEffect                DT_SNO
	SnoDropOnGroundEffect            DT_SNO
	TConditionData                   GizmoConditionData
	SnoPowerOperator                 DT_SNO
	SnoPowerOperate                  DT_SNO
	SnoPowerOperatorActive           DT_SNO
	SnoPowerOperateActive            DT_SNO
	Unk_359810e                      DT_INT
	NCooldown                        DT_UINT
	Unk_9c8478e                      DT_UINT
	Unk_d45ed2d                      DT_INT
	Unk_f6b20b7                      DT_INT
	Unk_54513b8                      DT_INT
	Unk_fd1f378                      DT_UINT
	HGizmoOperateFlavorTextMsgLabel  DT_UINT
	HGizmoOperateDescriptionMsgLabel DT_UINT
	FlGizmoOperateOffset             DT_FLOAT
	Unk_ab58cd3                      DT_ENUM
	Unk_91a3966                      DT_UINT
	HGizmoChannelingLabel            DT_UINT
	Unk_4be4371                      DT_INT
}

func (t *NamedGizmoData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.FDisableNonFriendlyOperation, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.FWalkToCenter, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.FGizmoStartsDisabled, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.FUseStringListName, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.FForceMinimapIcon, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.FlOperationRadius, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.Unk_d0b1df5, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.FlGizmoUseTime, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.SnoChannelingEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.Unk_2767229, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.FGizmoShowProgressBar, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+60, &t.Unk_6d9ebe1, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.Unk_5456245, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.Unk_af5815a, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.SnoOnClickEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.SnoPickedUpEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.SnoDropOnGroundEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.TConditionData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.SnoPowerOperator, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.SnoPowerOperate, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.SnoPowerOperatorActive, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+100, &t.SnoPowerOperateActive, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+104, &t.Unk_359810e, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+108, &t.NCooldown, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.Unk_9c8478e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+116, &t.Unk_d45ed2d, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.Unk_f6b20b7, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+124, &t.Unk_54513b8, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.Unk_fd1f378, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+132, &t.HGizmoOperateFlavorTextMsgLabel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+136, &t.HGizmoOperateDescriptionMsgLabel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+140, &t.FlGizmoOperateOffset, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+144, &t.Unk_ab58cd3, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+148, &t.Unk_91a3966, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+152, &t.HGizmoChannelingLabel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+156, &t.Unk_4be4371, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+160, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *NamedGizmoData) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("FDisableNonFriendlyOperation", &t.FDisableNonFriendlyOperation, d...)
	cb.Do("FWalkToCenter", &t.FWalkToCenter, d...)
	cb.Do("FGizmoStartsDisabled", &t.FGizmoStartsDisabled, d...)
	cb.Do("FUseStringListName", &t.FUseStringListName, d...)
	cb.Do("FForceMinimapIcon", &t.FForceMinimapIcon, d...)
	cb.Do("FlOperationRadius", &t.FlOperationRadius, d...)
	cb.Do("Unk_d0b1df5", &t.Unk_d0b1df5, d...)
	cb.Do("FlGizmoUseTime", &t.FlGizmoUseTime, d...)
	cb.Do("SnoChannelingEffect", &t.SnoChannelingEffect, d...)
	cb.Do("Unk_2767229", &t.Unk_2767229, d...)
	cb.Do("FGizmoShowProgressBar", &t.FGizmoShowProgressBar, d...)
	cb.Do("Unk_6d9ebe1", &t.Unk_6d9ebe1, d...)
	cb.Do("Unk_5456245", &t.Unk_5456245, d...)
	cb.Do("Unk_af5815a", &t.Unk_af5815a, d...)
	cb.Do("SnoOnClickEffect", &t.SnoOnClickEffect, d...)
	cb.Do("SnoPickedUpEffect", &t.SnoPickedUpEffect, d...)
	cb.Do("SnoDropOnGroundEffect", &t.SnoDropOnGroundEffect, d...)
	cb.Do("TConditionData", &t.TConditionData, d...)
	cb.Do("SnoPowerOperator", &t.SnoPowerOperator, d...)
	cb.Do("SnoPowerOperate", &t.SnoPowerOperate, d...)
	cb.Do("SnoPowerOperatorActive", &t.SnoPowerOperatorActive, d...)
	cb.Do("SnoPowerOperateActive", &t.SnoPowerOperateActive, d...)
	cb.Do("Unk_359810e", &t.Unk_359810e, d...)
	cb.Do("NCooldown", &t.NCooldown, d...)
	cb.Do("Unk_9c8478e", &t.Unk_9c8478e, d...)
	cb.Do("Unk_d45ed2d", &t.Unk_d45ed2d, d...)
	cb.Do("Unk_f6b20b7", &t.Unk_f6b20b7, d...)
	cb.Do("Unk_54513b8", &t.Unk_54513b8, d...)
	cb.Do("Unk_fd1f378", &t.Unk_fd1f378, d...)
	cb.Do("HGizmoOperateFlavorTextMsgLabel", &t.HGizmoOperateFlavorTextMsgLabel, d...)
	cb.Do("HGizmoOperateDescriptionMsgLabel", &t.HGizmoOperateDescriptionMsgLabel, d...)
	cb.Do("FlGizmoOperateOffset", &t.FlGizmoOperateOffset, d...)
	cb.Do("Unk_ab58cd3", &t.Unk_ab58cd3, d...)
	cb.Do("Unk_91a3966", &t.Unk_91a3966, d...)
	cb.Do("HGizmoChannelingLabel", &t.HGizmoChannelingLabel, d...)
	cb.Do("Unk_4be4371", &t.Unk_4be4371, d...)
}

type PowerConditionIsPet struct {
	// Inherits PowerConditionBase
	// Inherits PolymorphicBase
	DwType      DT_UINT
	BInverse    DT_INT
	DwPad       DT_UINT
	ESubject    DT_ENUM
	Unk_d8caf57 DT_INT
	ArPetType   DT_VARIABLEARRAY[*DT_GBID]
}

func (t *PowerConditionIsPet) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BInverse, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ESubject, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.Unk_d8caf57, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.ArPetType, r, &Options{
		Flags: 1,
		Group: 23,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PowerConditionIsPet) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("BInverse", &t.BInverse, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("ESubject", &t.ESubject, d...)
	cb.Do("Unk_d8caf57", &t.Unk_d8caf57, d...)
	cb.Do("ArPetType", &t.ArPetType, d...)
}

type UILayoutEntries struct {
	SnoUI              DT_SNO
	SzCutoffWrite      DT_CHARARRAY
	SzScreenName       DT_CHARARRAY
	EGroup             DT_ENUM
	ELayer             DT_ENUM
	EPlatform          DT_ENUM
	SnoWorld           DT_SNO
	SzCameraMarkerName DT_CHARARRAY
	EBanner            DT_ENUM
	DwAttributeFlags   DT_UINT
}

func (t *UILayoutEntries) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoUI, r, &Options{
		Flags: 513,
		Group: 46,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.SzCutoffWrite, r, &Options{
		ArrayLength: 256,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+260, &t.SzScreenName, r, &Options{
		ArrayLength: 256,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+516, &t.EGroup, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+520, &t.ELayer, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+524, &t.EPlatform, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+528, &t.SnoWorld, r, &Options{
		Flags: 513,
		Group: 48,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+532, &t.SzCameraMarkerName, r, &Options{
		ArrayLength: 128,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+660, &t.EBanner, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+664, &t.DwAttributeFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if _, err := r.Seek(p+668, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *UILayoutEntries) Walk(cb WalkCallback, d ...any) {
	cb.Do("SnoUI", &t.SnoUI, d...)
	cb.Do("SzCutoffWrite", &t.SzCutoffWrite, d...)
	cb.Do("SzScreenName", &t.SzScreenName, d...)
	cb.Do("EGroup", &t.EGroup, d...)
	cb.Do("ELayer", &t.ELayer, d...)
	cb.Do("EPlatform", &t.EPlatform, d...)
	cb.Do("SnoWorld", &t.SnoWorld, d...)
	cb.Do("SzCameraMarkerName", &t.SzCameraMarkerName, d...)
	cb.Do("EBanner", &t.EBanner, d...)
	cb.Do("DwAttributeFlags", &t.DwAttributeFlags, d...)
}

type MarkerAmbientSoundData struct {
	// Inherits MarkerSplineData
	// Inherits MarkerDataBase
	// Inherits PolymorphicBase
	DwType                         DT_UINT
	DwPad                          DT_UINT
	EInterpolationMode             DT_ENUM
	Unk_a3f1699                    DT_FLOAT
	EAmbientSoundShape             DT_ENUM
	FlCapsuleLength                DT_FLOAT
	FClosedSpline                  DT_INT
	SnoCampaignVisibilityCondition DT_SNO
	ArBakedSplineNodes             DT_VARIABLEARRAY[*DT_VECTOR3D]
}

func (t *MarkerAmbientSoundData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.EInterpolationMode, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.Unk_a3f1699, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.EAmbientSoundShape, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.FlCapsuleLength, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.FClosedSpline, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.SnoCampaignVisibilityCondition, r, &Options{
		Flags: 1,
		Group: 51,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.ArBakedSplineNodes, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+56, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *MarkerAmbientSoundData) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("EInterpolationMode", &t.EInterpolationMode, d...)
	cb.Do("Unk_a3f1699", &t.Unk_a3f1699, d...)
	cb.Do("EAmbientSoundShape", &t.EAmbientSoundShape, d...)
	cb.Do("FlCapsuleLength", &t.FlCapsuleLength, d...)
	cb.Do("FClosedSpline", &t.FClosedSpline, d...)
	cb.Do("SnoCampaignVisibilityCondition", &t.SnoCampaignVisibilityCondition, d...)
	cb.Do("ArBakedSplineNodes", &t.ArBakedSplineNodes, d...)
}

type MapRevealWorldMessage struct {
	THeader  RequiredMessageHeader
	IdSWorld DT_SHARED_SERVER_DATA_ID
}

func (t *MapRevealWorldMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.IdSWorld, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *MapRevealWorldMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("IdSWorld", &t.IdSWorld, d...)
}

type Type_159502df struct {
	// Inherits PhaseJumpBase
	// Inherits PolymorphicBase
	DwType       DT_UINT
	Unk_2de4987  DT_UINT
	ArConditions DT_POLYMORPHIC_VARIABLEARRAY[*DT_INT64]
	BEnd         DT_INT
	DwPad        DT_UINT
}

func (t *Type_159502df) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_2de4987, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ArConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.BEnd, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+56, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_159502df) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("Unk_2de4987", &t.Unk_2de4987, d...)
	cb.Do("ArConditions", &t.ArConditions, d...)
	cb.Do("BEnd", &t.BEnd, d...)
	cb.Do("DwPad", &t.DwPad, d...)
}

type Currency struct {
	ECurrencyType   DT_ENUM
	NCurrencyAmount DT_INT64
}

func (t *Currency) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.ECurrencyType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.NCurrencyAmount, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Currency) Walk(cb WalkCallback, d ...any) {
	cb.Do("ECurrencyType", &t.ECurrencyType, d...)
	cb.Do("NCurrencyAmount", &t.NCurrencyAmount, d...)
}

type GlobalBase struct {
	// Inherits PolymorphicBase
	DwType DT_UINT
	DwPad  DT_UINT
}

func (t *GlobalBase) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *GlobalBase) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
}

type GlobalData struct {
	// Inherits GlobalBase
	// Inherits PolymorphicBase
	DwType                                  DT_UINT
	DwPad                                   DT_UINT
	ArLookVariants                          DT_VARIABLEARRAY[*LookVariant]
	ArShaderMapOverrides                    DT_VARIABLEARRAY[*ShaderMapOverride]
	Unk_156a14c                             DT_VARIABLEARRAY[*DT_INT]
	Unk_6759f02                             DT_VARIABLEARRAY[*DT_INT]
	Unk_e2e2917                             DT_FLOAT
	Unk_e2fe2ea                             DT_FLOAT
	Unk_95f203b                             DT_FLOAT
	Unk_db1c22b                             DT_FLOAT
	Unk_b5ebbb2                             DT_FLOAT
	Unk_5ccf7cc                             DT_FLOAT
	Unk_e7d727                              DT_FLOAT
	Unk_51c96d6                             DT_FLOAT
	Unk_ecd99ed                             DT_FLOAT
	Unk_51c95d8                             DT_FLOAT
	Unk_ec03fd                              DT_FLOAT
	Unk_6032a24                             DT_FLOAT
	Unk_d247cf8                             DT_INT
	Unk_eea9f7c                             DT_INT
	Unk_8472630                             DT_FLOAT
	Unk_8f17798                             DT_FLOAT
	Unk_7954efd                             DT_FLOAT
	Unk_1a40d94                             DT_FLOAT
	Unk_7954dff                             DT_FLOAT
	FlFloatingTextScale                     DT_FLOAT
	NFloatingTextFontSize                   DT_INT
	Unk_eec6296                             DT_FLOAT
	Unk_917777c                             DT_INT
	Unk_318127b                             DT_FLOAT
	Unk_f143013                             DT_FLOAT
	Unk_33296c0                             DT_FLOAT
	Unk_9ca3dcb                             DT_FLOAT
	Unk_18a668d                             DT_FLOAT
	Unk_b0ffbbf                             DT_FLOAT
	Unk_f54712c                             DT_FLOAT
	Unk_d6395ff                             DT_FLOAT
	Unk_854ceeb                             DT_FLOAT
	Unk_bb4f409                             DT_FLOAT
	Unk_ee3875c                             DT_FLOAT
	Unk_8b202cb                             DT_INT
	Unk_b704b85                             DT_INT
	Unk_f2db3a4                             DT_FIXEDARRAY[*DT_FLOAT]
	Unk_ebfec0b                             DT_FLOAT
	Unk_3fe50bb                             DT_INT
	Unk_5d77ea6                             DT_UINT
	Unk_5e4581e                             DT_UINT
	SnoStartingSubzone                      DT_SNO
	SnoStartingSubzoneCampaignSkip          DT_SNO
	ArStartLocationNames                    DT_VARIABLEARRAY[*StartLocationName]
	Unk_8aac9ef                             DT_STRING_FORMULA
	FlSellPricePercent                      DT_FLOAT
	FlPlayerPowerCacheTimeoutNormal         DT_FLOAT
	FlPlayerPowerCacheTimeoutInterrupt      DT_FLOAT
	Unk_d38759a                             DT_FLOAT
	Unk_dfccabc                             DT_FLOAT
	Unk_e9ca4ed                             DT_FLOAT
	Unk_e03c38a                             DT_FLOAT
	Unk_5b6dc2d                             DT_FLOAT
	Unk_f3679e3                             DT_FLOAT
	Unk_4f5a9e3                             DT_FLOAT
	Unk_44ba742                             DT_INT
	Unk_1636dfe                             DT_FLOAT
	Unk_8835be2                             DT_FLOAT
	Unk_a70ae94                             DT_FLOAT
	Unk_43addd1                             DT_FLOAT
	Unk_6a55fc4                             DT_UINT
	Unk_f1891b9                             DT_UINT
	Unk_241909d                             DT_STRING_FORMULA
	NUIBusyTime                             DT_UINT
	NTrialVersionLevelCap                   DT_INT
	FlDurabilityLossPercent                 DT_FLOAT
	Unk_17db22a                             DT_FLOAT
	FlItemEffectivenessPercent              DT_FLOAT
	Unk_8aec133                             DT_FLOAT
	FlHirelingDiminishedBonusRatio          DT_FLOAT
	Unk_882ccc8                             DT_FLOAT
	FlMonsterCritDamageScalar               DT_FLOAT
	FlPlayerCritDamageScalar                DT_FLOAT
	FlPvPMaxCritDamagePercent               DT_FLOAT
	FlDefaultDamageVariance                 DT_FLOAT
	Unk_251341c                             DT_FLOAT
	FlBaseOverpowerDamageBonus              DT_FLOAT
	Unk_e248d9d                             DT_FLOAT
	Unk_51a7ab2                             DT_FLOAT
	Unk_ed83bad                             DT_FLOAT
	Unk_a273c0d                             DT_FLOAT
	Unk_17b95e5                             DT_FLOAT
	Unk_d37d3d4                             DT_FLOAT
	NStashSlotsCost                         DT_INT
	NStashTabCost                           DT_FIXEDARRAY[*DT_INT]
	NClanBankTabCost                        DT_FIXEDARRAY[*DT_INT]
	Unk_a9e9f16                             DT_STRING_FORMULA
	Unk_ea4532f                             DT_STRING_FORMULA
	NItemPowerOffset                        DT_INT
	Unk_62802da                             DT_INT
	Unk_3c98a40                             DT_INT
	NParagonPointsEarnedPerLevel            DT_INT
	Unk_60132bb                             DT_INT
	ArStartingParagonGlyphs                 DT_VARIABLEARRAY[*DT_SNO]
	ArParagonPowerBudgetMultiplier          DT_FIXEDARRAY[*DT_FLOAT]
	Unk_4b766ae                             DT_FLOAT
	Unk_5a673c4                             DT_FLOAT
	Unk_4a89716                             DT_FLOAT
	Unk_b491be3                             DT_FLOAT
	Unk_e762b56                             DT_FLOAT
	Unk_2e11fb8                             DT_FLOAT
	Unk_9a0ad1d                             DT_FLOAT
	Unk_6e8cb51                             DT_FLOAT
	Unk_43375bd                             DT_FLOAT
	Unk_66e2e96                             DT_FLOAT
	Unk_4d68111                             DT_FLOAT
	Unk_d2ab6e9                             DT_FLOAT
	Unk_7c75a6b                             DT_FIXEDARRAY[*DT_INT]
	Unk_6b670be                             DT_FLOAT
	Unk_13c636                              DT_FLOAT
	Unk_9a8035f                             DT_FLOAT
	Unk_fa7eefd                             DT_UINT
	Unk_7176abf                             DT_INT
	TIQLPowerRanges                         DT_FIXEDARRAY[*ItemQualityLevelPowerRanges]
	TIQLSacredPowerRanges                   ItemQualityLevelPowerRanges
	TIQLAncestralPowerRanges                ItemQualityLevelPowerRanges
	NMinimumSacredRequiredLevel             DT_INT
	NMinimumAncestralRequiredLevel          DT_INT
	Unk_3890cf4                             DT_FLOAT
	FlLegendaryAffixTwoHandBonus            DT_FLOAT
	FlLegendaryAffixAmuletBonus             DT_FLOAT
	FlSacredAffixScalarOffense              DT_FLOAT
	FlSacredAffixScalarDefense              DT_FLOAT
	FlAncestralAffixScalarOffense           DT_FLOAT
	FlAncestralAffixScalarDefense           DT_FLOAT
	Unk_4f066d9                             DT_INT
	Unk_7393144                             DT_INT
	NItemUpgradesMaxCommon                  DT_INT
	NItemUpgradesMaxMagic                   DT_INT
	NItemUpgradesMaxRare                    DT_INT
	NItemUpgradesMaxLegendary               DT_INT
	NItemUpgradesMaxSacred                  DT_INT
	ArItemUpgradeArmorPowerLevels           DT_FIXEDARRAY[*DT_INT]
	ArItemUpgradeWeaponPowerLevels          DT_FIXEDARRAY[*DT_INT]
	ArItemUpgradeJewelryPowerLevels         DT_FIXEDARRAY[*DT_INT]
	Unk_57661a3                             DT_RANGE[*DT_FLOAT]
	Unk_6affe04                             DT_FLOAT
	Unk_a96b1a9                             DT_FIXEDARRAY[*Type_dff70e83]
	Unk_ea22f36                             DT_FIXEDARRAY[*DT_SNO]
	FlHealthBase                            DT_FLOAT
	Unk_1e39848                             DT_FLOAT
	Unk_f00d070                             DT_FLOAT
	TDungeonMonsterPerPlayerScaling         MonsterPerPlayerScalingData
	TOpenWorldMonsterPerPlayerScaling       MonsterPerPlayerScalingData
	TLocalEventMonsterPerPlayerScaling      MonsterPerPlayerScalingData
	TZoneEventMonsterPerPlayerScaling       MonsterPerPlayerScalingData
	TWorldEventMonsterPerPlayerScaling      MonsterPerPlayerScalingData
	Unk_57c5927                             DT_FLOAT
	Unk_54fe8b                              DT_FLOAT
	Unk_ce51b5a                             DT_FLOAT
	Unk_3f05457                             DT_FLOAT
	Unk_5b6bd4f                             DT_FLOAT
	Unk_bfde6a2                             DT_FLOAT
	Unk_fc1e7ff                             DT_FLOAT
	Unk_551056e                             DT_FLOAT
	Unk_d616ce9                             DT_FLOAT
	Unk_28a2990                             DT_FLOAT
	Unk_d20a438                             DT_FLOAT
	Unk_a50d36c                             DT_FLOAT
	Unk_475b452                             DT_FLOAT
	Unk_b982fbb                             DT_FLOAT
	Unk_867f53b                             DT_FLOAT
	Unk_c02087d                             DT_FLOAT
	FlHealAbsorbDuration                    DT_FLOAT
	Unk_1e91b8e                             DT_FLOAT
	Unk_468a2dc                             DT_FLOAT
	Unk_3debe95                             DT_FLOAT
	Unk_e8e5c04                             DT_FLOAT
	FlVulnerableDamageBonus                 DT_FLOAT
	Unk_2c3c144                             DT_FLOAT
	FlVulnerableDurationSeconds             DT_FLOAT
	FlFortifiedHealthDamageReduction        DT_FLOAT
	Unk_90f2fe1                             DT_FLOAT
	Unk_ad10637                             DT_FLOAT
	Unk_6e4eda1                             DT_FLOAT
	Unk_f345457                             DT_FLOAT
	Unk_ad76909                             DT_FLOAT
	Unk_685b23e                             DT_FLOAT
	FlPlayerErrorCooldownTime               DT_FLOAT
	Unk_71fe9f5                             DT_INT
	Unk_8a3b54b                             DT_FLOAT
	Unk_c6c6501                             DT_FLOAT
	Unk_be2dc46                             DT_FLOAT
	Unk_1a3078b                             DT_INT
	Unk_8c182bc                             DT_FLOAT
	Unk_28e5246                             DT_FLOAT
	Unk_9f1d1ec                             DT_FLOAT
	NCorpseResurrectionMaxCharges           DT_INT
	NCorpseResurrectionChargeRegenTime      DT_INT
	Unk_745ffba                             DT_FLOAT
	Unk_9021966                             DT_FLOAT
	FlRestXPBonusPercent                    DT_FLOAT
	Unk_db4052a                             DT_FLOAT
	FlItemCylinderHeight                    DT_FLOAT
	FlItemCylinderRadius                    DT_FLOAT
	Unk_ebe84a2                             DT_FLOAT
	Unk_9175934                             DT_FLOAT
	Unk_25263a2                             DT_FLOAT
	Unk_a118f6a                             DT_VARIABLEARRAY[*DT_RGBACOLOR]
	TAssetLists                             DT_FIXEDARRAY[*AssetList]
	FlVoteKickAttemptDelay                  DT_FLOAT
	FlVoteKickSuccessfulDelay               DT_FLOAT
	Unk_e9980af                             DT_FLOAT
	Unk_d658d4f                             DT_FLOAT
	FlCombatRadius                          DT_FLOAT
	Unk_a04a7d5                             DT_FLOAT
	FlTargetAbandonTime                     DT_FLOAT
	FlBossTargetAbandonTime                 DT_FLOAT
	FlMountedTargetAbandonTime              DT_FLOAT
	Unk_9a3861e                             DT_UINT
	Unk_27a4780                             DT_FLOAT
	Unk_d25790                              DT_FLOAT
	Unk_828940a                             DT_FLOAT
	Unk_626a640                             DT_FLOAT
	Unk_b05e753                             DT_FLOAT
	Unk_df8e743                             DT_FLOAT
	Unk_d3fa9ff                             DT_FLOAT
	Unk_948a837                             DT_FLOAT
	Unk_92fe267                             DT_FLOAT
	Unk_d6fd7a3                             DT_FLOAT
	Unk_eb11826                             DT_FLOAT
	Unk_195fb76                             DT_FLOAT
	Unk_caaf312                             DT_FLOAT
	Unk_a993b17                             DT_FLOAT
	Unk_4811560                             DT_FLOAT
	FlControllerAutoTargetingCloseRange     DT_FLOAT
	Unk_87d174a                             DT_FLOAT
	Unk_c37e6c9                             DT_FLOAT
	Unk_8891df5                             DT_FLOAT
	Unk_d552313                             DT_FLOAT
	Unk_ff1d407                             DT_FLOAT
	Unk_70ec1                               DT_INT
	Unk_3686ba1                             DT_FLOAT
	Unk_e8448d                              DT_FLOAT
	Unk_4f238e9                             DT_FLOAT
	Unk_d6be782                             DT_FLOAT
	Unk_98c772                              DT_FLOAT
	Unk_26c4feb                             DT_FLOAT
	Unk_9badb6d                             DT_FLOAT
	FlControllerMaxDeadZone                 DT_FLOAT
	Unk_c8e8eaa                             DT_FLOAT
	Unk_5c72c6c                             DT_FLOAT
	FlControllerRadialDeadZone              DT_FLOAT
	FlControllerCrossDeadZone               DT_FLOAT
	FlControllerSquareDeadZone              DT_FLOAT
	FlControllerMoveFacingZone              DT_FLOAT
	Unk_2b6ca3                              DT_FLOAT
	FlControllerMinMoveSpeedPercent         DT_FLOAT
	FlControllerMaxMoveThreshold            DT_FLOAT
	FlControllerEvadeZone                   DT_FLOAT
	FlControllerReboundDetectionZone        DT_FLOAT
	Unk_bd6dd59                             DT_FLOAT
	Unk_ee4e38c                             DT_FLOAT
	Unk_b01ac6a                             DT_FLOAT
	Unk_e0fb29d                             DT_FLOAT
	NControllerReboundDuration              DT_INT
	FlFacingMult                            DT_FLOAT
	Unk_89f8f1b                             DT_FLOAT
	Unk_eb3e3e1                             DT_FLOAT
	Unk_724e40                              DT_FLOAT
	FlControllerNormalTurnSpeed             DT_FLOAT
	Unk_867800f                             DT_FLOAT
	Unk_bce77fe                             DT_FLOAT
	Unk_f14295                              DT_FLOAT
	Unk_4639a17                             DT_FLOAT
	Unk_7d8ae03                             DT_FLOAT
	Unk_13e7c92                             DT_FLOAT
	Unk_c8eb270                             DT_FLOAT
	Unk_dac13bc                             DT_FLOAT
	Unk_73807f8                             DT_FLOAT
	Unk_a87e6d8                             DT_FLOAT
	FlLocalCoopDropsPerAdditionalPlayer     DT_FLOAT
	FlLocalCoopMagicFindBonusPerPlayer      DT_FLOAT
	Unk_8b7c556                             DT_FLOAT
	Unk_7c557f                              DT_FLOAT
	Unk_2d378f1                             DT_FLOAT
	Unk_d65b306                             DT_FLOAT
	Unk_6330331                             DT_FLOAT
	Unk_590a656                             DT_FLOAT
	Unk_4e80a81                             DT_FLOAT
	Unk_ec5016f                             DT_FLOAT
	Unk_91f0fa5                             DT_FLOAT
	Unk_2870b2a                             DT_FLOAT
	Unk_90af455                             DT_FLOAT
	Unk_698cc10                             DT_FLOAT
	Unk_89086bb                             DT_FLOAT
	Unk_13f115e                             DT_FLOAT
	Unk_5dd5789                             DT_FLOAT
	Unk_52d64ee                             DT_FLOAT
	Unk_8a3122b                             DT_FLOAT
	Unk_644bf96                             DT_FLOAT
	Unk_6a602d7                             DT_FLOAT
	Unk_c68b42                              DT_FLOAT
	Unk_77f6d53                             DT_FLOAT
	Unk_da484be                             DT_FLOAT
	Unk_1b9aeed                             DT_FLOAT
	FlRetreatSpeed                          DT_FLOAT
	Unk_6f5cf67                             DT_FLOAT
	Unk_90ec4a9                             DT_FLOAT
	Unk_41e36fe                             DT_FLOAT
	FlRetreatRadius                         DT_FLOAT
	FlDungeonRetreatRadiusOverride          DT_FLOAT
	FlCampRetreatRadiusOverride             DT_FLOAT
	FlWorldBossRetreatRadiusOverride        DT_FLOAT
	Unk_54c9bdd                             DT_FLOAT
	Unk_1495643                             DT_FLOAT
	Unk_b905edc                             DT_FLOAT
	Unk_85c8520                             DT_FLOAT
	Unk_9f06f92                             DT_FLOAT
	Unk_e99eb94                             DT_FLOAT
	Unk_6b2748d                             DT_FLOAT
	Unk_30be3a9                             DT_FLOAT
	SnoChampionEffectGroup                  DT_SNO
	Unk_89a383a                             DT_FLOAT
	Unk_c31c69e                             DT_FLOAT
	Unk_d3c532d                             DT_FLOAT
	Unk_8c04671                             DT_FLOAT
	Unk_25d5380                             DT_FLOAT
	Unk_359472b                             DT_FLOAT
	Unk_6691247                             DT_FLOAT
	Unk_b8b775b                             DT_FLOAT
	Unk_344205b                             DT_FLOAT
	ArWreckableDeathEffectGroups            DT_FIXEDARRAY[*DT_SNO]
	Unk_6446242                             DT_FIXEDARRAY[*DT_UINT]
	Unk_e8cf406                             DT_FLOAT
	Unk_f5138b2                             DT_FLOAT
	Unk_3de44f8                             DT_FLOAT
	Unk_d8774f9                             DT_FLOAT
	Unk_e8d16cb                             DT_FLOAT
	Unk_c8658af                             DT_FLOAT
	Unk_379ded                              DT_FLOAT
	Unk_c8501c8                             DT_FLOAT
	Unk_dddf871                             DT_FLOAT
	Unk_f07a0ad                             DT_FLOAT
	Unk_7b3aa95                             DT_FLOAT
	Unk_e85b37f                             DT_FLOAT
	Unk_ace0d77                             DT_FLOAT
	Unk_2b5e2e3                             DT_FLOAT
	Unk_ace303c                             DT_FLOAT
	Unk_1f600c0                             DT_FLOAT
	Unk_49be57e                             DT_FLOAT
	Unk_500aee9                             DT_FLOAT
	Unk_ea9deea                             DT_FLOAT
	Unk_36be83e                             DT_FLOAT
	Unk_8a0e446                             DT_FLOAT
	Unk_ac6ccf0                             DT_FLOAT
	Unk_ea216af                             DT_FLOAT
	ArCrowdControlEffects                   DT_FIXEDARRAY[*CrowdControlEffects]
	Unk_c84a3db                             DT_FLOAT
	Unk_fc90e9d                             DT_FLOAT
	FlChillDuration                         DT_FLOAT
	FlFrozenDuration                        DT_FLOAT
	FlChillProcAmount                       DT_FLOAT
	TSlowAmountSettings                     SlowAmountSettings
	TConfuseRadius                          DT_RANGE[*DT_INT]
	Unk_421e1a                              DT_FLOAT
	Unk_fd978e4                             DT_FLOAT
	Unk_5e484f3                             DT_FLOAT
	Unk_4ad06fe                             DT_FLOAT
	Unk_95a2eb5                             DT_FLOAT
	Unk_194621f                             DT_FLOAT
	Unk_7796b0e                             DT_FLOAT
	Unk_dc51799                             DT_FLOAT
	Unk_c706a2a                             DT_FLOAT
	Unk_a6682f4                             DT_FLOAT
	Unk_97a5903                             DT_FLOAT
	Unk_db530e                              DT_FLOAT
	Unk_2a2e4fd                             DT_FIXEDARRAY[*DT_FLOAT]
	Unk_47ab791                             DT_FLOAT
	Unk_1152bf4                             DT_FLOAT
	Unk_fbf84b1                             DT_FLOAT
	Unk_47f08e2                             DT_FIXEDARRAY[*DT_FLOAT]
	Unk_74d0fea                             DT_INT
	Unk_2af2ec3                             DT_INT
	Unk_3a14364                             DT_INT
	Unk_166f639                             DT_INT
	Unk_d213b04                             StringLabelHandleEx
	Unk_c5cd637                             DT_INT
	Unk_d85b358                             DT_INT
	Unk_463f23c                             DT_FIXEDARRAY[*DT_INT]
	ArWorldTiers                            DT_FIXEDARRAY[*WorldTierData]
	ArFlippyHangTime                        DT_FIXEDARRAY[*DT_FLOAT]
	ArFlippyDefaultParticleSystems          DT_FIXEDARRAY[*DT_SNO]
	FlNPCInteractDistance                   DT_FLOAT
	FlNPCInteractHeight                     DT_FLOAT
	FlConversationNearDistance              DT_FLOAT
	FlConversationCancelDistance            DT_FLOAT
	Unk_ab69427                             DT_FLOAT
	Unk_6457f8c                             DT_INT
	SnoConversationPortraitWorlds           DT_FIXEDARRAY[*DT_SNO]
	FlPersonalChatterCooldown               DT_FLOAT
	Unk_a1f16f1                             DT_FLOAT
	Unk_efdb522                             DT_FLOAT
	Unk_42948c4                             DT_FLOAT
	Unk_60e5526                             DT_FLOAT
	Unk_29951b5                             DT_FLOAT
	Unk_5d34691                             DT_FLOAT
	Unk_237d1fa                             DT_FLOAT
	Unk_38a54aa                             DT_UINT
	NDRLGSeedType                           DT_UINT
	Unk_71d473f                             DT_FLOAT
	Unk_7a4dcca                             DT_FLOAT
	Unk_97bf60d                             DT_FLOAT
	Unk_73e7909                             DT_FLOAT
	Unk_d4101f7                             DT_FLOAT
	Unk_5593852                             DT_FLOAT
	SnoMountUIWorld                         DT_SNO
	SnoMountPaperdollWorld                  DT_SNO
	Unk_7fd5dc6                             DT_FLOAT
	Unk_5af8b62                             DT_UINT
	Unk_eb1d100                             DT_FLOAT
	Unk_6bf80d8                             DT_FLOAT
	Unk_6396ebc                             DT_FLOAT
	Unk_fab7259                             DT_FLOAT
	Unk_4858565                             DT_FLOAT
	Unk_bd84137                             DT_FLOAT
	Unk_95c4279                             DT_FLOAT
	Unk_a42ecfd                             DT_FLOAT
	FlPartySummonDuration                   DT_FLOAT
	Unk_3af447e                             DT_FLOAT
	Unk_ba50d0f                             DT_FLOAT
	Unk_5c53403                             DT_FLOAT
	Unk_de13a01                             DT_FLOAT
	Unk_84adb3a                             DT_FLOAT
	Unk_f804cf9                             DT_FLOAT
	Unk_95cc949                             DT_FLOAT
	Unk_8d7337                              DT_FLOAT
	Unk_d714948                             DT_FLOAT
	Unk_4e0583b                             DT_FLOAT
	NTransmogSnapshotCosts                  DT_FIXEDARRAY[*DT_INT]
	ArFallbackTownPortalLevelAreas          DT_VARIABLEARRAY[*DT_SNO]
	Unk_91356ce                             DT_FLOAT
	Unk_4ab0243                             DT_INT
	Unk_ab4a88e                             DT_INT
	Unk_a9e4262                             DT_INT
	Unk_bc34342                             DT_INT
	Unk_b11b51b                             DT_FLOAT
	Unk_43088a0                             DT_FIXEDARRAY[*Type_7535b2ad]
	Unk_3021a92                             DT_UINT
	Unk_496cffb                             DT_UINT
	Unk_56d4995                             DT_FLOAT
	ArCurrencyCaps                          DT_FIXEDARRAY[*DT_INT64]
	Unk_606852d                             Type_3b00e8b9
	PtDefaultHitEffectData                  DT_VARIABLEARRAY[*ActorEffectData]
	Unk_2bb7f27                             DT_FLOAT
	Unk_50c5dba                             DT_FLOAT
	Unk_a19cbf3                             DT_FLOAT
	FlPowerEffectIntensityPerSkillRank      DT_FLOAT
	FlMaxPowerEffectIntensityFromSkillRanks DT_FLOAT
	Unk_57c5af4                             DT_FLOAT
	ArSeasons                               DT_VARIABLEARRAY[*DT_SNO]
	TScalarFormulas                         DT_VARIABLEARRAY[*ScalarFunctionFormula]
	Unk_5beabc1                             DT_FLOAT
	Unk_72ee1ae                             DT_FLOAT
	Unk_b59ed1                              DT_FLOAT
	Unk_38b5fed                             DT_FLOAT
	Unk_dbc6f0d                             DT_UINT
	Unk_9ea22ec                             DT_UINT
	Unk_9155d6b                             DT_INT
	Unk_b1d46f8                             DT_INT
	Unk_9f4060e                             DT_FLOAT
	Unk_2cbcb69                             DT_FLOAT
	Unk_603d082                             DT_FLOAT
	SnoLocalPlayerHitEffect                 DT_SNO
	Unk_bad483c                             DT_FLOAT
	Unk_f883e95                             DT_FLOAT
	Unk_ae661d1                             DT_FLOAT
}

func (t *GlobalData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.ArLookVariants, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.ArShaderMapOverrides, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.Unk_156a14c, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.Unk_6759f02, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.Unk_e2e2917, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.Unk_e2fe2ea, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.Unk_95f203b, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.Unk_db1c22b, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.Unk_b5ebbb2, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+100, &t.Unk_5ccf7cc, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+104, &t.Unk_e7d727, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+108, &t.Unk_51c96d6, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.Unk_ecd99ed, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+116, &t.Unk_51c95d8, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.Unk_ec03fd, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+124, &t.Unk_6032a24, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.Unk_d247cf8, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+132, &t.Unk_eea9f7c, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+136, &t.Unk_8472630, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+140, &t.Unk_8f17798, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+144, &t.Unk_7954efd, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+148, &t.Unk_1a40d94, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+152, &t.Unk_7954dff, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+156, &t.FlFloatingTextScale, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+160, &t.NFloatingTextFontSize, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+164, &t.Unk_eec6296, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+168, &t.Unk_917777c, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+172, &t.Unk_318127b, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+176, &t.Unk_f143013, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+180, &t.Unk_33296c0, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+184, &t.Unk_9ca3dcb, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+188, &t.Unk_18a668d, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+192, &t.Unk_b0ffbbf, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+196, &t.Unk_f54712c, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+200, &t.Unk_d6395ff, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+204, &t.Unk_854ceeb, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+208, &t.Unk_bb4f409, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+212, &t.Unk_ee3875c, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+216, &t.Unk_8b202cb, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+220, &t.Unk_b704b85, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+224, &t.Unk_f2db3a4, r, &Options{
		ArrayLength: 3,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+236, &t.Unk_ebfec0b, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+240, &t.Unk_3fe50bb, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+244, &t.Unk_5d77ea6, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+248, &t.Unk_5e4581e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+252, &t.SnoStartingSubzone, r, &Options{
		Flags: 513,
		Group: 80,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+256, &t.SnoStartingSubzoneCampaignSkip, r, &Options{
		Flags: 513,
		Group: 80,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+264, &t.ArStartLocationNames, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+280, &t.Unk_8aac9ef, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+312, &t.FlSellPricePercent, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+316, &t.FlPlayerPowerCacheTimeoutNormal, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+320, &t.FlPlayerPowerCacheTimeoutInterrupt, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+324, &t.Unk_d38759a, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+328, &t.Unk_dfccabc, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+332, &t.Unk_e9ca4ed, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+336, &t.Unk_e03c38a, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+340, &t.Unk_5b6dc2d, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+344, &t.Unk_f3679e3, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+348, &t.Unk_4f5a9e3, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+352, &t.Unk_44ba742, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+356, &t.Unk_1636dfe, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+360, &t.Unk_8835be2, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+364, &t.Unk_a70ae94, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+368, &t.Unk_43addd1, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+372, &t.Unk_6a55fc4, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+376, &t.Unk_f1891b9, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+384, &t.Unk_241909d, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+416, &t.NUIBusyTime, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+420, &t.NTrialVersionLevelCap, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+424, &t.FlDurabilityLossPercent, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+428, &t.Unk_17db22a, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+432, &t.FlItemEffectivenessPercent, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+436, &t.Unk_8aec133, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+440, &t.FlHirelingDiminishedBonusRatio, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+444, &t.Unk_882ccc8, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+448, &t.FlMonsterCritDamageScalar, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+452, &t.FlPlayerCritDamageScalar, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+456, &t.FlPvPMaxCritDamagePercent, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+460, &t.FlDefaultDamageVariance, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+464, &t.Unk_251341c, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+468, &t.FlBaseOverpowerDamageBonus, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+472, &t.Unk_e248d9d, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+476, &t.Unk_51a7ab2, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+480, &t.Unk_ed83bad, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+484, &t.Unk_a273c0d, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+488, &t.Unk_17b95e5, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+492, &t.Unk_d37d3d4, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+496, &t.NStashSlotsCost, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+500, &t.NStashTabCost, r, &Options{
		ArrayLength: 4,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+516, &t.NClanBankTabCost, r, &Options{
		ArrayLength: 5,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+536, &t.Unk_a9e9f16, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+568, &t.Unk_ea4532f, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+600, &t.NItemPowerOffset, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+604, &t.Unk_62802da, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+608, &t.Unk_3c98a40, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+612, &t.NParagonPointsEarnedPerLevel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+616, &t.Unk_60132bb, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+624, &t.ArStartingParagonGlyphs, r, &Options{
		Flags: 1,
		Group: 111,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+640, &t.ArParagonPowerBudgetMultiplier, r, &Options{
		ArrayLength: 11,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+684, &t.Unk_4b766ae, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+688, &t.Unk_5a673c4, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+692, &t.Unk_4a89716, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+696, &t.Unk_b491be3, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+700, &t.Unk_e762b56, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+704, &t.Unk_2e11fb8, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+708, &t.Unk_9a0ad1d, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+712, &t.Unk_6e8cb51, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+716, &t.Unk_43375bd, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+720, &t.Unk_66e2e96, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+724, &t.Unk_4d68111, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+728, &t.Unk_d2ab6e9, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+732, &t.Unk_7c75a6b, r, &Options{
		ArrayLength: 3,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+744, &t.Unk_6b670be, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+748, &t.Unk_13c636, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+752, &t.Unk_9a8035f, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+756, &t.Unk_fa7eefd, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+760, &t.Unk_7176abf, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+764, &t.TIQLPowerRanges, r, &Options{
		ArrayLength: 8,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1052, &t.TIQLSacredPowerRanges, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1088, &t.TIQLAncestralPowerRanges, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1124, &t.NMinimumSacredRequiredLevel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1128, &t.NMinimumAncestralRequiredLevel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1132, &t.Unk_3890cf4, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1136, &t.FlLegendaryAffixTwoHandBonus, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1140, &t.FlLegendaryAffixAmuletBonus, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1144, &t.FlSacredAffixScalarOffense, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1148, &t.FlSacredAffixScalarDefense, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1152, &t.FlAncestralAffixScalarOffense, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1156, &t.FlAncestralAffixScalarDefense, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1160, &t.Unk_4f066d9, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1164, &t.Unk_7393144, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1168, &t.NItemUpgradesMaxCommon, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1172, &t.NItemUpgradesMaxMagic, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1176, &t.NItemUpgradesMaxRare, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1180, &t.NItemUpgradesMaxLegendary, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1184, &t.NItemUpgradesMaxSacred, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1188, &t.ArItemUpgradeArmorPowerLevels, r, &Options{
		ArrayLength: 5,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1208, &t.ArItemUpgradeWeaponPowerLevels, r, &Options{
		ArrayLength: 5,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1228, &t.ArItemUpgradeJewelryPowerLevels, r, &Options{
		ArrayLength: 5,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1248, &t.Unk_57661a3, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1256, &t.Unk_6affe04, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1260, &t.Unk_a96b1a9, r, &Options{
		ArrayLength: 6,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1332, &t.Unk_ea22f36, r, &Options{
		ArrayLength: 8,
		Flags:       1,
		Group:       73,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1364, &t.FlHealthBase, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1368, &t.Unk_1e39848, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1372, &t.Unk_f00d070, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1376, &t.TDungeonMonsterPerPlayerScaling, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1404, &t.TOpenWorldMonsterPerPlayerScaling, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1432, &t.TLocalEventMonsterPerPlayerScaling, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1460, &t.TZoneEventMonsterPerPlayerScaling, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1488, &t.TWorldEventMonsterPerPlayerScaling, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1516, &t.Unk_57c5927, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1520, &t.Unk_54fe8b, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1524, &t.Unk_ce51b5a, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1528, &t.Unk_3f05457, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1532, &t.Unk_5b6bd4f, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1536, &t.Unk_bfde6a2, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1540, &t.Unk_fc1e7ff, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1544, &t.Unk_551056e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1548, &t.Unk_d616ce9, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1552, &t.Unk_28a2990, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1556, &t.Unk_d20a438, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1560, &t.Unk_a50d36c, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1564, &t.Unk_475b452, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1568, &t.Unk_b982fbb, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1572, &t.Unk_867f53b, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1576, &t.Unk_c02087d, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1580, &t.FlHealAbsorbDuration, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1584, &t.Unk_1e91b8e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1588, &t.Unk_468a2dc, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1592, &t.Unk_3debe95, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1596, &t.Unk_e8e5c04, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1600, &t.FlVulnerableDamageBonus, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1604, &t.Unk_2c3c144, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1608, &t.FlVulnerableDurationSeconds, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1612, &t.FlFortifiedHealthDamageReduction, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1616, &t.Unk_90f2fe1, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1620, &t.Unk_ad10637, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1624, &t.Unk_6e4eda1, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1628, &t.Unk_f345457, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1632, &t.Unk_ad76909, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1636, &t.Unk_685b23e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1640, &t.FlPlayerErrorCooldownTime, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1644, &t.Unk_71fe9f5, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1648, &t.Unk_8a3b54b, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1652, &t.Unk_c6c6501, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1656, &t.Unk_be2dc46, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1660, &t.Unk_1a3078b, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1664, &t.Unk_8c182bc, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1668, &t.Unk_28e5246, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1672, &t.Unk_9f1d1ec, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1676, &t.NCorpseResurrectionMaxCharges, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1680, &t.NCorpseResurrectionChargeRegenTime, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1684, &t.Unk_745ffba, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1688, &t.Unk_9021966, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1692, &t.FlRestXPBonusPercent, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1696, &t.Unk_db4052a, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1700, &t.FlItemCylinderHeight, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1704, &t.FlItemCylinderRadius, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1708, &t.Unk_ebe84a2, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1712, &t.Unk_9175934, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1716, &t.Unk_25263a2, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1720, &t.Unk_a118f6a, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1736, &t.TAssetLists, r, &Options{
		ArrayLength: 9,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1880, &t.FlVoteKickAttemptDelay, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1884, &t.FlVoteKickSuccessfulDelay, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1888, &t.Unk_e9980af, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1892, &t.Unk_d658d4f, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1896, &t.FlCombatRadius, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1900, &t.Unk_a04a7d5, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1904, &t.FlTargetAbandonTime, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1908, &t.FlBossTargetAbandonTime, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1912, &t.FlMountedTargetAbandonTime, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1916, &t.Unk_9a3861e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1920, &t.Unk_27a4780, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1924, &t.Unk_d25790, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1928, &t.Unk_828940a, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1932, &t.Unk_626a640, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1936, &t.Unk_b05e753, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1940, &t.Unk_df8e743, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1944, &t.Unk_d3fa9ff, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1948, &t.Unk_948a837, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1952, &t.Unk_92fe267, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1956, &t.Unk_d6fd7a3, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1960, &t.Unk_eb11826, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1964, &t.Unk_195fb76, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1968, &t.Unk_caaf312, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1972, &t.Unk_a993b17, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1976, &t.Unk_4811560, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1980, &t.FlControllerAutoTargetingCloseRange, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1984, &t.Unk_87d174a, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1988, &t.Unk_c37e6c9, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1992, &t.Unk_8891df5, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1996, &t.Unk_d552313, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2000, &t.Unk_ff1d407, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2004, &t.Unk_70ec1, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2008, &t.Unk_3686ba1, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2012, &t.Unk_e8448d, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2016, &t.Unk_4f238e9, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2020, &t.Unk_d6be782, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2024, &t.Unk_98c772, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2028, &t.Unk_26c4feb, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2032, &t.Unk_9badb6d, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2036, &t.FlControllerMaxDeadZone, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2040, &t.Unk_c8e8eaa, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2044, &t.Unk_5c72c6c, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2048, &t.FlControllerRadialDeadZone, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2052, &t.FlControllerCrossDeadZone, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2056, &t.FlControllerSquareDeadZone, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2060, &t.FlControllerMoveFacingZone, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2064, &t.Unk_2b6ca3, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2068, &t.FlControllerMinMoveSpeedPercent, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2072, &t.FlControllerMaxMoveThreshold, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2076, &t.FlControllerEvadeZone, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2080, &t.FlControllerReboundDetectionZone, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2084, &t.Unk_bd6dd59, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2088, &t.Unk_ee4e38c, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2092, &t.Unk_b01ac6a, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2096, &t.Unk_e0fb29d, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2100, &t.NControllerReboundDuration, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2104, &t.FlFacingMult, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2108, &t.Unk_89f8f1b, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2112, &t.Unk_eb3e3e1, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2116, &t.Unk_724e40, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2120, &t.FlControllerNormalTurnSpeed, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2124, &t.Unk_867800f, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2128, &t.Unk_bce77fe, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2132, &t.Unk_f14295, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2136, &t.Unk_4639a17, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2140, &t.Unk_7d8ae03, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2144, &t.Unk_13e7c92, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2148, &t.Unk_c8eb270, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2152, &t.Unk_dac13bc, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2156, &t.Unk_73807f8, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2160, &t.Unk_a87e6d8, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2164, &t.FlLocalCoopDropsPerAdditionalPlayer, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2168, &t.FlLocalCoopMagicFindBonusPerPlayer, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2172, &t.Unk_8b7c556, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2176, &t.Unk_7c557f, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2180, &t.Unk_2d378f1, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2184, &t.Unk_d65b306, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2188, &t.Unk_6330331, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2192, &t.Unk_590a656, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2196, &t.Unk_4e80a81, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2200, &t.Unk_ec5016f, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2204, &t.Unk_91f0fa5, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2208, &t.Unk_2870b2a, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2212, &t.Unk_90af455, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2216, &t.Unk_698cc10, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2220, &t.Unk_89086bb, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2224, &t.Unk_13f115e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2228, &t.Unk_5dd5789, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2232, &t.Unk_52d64ee, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2236, &t.Unk_8a3122b, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2240, &t.Unk_644bf96, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2244, &t.Unk_6a602d7, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2248, &t.Unk_c68b42, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2252, &t.Unk_77f6d53, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2256, &t.Unk_da484be, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2260, &t.Unk_1b9aeed, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2264, &t.FlRetreatSpeed, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2268, &t.Unk_6f5cf67, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2272, &t.Unk_90ec4a9, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2276, &t.Unk_41e36fe, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2280, &t.FlRetreatRadius, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2284, &t.FlDungeonRetreatRadiusOverride, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2288, &t.FlCampRetreatRadiusOverride, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2292, &t.FlWorldBossRetreatRadiusOverride, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2296, &t.Unk_54c9bdd, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2300, &t.Unk_1495643, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2304, &t.Unk_b905edc, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2308, &t.Unk_85c8520, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2312, &t.Unk_9f06f92, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2316, &t.Unk_e99eb94, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2320, &t.Unk_6b2748d, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2324, &t.Unk_30be3a9, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2328, &t.SnoChampionEffectGroup, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2332, &t.Unk_89a383a, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2336, &t.Unk_c31c69e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2340, &t.Unk_d3c532d, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2344, &t.Unk_8c04671, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2348, &t.Unk_25d5380, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2352, &t.Unk_359472b, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2356, &t.Unk_6691247, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2360, &t.Unk_b8b775b, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2364, &t.Unk_344205b, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2368, &t.ArWreckableDeathEffectGroups, r, &Options{
		ArrayLength: 6,
		Flags:       1,
		Group:       14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2392, &t.Unk_6446242, r, &Options{
		ArrayLength: 6,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2416, &t.Unk_e8cf406, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2420, &t.Unk_f5138b2, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2424, &t.Unk_3de44f8, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2428, &t.Unk_d8774f9, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2432, &t.Unk_e8d16cb, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2436, &t.Unk_c8658af, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2440, &t.Unk_379ded, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2444, &t.Unk_c8501c8, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2448, &t.Unk_dddf871, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2452, &t.Unk_f07a0ad, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2456, &t.Unk_7b3aa95, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2460, &t.Unk_e85b37f, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2464, &t.Unk_ace0d77, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2468, &t.Unk_2b5e2e3, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2472, &t.Unk_ace303c, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2476, &t.Unk_1f600c0, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2480, &t.Unk_49be57e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2484, &t.Unk_500aee9, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2488, &t.Unk_ea9deea, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2492, &t.Unk_36be83e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2496, &t.Unk_8a0e446, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2500, &t.Unk_ac6ccf0, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2504, &t.Unk_ea216af, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2508, &t.ArCrowdControlEffects, r, &Options{
		ArrayLength: 14,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2676, &t.Unk_c84a3db, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2680, &t.Unk_fc90e9d, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2684, &t.FlChillDuration, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2688, &t.FlFrozenDuration, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2692, &t.FlChillProcAmount, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2696, &t.TSlowAmountSettings, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2708, &t.TConfuseRadius, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2716, &t.Unk_421e1a, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2720, &t.Unk_fd978e4, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2724, &t.Unk_5e484f3, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2728, &t.Unk_4ad06fe, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2732, &t.Unk_95a2eb5, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2736, &t.Unk_194621f, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2740, &t.Unk_7796b0e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2744, &t.Unk_dc51799, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2748, &t.Unk_c706a2a, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2752, &t.Unk_a6682f4, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2756, &t.Unk_97a5903, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2760, &t.Unk_db530e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2764, &t.Unk_2a2e4fd, r, &Options{
		ArrayLength: 14,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2820, &t.Unk_47ab791, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2824, &t.Unk_1152bf4, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2828, &t.Unk_fbf84b1, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2832, &t.Unk_47f08e2, r, &Options{
		ArrayLength: 3,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2844, &t.Unk_74d0fea, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2848, &t.Unk_2af2ec3, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2852, &t.Unk_3a14364, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2856, &t.Unk_166f639, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2860, &t.Unk_d213b04, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2868, &t.Unk_c5cd637, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2872, &t.Unk_d85b358, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2876, &t.Unk_463f23c, r, &Options{
		ArrayLength: 3,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2888, &t.ArWorldTiers, r, &Options{
		ArrayLength: 4,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+3752, &t.ArFlippyHangTime, r, &Options{
		ArrayLength: 5,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+3772, &t.ArFlippyDefaultParticleSystems, r, &Options{
		ArrayLength: 5,
		Flags:       1,
		Group:       27,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+3792, &t.FlNPCInteractDistance, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+3796, &t.FlNPCInteractHeight, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+3800, &t.FlConversationNearDistance, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+3804, &t.FlConversationCancelDistance, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+3808, &t.Unk_ab69427, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+3812, &t.Unk_6457f8c, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+3816, &t.SnoConversationPortraitWorlds, r, &Options{
		ArrayLength: 8,
		Flags:       513,
		Group:       48,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+3848, &t.FlPersonalChatterCooldown, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+3852, &t.Unk_a1f16f1, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+3856, &t.Unk_efdb522, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+3860, &t.Unk_42948c4, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+3864, &t.Unk_60e5526, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+3868, &t.Unk_29951b5, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+3872, &t.Unk_5d34691, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+3876, &t.Unk_237d1fa, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+3880, &t.Unk_38a54aa, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+3884, &t.NDRLGSeedType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+3888, &t.Unk_71d473f, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+3892, &t.Unk_7a4dcca, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+3896, &t.Unk_97bf60d, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+3900, &t.Unk_73e7909, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+3904, &t.Unk_d4101f7, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+3908, &t.Unk_5593852, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+3912, &t.SnoMountUIWorld, r, &Options{
		Flags: 513,
		Group: 48,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+3916, &t.SnoMountPaperdollWorld, r, &Options{
		Flags: 513,
		Group: 48,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+3920, &t.Unk_7fd5dc6, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+3924, &t.Unk_5af8b62, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+3928, &t.Unk_eb1d100, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+3932, &t.Unk_6bf80d8, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+3936, &t.Unk_6396ebc, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+3940, &t.Unk_fab7259, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+3944, &t.Unk_4858565, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+3948, &t.Unk_bd84137, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+3952, &t.Unk_95c4279, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+3956, &t.Unk_a42ecfd, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+3960, &t.FlPartySummonDuration, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+3964, &t.Unk_3af447e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+3968, &t.Unk_ba50d0f, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+3972, &t.Unk_5c53403, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+3976, &t.Unk_de13a01, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+3980, &t.Unk_84adb3a, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+3984, &t.Unk_f804cf9, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+3988, &t.Unk_95cc949, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+3992, &t.Unk_8d7337, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+3996, &t.Unk_d714948, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4000, &t.Unk_4e0583b, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4004, &t.NTransmogSnapshotCosts, r, &Options{
		ArrayLength: 5,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4024, &t.ArFallbackTownPortalLevelAreas, r, &Options{
		Flags: 513,
		Group: 22,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4040, &t.Unk_91356ce, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4044, &t.Unk_4ab0243, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4048, &t.Unk_ab4a88e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4052, &t.Unk_a9e4262, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4056, &t.Unk_bc34342, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4060, &t.Unk_b11b51b, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4064, &t.Unk_43088a0, r, &Options{
		ArrayLength: 3,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4088, &t.Unk_3021a92, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4092, &t.Unk_496cffb, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4096, &t.Unk_56d4995, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4104, &t.ArCurrencyCaps, r, &Options{
		ArrayLength: 55,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4544, &t.Unk_606852d, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4568, &t.PtDefaultHitEffectData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4584, &t.Unk_2bb7f27, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4588, &t.Unk_50c5dba, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4592, &t.Unk_a19cbf3, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4596, &t.FlPowerEffectIntensityPerSkillRank, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4600, &t.FlMaxPowerEffectIntensityFromSkillRanks, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4604, &t.Unk_57c5af4, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4608, &t.ArSeasons, r, &Options{
		Flags: 1,
		Group: 137,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4624, &t.TScalarFormulas, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4640, &t.Unk_5beabc1, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4644, &t.Unk_72ee1ae, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4648, &t.Unk_b59ed1, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4652, &t.Unk_38b5fed, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4656, &t.Unk_dbc6f0d, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4660, &t.Unk_9ea22ec, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4664, &t.Unk_9155d6b, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4668, &t.Unk_b1d46f8, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4672, &t.Unk_9f4060e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4676, &t.Unk_2cbcb69, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4680, &t.Unk_603d082, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4684, &t.SnoLocalPlayerHitEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4688, &t.Unk_bad483c, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4692, &t.Unk_f883e95, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4696, &t.Unk_ae661d1, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+4704, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *GlobalData) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("ArLookVariants", &t.ArLookVariants, d...)
	cb.Do("ArShaderMapOverrides", &t.ArShaderMapOverrides, d...)
	cb.Do("Unk_156a14c", &t.Unk_156a14c, d...)
	cb.Do("Unk_6759f02", &t.Unk_6759f02, d...)
	cb.Do("Unk_e2e2917", &t.Unk_e2e2917, d...)
	cb.Do("Unk_e2fe2ea", &t.Unk_e2fe2ea, d...)
	cb.Do("Unk_95f203b", &t.Unk_95f203b, d...)
	cb.Do("Unk_db1c22b", &t.Unk_db1c22b, d...)
	cb.Do("Unk_b5ebbb2", &t.Unk_b5ebbb2, d...)
	cb.Do("Unk_5ccf7cc", &t.Unk_5ccf7cc, d...)
	cb.Do("Unk_e7d727", &t.Unk_e7d727, d...)
	cb.Do("Unk_51c96d6", &t.Unk_51c96d6, d...)
	cb.Do("Unk_ecd99ed", &t.Unk_ecd99ed, d...)
	cb.Do("Unk_51c95d8", &t.Unk_51c95d8, d...)
	cb.Do("Unk_ec03fd", &t.Unk_ec03fd, d...)
	cb.Do("Unk_6032a24", &t.Unk_6032a24, d...)
	cb.Do("Unk_d247cf8", &t.Unk_d247cf8, d...)
	cb.Do("Unk_eea9f7c", &t.Unk_eea9f7c, d...)
	cb.Do("Unk_8472630", &t.Unk_8472630, d...)
	cb.Do("Unk_8f17798", &t.Unk_8f17798, d...)
	cb.Do("Unk_7954efd", &t.Unk_7954efd, d...)
	cb.Do("Unk_1a40d94", &t.Unk_1a40d94, d...)
	cb.Do("Unk_7954dff", &t.Unk_7954dff, d...)
	cb.Do("FlFloatingTextScale", &t.FlFloatingTextScale, d...)
	cb.Do("NFloatingTextFontSize", &t.NFloatingTextFontSize, d...)
	cb.Do("Unk_eec6296", &t.Unk_eec6296, d...)
	cb.Do("Unk_917777c", &t.Unk_917777c, d...)
	cb.Do("Unk_318127b", &t.Unk_318127b, d...)
	cb.Do("Unk_f143013", &t.Unk_f143013, d...)
	cb.Do("Unk_33296c0", &t.Unk_33296c0, d...)
	cb.Do("Unk_9ca3dcb", &t.Unk_9ca3dcb, d...)
	cb.Do("Unk_18a668d", &t.Unk_18a668d, d...)
	cb.Do("Unk_b0ffbbf", &t.Unk_b0ffbbf, d...)
	cb.Do("Unk_f54712c", &t.Unk_f54712c, d...)
	cb.Do("Unk_d6395ff", &t.Unk_d6395ff, d...)
	cb.Do("Unk_854ceeb", &t.Unk_854ceeb, d...)
	cb.Do("Unk_bb4f409", &t.Unk_bb4f409, d...)
	cb.Do("Unk_ee3875c", &t.Unk_ee3875c, d...)
	cb.Do("Unk_8b202cb", &t.Unk_8b202cb, d...)
	cb.Do("Unk_b704b85", &t.Unk_b704b85, d...)
	cb.Do("Unk_f2db3a4", &t.Unk_f2db3a4, d...)
	cb.Do("Unk_ebfec0b", &t.Unk_ebfec0b, d...)
	cb.Do("Unk_3fe50bb", &t.Unk_3fe50bb, d...)
	cb.Do("Unk_5d77ea6", &t.Unk_5d77ea6, d...)
	cb.Do("Unk_5e4581e", &t.Unk_5e4581e, d...)
	cb.Do("SnoStartingSubzone", &t.SnoStartingSubzone, d...)
	cb.Do("SnoStartingSubzoneCampaignSkip", &t.SnoStartingSubzoneCampaignSkip, d...)
	cb.Do("ArStartLocationNames", &t.ArStartLocationNames, d...)
	cb.Do("Unk_8aac9ef", &t.Unk_8aac9ef, d...)
	cb.Do("FlSellPricePercent", &t.FlSellPricePercent, d...)
	cb.Do("FlPlayerPowerCacheTimeoutNormal", &t.FlPlayerPowerCacheTimeoutNormal, d...)
	cb.Do("FlPlayerPowerCacheTimeoutInterrupt", &t.FlPlayerPowerCacheTimeoutInterrupt, d...)
	cb.Do("Unk_d38759a", &t.Unk_d38759a, d...)
	cb.Do("Unk_dfccabc", &t.Unk_dfccabc, d...)
	cb.Do("Unk_e9ca4ed", &t.Unk_e9ca4ed, d...)
	cb.Do("Unk_e03c38a", &t.Unk_e03c38a, d...)
	cb.Do("Unk_5b6dc2d", &t.Unk_5b6dc2d, d...)
	cb.Do("Unk_f3679e3", &t.Unk_f3679e3, d...)
	cb.Do("Unk_4f5a9e3", &t.Unk_4f5a9e3, d...)
	cb.Do("Unk_44ba742", &t.Unk_44ba742, d...)
	cb.Do("Unk_1636dfe", &t.Unk_1636dfe, d...)
	cb.Do("Unk_8835be2", &t.Unk_8835be2, d...)
	cb.Do("Unk_a70ae94", &t.Unk_a70ae94, d...)
	cb.Do("Unk_43addd1", &t.Unk_43addd1, d...)
	cb.Do("Unk_6a55fc4", &t.Unk_6a55fc4, d...)
	cb.Do("Unk_f1891b9", &t.Unk_f1891b9, d...)
	cb.Do("Unk_241909d", &t.Unk_241909d, d...)
	cb.Do("NUIBusyTime", &t.NUIBusyTime, d...)
	cb.Do("NTrialVersionLevelCap", &t.NTrialVersionLevelCap, d...)
	cb.Do("FlDurabilityLossPercent", &t.FlDurabilityLossPercent, d...)
	cb.Do("Unk_17db22a", &t.Unk_17db22a, d...)
	cb.Do("FlItemEffectivenessPercent", &t.FlItemEffectivenessPercent, d...)
	cb.Do("Unk_8aec133", &t.Unk_8aec133, d...)
	cb.Do("FlHirelingDiminishedBonusRatio", &t.FlHirelingDiminishedBonusRatio, d...)
	cb.Do("Unk_882ccc8", &t.Unk_882ccc8, d...)
	cb.Do("FlMonsterCritDamageScalar", &t.FlMonsterCritDamageScalar, d...)
	cb.Do("FlPlayerCritDamageScalar", &t.FlPlayerCritDamageScalar, d...)
	cb.Do("FlPvPMaxCritDamagePercent", &t.FlPvPMaxCritDamagePercent, d...)
	cb.Do("FlDefaultDamageVariance", &t.FlDefaultDamageVariance, d...)
	cb.Do("Unk_251341c", &t.Unk_251341c, d...)
	cb.Do("FlBaseOverpowerDamageBonus", &t.FlBaseOverpowerDamageBonus, d...)
	cb.Do("Unk_e248d9d", &t.Unk_e248d9d, d...)
	cb.Do("Unk_51a7ab2", &t.Unk_51a7ab2, d...)
	cb.Do("Unk_ed83bad", &t.Unk_ed83bad, d...)
	cb.Do("Unk_a273c0d", &t.Unk_a273c0d, d...)
	cb.Do("Unk_17b95e5", &t.Unk_17b95e5, d...)
	cb.Do("Unk_d37d3d4", &t.Unk_d37d3d4, d...)
	cb.Do("NStashSlotsCost", &t.NStashSlotsCost, d...)
	cb.Do("NStashTabCost", &t.NStashTabCost, d...)
	cb.Do("NClanBankTabCost", &t.NClanBankTabCost, d...)
	cb.Do("Unk_a9e9f16", &t.Unk_a9e9f16, d...)
	cb.Do("Unk_ea4532f", &t.Unk_ea4532f, d...)
	cb.Do("NItemPowerOffset", &t.NItemPowerOffset, d...)
	cb.Do("Unk_62802da", &t.Unk_62802da, d...)
	cb.Do("Unk_3c98a40", &t.Unk_3c98a40, d...)
	cb.Do("NParagonPointsEarnedPerLevel", &t.NParagonPointsEarnedPerLevel, d...)
	cb.Do("Unk_60132bb", &t.Unk_60132bb, d...)
	cb.Do("ArStartingParagonGlyphs", &t.ArStartingParagonGlyphs, d...)
	cb.Do("ArParagonPowerBudgetMultiplier", &t.ArParagonPowerBudgetMultiplier, d...)
	cb.Do("Unk_4b766ae", &t.Unk_4b766ae, d...)
	cb.Do("Unk_5a673c4", &t.Unk_5a673c4, d...)
	cb.Do("Unk_4a89716", &t.Unk_4a89716, d...)
	cb.Do("Unk_b491be3", &t.Unk_b491be3, d...)
	cb.Do("Unk_e762b56", &t.Unk_e762b56, d...)
	cb.Do("Unk_2e11fb8", &t.Unk_2e11fb8, d...)
	cb.Do("Unk_9a0ad1d", &t.Unk_9a0ad1d, d...)
	cb.Do("Unk_6e8cb51", &t.Unk_6e8cb51, d...)
	cb.Do("Unk_43375bd", &t.Unk_43375bd, d...)
	cb.Do("Unk_66e2e96", &t.Unk_66e2e96, d...)
	cb.Do("Unk_4d68111", &t.Unk_4d68111, d...)
	cb.Do("Unk_d2ab6e9", &t.Unk_d2ab6e9, d...)
	cb.Do("Unk_7c75a6b", &t.Unk_7c75a6b, d...)
	cb.Do("Unk_6b670be", &t.Unk_6b670be, d...)
	cb.Do("Unk_13c636", &t.Unk_13c636, d...)
	cb.Do("Unk_9a8035f", &t.Unk_9a8035f, d...)
	cb.Do("Unk_fa7eefd", &t.Unk_fa7eefd, d...)
	cb.Do("Unk_7176abf", &t.Unk_7176abf, d...)
	cb.Do("TIQLPowerRanges", &t.TIQLPowerRanges, d...)
	cb.Do("TIQLSacredPowerRanges", &t.TIQLSacredPowerRanges, d...)
	cb.Do("TIQLAncestralPowerRanges", &t.TIQLAncestralPowerRanges, d...)
	cb.Do("NMinimumSacredRequiredLevel", &t.NMinimumSacredRequiredLevel, d...)
	cb.Do("NMinimumAncestralRequiredLevel", &t.NMinimumAncestralRequiredLevel, d...)
	cb.Do("Unk_3890cf4", &t.Unk_3890cf4, d...)
	cb.Do("FlLegendaryAffixTwoHandBonus", &t.FlLegendaryAffixTwoHandBonus, d...)
	cb.Do("FlLegendaryAffixAmuletBonus", &t.FlLegendaryAffixAmuletBonus, d...)
	cb.Do("FlSacredAffixScalarOffense", &t.FlSacredAffixScalarOffense, d...)
	cb.Do("FlSacredAffixScalarDefense", &t.FlSacredAffixScalarDefense, d...)
	cb.Do("FlAncestralAffixScalarOffense", &t.FlAncestralAffixScalarOffense, d...)
	cb.Do("FlAncestralAffixScalarDefense", &t.FlAncestralAffixScalarDefense, d...)
	cb.Do("Unk_4f066d9", &t.Unk_4f066d9, d...)
	cb.Do("Unk_7393144", &t.Unk_7393144, d...)
	cb.Do("NItemUpgradesMaxCommon", &t.NItemUpgradesMaxCommon, d...)
	cb.Do("NItemUpgradesMaxMagic", &t.NItemUpgradesMaxMagic, d...)
	cb.Do("NItemUpgradesMaxRare", &t.NItemUpgradesMaxRare, d...)
	cb.Do("NItemUpgradesMaxLegendary", &t.NItemUpgradesMaxLegendary, d...)
	cb.Do("NItemUpgradesMaxSacred", &t.NItemUpgradesMaxSacred, d...)
	cb.Do("ArItemUpgradeArmorPowerLevels", &t.ArItemUpgradeArmorPowerLevels, d...)
	cb.Do("ArItemUpgradeWeaponPowerLevels", &t.ArItemUpgradeWeaponPowerLevels, d...)
	cb.Do("ArItemUpgradeJewelryPowerLevels", &t.ArItemUpgradeJewelryPowerLevels, d...)
	cb.Do("Unk_57661a3", &t.Unk_57661a3, d...)
	cb.Do("Unk_6affe04", &t.Unk_6affe04, d...)
	cb.Do("Unk_a96b1a9", &t.Unk_a96b1a9, d...)
	cb.Do("Unk_ea22f36", &t.Unk_ea22f36, d...)
	cb.Do("FlHealthBase", &t.FlHealthBase, d...)
	cb.Do("Unk_1e39848", &t.Unk_1e39848, d...)
	cb.Do("Unk_f00d070", &t.Unk_f00d070, d...)
	cb.Do("TDungeonMonsterPerPlayerScaling", &t.TDungeonMonsterPerPlayerScaling, d...)
	cb.Do("TOpenWorldMonsterPerPlayerScaling", &t.TOpenWorldMonsterPerPlayerScaling, d...)
	cb.Do("TLocalEventMonsterPerPlayerScaling", &t.TLocalEventMonsterPerPlayerScaling, d...)
	cb.Do("TZoneEventMonsterPerPlayerScaling", &t.TZoneEventMonsterPerPlayerScaling, d...)
	cb.Do("TWorldEventMonsterPerPlayerScaling", &t.TWorldEventMonsterPerPlayerScaling, d...)
	cb.Do("Unk_57c5927", &t.Unk_57c5927, d...)
	cb.Do("Unk_54fe8b", &t.Unk_54fe8b, d...)
	cb.Do("Unk_ce51b5a", &t.Unk_ce51b5a, d...)
	cb.Do("Unk_3f05457", &t.Unk_3f05457, d...)
	cb.Do("Unk_5b6bd4f", &t.Unk_5b6bd4f, d...)
	cb.Do("Unk_bfde6a2", &t.Unk_bfde6a2, d...)
	cb.Do("Unk_fc1e7ff", &t.Unk_fc1e7ff, d...)
	cb.Do("Unk_551056e", &t.Unk_551056e, d...)
	cb.Do("Unk_d616ce9", &t.Unk_d616ce9, d...)
	cb.Do("Unk_28a2990", &t.Unk_28a2990, d...)
	cb.Do("Unk_d20a438", &t.Unk_d20a438, d...)
	cb.Do("Unk_a50d36c", &t.Unk_a50d36c, d...)
	cb.Do("Unk_475b452", &t.Unk_475b452, d...)
	cb.Do("Unk_b982fbb", &t.Unk_b982fbb, d...)
	cb.Do("Unk_867f53b", &t.Unk_867f53b, d...)
	cb.Do("Unk_c02087d", &t.Unk_c02087d, d...)
	cb.Do("FlHealAbsorbDuration", &t.FlHealAbsorbDuration, d...)
	cb.Do("Unk_1e91b8e", &t.Unk_1e91b8e, d...)
	cb.Do("Unk_468a2dc", &t.Unk_468a2dc, d...)
	cb.Do("Unk_3debe95", &t.Unk_3debe95, d...)
	cb.Do("Unk_e8e5c04", &t.Unk_e8e5c04, d...)
	cb.Do("FlVulnerableDamageBonus", &t.FlVulnerableDamageBonus, d...)
	cb.Do("Unk_2c3c144", &t.Unk_2c3c144, d...)
	cb.Do("FlVulnerableDurationSeconds", &t.FlVulnerableDurationSeconds, d...)
	cb.Do("FlFortifiedHealthDamageReduction", &t.FlFortifiedHealthDamageReduction, d...)
	cb.Do("Unk_90f2fe1", &t.Unk_90f2fe1, d...)
	cb.Do("Unk_ad10637", &t.Unk_ad10637, d...)
	cb.Do("Unk_6e4eda1", &t.Unk_6e4eda1, d...)
	cb.Do("Unk_f345457", &t.Unk_f345457, d...)
	cb.Do("Unk_ad76909", &t.Unk_ad76909, d...)
	cb.Do("Unk_685b23e", &t.Unk_685b23e, d...)
	cb.Do("FlPlayerErrorCooldownTime", &t.FlPlayerErrorCooldownTime, d...)
	cb.Do("Unk_71fe9f5", &t.Unk_71fe9f5, d...)
	cb.Do("Unk_8a3b54b", &t.Unk_8a3b54b, d...)
	cb.Do("Unk_c6c6501", &t.Unk_c6c6501, d...)
	cb.Do("Unk_be2dc46", &t.Unk_be2dc46, d...)
	cb.Do("Unk_1a3078b", &t.Unk_1a3078b, d...)
	cb.Do("Unk_8c182bc", &t.Unk_8c182bc, d...)
	cb.Do("Unk_28e5246", &t.Unk_28e5246, d...)
	cb.Do("Unk_9f1d1ec", &t.Unk_9f1d1ec, d...)
	cb.Do("NCorpseResurrectionMaxCharges", &t.NCorpseResurrectionMaxCharges, d...)
	cb.Do("NCorpseResurrectionChargeRegenTime", &t.NCorpseResurrectionChargeRegenTime, d...)
	cb.Do("Unk_745ffba", &t.Unk_745ffba, d...)
	cb.Do("Unk_9021966", &t.Unk_9021966, d...)
	cb.Do("FlRestXPBonusPercent", &t.FlRestXPBonusPercent, d...)
	cb.Do("Unk_db4052a", &t.Unk_db4052a, d...)
	cb.Do("FlItemCylinderHeight", &t.FlItemCylinderHeight, d...)
	cb.Do("FlItemCylinderRadius", &t.FlItemCylinderRadius, d...)
	cb.Do("Unk_ebe84a2", &t.Unk_ebe84a2, d...)
	cb.Do("Unk_9175934", &t.Unk_9175934, d...)
	cb.Do("Unk_25263a2", &t.Unk_25263a2, d...)
	cb.Do("Unk_a118f6a", &t.Unk_a118f6a, d...)
	cb.Do("TAssetLists", &t.TAssetLists, d...)
	cb.Do("FlVoteKickAttemptDelay", &t.FlVoteKickAttemptDelay, d...)
	cb.Do("FlVoteKickSuccessfulDelay", &t.FlVoteKickSuccessfulDelay, d...)
	cb.Do("Unk_e9980af", &t.Unk_e9980af, d...)
	cb.Do("Unk_d658d4f", &t.Unk_d658d4f, d...)
	cb.Do("FlCombatRadius", &t.FlCombatRadius, d...)
	cb.Do("Unk_a04a7d5", &t.Unk_a04a7d5, d...)
	cb.Do("FlTargetAbandonTime", &t.FlTargetAbandonTime, d...)
	cb.Do("FlBossTargetAbandonTime", &t.FlBossTargetAbandonTime, d...)
	cb.Do("FlMountedTargetAbandonTime", &t.FlMountedTargetAbandonTime, d...)
	cb.Do("Unk_9a3861e", &t.Unk_9a3861e, d...)
	cb.Do("Unk_27a4780", &t.Unk_27a4780, d...)
	cb.Do("Unk_d25790", &t.Unk_d25790, d...)
	cb.Do("Unk_828940a", &t.Unk_828940a, d...)
	cb.Do("Unk_626a640", &t.Unk_626a640, d...)
	cb.Do("Unk_b05e753", &t.Unk_b05e753, d...)
	cb.Do("Unk_df8e743", &t.Unk_df8e743, d...)
	cb.Do("Unk_d3fa9ff", &t.Unk_d3fa9ff, d...)
	cb.Do("Unk_948a837", &t.Unk_948a837, d...)
	cb.Do("Unk_92fe267", &t.Unk_92fe267, d...)
	cb.Do("Unk_d6fd7a3", &t.Unk_d6fd7a3, d...)
	cb.Do("Unk_eb11826", &t.Unk_eb11826, d...)
	cb.Do("Unk_195fb76", &t.Unk_195fb76, d...)
	cb.Do("Unk_caaf312", &t.Unk_caaf312, d...)
	cb.Do("Unk_a993b17", &t.Unk_a993b17, d...)
	cb.Do("Unk_4811560", &t.Unk_4811560, d...)
	cb.Do("FlControllerAutoTargetingCloseRange", &t.FlControllerAutoTargetingCloseRange, d...)
	cb.Do("Unk_87d174a", &t.Unk_87d174a, d...)
	cb.Do("Unk_c37e6c9", &t.Unk_c37e6c9, d...)
	cb.Do("Unk_8891df5", &t.Unk_8891df5, d...)
	cb.Do("Unk_d552313", &t.Unk_d552313, d...)
	cb.Do("Unk_ff1d407", &t.Unk_ff1d407, d...)
	cb.Do("Unk_70ec1", &t.Unk_70ec1, d...)
	cb.Do("Unk_3686ba1", &t.Unk_3686ba1, d...)
	cb.Do("Unk_e8448d", &t.Unk_e8448d, d...)
	cb.Do("Unk_4f238e9", &t.Unk_4f238e9, d...)
	cb.Do("Unk_d6be782", &t.Unk_d6be782, d...)
	cb.Do("Unk_98c772", &t.Unk_98c772, d...)
	cb.Do("Unk_26c4feb", &t.Unk_26c4feb, d...)
	cb.Do("Unk_9badb6d", &t.Unk_9badb6d, d...)
	cb.Do("FlControllerMaxDeadZone", &t.FlControllerMaxDeadZone, d...)
	cb.Do("Unk_c8e8eaa", &t.Unk_c8e8eaa, d...)
	cb.Do("Unk_5c72c6c", &t.Unk_5c72c6c, d...)
	cb.Do("FlControllerRadialDeadZone", &t.FlControllerRadialDeadZone, d...)
	cb.Do("FlControllerCrossDeadZone", &t.FlControllerCrossDeadZone, d...)
	cb.Do("FlControllerSquareDeadZone", &t.FlControllerSquareDeadZone, d...)
	cb.Do("FlControllerMoveFacingZone", &t.FlControllerMoveFacingZone, d...)
	cb.Do("Unk_2b6ca3", &t.Unk_2b6ca3, d...)
	cb.Do("FlControllerMinMoveSpeedPercent", &t.FlControllerMinMoveSpeedPercent, d...)
	cb.Do("FlControllerMaxMoveThreshold", &t.FlControllerMaxMoveThreshold, d...)
	cb.Do("FlControllerEvadeZone", &t.FlControllerEvadeZone, d...)
	cb.Do("FlControllerReboundDetectionZone", &t.FlControllerReboundDetectionZone, d...)
	cb.Do("Unk_bd6dd59", &t.Unk_bd6dd59, d...)
	cb.Do("Unk_ee4e38c", &t.Unk_ee4e38c, d...)
	cb.Do("Unk_b01ac6a", &t.Unk_b01ac6a, d...)
	cb.Do("Unk_e0fb29d", &t.Unk_e0fb29d, d...)
	cb.Do("NControllerReboundDuration", &t.NControllerReboundDuration, d...)
	cb.Do("FlFacingMult", &t.FlFacingMult, d...)
	cb.Do("Unk_89f8f1b", &t.Unk_89f8f1b, d...)
	cb.Do("Unk_eb3e3e1", &t.Unk_eb3e3e1, d...)
	cb.Do("Unk_724e40", &t.Unk_724e40, d...)
	cb.Do("FlControllerNormalTurnSpeed", &t.FlControllerNormalTurnSpeed, d...)
	cb.Do("Unk_867800f", &t.Unk_867800f, d...)
	cb.Do("Unk_bce77fe", &t.Unk_bce77fe, d...)
	cb.Do("Unk_f14295", &t.Unk_f14295, d...)
	cb.Do("Unk_4639a17", &t.Unk_4639a17, d...)
	cb.Do("Unk_7d8ae03", &t.Unk_7d8ae03, d...)
	cb.Do("Unk_13e7c92", &t.Unk_13e7c92, d...)
	cb.Do("Unk_c8eb270", &t.Unk_c8eb270, d...)
	cb.Do("Unk_dac13bc", &t.Unk_dac13bc, d...)
	cb.Do("Unk_73807f8", &t.Unk_73807f8, d...)
	cb.Do("Unk_a87e6d8", &t.Unk_a87e6d8, d...)
	cb.Do("FlLocalCoopDropsPerAdditionalPlayer", &t.FlLocalCoopDropsPerAdditionalPlayer, d...)
	cb.Do("FlLocalCoopMagicFindBonusPerPlayer", &t.FlLocalCoopMagicFindBonusPerPlayer, d...)
	cb.Do("Unk_8b7c556", &t.Unk_8b7c556, d...)
	cb.Do("Unk_7c557f", &t.Unk_7c557f, d...)
	cb.Do("Unk_2d378f1", &t.Unk_2d378f1, d...)
	cb.Do("Unk_d65b306", &t.Unk_d65b306, d...)
	cb.Do("Unk_6330331", &t.Unk_6330331, d...)
	cb.Do("Unk_590a656", &t.Unk_590a656, d...)
	cb.Do("Unk_4e80a81", &t.Unk_4e80a81, d...)
	cb.Do("Unk_ec5016f", &t.Unk_ec5016f, d...)
	cb.Do("Unk_91f0fa5", &t.Unk_91f0fa5, d...)
	cb.Do("Unk_2870b2a", &t.Unk_2870b2a, d...)
	cb.Do("Unk_90af455", &t.Unk_90af455, d...)
	cb.Do("Unk_698cc10", &t.Unk_698cc10, d...)
	cb.Do("Unk_89086bb", &t.Unk_89086bb, d...)
	cb.Do("Unk_13f115e", &t.Unk_13f115e, d...)
	cb.Do("Unk_5dd5789", &t.Unk_5dd5789, d...)
	cb.Do("Unk_52d64ee", &t.Unk_52d64ee, d...)
	cb.Do("Unk_8a3122b", &t.Unk_8a3122b, d...)
	cb.Do("Unk_644bf96", &t.Unk_644bf96, d...)
	cb.Do("Unk_6a602d7", &t.Unk_6a602d7, d...)
	cb.Do("Unk_c68b42", &t.Unk_c68b42, d...)
	cb.Do("Unk_77f6d53", &t.Unk_77f6d53, d...)
	cb.Do("Unk_da484be", &t.Unk_da484be, d...)
	cb.Do("Unk_1b9aeed", &t.Unk_1b9aeed, d...)
	cb.Do("FlRetreatSpeed", &t.FlRetreatSpeed, d...)
	cb.Do("Unk_6f5cf67", &t.Unk_6f5cf67, d...)
	cb.Do("Unk_90ec4a9", &t.Unk_90ec4a9, d...)
	cb.Do("Unk_41e36fe", &t.Unk_41e36fe, d...)
	cb.Do("FlRetreatRadius", &t.FlRetreatRadius, d...)
	cb.Do("FlDungeonRetreatRadiusOverride", &t.FlDungeonRetreatRadiusOverride, d...)
	cb.Do("FlCampRetreatRadiusOverride", &t.FlCampRetreatRadiusOverride, d...)
	cb.Do("FlWorldBossRetreatRadiusOverride", &t.FlWorldBossRetreatRadiusOverride, d...)
	cb.Do("Unk_54c9bdd", &t.Unk_54c9bdd, d...)
	cb.Do("Unk_1495643", &t.Unk_1495643, d...)
	cb.Do("Unk_b905edc", &t.Unk_b905edc, d...)
	cb.Do("Unk_85c8520", &t.Unk_85c8520, d...)
	cb.Do("Unk_9f06f92", &t.Unk_9f06f92, d...)
	cb.Do("Unk_e99eb94", &t.Unk_e99eb94, d...)
	cb.Do("Unk_6b2748d", &t.Unk_6b2748d, d...)
	cb.Do("Unk_30be3a9", &t.Unk_30be3a9, d...)
	cb.Do("SnoChampionEffectGroup", &t.SnoChampionEffectGroup, d...)
	cb.Do("Unk_89a383a", &t.Unk_89a383a, d...)
	cb.Do("Unk_c31c69e", &t.Unk_c31c69e, d...)
	cb.Do("Unk_d3c532d", &t.Unk_d3c532d, d...)
	cb.Do("Unk_8c04671", &t.Unk_8c04671, d...)
	cb.Do("Unk_25d5380", &t.Unk_25d5380, d...)
	cb.Do("Unk_359472b", &t.Unk_359472b, d...)
	cb.Do("Unk_6691247", &t.Unk_6691247, d...)
	cb.Do("Unk_b8b775b", &t.Unk_b8b775b, d...)
	cb.Do("Unk_344205b", &t.Unk_344205b, d...)
	cb.Do("ArWreckableDeathEffectGroups", &t.ArWreckableDeathEffectGroups, d...)
	cb.Do("Unk_6446242", &t.Unk_6446242, d...)
	cb.Do("Unk_e8cf406", &t.Unk_e8cf406, d...)
	cb.Do("Unk_f5138b2", &t.Unk_f5138b2, d...)
	cb.Do("Unk_3de44f8", &t.Unk_3de44f8, d...)
	cb.Do("Unk_d8774f9", &t.Unk_d8774f9, d...)
	cb.Do("Unk_e8d16cb", &t.Unk_e8d16cb, d...)
	cb.Do("Unk_c8658af", &t.Unk_c8658af, d...)
	cb.Do("Unk_379ded", &t.Unk_379ded, d...)
	cb.Do("Unk_c8501c8", &t.Unk_c8501c8, d...)
	cb.Do("Unk_dddf871", &t.Unk_dddf871, d...)
	cb.Do("Unk_f07a0ad", &t.Unk_f07a0ad, d...)
	cb.Do("Unk_7b3aa95", &t.Unk_7b3aa95, d...)
	cb.Do("Unk_e85b37f", &t.Unk_e85b37f, d...)
	cb.Do("Unk_ace0d77", &t.Unk_ace0d77, d...)
	cb.Do("Unk_2b5e2e3", &t.Unk_2b5e2e3, d...)
	cb.Do("Unk_ace303c", &t.Unk_ace303c, d...)
	cb.Do("Unk_1f600c0", &t.Unk_1f600c0, d...)
	cb.Do("Unk_49be57e", &t.Unk_49be57e, d...)
	cb.Do("Unk_500aee9", &t.Unk_500aee9, d...)
	cb.Do("Unk_ea9deea", &t.Unk_ea9deea, d...)
	cb.Do("Unk_36be83e", &t.Unk_36be83e, d...)
	cb.Do("Unk_8a0e446", &t.Unk_8a0e446, d...)
	cb.Do("Unk_ac6ccf0", &t.Unk_ac6ccf0, d...)
	cb.Do("Unk_ea216af", &t.Unk_ea216af, d...)
	cb.Do("ArCrowdControlEffects", &t.ArCrowdControlEffects, d...)
	cb.Do("Unk_c84a3db", &t.Unk_c84a3db, d...)
	cb.Do("Unk_fc90e9d", &t.Unk_fc90e9d, d...)
	cb.Do("FlChillDuration", &t.FlChillDuration, d...)
	cb.Do("FlFrozenDuration", &t.FlFrozenDuration, d...)
	cb.Do("FlChillProcAmount", &t.FlChillProcAmount, d...)
	cb.Do("TSlowAmountSettings", &t.TSlowAmountSettings, d...)
	cb.Do("TConfuseRadius", &t.TConfuseRadius, d...)
	cb.Do("Unk_421e1a", &t.Unk_421e1a, d...)
	cb.Do("Unk_fd978e4", &t.Unk_fd978e4, d...)
	cb.Do("Unk_5e484f3", &t.Unk_5e484f3, d...)
	cb.Do("Unk_4ad06fe", &t.Unk_4ad06fe, d...)
	cb.Do("Unk_95a2eb5", &t.Unk_95a2eb5, d...)
	cb.Do("Unk_194621f", &t.Unk_194621f, d...)
	cb.Do("Unk_7796b0e", &t.Unk_7796b0e, d...)
	cb.Do("Unk_dc51799", &t.Unk_dc51799, d...)
	cb.Do("Unk_c706a2a", &t.Unk_c706a2a, d...)
	cb.Do("Unk_a6682f4", &t.Unk_a6682f4, d...)
	cb.Do("Unk_97a5903", &t.Unk_97a5903, d...)
	cb.Do("Unk_db530e", &t.Unk_db530e, d...)
	cb.Do("Unk_2a2e4fd", &t.Unk_2a2e4fd, d...)
	cb.Do("Unk_47ab791", &t.Unk_47ab791, d...)
	cb.Do("Unk_1152bf4", &t.Unk_1152bf4, d...)
	cb.Do("Unk_fbf84b1", &t.Unk_fbf84b1, d...)
	cb.Do("Unk_47f08e2", &t.Unk_47f08e2, d...)
	cb.Do("Unk_74d0fea", &t.Unk_74d0fea, d...)
	cb.Do("Unk_2af2ec3", &t.Unk_2af2ec3, d...)
	cb.Do("Unk_3a14364", &t.Unk_3a14364, d...)
	cb.Do("Unk_166f639", &t.Unk_166f639, d...)
	cb.Do("Unk_d213b04", &t.Unk_d213b04, d...)
	cb.Do("Unk_c5cd637", &t.Unk_c5cd637, d...)
	cb.Do("Unk_d85b358", &t.Unk_d85b358, d...)
	cb.Do("Unk_463f23c", &t.Unk_463f23c, d...)
	cb.Do("ArWorldTiers", &t.ArWorldTiers, d...)
	cb.Do("ArFlippyHangTime", &t.ArFlippyHangTime, d...)
	cb.Do("ArFlippyDefaultParticleSystems", &t.ArFlippyDefaultParticleSystems, d...)
	cb.Do("FlNPCInteractDistance", &t.FlNPCInteractDistance, d...)
	cb.Do("FlNPCInteractHeight", &t.FlNPCInteractHeight, d...)
	cb.Do("FlConversationNearDistance", &t.FlConversationNearDistance, d...)
	cb.Do("FlConversationCancelDistance", &t.FlConversationCancelDistance, d...)
	cb.Do("Unk_ab69427", &t.Unk_ab69427, d...)
	cb.Do("Unk_6457f8c", &t.Unk_6457f8c, d...)
	cb.Do("SnoConversationPortraitWorlds", &t.SnoConversationPortraitWorlds, d...)
	cb.Do("FlPersonalChatterCooldown", &t.FlPersonalChatterCooldown, d...)
	cb.Do("Unk_a1f16f1", &t.Unk_a1f16f1, d...)
	cb.Do("Unk_efdb522", &t.Unk_efdb522, d...)
	cb.Do("Unk_42948c4", &t.Unk_42948c4, d...)
	cb.Do("Unk_60e5526", &t.Unk_60e5526, d...)
	cb.Do("Unk_29951b5", &t.Unk_29951b5, d...)
	cb.Do("Unk_5d34691", &t.Unk_5d34691, d...)
	cb.Do("Unk_237d1fa", &t.Unk_237d1fa, d...)
	cb.Do("Unk_38a54aa", &t.Unk_38a54aa, d...)
	cb.Do("NDRLGSeedType", &t.NDRLGSeedType, d...)
	cb.Do("Unk_71d473f", &t.Unk_71d473f, d...)
	cb.Do("Unk_7a4dcca", &t.Unk_7a4dcca, d...)
	cb.Do("Unk_97bf60d", &t.Unk_97bf60d, d...)
	cb.Do("Unk_73e7909", &t.Unk_73e7909, d...)
	cb.Do("Unk_d4101f7", &t.Unk_d4101f7, d...)
	cb.Do("Unk_5593852", &t.Unk_5593852, d...)
	cb.Do("SnoMountUIWorld", &t.SnoMountUIWorld, d...)
	cb.Do("SnoMountPaperdollWorld", &t.SnoMountPaperdollWorld, d...)
	cb.Do("Unk_7fd5dc6", &t.Unk_7fd5dc6, d...)
	cb.Do("Unk_5af8b62", &t.Unk_5af8b62, d...)
	cb.Do("Unk_eb1d100", &t.Unk_eb1d100, d...)
	cb.Do("Unk_6bf80d8", &t.Unk_6bf80d8, d...)
	cb.Do("Unk_6396ebc", &t.Unk_6396ebc, d...)
	cb.Do("Unk_fab7259", &t.Unk_fab7259, d...)
	cb.Do("Unk_4858565", &t.Unk_4858565, d...)
	cb.Do("Unk_bd84137", &t.Unk_bd84137, d...)
	cb.Do("Unk_95c4279", &t.Unk_95c4279, d...)
	cb.Do("Unk_a42ecfd", &t.Unk_a42ecfd, d...)
	cb.Do("FlPartySummonDuration", &t.FlPartySummonDuration, d...)
	cb.Do("Unk_3af447e", &t.Unk_3af447e, d...)
	cb.Do("Unk_ba50d0f", &t.Unk_ba50d0f, d...)
	cb.Do("Unk_5c53403", &t.Unk_5c53403, d...)
	cb.Do("Unk_de13a01", &t.Unk_de13a01, d...)
	cb.Do("Unk_84adb3a", &t.Unk_84adb3a, d...)
	cb.Do("Unk_f804cf9", &t.Unk_f804cf9, d...)
	cb.Do("Unk_95cc949", &t.Unk_95cc949, d...)
	cb.Do("Unk_8d7337", &t.Unk_8d7337, d...)
	cb.Do("Unk_d714948", &t.Unk_d714948, d...)
	cb.Do("Unk_4e0583b", &t.Unk_4e0583b, d...)
	cb.Do("NTransmogSnapshotCosts", &t.NTransmogSnapshotCosts, d...)
	cb.Do("ArFallbackTownPortalLevelAreas", &t.ArFallbackTownPortalLevelAreas, d...)
	cb.Do("Unk_91356ce", &t.Unk_91356ce, d...)
	cb.Do("Unk_4ab0243", &t.Unk_4ab0243, d...)
	cb.Do("Unk_ab4a88e", &t.Unk_ab4a88e, d...)
	cb.Do("Unk_a9e4262", &t.Unk_a9e4262, d...)
	cb.Do("Unk_bc34342", &t.Unk_bc34342, d...)
	cb.Do("Unk_b11b51b", &t.Unk_b11b51b, d...)
	cb.Do("Unk_43088a0", &t.Unk_43088a0, d...)
	cb.Do("Unk_3021a92", &t.Unk_3021a92, d...)
	cb.Do("Unk_496cffb", &t.Unk_496cffb, d...)
	cb.Do("Unk_56d4995", &t.Unk_56d4995, d...)
	cb.Do("ArCurrencyCaps", &t.ArCurrencyCaps, d...)
	cb.Do("Unk_606852d", &t.Unk_606852d, d...)
	cb.Do("PtDefaultHitEffectData", &t.PtDefaultHitEffectData, d...)
	cb.Do("Unk_2bb7f27", &t.Unk_2bb7f27, d...)
	cb.Do("Unk_50c5dba", &t.Unk_50c5dba, d...)
	cb.Do("Unk_a19cbf3", &t.Unk_a19cbf3, d...)
	cb.Do("FlPowerEffectIntensityPerSkillRank", &t.FlPowerEffectIntensityPerSkillRank, d...)
	cb.Do("FlMaxPowerEffectIntensityFromSkillRanks", &t.FlMaxPowerEffectIntensityFromSkillRanks, d...)
	cb.Do("Unk_57c5af4", &t.Unk_57c5af4, d...)
	cb.Do("ArSeasons", &t.ArSeasons, d...)
	cb.Do("TScalarFormulas", &t.TScalarFormulas, d...)
	cb.Do("Unk_5beabc1", &t.Unk_5beabc1, d...)
	cb.Do("Unk_72ee1ae", &t.Unk_72ee1ae, d...)
	cb.Do("Unk_b59ed1", &t.Unk_b59ed1, d...)
	cb.Do("Unk_38b5fed", &t.Unk_38b5fed, d...)
	cb.Do("Unk_dbc6f0d", &t.Unk_dbc6f0d, d...)
	cb.Do("Unk_9ea22ec", &t.Unk_9ea22ec, d...)
	cb.Do("Unk_9155d6b", &t.Unk_9155d6b, d...)
	cb.Do("Unk_b1d46f8", &t.Unk_b1d46f8, d...)
	cb.Do("Unk_9f4060e", &t.Unk_9f4060e, d...)
	cb.Do("Unk_2cbcb69", &t.Unk_2cbcb69, d...)
	cb.Do("Unk_603d082", &t.Unk_603d082, d...)
	cb.Do("SnoLocalPlayerHitEffect", &t.SnoLocalPlayerHitEffect, d...)
	cb.Do("Unk_bad483c", &t.Unk_bad483c, d...)
	cb.Do("Unk_f883e95", &t.Unk_f883e95, d...)
	cb.Do("Unk_ae661d1", &t.Unk_ae661d1, d...)
}

type TutorialDefinition struct {
	DwNextID             DT_UINT
	EType                DT_ENUM
	DwFlags              DT_UINT
	ArSlides             DT_VARIABLEARRAY[*TutorialScreen]
	EVisibilityCondition DT_ENUM
	FlTimeBeforeFading   DT_FLOAT
	EAlignHorizontal     DT_ENUM
	EAlignVertical       DT_ENUM
	VecOffset            DT_BCVEC2I
	SzAnchorControl      DT_CSTRING[*DT_BYTE]
}

func (t *TutorialDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwNextID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.EType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.DwFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ArSlides, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.EVisibilityCondition, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.FlTimeBeforeFading, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.EAlignHorizontal, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.EAlignVertical, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.VecOffset, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.SzAnchorControl, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+80, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TutorialDefinition) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwNextID", &t.DwNextID, d...)
	cb.Do("EType", &t.EType, d...)
	cb.Do("DwFlags", &t.DwFlags, d...)
	cb.Do("ArSlides", &t.ArSlides, d...)
	cb.Do("EVisibilityCondition", &t.EVisibilityCondition, d...)
	cb.Do("FlTimeBeforeFading", &t.FlTimeBeforeFading, d...)
	cb.Do("EAlignHorizontal", &t.EAlignHorizontal, d...)
	cb.Do("EAlignVertical", &t.EAlignVertical, d...)
	cb.Do("VecOffset", &t.VecOffset, d...)
	cb.Do("SzAnchorControl", &t.SzAnchorControl, d...)
}

type EventCallbackSubcondition struct {
	// Inherits QuestSubconditionBase
	// Inherits Subcondition
	// Inherits PolymorphicBase
	DwType       DT_UINT
	BNegate      DT_INT
	SnoQuest     DT_SNO
	DwPad        DT_UINT
	NStepUID     DT_INT
	NCallbackUID DT_UINT
	EComp        DT_ENUM
	NCount       DT_UINT
}

func (t *EventCallbackSubcondition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BNegate, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SnoQuest, r, &Options{
		Flags: 513,
		Group: 31,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.NStepUID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.NCallbackUID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.EComp, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.NCount, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *EventCallbackSubcondition) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("BNegate", &t.BNegate, d...)
	cb.Do("SnoQuest", &t.SnoQuest, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("NStepUID", &t.NStepUID, d...)
	cb.Do("NCallbackUID", &t.NCallbackUID, d...)
	cb.Do("EComp", &t.EComp, d...)
	cb.Do("NCount", &t.NCount, d...)
}

type GameTestingTakeScreenshotMessage struct {
	THeader     RequiredMessageHeader
	Unk_870804d DT_INT
	SzName      DT_CHARARRAY
}

func (t *GameTestingTakeScreenshotMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_870804d, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.SzName, r, &Options{
		ArrayLength: 128,
		Flags:       1,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+148, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *GameTestingTakeScreenshotMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("Unk_870804d", &t.Unk_870804d, d...)
	cb.Do("SzName", &t.SzName, d...)
}

type UberMaterial struct {
	SnoShaderMap                DT_SNO
	SnoMaterialValueSetOverride DT_SNO
	Mat                         Material
	PtMatTexList                DT_VARIABLEARRAY[*MaterialTextureEntry]
	PtRunTimeMaterialValues     DT_VARIABLEARRAY[*RunTimeMaterialValues]
	NTexAnimStateCount          DT_INT
	FHasGraph                   DT_INT
}

func (t *UberMaterial) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoShaderMap, r, &Options{
		Flags: 257,
		Group: 36,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.SnoMaterialValueSetOverride, r, &Options{
		Flags: 1,
		Group: 85,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.Mat, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.PtMatTexList, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.PtRunTimeMaterialValues, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.NTexAnimStateCount, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.FHasGraph, r, &Options{Flags: 16}); err != nil {
		return err
	}
	if _, err := r.Seek(p+56, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *UberMaterial) Walk(cb WalkCallback, d ...any) {
	cb.Do("SnoShaderMap", &t.SnoShaderMap, d...)
	cb.Do("SnoMaterialValueSetOverride", &t.SnoMaterialValueSetOverride, d...)
	cb.Do("Mat", &t.Mat, d...)
	cb.Do("PtMatTexList", &t.PtMatTexList, d...)
	cb.Do("PtRunTimeMaterialValues", &t.PtRunTimeMaterialValues, d...)
	cb.Do("NTexAnimStateCount", &t.NTexAnimStateCount, d...)
	cb.Do("FHasGraph", &t.FHasGraph, d...)
}

type StartLocationName struct {
	UGUID  DT_UINT
	SzName DT_CHARARRAY
}

func (t *StartLocationName) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.UGUID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.SzName, r, &Options{
		ArrayLength: 64,
		Flags:       1,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+68, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *StartLocationName) Walk(cb WalkCallback, d ...any) {
	cb.Do("UGUID", &t.UGUID, d...)
	cb.Do("SzName", &t.SzName, d...)
}

type CampaignData struct {
	ArCampaignArcs DT_VARIABLEARRAY[*CampaignArc]
}

func (t *CampaignData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.ArCampaignArcs, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *CampaignData) Walk(cb WalkCallback, d ...any) {
	cb.Do("ArCampaignArcs", &t.ArCampaignArcs, d...)
}

type PlayerOwnsAMountSubcondition struct {
	// Inherits Subcondition
	// Inherits PolymorphicBase
	DwType  DT_UINT
	BNegate DT_INT
	DwPad   DT_UINT
}

func (t *PlayerOwnsAMountSubcondition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BNegate, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PlayerOwnsAMountSubcondition) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("BNegate", &t.BNegate, d...)
	cb.Do("DwPad", &t.DwPad, d...)
}

type SurveyMessage struct {
	THeader        RequiredMessageHeader
	TSNOName       DT_SNO_NAME
	GbidSurveyType DT_GBID
}

func (t *SurveyMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TSNOName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.GbidSurveyType, r, &Options{
		Flags: 1,
		Group: 57,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+28, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *SurveyMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("TSNOName", &t.TSNOName, d...)
	cb.Do("GbidSurveyType", &t.GbidSurveyType, d...)
}

type HelpCode_Table struct {
	// Inherits GameBalanceTable
	// Inherits PolymorphicBase
	DwType   DT_UINT
	DwPad    DT_UINT
	TEntries DT_VARIABLEARRAY[*HelpCode]
}

func (t *HelpCode_Table) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TEntries, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *HelpCode_Table) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("TEntries", &t.TEntries, d...)
}

type FogMask struct {
	DwWidth  DT_UINT
	DwHeight DT_UINT
	ArMask   DT_VARIABLEARRAY[*DT_BYTE]
}

func (t *FogMask) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.DwWidth, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.DwHeight, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.ArMask, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *FogMask) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwWidth", &t.DwWidth, d...)
	cb.Do("DwHeight", &t.DwHeight, d...)
	cb.Do("ArMask", &t.ArMask, d...)
}

type StoryboardUIControlSetBottomTrack struct {
	// Inherits StoryboardUIControlSetValueTrack_float
	DwType          DT_UINT
	TNodeCollection StoryboardValueNodeCollection_float
	Unk_77ed19a     DT_ENUM
	DwPad           DT_UINT
}

func (t *StoryboardUIControlSetBottomTrack) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TNodeCollection, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.Unk_77ed19a, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+56, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *StoryboardUIControlSetBottomTrack) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("TNodeCollection", &t.TNodeCollection, d...)
	cb.Do("Unk_77ed19a", &t.Unk_77ed19a, d...)
	cb.Do("DwPad", &t.DwPad, d...)
}

type DebugProjectileMovementUpdateMessage struct {
	THeader                   RequiredMessageHeader
	Ann                       DT_ACD_NETWORK_NAME
	IdSWorld                  DT_SHARED_SERVER_DATA_ID
	WpStart                   DT_VECTOR3D
	VVelocity                 DT_VECTOR3D
	Unk_5aa0d1f               DT_VECTOR3D
	Unk_be8c5f6               DT_INT
	FlProjectileRadius        DT_FLOAT
	FlProjectileCapsuleLength DT_FLOAT
	TDetPathData              DT_OPTIONAL[*DebugProjectileDetPathData]
	ArCollisionChecks         DT_FIXEDARRAY[*DebugProjectileCollisionCheck]
	Unk_81f3430               DT_INT
}

func (t *DebugProjectileMovementUpdateMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Ann, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.IdSWorld, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.WpStart, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.VVelocity, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.Unk_5aa0d1f, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.Unk_be8c5f6, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.FlProjectileRadius, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.FlProjectileCapsuleLength, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.TDetPathData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+140, &t.ArCollisionChecks, r, &Options{
		ArrayLength: 4,
		Flags:       8,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+336, &t.Unk_81f3430, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+340, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *DebugProjectileMovementUpdateMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("Ann", &t.Ann, d...)
	cb.Do("IdSWorld", &t.IdSWorld, d...)
	cb.Do("WpStart", &t.WpStart, d...)
	cb.Do("VVelocity", &t.VVelocity, d...)
	cb.Do("Unk_5aa0d1f", &t.Unk_5aa0d1f, d...)
	cb.Do("Unk_be8c5f6", &t.Unk_be8c5f6, d...)
	cb.Do("FlProjectileRadius", &t.FlProjectileRadius, d...)
	cb.Do("FlProjectileCapsuleLength", &t.FlProjectileCapsuleLength, d...)
	cb.Do("TDetPathData", &t.TDetPathData, d...)
	cb.Do("ArCollisionChecks", &t.ArCollisionChecks, d...)
	cb.Do("Unk_81f3430", &t.Unk_81f3430, d...)
}

type GameTestingSalvageItems struct {
	THeader RequiredMessageHeader
}

func (t *GameTestingSalvageItems) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *GameTestingSalvageItems) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
}

type NpcFollowerArchetype struct {
	SzName               DT_CSTRING[*DT_BYTE]
	SzToolTip            DT_CSTRING[*DT_BYTE]
	SnoAIBehavior        DT_SNO
	PtValidWeaponClasses DT_VARIABLEARRAY[*DT_ENUM]
}

func (t *NpcFollowerArchetype) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SzName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SzToolTip, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.SnoAIBehavior, r, &Options{
		Flags: 1,
		Group: 3,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.PtValidWeaponClasses, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+56, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *NpcFollowerArchetype) Walk(cb WalkCallback, d ...any) {
	cb.Do("SzName", &t.SzName, d...)
	cb.Do("SzToolTip", &t.SzToolTip, d...)
	cb.Do("SnoAIBehavior", &t.SnoAIBehavior, d...)
	cb.Do("PtValidWeaponClasses", &t.PtValidWeaponClasses, d...)
}

type GlobalClanData struct {
	// Inherits GlobalBase
	// Inherits PolymorphicBase
	DwType             DT_UINT
	DwPad              DT_UINT
	ArLabels           DT_VARIABLEARRAY[*ClanLabel]
	ArBannerShapes     DT_VARIABLEARRAY[*BannerMaskOnly]
	ArTextilePatterns  DT_VARIABLEARRAY[*BannerMaskOnly]
	ArTextileTextures  DT_VARIABLEARRAY[*BannerTextileTexture]
	ArEmbroideries     DT_VARIABLEARRAY[*BannerMaskOnly]
	ArTrims            DT_VARIABLEARRAY[*BannerTrim]
	ArIcons            DT_VARIABLEARRAY[*BannerIcon]
	ArColors           DT_VARIABLEARRAY[*BannerColor]
	ArIconAnchorPoints DT_VARIABLEARRAY[*IconAnchorPoint]
	ArIconLayouts      DT_VARIABLEARRAY[*IconLayout]
	ArDefaultBanners   DT_VARIABLEARRAY[*PresetBannerData]
	TYBlankBannerData  BlankBannerData
	Unk_109949c        Type_1259dca8
	TIconScale         IconScale
}

func (t *GlobalClanData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.ArLabels, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.ArBannerShapes, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.ArTextilePatterns, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.ArTextileTextures, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.ArEmbroideries, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.ArTrims, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.ArIcons, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.ArColors, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+144, &t.ArIconAnchorPoints, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+160, &t.ArIconLayouts, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+176, &t.ArDefaultBanners, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+192, &t.TYBlankBannerData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+208, &t.Unk_109949c, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+224, &t.TIconScale, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+240, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *GlobalClanData) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("ArLabels", &t.ArLabels, d...)
	cb.Do("ArBannerShapes", &t.ArBannerShapes, d...)
	cb.Do("ArTextilePatterns", &t.ArTextilePatterns, d...)
	cb.Do("ArTextileTextures", &t.ArTextileTextures, d...)
	cb.Do("ArEmbroideries", &t.ArEmbroideries, d...)
	cb.Do("ArTrims", &t.ArTrims, d...)
	cb.Do("ArIcons", &t.ArIcons, d...)
	cb.Do("ArColors", &t.ArColors, d...)
	cb.Do("ArIconAnchorPoints", &t.ArIconAnchorPoints, d...)
	cb.Do("ArIconLayouts", &t.ArIconLayouts, d...)
	cb.Do("ArDefaultBanners", &t.ArDefaultBanners, d...)
	cb.Do("TYBlankBannerData", &t.TYBlankBannerData, d...)
	cb.Do("Unk_109949c", &t.Unk_109949c, d...)
	cb.Do("TIconScale", &t.TIconScale, d...)
}

type DetachCarryableFromPlayerMessage struct {
	THeader      RequiredMessageHeader
	AnnPlayer    DT_ACD_NETWORK_NAME
	SnoCarryable DT_SNO
	Unk_fa1aeb2  DT_OPTIONAL[*DT_INT]
}

func (t *DetachCarryableFromPlayerMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.AnnPlayer, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SnoCarryable, r, &Options{
		Flags: 1,
		Group: 1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.Unk_fa1aeb2, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+36, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *DetachCarryableFromPlayerMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("AnnPlayer", &t.AnnPlayer, d...)
	cb.Do("SnoCarryable", &t.SnoCarryable, d...)
	cb.Do("Unk_fa1aeb2", &t.Unk_fa1aeb2, d...)
}

type UIRadioButtonStyleOptionalFieldMapDefaults struct {
	NRadioButtonValue                 DT_INT
	BRadioButtonDefault               DT_INT
	HRadioButtonImageFrame            UIImageHandleReference
	HRadioButtonImageFrameMouseOver   UIImageHandleReference
	HRadioButtonImagePressed          UIImageHandleReference
	SnoBtnTiledStyleSelectedNormal    DT_SNO
	SnoBtnTiledStyleSelectedMouseOver DT_SNO
	SnoBtnTiledStyleSelectedPressed   DT_SNO
	RgbaForegroundSelectedPushed      DT_RGBACOLOR
	RgbaDropShadowSelectedPushed      DT_RGBACOLOR
	Unk_12178f2                       DT_CSTRING[*DT_BYTE]
	HImageFrameIconSelected           UIImageHandleReference
	HImageFrameIconMouseOverSelected  UIImageHandleReference
	HImageFrameIconPressedSelected    UIImageHandleReference
	SnoOnSelectedSound                DT_SNO
}

func (t *UIRadioButtonStyleOptionalFieldMapDefaults) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.NRadioButtonValue, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.BRadioButtonDefault, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.HRadioButtonImageFrame, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.HRadioButtonImageFrameMouseOver, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.HRadioButtonImagePressed, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.SnoBtnTiledStyleSelectedNormal, r, &Options{
		Flags: 1,
		Group: 103,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SnoBtnTiledStyleSelectedMouseOver, r, &Options{
		Flags: 1,
		Group: 103,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.SnoBtnTiledStyleSelectedPressed, r, &Options{
		Flags: 1,
		Group: 103,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.RgbaForegroundSelectedPushed, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.RgbaDropShadowSelectedPushed, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.Unk_12178f2, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.HImageFrameIconSelected, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+60, &t.HImageFrameIconMouseOverSelected, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.HImageFrameIconPressedSelected, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.SnoOnSelectedSound, r, &Options{
		Flags: 1,
		Group: 40,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+72, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *UIRadioButtonStyleOptionalFieldMapDefaults) Walk(cb WalkCallback, d ...any) {
	cb.Do("NRadioButtonValue", &t.NRadioButtonValue, d...)
	cb.Do("BRadioButtonDefault", &t.BRadioButtonDefault, d...)
	cb.Do("HRadioButtonImageFrame", &t.HRadioButtonImageFrame, d...)
	cb.Do("HRadioButtonImageFrameMouseOver", &t.HRadioButtonImageFrameMouseOver, d...)
	cb.Do("HRadioButtonImagePressed", &t.HRadioButtonImagePressed, d...)
	cb.Do("SnoBtnTiledStyleSelectedNormal", &t.SnoBtnTiledStyleSelectedNormal, d...)
	cb.Do("SnoBtnTiledStyleSelectedMouseOver", &t.SnoBtnTiledStyleSelectedMouseOver, d...)
	cb.Do("SnoBtnTiledStyleSelectedPressed", &t.SnoBtnTiledStyleSelectedPressed, d...)
	cb.Do("RgbaForegroundSelectedPushed", &t.RgbaForegroundSelectedPushed, d...)
	cb.Do("RgbaDropShadowSelectedPushed", &t.RgbaDropShadowSelectedPushed, d...)
	cb.Do("Unk_12178f2", &t.Unk_12178f2, d...)
	cb.Do("HImageFrameIconSelected", &t.HImageFrameIconSelected, d...)
	cb.Do("HImageFrameIconMouseOverSelected", &t.HImageFrameIconMouseOverSelected, d...)
	cb.Do("HImageFrameIconPressedSelected", &t.HImageFrameIconPressedSelected, d...)
	cb.Do("SnoOnSelectedSound", &t.SnoOnSelectedSound, d...)
}

type ActorHitCollisionShape struct {
	Unk_20b45d7      DT_UINT
	EType            DT_ENUM
	FlRadius         DT_FLOAT
	FlLength         DT_FLOAT
	APitch           DT_FLOAT
	AYaw             DT_FLOAT
	VBoneLocalOffset DT_VECTOR3D
}

func (t *ActorHitCollisionShape) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Unk_20b45d7, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.EType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.FlRadius, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.FlLength, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.APitch, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.AYaw, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.VBoneLocalOffset, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+36, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ActorHitCollisionShape) Walk(cb WalkCallback, d ...any) {
	cb.Do("Unk_20b45d7", &t.Unk_20b45d7, d...)
	cb.Do("EType", &t.EType, d...)
	cb.Do("FlRadius", &t.FlRadius, d...)
	cb.Do("FlLength", &t.FlLength, d...)
	cb.Do("APitch", &t.APitch, d...)
	cb.Do("AYaw", &t.AYaw, d...)
	cb.Do("VBoneLocalOffset", &t.VBoneLocalOffset, d...)
}

type DRLGWorldDebugInfo struct {
	DwSeed                 DT_UINT
	DwSeedInitial          DT_UINT
	SnoPrimaryDungeonQuest DT_SNO
	ArTiles                DT_FIXEDARRAY[*DRLGTileDebugInfo]
	ArDRLGEvents           DT_FIXEDARRAY[*DRLGEventDebugInfo]
	TForcedWorldParams     DRLGForcedWorldParamsDebugInfo
}

func (t *DRLGWorldDebugInfo) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.DwSeed, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.DwSeedInitial, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.SnoPrimaryDungeonQuest, r, &Options{
		Flags: 1,
		Group: 31,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.ArTiles, r, &Options{
		ArrayLength: 128,
		Flags:       8,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+14864, &t.ArDRLGEvents, r, &Options{
		ArrayLength: 16,
		Flags:       8,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+15892, &t.TForcedWorldParams, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16432, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *DRLGWorldDebugInfo) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwSeed", &t.DwSeed, d...)
	cb.Do("DwSeedInitial", &t.DwSeedInitial, d...)
	cb.Do("SnoPrimaryDungeonQuest", &t.SnoPrimaryDungeonQuest, d...)
	cb.Do("ArTiles", &t.ArTiles, d...)
	cb.Do("ArDRLGEvents", &t.ArDRLGEvents, d...)
	cb.Do("TForcedWorldParams", &t.TForcedWorldParams, d...)
}

type TriggerEventSetAudioState struct {
	// Inherits TriggerEvent
	// Inherits PolymorphicBase
	DwType          DT_UINT
	DwPad           DT_UINT
	TConditions     TriggerConditions
	FGenerated      DT_INT
	Unk_6cba752     DT_INT
	DwParentActorID DT_UINT
	TAudioState     WwiseSwitchValue
}

func (t *TriggerEventSetAudioState) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.FGenerated, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_6cba752, r, &Options{Flags: 16}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.DwParentActorID, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.TAudioState, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+88, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TriggerEventSetAudioState) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("TConditions", &t.TConditions, d...)
	cb.Do("FGenerated", &t.FGenerated, d...)
	cb.Do("Unk_6cba752", &t.Unk_6cba752, d...)
	cb.Do("DwParentActorID", &t.DwParentActorID, d...)
	cb.Do("TAudioState", &t.TAudioState, d...)
}

type ConvLocaleDisplayTimes struct {
	FlDisplayTime DT_FIXEDARRAY[*DT_FLOAT]
}

func (t *ConvLocaleDisplayTimes) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.FlDisplayTime, r, &Options{
		ArrayLength: 10,
		Flags:       1,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+40, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ConvLocaleDisplayTimes) Walk(cb WalkCallback, d ...any) {
	cb.Do("FlDisplayTime", &t.FlDisplayTime, d...)
}

type MarkerFadeVolumeData struct {
	// Inherits MarkerDataBase
	// Inherits PolymorphicBase
	DwType           DT_UINT
	DwPad            DT_UINT
	EFadeVolumeShape DT_ENUM
	EBehavior        DT_ENUM
	Unk_d014f8b      DT_INT
	Unk_81c0263      DT_INT
	NFadeGroup       DT_INT
}

func (t *MarkerFadeVolumeData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.EFadeVolumeShape, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.EBehavior, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_d014f8b, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.Unk_81c0263, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.NFadeGroup, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+40, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *MarkerFadeVolumeData) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("EFadeVolumeShape", &t.EFadeVolumeShape, d...)
	cb.Do("EBehavior", &t.EBehavior, d...)
	cb.Do("Unk_d014f8b", &t.Unk_d014f8b, d...)
	cb.Do("Unk_81c0263", &t.Unk_81c0263, d...)
	cb.Do("NFadeGroup", &t.NFadeGroup, d...)
}

type UIStackPanelStyleOptionalFieldMapDefaults struct {
	BReverseOrder   DT_INT
	BHorizontal     DT_INT
	Unk_f89660f     DT_INT
	Unk_3385ab6     DT_INT
	Unk_3a57c53     DT_INT
	NStackSpacing   DT_INT
	ELayoutBehavior DT_ENUM
	TMargins        UIMargins
}

func (t *UIStackPanelStyleOptionalFieldMapDefaults) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.BReverseOrder, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.BHorizontal, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.Unk_f89660f, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.Unk_3385ab6, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_3a57c53, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.NStackSpacing, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ELayoutBehavior, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.TMargins, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+44, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *UIStackPanelStyleOptionalFieldMapDefaults) Walk(cb WalkCallback, d ...any) {
	cb.Do("BReverseOrder", &t.BReverseOrder, d...)
	cb.Do("BHorizontal", &t.BHorizontal, d...)
	cb.Do("Unk_f89660f", &t.Unk_f89660f, d...)
	cb.Do("Unk_3385ab6", &t.Unk_3385ab6, d...)
	cb.Do("Unk_3a57c53", &t.Unk_3a57c53, d...)
	cb.Do("NStackSpacing", &t.NStackSpacing, d...)
	cb.Do("ELayoutBehavior", &t.ELayoutBehavior, d...)
	cb.Do("TMargins", &t.TMargins, d...)
}

type dmHeightDataMirror struct {
	CountX    DT_INT
	CountY    DT_INT
	CellWidth DT_FLOAT
	ASamples  DT_INT64
	Center    DT_FLOAT
	Scale     DT_FLOAT
}

func (t *dmHeightDataMirror) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.CountX, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.CountY, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.CellWidth, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.ASamples, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Center, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.Scale, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *dmHeightDataMirror) Walk(cb WalkCallback, d ...any) {
	cb.Do("CountX", &t.CountX, d...)
	cb.Do("CountY", &t.CountY, d...)
	cb.Do("CellWidth", &t.CellWidth, d...)
	cb.Do("ASamples", &t.ASamples, d...)
	cb.Do("Center", &t.Center, d...)
	cb.Do("Scale", &t.Scale, d...)
}

type AIPropType_Table struct {
	// Inherits GameBalanceTable
	// Inherits PolymorphicBase
	DwType   DT_UINT
	DwPad    DT_UINT
	TEntries DT_VARIABLEARRAY[*AIPropType]
}

func (t *AIPropType_Table) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TEntries, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *AIPropType_Table) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("TEntries", &t.TEntries, d...)
}

type HeroStateRewardsMessage struct {
	THeader               RequiredMessageHeader
	DwPlayerGameAccountId DT_UINT
	ArZoneProgressData    DT_FIXEDARRAY[*Type_f0f63f3d]
}

func (t *HeroStateRewardsMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.DwPlayerGameAccountId, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.ArZoneProgressData, r, &Options{
		ArrayLength: 5,
		Flags:       8,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+44, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *HeroStateRewardsMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("DwPlayerGameAccountId", &t.DwPlayerGameAccountId, d...)
	cb.Do("ArZoneProgressData", &t.ArZoneProgressData, d...)
}

type TriggerEventObjectTurnToFace struct {
	// Inherits TriggerEvent
	// Inherits PolymorphicBase
	DwType          DT_UINT
	DwPad           DT_UINT
	TConditions     TriggerConditions
	FGenerated      DT_INT
	Unk_6cba752     DT_INT
	DwParentActorID DT_UINT
	DwObjectID      DT_UINT
	DwTargetID      DT_UINT
	AThreshold      DT_FLOAT
	Unk_d74c75c     DT_FLOAT
	Unk_77ca12a     DT_INT
	Unk_23237e1     DT_INT
	Unk_f1b6afc     DT_FLOAT
}

func (t *TriggerEventObjectTurnToFace) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.FGenerated, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_6cba752, r, &Options{Flags: 16}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.DwParentActorID, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.DwObjectID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.DwTargetID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.AThreshold, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.Unk_d74c75c, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.Unk_77ca12a, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+100, &t.Unk_23237e1, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+104, &t.Unk_f1b6afc, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+112, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TriggerEventObjectTurnToFace) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("TConditions", &t.TConditions, d...)
	cb.Do("FGenerated", &t.FGenerated, d...)
	cb.Do("Unk_6cba752", &t.Unk_6cba752, d...)
	cb.Do("DwParentActorID", &t.DwParentActorID, d...)
	cb.Do("DwObjectID", &t.DwObjectID, d...)
	cb.Do("DwTargetID", &t.DwTargetID, d...)
	cb.Do("AThreshold", &t.AThreshold, d...)
	cb.Do("Unk_d74c75c", &t.Unk_d74c75c, d...)
	cb.Do("Unk_77ca12a", &t.Unk_77ca12a, d...)
	cb.Do("Unk_23237e1", &t.Unk_23237e1, d...)
	cb.Do("Unk_f1b6afc", &t.Unk_f1b6afc, d...)
}

type QuestTimerUpdatedMessage struct {
	THeader     RequiredMessageHeader
	IdQuest     DT_ENUM
	NTimeChange DT_INT
}

func (t *QuestTimerUpdatedMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.IdQuest, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.NTimeChange, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *QuestTimerUpdatedMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("IdQuest", &t.IdQuest, d...)
	cb.Do("NTimeChange", &t.NTimeChange, d...)
}

type UIRadioButtonStyle struct {
	// Inherits UIButtonStyle
	// Inherits UITextStyle
	// Inherits UIWindowStyle
	// Inherits UIControlStyle
	// Inherits PolymorphicBase
	DwType                      DT_UINT
	DwPad                       DT_UINT
	HParentStyle                UIControlHandle
	Unk_441f783                 DT_INT64
	M_eHasModifiedPowerTagMap   DT_TAGMAP[*DT_ENUM]
	TConsoleInput               UIControlConsoleInput
	Unk_b4f614c                 DT_TAGMAP[*DT_ENUM]
	TFont                       UIControlFont
	PtUIControlTagMapIconLabels DT_TAGMAP[*DT_ENUM]
	TIcon                       UIControlIcon
	TClickSounds                UIControlClickSounds
	Unk_10f81f0                 DT_TAGMAP[*DT_ENUM]
	Unk_d3a1ebf                 DT_TAGMAP[*DT_ENUM]
}

func (t *UIRadioButtonStyle) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.HParentStyle, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_441f783, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.M_eHasModifiedPowerTagMap, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.TConsoleInput, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.Unk_b4f614c, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.TFont, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.PtUIControlTagMapIconLabels, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.TIcon, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.TClickSounds, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+144, &t.Unk_10f81f0, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+160, &t.Unk_d3a1ebf, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+176, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *UIRadioButtonStyle) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("HParentStyle", &t.HParentStyle, d...)
	cb.Do("Unk_441f783", &t.Unk_441f783, d...)
	cb.Do("M_eHasModifiedPowerTagMap", &t.M_eHasModifiedPowerTagMap, d...)
	cb.Do("TConsoleInput", &t.TConsoleInput, d...)
	cb.Do("Unk_b4f614c", &t.Unk_b4f614c, d...)
	cb.Do("TFont", &t.TFont, d...)
	cb.Do("PtUIControlTagMapIconLabels", &t.PtUIControlTagMapIconLabels, d...)
	cb.Do("TIcon", &t.TIcon, d...)
	cb.Do("TClickSounds", &t.TClickSounds, d...)
	cb.Do("Unk_10f81f0", &t.Unk_10f81f0, d...)
	cb.Do("Unk_d3a1ebf", &t.Unk_d3a1ebf, d...)
}

type ClassPassiveSkillSaveData struct {
	SnoSkill DT_SNO
}

func (t *ClassPassiveSkillSaveData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoSkill, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+4, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ClassPassiveSkillSaveData) Walk(cb WalkCallback, d ...any) {
	cb.Do("SnoSkill", &t.SnoSkill, d...)
}

type UpgradedItemLabelSubcondition struct {
	// Inherits Subcondition
	// Inherits PolymorphicBase
	DwType     DT_UINT
	BNegate    DT_INT
	DwPad      DT_UINT
	EItemLabel DT_ENUM
}

func (t *UpgradedItemLabelSubcondition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BNegate, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.EItemLabel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *UpgradedItemLabelSubcondition) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("BNegate", &t.BNegate, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("EItemLabel", &t.EItemLabel, d...)
}

type LuxSettings struct {
	FlLuxMin DT_FLOAT
	FlLuxMax DT_FLOAT
}

func (t *LuxSettings) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.FlLuxMin, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.FlLuxMax, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *LuxSettings) Walk(cb WalkCallback, d ...any) {
	cb.Do("FlLuxMin", &t.FlLuxMin, d...)
	cb.Do("FlLuxMax", &t.FlLuxMax, d...)
}

type GlobalServiceNPCData struct {
	// Inherits GlobalBase
	// Inherits PolymorphicBase
	DwType                  DT_UINT
	DwPad                   DT_UINT
	ArVendors               DT_FIXEDARRAY[*GlobalVendorEvents]
	ArCrafters              DT_FIXEDARRAY[*GlobalCrafterEvents]
	Unk_13e0ecf             DT_FLOAT
	THealerEvents           GlobalHealerEvents
	SnoHealerVendorNPCPower DT_SNO
	Unk_6ac8078             DT_FLOAT
	Unk_2a2b3f7             DT_FLOAT
}

func (t *GlobalServiceNPCData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.ArVendors, r, &Options{
		ArrayLength: 13,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+276, &t.ArCrafters, r, &Options{
		ArrayLength: 6,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+444, &t.Unk_13e0ecf, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+448, &t.THealerEvents, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+452, &t.SnoHealerVendorNPCPower, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+456, &t.Unk_6ac8078, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+460, &t.Unk_2a2b3f7, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+464, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *GlobalServiceNPCData) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("ArVendors", &t.ArVendors, d...)
	cb.Do("ArCrafters", &t.ArCrafters, d...)
	cb.Do("Unk_13e0ecf", &t.Unk_13e0ecf, d...)
	cb.Do("THealerEvents", &t.THealerEvents, d...)
	cb.Do("SnoHealerVendorNPCPower", &t.SnoHealerVendorNPCPower, d...)
	cb.Do("Unk_6ac8078", &t.Unk_6ac8078, d...)
	cb.Do("Unk_2a2b3f7", &t.Unk_2a2b3f7, d...)
}

type ParagonGlyphAffixDefinition struct {
	Unk_3bfd2fb            DT_VARIABLEARRAY[*ParagonGlyphAffixAttribute]
	EAffectedNodeRarity    DT_ENUM
	Unk_e53c570            DT_ENUM
	ArThresholdSelector    DT_VARIABLEARRAY[*DT_SNO]
	EBonusOperation        DT_ENUM
	Unk_e80c332            DT_VARIABLEARRAY[*ParagonGlyphAffixAttributeMap]
	GbidPowerBudgetFormula DT_GBID
	FlStartingBonusScalar  DT_FLOAT
	Unk_1135a20            DT_FLOAT
	Unk_12a5abd            DT_FLOAT
	SnoBonusPassivePower   DT_SNO
	ArBonusAttributes      DT_VARIABLEARRAY[*ParagonGlyphAffixAttribute]
	ArAffixSkillTags       DT_VARIABLEARRAY[*DT_GBID]
}

func (t *ParagonGlyphAffixDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.Unk_3bfd2fb, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.EAffectedNodeRarity, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.Unk_e53c570, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.ArThresholdSelector, r, &Options{
		Flags: 1,
		Group: 124,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.EBonusOperation, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.Unk_e80c332, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.GbidPowerBudgetFormula, r, &Options{
		Flags: 1,
		Group: 22,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.FlStartingBonusScalar, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.Unk_1135a20, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.Unk_12a5abd, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.SnoBonusPassivePower, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.ArBonusAttributes, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.ArAffixSkillTags, r, &Options{
		Flags: 1,
		Group: 56,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+128, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ParagonGlyphAffixDefinition) Walk(cb WalkCallback, d ...any) {
	cb.Do("Unk_3bfd2fb", &t.Unk_3bfd2fb, d...)
	cb.Do("EAffectedNodeRarity", &t.EAffectedNodeRarity, d...)
	cb.Do("Unk_e53c570", &t.Unk_e53c570, d...)
	cb.Do("ArThresholdSelector", &t.ArThresholdSelector, d...)
	cb.Do("EBonusOperation", &t.EBonusOperation, d...)
	cb.Do("Unk_e80c332", &t.Unk_e80c332, d...)
	cb.Do("GbidPowerBudgetFormula", &t.GbidPowerBudgetFormula, d...)
	cb.Do("FlStartingBonusScalar", &t.FlStartingBonusScalar, d...)
	cb.Do("Unk_1135a20", &t.Unk_1135a20, d...)
	cb.Do("Unk_12a5abd", &t.Unk_12a5abd, d...)
	cb.Do("SnoBonusPassivePower", &t.SnoBonusPassivePower, d...)
	cb.Do("ArBonusAttributes", &t.ArBonusAttributes, d...)
	cb.Do("ArAffixSkillTags", &t.ArAffixSkillTags, d...)
}

type PVPShrineEventUpdateMessage struct {
	THeader      RequiredMessageHeader
	WpLocation   DT_VECTOR3D
	DwEnd        DT_UINT
	SnoLevelArea DT_SNO
}

func (t *PVPShrineEventUpdateMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.WpLocation, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.DwEnd, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.SnoLevelArea, r, &Options{
		Flags: 1,
		Group: 22,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+36, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PVPShrineEventUpdateMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("WpLocation", &t.WpLocation, d...)
	cb.Do("DwEnd", &t.DwEnd, d...)
	cb.Do("SnoLevelArea", &t.SnoLevelArea, d...)
}

type StoryboardUIControlActivationTrack struct {
	// Inherits StoryboardUIControlTrack
	// Inherits StoryboardTrack
	// Inherits PolymorphicBase
	DwType          DT_UINT
	DwPad           DT_UINT
	TNodeCollection StoryboardActivationNodeCollection
}

func (t *StoryboardUIControlActivationTrack) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TNodeCollection, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *StoryboardUIControlActivationTrack) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("TNodeCollection", &t.TNodeCollection, d...)
}

type MarkerItemData struct {
	// Inherits MarkerDataBase
	// Inherits PolymorphicBase
	DwType          DT_UINT
	DwPad           DT_UINT
	ECurrencyType   DT_ENUM
	NCurrencyAmount DT_INT
}

func (t *MarkerItemData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.ECurrencyType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.NCurrencyAmount, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *MarkerItemData) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("ECurrencyType", &t.ECurrencyType, d...)
	cb.Do("NCurrencyAmount", &t.NCurrencyAmount, d...)
}

type UIMenuItemStyle struct {
	// Inherits UIButtonStyle
	// Inherits UITextStyle
	// Inherits UIWindowStyle
	// Inherits UIControlStyle
	// Inherits PolymorphicBase
	DwType                      DT_UINT
	DwPad                       DT_UINT
	HParentStyle                UIControlHandle
	Unk_441f783                 DT_INT64
	M_eHasModifiedPowerTagMap   DT_TAGMAP[*DT_ENUM]
	TConsoleInput               UIControlConsoleInput
	Unk_b4f614c                 DT_TAGMAP[*DT_ENUM]
	TFont                       UIControlFont
	PtUIControlTagMapIconLabels DT_TAGMAP[*DT_ENUM]
	TIcon                       UIControlIcon
	TClickSounds                UIControlClickSounds
	Unk_10f81f0                 DT_TAGMAP[*DT_ENUM]
}

func (t *UIMenuItemStyle) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.HParentStyle, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_441f783, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.M_eHasModifiedPowerTagMap, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.TConsoleInput, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.Unk_b4f614c, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.TFont, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.PtUIControlTagMapIconLabels, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.TIcon, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.TClickSounds, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+144, &t.Unk_10f81f0, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+160, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *UIMenuItemStyle) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("HParentStyle", &t.HParentStyle, d...)
	cb.Do("Unk_441f783", &t.Unk_441f783, d...)
	cb.Do("M_eHasModifiedPowerTagMap", &t.M_eHasModifiedPowerTagMap, d...)
	cb.Do("TConsoleInput", &t.TConsoleInput, d...)
	cb.Do("Unk_b4f614c", &t.Unk_b4f614c, d...)
	cb.Do("TFont", &t.TFont, d...)
	cb.Do("PtUIControlTagMapIconLabels", &t.PtUIControlTagMapIconLabels, d...)
	cb.Do("TIcon", &t.TIcon, d...)
	cb.Do("TClickSounds", &t.TClickSounds, d...)
	cb.Do("Unk_10f81f0", &t.Unk_10f81f0, d...)
}

type SpawnerGizmoData struct {
	// Inherits NamedGizmoData
	// Inherits ActorGizmoData
	// Inherits PolymorphicBase
	DwType                              DT_UINT
	DwPad                               DT_UINT
	FDisableNonFriendlyOperation        DT_INT
	FWalkToCenter                       DT_INT
	FGizmoStartsDisabled                DT_INT
	FUseStringListName                  DT_INT
	FForceMinimapIcon                   DT_INT
	FlOperationRadius                   DT_FLOAT
	Unk_d0b1df5                         DT_FLOAT
	FlGizmoUseTime                      DT_FLOAT
	SnoChannelingEffect                 DT_SNO
	Unk_2767229                         DT_INT
	FGizmoShowProgressBar               DT_INT
	Unk_6d9ebe1                         DT_INT
	Unk_5456245                         DT_INT
	Unk_af5815a                         DT_INT
	SnoOnClickEffect                    DT_SNO
	SnoPickedUpEffect                   DT_SNO
	SnoDropOnGroundEffect               DT_SNO
	TConditionData                      GizmoConditionData
	SnoPowerOperator                    DT_SNO
	SnoPowerOperate                     DT_SNO
	SnoPowerOperatorActive              DT_SNO
	SnoPowerOperateActive               DT_SNO
	Unk_359810e                         DT_INT
	NCooldown                           DT_UINT
	Unk_9c8478e                         DT_UINT
	Unk_d45ed2d                         DT_INT
	Unk_f6b20b7                         DT_INT
	Unk_54513b8                         DT_INT
	Unk_fd1f378                         DT_UINT
	HGizmoOperateFlavorTextMsgLabel     DT_UINT
	HGizmoOperateDescriptionMsgLabel    DT_UINT
	FlGizmoOperateOffset                DT_FLOAT
	Unk_ab58cd3                         DT_ENUM
	Unk_91a3966                         DT_UINT
	HGizmoChannelingLabel               DT_UINT
	Unk_4be4371                         DT_INT
	FSpawnedMonstersInheritTargetList   DT_INT
	FSpawnedMonstersStartInSpecialState DT_INT
	FSpawnedMonstersGiveLoot            DT_INT
	FSpawnedMonstersGiveXP              DT_INT
	FSpawnItemRotateInGroup             DT_INT
	Unk_545c5ca                         DT_INT
	ESpawnType                          DT_ENUM
	SnoSpawnActor                       DT_SNO
	SnoSpawnEncounter                   DT_SNO
	SnoPopulation                       DT_SNO
	SnoSpawnEffect                      DT_SNO
	SnoSummonedEffect                   DT_SNO
	SnoSpawnEffectGroupActorToActor     DT_SNO
	SnoSpawnPowerAnimKey                DT_SNO
	SnoSpawnItem                        DT_SNO
	NSpawnAdditionalAffixCount          DT_INT
	FSpawnLockRandomAffixesOnCreate     DT_INT
	SnoSpawnFixedAffix                  DT_FIXEDARRAY[*DT_SNO]
	TInstanceData                       SpawnerGizmoInstanceData
}

func (t *SpawnerGizmoData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.FDisableNonFriendlyOperation, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.FWalkToCenter, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.FGizmoStartsDisabled, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.FUseStringListName, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.FForceMinimapIcon, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.FlOperationRadius, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.Unk_d0b1df5, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.FlGizmoUseTime, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.SnoChannelingEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.Unk_2767229, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.FGizmoShowProgressBar, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+60, &t.Unk_6d9ebe1, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.Unk_5456245, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.Unk_af5815a, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.SnoOnClickEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.SnoPickedUpEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.SnoDropOnGroundEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.TConditionData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.SnoPowerOperator, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.SnoPowerOperate, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.SnoPowerOperatorActive, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+100, &t.SnoPowerOperateActive, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+104, &t.Unk_359810e, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+108, &t.NCooldown, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.Unk_9c8478e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+116, &t.Unk_d45ed2d, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.Unk_f6b20b7, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+124, &t.Unk_54513b8, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.Unk_fd1f378, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+132, &t.HGizmoOperateFlavorTextMsgLabel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+136, &t.HGizmoOperateDescriptionMsgLabel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+140, &t.FlGizmoOperateOffset, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+144, &t.Unk_ab58cd3, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+148, &t.Unk_91a3966, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+152, &t.HGizmoChannelingLabel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+156, &t.Unk_4be4371, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+160, &t.FSpawnedMonstersInheritTargetList, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+164, &t.FSpawnedMonstersStartInSpecialState, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+168, &t.FSpawnedMonstersGiveLoot, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+172, &t.FSpawnedMonstersGiveXP, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+176, &t.FSpawnItemRotateInGroup, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+180, &t.Unk_545c5ca, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+184, &t.ESpawnType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+188, &t.SnoSpawnActor, r, &Options{
		Flags: 1,
		Group: 1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+192, &t.SnoSpawnEncounter, r, &Options{
		Flags: 1,
		Group: 15,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+196, &t.SnoPopulation, r, &Options{
		Flags: 1,
		Group: 84,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+200, &t.SnoSpawnEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+204, &t.SnoSummonedEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+208, &t.SnoSpawnEffectGroupActorToActor, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+212, &t.SnoSpawnPowerAnimKey, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+216, &t.SnoSpawnItem, r, &Options{
		Flags: 1,
		Group: 73,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+220, &t.NSpawnAdditionalAffixCount, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+224, &t.FSpawnLockRandomAffixesOnCreate, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+228, &t.SnoSpawnFixedAffix, r, &Options{
		ArrayLength: 4,
		Flags:       1,
		Group:       107,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+248, &t.TInstanceData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+472, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *SpawnerGizmoData) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("FDisableNonFriendlyOperation", &t.FDisableNonFriendlyOperation, d...)
	cb.Do("FWalkToCenter", &t.FWalkToCenter, d...)
	cb.Do("FGizmoStartsDisabled", &t.FGizmoStartsDisabled, d...)
	cb.Do("FUseStringListName", &t.FUseStringListName, d...)
	cb.Do("FForceMinimapIcon", &t.FForceMinimapIcon, d...)
	cb.Do("FlOperationRadius", &t.FlOperationRadius, d...)
	cb.Do("Unk_d0b1df5", &t.Unk_d0b1df5, d...)
	cb.Do("FlGizmoUseTime", &t.FlGizmoUseTime, d...)
	cb.Do("SnoChannelingEffect", &t.SnoChannelingEffect, d...)
	cb.Do("Unk_2767229", &t.Unk_2767229, d...)
	cb.Do("FGizmoShowProgressBar", &t.FGizmoShowProgressBar, d...)
	cb.Do("Unk_6d9ebe1", &t.Unk_6d9ebe1, d...)
	cb.Do("Unk_5456245", &t.Unk_5456245, d...)
	cb.Do("Unk_af5815a", &t.Unk_af5815a, d...)
	cb.Do("SnoOnClickEffect", &t.SnoOnClickEffect, d...)
	cb.Do("SnoPickedUpEffect", &t.SnoPickedUpEffect, d...)
	cb.Do("SnoDropOnGroundEffect", &t.SnoDropOnGroundEffect, d...)
	cb.Do("TConditionData", &t.TConditionData, d...)
	cb.Do("SnoPowerOperator", &t.SnoPowerOperator, d...)
	cb.Do("SnoPowerOperate", &t.SnoPowerOperate, d...)
	cb.Do("SnoPowerOperatorActive", &t.SnoPowerOperatorActive, d...)
	cb.Do("SnoPowerOperateActive", &t.SnoPowerOperateActive, d...)
	cb.Do("Unk_359810e", &t.Unk_359810e, d...)
	cb.Do("NCooldown", &t.NCooldown, d...)
	cb.Do("Unk_9c8478e", &t.Unk_9c8478e, d...)
	cb.Do("Unk_d45ed2d", &t.Unk_d45ed2d, d...)
	cb.Do("Unk_f6b20b7", &t.Unk_f6b20b7, d...)
	cb.Do("Unk_54513b8", &t.Unk_54513b8, d...)
	cb.Do("Unk_fd1f378", &t.Unk_fd1f378, d...)
	cb.Do("HGizmoOperateFlavorTextMsgLabel", &t.HGizmoOperateFlavorTextMsgLabel, d...)
	cb.Do("HGizmoOperateDescriptionMsgLabel", &t.HGizmoOperateDescriptionMsgLabel, d...)
	cb.Do("FlGizmoOperateOffset", &t.FlGizmoOperateOffset, d...)
	cb.Do("Unk_ab58cd3", &t.Unk_ab58cd3, d...)
	cb.Do("Unk_91a3966", &t.Unk_91a3966, d...)
	cb.Do("HGizmoChannelingLabel", &t.HGizmoChannelingLabel, d...)
	cb.Do("Unk_4be4371", &t.Unk_4be4371, d...)
	cb.Do("FSpawnedMonstersInheritTargetList", &t.FSpawnedMonstersInheritTargetList, d...)
	cb.Do("FSpawnedMonstersStartInSpecialState", &t.FSpawnedMonstersStartInSpecialState, d...)
	cb.Do("FSpawnedMonstersGiveLoot", &t.FSpawnedMonstersGiveLoot, d...)
	cb.Do("FSpawnedMonstersGiveXP", &t.FSpawnedMonstersGiveXP, d...)
	cb.Do("FSpawnItemRotateInGroup", &t.FSpawnItemRotateInGroup, d...)
	cb.Do("Unk_545c5ca", &t.Unk_545c5ca, d...)
	cb.Do("ESpawnType", &t.ESpawnType, d...)
	cb.Do("SnoSpawnActor", &t.SnoSpawnActor, d...)
	cb.Do("SnoSpawnEncounter", &t.SnoSpawnEncounter, d...)
	cb.Do("SnoPopulation", &t.SnoPopulation, d...)
	cb.Do("SnoSpawnEffect", &t.SnoSpawnEffect, d...)
	cb.Do("SnoSummonedEffect", &t.SnoSummonedEffect, d...)
	cb.Do("SnoSpawnEffectGroupActorToActor", &t.SnoSpawnEffectGroupActorToActor, d...)
	cb.Do("SnoSpawnPowerAnimKey", &t.SnoSpawnPowerAnimKey, d...)
	cb.Do("SnoSpawnItem", &t.SnoSpawnItem, d...)
	cb.Do("NSpawnAdditionalAffixCount", &t.NSpawnAdditionalAffixCount, d...)
	cb.Do("FSpawnLockRandomAffixesOnCreate", &t.FSpawnLockRandomAffixesOnCreate, d...)
	cb.Do("SnoSpawnFixedAffix", &t.SnoSpawnFixedAffix, d...)
	cb.Do("TInstanceData", &t.TInstanceData, d...)
}

type ActorVelocityPerSecondSubcondition struct {
	// Inherits NumericComparisonSubcondition
	// Inherits Subcondition
	// Inherits PolymorphicBase
	DwType           DT_UINT
	BNegate          DT_INT
	EComparisonOp    DT_ENUM
	DwPad            DT_UINT
	FlValue          DT_FLOAT
	BUse2D           DT_INT
	EActorToEvaluate DT_ENUM
}

func (t *ActorVelocityPerSecondSubcondition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BNegate, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.EComparisonOp, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.FlValue, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.BUse2D, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.EActorToEvaluate, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ActorVelocityPerSecondSubcondition) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("BNegate", &t.BNegate, d...)
	cb.Do("EComparisonOp", &t.EComparisonOp, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("FlValue", &t.FlValue, d...)
	cb.Do("BUse2D", &t.BUse2D, d...)
	cb.Do("EActorToEvaluate", &t.EActorToEvaluate, d...)
}

type PrefabScopedActorGroupData_Table struct {
	// Inherits GameBalanceTable
	// Inherits PolymorphicBase
	DwType   DT_UINT
	DwPad    DT_UINT
	TEntries DT_VARIABLEARRAY[*PrefabScopedActorGroupData]
}

func (t *PrefabScopedActorGroupData_Table) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TEntries, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PrefabScopedActorGroupData_Table) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("TEntries", &t.TEntries, d...)
}

type MakeupDefinition struct {
	FUsableByClass DT_FIXEDARRAY[*DT_INT]
	SnoMakeup      DT_SNO
	FlIntensity    DT_FLOAT
	FlRoughness    DT_FLOAT
	FlMetalness    DT_FLOAT
	HIconImage     DT_UINT
}

func (t *MakeupDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.FUsableByClass, r, &Options{
		ArrayLength: 5,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.SnoMakeup, r, &Options{
		Flags: 1,
		Group: 44,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.FlIntensity, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.FlRoughness, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.FlMetalness, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.HIconImage, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *MakeupDefinition) Walk(cb WalkCallback, d ...any) {
	cb.Do("FUsableByClass", &t.FUsableByClass, d...)
	cb.Do("SnoMakeup", &t.SnoMakeup, d...)
	cb.Do("FlIntensity", &t.FlIntensity, d...)
	cb.Do("FlRoughness", &t.FlRoughness, d...)
	cb.Do("FlMetalness", &t.FlMetalness, d...)
	cb.Do("HIconImage", &t.HIconImage, d...)
}

type GameVariableStringSubcondition struct {
	// Inherits Subcondition
	// Inherits PolymorphicBase
	DwType               DT_UINT
	BNegate              DT_INT
	DwPad                DT_UINT
	GbidDesignerVariable DT_GBID
	SzValue              DT_UINT
}

func (t *GameVariableStringSubcondition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BNegate, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.GbidDesignerVariable, r, &Options{
		Flags: 1,
		Group: 45,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.SzValue, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *GameVariableStringSubcondition) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("BNegate", &t.BNegate, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("GbidDesignerVariable", &t.GbidDesignerVariable, d...)
	cb.Do("SzValue", &t.SzValue, d...)
}

type WwiseSoundBankContentBase struct {
	// Inherits PolymorphicBase
	DwType DT_UINT
	DwPad  DT_UINT
}

func (t *WwiseSoundBankContentBase) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *WwiseSoundBankContentBase) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
}

type PlatformAccount struct {
	M_id       DT_INT64
	M_platform DT_ENUM
}

func (t *PlatformAccount) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.M_id, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.M_platform, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PlatformAccount) Walk(cb WalkCallback, d ...any) {
	cb.Do("M_id", &t.M_id, d...)
	cb.Do("M_platform", &t.M_platform, d...)
}

type NPCLegFoleyMaterialOverride struct {
	TComponentId       DT_UINT
	TComponentFoleyTag FoleyMaterialTag
}

func (t *NPCLegFoleyMaterialOverride) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.TComponentId, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.TComponentFoleyTag, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *NPCLegFoleyMaterialOverride) Walk(cb WalkCallback, d ...any) {
	cb.Do("TComponentId", &t.TComponentId, d...)
	cb.Do("TComponentFoleyTag", &t.TComponentFoleyTag, d...)
}

type ScriptEventParamGizmoType struct {
	// Inherits ScriptEventParamBase
	// Inherits PolymorphicBase
	DwType     DT_UINT
	EParamType DT_ENUM
	DwPad      DT_UINT
	EType      DT_ENUM
}

func (t *ScriptEventParamGizmoType) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.EParamType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.EType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ScriptEventParamGizmoType) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("EParamType", &t.EParamType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("EType", &t.EType, d...)
}

type PlayerClassCoreStatBenefitData struct {
	Unk_8754bdb DT_VARIABLEARRAY[*PlayerClassCoreStatBenefitEntry]
}

func (t *PlayerClassCoreStatBenefitData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Unk_8754bdb, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PlayerClassCoreStatBenefitData) Walk(cb WalkCallback, d ...any) {
	cb.Do("Unk_8754bdb", &t.Unk_8754bdb, d...)
}

type ActorProjectileData struct {
	FDestroyOnImpact              DT_INT
	Unk_fc86022                   DT_FLOAT
	FProjectileMatchYawToVelocity DT_INT
	Unk_a6a9aae                   DT_INT
	Unk_1db2e79                   DT_INT
	FProjectileCanBeReflected     DT_INT
	FProjectileCanBeSlowed        DT_INT
	Unk_bac5791                   DT_INT
	Unk_7c4ac65                   DT_INT
	THardpointLink                HardpointLink
	TAttachHardpointLink          HardpointLink
	FlGravityMultiplier           DT_FLOAT
	FHugsGround                   DT_INT
	FIgnoreSceneCollision         DT_INT
	BIgnoreActorCollision         DT_INT
	Unk_4673605                   DT_FLOAT
	Unk_cdf7878                   DT_FLOAT
	Unk_3168e93                   DT_INT
	Unk_1458258                   DT_INT
	ESeekingBehavior              DT_ENUM
	Unk_30866cd                   DT_INT
	Unk_57ae150                   DT_UINT
	Unk_c220883                   DT_FLOAT
	Unk_721bb83                   DT_FLOAT
	Unk_869456c                   DT_FLOAT
	Unk_bd02cf7                   DT_FLOAT
	SnoOnBounceEffectGroup        DT_SNO
	Unk_8815a78                   DT_INT
	Unk_57168be                   DT_INT
	Unk_9348542                   DT_INT
	DwCollidableFlags             DT_UINT
	Unk_6250c06                   DT_INT
}

func (t *ActorProjectileData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.FDestroyOnImpact, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.Unk_fc86022, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.FProjectileMatchYawToVelocity, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.Unk_a6a9aae, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_1db2e79, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.FProjectileCanBeReflected, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.FProjectileCanBeSlowed, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.Unk_bac5791, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.Unk_7c4ac65, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.THardpointLink, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.TAttachHardpointLink, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.FlGravityMultiplier, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.FHugsGround, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+60, &t.FIgnoreSceneCollision, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.BIgnoreActorCollision, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.Unk_4673605, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_cdf7878, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.Unk_3168e93, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.Unk_1458258, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.ESeekingBehavior, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.Unk_30866cd, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.Unk_57ae150, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.Unk_c220883, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+100, &t.Unk_721bb83, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+104, &t.Unk_869456c, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+108, &t.Unk_bd02cf7, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.SnoOnBounceEffectGroup, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+116, &t.Unk_8815a78, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.Unk_57168be, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+124, &t.Unk_9348542, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.DwCollidableFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+132, &t.Unk_6250c06, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+136, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ActorProjectileData) Walk(cb WalkCallback, d ...any) {
	cb.Do("FDestroyOnImpact", &t.FDestroyOnImpact, d...)
	cb.Do("Unk_fc86022", &t.Unk_fc86022, d...)
	cb.Do("FProjectileMatchYawToVelocity", &t.FProjectileMatchYawToVelocity, d...)
	cb.Do("Unk_a6a9aae", &t.Unk_a6a9aae, d...)
	cb.Do("Unk_1db2e79", &t.Unk_1db2e79, d...)
	cb.Do("FProjectileCanBeReflected", &t.FProjectileCanBeReflected, d...)
	cb.Do("FProjectileCanBeSlowed", &t.FProjectileCanBeSlowed, d...)
	cb.Do("Unk_bac5791", &t.Unk_bac5791, d...)
	cb.Do("Unk_7c4ac65", &t.Unk_7c4ac65, d...)
	cb.Do("THardpointLink", &t.THardpointLink, d...)
	cb.Do("TAttachHardpointLink", &t.TAttachHardpointLink, d...)
	cb.Do("FlGravityMultiplier", &t.FlGravityMultiplier, d...)
	cb.Do("FHugsGround", &t.FHugsGround, d...)
	cb.Do("FIgnoreSceneCollision", &t.FIgnoreSceneCollision, d...)
	cb.Do("BIgnoreActorCollision", &t.BIgnoreActorCollision, d...)
	cb.Do("Unk_4673605", &t.Unk_4673605, d...)
	cb.Do("Unk_cdf7878", &t.Unk_cdf7878, d...)
	cb.Do("Unk_3168e93", &t.Unk_3168e93, d...)
	cb.Do("Unk_1458258", &t.Unk_1458258, d...)
	cb.Do("ESeekingBehavior", &t.ESeekingBehavior, d...)
	cb.Do("Unk_30866cd", &t.Unk_30866cd, d...)
	cb.Do("Unk_57ae150", &t.Unk_57ae150, d...)
	cb.Do("Unk_c220883", &t.Unk_c220883, d...)
	cb.Do("Unk_721bb83", &t.Unk_721bb83, d...)
	cb.Do("Unk_869456c", &t.Unk_869456c, d...)
	cb.Do("Unk_bd02cf7", &t.Unk_bd02cf7, d...)
	cb.Do("SnoOnBounceEffectGroup", &t.SnoOnBounceEffectGroup, d...)
	cb.Do("Unk_8815a78", &t.Unk_8815a78, d...)
	cb.Do("Unk_57168be", &t.Unk_57168be, d...)
	cb.Do("Unk_9348542", &t.Unk_9348542, d...)
	cb.Do("DwCollidableFlags", &t.DwCollidableFlags, d...)
	cb.Do("Unk_6250c06", &t.Unk_6250c06, d...)
}

type MonsterAffixDefinition struct {
	BShown          DT_INT
	SnoOnDeathPower DT_SNO
	SnoSpawnPower   DT_SNO
	HIcon           DT_UINT
}

func (t *MonsterAffixDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.BShown, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.SnoOnDeathPower, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoSpawnPower, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.HIcon, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *MonsterAffixDefinition) Walk(cb WalkCallback, d ...any) {
	cb.Do("BShown", &t.BShown, d...)
	cb.Do("SnoOnDeathPower", &t.SnoOnDeathPower, d...)
	cb.Do("SnoSpawnPower", &t.SnoSpawnPower, d...)
	cb.Do("HIcon", &t.HIcon, d...)
}

type TriggerEventChangeShaderMapOverrideDuration struct {
	// Inherits TriggerEventRangedDuration
	// Inherits TriggerEvent
	// Inherits PolymorphicBase
	DwType              DT_UINT
	TConditions         TriggerConditions
	FGenerated          DT_INT
	Unk_6cba752         DT_INT
	DwParentActorID     DT_UINT
	TDuration           DT_FLOAT
	DwTriggerFlags      DT_UINT
	DwTriggerFlagsEx    DT_UINT
	TCleanup            TriggerCleanup
	Unk_49e9257         DT_INT
	Unk_5490979         DT_INT
	DwPad               DT_UINT
	DwActorID           DT_UINT
	DwShaderMapOverride DT_UINT
	Unk_279aa5a         DT_INT
}

func (t *TriggerEventChangeShaderMapOverrideDuration) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.FGenerated, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_6cba752, r, &Options{Flags: 16}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.DwParentActorID, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.TDuration, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.DwTriggerFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.DwTriggerFlagsEx, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.TCleanup, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+116, &t.Unk_49e9257, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.Unk_5490979, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+124, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.DwActorID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+132, &t.DwShaderMapOverride, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+136, &t.Unk_279aa5a, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+144, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TriggerEventChangeShaderMapOverrideDuration) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("TConditions", &t.TConditions, d...)
	cb.Do("FGenerated", &t.FGenerated, d...)
	cb.Do("Unk_6cba752", &t.Unk_6cba752, d...)
	cb.Do("DwParentActorID", &t.DwParentActorID, d...)
	cb.Do("TDuration", &t.TDuration, d...)
	cb.Do("DwTriggerFlags", &t.DwTriggerFlags, d...)
	cb.Do("DwTriggerFlagsEx", &t.DwTriggerFlagsEx, d...)
	cb.Do("TCleanup", &t.TCleanup, d...)
	cb.Do("Unk_49e9257", &t.Unk_49e9257, d...)
	cb.Do("Unk_5490979", &t.Unk_5490979, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("DwActorID", &t.DwActorID, d...)
	cb.Do("DwShaderMapOverride", &t.DwShaderMapOverride, d...)
	cb.Do("Unk_279aa5a", &t.Unk_279aa5a, d...)
}

type StoryboardUIControlSetRightTrack struct {
	// Inherits StoryboardUIControlSetValueTrack_float
	DwType          DT_UINT
	TNodeCollection StoryboardValueNodeCollection_float
	Unk_77ed19a     DT_ENUM
	DwPad           DT_UINT
}

func (t *StoryboardUIControlSetRightTrack) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TNodeCollection, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.Unk_77ed19a, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+56, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *StoryboardUIControlSetRightTrack) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("TNodeCollection", &t.TNodeCollection, d...)
	cb.Do("Unk_77ed19a", &t.Unk_77ed19a, d...)
	cb.Do("DwPad", &t.DwPad, d...)
}

type Type_1c5ecda5 struct {
	TStyleOverrides DT_VARIABLEARRAY[*UITemplateStyleOverride]
}

func (t *Type_1c5ecda5) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.TStyleOverrides, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_1c5ecda5) Walk(cb WalkCallback, d ...any) {
	cb.Do("TStyleOverrides", &t.TStyleOverrides, d...)
}

type TimedSpawningData struct {
	GbidSpawnLocType DT_GBID
	ERestrictionType DT_ENUM
	NCountActive     DT_INT
	FlPercentActive  DT_FLOAT
	FlDuration       DT_FLOAT
}

func (t *TimedSpawningData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.GbidSpawnLocType, r, &Options{
		Flags: 1,
		Group: 20,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.ERestrictionType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.NCountActive, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.FlPercentActive, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.FlDuration, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+20, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TimedSpawningData) Walk(cb WalkCallback, d ...any) {
	cb.Do("GbidSpawnLocType", &t.GbidSpawnLocType, d...)
	cb.Do("ERestrictionType", &t.ERestrictionType, d...)
	cb.Do("NCountActive", &t.NCountActive, d...)
	cb.Do("FlPercentActive", &t.FlPercentActive, d...)
	cb.Do("FlDuration", &t.FlDuration, d...)
}

type PowerConditionStoredValueEquals struct {
	// Inherits PowerConditionBase
	// Inherits PolymorphicBase
	DwType         DT_UINT
	BInverse       DT_INT
	DwPad          DT_UINT
	SzVariableName DT_UINT
	FlValue        DT_FLOAT
}

func (t *PowerConditionStoredValueEquals) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BInverse, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SzVariableName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.FlValue, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PowerConditionStoredValueEquals) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("BInverse", &t.BInverse, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("SzVariableName", &t.SzVariableName, d...)
	cb.Do("FlValue", &t.FlValue, d...)
}

type WeatherDefinitionOptionalFieldMapDefaults struct {
	Unk_281a24e                    DT_INT
	Unk_db52f49                    DT_INT
	FlWeatherDuration              DT_FLOAT
	PathWeatherIntensity           InterpolationPath_float
	PathDirectionalShadowIntensity InterpolationPath_float
	Unk_e71f9c                     InterpolationPath_float
	Unk_e71f9d                     InterpolationPath_float
	Unk_78feafe                    DT_INT
	Unk_88e388e                    InterpolationPath_float
	Unk_8a0510f                    InterpolationPath_float
	Unk_78feaff                    DT_INT
	Unk_88e388f                    InterpolationPath_float
	Unk_8a05110                    InterpolationPath_float
	PathCloudShadowIntensity       InterpolationPath_float
	PathCloudShadowOffset          InterpolationPath_float
	FlCloudSpeedScalar             DT_FLOAT
	Unk_969434                     DT_INT
	FlCloudScale                   DT_FLOAT
	TMatTexCloud                   MaterialTexture
	TMatTexCloud2                  MaterialTexture
	Unk_635ca57                    InterpolationPath_float
	EEffectType                    DT_ENUM
	Unk_17e101e                    DT_INT
	Unk_61412c1                    DT_FLOAT
	FDryCharacters                 DT_INT
	Unk_6a3ef4                     DT_VARIABLEARRAY[*DT_SNO]
	SnoFogParticle                 DT_SNO
	SnoSound                       DT_SNO
	SnoSkyboxActor                 DT_SNO
	ASkyboxYaw                     DT_FLOAT
	Unk_d76517b                    DT_INT
	FlLightningAltitude            DT_RANGE[*DT_FLOAT]
	FlLightningAzimuth             DT_RANGE[*DT_FLOAT]
	PathLightningThreshold         InterpolationPath_float
	TLightningDelayRange           DT_RANGE[*DT_FLOAT]
	FlThunderDelayMax              DT_FLOAT
	SnoLightning                   DT_SNO
	SnoLightningEffectGroup        DT_SNO
	SnoThunder                     DT_SNO
	Unk_e62e0c5                    DT_INT
	Unk_ef3334                     InterpolationPath_float
	Unk_5ae444c                    DT_RANGE[*DT_FLOAT]
	Unk_814d665                    DT_FLOAT
	Unk_e4ce904                    DT_FLOAT
	Unk_71a7d61                    InterpolationPath_float
	Unk_c03585a                    InterpolationPath_float
	Unk_ef9caa7                    InterpolationPath_float
	PathShapeOcclusionStrength     InterpolationPath_float
	FlShapeOcclusionAltitude       DT_FLOAT
	FlShapeOcclusionAzimuth        DT_FLOAT
	SnoSkylightTex                 DT_SNO
	QSkylightTexRotation           bcQuat
	FSunEnabled                    DT_INT
	PathSunColor                   InterpolationPath_RGBAColor
	PathSunIntensity               InterpolationPath_float
	Unk_b9380cd                    InterpolationPath_float
	Unk_d83665                     DT_FLOAT
	Unk_8ff1cc9                    DT_INT
	Unk_18f4472                    InterpolationPath_RGBAColor
	Unk_71643d4                    DT_RGBACOLOR
	Unk_811fc11                    DT_FLOAT
	FlSunAltitude                  DT_FLOAT
	FlSunAzimuth                   DT_FLOAT
	FlSunRadius                    DT_FLOAT
	Unk_9e754d5                    DT_FLOAT
	Unk_aa224d7                    DT_INT
	FlSunShadowAltitude            DT_FLOAT
	FlSunShadowAzimuth             DT_FLOAT
	Unk_daea413                    DT_FLOAT
	Unk_2935034                    InterpolationPath_float
	FlDirectionalFogAltitude       DT_FLOAT
	Unk_d9887a5                    DT_FLOAT
	Unk_736ceb5                    InterpolationPath_RGBAColor
	Unk_e10a587                    InterpolationPath_RGBAColor
	Unk_dd8bdbd                    InterpolationPath_float
	Unk_8f0758f                    InterpolationPath_float
	Unk_f9636b7                    DT_FLOAT
	Unk_b8314fd                    DT_FLOAT
	Unk_25d0dc9                    DT_FLOAT
	Unk_be5b4cf                    DT_FLOAT
	Unk_8d2c2a4                    InterpolationPath_RGBAColor
	Unk_31b112c                    InterpolationPath_float
	Unk_526a5cd                    InterpolationPath_float
	Unk_d9f342f                    DT_INT
	Unk_d4be541                    DT_INT
	Unk_57c6d0f                    InterpolationPath_RGBAColor
	Unk_50a0f21                    InterpolationPath_RGBAColor
	Unk_819f917                    InterpolationPath_float
	Unk_b591c29                    InterpolationPath_float
	Unk_93f10b1                    DT_FLOAT
	Unk_21b97b7                    DT_FLOAT
	Unk_1212703                    DT_FLOAT
	Unk_58e8ec9                    DT_FLOAT
	Unk_65efd73                    InterpolationPath_float
	Unk_23eac05                    InterpolationPath_float
	Unk_6cf80a6                    InterpolationPath_float
	Unk_bf9598                     InterpolationPath_float
	Unk_902b160                    InterpolationPath_float
	Unk_958dd92                    InterpolationPath_float
	Unk_9733493                    InterpolationPath_float
	Unk_7d9c725                    InterpolationPath_float
	PathLightGridIntensity         InterpolationPath_float
	Unk_a0d23db                    DT_INT
	FlBlendApproachSpeed           DT_FLOAT
	TWaveSettings                  HeightFieldWaveSettings
	SnoOceanMaterial               DT_SNO
	SnoGroundFogMaterial           DT_SNO
	PathWaterBloodiness            InterpolationPath_float
	PathWaterEffect                InterpolationPath_float
	Unk_643a575                    InterpolationPath_float
	Unk_7627163                    InterpolationPath_float
	Unk_832195e                    InterpolationPath_float
	PathVertexAOPower              InterpolationPath_float
	FlSSAOOcclusionRadius          DT_FLOAT
	FlSSAOOcclusionStrength        DT_FLOAT
	Unk_6356b81                    DT_FLOAT
	Unk_c1c86a0                    DT_FLOAT
	Unk_cc9331e                    DT_FLOAT
	Unk_58f490                     DT_FLOAT
	Unk_92befa                     DT_FLOAT
	Unk_ff9df7d                    DT_FLOAT
	Unk_eebbc0                     DT_FLOAT
	Unk_826c03f                    InterpolationPath_float
	Unk_31d22a7                    DT_INT
	Unk_a16201                     DT_FLOAT
	Unk_a55216b                    InterpolationPath_float
	Unk_166e0e6                    DT_FLOAT
	Unk_bd7f6de                    DT_FLOAT
	Unk_f5b8782                    InterpolationPath_float
	Unk_f8bf7fa                    DT_FLOAT
	Unk_b6100e3                    DT_FLOAT
	Unk_62ddb30                    DT_INT
	Unk_202fc35                    bcQuat
	Unk_4e6515c                    DT_INT
	TShoreWaveSettings             ShoreWaveSettings
	RgbaBloomTint                  DT_RGBACOLOR
	FEnableAdvancedBloomSettings   DT_INT
	Unk_17d9f71                    InterpolationPath_float
}

func (t *WeatherDefinitionOptionalFieldMapDefaults) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Unk_281a24e, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.Unk_db52f49, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.FlWeatherDuration, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.PathWeatherIntensity, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.PathDirectionalShadowIntensity, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.Unk_e71f9c, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+184, &t.Unk_e71f9d, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+240, &t.Unk_78feafe, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+248, &t.Unk_88e388e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+304, &t.Unk_8a0510f, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+360, &t.Unk_78feaff, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+368, &t.Unk_88e388f, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+424, &t.Unk_8a05110, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+480, &t.PathCloudShadowIntensity, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+536, &t.PathCloudShadowOffset, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+592, &t.FlCloudSpeedScalar, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+596, &t.Unk_969434, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+600, &t.FlCloudScale, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+608, &t.TMatTexCloud, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+648, &t.TMatTexCloud2, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+688, &t.Unk_635ca57, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+744, &t.EEffectType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+748, &t.Unk_17e101e, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+752, &t.Unk_61412c1, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+756, &t.FDryCharacters, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+760, &t.Unk_6a3ef4, r, &Options{
		Flags: 1,
		Group: 44,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+776, &t.SnoFogParticle, r, &Options{
		Flags: 1,
		Group: 27,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+780, &t.SnoSound, r, &Options{
		Flags: 1,
		Group: 40,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+784, &t.SnoSkyboxActor, r, &Options{
		Flags: 1,
		Group: 1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+788, &t.ASkyboxYaw, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+792, &t.Unk_d76517b, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+796, &t.FlLightningAltitude, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+804, &t.FlLightningAzimuth, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+816, &t.PathLightningThreshold, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+872, &t.TLightningDelayRange, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+880, &t.FlThunderDelayMax, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+884, &t.SnoLightning, r, &Options{
		Flags: 1,
		Group: 23,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+888, &t.SnoLightningEffectGroup, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+892, &t.SnoThunder, r, &Options{
		Flags: 1,
		Group: 40,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+896, &t.Unk_e62e0c5, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+904, &t.Unk_ef3334, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+960, &t.Unk_5ae444c, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+968, &t.Unk_814d665, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+972, &t.Unk_e4ce904, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+976, &t.Unk_71a7d61, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1032, &t.Unk_c03585a, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1088, &t.Unk_ef9caa7, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1144, &t.PathShapeOcclusionStrength, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1200, &t.FlShapeOcclusionAltitude, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1204, &t.FlShapeOcclusionAzimuth, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1208, &t.SnoSkylightTex, r, &Options{
		Flags: 1,
		Group: 44,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1212, &t.QSkylightTexRotation, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1228, &t.FSunEnabled, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1232, &t.PathSunColor, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1288, &t.PathSunIntensity, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1344, &t.Unk_b9380cd, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1400, &t.Unk_d83665, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1404, &t.Unk_8ff1cc9, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1408, &t.Unk_18f4472, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1464, &t.Unk_71643d4, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1468, &t.Unk_811fc11, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1472, &t.FlSunAltitude, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1476, &t.FlSunAzimuth, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1480, &t.FlSunRadius, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1484, &t.Unk_9e754d5, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1488, &t.Unk_aa224d7, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1492, &t.FlSunShadowAltitude, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1496, &t.FlSunShadowAzimuth, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1500, &t.Unk_daea413, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1504, &t.Unk_2935034, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1560, &t.FlDirectionalFogAltitude, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1564, &t.Unk_d9887a5, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1568, &t.Unk_736ceb5, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1624, &t.Unk_e10a587, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1680, &t.Unk_dd8bdbd, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1736, &t.Unk_8f0758f, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1792, &t.Unk_f9636b7, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1796, &t.Unk_b8314fd, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1800, &t.Unk_25d0dc9, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1804, &t.Unk_be5b4cf, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1808, &t.Unk_8d2c2a4, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1864, &t.Unk_31b112c, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1920, &t.Unk_526a5cd, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1976, &t.Unk_d9f342f, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1980, &t.Unk_d4be541, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1984, &t.Unk_57c6d0f, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2040, &t.Unk_50a0f21, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2096, &t.Unk_819f917, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2152, &t.Unk_b591c29, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2208, &t.Unk_93f10b1, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2212, &t.Unk_21b97b7, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2216, &t.Unk_1212703, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2220, &t.Unk_58e8ec9, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2224, &t.Unk_65efd73, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2280, &t.Unk_23eac05, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2336, &t.Unk_6cf80a6, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2392, &t.Unk_bf9598, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2448, &t.Unk_902b160, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2504, &t.Unk_958dd92, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2560, &t.Unk_9733493, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2616, &t.Unk_7d9c725, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2672, &t.PathLightGridIntensity, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2728, &t.Unk_a0d23db, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2732, &t.FlBlendApproachSpeed, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2736, &t.TWaveSettings, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2752, &t.SnoOceanMaterial, r, &Options{
		Flags: 1,
		Group: 57,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2756, &t.SnoGroundFogMaterial, r, &Options{
		Flags: 1,
		Group: 57,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2760, &t.PathWaterBloodiness, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2816, &t.PathWaterEffect, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2872, &t.Unk_643a575, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2928, &t.Unk_7627163, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2984, &t.Unk_832195e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+3040, &t.PathVertexAOPower, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+3096, &t.FlSSAOOcclusionRadius, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+3100, &t.FlSSAOOcclusionStrength, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+3104, &t.Unk_6356b81, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+3108, &t.Unk_c1c86a0, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+3112, &t.Unk_cc9331e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+3116, &t.Unk_58f490, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+3120, &t.Unk_92befa, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+3124, &t.Unk_ff9df7d, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+3128, &t.Unk_eebbc0, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+3136, &t.Unk_826c03f, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+3192, &t.Unk_31d22a7, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+3196, &t.Unk_a16201, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+3200, &t.Unk_a55216b, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+3256, &t.Unk_166e0e6, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+3260, &t.Unk_bd7f6de, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+3264, &t.Unk_f5b8782, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+3320, &t.Unk_f8bf7fa, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+3324, &t.Unk_b6100e3, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+3328, &t.Unk_62ddb30, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+3332, &t.Unk_202fc35, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+3348, &t.Unk_4e6515c, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+3352, &t.TShoreWaveSettings, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+3384, &t.RgbaBloomTint, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+3388, &t.FEnableAdvancedBloomSettings, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+3392, &t.Unk_17d9f71, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+3448, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *WeatherDefinitionOptionalFieldMapDefaults) Walk(cb WalkCallback, d ...any) {
	cb.Do("Unk_281a24e", &t.Unk_281a24e, d...)
	cb.Do("Unk_db52f49", &t.Unk_db52f49, d...)
	cb.Do("FlWeatherDuration", &t.FlWeatherDuration, d...)
	cb.Do("PathWeatherIntensity", &t.PathWeatherIntensity, d...)
	cb.Do("PathDirectionalShadowIntensity", &t.PathDirectionalShadowIntensity, d...)
	cb.Do("Unk_e71f9c", &t.Unk_e71f9c, d...)
	cb.Do("Unk_e71f9d", &t.Unk_e71f9d, d...)
	cb.Do("Unk_78feafe", &t.Unk_78feafe, d...)
	cb.Do("Unk_88e388e", &t.Unk_88e388e, d...)
	cb.Do("Unk_8a0510f", &t.Unk_8a0510f, d...)
	cb.Do("Unk_78feaff", &t.Unk_78feaff, d...)
	cb.Do("Unk_88e388f", &t.Unk_88e388f, d...)
	cb.Do("Unk_8a05110", &t.Unk_8a05110, d...)
	cb.Do("PathCloudShadowIntensity", &t.PathCloudShadowIntensity, d...)
	cb.Do("PathCloudShadowOffset", &t.PathCloudShadowOffset, d...)
	cb.Do("FlCloudSpeedScalar", &t.FlCloudSpeedScalar, d...)
	cb.Do("Unk_969434", &t.Unk_969434, d...)
	cb.Do("FlCloudScale", &t.FlCloudScale, d...)
	cb.Do("TMatTexCloud", &t.TMatTexCloud, d...)
	cb.Do("TMatTexCloud2", &t.TMatTexCloud2, d...)
	cb.Do("Unk_635ca57", &t.Unk_635ca57, d...)
	cb.Do("EEffectType", &t.EEffectType, d...)
	cb.Do("Unk_17e101e", &t.Unk_17e101e, d...)
	cb.Do("Unk_61412c1", &t.Unk_61412c1, d...)
	cb.Do("FDryCharacters", &t.FDryCharacters, d...)
	cb.Do("Unk_6a3ef4", &t.Unk_6a3ef4, d...)
	cb.Do("SnoFogParticle", &t.SnoFogParticle, d...)
	cb.Do("SnoSound", &t.SnoSound, d...)
	cb.Do("SnoSkyboxActor", &t.SnoSkyboxActor, d...)
	cb.Do("ASkyboxYaw", &t.ASkyboxYaw, d...)
	cb.Do("Unk_d76517b", &t.Unk_d76517b, d...)
	cb.Do("FlLightningAltitude", &t.FlLightningAltitude, d...)
	cb.Do("FlLightningAzimuth", &t.FlLightningAzimuth, d...)
	cb.Do("PathLightningThreshold", &t.PathLightningThreshold, d...)
	cb.Do("TLightningDelayRange", &t.TLightningDelayRange, d...)
	cb.Do("FlThunderDelayMax", &t.FlThunderDelayMax, d...)
	cb.Do("SnoLightning", &t.SnoLightning, d...)
	cb.Do("SnoLightningEffectGroup", &t.SnoLightningEffectGroup, d...)
	cb.Do("SnoThunder", &t.SnoThunder, d...)
	cb.Do("Unk_e62e0c5", &t.Unk_e62e0c5, d...)
	cb.Do("Unk_ef3334", &t.Unk_ef3334, d...)
	cb.Do("Unk_5ae444c", &t.Unk_5ae444c, d...)
	cb.Do("Unk_814d665", &t.Unk_814d665, d...)
	cb.Do("Unk_e4ce904", &t.Unk_e4ce904, d...)
	cb.Do("Unk_71a7d61", &t.Unk_71a7d61, d...)
	cb.Do("Unk_c03585a", &t.Unk_c03585a, d...)
	cb.Do("Unk_ef9caa7", &t.Unk_ef9caa7, d...)
	cb.Do("PathShapeOcclusionStrength", &t.PathShapeOcclusionStrength, d...)
	cb.Do("FlShapeOcclusionAltitude", &t.FlShapeOcclusionAltitude, d...)
	cb.Do("FlShapeOcclusionAzimuth", &t.FlShapeOcclusionAzimuth, d...)
	cb.Do("SnoSkylightTex", &t.SnoSkylightTex, d...)
	cb.Do("QSkylightTexRotation", &t.QSkylightTexRotation, d...)
	cb.Do("FSunEnabled", &t.FSunEnabled, d...)
	cb.Do("PathSunColor", &t.PathSunColor, d...)
	cb.Do("PathSunIntensity", &t.PathSunIntensity, d...)
	cb.Do("Unk_b9380cd", &t.Unk_b9380cd, d...)
	cb.Do("Unk_d83665", &t.Unk_d83665, d...)
	cb.Do("Unk_8ff1cc9", &t.Unk_8ff1cc9, d...)
	cb.Do("Unk_18f4472", &t.Unk_18f4472, d...)
	cb.Do("Unk_71643d4", &t.Unk_71643d4, d...)
	cb.Do("Unk_811fc11", &t.Unk_811fc11, d...)
	cb.Do("FlSunAltitude", &t.FlSunAltitude, d...)
	cb.Do("FlSunAzimuth", &t.FlSunAzimuth, d...)
	cb.Do("FlSunRadius", &t.FlSunRadius, d...)
	cb.Do("Unk_9e754d5", &t.Unk_9e754d5, d...)
	cb.Do("Unk_aa224d7", &t.Unk_aa224d7, d...)
	cb.Do("FlSunShadowAltitude", &t.FlSunShadowAltitude, d...)
	cb.Do("FlSunShadowAzimuth", &t.FlSunShadowAzimuth, d...)
	cb.Do("Unk_daea413", &t.Unk_daea413, d...)
	cb.Do("Unk_2935034", &t.Unk_2935034, d...)
	cb.Do("FlDirectionalFogAltitude", &t.FlDirectionalFogAltitude, d...)
	cb.Do("Unk_d9887a5", &t.Unk_d9887a5, d...)
	cb.Do("Unk_736ceb5", &t.Unk_736ceb5, d...)
	cb.Do("Unk_e10a587", &t.Unk_e10a587, d...)
	cb.Do("Unk_dd8bdbd", &t.Unk_dd8bdbd, d...)
	cb.Do("Unk_8f0758f", &t.Unk_8f0758f, d...)
	cb.Do("Unk_f9636b7", &t.Unk_f9636b7, d...)
	cb.Do("Unk_b8314fd", &t.Unk_b8314fd, d...)
	cb.Do("Unk_25d0dc9", &t.Unk_25d0dc9, d...)
	cb.Do("Unk_be5b4cf", &t.Unk_be5b4cf, d...)
	cb.Do("Unk_8d2c2a4", &t.Unk_8d2c2a4, d...)
	cb.Do("Unk_31b112c", &t.Unk_31b112c, d...)
	cb.Do("Unk_526a5cd", &t.Unk_526a5cd, d...)
	cb.Do("Unk_d9f342f", &t.Unk_d9f342f, d...)
	cb.Do("Unk_d4be541", &t.Unk_d4be541, d...)
	cb.Do("Unk_57c6d0f", &t.Unk_57c6d0f, d...)
	cb.Do("Unk_50a0f21", &t.Unk_50a0f21, d...)
	cb.Do("Unk_819f917", &t.Unk_819f917, d...)
	cb.Do("Unk_b591c29", &t.Unk_b591c29, d...)
	cb.Do("Unk_93f10b1", &t.Unk_93f10b1, d...)
	cb.Do("Unk_21b97b7", &t.Unk_21b97b7, d...)
	cb.Do("Unk_1212703", &t.Unk_1212703, d...)
	cb.Do("Unk_58e8ec9", &t.Unk_58e8ec9, d...)
	cb.Do("Unk_65efd73", &t.Unk_65efd73, d...)
	cb.Do("Unk_23eac05", &t.Unk_23eac05, d...)
	cb.Do("Unk_6cf80a6", &t.Unk_6cf80a6, d...)
	cb.Do("Unk_bf9598", &t.Unk_bf9598, d...)
	cb.Do("Unk_902b160", &t.Unk_902b160, d...)
	cb.Do("Unk_958dd92", &t.Unk_958dd92, d...)
	cb.Do("Unk_9733493", &t.Unk_9733493, d...)
	cb.Do("Unk_7d9c725", &t.Unk_7d9c725, d...)
	cb.Do("PathLightGridIntensity", &t.PathLightGridIntensity, d...)
	cb.Do("Unk_a0d23db", &t.Unk_a0d23db, d...)
	cb.Do("FlBlendApproachSpeed", &t.FlBlendApproachSpeed, d...)
	cb.Do("TWaveSettings", &t.TWaveSettings, d...)
	cb.Do("SnoOceanMaterial", &t.SnoOceanMaterial, d...)
	cb.Do("SnoGroundFogMaterial", &t.SnoGroundFogMaterial, d...)
	cb.Do("PathWaterBloodiness", &t.PathWaterBloodiness, d...)
	cb.Do("PathWaterEffect", &t.PathWaterEffect, d...)
	cb.Do("Unk_643a575", &t.Unk_643a575, d...)
	cb.Do("Unk_7627163", &t.Unk_7627163, d...)
	cb.Do("Unk_832195e", &t.Unk_832195e, d...)
	cb.Do("PathVertexAOPower", &t.PathVertexAOPower, d...)
	cb.Do("FlSSAOOcclusionRadius", &t.FlSSAOOcclusionRadius, d...)
	cb.Do("FlSSAOOcclusionStrength", &t.FlSSAOOcclusionStrength, d...)
	cb.Do("Unk_6356b81", &t.Unk_6356b81, d...)
	cb.Do("Unk_c1c86a0", &t.Unk_c1c86a0, d...)
	cb.Do("Unk_cc9331e", &t.Unk_cc9331e, d...)
	cb.Do("Unk_58f490", &t.Unk_58f490, d...)
	cb.Do("Unk_92befa", &t.Unk_92befa, d...)
	cb.Do("Unk_ff9df7d", &t.Unk_ff9df7d, d...)
	cb.Do("Unk_eebbc0", &t.Unk_eebbc0, d...)
	cb.Do("Unk_826c03f", &t.Unk_826c03f, d...)
	cb.Do("Unk_31d22a7", &t.Unk_31d22a7, d...)
	cb.Do("Unk_a16201", &t.Unk_a16201, d...)
	cb.Do("Unk_a55216b", &t.Unk_a55216b, d...)
	cb.Do("Unk_166e0e6", &t.Unk_166e0e6, d...)
	cb.Do("Unk_bd7f6de", &t.Unk_bd7f6de, d...)
	cb.Do("Unk_f5b8782", &t.Unk_f5b8782, d...)
	cb.Do("Unk_f8bf7fa", &t.Unk_f8bf7fa, d...)
	cb.Do("Unk_b6100e3", &t.Unk_b6100e3, d...)
	cb.Do("Unk_62ddb30", &t.Unk_62ddb30, d...)
	cb.Do("Unk_202fc35", &t.Unk_202fc35, d...)
	cb.Do("Unk_4e6515c", &t.Unk_4e6515c, d...)
	cb.Do("TShoreWaveSettings", &t.TShoreWaveSettings, d...)
	cb.Do("RgbaBloomTint", &t.RgbaBloomTint, d...)
	cb.Do("FEnableAdvancedBloomSettings", &t.FEnableAdvancedBloomSettings, d...)
	cb.Do("Unk_17d9f71", &t.Unk_17d9f71, d...)
}

type Type_1d15fe71 struct {
	// Inherits BuffCallbackBase
	// Inherits PolymorphicBase
	DwType                DT_UINT
	DwPad                 DT_UINT
	SnoTriggerEffectGroup DT_SNO
	ArConditions          DT_POLYMORPHIC_VARIABLEARRAY[*DT_INT64]
}

func (t *Type_1d15fe71) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoTriggerEffectGroup, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ArConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_1d15fe71) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("SnoTriggerEffectGroup", &t.SnoTriggerEffectGroup, d...)
	cb.Do("ArConditions", &t.ArConditions, d...)
}

type ShoreWaveSettings struct {
	Unk_4d19a78       DT_FLOAT
	FlShoreSpeed      DT_FLOAT
	FlShoreMultiplier DT_FLOAT
	FlWaveSpeed       DT_FLOAT
	FlLineWidth       DT_FLOAT
	Unk_d8d6cc9       DT_FLOAT
	Unk_503df13       DT_RANGE[*DT_FLOAT]
}

func (t *ShoreWaveSettings) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Unk_4d19a78, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.FlShoreSpeed, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.FlShoreMultiplier, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.FlWaveSpeed, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.FlLineWidth, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.Unk_d8d6cc9, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_503df13, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ShoreWaveSettings) Walk(cb WalkCallback, d ...any) {
	cb.Do("Unk_4d19a78", &t.Unk_4d19a78, d...)
	cb.Do("FlShoreSpeed", &t.FlShoreSpeed, d...)
	cb.Do("FlShoreMultiplier", &t.FlShoreMultiplier, d...)
	cb.Do("FlWaveSpeed", &t.FlWaveSpeed, d...)
	cb.Do("FlLineWidth", &t.FlLineWidth, d...)
	cb.Do("Unk_d8d6cc9", &t.Unk_d8d6cc9, d...)
	cb.Do("Unk_503df13", &t.Unk_503df13, d...)
}

type MailDeleteMessage struct {
	THeader RequiredMessageHeader
	IdMail  Type_f5ac91bb
}

func (t *MailDeleteMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.IdMail, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *MailDeleteMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("IdMail", &t.IdMail, d...)
}

type DebugForceSpawnMessage struct {
	THeader       RequiredMessageHeader
	IdLevelArea   DT_INT
	GbidType      DT_GBID
	IdSpawnMarker DT_INT
	NGroupIndex   DT_INT
	EGroupType    DT_INT
}

func (t *DebugForceSpawnMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.IdLevelArea, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.GbidType, r, &Options{
		Flags: 1,
		Group: 20,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.IdSpawnMarker, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.NGroupIndex, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.EGroupType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+36, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *DebugForceSpawnMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("IdLevelArea", &t.IdLevelArea, d...)
	cb.Do("GbidType", &t.GbidType, d...)
	cb.Do("IdSpawnMarker", &t.IdSpawnMarker, d...)
	cb.Do("NGroupIndex", &t.NGroupIndex, d...)
	cb.Do("EGroupType", &t.EGroupType, d...)
}

type ClanBankDepositMessage struct {
	THeader         RequiredRequestMessageHeader
	AnnItem         DT_ACD_NETWORK_NAME
	NBankTab        DT_INT
	ECurrencyType   DT_ENUM
	NCurrencyAmount DT_INT64
}

func (t *ClanBankDepositMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.AnnItem, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.NBankTab, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.ECurrencyType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.NCurrencyAmount, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ClanBankDepositMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("AnnItem", &t.AnnItem, d...)
	cb.Do("NBankTab", &t.NBankTab, d...)
	cb.Do("ECurrencyType", &t.ECurrencyType, d...)
	cb.Do("NCurrencyAmount", &t.NCurrencyAmount, d...)
}

type Type_1d7ac8ba struct {
	SzName      DT_CSTRING[*DT_BYTE]
	Unk_b79a3f1 DT_INT
	NID         DT_INT
}

func (t *Type_1d7ac8ba) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SzName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_b79a3f1, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.NID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_1d7ac8ba) Walk(cb WalkCallback, d ...any) {
	cb.Do("SzName", &t.SzName, d...)
	cb.Do("Unk_b79a3f1", &t.Unk_b79a3f1, d...)
	cb.Do("NID", &t.NID, d...)
}

type TiledStyleDefinitionOptionalFieldMapDefaults struct {
	SnoShader DT_SNO
}

func (t *TiledStyleDefinitionOptionalFieldMapDefaults) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoShader, r, &Options{
		Flags: 1,
		Group: 37,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+4, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TiledStyleDefinitionOptionalFieldMapDefaults) Walk(cb WalkCallback, d ...any) {
	cb.Do("SnoShader", &t.SnoShader, d...)
}

type GlobalFontColor struct {
	SzToken   DT_UINT
	RgbaColor DT_RGBACOLOR
}

func (t *GlobalFontColor) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SzToken, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.RgbaColor, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *GlobalFontColor) Walk(cb WalkCallback, d ...any) {
	cb.Do("SzToken", &t.SzToken, d...)
	cb.Do("RgbaColor", &t.RgbaColor, d...)
}

type UIHotkeyStyleOptionalFieldMapDefaults struct {
	SzHotkeyClickPredicate   DT_CSTRING[*DT_BYTE]
	EHotkey                  DT_ENUM
	Unk_8c498b5              DT_ENUM
	EFixedKey                DT_ENUM
	Unk_ccd9967              DT_CSTRING[*DT_BYTE]
	SzOnKeyHeldDown          DT_CSTRING[*DT_BYTE]
	SzOnController           DT_CSTRING[*DT_BYTE]
	SzOnControllerButtonUp   DT_CSTRING[*DT_BYTE]
	SzOnControllerButtonHeld DT_CSTRING[*DT_BYTE]
	Unk_e8b07b2              DT_CSTRING[*DT_BYTE]
	SnoOnActionSound         DT_SNO
	BAllowsHeldRepeats       DT_INT
	Unk_9a8825c              DT_FLOAT
}

func (t *UIHotkeyStyleOptionalFieldMapDefaults) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SzHotkeyClickPredicate, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.EHotkey, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.Unk_8c498b5, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.EFixedKey, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.Unk_ccd9967, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.SzOnKeyHeldDown, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.SzOnController, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.SzOnControllerButtonUp, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.SzOnControllerButtonHeld, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.Unk_e8b07b2, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.SnoOnActionSound, r, &Options{
		Flags: 1,
		Group: 40,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+132, &t.BAllowsHeldRepeats, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+136, &t.Unk_9a8825c, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+144, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *UIHotkeyStyleOptionalFieldMapDefaults) Walk(cb WalkCallback, d ...any) {
	cb.Do("SzHotkeyClickPredicate", &t.SzHotkeyClickPredicate, d...)
	cb.Do("EHotkey", &t.EHotkey, d...)
	cb.Do("Unk_8c498b5", &t.Unk_8c498b5, d...)
	cb.Do("EFixedKey", &t.EFixedKey, d...)
	cb.Do("Unk_ccd9967", &t.Unk_ccd9967, d...)
	cb.Do("SzOnKeyHeldDown", &t.SzOnKeyHeldDown, d...)
	cb.Do("SzOnController", &t.SzOnController, d...)
	cb.Do("SzOnControllerButtonUp", &t.SzOnControllerButtonUp, d...)
	cb.Do("SzOnControllerButtonHeld", &t.SzOnControllerButtonHeld, d...)
	cb.Do("Unk_e8b07b2", &t.Unk_e8b07b2, d...)
	cb.Do("SnoOnActionSound", &t.SnoOnActionSound, d...)
	cb.Do("BAllowsHeldRepeats", &t.BAllowsHeldRepeats, d...)
	cb.Do("Unk_9a8825c", &t.Unk_9a8825c, d...)
}

type UIMargins struct {
	FlLeft   DT_FLOAT
	FlTop    DT_FLOAT
	FlRight  DT_FLOAT
	FlBottom DT_FLOAT
}

func (t *UIMargins) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.FlLeft, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.FlTop, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.FlRight, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.FlBottom, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *UIMargins) Walk(cb WalkCallback, d ...any) {
	cb.Do("FlLeft", &t.FlLeft, d...)
	cb.Do("FlTop", &t.FlTop, d...)
	cb.Do("FlRight", &t.FlRight, d...)
	cb.Do("FlBottom", &t.FlBottom, d...)
}

type ItemAffixAttribute struct {
	BIgnoreLegendaryScaling DT_INT
	BLowerIsBetter          DT_INT
	TAttribute              AttributeSpecifier
}

func (t *ItemAffixAttribute) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.BIgnoreLegendaryScaling, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.BLowerIsBetter, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.TAttribute, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+88, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ItemAffixAttribute) Walk(cb WalkCallback, d ...any) {
	cb.Do("BIgnoreLegendaryScaling", &t.BIgnoreLegendaryScaling, d...)
	cb.Do("BLowerIsBetter", &t.BLowerIsBetter, d...)
	cb.Do("TAttribute", &t.TAttribute, d...)
}

type PlayHitEffectMessage struct {
	THeader     RequiredMessageHeader
	Ann         DT_ACD_NETWORK_NAME
	AnnAttacker DT_ACD_NETWORK_NAME
	EDamageType DT_ENUM
}

func (t *PlayHitEffectMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Ann, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.AnnAttacker, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.EDamageType, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+36, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PlayHitEffectMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("Ann", &t.Ann, d...)
	cb.Do("AnnAttacker", &t.AnnAttacker, d...)
	cb.Do("EDamageType", &t.EDamageType, d...)
}

type UIWindowStyle struct {
	// Inherits UIControlStyle
	// Inherits PolymorphicBase
	DwType                    DT_UINT
	DwPad                     DT_UINT
	HParentStyle              UIControlHandle
	Unk_441f783               DT_INT64
	M_eHasModifiedPowerTagMap DT_TAGMAP[*DT_ENUM]
	TConsoleInput             UIControlConsoleInput
	Unk_b4f614c               DT_TAGMAP[*DT_ENUM]
}

func (t *UIWindowStyle) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.HParentStyle, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_441f783, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.M_eHasModifiedPowerTagMap, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.TConsoleInput, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.Unk_b4f614c, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+80, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *UIWindowStyle) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("HParentStyle", &t.HParentStyle, d...)
	cb.Do("Unk_441f783", &t.Unk_441f783, d...)
	cb.Do("M_eHasModifiedPowerTagMap", &t.M_eHasModifiedPowerTagMap, d...)
	cb.Do("TConsoleInput", &t.TConsoleInput, d...)
	cb.Do("Unk_b4f614c", &t.Unk_b4f614c, d...)
}

type TriggerEventShadow struct {
	// Inherits TriggerEvent
	// Inherits PolymorphicBase
	DwType           DT_UINT
	DwPad            DT_UINT
	TConditions      TriggerConditions
	FGenerated       DT_INT
	Unk_6cba752      DT_INT
	DwParentActorID  DT_UINT
	DwTriggerFlags   DT_UINT
	DwTriggerFlagsEx DT_UINT
	BShadow          DT_INT
}

func (t *TriggerEventShadow) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.FGenerated, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_6cba752, r, &Options{Flags: 16}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.DwParentActorID, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.DwTriggerFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.DwTriggerFlagsEx, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.BShadow, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+96, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TriggerEventShadow) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("TConditions", &t.TConditions, d...)
	cb.Do("FGenerated", &t.FGenerated, d...)
	cb.Do("Unk_6cba752", &t.Unk_6cba752, d...)
	cb.Do("DwParentActorID", &t.DwParentActorID, d...)
	cb.Do("DwTriggerFlags", &t.DwTriggerFlags, d...)
	cb.Do("DwTriggerFlagsEx", &t.DwTriggerFlagsEx, d...)
	cb.Do("BShadow", &t.BShadow, d...)
}

type GameTestingCharacterSamplingStartMessage struct {
	THeader    RequiredMessageHeader
	SzArmorSet DT_CHARARRAY
	SzHead     DT_CHARARRAY
	SzTorso    DT_CHARARRAY
	SzFeet     DT_CHARARRAY
	SzHands    DT_CHARARRAY
	SzLegs     DT_CHARARRAY
	SzBack     DT_CHARARRAY
	SnoClass   DT_SNO
	BFemale    DT_INT
}

func (t *GameTestingCharacterSamplingStartMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SzArmorSet, r, &Options{
		ArrayLength: 50,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+66, &t.SzHead, r, &Options{
		ArrayLength: 50,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+116, &t.SzTorso, r, &Options{
		ArrayLength: 50,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+166, &t.SzFeet, r, &Options{
		ArrayLength: 50,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+216, &t.SzHands, r, &Options{
		ArrayLength: 50,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+266, &t.SzLegs, r, &Options{
		ArrayLength: 50,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+316, &t.SzBack, r, &Options{
		ArrayLength: 50,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+368, &t.SnoClass, r, &Options{
		Flags: 1,
		Group: 74,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+372, &t.BFemale, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+376, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *GameTestingCharacterSamplingStartMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("SzArmorSet", &t.SzArmorSet, d...)
	cb.Do("SzHead", &t.SzHead, d...)
	cb.Do("SzTorso", &t.SzTorso, d...)
	cb.Do("SzFeet", &t.SzFeet, d...)
	cb.Do("SzHands", &t.SzHands, d...)
	cb.Do("SzLegs", &t.SzLegs, d...)
	cb.Do("SzBack", &t.SzBack, d...)
	cb.Do("SnoClass", &t.SnoClass, d...)
	cb.Do("BFemale", &t.BFemale, d...)
}

type Type_1eb0f5e6 struct {
	// Inherits TriggerEventRangedDuration
	// Inherits TriggerEvent
	// Inherits PolymorphicBase
	DwType           DT_UINT
	TConditions      TriggerConditions
	FGenerated       DT_INT
	Unk_6cba752      DT_INT
	DwParentActorID  DT_UINT
	TDuration        DT_FLOAT
	DwTriggerFlags   DT_UINT
	DwTriggerFlagsEx DT_UINT
	TCleanup         TriggerCleanup
	Unk_49e9257      DT_INT
	Unk_5490979      DT_INT
	DwPad            DT_UINT
}

func (t *Type_1eb0f5e6) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.FGenerated, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_6cba752, r, &Options{Flags: 16}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.DwParentActorID, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.TDuration, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.DwTriggerFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.DwTriggerFlagsEx, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.TCleanup, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+116, &t.Unk_49e9257, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.Unk_5490979, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+124, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+128, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_1eb0f5e6) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("TConditions", &t.TConditions, d...)
	cb.Do("FGenerated", &t.FGenerated, d...)
	cb.Do("Unk_6cba752", &t.Unk_6cba752, d...)
	cb.Do("DwParentActorID", &t.DwParentActorID, d...)
	cb.Do("TDuration", &t.TDuration, d...)
	cb.Do("DwTriggerFlags", &t.DwTriggerFlags, d...)
	cb.Do("DwTriggerFlagsEx", &t.DwTriggerFlagsEx, d...)
	cb.Do("TCleanup", &t.TCleanup, d...)
	cb.Do("Unk_49e9257", &t.Unk_49e9257, d...)
	cb.Do("Unk_5490979", &t.Unk_5490979, d...)
	cb.Do("DwPad", &t.DwPad, d...)
}

type DynamicMovementData struct {
	THeader     GBIDHeader
	Unk_e726cf1 DT_RANGE[*DT_FLOAT]
	Unk_a1e03a6 DT_RANGE[*DT_FLOAT]
	Unk_2a8932  DT_RANGE[*DT_FLOAT]
	Unk_94d0477 DT_RANGE[*DT_FLOAT]
	Unk_e466a88 DT_FLOAT
	Unk_78d1051 DT_FLOAT
	Unk_761cd11 DT_FLOAT
	Unk_402fe97 DT_FLOAT
	Unk_30b0cd2 DT_FLOAT
}

func (t *DynamicMovementData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+260, &t.Unk_e726cf1, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+268, &t.Unk_a1e03a6, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+276, &t.Unk_2a8932, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+284, &t.Unk_94d0477, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+292, &t.Unk_e466a88, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+296, &t.Unk_78d1051, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+300, &t.Unk_761cd11, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+304, &t.Unk_402fe97, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+308, &t.Unk_30b0cd2, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+312, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *DynamicMovementData) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("Unk_e726cf1", &t.Unk_e726cf1, d...)
	cb.Do("Unk_a1e03a6", &t.Unk_a1e03a6, d...)
	cb.Do("Unk_2a8932", &t.Unk_2a8932, d...)
	cb.Do("Unk_94d0477", &t.Unk_94d0477, d...)
	cb.Do("Unk_e466a88", &t.Unk_e466a88, d...)
	cb.Do("Unk_78d1051", &t.Unk_78d1051, d...)
	cb.Do("Unk_761cd11", &t.Unk_761cd11, d...)
	cb.Do("Unk_402fe97", &t.Unk_402fe97, d...)
	cb.Do("Unk_30b0cd2", &t.Unk_30b0cd2, d...)
}

type AIStateDebugSetStateMessage struct {
	THeader  RequiredMessageHeader
	AnnActor DT_ACD_NETWORK_NAME
	BEnabled DT_INT
}

func (t *AIStateDebugSetStateMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.AnnActor, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.BEnabled, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+28, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *AIStateDebugSetStateMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("AnnActor", &t.AnnActor, d...)
	cb.Do("BEnabled", &t.BEnabled, d...)
}

type Type_1f34a5e5 struct {
	TComponentId     DT_UINT
	ArHelmComponents DT_VARIABLEARRAY[*DT_UINT]
}

func (t *Type_1f34a5e5) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.TComponentId, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.ArHelmComponents, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_1f34a5e5) Walk(cb WalkCallback, d ...any) {
	cb.Do("TComponentId", &t.TComponentId, d...)
	cb.Do("ArHelmComponents", &t.ArHelmComponents, d...)
}

type SignGizmoData struct {
	// Inherits ActorGizmoData
	// Inherits PolymorphicBase
	DwType                           DT_UINT
	DwPad                            DT_UINT
	FDisableNonFriendlyOperation     DT_INT
	FWalkToCenter                    DT_INT
	FGizmoStartsDisabled             DT_INT
	FUseStringListName               DT_INT
	FForceMinimapIcon                DT_INT
	FlOperationRadius                DT_FLOAT
	Unk_d0b1df5                      DT_FLOAT
	FlGizmoUseTime                   DT_FLOAT
	SnoChannelingEffect              DT_SNO
	Unk_2767229                      DT_INT
	FGizmoShowProgressBar            DT_INT
	Unk_6d9ebe1                      DT_INT
	Unk_5456245                      DT_INT
	Unk_af5815a                      DT_INT
	SnoOnClickEffect                 DT_SNO
	SnoPickedUpEffect                DT_SNO
	SnoDropOnGroundEffect            DT_SNO
	TConditionData                   GizmoConditionData
	SnoPowerOperator                 DT_SNO
	SnoPowerOperate                  DT_SNO
	SnoPowerOperatorActive           DT_SNO
	SnoPowerOperateActive            DT_SNO
	Unk_359810e                      DT_INT
	NCooldown                        DT_UINT
	Unk_9c8478e                      DT_UINT
	Unk_d45ed2d                      DT_INT
	Unk_f6b20b7                      DT_INT
	Unk_54513b8                      DT_INT
	Unk_fd1f378                      DT_UINT
	HGizmoOperateFlavorTextMsgLabel  DT_UINT
	HGizmoOperateDescriptionMsgLabel DT_UINT
	FlGizmoOperateOffset             DT_FLOAT
	Unk_ab58cd3                      DT_ENUM
	Unk_91a3966                      DT_UINT
	HGizmoChannelingLabel            DT_UINT
	Unk_4be4371                      DT_INT
	ESignType                        DT_ENUM
	SnoInteractSound                 DT_SNO
	TDestination                     MarkerHandle
	SnoDisembodiedVoice              DT_SNO
	ESignMaterial                    DT_ENUM
	SnoLore                          DT_SNO
	SnoReputation                    DT_SNO
	HImageNotice                     UIImageHandleReference
}

func (t *SignGizmoData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.FDisableNonFriendlyOperation, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.FWalkToCenter, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.FGizmoStartsDisabled, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.FUseStringListName, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.FForceMinimapIcon, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.FlOperationRadius, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.Unk_d0b1df5, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.FlGizmoUseTime, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.SnoChannelingEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.Unk_2767229, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.FGizmoShowProgressBar, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+60, &t.Unk_6d9ebe1, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.Unk_5456245, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.Unk_af5815a, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.SnoOnClickEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.SnoPickedUpEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.SnoDropOnGroundEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.TConditionData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.SnoPowerOperator, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.SnoPowerOperate, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.SnoPowerOperatorActive, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+100, &t.SnoPowerOperateActive, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+104, &t.Unk_359810e, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+108, &t.NCooldown, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.Unk_9c8478e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+116, &t.Unk_d45ed2d, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.Unk_f6b20b7, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+124, &t.Unk_54513b8, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.Unk_fd1f378, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+132, &t.HGizmoOperateFlavorTextMsgLabel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+136, &t.HGizmoOperateDescriptionMsgLabel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+140, &t.FlGizmoOperateOffset, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+144, &t.Unk_ab58cd3, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+148, &t.Unk_91a3966, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+152, &t.HGizmoChannelingLabel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+156, &t.Unk_4be4371, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+160, &t.ESignType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+164, &t.SnoInteractSound, r, &Options{
		Flags: 1,
		Group: 40,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+168, &t.TDestination, r, &Options{Flags: 513}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+176, &t.SnoDisembodiedVoice, r, &Options{
		Flags: 1,
		Group: 12,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+180, &t.ESignMaterial, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+184, &t.SnoLore, r, &Options{
		Flags: 1,
		Group: 59,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+188, &t.SnoReputation, r, &Options{
		Flags: 1,
		Group: 105,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+192, &t.HImageNotice, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+200, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *SignGizmoData) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("FDisableNonFriendlyOperation", &t.FDisableNonFriendlyOperation, d...)
	cb.Do("FWalkToCenter", &t.FWalkToCenter, d...)
	cb.Do("FGizmoStartsDisabled", &t.FGizmoStartsDisabled, d...)
	cb.Do("FUseStringListName", &t.FUseStringListName, d...)
	cb.Do("FForceMinimapIcon", &t.FForceMinimapIcon, d...)
	cb.Do("FlOperationRadius", &t.FlOperationRadius, d...)
	cb.Do("Unk_d0b1df5", &t.Unk_d0b1df5, d...)
	cb.Do("FlGizmoUseTime", &t.FlGizmoUseTime, d...)
	cb.Do("SnoChannelingEffect", &t.SnoChannelingEffect, d...)
	cb.Do("Unk_2767229", &t.Unk_2767229, d...)
	cb.Do("FGizmoShowProgressBar", &t.FGizmoShowProgressBar, d...)
	cb.Do("Unk_6d9ebe1", &t.Unk_6d9ebe1, d...)
	cb.Do("Unk_5456245", &t.Unk_5456245, d...)
	cb.Do("Unk_af5815a", &t.Unk_af5815a, d...)
	cb.Do("SnoOnClickEffect", &t.SnoOnClickEffect, d...)
	cb.Do("SnoPickedUpEffect", &t.SnoPickedUpEffect, d...)
	cb.Do("SnoDropOnGroundEffect", &t.SnoDropOnGroundEffect, d...)
	cb.Do("TConditionData", &t.TConditionData, d...)
	cb.Do("SnoPowerOperator", &t.SnoPowerOperator, d...)
	cb.Do("SnoPowerOperate", &t.SnoPowerOperate, d...)
	cb.Do("SnoPowerOperatorActive", &t.SnoPowerOperatorActive, d...)
	cb.Do("SnoPowerOperateActive", &t.SnoPowerOperateActive, d...)
	cb.Do("Unk_359810e", &t.Unk_359810e, d...)
	cb.Do("NCooldown", &t.NCooldown, d...)
	cb.Do("Unk_9c8478e", &t.Unk_9c8478e, d...)
	cb.Do("Unk_d45ed2d", &t.Unk_d45ed2d, d...)
	cb.Do("Unk_f6b20b7", &t.Unk_f6b20b7, d...)
	cb.Do("Unk_54513b8", &t.Unk_54513b8, d...)
	cb.Do("Unk_fd1f378", &t.Unk_fd1f378, d...)
	cb.Do("HGizmoOperateFlavorTextMsgLabel", &t.HGizmoOperateFlavorTextMsgLabel, d...)
	cb.Do("HGizmoOperateDescriptionMsgLabel", &t.HGizmoOperateDescriptionMsgLabel, d...)
	cb.Do("FlGizmoOperateOffset", &t.FlGizmoOperateOffset, d...)
	cb.Do("Unk_ab58cd3", &t.Unk_ab58cd3, d...)
	cb.Do("Unk_91a3966", &t.Unk_91a3966, d...)
	cb.Do("HGizmoChannelingLabel", &t.HGizmoChannelingLabel, d...)
	cb.Do("Unk_4be4371", &t.Unk_4be4371, d...)
	cb.Do("ESignType", &t.ESignType, d...)
	cb.Do("SnoInteractSound", &t.SnoInteractSound, d...)
	cb.Do("TDestination", &t.TDestination, d...)
	cb.Do("SnoDisembodiedVoice", &t.SnoDisembodiedVoice, d...)
	cb.Do("ESignMaterial", &t.ESignMaterial, d...)
	cb.Do("SnoLore", &t.SnoLore, d...)
	cb.Do("SnoReputation", &t.SnoReputation, d...)
	cb.Do("HImageNotice", &t.HImageNotice, d...)
}

type RopeEventAttachPoint struct {
	THardpointLink     HardpointLink
	TTargetLocatorName DT_UINT
	ETargetType        DT_ENUM
	DwAttachedActorID  DT_UINT
}

func (t *RopeEventAttachPoint) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THardpointLink, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.TTargetLocatorName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.ETargetType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.DwAttachedActorID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+20, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *RopeEventAttachPoint) Walk(cb WalkCallback, d ...any) {
	cb.Do("THardpointLink", &t.THardpointLink, d...)
	cb.Do("TTargetLocatorName", &t.TTargetLocatorName, d...)
	cb.Do("ETargetType", &t.ETargetType, d...)
	cb.Do("DwAttachedActorID", &t.DwAttachedActorID, d...)
}

type GameTestingRTCSamplingStartMessage struct {
	THeader        RequiredMessageHeader
	SnoEffectGroup DT_SNO
	SnoWorld       DT_SNO
	SnoSubzone     DT_SNO
	SnoScene       DT_SNO
	SnoQuest       DT_SNO
	SzTileSet      DT_CHARARRAY
	SzMarker       DT_CHARARRAY
}

func (t *GameTestingRTCSamplingStartMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoEffectGroup, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.SnoWorld, r, &Options{
		Flags: 1,
		Group: 48,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SnoSubzone, r, &Options{
		Flags: 1,
		Group: 80,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.SnoScene, r, &Options{
		Flags: 1,
		Group: 33,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.SnoQuest, r, &Options{
		Flags: 1,
		Group: 31,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.SzTileSet, r, &Options{
		ArrayLength: 128,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+164, &t.SzMarker, r, &Options{
		ArrayLength: 128,
		Flags:       1,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+292, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *GameTestingRTCSamplingStartMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("SnoEffectGroup", &t.SnoEffectGroup, d...)
	cb.Do("SnoWorld", &t.SnoWorld, d...)
	cb.Do("SnoSubzone", &t.SnoSubzone, d...)
	cb.Do("SnoScene", &t.SnoScene, d...)
	cb.Do("SnoQuest", &t.SnoQuest, d...)
	cb.Do("SzTileSet", &t.SzTileSet, d...)
	cb.Do("SzMarker", &t.SzMarker, d...)
}

type EmitterPointData struct {
	// Inherits EmitterDataBase
	// Inherits PolymorphicBase
	DwType DT_UINT
	DwPad  DT_UINT
}

func (t *EmitterPointData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *EmitterPointData) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
}

type IKBoneChainBase struct {
	// Inherits PolymorphicBase
	DwType    DT_UINT
	DwPad     DT_UINT
	EIKLimb   DT_ENUM
	EIKTarget DT_ENUM
	PtIKBones DT_VARIABLEARRAY[*IKBone]
}

func (t *IKBoneChainBase) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.EIKLimb, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.EIKTarget, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.PtIKBones, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+40, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *IKBoneChainBase) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("EIKLimb", &t.EIKLimb, d...)
	cb.Do("EIKTarget", &t.EIKTarget, d...)
	cb.Do("PtIKBones", &t.PtIKBones, d...)
}

type CollisionShape struct {
	DwFlags           DT_UINT
	EType             DT_ENUM
	EMaterial         DT_ENUM
	NDegrade          DT_INT
	FlDensityFactor   DT_FLOAT
	FlExplosionFactor DT_FLOAT
	FlVelocityFactor  DT_FLOAT
	PPolytopeData     DT_VARIABLEARRAY[*PolytopeData]
	Wp1               DT_VECTOR3D
	Wp2               DT_VECTOR3D
	FlRadius          DT_FLOAT
}

func (t *CollisionShape) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.DwFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.EType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.EMaterial, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.NDegrade, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.FlDensityFactor, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.FlExplosionFactor, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.FlVelocityFactor, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.PPolytopeData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.Wp1, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+60, &t.Wp2, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.FlRadius, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+80, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *CollisionShape) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwFlags", &t.DwFlags, d...)
	cb.Do("EType", &t.EType, d...)
	cb.Do("EMaterial", &t.EMaterial, d...)
	cb.Do("NDegrade", &t.NDegrade, d...)
	cb.Do("FlDensityFactor", &t.FlDensityFactor, d...)
	cb.Do("FlExplosionFactor", &t.FlExplosionFactor, d...)
	cb.Do("FlVelocityFactor", &t.FlVelocityFactor, d...)
	cb.Do("PPolytopeData", &t.PPolytopeData, d...)
	cb.Do("Wp1", &t.Wp1, d...)
	cb.Do("Wp2", &t.Wp2, d...)
	cb.Do("FlRadius", &t.FlRadius, d...)
}

type PowerConditionIsHealthy struct {
	// Inherits PowerConditionBase
	// Inherits PolymorphicBase
	DwType   DT_UINT
	BInverse DT_INT
	DwPad    DT_UINT
	ESubject DT_ENUM
}

func (t *PowerConditionIsHealthy) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BInverse, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ESubject, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PowerConditionIsHealthy) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("BInverse", &t.BInverse, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("ESubject", &t.ESubject, d...)
}

type SharedChildFile struct {
	SzMD5 DT_CHARARRAY
}

func (t *SharedChildFile) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SzMD5, r, &Options{
		ArrayLength: 50,
		Flags:       1,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+50, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *SharedChildFile) Walk(cb WalkCallback, d ...any) {
	cb.Do("SzMD5", &t.SzMD5, d...)
}

type ScriptEventParamReputation struct {
	// Inherits ScriptEventParamBase
	// Inherits PolymorphicBase
	DwType        DT_UINT
	EParamType    DT_ENUM
	DwPad         DT_UINT
	SnoReputation DT_SNO
}

func (t *ScriptEventParamReputation) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.EParamType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SnoReputation, r, &Options{
		Flags: 1,
		Group: 105,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ScriptEventParamReputation) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("EParamType", &t.EParamType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("SnoReputation", &t.SnoReputation, d...)
}

type DebugDataRequestMessage struct {
	THeader          RequiredMessageHeader
	NType            DT_INT
	ArParams         DT_FIXEDARRAY[*DT_INT]
	ArOptionalParams DT_FIXEDARRAY[*DebugDataRequestOptionalParam]
}

func (t *DebugDataRequestMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.NType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.ArParams, r, &Options{
		ArrayLength: 2,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.ArOptionalParams, r, &Options{
		ArrayLength: 10,
		Flags:       8,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+1632, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *DebugDataRequestMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("NType", &t.NType, d...)
	cb.Do("ArParams", &t.ArParams, d...)
	cb.Do("ArOptionalParams", &t.ArOptionalParams, d...)
}

type TriggerEventHidePoIUI struct {
	// Inherits TriggerEvent
	// Inherits PolymorphicBase
	DwType          DT_UINT
	DwPad           DT_UINT
	TConditions     TriggerConditions
	FGenerated      DT_INT
	Unk_6cba752     DT_INT
	DwParentActorID DT_UINT
}

func (t *TriggerEventHidePoIUI) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.FGenerated, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_6cba752, r, &Options{Flags: 16}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.DwParentActorID, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+80, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TriggerEventHidePoIUI) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("TConditions", &t.TConditions, d...)
	cb.Do("FGenerated", &t.FGenerated, d...)
	cb.Do("Unk_6cba752", &t.Unk_6cba752, d...)
	cb.Do("DwParentActorID", &t.DwParentActorID, d...)
}

type TriggerEventShadowDuration struct {
	// Inherits TriggerEventRangedDuration
	// Inherits TriggerEvent
	// Inherits PolymorphicBase
	DwType           DT_UINT
	TConditions      TriggerConditions
	FGenerated       DT_INT
	Unk_6cba752      DT_INT
	DwParentActorID  DT_UINT
	TDuration        DT_FLOAT
	DwTriggerFlags   DT_UINT
	DwTriggerFlagsEx DT_UINT
	TCleanup         TriggerCleanup
	Unk_49e9257      DT_INT
	Unk_5490979      DT_INT
	DwPad            DT_UINT
	BShadow          DT_INT
	Unk_b34a8b4      DT_INT
}

func (t *TriggerEventShadowDuration) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.FGenerated, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_6cba752, r, &Options{Flags: 16}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.DwParentActorID, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.TDuration, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.DwTriggerFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.DwTriggerFlagsEx, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.TCleanup, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+116, &t.Unk_49e9257, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.Unk_5490979, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+124, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.BShadow, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+132, &t.Unk_b34a8b4, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+136, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TriggerEventShadowDuration) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("TConditions", &t.TConditions, d...)
	cb.Do("FGenerated", &t.FGenerated, d...)
	cb.Do("Unk_6cba752", &t.Unk_6cba752, d...)
	cb.Do("DwParentActorID", &t.DwParentActorID, d...)
	cb.Do("TDuration", &t.TDuration, d...)
	cb.Do("DwTriggerFlags", &t.DwTriggerFlags, d...)
	cb.Do("DwTriggerFlagsEx", &t.DwTriggerFlagsEx, d...)
	cb.Do("TCleanup", &t.TCleanup, d...)
	cb.Do("Unk_49e9257", &t.Unk_49e9257, d...)
	cb.Do("Unk_5490979", &t.Unk_5490979, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("BShadow", &t.BShadow, d...)
	cb.Do("Unk_b34a8b4", &t.Unk_b34a8b4, d...)
}

type ScriptFormulaInfo struct {
	TFormula DT_STRING_FORMULA
}

func (t *ScriptFormulaInfo) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.TFormula, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ScriptFormulaInfo) Walk(cb WalkCallback, d ...any) {
	cb.Do("TFormula", &t.TFormula, d...)
}

type MaterialTextureEntry struct {
	EShaderTex DT_ENUM
	TMatTex    MaterialTexture
}

func (t *MaterialTextureEntry) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.EShaderTex, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.TMatTex, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *MaterialTextureEntry) Walk(cb WalkCallback, d ...any) {
	cb.Do("EShaderTex", &t.EShaderTex, d...)
	cb.Do("TMatTex", &t.TMatTex, d...)
}

type WeaponExpertiseRank struct {
	Unk_5ec4d3d DT_UINT
}

func (t *WeaponExpertiseRank) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Unk_5ec4d3d, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+4, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *WeaponExpertiseRank) Walk(cb WalkCallback, d ...any) {
	cb.Do("Unk_5ec4d3d", &t.Unk_5ec4d3d, d...)
}

type StoryboardPlaySoundNode struct {
	// Inherits StoryboardTimePointNode
	// Inherits PolymorphicBase
	DwType   DT_UINT
	FlTime   DT_FLOAT
	DwPad    DT_UINT
	SnoSound DT_SNO
}

func (t *StoryboardPlaySoundNode) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.FlTime, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SnoSound, r, &Options{
		Flags: 1,
		Group: 40,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *StoryboardPlaySoundNode) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("FlTime", &t.FlTime, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("SnoSound", &t.SnoSound, d...)
}

type Type_219037e7 struct {
	// Inherits TriggerEventRangedDuration
	// Inherits TriggerEvent
	// Inherits PolymorphicBase
	DwType           DT_UINT
	TConditions      TriggerConditions
	FGenerated       DT_INT
	Unk_6cba752      DT_INT
	DwParentActorID  DT_UINT
	TDuration        DT_FLOAT
	DwTriggerFlags   DT_UINT
	DwTriggerFlagsEx DT_UINT
	TCleanup         TriggerCleanup
	Unk_49e9257      DT_INT
	Unk_5490979      DT_INT
	DwPad            DT_UINT
	FlNearPlane      DT_FLOAT
	FlFarPlane       DT_FLOAT
	EBlendEasing     DT_ENUM
}

func (t *Type_219037e7) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.FGenerated, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_6cba752, r, &Options{Flags: 16}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.DwParentActorID, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.TDuration, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.DwTriggerFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.DwTriggerFlagsEx, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.TCleanup, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+116, &t.Unk_49e9257, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.Unk_5490979, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+124, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.FlNearPlane, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+132, &t.FlFarPlane, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+136, &t.EBlendEasing, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+144, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_219037e7) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("TConditions", &t.TConditions, d...)
	cb.Do("FGenerated", &t.FGenerated, d...)
	cb.Do("Unk_6cba752", &t.Unk_6cba752, d...)
	cb.Do("DwParentActorID", &t.DwParentActorID, d...)
	cb.Do("TDuration", &t.TDuration, d...)
	cb.Do("DwTriggerFlags", &t.DwTriggerFlags, d...)
	cb.Do("DwTriggerFlagsEx", &t.DwTriggerFlagsEx, d...)
	cb.Do("TCleanup", &t.TCleanup, d...)
	cb.Do("Unk_49e9257", &t.Unk_49e9257, d...)
	cb.Do("Unk_5490979", &t.Unk_5490979, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("FlNearPlane", &t.FlNearPlane, d...)
	cb.Do("FlFarPlane", &t.FlFarPlane, d...)
	cb.Do("EBlendEasing", &t.EBlendEasing, d...)
}

type Type_21df8be8 struct {
	THeader   RequiredMessageHeader
	BComplete DT_INT
}

func (t *Type_21df8be8) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BComplete, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+20, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_21df8be8) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("BComplete", &t.BComplete, d...)
}

type TriggerEventAddObject struct {
	// Inherits TriggerEventRangedDuration
	// Inherits TriggerEvent
	// Inherits PolymorphicBase
	DwType                    DT_UINT
	TConditions               TriggerConditions
	FGenerated                DT_INT
	Unk_6cba752               DT_INT
	DwParentActorID           DT_UINT
	TDuration                 DT_FLOAT
	DwTriggerFlags            DT_UINT
	DwTriggerFlagsEx          DT_UINT
	TCleanup                  TriggerCleanup
	Unk_49e9257               DT_INT
	Unk_5490979               DT_INT
	DwPad                     DT_UINT
	Unk_85269a4               DT_INT
	DwActorID                 DT_UINT
	Snoname                   DT_SNO_NAME
	DwID                      DT_UINT
	THardpointLinks           DT_FIXEDARRAY[*HardpointLink]
	Unk_e7c25e0               DT_ENUM
	SnoPowerEffectParam       DT_SNO
	Unk_beaacd1               DT_ENUM
	Unk_af58166               DT_FLOAT
	Unk_3ed00d7               DT_FLOAT
	DwSeed                    DT_UINT
	FBillboard                DT_INT
	EAddType                  DT_ENUM
	FDoNotParent              DT_INT
	FKeepOriginal             DT_INT
	FEnableMovement           DT_INT
	Unk_773852b               DT_INT
	Unk_62ab747               DT_INT
	Unk_cb43646               DT_INT
	FRandomLook               DT_INT
	TLookLink                 LookLink
	FOverrideActorVariant     DT_INT
	EVariantTypeOverride      DT_ENUM
	SnoAnimSetOverride        DT_SNO
	SnoPlayerAnimSetOverrides DT_VARIABLEARRAY[*PlayerAnimSetOverride]
	DwSegmentsStep            DT_UINT
	DwShaderMapOverride       DT_UINT
	NLocalPlayerIndex         DT_INT
	FlScale                   DT_FLOAT
	SzSpawnLocatorName        DT_UINT
	VecScalar                 DT_VECTOR2D
	Transform                 PRTransform
	TEffectGroupHardpointLink HardpointLink
	Unk_c7fa18a               DT_RANGE[*DT_FLOAT]
	IdRActorAttachment        DT_INT
	NPermIndex                DT_INT
	SnoCopyFromMarkerSet      DT_SNO
	NCopyFromMarkerID         DT_INT
	NMaxAttachments           DT_UINT
	FlBlendInTime             DT_FLOAT
	FlBlendOutTime            DT_FLOAT
	NPriority                 DT_INT
	TNPCComponentInstanceData NPCComponentInstanceData
	PtLightInstanceData       DT_VARIABLEARRAY[*LightInstanceData]
}

func (t *TriggerEventAddObject) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.FGenerated, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_6cba752, r, &Options{Flags: 16}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.DwParentActorID, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.TDuration, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.DwTriggerFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.DwTriggerFlagsEx, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.TCleanup, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+116, &t.Unk_49e9257, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.Unk_5490979, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+124, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.Unk_85269a4, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+132, &t.DwActorID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+136, &t.Snoname, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+144, &t.DwID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+148, &t.THardpointLinks, r, &Options{
		ArrayLength: 2,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+164, &t.Unk_e7c25e0, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+168, &t.SnoPowerEffectParam, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+172, &t.Unk_beaacd1, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+176, &t.Unk_af58166, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+180, &t.Unk_3ed00d7, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+184, &t.DwSeed, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+188, &t.FBillboard, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+192, &t.EAddType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+196, &t.FDoNotParent, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+200, &t.FKeepOriginal, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+204, &t.FEnableMovement, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+208, &t.Unk_773852b, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+212, &t.Unk_62ab747, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+216, &t.Unk_cb43646, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+220, &t.FRandomLook, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+224, &t.TLookLink, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+228, &t.FOverrideActorVariant, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+232, &t.EVariantTypeOverride, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+236, &t.SnoAnimSetOverride, r, &Options{
		Flags: 1,
		Group: 8,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+240, &t.SnoPlayerAnimSetOverrides, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+256, &t.DwSegmentsStep, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+260, &t.DwShaderMapOverride, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+264, &t.NLocalPlayerIndex, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+268, &t.FlScale, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+272, &t.SzSpawnLocatorName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+276, &t.VecScalar, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+284, &t.Transform, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+312, &t.TEffectGroupHardpointLink, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+320, &t.Unk_c7fa18a, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+328, &t.IdRActorAttachment, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+332, &t.NPermIndex, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+336, &t.SnoCopyFromMarkerSet, r, &Options{
		Flags: 513,
		Group: 24,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+340, &t.NCopyFromMarkerID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+344, &t.NMaxAttachments, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+348, &t.FlBlendInTime, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+352, &t.FlBlendOutTime, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+356, &t.NPriority, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+360, &t.TNPCComponentInstanceData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+400, &t.PtLightInstanceData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+416, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TriggerEventAddObject) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("TConditions", &t.TConditions, d...)
	cb.Do("FGenerated", &t.FGenerated, d...)
	cb.Do("Unk_6cba752", &t.Unk_6cba752, d...)
	cb.Do("DwParentActorID", &t.DwParentActorID, d...)
	cb.Do("TDuration", &t.TDuration, d...)
	cb.Do("DwTriggerFlags", &t.DwTriggerFlags, d...)
	cb.Do("DwTriggerFlagsEx", &t.DwTriggerFlagsEx, d...)
	cb.Do("TCleanup", &t.TCleanup, d...)
	cb.Do("Unk_49e9257", &t.Unk_49e9257, d...)
	cb.Do("Unk_5490979", &t.Unk_5490979, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("Unk_85269a4", &t.Unk_85269a4, d...)
	cb.Do("DwActorID", &t.DwActorID, d...)
	cb.Do("Snoname", &t.Snoname, d...)
	cb.Do("DwID", &t.DwID, d...)
	cb.Do("THardpointLinks", &t.THardpointLinks, d...)
	cb.Do("Unk_e7c25e0", &t.Unk_e7c25e0, d...)
	cb.Do("SnoPowerEffectParam", &t.SnoPowerEffectParam, d...)
	cb.Do("Unk_beaacd1", &t.Unk_beaacd1, d...)
	cb.Do("Unk_af58166", &t.Unk_af58166, d...)
	cb.Do("Unk_3ed00d7", &t.Unk_3ed00d7, d...)
	cb.Do("DwSeed", &t.DwSeed, d...)
	cb.Do("FBillboard", &t.FBillboard, d...)
	cb.Do("EAddType", &t.EAddType, d...)
	cb.Do("FDoNotParent", &t.FDoNotParent, d...)
	cb.Do("FKeepOriginal", &t.FKeepOriginal, d...)
	cb.Do("FEnableMovement", &t.FEnableMovement, d...)
	cb.Do("Unk_773852b", &t.Unk_773852b, d...)
	cb.Do("Unk_62ab747", &t.Unk_62ab747, d...)
	cb.Do("Unk_cb43646", &t.Unk_cb43646, d...)
	cb.Do("FRandomLook", &t.FRandomLook, d...)
	cb.Do("TLookLink", &t.TLookLink, d...)
	cb.Do("FOverrideActorVariant", &t.FOverrideActorVariant, d...)
	cb.Do("EVariantTypeOverride", &t.EVariantTypeOverride, d...)
	cb.Do("SnoAnimSetOverride", &t.SnoAnimSetOverride, d...)
	cb.Do("SnoPlayerAnimSetOverrides", &t.SnoPlayerAnimSetOverrides, d...)
	cb.Do("DwSegmentsStep", &t.DwSegmentsStep, d...)
	cb.Do("DwShaderMapOverride", &t.DwShaderMapOverride, d...)
	cb.Do("NLocalPlayerIndex", &t.NLocalPlayerIndex, d...)
	cb.Do("FlScale", &t.FlScale, d...)
	cb.Do("SzSpawnLocatorName", &t.SzSpawnLocatorName, d...)
	cb.Do("VecScalar", &t.VecScalar, d...)
	cb.Do("Transform", &t.Transform, d...)
	cb.Do("TEffectGroupHardpointLink", &t.TEffectGroupHardpointLink, d...)
	cb.Do("Unk_c7fa18a", &t.Unk_c7fa18a, d...)
	cb.Do("IdRActorAttachment", &t.IdRActorAttachment, d...)
	cb.Do("NPermIndex", &t.NPermIndex, d...)
	cb.Do("SnoCopyFromMarkerSet", &t.SnoCopyFromMarkerSet, d...)
	cb.Do("NCopyFromMarkerID", &t.NCopyFromMarkerID, d...)
	cb.Do("NMaxAttachments", &t.NMaxAttachments, d...)
	cb.Do("FlBlendInTime", &t.FlBlendInTime, d...)
	cb.Do("FlBlendOutTime", &t.FlBlendOutTime, d...)
	cb.Do("NPriority", &t.NPriority, d...)
	cb.Do("TNPCComponentInstanceData", &t.TNPCComponentInstanceData, d...)
	cb.Do("PtLightInstanceData", &t.PtLightInstanceData, d...)
}

type TriggerEventDeleteObject struct {
	// Inherits TriggerEvent
	// Inherits PolymorphicBase
	DwType           DT_UINT
	DwPad            DT_UINT
	TConditions      TriggerConditions
	FGenerated       DT_INT
	Unk_6cba752      DT_INT
	DwParentActorID  DT_UINT
	FDeleteFromOwner DT_INT
	DwActorID        DT_UINT
	DwID             DT_UINT
}

func (t *TriggerEventDeleteObject) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.FGenerated, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_6cba752, r, &Options{Flags: 16}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.DwParentActorID, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.FDeleteFromOwner, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.DwActorID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.DwID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+96, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TriggerEventDeleteObject) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("TConditions", &t.TConditions, d...)
	cb.Do("FGenerated", &t.FGenerated, d...)
	cb.Do("Unk_6cba752", &t.Unk_6cba752, d...)
	cb.Do("DwParentActorID", &t.DwParentActorID, d...)
	cb.Do("FDeleteFromOwner", &t.FDeleteFromOwner, d...)
	cb.Do("DwActorID", &t.DwActorID, d...)
	cb.Do("DwID", &t.DwID, d...)
}

type NitSettings struct {
	FlNitMin   DT_FLOAT
	FlNitMax   DT_FLOAT
	RgbaColors DT_FIXEDARRAY[*DT_RGBACOLOR]
}

func (t *NitSettings) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.FlNitMin, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.FlNitMax, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.RgbaColors, r, &Options{
		ArrayLength: 7,
		Flags:       1,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+36, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *NitSettings) Walk(cb WalkCallback, d ...any) {
	cb.Do("FlNitMin", &t.FlNitMin, d...)
	cb.Do("FlNitMax", &t.FlNitMax, d...)
	cb.Do("RgbaColors", &t.RgbaColors, d...)
}

type PowerPhaseOneShot struct {
	// Inherits PowerPhaseBase
	// Inherits PolymorphicBase
	DwType       DT_UINT
	DwPad        DT_UINT
	TPhaseName   DT_UINT
	ArPhaseJumps DT_POLYMORPHIC_VARIABLEARRAY[*DT_INT64]
	Unk_d0d932b  DT_INT
	Unk_9a8200e  DT_INT
	Unk_4d5c43f  DT_INT
}

func (t *PowerPhaseOneShot) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TPhaseName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ArPhaseJumps, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.Unk_d0d932b, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.Unk_9a8200e, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.Unk_4d5c43f, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+64, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PowerPhaseOneShot) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("TPhaseName", &t.TPhaseName, d...)
	cb.Do("ArPhaseJumps", &t.ArPhaseJumps, d...)
	cb.Do("Unk_d0d932b", &t.Unk_d0d932b, d...)
	cb.Do("Unk_9a8200e", &t.Unk_9a8200e, d...)
	cb.Do("Unk_4d5c43f", &t.Unk_4d5c43f, d...)
}

type TownPortalCosmeticDefinition struct {
	EClassRestriction DT_ENUM
	Unk_a2e2035       DT_SNO
	Unk_f3f8efd       DT_SNO
	Unk_74385ed       DT_SNO
	Unk_5da4833       DT_SNO
	Unk_a79a75b       DT_SNO
	Unk_72c02e0       DT_SNO
	ArCastingAnimSets DT_FIXEDARRAY[*DT_SNO]
	HIconImage        DT_UINT
}

func (t *TownPortalCosmeticDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.EClassRestriction, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.Unk_a2e2035, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_f3f8efd, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.Unk_74385ed, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_5da4833, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.Unk_a79a75b, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.Unk_72c02e0, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.ArCastingAnimSets, r, &Options{
		ArrayLength: 5,
		Flags:       1,
		Group:       8,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.HIconImage, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+60, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TownPortalCosmeticDefinition) Walk(cb WalkCallback, d ...any) {
	cb.Do("EClassRestriction", &t.EClassRestriction, d...)
	cb.Do("Unk_a2e2035", &t.Unk_a2e2035, d...)
	cb.Do("Unk_f3f8efd", &t.Unk_f3f8efd, d...)
	cb.Do("Unk_74385ed", &t.Unk_74385ed, d...)
	cb.Do("Unk_5da4833", &t.Unk_5da4833, d...)
	cb.Do("Unk_a79a75b", &t.Unk_a79a75b, d...)
	cb.Do("Unk_72c02e0", &t.Unk_72c02e0, d...)
	cb.Do("ArCastingAnimSets", &t.ArCastingAnimSets, d...)
	cb.Do("HIconImage", &t.HIconImage, d...)
}

type MountProfileDefinition struct {
	SnoCarrotPowerDefault DT_SNO
	EMountType            DT_ENUM
}

func (t *MountProfileDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.SnoCarrotPowerDefault, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.EMountType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *MountProfileDefinition) Walk(cb WalkCallback, d ...any) {
	cb.Do("SnoCarrotPowerDefault", &t.SnoCarrotPowerDefault, d...)
	cb.Do("EMountType", &t.EMountType, d...)
}

type SocialWheelSlotBinding struct {
	ActionType      DT_ENUM
	QuickActionType DT_ENUM
	SnoEmote        DT_SNO
	SnoConsumable   DT_SNO
}

func (t *SocialWheelSlotBinding) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.ActionType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.QuickActionType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.SnoEmote, r, &Options{
		Flags: 1,
		Group: 118,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.SnoConsumable, r, &Options{
		Flags: 1,
		Group: 73,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *SocialWheelSlotBinding) Walk(cb WalkCallback, d ...any) {
	cb.Do("ActionType", &t.ActionType, d...)
	cb.Do("QuickActionType", &t.QuickActionType, d...)
	cb.Do("SnoEmote", &t.SnoEmote, d...)
	cb.Do("SnoConsumable", &t.SnoConsumable, d...)
}

type PlayerClassDruidData struct {
	DwUnlockLevel  DT_UINT
	SnoUnlockQuest DT_SNO
	TPassiveData   ClassPassiveSkillData
}

func (t *PlayerClassDruidData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.DwUnlockLevel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.SnoUnlockQuest, r, &Options{
		Flags: 1,
		Group: 31,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.TPassiveData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+40, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PlayerClassDruidData) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwUnlockLevel", &t.DwUnlockLevel, d...)
	cb.Do("SnoUnlockQuest", &t.SnoUnlockQuest, d...)
	cb.Do("TPassiveData", &t.TPassiveData, d...)
}

type EffectGroupScaleXKeyData struct {
	// Inherits EffectGroupKeyData
	// Inherits PolymorphicBase
	DwType     DT_UINT
	DwPad      DT_UINT
	ArKeyItems DT_VARIABLEARRAY[*EffectGroupKey]
}

func (t *EffectGroupScaleXKeyData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.ArKeyItems, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *EffectGroupScaleXKeyData) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("ArKeyItems", &t.ArKeyItems, d...)
}

type TranslationCurve struct {
	PtKeysComp DT_VARIABLEARRAY[*DT_BYTE]
}

func (t *TranslationCurve) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.PtKeysComp, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TranslationCurve) Walk(cb WalkCallback, d ...any) {
	cb.Do("PtKeysComp", &t.PtKeysComp, d...)
}

type TriggerEventActorMovement struct {
	// Inherits TriggerEventRangedDuration
	// Inherits TriggerEvent
	// Inherits PolymorphicBase
	DwType                     DT_UINT
	TConditions                TriggerConditions
	FGenerated                 DT_INT
	Unk_6cba752                DT_INT
	DwParentActorID            DT_UINT
	TDuration                  DT_FLOAT
	DwTriggerFlags             DT_UINT
	DwTriggerFlagsEx           DT_UINT
	TCleanup                   TriggerCleanup
	Unk_49e9257                DT_INT
	Unk_5490979                DT_INT
	DwPad                      DT_UINT
	SzLocatorName              DT_UINT
	DwActorID                  DT_UINT
	EMoveToType                DT_ENUM
	EOrientationMode           DT_ENUM
	ELookAtTargetType          DT_ENUM
	Unk_6101673                DT_UINT
	THardpointLinkLookAtTarget HardpointLink
	DwLookAtTargetID           DT_UINT
	EBlendEasing               DT_ENUM
	EMoveRate                  DT_ENUM
	EDynamicMovementSpeed      DT_ENUM
	FUseDynamicMovement        DT_INT
	Unk_17909b9                DT_INT
	THardpointLinkTarget       HardpointLink
	DwTargetID                 DT_UINT
	Unk_23237e1                DT_INT
	Unk_f1b6afc                DT_FLOAT
}

func (t *TriggerEventActorMovement) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.FGenerated, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_6cba752, r, &Options{Flags: 16}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.DwParentActorID, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.TDuration, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.DwTriggerFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.DwTriggerFlagsEx, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.TCleanup, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+116, &t.Unk_49e9257, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.Unk_5490979, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+124, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.SzLocatorName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+132, &t.DwActorID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+136, &t.EMoveToType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+140, &t.EOrientationMode, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+144, &t.ELookAtTargetType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+148, &t.Unk_6101673, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+152, &t.THardpointLinkLookAtTarget, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+160, &t.DwLookAtTargetID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+164, &t.EBlendEasing, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+168, &t.EMoveRate, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+172, &t.EDynamicMovementSpeed, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+176, &t.FUseDynamicMovement, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+180, &t.Unk_17909b9, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+184, &t.THardpointLinkTarget, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+192, &t.DwTargetID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+196, &t.Unk_23237e1, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+200, &t.Unk_f1b6afc, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+208, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TriggerEventActorMovement) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("TConditions", &t.TConditions, d...)
	cb.Do("FGenerated", &t.FGenerated, d...)
	cb.Do("Unk_6cba752", &t.Unk_6cba752, d...)
	cb.Do("DwParentActorID", &t.DwParentActorID, d...)
	cb.Do("TDuration", &t.TDuration, d...)
	cb.Do("DwTriggerFlags", &t.DwTriggerFlags, d...)
	cb.Do("DwTriggerFlagsEx", &t.DwTriggerFlagsEx, d...)
	cb.Do("TCleanup", &t.TCleanup, d...)
	cb.Do("Unk_49e9257", &t.Unk_49e9257, d...)
	cb.Do("Unk_5490979", &t.Unk_5490979, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("SzLocatorName", &t.SzLocatorName, d...)
	cb.Do("DwActorID", &t.DwActorID, d...)
	cb.Do("EMoveToType", &t.EMoveToType, d...)
	cb.Do("EOrientationMode", &t.EOrientationMode, d...)
	cb.Do("ELookAtTargetType", &t.ELookAtTargetType, d...)
	cb.Do("Unk_6101673", &t.Unk_6101673, d...)
	cb.Do("THardpointLinkLookAtTarget", &t.THardpointLinkLookAtTarget, d...)
	cb.Do("DwLookAtTargetID", &t.DwLookAtTargetID, d...)
	cb.Do("EBlendEasing", &t.EBlendEasing, d...)
	cb.Do("EMoveRate", &t.EMoveRate, d...)
	cb.Do("EDynamicMovementSpeed", &t.EDynamicMovementSpeed, d...)
	cb.Do("FUseDynamicMovement", &t.FUseDynamicMovement, d...)
	cb.Do("Unk_17909b9", &t.Unk_17909b9, d...)
	cb.Do("THardpointLinkTarget", &t.THardpointLinkTarget, d...)
	cb.Do("DwTargetID", &t.DwTargetID, d...)
	cb.Do("Unk_23237e1", &t.Unk_23237e1, d...)
	cb.Do("Unk_f1b6afc", &t.Unk_f1b6afc, d...)
}

type MarkerBaseGizmoData struct {
	FQuestRestricted     DT_INT
	FGizmoStartsDisabled DT_INT
}

func (t *MarkerBaseGizmoData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.FQuestRestricted, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.FGizmoStartsDisabled, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *MarkerBaseGizmoData) Walk(cb WalkCallback, d ...any) {
	cb.Do("FQuestRestricted", &t.FQuestRestricted, d...)
	cb.Do("FGizmoStartsDisabled", &t.FGizmoStartsDisabled, d...)
}

type DebugEventLogMessage struct {
	THeader       RequiredMessageHeader
	SzLogString   DT_CHARARRAY
	Unk_a23ac9b   DT_INT64
	NCommandFrame DT_INT
	AMetaData     DT_FIXEDARRAY[*DebugEventLogMetaData]
	Ann           DT_OPTIONAL[*DT_ACD_NETWORK_NAME]
}

func (t *DebugEventLogMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SzLogString, r, &Options{
		ArrayLength: 1000,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1016, &t.Unk_a23ac9b, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1024, &t.NCommandFrame, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1028, &t.AMetaData, r, &Options{
		ArrayLength: 128,
		Flags:       8,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+13320, &t.Ann, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+13336, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *DebugEventLogMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("SzLogString", &t.SzLogString, d...)
	cb.Do("Unk_a23ac9b", &t.Unk_a23ac9b, d...)
	cb.Do("NCommandFrame", &t.NCommandFrame, d...)
	cb.Do("AMetaData", &t.AMetaData, d...)
	cb.Do("Ann", &t.Ann, d...)
}

type StaticLoadingImages struct {
	ArExteriorImages DT_VARIABLEARRAY[*DT_SNO]
	ArDungeonImages  DT_VARIABLEARRAY[*DT_SNO]
}

func (t *StaticLoadingImages) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.ArExteriorImages, r, &Options{
		Flags: 513,
		Group: 44,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.ArDungeonImages, r, &Options{
		Flags: 513,
		Group: 44,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *StaticLoadingImages) Walk(cb WalkCallback, d ...any) {
	cb.Do("ArExteriorImages", &t.ArExteriorImages, d...)
	cb.Do("ArDungeonImages", &t.ArDungeonImages, d...)
}

type PrefetchSubzoneEntranceDataMessage struct {
	THeader       RequiredMessageHeader
	SnoSubzone    DT_SNO
	UEntranceGUID DT_UINT
}

func (t *PrefetchSubzoneEntranceDataMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoSubzone, r, &Options{
		Flags: 1,
		Group: 80,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.UEntranceGUID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PrefetchSubzoneEntranceDataMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("SnoSubzone", &t.SnoSubzone, d...)
	cb.Do("UEntranceGUID", &t.UEntranceGUID, d...)
}

type ABTestDefinition struct {
	ArVariantKeys DT_VARIABLEARRAY[*StringWrapper]
}

func (t *ABTestDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.ArVariantKeys, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ABTestDefinition) Walk(cb WalkCallback, d ...any) {
	cb.Do("ArVariantKeys", &t.ArVariantKeys, d...)
}

type PrefetchActorMessageEntry struct {
	Ann               DT_ACD_NETWORK_NAME
	SnoActor          DT_SNO
	Unk_a61d97        DT_INT
	Unk_39ae9c2       DT_FIXEDARRAY[*DT_SNO_NAME]
	TBaseACDInfo      DT_OPTIONAL[*BaseACDInfo]
	TPlayerACDInfo    DT_OPTIONAL[*PlayerACDInfo]
	TMountACDInfo     DT_OPTIONAL[*MountACDInfo]
	TMonsterACDInfo   DT_OPTIONAL[*MonsterACDInfo]
	TNPCACDInfo       DT_OPTIONAL[*NPCACDInfo]
	EActorGender      DT_OPTIONAL[*DT_ENUM]
	EWeaponClass      DT_OPTIONAL[*DT_ENUM]
	EActorVariantType DT_OPTIONAL[*DT_ENUM]
}

func (t *PrefetchActorMessageEntry) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Ann, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.SnoActor, r, &Options{
		Flags: 1,
		Group: 1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.Unk_a61d97, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_39ae9c2, r, &Options{
		ArrayLength: 32,
		Flags:       8,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+276, &t.TBaseACDInfo, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+288, &t.TPlayerACDInfo, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1176, &t.TMountACDInfo, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1196, &t.TMonsterACDInfo, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1256, &t.TNPCACDInfo, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1284, &t.EActorGender, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1292, &t.EWeaponClass, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1300, &t.EActorVariantType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+1308, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PrefetchActorMessageEntry) Walk(cb WalkCallback, d ...any) {
	cb.Do("Ann", &t.Ann, d...)
	cb.Do("SnoActor", &t.SnoActor, d...)
	cb.Do("Unk_a61d97", &t.Unk_a61d97, d...)
	cb.Do("Unk_39ae9c2", &t.Unk_39ae9c2, d...)
	cb.Do("TBaseACDInfo", &t.TBaseACDInfo, d...)
	cb.Do("TPlayerACDInfo", &t.TPlayerACDInfo, d...)
	cb.Do("TMountACDInfo", &t.TMountACDInfo, d...)
	cb.Do("TMonsterACDInfo", &t.TMonsterACDInfo, d...)
	cb.Do("TNPCACDInfo", &t.TNPCACDInfo, d...)
	cb.Do("EActorGender", &t.EActorGender, d...)
	cb.Do("EWeaponClass", &t.EWeaponClass, d...)
	cb.Do("EActorVariantType", &t.EActorVariantType, d...)
}

type DebugProjectileRaycastMessage struct {
	THeader       RequiredMessageHeader
	Ann           DT_ACD_NETWORK_NAME
	IdSWorld      DT_SHARED_SERVER_DATA_ID
	WpStart       DT_VECTOR3D
	WpEnd         DT_VECTOR3D
	BHitSomething DT_INT
	WpPosition    DT_VECTOR3D
	WpNormal      DT_VECTOR3D
	Unk_1c414e5   DT_SNO
}

func (t *DebugProjectileRaycastMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Ann, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.IdSWorld, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.WpStart, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.WpEnd, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.BHitSomething, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+60, &t.WpPosition, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.WpNormal, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.Unk_1c414e5, r, &Options{
		Flags: 1,
		Group: 9,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+88, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *DebugProjectileRaycastMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("Ann", &t.Ann, d...)
	cb.Do("IdSWorld", &t.IdSWorld, d...)
	cb.Do("WpStart", &t.WpStart, d...)
	cb.Do("WpEnd", &t.WpEnd, d...)
	cb.Do("BHitSomething", &t.BHitSomething, d...)
	cb.Do("WpPosition", &t.WpPosition, d...)
	cb.Do("WpNormal", &t.WpNormal, d...)
	cb.Do("Unk_1c414e5", &t.Unk_1c414e5, d...)
}

type Type_245740e6 struct {
	RgbaCellsBaseColor     DT_RGBACOLOR
	RgbaCellsDeltaColor    DT_RGBACOLOR
	RgbaAltCellsBaseColor  DT_RGBACOLOR
	RgbaAltCellsDeltaColor DT_RGBACOLOR
	RgbaBorderBlockedColor DT_RGBACOLOR
	RgbaBorderTooHighColor DT_RGBACOLOR
	FlSlopeAngleValue      DT_FLOAT
	RgbaSlopeColor         DT_RGBACOLOR
}

func (t *Type_245740e6) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.RgbaCellsBaseColor, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.RgbaCellsDeltaColor, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.RgbaAltCellsBaseColor, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.RgbaAltCellsDeltaColor, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.RgbaBorderBlockedColor, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.RgbaBorderTooHighColor, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.FlSlopeAngleValue, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.RgbaSlopeColor, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_245740e6) Walk(cb WalkCallback, d ...any) {
	cb.Do("RgbaCellsBaseColor", &t.RgbaCellsBaseColor, d...)
	cb.Do("RgbaCellsDeltaColor", &t.RgbaCellsDeltaColor, d...)
	cb.Do("RgbaAltCellsBaseColor", &t.RgbaAltCellsBaseColor, d...)
	cb.Do("RgbaAltCellsDeltaColor", &t.RgbaAltCellsDeltaColor, d...)
	cb.Do("RgbaBorderBlockedColor", &t.RgbaBorderBlockedColor, d...)
	cb.Do("RgbaBorderTooHighColor", &t.RgbaBorderTooHighColor, d...)
	cb.Do("FlSlopeAngleValue", &t.FlSlopeAngleValue, d...)
	cb.Do("RgbaSlopeColor", &t.RgbaSlopeColor, d...)
}

type AnimTangent struct {
	VNegXAxis DT_VECTOR2D
	VNegYAxis DT_VECTOR2D
	VNegZAxis DT_VECTOR2D
	VPosXAxis DT_VECTOR2D
	VPosYAxis DT_VECTOR2D
	VPosZAxis DT_VECTOR2D
}

func (t *AnimTangent) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.VNegXAxis, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.VNegYAxis, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.VNegZAxis, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.VPosXAxis, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.VPosYAxis, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.VPosZAxis, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *AnimTangent) Walk(cb WalkCallback, d ...any) {
	cb.Do("VNegXAxis", &t.VNegXAxis, d...)
	cb.Do("VNegYAxis", &t.VNegYAxis, d...)
	cb.Do("VNegZAxis", &t.VNegZAxis, d...)
	cb.Do("VPosXAxis", &t.VPosXAxis, d...)
	cb.Do("VPosYAxis", &t.VPosYAxis, d...)
	cb.Do("VPosZAxis", &t.VPosZAxis, d...)
}

type ShaderMapDefinitionOptionalFieldMapDefaults struct {
	SnoMinDefault                    DT_SNO
	SnoMedDefault                    DT_SNO
	SnoHighDefault                   DT_SNO
	SnoHighlight                     DT_SNO
	Unk_c1379cf                      DT_SNO
	Unk_eb1288f                      DT_SNO
	SnoLootOverlay                   DT_SNO
	SnoStencilLootSelectable         DT_SNO
	SnoTriangleOverlay               DT_SNO
	SnoDepthComplexity               DT_SNO
	SnoTexelDensity                  DT_SNO
	SnoOccluded                      DT_SNO
	SnoDepth                         DT_SNO
	SnoCookie                        DT_SNO
	SnoUIRActor                      DT_SNO
	SnoFaded                         DT_SNO
	SnoFur                           DT_SNO
	SnoPowerCenters                  DT_SNO
	Unk_a2d779a                      DT_SNO
	Unk_62b01b3                      DT_SNO
	Unk_fda1e28                      DT_SNO
	Unk_8857547                      DT_SNO
	Unk_57fb208                      DT_SNO
	Unk_279eec9                      DT_SNO
	Unk_f742b8a                      DT_SNO
	Unk_259e646                      DT_SNO
	Unk_a90ec3a                      DT_SNO
	Unk_78b28fb                      DT_SNO
	SnoShaderShowTranslateWalkShader DT_SNO
	SnoShaderShowTranslateWallShader DT_SNO
	Unk_65c301c                      DT_SNO
	Unk_edc70d0                      DT_SNO
	Unk_bd6ad91                      DT_SNO
	Unk_8d0ea52                      DT_SNO
	Unk_fcdf27b                      DT_SNO
	Unk_6867f0f                      DT_SNO
	Unk_380bbd0                      DT_SNO
	Unk_7af891                       DT_SNO
	SnoInfluenceSim                  DT_SNO
	Unk_8c6cbe4                      DT_SNO
	Unk_e9a8598                      DT_SNO
	Unk_b94c259                      DT_SNO
	Unk_88eff1a                      DT_SNO
	Unk_679d69f                      DT_SNO
	Unk_2aee7b3                      DT_SNO
	Unk_fa92474                      DT_SNO
	Unk_ca36135                      DT_SNO
	Unk_99d9df6                      DT_SNO
	Unk_abed88                       DT_SNO
	SnoClosureOuter                  DT_SNO
	Unk_1e187d                       DT_SNO
	Unk_d18553e                      DT_SNO
}

func (t *ShaderMapDefinitionOptionalFieldMapDefaults) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoMinDefault, r, &Options{
		Flags: 1,
		Group: 37,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.SnoMedDefault, r, &Options{
		Flags: 1,
		Group: 37,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.SnoHighDefault, r, &Options{
		Flags: 1,
		Group: 37,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.SnoHighlight, r, &Options{
		Flags: 1,
		Group: 37,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_c1379cf, r, &Options{
		Flags: 1,
		Group: 37,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.Unk_eb1288f, r, &Options{
		Flags: 1,
		Group: 37,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SnoLootOverlay, r, &Options{
		Flags: 1,
		Group: 37,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.SnoStencilLootSelectable, r, &Options{
		Flags: 1,
		Group: 37,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.SnoTriangleOverlay, r, &Options{
		Flags: 1,
		Group: 37,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.SnoDepthComplexity, r, &Options{
		Flags: 1,
		Group: 37,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.SnoTexelDensity, r, &Options{
		Flags: 1,
		Group: 37,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.SnoOccluded, r, &Options{
		Flags: 1,
		Group: 37,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.SnoDepth, r, &Options{
		Flags: 1,
		Group: 37,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.SnoCookie, r, &Options{
		Flags: 1,
		Group: 37,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.SnoUIRActor, r, &Options{
		Flags: 1,
		Group: 37,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+60, &t.SnoFaded, r, &Options{
		Flags: 1,
		Group: 37,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.SnoFur, r, &Options{
		Flags: 1,
		Group: 37,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.SnoPowerCenters, r, &Options{
		Flags: 1,
		Group: 37,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_a2d779a, r, &Options{
		Flags: 1,
		Group: 37,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.Unk_62b01b3, r, &Options{
		Flags: 1,
		Group: 37,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.Unk_fda1e28, r, &Options{
		Flags: 1,
		Group: 37,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.Unk_8857547, r, &Options{
		Flags: 1,
		Group: 37,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.Unk_57fb208, r, &Options{
		Flags: 1,
		Group: 37,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.Unk_279eec9, r, &Options{
		Flags: 1,
		Group: 37,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.Unk_f742b8a, r, &Options{
		Flags: 1,
		Group: 37,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+100, &t.Unk_259e646, r, &Options{
		Flags: 1,
		Group: 37,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+104, &t.Unk_a90ec3a, r, &Options{
		Flags: 1,
		Group: 37,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+108, &t.Unk_78b28fb, r, &Options{
		Flags: 1,
		Group: 37,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.SnoShaderShowTranslateWalkShader, r, &Options{
		Flags: 1,
		Group: 37,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+116, &t.SnoShaderShowTranslateWallShader, r, &Options{
		Flags: 1,
		Group: 37,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.Unk_65c301c, r, &Options{
		Flags: 1,
		Group: 37,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+124, &t.Unk_edc70d0, r, &Options{
		Flags: 1,
		Group: 37,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.Unk_bd6ad91, r, &Options{
		Flags: 1,
		Group: 37,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+132, &t.Unk_8d0ea52, r, &Options{
		Flags: 1,
		Group: 37,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+136, &t.Unk_fcdf27b, r, &Options{
		Flags: 1,
		Group: 37,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+140, &t.Unk_6867f0f, r, &Options{
		Flags: 1,
		Group: 37,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+144, &t.Unk_380bbd0, r, &Options{
		Flags: 1,
		Group: 37,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+148, &t.Unk_7af891, r, &Options{
		Flags: 1,
		Group: 37,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+152, &t.SnoInfluenceSim, r, &Options{
		Flags: 1,
		Group: 37,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+156, &t.Unk_8c6cbe4, r, &Options{
		Flags: 1,
		Group: 37,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+160, &t.Unk_e9a8598, r, &Options{
		Flags: 1,
		Group: 37,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+164, &t.Unk_b94c259, r, &Options{
		Flags: 1,
		Group: 37,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+168, &t.Unk_88eff1a, r, &Options{
		Flags: 1,
		Group: 37,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+172, &t.Unk_679d69f, r, &Options{
		Flags: 1,
		Group: 37,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+176, &t.Unk_2aee7b3, r, &Options{
		Flags: 1,
		Group: 37,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+180, &t.Unk_fa92474, r, &Options{
		Flags: 1,
		Group: 37,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+184, &t.Unk_ca36135, r, &Options{
		Flags: 1,
		Group: 37,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+188, &t.Unk_99d9df6, r, &Options{
		Flags: 1,
		Group: 37,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+192, &t.Unk_abed88, r, &Options{
		Flags: 1,
		Group: 37,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+196, &t.SnoClosureOuter, r, &Options{
		Flags: 1,
		Group: 37,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+200, &t.Unk_1e187d, r, &Options{
		Flags: 1,
		Group: 37,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+204, &t.Unk_d18553e, r, &Options{
		Flags: 1,
		Group: 37,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+208, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ShaderMapDefinitionOptionalFieldMapDefaults) Walk(cb WalkCallback, d ...any) {
	cb.Do("SnoMinDefault", &t.SnoMinDefault, d...)
	cb.Do("SnoMedDefault", &t.SnoMedDefault, d...)
	cb.Do("SnoHighDefault", &t.SnoHighDefault, d...)
	cb.Do("SnoHighlight", &t.SnoHighlight, d...)
	cb.Do("Unk_c1379cf", &t.Unk_c1379cf, d...)
	cb.Do("Unk_eb1288f", &t.Unk_eb1288f, d...)
	cb.Do("SnoLootOverlay", &t.SnoLootOverlay, d...)
	cb.Do("SnoStencilLootSelectable", &t.SnoStencilLootSelectable, d...)
	cb.Do("SnoTriangleOverlay", &t.SnoTriangleOverlay, d...)
	cb.Do("SnoDepthComplexity", &t.SnoDepthComplexity, d...)
	cb.Do("SnoTexelDensity", &t.SnoTexelDensity, d...)
	cb.Do("SnoOccluded", &t.SnoOccluded, d...)
	cb.Do("SnoDepth", &t.SnoDepth, d...)
	cb.Do("SnoCookie", &t.SnoCookie, d...)
	cb.Do("SnoUIRActor", &t.SnoUIRActor, d...)
	cb.Do("SnoFaded", &t.SnoFaded, d...)
	cb.Do("SnoFur", &t.SnoFur, d...)
	cb.Do("SnoPowerCenters", &t.SnoPowerCenters, d...)
	cb.Do("Unk_a2d779a", &t.Unk_a2d779a, d...)
	cb.Do("Unk_62b01b3", &t.Unk_62b01b3, d...)
	cb.Do("Unk_fda1e28", &t.Unk_fda1e28, d...)
	cb.Do("Unk_8857547", &t.Unk_8857547, d...)
	cb.Do("Unk_57fb208", &t.Unk_57fb208, d...)
	cb.Do("Unk_279eec9", &t.Unk_279eec9, d...)
	cb.Do("Unk_f742b8a", &t.Unk_f742b8a, d...)
	cb.Do("Unk_259e646", &t.Unk_259e646, d...)
	cb.Do("Unk_a90ec3a", &t.Unk_a90ec3a, d...)
	cb.Do("Unk_78b28fb", &t.Unk_78b28fb, d...)
	cb.Do("SnoShaderShowTranslateWalkShader", &t.SnoShaderShowTranslateWalkShader, d...)
	cb.Do("SnoShaderShowTranslateWallShader", &t.SnoShaderShowTranslateWallShader, d...)
	cb.Do("Unk_65c301c", &t.Unk_65c301c, d...)
	cb.Do("Unk_edc70d0", &t.Unk_edc70d0, d...)
	cb.Do("Unk_bd6ad91", &t.Unk_bd6ad91, d...)
	cb.Do("Unk_8d0ea52", &t.Unk_8d0ea52, d...)
	cb.Do("Unk_fcdf27b", &t.Unk_fcdf27b, d...)
	cb.Do("Unk_6867f0f", &t.Unk_6867f0f, d...)
	cb.Do("Unk_380bbd0", &t.Unk_380bbd0, d...)
	cb.Do("Unk_7af891", &t.Unk_7af891, d...)
	cb.Do("SnoInfluenceSim", &t.SnoInfluenceSim, d...)
	cb.Do("Unk_8c6cbe4", &t.Unk_8c6cbe4, d...)
	cb.Do("Unk_e9a8598", &t.Unk_e9a8598, d...)
	cb.Do("Unk_b94c259", &t.Unk_b94c259, d...)
	cb.Do("Unk_88eff1a", &t.Unk_88eff1a, d...)
	cb.Do("Unk_679d69f", &t.Unk_679d69f, d...)
	cb.Do("Unk_2aee7b3", &t.Unk_2aee7b3, d...)
	cb.Do("Unk_fa92474", &t.Unk_fa92474, d...)
	cb.Do("Unk_ca36135", &t.Unk_ca36135, d...)
	cb.Do("Unk_99d9df6", &t.Unk_99d9df6, d...)
	cb.Do("Unk_abed88", &t.Unk_abed88, d...)
	cb.Do("SnoClosureOuter", &t.SnoClosureOuter, d...)
	cb.Do("Unk_1e187d", &t.Unk_1e187d, d...)
	cb.Do("Unk_d18553e", &t.Unk_d18553e, d...)
}

type EliteKilledMessage struct {
	THeader               RequiredMessageHeader
	DwPlayerGameAccountId DT_UINT
	SnoActorMonster       DT_SNO
	EMonsterRarity        DT_ENUM
	BUseAlternateName     DT_INT
	PRareNameGBIDs        DT_FIXEDARRAY[*DT_GBID]
}

func (t *EliteKilledMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.DwPlayerGameAccountId, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.SnoActorMonster, r, &Options{
		Flags: 1,
		Group: 1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.EMonsterRarity, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.BUseAlternateName, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.PRareNameGBIDs, r, &Options{
		ArrayLength: 2,
		Flags:       1,
		Group:       7,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+40, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *EliteKilledMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("DwPlayerGameAccountId", &t.DwPlayerGameAccountId, d...)
	cb.Do("SnoActorMonster", &t.SnoActorMonster, d...)
	cb.Do("EMonsterRarity", &t.EMonsterRarity, d...)
	cb.Do("BUseAlternateName", &t.BUseAlternateName, d...)
	cb.Do("PRareNameGBIDs", &t.PRareNameGBIDs, d...)
}

type PowerConditionHasAffixEquipped struct {
	// Inherits PowerConditionBase
	// Inherits PolymorphicBase
	DwType   DT_UINT
	BInverse DT_INT
	DwPad    DT_UINT
	ESubject DT_ENUM
	SnoAffix DT_SNO
}

func (t *PowerConditionHasAffixEquipped) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BInverse, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ESubject, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.SnoAffix, r, &Options{
		Flags: 513,
		Group: 104,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PowerConditionHasAffixEquipped) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("BInverse", &t.BInverse, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("ESubject", &t.ESubject, d...)
	cb.Do("SnoAffix", &t.SnoAffix, d...)
}

type TrailDefinition struct {
	DwTrailDefFlags                DT_UINT
	FlBaseWidth                    DT_FLOAT
	FTextureRepeatCount            DT_FLOAT
	NCircleSegmentCount            DT_INT
	NSegmentCount                  DT_INT
	TTrailLengthRange              DT_RANGE[*DT_FLOAT]
	TTrailDurationRange            DT_RANGE[*DT_FLOAT]
	TSystemDurationRange           DT_RANGE[*DT_FLOAT]
	TSystemDurationScalar          InterpolationScalar
	TTrailDurationScalar           InterpolationScalar
	TTrailLengthScalar             InterpolationScalar
	FlOutroDuration                DT_FLOAT
	PathColorOverTime              InterpolationPath_RGBAColor
	PathColorOverLength            InterpolationPath_RGBAColor
	PathAlpha                      InterpolationPath_float
	PathAlphaOverLength            InterpolationPath_float
	PathAlpha2OverTime             InterpolationPath_float
	PathAlpha2OverLength           InterpolationPath_float
	PathDistortionFactorOverLength InterpolationPath_float
	PathColorIntensityOverTime     InterpolationPath_float
	PathColorIntensityOverLength   InterpolationPath_float
	Unk_3a6dc3c                    InterpolationPath_float
	Unk_5ddd86f                    InterpolationPath_float
	PathScaleOverTime              InterpolationPath_float
	PathScaleOverLength            InterpolationPath_float
	PathWorldVelocityOverTime      VectorPath
	PathWorldVelocityOverLength    VectorPath
	PathLocalVelocityOverTime      VectorPath
	PathLocalVelocityOverLength    VectorPath
	Unk_e8edd27                    InterpolationPath_float
	NTrailType                     DT_ENUM
	ETrailSpawnType                DT_ENUM
	SnoMaterial                    DT_SNO
	ENormalAxis                    DT_ENUM
	TSineAmplitudeRange            DT_RANGE[*DT_FLOAT]
	TSineFrequencyRange            DT_RANGE[*DT_FLOAT]
	TSineSpeedRange                DT_RANGE[*DT_FLOAT]
	PathSineMultiplierOverLength   InterpolationPath_float
	PathSineMultiplierOverTime     InterpolationPath_float
	DwMaxSystems                   DT_UINT
}

func (t *TrailDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwTrailDefFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.FlBaseWidth, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.FTextureRepeatCount, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.NCircleSegmentCount, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.NSegmentCount, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.TTrailLengthRange, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.TTrailDurationRange, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.TSystemDurationRange, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.TSystemDurationScalar, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.TTrailDurationScalar, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+116, &t.TTrailLengthScalar, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+148, &t.FlOutroDuration, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+152, &t.PathColorOverTime, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+208, &t.PathColorOverLength, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+264, &t.PathAlpha, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+320, &t.PathAlphaOverLength, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+376, &t.PathAlpha2OverTime, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+432, &t.PathAlpha2OverLength, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+488, &t.PathDistortionFactorOverLength, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+544, &t.PathColorIntensityOverTime, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+600, &t.PathColorIntensityOverLength, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+656, &t.Unk_3a6dc3c, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+712, &t.Unk_5ddd86f, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+768, &t.PathScaleOverTime, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+824, &t.PathScaleOverLength, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+880, &t.PathWorldVelocityOverTime, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+936, &t.PathWorldVelocityOverLength, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+992, &t.PathLocalVelocityOverTime, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1048, &t.PathLocalVelocityOverLength, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1104, &t.Unk_e8edd27, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1160, &t.NTrailType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1164, &t.ETrailSpawnType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1168, &t.SnoMaterial, r, &Options{
		Flags: 1,
		Group: 57,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1172, &t.ENormalAxis, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1176, &t.TSineAmplitudeRange, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1184, &t.TSineFrequencyRange, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1192, &t.TSineSpeedRange, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1200, &t.PathSineMultiplierOverLength, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1256, &t.PathSineMultiplierOverTime, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1312, &t.DwMaxSystems, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+1320, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TrailDefinition) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwTrailDefFlags", &t.DwTrailDefFlags, d...)
	cb.Do("FlBaseWidth", &t.FlBaseWidth, d...)
	cb.Do("FTextureRepeatCount", &t.FTextureRepeatCount, d...)
	cb.Do("NCircleSegmentCount", &t.NCircleSegmentCount, d...)
	cb.Do("NSegmentCount", &t.NSegmentCount, d...)
	cb.Do("TTrailLengthRange", &t.TTrailLengthRange, d...)
	cb.Do("TTrailDurationRange", &t.TTrailDurationRange, d...)
	cb.Do("TSystemDurationRange", &t.TSystemDurationRange, d...)
	cb.Do("TSystemDurationScalar", &t.TSystemDurationScalar, d...)
	cb.Do("TTrailDurationScalar", &t.TTrailDurationScalar, d...)
	cb.Do("TTrailLengthScalar", &t.TTrailLengthScalar, d...)
	cb.Do("FlOutroDuration", &t.FlOutroDuration, d...)
	cb.Do("PathColorOverTime", &t.PathColorOverTime, d...)
	cb.Do("PathColorOverLength", &t.PathColorOverLength, d...)
	cb.Do("PathAlpha", &t.PathAlpha, d...)
	cb.Do("PathAlphaOverLength", &t.PathAlphaOverLength, d...)
	cb.Do("PathAlpha2OverTime", &t.PathAlpha2OverTime, d...)
	cb.Do("PathAlpha2OverLength", &t.PathAlpha2OverLength, d...)
	cb.Do("PathDistortionFactorOverLength", &t.PathDistortionFactorOverLength, d...)
	cb.Do("PathColorIntensityOverTime", &t.PathColorIntensityOverTime, d...)
	cb.Do("PathColorIntensityOverLength", &t.PathColorIntensityOverLength, d...)
	cb.Do("Unk_3a6dc3c", &t.Unk_3a6dc3c, d...)
	cb.Do("Unk_5ddd86f", &t.Unk_5ddd86f, d...)
	cb.Do("PathScaleOverTime", &t.PathScaleOverTime, d...)
	cb.Do("PathScaleOverLength", &t.PathScaleOverLength, d...)
	cb.Do("PathWorldVelocityOverTime", &t.PathWorldVelocityOverTime, d...)
	cb.Do("PathWorldVelocityOverLength", &t.PathWorldVelocityOverLength, d...)
	cb.Do("PathLocalVelocityOverTime", &t.PathLocalVelocityOverTime, d...)
	cb.Do("PathLocalVelocityOverLength", &t.PathLocalVelocityOverLength, d...)
	cb.Do("Unk_e8edd27", &t.Unk_e8edd27, d...)
	cb.Do("NTrailType", &t.NTrailType, d...)
	cb.Do("ETrailSpawnType", &t.ETrailSpawnType, d...)
	cb.Do("SnoMaterial", &t.SnoMaterial, d...)
	cb.Do("ENormalAxis", &t.ENormalAxis, d...)
	cb.Do("TSineAmplitudeRange", &t.TSineAmplitudeRange, d...)
	cb.Do("TSineFrequencyRange", &t.TSineFrequencyRange, d...)
	cb.Do("TSineSpeedRange", &t.TSineSpeedRange, d...)
	cb.Do("PathSineMultiplierOverLength", &t.PathSineMultiplierOverLength, d...)
	cb.Do("PathSineMultiplierOverTime", &t.PathSineMultiplierOverTime, d...)
	cb.Do("DwMaxSystems", &t.DwMaxSystems, d...)
}

type ParticleSimKeyFrameSpin struct {
	FlTime DT_FLOAT
	FlSpin DT_FLOAT
}

func (t *ParticleSimKeyFrameSpin) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.FlTime, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.FlSpin, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ParticleSimKeyFrameSpin) Walk(cb WalkCallback, d ...any) {
	cb.Do("FlTime", &t.FlTime, d...)
	cb.Do("FlSpin", &t.FlSpin, d...)
}

type ErrorWithContextMessage struct {
	THeader   RequiredMessageHeader
	EType     DT_ENUM
	SnoAsset  DT_SNO_NAME
	ETeam     DT_ENUM
	UsMessage DT_CHARARRAY
	UsOwner   DT_CHARARRAY
}

func (t *ErrorWithContextMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.EType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.SnoAsset, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.ETeam, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.UsMessage, r, &Options{
		ArrayLength: 1024,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1056, &t.UsOwner, r, &Options{
		ArrayLength: 64,
		Flags:       1,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+1120, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ErrorWithContextMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("EType", &t.EType, d...)
	cb.Do("SnoAsset", &t.SnoAsset, d...)
	cb.Do("ETeam", &t.ETeam, d...)
	cb.Do("UsMessage", &t.UsMessage, d...)
	cb.Do("UsOwner", &t.UsOwner, d...)
}

type OnPhaseContactFramePowerCallback struct {
	// Inherits PowerCallbackBase
	// Inherits PolymorphicBase
	DwType                DT_UINT
	DwPad                 DT_UINT
	SnoTriggerEffectGroup DT_SNO
	BCouldHaveRagdolled   DT_INT
	TPhaseName            DT_UINT
	EContactFrame         DT_ENUM
	BOptional             DT_INT
}

func (t *OnPhaseContactFramePowerCallback) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoTriggerEffectGroup, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.BCouldHaveRagdolled, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.TPhaseName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.EContactFrame, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.BOptional, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+40, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *OnPhaseContactFramePowerCallback) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("SnoTriggerEffectGroup", &t.SnoTriggerEffectGroup, d...)
	cb.Do("BCouldHaveRagdolled", &t.BCouldHaveRagdolled, d...)
	cb.Do("TPhaseName", &t.TPhaseName, d...)
	cb.Do("EContactFrame", &t.EContactFrame, d...)
	cb.Do("BOptional", &t.BOptional, d...)
}

type DungeonSigilTierSubcondition struct {
	// Inherits NumericComparisonSubcondition
	// Inherits Subcondition
	// Inherits PolymorphicBase
	DwType        DT_UINT
	BNegate       DT_INT
	EComparisonOp DT_ENUM
	DwPad         DT_UINT
	NTier         DT_INT
}

func (t *DungeonSigilTierSubcondition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BNegate, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.EComparisonOp, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.NTier, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+40, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *DungeonSigilTierSubcondition) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("BNegate", &t.BNegate, d...)
	cb.Do("EComparisonOp", &t.EComparisonOp, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("NTier", &t.NTier, d...)
}

type UIListItemStyle struct {
	// Inherits UITextStyle
	// Inherits UIWindowStyle
	// Inherits UIControlStyle
	// Inherits PolymorphicBase
	DwType                      DT_UINT
	DwPad                       DT_UINT
	HParentStyle                UIControlHandle
	Unk_441f783                 DT_INT64
	M_eHasModifiedPowerTagMap   DT_TAGMAP[*DT_ENUM]
	TConsoleInput               UIControlConsoleInput
	Unk_b4f614c                 DT_TAGMAP[*DT_ENUM]
	TFont                       UIControlFont
	PtUIControlTagMapIconLabels DT_TAGMAP[*DT_ENUM]
	Unk_82bd03f                 DT_TAGMAP[*DT_ENUM]
}

func (t *UIListItemStyle) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.HParentStyle, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_441f783, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.M_eHasModifiedPowerTagMap, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.TConsoleInput, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.Unk_b4f614c, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.TFont, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.PtUIControlTagMapIconLabels, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.Unk_82bd03f, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+128, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *UIListItemStyle) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("HParentStyle", &t.HParentStyle, d...)
	cb.Do("Unk_441f783", &t.Unk_441f783, d...)
	cb.Do("M_eHasModifiedPowerTagMap", &t.M_eHasModifiedPowerTagMap, d...)
	cb.Do("TConsoleInput", &t.TConsoleInput, d...)
	cb.Do("Unk_b4f614c", &t.Unk_b4f614c, d...)
	cb.Do("TFont", &t.TFont, d...)
	cb.Do("PtUIControlTagMapIconLabels", &t.PtUIControlTagMapIconLabels, d...)
	cb.Do("Unk_82bd03f", &t.Unk_82bd03f, d...)
}

type UIControlTemplate struct {
	SzName        DT_CSTRING[*DT_BYTE]
	PtInlineStyle DT_POLYMORPHIC_VARIABLEARRAY[*UIControlStyle]
	ArChildren    DT_VARIABLEARRAY[*UIControlTemplate]
	Unk_1cb       DT_VARIABLEARRAY[*Type_1c5ecda5]
}

func (t *UIControlTemplate) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SzName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.PtInlineStyle, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.ArChildren, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.Unk_1cb, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+72, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *UIControlTemplate) Walk(cb WalkCallback, d ...any) {
	cb.Do("SzName", &t.SzName, d...)
	cb.Do("PtInlineStyle", &t.PtInlineStyle, d...)
	cb.Do("ArChildren", &t.ArChildren, d...)
	cb.Do("Unk_1cb", &t.Unk_1cb, d...)
}

type EffectGroupACDToACDMessage struct {
	THeader        RequiredMessageHeader
	SnoEffectGroup DT_SNO
	AnnFrom        DT_ACD_NETWORK_NAME
	AnnTo          DT_ACD_NETWORK_NAME
	AnnOrigin      DT_ACD_NETWORK_NAME
	TLinkStart     HardpointInfo
	TLinkEnd       HardpointInfo
}

func (t *EffectGroupACDToACDMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoEffectGroup, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.AnnFrom, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.AnnTo, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.AnnOrigin, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.TLinkStart, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.TLinkEnd, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+60, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *EffectGroupACDToACDMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("SnoEffectGroup", &t.SnoEffectGroup, d...)
	cb.Do("AnnFrom", &t.AnnFrom, d...)
	cb.Do("AnnTo", &t.AnnTo, d...)
	cb.Do("AnnOrigin", &t.AnnOrigin, d...)
	cb.Do("TLinkStart", &t.TLinkStart, d...)
	cb.Do("TLinkEnd", &t.TLinkEnd, d...)
}

type PlayAnimationMessage struct {
	THeader             RequiredMessageHeader
	Ann                 DT_ACD_NETWORK_NAME
	EAnimReason         DT_ENUM
	FlUnitAnimStartTime DT_FLOAT
	TAnim               DT_FIXEDARRAY[*PlayAnimationMessageSpec]
	WpSyncPlace         DT_OPTIONAL[*SharedServerWorldPlace]
	FlSyncYaw           DT_OPTIONAL[*DT_FLOAT]
	BWasPreplayed       DT_OPTIONAL[*DT_INT]
}

func (t *PlayAnimationMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Ann, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.EAnimReason, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.FlUnitAnimStartTime, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.TAnim, r, &Options{
		ArrayLength: 6,
		Flags:       8,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+252, &t.WpSyncPlace, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+276, &t.FlSyncYaw, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+284, &t.BWasPreplayed, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+292, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PlayAnimationMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("Ann", &t.Ann, d...)
	cb.Do("EAnimReason", &t.EAnimReason, d...)
	cb.Do("FlUnitAnimStartTime", &t.FlUnitAnimStartTime, d...)
	cb.Do("TAnim", &t.TAnim, d...)
	cb.Do("WpSyncPlace", &t.WpSyncPlace, d...)
	cb.Do("FlSyncYaw", &t.FlSyncYaw, d...)
	cb.Do("BWasPreplayed", &t.BWasPreplayed, d...)
}

type RecipeEventGizmoData struct {
	// Inherits NamedGizmoData
	// Inherits ActorGizmoData
	// Inherits PolymorphicBase
	DwType                           DT_UINT
	DwPad                            DT_UINT
	FDisableNonFriendlyOperation     DT_INT
	FWalkToCenter                    DT_INT
	FGizmoStartsDisabled             DT_INT
	FUseStringListName               DT_INT
	FForceMinimapIcon                DT_INT
	FlOperationRadius                DT_FLOAT
	Unk_d0b1df5                      DT_FLOAT
	FlGizmoUseTime                   DT_FLOAT
	SnoChannelingEffect              DT_SNO
	Unk_2767229                      DT_INT
	FGizmoShowProgressBar            DT_INT
	Unk_6d9ebe1                      DT_INT
	Unk_5456245                      DT_INT
	Unk_af5815a                      DT_INT
	SnoOnClickEffect                 DT_SNO
	SnoPickedUpEffect                DT_SNO
	SnoDropOnGroundEffect            DT_SNO
	TConditionData                   GizmoConditionData
	SnoPowerOperator                 DT_SNO
	SnoPowerOperate                  DT_SNO
	SnoPowerOperatorActive           DT_SNO
	SnoPowerOperateActive            DT_SNO
	Unk_359810e                      DT_INT
	NCooldown                        DT_UINT
	Unk_9c8478e                      DT_UINT
	Unk_d45ed2d                      DT_INT
	Unk_f6b20b7                      DT_INT
	Unk_54513b8                      DT_INT
	Unk_fd1f378                      DT_UINT
	HGizmoOperateFlavorTextMsgLabel  DT_UINT
	HGizmoOperateDescriptionMsgLabel DT_UINT
	FlGizmoOperateOffset             DT_FLOAT
	Unk_ab58cd3                      DT_ENUM
	Unk_91a3966                      DT_UINT
	HGizmoChannelingLabel            DT_UINT
	Unk_4be4371                      DT_INT
	SnoRecipe                        DT_SNO
}

func (t *RecipeEventGizmoData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.FDisableNonFriendlyOperation, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.FWalkToCenter, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.FGizmoStartsDisabled, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.FUseStringListName, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.FForceMinimapIcon, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.FlOperationRadius, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.Unk_d0b1df5, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.FlGizmoUseTime, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.SnoChannelingEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.Unk_2767229, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.FGizmoShowProgressBar, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+60, &t.Unk_6d9ebe1, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.Unk_5456245, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.Unk_af5815a, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.SnoOnClickEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.SnoPickedUpEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.SnoDropOnGroundEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.TConditionData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.SnoPowerOperator, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.SnoPowerOperate, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.SnoPowerOperatorActive, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+100, &t.SnoPowerOperateActive, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+104, &t.Unk_359810e, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+108, &t.NCooldown, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.Unk_9c8478e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+116, &t.Unk_d45ed2d, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.Unk_f6b20b7, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+124, &t.Unk_54513b8, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.Unk_fd1f378, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+132, &t.HGizmoOperateFlavorTextMsgLabel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+136, &t.HGizmoOperateDescriptionMsgLabel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+140, &t.FlGizmoOperateOffset, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+144, &t.Unk_ab58cd3, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+148, &t.Unk_91a3966, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+152, &t.HGizmoChannelingLabel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+156, &t.Unk_4be4371, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+160, &t.SnoRecipe, r, &Options{
		Flags: 1,
		Group: 49,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+168, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *RecipeEventGizmoData) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("FDisableNonFriendlyOperation", &t.FDisableNonFriendlyOperation, d...)
	cb.Do("FWalkToCenter", &t.FWalkToCenter, d...)
	cb.Do("FGizmoStartsDisabled", &t.FGizmoStartsDisabled, d...)
	cb.Do("FUseStringListName", &t.FUseStringListName, d...)
	cb.Do("FForceMinimapIcon", &t.FForceMinimapIcon, d...)
	cb.Do("FlOperationRadius", &t.FlOperationRadius, d...)
	cb.Do("Unk_d0b1df5", &t.Unk_d0b1df5, d...)
	cb.Do("FlGizmoUseTime", &t.FlGizmoUseTime, d...)
	cb.Do("SnoChannelingEffect", &t.SnoChannelingEffect, d...)
	cb.Do("Unk_2767229", &t.Unk_2767229, d...)
	cb.Do("FGizmoShowProgressBar", &t.FGizmoShowProgressBar, d...)
	cb.Do("Unk_6d9ebe1", &t.Unk_6d9ebe1, d...)
	cb.Do("Unk_5456245", &t.Unk_5456245, d...)
	cb.Do("Unk_af5815a", &t.Unk_af5815a, d...)
	cb.Do("SnoOnClickEffect", &t.SnoOnClickEffect, d...)
	cb.Do("SnoPickedUpEffect", &t.SnoPickedUpEffect, d...)
	cb.Do("SnoDropOnGroundEffect", &t.SnoDropOnGroundEffect, d...)
	cb.Do("TConditionData", &t.TConditionData, d...)
	cb.Do("SnoPowerOperator", &t.SnoPowerOperator, d...)
	cb.Do("SnoPowerOperate", &t.SnoPowerOperate, d...)
	cb.Do("SnoPowerOperatorActive", &t.SnoPowerOperatorActive, d...)
	cb.Do("SnoPowerOperateActive", &t.SnoPowerOperateActive, d...)
	cb.Do("Unk_359810e", &t.Unk_359810e, d...)
	cb.Do("NCooldown", &t.NCooldown, d...)
	cb.Do("Unk_9c8478e", &t.Unk_9c8478e, d...)
	cb.Do("Unk_d45ed2d", &t.Unk_d45ed2d, d...)
	cb.Do("Unk_f6b20b7", &t.Unk_f6b20b7, d...)
	cb.Do("Unk_54513b8", &t.Unk_54513b8, d...)
	cb.Do("Unk_fd1f378", &t.Unk_fd1f378, d...)
	cb.Do("HGizmoOperateFlavorTextMsgLabel", &t.HGizmoOperateFlavorTextMsgLabel, d...)
	cb.Do("HGizmoOperateDescriptionMsgLabel", &t.HGizmoOperateDescriptionMsgLabel, d...)
	cb.Do("FlGizmoOperateOffset", &t.FlGizmoOperateOffset, d...)
	cb.Do("Unk_ab58cd3", &t.Unk_ab58cd3, d...)
	cb.Do("Unk_91a3966", &t.Unk_91a3966, d...)
	cb.Do("HGizmoChannelingLabel", &t.HGizmoChannelingLabel, d...)
	cb.Do("Unk_4be4371", &t.Unk_4be4371, d...)
	cb.Do("SnoRecipe", &t.SnoRecipe, d...)
}

type SkyColorSettings struct {
	Unk_9fea26c DT_TAGMAP[*DT_ENUM]
}

func (t *SkyColorSettings) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Unk_9fea26c, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *SkyColorSettings) Walk(cb WalkCallback, d ...any) {
	cb.Do("Unk_9fea26c", &t.Unk_9fea26c, d...)
}

type WeatherDefinition struct {
	PtPostprocessed        DT_INT64
	SnoParentWeather       DT_SNO
	Unk_45703df            DT_INT
	Unk_5989069            DT_FIXEDARRAY[*Type_3f7811d2]
	TParamsNotRaining      WeatherStateParams
	TParamsWhenRaining     WeatherStateParams
	Unk_3b541a4            InterpolationPath_RGBAColor
	Unk_3b541a5            InterpolationPath_RGBAColor
	Unk_3b541a6            InterpolationPath_RGBAColor
	TColorCorrection       ColorCorrectionParams
	TSkyColorSettings      SkyColorSettings
	TStarsSettings         StarsSettings
	Unk_c68eb66            Type_3a9f0d72
	TAdvancedBloomSettings AdvancedBloomSettings
	Unk_dc54395            DT_TAGMAP[*DT_ENUM]
}

func (t *WeatherDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.PtPostprocessed, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoParentWeather, r, &Options{
		Flags: 1,
		Group: 47,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.Unk_45703df, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_5989069, r, &Options{
		ArrayLength: 3,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.TParamsNotRaining, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.TParamsWhenRaining, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+104, &t.Unk_3b541a4, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+160, &t.Unk_3b541a5, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+216, &t.Unk_3b541a6, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+272, &t.TColorCorrection, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+288, &t.TSkyColorSettings, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+304, &t.TStarsSettings, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+320, &t.Unk_c68eb66, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+336, &t.TAdvancedBloomSettings, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+352, &t.Unk_dc54395, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+368, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *WeatherDefinition) Walk(cb WalkCallback, d ...any) {
	cb.Do("PtPostprocessed", &t.PtPostprocessed, d...)
	cb.Do("SnoParentWeather", &t.SnoParentWeather, d...)
	cb.Do("Unk_45703df", &t.Unk_45703df, d...)
	cb.Do("Unk_5989069", &t.Unk_5989069, d...)
	cb.Do("TParamsNotRaining", &t.TParamsNotRaining, d...)
	cb.Do("TParamsWhenRaining", &t.TParamsWhenRaining, d...)
	cb.Do("Unk_3b541a4", &t.Unk_3b541a4, d...)
	cb.Do("Unk_3b541a5", &t.Unk_3b541a5, d...)
	cb.Do("Unk_3b541a6", &t.Unk_3b541a6, d...)
	cb.Do("TColorCorrection", &t.TColorCorrection, d...)
	cb.Do("TSkyColorSettings", &t.TSkyColorSettings, d...)
	cb.Do("TStarsSettings", &t.TStarsSettings, d...)
	cb.Do("Unk_c68eb66", &t.Unk_c68eb66, d...)
	cb.Do("TAdvancedBloomSettings", &t.TAdvancedBloomSettings, d...)
	cb.Do("Unk_dc54395", &t.Unk_dc54395, d...)
}

type Blessings struct {
	THeader         GBIDHeader
	EAttribute      DT_ENUM
	Unk_a35d77a     Type_2ebd3c08
	ArLevels        DT_VARIABLEARRAY[*BlessingLevel]
	HIconImage      DT_UINT
	HSmallIconImage DT_UINT
}

func (t *Blessings) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+260, &t.EAttribute, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+264, &t.Unk_a35d77a, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+272, &t.ArLevels, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+288, &t.HIconImage, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+292, &t.HSmallIconImage, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+296, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Blessings) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("EAttribute", &t.EAttribute, d...)
	cb.Do("Unk_a35d77a", &t.Unk_a35d77a, d...)
	cb.Do("ArLevels", &t.ArLevels, d...)
	cb.Do("HIconImage", &t.HIconImage, d...)
	cb.Do("HSmallIconImage", &t.HSmallIconImage, d...)
}

type Type_273a9eee struct {
	GbidSpawnLocType DT_GBID
	ERestrictionType DT_ENUM
	NCountActive     DT_INT
	FlPercentActive  DT_FLOAT
	Unk_74768a4      DT_FLOAT
}

func (t *Type_273a9eee) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.GbidSpawnLocType, r, &Options{
		Flags: 1,
		Group: 20,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.ERestrictionType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.NCountActive, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.FlPercentActive, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_74768a4, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+20, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_273a9eee) Walk(cb WalkCallback, d ...any) {
	cb.Do("GbidSpawnLocType", &t.GbidSpawnLocType, d...)
	cb.Do("ERestrictionType", &t.ERestrictionType, d...)
	cb.Do("NCountActive", &t.NCountActive, d...)
	cb.Do("FlPercentActive", &t.FlPercentActive, d...)
	cb.Do("Unk_74768a4", &t.Unk_74768a4, d...)
}

type LabelEntry struct {
	GbidLabel      DT_GBID
	UFlags         DT_UINT
	FlWeight       DT_FLOAT
	NApplyCountMin DT_INT
	Unk_9ac63e8    DT_FLOAT
	Unk_b171d47    DT_INT
}

func (t *LabelEntry) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.GbidLabel, r, &Options{
		Flags: 1,
		Group: 4,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.UFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.FlWeight, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.NApplyCountMin, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_9ac63e8, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.Unk_b171d47, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *LabelEntry) Walk(cb WalkCallback, d ...any) {
	cb.Do("GbidLabel", &t.GbidLabel, d...)
	cb.Do("UFlags", &t.UFlags, d...)
	cb.Do("FlWeight", &t.FlWeight, d...)
	cb.Do("NApplyCountMin", &t.NApplyCountMin, d...)
	cb.Do("Unk_9ac63e8", &t.Unk_9ac63e8, d...)
	cb.Do("Unk_b171d47", &t.Unk_b171d47, d...)
}

type Type_27aa5029 struct {
	THeader        RequiredMessageHeader
	SnoAchievement DT_SNO
	Unk_815b7e9    DT_INT
}

func (t *Type_27aa5029) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoAchievement, r, &Options{
		Flags: 1,
		Group: 99,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.Unk_815b7e9, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_27aa5029) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("SnoAchievement", &t.SnoAchievement, d...)
	cb.Do("Unk_815b7e9", &t.Unk_815b7e9, d...)
}

type ClassPassiveSkillPowerData struct {
	SnoPassivePower  DT_SNO
	TUnlockCondition ConditionWrapper
}

func (t *ClassPassiveSkillPowerData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoPassivePower, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.TUnlockCondition, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+40, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ClassPassiveSkillPowerData) Walk(cb WalkCallback, d ...any) {
	cb.Do("SnoPassivePower", &t.SnoPassivePower, d...)
	cb.Do("TUnlockCondition", &t.TUnlockCondition, d...)
}

type DesignerWorldFeatureFlags_Table struct {
	// Inherits GameBalanceTable
	// Inherits PolymorphicBase
	DwType   DT_UINT
	DwPad    DT_UINT
	TEntries DT_VARIABLEARRAY[*DesignerWorldFeatureFlags]
}

func (t *DesignerWorldFeatureFlags_Table) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TEntries, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *DesignerWorldFeatureFlags_Table) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("TEntries", &t.TEntries, d...)
}

type ConsoleProperty struct{}

func (t *ConsoleProperty) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if _, err := r.Seek(p+1, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ConsoleProperty) Walk(cb WalkCallback, d ...any) {}

type PlayerCustomizationMessage struct {
	THeader               RequiredMessageHeader
	TCustomizationData    CustomizationData
	DwPlayerGameAccountId DT_UINT
}

func (t *PlayerCustomizationMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TCustomizationData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.DwPlayerGameAccountId, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+60, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PlayerCustomizationMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("TCustomizationData", &t.TCustomizationData, d...)
	cb.Do("DwPlayerGameAccountId", &t.DwPlayerGameAccountId, d...)
}

type Type_28dc8b5b struct {
	// Inherits BuffCallbackBase
	// Inherits PolymorphicBase
	DwType                DT_UINT
	DwPad                 DT_UINT
	SnoTriggerEffectGroup DT_SNO
	ArConditions          DT_POLYMORPHIC_VARIABLEARRAY[*DT_INT64]
}

func (t *Type_28dc8b5b) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoTriggerEffectGroup, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ArConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_28dc8b5b) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("SnoTriggerEffectGroup", &t.SnoTriggerEffectGroup, d...)
	cb.Do("ArConditions", &t.ArConditions, d...)
}

type EmitterBoxData struct {
	// Inherits EmitterDataBase
	// Inherits PolymorphicBase
	DwType            DT_UINT
	DwPad             DT_UINT
	FEvenDistribution DT_INT
	PathBoxExtents    VectorPath
}

func (t *EmitterBoxData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.FEvenDistribution, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.PathBoxExtents, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+80, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *EmitterBoxData) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("FEvenDistribution", &t.FEvenDistribution, d...)
	cb.Do("PathBoxExtents", &t.PathBoxExtents, d...)
}

type ActorFacingData struct {
	FlTurnSpeed              DT_FLOAT
	FlRunTurnSpeed           DT_FLOAT
	FlDefaultAttackTurnSpeed DT_FLOAT
}

func (t *ActorFacingData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.FlTurnSpeed, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.FlRunTurnSpeed, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.FlDefaultAttackTurnSpeed, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+12, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ActorFacingData) Walk(cb WalkCallback, d ...any) {
	cb.Do("FlTurnSpeed", &t.FlTurnSpeed, d...)
	cb.Do("FlRunTurnSpeed", &t.FlRunTurnSpeed, d...)
	cb.Do("FlDefaultAttackTurnSpeed", &t.FlDefaultAttackTurnSpeed, d...)
}

type FoleyOverridePreloadHelper struct {
	SnoActor    DT_SNO
	DwTag       DT_UINT
	Unk_c063965 SerialDataInfo
}

func (t *FoleyOverridePreloadHelper) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoActor, r, &Options{
		Flags: 1,
		Group: 1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.DwTag, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.Unk_c063965, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *FoleyOverridePreloadHelper) Walk(cb WalkCallback, d ...any) {
	cb.Do("SnoActor", &t.SnoActor, d...)
	cb.Do("DwTag", &t.DwTag, d...)
	cb.Do("Unk_c063965", &t.Unk_c063965, d...)
}

type ParagonNodeDefinition struct {
	HIcon               DT_UINT
	HIconMask           DT_UINT
	Unk_7714b98         DT_ENUM
	ERarityOverride     DT_ENUM
	SnoPassivePower     DT_SNO
	PtAttributes        DT_VARIABLEARRAY[*AttributeSpecifier]
	Unk_8ba8e1e         DT_VARIABLEARRAY[*DT_INT]
	ArThresholdSelector DT_VARIABLEARRAY[*DT_SNO]
	BHasSocket          DT_INT
	BIsGate             DT_INT
	ArSkillTags         DT_VARIABLEARRAY[*DT_GBID]
}

func (t *ParagonNodeDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.HIcon, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.HIconMask, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_7714b98, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.ERarityOverride, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SnoPassivePower, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.PtAttributes, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.Unk_8ba8e1e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.ArThresholdSelector, r, &Options{
		Flags: 1,
		Group: 124,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.BHasSocket, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.BIsGate, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.ArSkillTags, r, &Options{
		Flags: 1,
		Group: 56,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+104, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ParagonNodeDefinition) Walk(cb WalkCallback, d ...any) {
	cb.Do("HIcon", &t.HIcon, d...)
	cb.Do("HIconMask", &t.HIconMask, d...)
	cb.Do("Unk_7714b98", &t.Unk_7714b98, d...)
	cb.Do("ERarityOverride", &t.ERarityOverride, d...)
	cb.Do("SnoPassivePower", &t.SnoPassivePower, d...)
	cb.Do("PtAttributes", &t.PtAttributes, d...)
	cb.Do("Unk_8ba8e1e", &t.Unk_8ba8e1e, d...)
	cb.Do("ArThresholdSelector", &t.ArThresholdSelector, d...)
	cb.Do("BHasSocket", &t.BHasSocket, d...)
	cb.Do("BIsGate", &t.BIsGate, d...)
	cb.Do("ArSkillTags", &t.ArSkillTags, d...)
}

type LookVariantMap struct {
	DwLookVariant          DT_UINT
	ArLookVariantOverrides DT_VARIABLEARRAY[*LookVariantOverride]
}

func (t *LookVariantMap) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.DwLookVariant, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.ArLookVariantOverrides, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *LookVariantMap) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwLookVariant", &t.DwLookVariant, d...)
	cb.Do("ArLookVariantOverrides", &t.ArLookVariantOverrides, d...)
}

type PRTransformMessage struct {
	THeader    RequiredMessageHeader
	TTransform PRTransform
}

func (t *PRTransformMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TTransform, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+44, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PRTransformMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("TTransform", &t.TTransform, d...)
}

type DRLGSpawningData struct {
	GbidSpawnLocType DT_GBID
	ArGroupTypeData  DT_FIXEDARRAY[*DRLGSpawnGroupTypeData]
}

func (t *DRLGSpawningData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.GbidSpawnLocType, r, &Options{
		Flags: 1,
		Group: 20,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.ArGroupTypeData, r, &Options{
		ArrayLength: 9,
		Flags:       1,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+256, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *DRLGSpawningData) Walk(cb WalkCallback, d ...any) {
	cb.Do("GbidSpawnLocType", &t.GbidSpawnLocType, d...)
	cb.Do("ArGroupTypeData", &t.ArGroupTypeData, d...)
}

type DRLGSpawningPool struct {
	GbidSpawningPool DT_GBID
	BNegate          DT_INT
}

func (t *DRLGSpawningPool) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.GbidSpawningPool, r, &Options{
		Flags: 1,
		Group: 48,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.BNegate, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *DRLGSpawningPool) Walk(cb WalkCallback, d ...any) {
	cb.Do("GbidSpawningPool", &t.GbidSpawningPool, d...)
	cb.Do("BNegate", &t.BNegate, d...)
}

type WorldDeletedMessage struct {
	THeader  RequiredMessageHeader
	IdSWorld DT_SHARED_SERVER_DATA_ID
}

func (t *WorldDeletedMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.IdSWorld, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *WorldDeletedMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("IdSWorld", &t.IdSWorld, d...)
}

type QuestPreloadHelper struct {
	SnoQuest            DT_SNO
	TPhasesDependencies SerialDataInfo
	TGlobalDependencies SerialDataInfo
}

func (t *QuestPreloadHelper) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoQuest, r, &Options{
		Flags: 1,
		Group: 31,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.TPhasesDependencies, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.TGlobalDependencies, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+20, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *QuestPreloadHelper) Walk(cb WalkCallback, d ...any) {
	cb.Do("SnoQuest", &t.SnoQuest, d...)
	cb.Do("TPhasesDependencies", &t.TPhasesDependencies, d...)
	cb.Do("TGlobalDependencies", &t.TGlobalDependencies, d...)
}

type EnableRagdollParams struct {
	FlRagdollVelocityFactor      DT_FLOAT
	FlRagdollMomentumFactor      DT_FLOAT
	FlRagdollActorMomentumFactor DT_FLOAT
}

func (t *EnableRagdollParams) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.FlRagdollVelocityFactor, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.FlRagdollMomentumFactor, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.FlRagdollActorMomentumFactor, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+12, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *EnableRagdollParams) Walk(cb WalkCallback, d ...any) {
	cb.Do("FlRagdollVelocityFactor", &t.FlRagdollVelocityFactor, d...)
	cb.Do("FlRagdollMomentumFactor", &t.FlRagdollMomentumFactor, d...)
	cb.Do("FlRagdollActorMomentumFactor", &t.FlRagdollActorMomentumFactor, d...)
}

type OnItemPickupBuffCallback struct {
	// Inherits BuffCallbackBase
	// Inherits PolymorphicBase
	DwType                DT_UINT
	DwPad                 DT_UINT
	SnoTriggerEffectGroup DT_SNO
	ArConditions          DT_POLYMORPHIC_VARIABLEARRAY[*DT_INT64]
}

func (t *OnItemPickupBuffCallback) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoTriggerEffectGroup, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ArConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *OnItemPickupBuffCallback) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("SnoTriggerEffectGroup", &t.SnoTriggerEffectGroup, d...)
	cb.Do("ArConditions", &t.ArConditions, d...)
}

type DisplayMode struct {
	DwFlags       DT_UINT
	DwWindowMode  DT_ENUM
	NWinLeft      DT_INT
	NWinTop       DT_INT
	DwUIOptWidth  DT_UINT
	DwUIOptHeight DT_UINT
	DwWidth       DT_UINT
	DwHeight      DT_UINT
	NRefreshRate  DT_INT
	DwMonitor     DT_UINT
	EColorSpace   DT_ENUM
	DwMSAALevel   DT_UINT
}

func (t *DisplayMode) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.DwFlags, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.DwWindowMode, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.NWinLeft, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.NWinTop, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.DwUIOptWidth, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwUIOptHeight, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.DwWidth, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.DwHeight, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.NRefreshRate, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.DwMonitor, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.EColorSpace, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.DwMSAALevel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *DisplayMode) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwFlags", &t.DwFlags, d...)
	cb.Do("DwWindowMode", &t.DwWindowMode, d...)
	cb.Do("NWinLeft", &t.NWinLeft, d...)
	cb.Do("NWinTop", &t.NWinTop, d...)
	cb.Do("DwUIOptWidth", &t.DwUIOptWidth, d...)
	cb.Do("DwUIOptHeight", &t.DwUIOptHeight, d...)
	cb.Do("DwWidth", &t.DwWidth, d...)
	cb.Do("DwHeight", &t.DwHeight, d...)
	cb.Do("NRefreshRate", &t.NRefreshRate, d...)
	cb.Do("DwMonitor", &t.DwMonitor, d...)
	cb.Do("EColorSpace", &t.EColorSpace, d...)
	cb.Do("DwMSAALevel", &t.DwMSAALevel, d...)
}

type SeasonJourneyBlessingData struct {
	NStartingRefundGoldCost DT_INT
	NRefundCostMultiplier   DT_INT
	NMaxRefundCost          DT_INT
}

func (t *SeasonJourneyBlessingData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.NStartingRefundGoldCost, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.NRefundCostMultiplier, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.NMaxRefundCost, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+12, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *SeasonJourneyBlessingData) Walk(cb WalkCallback, d ...any) {
	cb.Do("NStartingRefundGoldCost", &t.NStartingRefundGoldCost, d...)
	cb.Do("NRefundCostMultiplier", &t.NRefundCostMultiplier, d...)
	cb.Do("NMaxRefundCost", &t.NMaxRefundCost, d...)
}

type CurrentZoneSubcondition struct {
	// Inherits Subcondition
	// Inherits PolymorphicBase
	DwType  DT_UINT
	BNegate DT_INT
	DwPad   DT_UINT
	EZone   DT_ENUM
}

func (t *CurrentZoneSubcondition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BNegate, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.EZone, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *CurrentZoneSubcondition) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("BNegate", &t.BNegate, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("EZone", &t.EZone, d...)
}

type ZoneProgressRewardInfoMessage struct {
	THeader     RequiredMessageHeader
	Unk_ae25fc7 DT_FIXEDARRAY[*DT_INT]
	Unk_cf0ad45 DT_FIXEDARRAY[*DT_INT]
}

func (t *ZoneProgressRewardInfoMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_ae25fc7, r, &Options{
		ArrayLength: 12,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.Unk_cf0ad45, r, &Options{
		ArrayLength: 12,
		Flags:       1,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+112, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ZoneProgressRewardInfoMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("Unk_ae25fc7", &t.Unk_ae25fc7, d...)
	cb.Do("Unk_cf0ad45", &t.Unk_cf0ad45, d...)
}

type WwiseStandardSoundBank struct {
	// Inherits WwiseSoundBankContentBase
	// Inherits PolymorphicBase
	DwType      DT_UINT
	DwPad       DT_UINT
	PtWWiseBank DT_VARIABLEARRAY[*DT_BYTE]
}

func (t *WwiseStandardSoundBank) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.PtWWiseBank, r, &Options{Flags: 2097152}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *WwiseStandardSoundBank) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("PtWWiseBank", &t.PtWWiseBank, d...)
}

type ConversationRandomChoiceNode struct {
	// Inherits ConversationScopeNode
	// Inherits ConversationTreeNode
	// Inherits PolymorphicBase
	DwType         DT_UINT
	DwPad          DT_UINT
	DwNodeID       DT_UINT
	DwNextNodeID   DT_UINT
	DwParentNodeID DT_UINT
	PtNextNode     DT_INT64
	DwFlags        DT_UINT
	SzComment      DT_CSTRING[*DT_BYTE]
	ArChildNodes   DT_POLYMORPHIC_VARIABLEARRAY[*DT_INT64]
	SnoCondition   DT_SNO
	Unk_d8bf9e4    DT_INT
	SnoSpeaker     DT_SNO
}

func (t *ConversationRandomChoiceNode) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.DwNodeID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwNextNodeID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.DwParentNodeID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.PtNextNode, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.DwFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.SzComment, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.ArChildNodes, r, &Options{Flags: 262145}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.SnoCondition, r, &Options{
		Flags: 1,
		Group: 51,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.Unk_d8bf9e4, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.SnoSpeaker, r, &Options{
		Flags: 1,
		Group: 72,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+104, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ConversationRandomChoiceNode) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("DwNodeID", &t.DwNodeID, d...)
	cb.Do("DwNextNodeID", &t.DwNextNodeID, d...)
	cb.Do("DwParentNodeID", &t.DwParentNodeID, d...)
	cb.Do("PtNextNode", &t.PtNextNode, d...)
	cb.Do("DwFlags", &t.DwFlags, d...)
	cb.Do("SzComment", &t.SzComment, d...)
	cb.Do("ArChildNodes", &t.ArChildNodes, d...)
	cb.Do("SnoCondition", &t.SnoCondition, d...)
	cb.Do("Unk_d8bf9e4", &t.Unk_d8bf9e4, d...)
	cb.Do("SnoSpeaker", &t.SnoSpeaker, d...)
}

type SerializeContainerData struct {
	DwOffset         DT_INT
	DwSizeAndFlags   DT_INT
	NCount           DT_INT
	DwContainerFlags DT_INT
}

func (t *SerializeContainerData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.DwOffset, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.DwSizeAndFlags, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.NCount, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwContainerFlags, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *SerializeContainerData) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwOffset", &t.DwOffset, d...)
	cb.Do("DwSizeAndFlags", &t.DwSizeAndFlags, d...)
	cb.Do("NCount", &t.NCount, d...)
	cb.Do("DwContainerFlags", &t.DwContainerFlags, d...)
}

type StringLabelHandleEx struct {
	SnoStringList DT_SNO
	SzLabel       DT_UINT
}

func (t *StringLabelHandleEx) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoStringList, r, &Options{
		Flags: 1,
		Group: 42,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.SzLabel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *StringLabelHandleEx) Walk(cb WalkCallback, d ...any) {
	cb.Do("SnoStringList", &t.SnoStringList, d...)
	cb.Do("SzLabel", &t.SzLabel, d...)
}

type PlayerClassBarbData struct {
	DwUnlockLevel           DT_UINT
	DwTechniqueUnlockLevel  DT_UINT
	SnoTechniqueUnlockQuest DT_SNO
	ArWeaponExpertiseData   DT_VARIABLEARRAY[*BarbWeaponExpertiseData]
}

func (t *PlayerClassBarbData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.DwUnlockLevel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.DwTechniqueUnlockLevel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.SnoTechniqueUnlockQuest, r, &Options{
		Flags: 1,
		Group: 31,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.ArWeaponExpertiseData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PlayerClassBarbData) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwUnlockLevel", &t.DwUnlockLevel, d...)
	cb.Do("DwTechniqueUnlockLevel", &t.DwTechniqueUnlockLevel, d...)
	cb.Do("SnoTechniqueUnlockQuest", &t.SnoTechniqueUnlockQuest, d...)
	cb.Do("ArWeaponExpertiseData", &t.ArWeaponExpertiseData, d...)
}

type EventRewardChestGizmoData struct {
	// Inherits ChestGizmoData
	// Inherits NamedGizmoData
	// Inherits ActorGizmoData
	// Inherits PolymorphicBase
	DwType                            DT_UINT
	FDisableNonFriendlyOperation      DT_INT
	FWalkToCenter                     DT_INT
	FGizmoStartsDisabled              DT_INT
	FUseStringListName                DT_INT
	FForceMinimapIcon                 DT_INT
	FlOperationRadius                 DT_FLOAT
	Unk_d0b1df5                       DT_FLOAT
	FlGizmoUseTime                    DT_FLOAT
	SnoChannelingEffect               DT_SNO
	Unk_2767229                       DT_INT
	FGizmoShowProgressBar             DT_INT
	Unk_6d9ebe1                       DT_INT
	Unk_5456245                       DT_INT
	Unk_af5815a                       DT_INT
	SnoOnClickEffect                  DT_SNO
	SnoPickedUpEffect                 DT_SNO
	SnoDropOnGroundEffect             DT_SNO
	TConditionData                    GizmoConditionData
	SnoPowerOperator                  DT_SNO
	SnoPowerOperate                   DT_SNO
	SnoPowerOperatorActive            DT_SNO
	SnoPowerOperateActive             DT_SNO
	Unk_359810e                       DT_INT
	NCooldown                         DT_UINT
	Unk_9c8478e                       DT_UINT
	Unk_d45ed2d                       DT_INT
	Unk_f6b20b7                       DT_INT
	Unk_54513b8                       DT_INT
	Unk_fd1f378                       DT_UINT
	HGizmoOperateFlavorTextMsgLabel   DT_UINT
	HGizmoOperateDescriptionMsgLabel  DT_UINT
	FlGizmoOperateOffset              DT_FLOAT
	Unk_ab58cd3                       DT_ENUM
	Unk_91a3966                       DT_UINT
	HGizmoChannelingLabel             DT_UINT
	Unk_4be4371                       DT_INT
	SnoTreasureClass                  DT_SNO
	TLockData                         LockingGizmoData
	FChestRemovesCollisionOnOperation DT_INT
	FChestOperatesOnProximity         DT_INT
	FChestLight                       DT_INT
	Unk_51b0c11                       DT_INT
	Unk_6b4a81d                       DT_FLOAT
	DwPad                             DT_UINT
	FlExpirationDelay                 DT_FLOAT
	Unk_8385e16                       DT_INT
	Unk_fd778e6                       DT_UINT
}

func (t *EventRewardChestGizmoData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.FDisableNonFriendlyOperation, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.FWalkToCenter, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.FGizmoStartsDisabled, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.FUseStringListName, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.FForceMinimapIcon, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.FlOperationRadius, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.Unk_d0b1df5, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.FlGizmoUseTime, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.SnoChannelingEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.Unk_2767229, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.FGizmoShowProgressBar, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+60, &t.Unk_6d9ebe1, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.Unk_5456245, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.Unk_af5815a, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.SnoOnClickEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.SnoPickedUpEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.SnoDropOnGroundEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.TConditionData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.SnoPowerOperator, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.SnoPowerOperate, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.SnoPowerOperatorActive, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+100, &t.SnoPowerOperateActive, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+104, &t.Unk_359810e, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+108, &t.NCooldown, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.Unk_9c8478e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+116, &t.Unk_d45ed2d, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.Unk_f6b20b7, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+124, &t.Unk_54513b8, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.Unk_fd1f378, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+132, &t.HGizmoOperateFlavorTextMsgLabel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+136, &t.HGizmoOperateDescriptionMsgLabel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+140, &t.FlGizmoOperateOffset, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+144, &t.Unk_ab58cd3, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+148, &t.Unk_91a3966, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+152, &t.HGizmoChannelingLabel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+156, &t.Unk_4be4371, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+160, &t.SnoTreasureClass, r, &Options{
		Flags: 1,
		Group: 52,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+164, &t.TLockData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+200, &t.FChestRemovesCollisionOnOperation, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+204, &t.FChestOperatesOnProximity, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+208, &t.FChestLight, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+212, &t.Unk_51b0c11, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+216, &t.Unk_6b4a81d, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+220, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+224, &t.FlExpirationDelay, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+228, &t.Unk_8385e16, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+232, &t.Unk_fd778e6, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+240, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *EventRewardChestGizmoData) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("FDisableNonFriendlyOperation", &t.FDisableNonFriendlyOperation, d...)
	cb.Do("FWalkToCenter", &t.FWalkToCenter, d...)
	cb.Do("FGizmoStartsDisabled", &t.FGizmoStartsDisabled, d...)
	cb.Do("FUseStringListName", &t.FUseStringListName, d...)
	cb.Do("FForceMinimapIcon", &t.FForceMinimapIcon, d...)
	cb.Do("FlOperationRadius", &t.FlOperationRadius, d...)
	cb.Do("Unk_d0b1df5", &t.Unk_d0b1df5, d...)
	cb.Do("FlGizmoUseTime", &t.FlGizmoUseTime, d...)
	cb.Do("SnoChannelingEffect", &t.SnoChannelingEffect, d...)
	cb.Do("Unk_2767229", &t.Unk_2767229, d...)
	cb.Do("FGizmoShowProgressBar", &t.FGizmoShowProgressBar, d...)
	cb.Do("Unk_6d9ebe1", &t.Unk_6d9ebe1, d...)
	cb.Do("Unk_5456245", &t.Unk_5456245, d...)
	cb.Do("Unk_af5815a", &t.Unk_af5815a, d...)
	cb.Do("SnoOnClickEffect", &t.SnoOnClickEffect, d...)
	cb.Do("SnoPickedUpEffect", &t.SnoPickedUpEffect, d...)
	cb.Do("SnoDropOnGroundEffect", &t.SnoDropOnGroundEffect, d...)
	cb.Do("TConditionData", &t.TConditionData, d...)
	cb.Do("SnoPowerOperator", &t.SnoPowerOperator, d...)
	cb.Do("SnoPowerOperate", &t.SnoPowerOperate, d...)
	cb.Do("SnoPowerOperatorActive", &t.SnoPowerOperatorActive, d...)
	cb.Do("SnoPowerOperateActive", &t.SnoPowerOperateActive, d...)
	cb.Do("Unk_359810e", &t.Unk_359810e, d...)
	cb.Do("NCooldown", &t.NCooldown, d...)
	cb.Do("Unk_9c8478e", &t.Unk_9c8478e, d...)
	cb.Do("Unk_d45ed2d", &t.Unk_d45ed2d, d...)
	cb.Do("Unk_f6b20b7", &t.Unk_f6b20b7, d...)
	cb.Do("Unk_54513b8", &t.Unk_54513b8, d...)
	cb.Do("Unk_fd1f378", &t.Unk_fd1f378, d...)
	cb.Do("HGizmoOperateFlavorTextMsgLabel", &t.HGizmoOperateFlavorTextMsgLabel, d...)
	cb.Do("HGizmoOperateDescriptionMsgLabel", &t.HGizmoOperateDescriptionMsgLabel, d...)
	cb.Do("FlGizmoOperateOffset", &t.FlGizmoOperateOffset, d...)
	cb.Do("Unk_ab58cd3", &t.Unk_ab58cd3, d...)
	cb.Do("Unk_91a3966", &t.Unk_91a3966, d...)
	cb.Do("HGizmoChannelingLabel", &t.HGizmoChannelingLabel, d...)
	cb.Do("Unk_4be4371", &t.Unk_4be4371, d...)
	cb.Do("SnoTreasureClass", &t.SnoTreasureClass, d...)
	cb.Do("TLockData", &t.TLockData, d...)
	cb.Do("FChestRemovesCollisionOnOperation", &t.FChestRemovesCollisionOnOperation, d...)
	cb.Do("FChestOperatesOnProximity", &t.FChestOperatesOnProximity, d...)
	cb.Do("FChestLight", &t.FChestLight, d...)
	cb.Do("Unk_51b0c11", &t.Unk_51b0c11, d...)
	cb.Do("Unk_6b4a81d", &t.Unk_6b4a81d, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("FlExpirationDelay", &t.FlExpirationDelay, d...)
	cb.Do("Unk_8385e16", &t.Unk_8385e16, d...)
	cb.Do("Unk_fd778e6", &t.Unk_fd778e6, d...)
}

type RareItemName struct {
	FItemNameIsPrefix     DT_INT
	SnoAffixStringList    DT_SNO
	NAffixStringListIndex DT_INT
	NItemStringListIndex  DT_INT
}

func (t *RareItemName) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.FItemNameIsPrefix, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.SnoAffixStringList, r, &Options{
		Flags: 1,
		Group: 42,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.NAffixStringListIndex, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.NItemStringListIndex, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *RareItemName) Walk(cb WalkCallback, d ...any) {
	cb.Do("FItemNameIsPrefix", &t.FItemNameIsPrefix, d...)
	cb.Do("SnoAffixStringList", &t.SnoAffixStringList, d...)
	cb.Do("NAffixStringListIndex", &t.NAffixStringListIndex, d...)
	cb.Do("NItemStringListIndex", &t.NItemStringListIndex, d...)
}

type FootstepTableDefinition struct {
	TTableType        DT_ENUM
	TPlayerFootsteps  DT_VARIABLEARRAY[*PlayerFootstepTableEntry]
	TMonsterFootsteps DT_VARIABLEARRAY[*MonsterFootstepTableEntry]
}

func (t *FootstepTableDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.TTableType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TPlayerFootsteps, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.TMonsterFootsteps, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *FootstepTableDefinition) Walk(cb WalkCallback, d ...any) {
	cb.Do("TTableType", &t.TTableType, d...)
	cb.Do("TPlayerFootsteps", &t.TPlayerFootsteps, d...)
	cb.Do("TMonsterFootsteps", &t.TMonsterFootsteps, d...)
}

type QuestObjectiveSetLink struct {
	DwDestinationPhaseUID DT_UINT
	ELinkType             DT_ENUM
}

func (t *QuestObjectiveSetLink) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.DwDestinationPhaseUID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.ELinkType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *QuestObjectiveSetLink) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwDestinationPhaseUID", &t.DwDestinationPhaseUID, d...)
	cb.Do("ELinkType", &t.ELinkType, d...)
}

type SNODiskEntry struct {
	SnoGroup     DT_ENUM
	UGuid        DT_UINT
	DwNameOffset DT_UINT
}

func (t *SNODiskEntry) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoGroup, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.UGuid, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwNameOffset, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+12, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *SNODiskEntry) Walk(cb WalkCallback, d ...any) {
	cb.Do("SnoGroup", &t.SnoGroup, d...)
	cb.Do("UGuid", &t.UGuid, d...)
	cb.Do("DwNameOffset", &t.DwNameOffset, d...)
}

type RogueSpecChangeMessage struct {
	THeader  RequiredMessageHeader
	EOldSpec DT_ENUM
	ENewSpec DT_ENUM
}

func (t *RogueSpecChangeMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.EOldSpec, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.ENewSpec, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *RogueSpecChangeMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("EOldSpec", &t.EOldSpec, d...)
	cb.Do("ENewSpec", &t.ENewSpec, d...)
}

type LinearAxisParams struct {
	Unk_9b43ddf DT_FLOAT
	Unk_a4ff40  DT_FLOAT
	FlMaxSpeed  DT_FLOAT
}

func (t *LinearAxisParams) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Unk_9b43ddf, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.Unk_a4ff40, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.FlMaxSpeed, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+12, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *LinearAxisParams) Walk(cb WalkCallback, d ...any) {
	cb.Do("Unk_9b43ddf", &t.Unk_9b43ddf, d...)
	cb.Do("Unk_a4ff40", &t.Unk_a4ff40, d...)
	cb.Do("FlMaxSpeed", &t.FlMaxSpeed, d...)
}

type MarkerNPCActorData struct {
	FRandom      DT_INT
	TColorSet    NPCColorSet
	TItems       NPCItems
	PtComponents DT_FIXEDARRAY[*ValidComponent]
	SLookName    DT_UINT
}

func (t *MarkerNPCActorData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.FRandom, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.TColorSet, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.TItems, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.PtComponents, r, &Options{
		ArrayLength: 4,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.SLookName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+56, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *MarkerNPCActorData) Walk(cb WalkCallback, d ...any) {
	cb.Do("FRandom", &t.FRandom, d...)
	cb.Do("TColorSet", &t.TColorSet, d...)
	cb.Do("TItems", &t.TItems, d...)
	cb.Do("PtComponents", &t.PtComponents, d...)
	cb.Do("SLookName", &t.SLookName, d...)
}

type ScriptEventParamEffectGroup struct {
	// Inherits ScriptEventParamBase
	// Inherits PolymorphicBase
	DwType         DT_UINT
	EParamType     DT_ENUM
	DwPad          DT_UINT
	SnoEffectGroup DT_SNO
}

func (t *ScriptEventParamEffectGroup) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.EParamType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SnoEffectGroup, r, &Options{
		Flags: 513,
		Group: 14,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ScriptEventParamEffectGroup) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("EParamType", &t.EParamType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("SnoEffectGroup", &t.SnoEffectGroup, d...)
}

type WaypointGizmoData struct {
	// Inherits ActorGizmoData
	// Inherits PolymorphicBase
	DwType                           DT_UINT
	DwPad                            DT_UINT
	FDisableNonFriendlyOperation     DT_INT
	FWalkToCenter                    DT_INT
	FGizmoStartsDisabled             DT_INT
	FUseStringListName               DT_INT
	FForceMinimapIcon                DT_INT
	FlOperationRadius                DT_FLOAT
	Unk_d0b1df5                      DT_FLOAT
	FlGizmoUseTime                   DT_FLOAT
	SnoChannelingEffect              DT_SNO
	Unk_2767229                      DT_INT
	FGizmoShowProgressBar            DT_INT
	Unk_6d9ebe1                      DT_INT
	Unk_5456245                      DT_INT
	Unk_af5815a                      DT_INT
	SnoOnClickEffect                 DT_SNO
	SnoPickedUpEffect                DT_SNO
	SnoDropOnGroundEffect            DT_SNO
	TConditionData                   GizmoConditionData
	SnoPowerOperator                 DT_SNO
	SnoPowerOperate                  DT_SNO
	SnoPowerOperatorActive           DT_SNO
	SnoPowerOperateActive            DT_SNO
	Unk_359810e                      DT_INT
	NCooldown                        DT_UINT
	Unk_9c8478e                      DT_UINT
	Unk_d45ed2d                      DT_INT
	Unk_f6b20b7                      DT_INT
	Unk_54513b8                      DT_INT
	Unk_fd1f378                      DT_UINT
	HGizmoOperateFlavorTextMsgLabel  DT_UINT
	HGizmoOperateDescriptionMsgLabel DT_UINT
	FlGizmoOperateOffset             DT_FLOAT
	Unk_ab58cd3                      DT_ENUM
	Unk_91a3966                      DT_UINT
	HGizmoChannelingLabel            DT_UINT
	Unk_4be4371                      DT_INT
}

func (t *WaypointGizmoData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.FDisableNonFriendlyOperation, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.FWalkToCenter, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.FGizmoStartsDisabled, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.FUseStringListName, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.FForceMinimapIcon, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.FlOperationRadius, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.Unk_d0b1df5, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.FlGizmoUseTime, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.SnoChannelingEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.Unk_2767229, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.FGizmoShowProgressBar, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+60, &t.Unk_6d9ebe1, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.Unk_5456245, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.Unk_af5815a, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.SnoOnClickEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.SnoPickedUpEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.SnoDropOnGroundEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.TConditionData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.SnoPowerOperator, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.SnoPowerOperate, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.SnoPowerOperatorActive, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+100, &t.SnoPowerOperateActive, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+104, &t.Unk_359810e, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+108, &t.NCooldown, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.Unk_9c8478e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+116, &t.Unk_d45ed2d, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.Unk_f6b20b7, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+124, &t.Unk_54513b8, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.Unk_fd1f378, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+132, &t.HGizmoOperateFlavorTextMsgLabel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+136, &t.HGizmoOperateDescriptionMsgLabel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+140, &t.FlGizmoOperateOffset, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+144, &t.Unk_ab58cd3, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+148, &t.Unk_91a3966, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+152, &t.HGizmoChannelingLabel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+156, &t.Unk_4be4371, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+160, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *WaypointGizmoData) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("FDisableNonFriendlyOperation", &t.FDisableNonFriendlyOperation, d...)
	cb.Do("FWalkToCenter", &t.FWalkToCenter, d...)
	cb.Do("FGizmoStartsDisabled", &t.FGizmoStartsDisabled, d...)
	cb.Do("FUseStringListName", &t.FUseStringListName, d...)
	cb.Do("FForceMinimapIcon", &t.FForceMinimapIcon, d...)
	cb.Do("FlOperationRadius", &t.FlOperationRadius, d...)
	cb.Do("Unk_d0b1df5", &t.Unk_d0b1df5, d...)
	cb.Do("FlGizmoUseTime", &t.FlGizmoUseTime, d...)
	cb.Do("SnoChannelingEffect", &t.SnoChannelingEffect, d...)
	cb.Do("Unk_2767229", &t.Unk_2767229, d...)
	cb.Do("FGizmoShowProgressBar", &t.FGizmoShowProgressBar, d...)
	cb.Do("Unk_6d9ebe1", &t.Unk_6d9ebe1, d...)
	cb.Do("Unk_5456245", &t.Unk_5456245, d...)
	cb.Do("Unk_af5815a", &t.Unk_af5815a, d...)
	cb.Do("SnoOnClickEffect", &t.SnoOnClickEffect, d...)
	cb.Do("SnoPickedUpEffect", &t.SnoPickedUpEffect, d...)
	cb.Do("SnoDropOnGroundEffect", &t.SnoDropOnGroundEffect, d...)
	cb.Do("TConditionData", &t.TConditionData, d...)
	cb.Do("SnoPowerOperator", &t.SnoPowerOperator, d...)
	cb.Do("SnoPowerOperate", &t.SnoPowerOperate, d...)
	cb.Do("SnoPowerOperatorActive", &t.SnoPowerOperatorActive, d...)
	cb.Do("SnoPowerOperateActive", &t.SnoPowerOperateActive, d...)
	cb.Do("Unk_359810e", &t.Unk_359810e, d...)
	cb.Do("NCooldown", &t.NCooldown, d...)
	cb.Do("Unk_9c8478e", &t.Unk_9c8478e, d...)
	cb.Do("Unk_d45ed2d", &t.Unk_d45ed2d, d...)
	cb.Do("Unk_f6b20b7", &t.Unk_f6b20b7, d...)
	cb.Do("Unk_54513b8", &t.Unk_54513b8, d...)
	cb.Do("Unk_fd1f378", &t.Unk_fd1f378, d...)
	cb.Do("HGizmoOperateFlavorTextMsgLabel", &t.HGizmoOperateFlavorTextMsgLabel, d...)
	cb.Do("HGizmoOperateDescriptionMsgLabel", &t.HGizmoOperateDescriptionMsgLabel, d...)
	cb.Do("FlGizmoOperateOffset", &t.FlGizmoOperateOffset, d...)
	cb.Do("Unk_ab58cd3", &t.Unk_ab58cd3, d...)
	cb.Do("Unk_91a3966", &t.Unk_91a3966, d...)
	cb.Do("HGizmoChannelingLabel", &t.HGizmoChannelingLabel, d...)
	cb.Do("Unk_4be4371", &t.Unk_4be4371, d...)
}

type GemLevelSubcondition struct {
	// Inherits NumericComparisonSubcondition
	// Inherits Subcondition
	// Inherits PolymorphicBase
	DwType        DT_UINT
	BNegate       DT_INT
	EComparisonOp DT_ENUM
	DwPad         DT_UINT
	NLevel        DT_INT
}

func (t *GemLevelSubcondition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BNegate, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.EComparisonOp, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.NLevel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+40, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *GemLevelSubcondition) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("BNegate", &t.BNegate, d...)
	cb.Do("EComparisonOp", &t.EComparisonOp, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("NLevel", &t.NLevel, d...)
}

type Type_2cf6a209 struct {
	DwParentNodeID DT_UINT
	SnoPowerAnim   DT_SNO
}

func (t *Type_2cf6a209) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.DwParentNodeID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.SnoPowerAnim, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_2cf6a209) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwParentNodeID", &t.DwParentNodeID, d...)
	cb.Do("SnoPowerAnim", &t.SnoPowerAnim, d...)
}

type ActorMovingData struct {
	FGenerateFootstepParticles DT_INT
	Unk_56d76cc                DT_INT
	FFastMovementUpdate        DT_INT
}

func (t *ActorMovingData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.FGenerateFootstepParticles, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.Unk_56d76cc, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.FFastMovementUpdate, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+12, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ActorMovingData) Walk(cb WalkCallback, d ...any) {
	cb.Do("FGenerateFootstepParticles", &t.FGenerateFootstepParticles, d...)
	cb.Do("Unk_56d76cc", &t.Unk_56d76cc, d...)
	cb.Do("FFastMovementUpdate", &t.FFastMovementUpdate, d...)
}

type MarkerInstanceGroupAO struct {
	Unk_7ccd73           DT_INT
	NInstanceGroupOffset DT_INT
}

func (t *MarkerInstanceGroupAO) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Unk_7ccd73, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.NInstanceGroupOffset, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *MarkerInstanceGroupAO) Walk(cb WalkCallback, d ...any) {
	cb.Do("Unk_7ccd73", &t.Unk_7ccd73, d...)
	cb.Do("NInstanceGroupOffset", &t.NInstanceGroupOffset, d...)
}

type LightingDepthSettings struct {
	Unk_50f7690          DT_UINT
	Unk_29377d2          DT_UINT
	Unk_cd68eaf          DT_UINT
	DwLightingDepthLimit DT_UINT
}

func (t *LightingDepthSettings) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Unk_50f7690, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.Unk_29377d2, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.Unk_cd68eaf, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwLightingDepthLimit, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *LightingDepthSettings) Walk(cb WalkCallback, d ...any) {
	cb.Do("Unk_50f7690", &t.Unk_50f7690, d...)
	cb.Do("Unk_29377d2", &t.Unk_29377d2, d...)
	cb.Do("Unk_cd68eaf", &t.Unk_cd68eaf, d...)
	cb.Do("DwLightingDepthLimit", &t.DwLightingDepthLimit, d...)
}

type PlayerHasUnlockedMountsSubcondition struct {
	// Inherits Subcondition
	// Inherits PolymorphicBase
	DwType  DT_UINT
	BNegate DT_INT
	DwPad   DT_UINT
}

func (t *PlayerHasUnlockedMountsSubcondition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BNegate, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PlayerHasUnlockedMountsSubcondition) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("BNegate", &t.BNegate, d...)
	cb.Do("DwPad", &t.DwPad, d...)
}

type POICameraInstanceData struct {
	PtProxData      DT_POLYMORPHIC_VARIABLEARRAY[*ProximityDataBase]
	SnoCameraEffect DT_SNO
	Unk_a183154     DT_INT
	Unk_6a602d7     DT_FLOAT
	Unk_c68b42      DT_FLOAT
	Unk_77f6d53     DT_FLOAT
	Unk_da484be     DT_FLOAT
}

func (t *POICameraInstanceData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.PtProxData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SnoCameraEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.Unk_a183154, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.Unk_6a602d7, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.Unk_c68b42, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.Unk_77f6d53, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.Unk_da484be, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *POICameraInstanceData) Walk(cb WalkCallback, d ...any) {
	cb.Do("PtProxData", &t.PtProxData, d...)
	cb.Do("SnoCameraEffect", &t.SnoCameraEffect, d...)
	cb.Do("Unk_a183154", &t.Unk_a183154, d...)
	cb.Do("Unk_6a602d7", &t.Unk_6a602d7, d...)
	cb.Do("Unk_c68b42", &t.Unk_c68b42, d...)
	cb.Do("Unk_77f6d53", &t.Unk_77f6d53, d...)
	cb.Do("Unk_da484be", &t.Unk_da484be, d...)
}

type UITreeStyle struct {
	// Inherits UIWindowStyle
	// Inherits UIControlStyle
	// Inherits PolymorphicBase
	DwType                    DT_UINT
	DwPad                     DT_UINT
	HParentStyle              UIControlHandle
	Unk_441f783               DT_INT64
	M_eHasModifiedPowerTagMap DT_TAGMAP[*DT_ENUM]
	TConsoleInput             UIControlConsoleInput
	Unk_b4f614c               DT_TAGMAP[*DT_ENUM]
	Unk_466d804               DT_TAGMAP[*DT_ENUM]
}

func (t *UITreeStyle) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.HParentStyle, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_441f783, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.M_eHasModifiedPowerTagMap, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.TConsoleInput, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.Unk_b4f614c, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.Unk_466d804, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+96, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *UITreeStyle) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("HParentStyle", &t.HParentStyle, d...)
	cb.Do("Unk_441f783", &t.Unk_441f783, d...)
	cb.Do("M_eHasModifiedPowerTagMap", &t.M_eHasModifiedPowerTagMap, d...)
	cb.Do("TConsoleInput", &t.TConsoleInput, d...)
	cb.Do("Unk_b4f614c", &t.Unk_b4f614c, d...)
	cb.Do("Unk_466d804", &t.Unk_466d804, d...)
}

type PlayerBuffSubcondition struct {
	// Inherits Subcondition
	// Inherits PolymorphicBase
	DwType       DT_UINT
	BNegate      DT_INT
	DwPad        DT_UINT
	SnoBuffPower DT_SNO
	SzBuffDataID DT_UINT
}

func (t *PlayerBuffSubcondition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BNegate, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SnoBuffPower, r, &Options{
		Flags: 513,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.SzBuffDataID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PlayerBuffSubcondition) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("BNegate", &t.BNegate, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("SnoBuffPower", &t.SnoBuffPower, d...)
	cb.Do("SzBuffDataID", &t.SzBuffDataID, d...)
}

type DebugSetActorUpdateIntervalMessage struct {
	THeader        RequiredMessageHeader
	Ann            DT_ACD_NETWORK_NAME
	UpdateInterval DT_INT
}

func (t *DebugSetActorUpdateIntervalMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Ann, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.UpdateInterval, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+28, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *DebugSetActorUpdateIntervalMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("Ann", &t.Ann, d...)
	cb.Do("UpdateInterval", &t.UpdateInterval, d...)
}

type MonsterFixedAffixData struct {
	SnoAffix     DT_SNO
	NMinLevelReq DT_INT
}

func (t *MonsterFixedAffixData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoAffix, r, &Options{
		Flags: 1,
		Group: 107,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.NMinLevelReq, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *MonsterFixedAffixData) Walk(cb WalkCallback, d ...any) {
	cb.Do("SnoAffix", &t.SnoAffix, d...)
	cb.Do("NMinLevelReq", &t.NMinLevelReq, d...)
}

type EssencePowerTierEntry_Table struct {
	// Inherits GameBalanceTable
	// Inherits PolymorphicBase
	DwType   DT_UINT
	DwPad    DT_UINT
	TEntries DT_VARIABLEARRAY[*EssencePowerTierEntry]
}

func (t *EssencePowerTierEntry_Table) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TEntries, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *EssencePowerTierEntry_Table) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("TEntries", &t.TEntries, d...)
}

type GameTestingBuyItem struct {
	THeader      RequiredMessageHeader
	DwItemAmount DT_INT64
}

func (t *GameTestingBuyItem) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.DwItemAmount, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *GameTestingBuyItem) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("DwItemAmount", &t.DwItemAmount, d...)
}

type PrefetchRunOnDisk struct {
	UCount DT_UINT
	UStart DT_UINT
}

func (t *PrefetchRunOnDisk) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.UCount, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.UStart, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PrefetchRunOnDisk) Walk(cb WalkCallback, d ...any) {
	cb.Do("UCount", &t.UCount, d...)
	cb.Do("UStart", &t.UStart, d...)
}

type WorldServerData struct {
	PtSceneChunks DT_VARIABLEARRAY[*SceneChunk]
	SnoScript     DT_SNO
	NSeed         DT_INT
	FlMinX        DT_FLOAT
	FlMinY        DT_FLOAT
	FlMaxX        DT_FLOAT
	FlMaxY        DT_FLOAT
	ArWeatherSNOs DT_VARIABLEARRAY[*DT_SNO]
	ArSubzones    DT_VARIABLEARRAY[*DT_SNO]
}

func (t *WorldServerData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.PtSceneChunks, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoScript, r, &Options{
		Flags: 1,
		Group: 35,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.NSeed, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.FlMinX, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.FlMinY, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.FlMaxX, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.FlMaxY, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.ArWeatherSNOs, r, &Options{
		Flags: 1,
		Group: 47,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.ArSubzones, r, &Options{Group: 80}); err != nil {
		return err
	}
	if _, err := r.Seek(p+72, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *WorldServerData) Walk(cb WalkCallback, d ...any) {
	cb.Do("PtSceneChunks", &t.PtSceneChunks, d...)
	cb.Do("SnoScript", &t.SnoScript, d...)
	cb.Do("NSeed", &t.NSeed, d...)
	cb.Do("FlMinX", &t.FlMinX, d...)
	cb.Do("FlMinY", &t.FlMinY, d...)
	cb.Do("FlMaxX", &t.FlMaxX, d...)
	cb.Do("FlMaxY", &t.FlMaxY, d...)
	cb.Do("ArWeatherSNOs", &t.ArWeatherSNOs, d...)
	cb.Do("ArSubzones", &t.ArSubzones, d...)
}

type SocketedEffects struct {
	ESocketTarget DT_ENUM
	PtAttributes  DT_VARIABLEARRAY[*AttributeSpecifier]
	TStringLabel  DT_UINT
}

func (t *SocketedEffects) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.ESocketTarget, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.PtAttributes, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.TStringLabel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *SocketedEffects) Walk(cb WalkCallback, d ...any) {
	cb.Do("ESocketTarget", &t.ESocketTarget, d...)
	cb.Do("PtAttributes", &t.PtAttributes, d...)
	cb.Do("TStringLabel", &t.TStringLabel, d...)
}

type ActorAnimSetPreloadHelper struct {
	SnoActor DT_SNO
	TAnimSet SerialDataInfo
}

func (t *ActorAnimSetPreloadHelper) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoActor, r, &Options{
		Flags: 1,
		Group: 1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.TAnimSet, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+12, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ActorAnimSetPreloadHelper) Walk(cb WalkCallback, d ...any) {
	cb.Do("SnoActor", &t.SnoActor, d...)
	cb.Do("TAnimSet", &t.TAnimSet, d...)
}

type Type_2ebd3c08 struct {
	SnoReputation DT_SNO
}

func (t *Type_2ebd3c08) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoReputation, r, &Options{
		Flags: 1,
		Group: 105,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+4, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_2ebd3c08) Walk(cb WalkCallback, d ...any) {
	cb.Do("SnoReputation", &t.SnoReputation, d...)
}

type FavorLevel_Table struct {
	// Inherits GameBalanceTable
	// Inherits PolymorphicBase
	DwType   DT_UINT
	DwPad    DT_UINT
	TEntries DT_VARIABLEARRAY[*FavorLevel]
}

func (t *FavorLevel_Table) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TEntries, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *FavorLevel_Table) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("TEntries", &t.TEntries, d...)
}

type PlayerSkillModPointsSubcondition struct {
	// Inherits NumericComparisonSubcondition
	// Inherits Subcondition
	// Inherits PolymorphicBase
	DwType          DT_UINT
	BNegate         DT_INT
	EComparisonOp   DT_ENUM
	DwPad           DT_UINT
	SnoSkillPower   DT_SNO
	SzModName       DT_UINT
	NSkillModPoints DT_INT
}

func (t *PlayerSkillModPointsSubcondition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BNegate, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.EComparisonOp, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.SnoSkillPower, r, &Options{
		Flags: 513,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.SzModName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.NSkillModPoints, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PlayerSkillModPointsSubcondition) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("BNegate", &t.BNegate, d...)
	cb.Do("EComparisonOp", &t.EComparisonOp, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("SnoSkillPower", &t.SnoSkillPower, d...)
	cb.Do("SzModName", &t.SzModName, d...)
	cb.Do("NSkillModPoints", &t.NSkillModPoints, d...)
}

type ParagonUnequipBoardMessage struct {
	THeader  RequiredMessageHeader
	SnoBoard DT_SNO
}

func (t *ParagonUnequipBoardMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoBoard, r, &Options{
		Flags: 1,
		Group: 108,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+20, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ParagonUnequipBoardMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("SnoBoard", &t.SnoBoard, d...)
}

type ActorMonsterData struct {
	EGender                       DT_ENUM
	FIsNPC                        DT_INT
	Unk_7c902e4                   DT_INT
	Unk_ac5481c                   DT_INT
	SnoNPCOperateSound            DT_SNO
	SnoNPCPowerOperate            DT_SNO
	FlNPCInteractDistance         DT_FLOAT
	TNPCServiceData               NPCServiceData
	EHirelingClass                DT_ENUM
	FConvertsDamageToDamageStates DT_INT
	Unk_6bce993                   DT_VARIABLEARRAY[*MonsterDamageStateThresholds]
	Unk_6b4a81d                   DT_FLOAT
	SnoMonsterFamily              DT_SNO
	SzArchetype                   DT_UINT
	SnoMalignantAppearance        DT_SNO
	EBaseElement                  DT_ENUM
	SnoMainHand                   DT_SNO
	SnoOffHand                    DT_SNO
	TLevelScaling                 LevelScalingData
	NGoldGranted                  DT_INT
	SnoTreasureClass              DT_SNO
	SnoTreasureClassElite         DT_SNO
	SnoTreasureClassSuperElite    DT_SNO
	FlSummonLifetime              DT_FLOAT
	NSummonMaxConcurrent          DT_INT
	NSummonMaxTotal               DT_INT
	ArAIBehaviors                 DT_FIXEDARRAY[*DT_SNO]
	BKillSummonsOnDeath           DT_INT
	SnoSummonActor                DT_FIXEDARRAY[*DT_SNO]
	ArSummonActors                DT_VARIABLEARRAY[*SummonActorEntry]
	SnoAffixes                    DT_FIXEDARRAY[*DT_SNO]
	TFixedAffixData               DT_FIXEDARRAY[*MonsterFixedAffixData]
	SnoDisallowedAffixes          DT_VARIABLEARRAY[*DT_SNO]
	ArForcedMonsterTags           DT_VARIABLEARRAY[*DT_GBID]
	EAITargetStyleNormal          DT_ENUM
	EAITargetStyleElite           DT_ENUM
	GbidAITargetingStyleNormal    DT_GBID
	GbidAITargetingStyleElite     DT_GBID
	DwLookAtTargetingFlags        DT_UINT
	SzInternalName                DT_CHARARRAY
	BDoesRetreat                  DT_INT
	Unk_50569ba                   DT_INT
	DwCCImmunityFlags             DT_UINT
	SnoMount                      DT_SNO
	SnoPowerPossessed             DT_SNO
	SnoFootsteps                  DT_SNO
	EOverriddenMonsterRarity      DT_ENUM
	Unk_7859c5b                   DT_INT
	BIsWorldBoss                  DT_INT
	Unk_bc58cee                   DT_INT
	Unk_7fdab9c                   DT_INT
	Unk_e7ee8f1                   DT_INT
	Unk_e4c90d3                   DT_INT
	Unk_12ecd6a                   DT_INT
	Unk_c0565bf                   DT_INT
	FlHPScalarOverride            DT_FLOAT
	FlDamageScalarOverride        DT_FLOAT
	Unk_c2cc767                   DT_SNO
	SnoStaggerPower               DT_SNO
	SnoStaggerSettings            DT_SNO
	SnoBossObserver               DT_SNO
	Unk_1627b04                   DT_FLOAT
	Unk_401e0d6                   DT_FLOAT
	Unk_401dfd8                   DT_FLOAT
	Unk_f68cd00                   DT_FLOAT
	Unk_f68cc02                   DT_FLOAT
	FlBossCameraSmoothing         DT_FLOAT
	Unk_5428a5e                   DT_FLOAT
	Unk_3b9132c                   DT_FLOAT
	Unk_c0cc954                   DT_FLOAT
	Unk_d5178b2                   DT_FLOAT
	Unk_e08f0df                   DT_FLOAT
}

func (t *ActorMonsterData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.EGender, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.FIsNPC, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.Unk_7c902e4, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.Unk_ac5481c, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoNPCOperateSound, r, &Options{
		Flags: 1,
		Group: 40,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.SnoNPCPowerOperate, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.FlNPCInteractDistance, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.TNPCServiceData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.EHirelingClass, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.FConvertsDamageToDamageStates, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.Unk_6bce993, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.Unk_6b4a81d, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+100, &t.SnoMonsterFamily, r, &Options{
		Flags: 1,
		Group: 82,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+104, &t.SzArchetype, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+108, &t.SnoMalignantAppearance, r, &Options{
		Flags: 513,
		Group: 9,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.EBaseElement, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+116, &t.SnoMainHand, r, &Options{
		Flags: 1,
		Group: 98,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.SnoOffHand, r, &Options{
		Flags: 1,
		Group: 98,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+124, &t.TLevelScaling, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+140, &t.NGoldGranted, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+144, &t.SnoTreasureClass, r, &Options{
		Flags: 1,
		Group: 52,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+148, &t.SnoTreasureClassElite, r, &Options{
		Flags: 1,
		Group: 52,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+152, &t.SnoTreasureClassSuperElite, r, &Options{
		Flags: 1,
		Group: 52,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+156, &t.FlSummonLifetime, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+160, &t.NSummonMaxConcurrent, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+164, &t.NSummonMaxTotal, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+168, &t.ArAIBehaviors, r, &Options{
		ArrayLength: 6,
		Flags:       1,
		Group:       3,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+192, &t.BKillSummonsOnDeath, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+196, &t.SnoSummonActor, r, &Options{
		ArrayLength: 6,
		Flags:       1,
		Group:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+224, &t.ArSummonActors, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+240, &t.SnoAffixes, r, &Options{
		ArrayLength: 4,
		Flags:       1,
		Group:       107,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+256, &t.TFixedAffixData, r, &Options{
		ArrayLength: 4,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+288, &t.SnoDisallowedAffixes, r, &Options{
		Flags: 513,
		Group: 107,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+304, &t.ArForcedMonsterTags, r, &Options{
		Flags: 1,
		Group: 66,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+320, &t.EAITargetStyleNormal, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+324, &t.EAITargetStyleElite, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+328, &t.GbidAITargetingStyleNormal, r, &Options{
		Flags: 1,
		Group: 42,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+332, &t.GbidAITargetingStyleElite, r, &Options{
		Flags: 1,
		Group: 42,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+336, &t.DwLookAtTargetingFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+340, &t.SzInternalName, r, &Options{
		ArrayLength: 128,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+468, &t.BDoesRetreat, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+472, &t.Unk_50569ba, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+476, &t.DwCCImmunityFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+480, &t.SnoMount, r, &Options{
		Flags: 1,
		Group: 1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+484, &t.SnoPowerPossessed, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+488, &t.SnoFootsteps, r, &Options{
		Flags: 1,
		Group: 149,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+492, &t.EOverriddenMonsterRarity, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+496, &t.Unk_7859c5b, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+500, &t.BIsWorldBoss, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+504, &t.Unk_bc58cee, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+508, &t.Unk_7fdab9c, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+512, &t.Unk_e7ee8f1, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+516, &t.Unk_e4c90d3, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+520, &t.Unk_12ecd6a, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+524, &t.Unk_c0565bf, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+528, &t.FlHPScalarOverride, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+532, &t.FlDamageScalarOverride, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+536, &t.Unk_c2cc767, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+540, &t.SnoStaggerPower, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+544, &t.SnoStaggerSettings, r, &Options{
		Flags: 1,
		Group: 130,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+548, &t.SnoBossObserver, r, &Options{
		Flags: 1,
		Group: 26,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+552, &t.Unk_1627b04, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+556, &t.Unk_401e0d6, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+560, &t.Unk_401dfd8, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+564, &t.Unk_f68cd00, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+568, &t.Unk_f68cc02, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+572, &t.FlBossCameraSmoothing, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+576, &t.Unk_5428a5e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+580, &t.Unk_3b9132c, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+584, &t.Unk_c0cc954, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+588, &t.Unk_d5178b2, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+592, &t.Unk_e08f0df, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+600, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ActorMonsterData) Walk(cb WalkCallback, d ...any) {
	cb.Do("EGender", &t.EGender, d...)
	cb.Do("FIsNPC", &t.FIsNPC, d...)
	cb.Do("Unk_7c902e4", &t.Unk_7c902e4, d...)
	cb.Do("Unk_ac5481c", &t.Unk_ac5481c, d...)
	cb.Do("SnoNPCOperateSound", &t.SnoNPCOperateSound, d...)
	cb.Do("SnoNPCPowerOperate", &t.SnoNPCPowerOperate, d...)
	cb.Do("FlNPCInteractDistance", &t.FlNPCInteractDistance, d...)
	cb.Do("TNPCServiceData", &t.TNPCServiceData, d...)
	cb.Do("EHirelingClass", &t.EHirelingClass, d...)
	cb.Do("FConvertsDamageToDamageStates", &t.FConvertsDamageToDamageStates, d...)
	cb.Do("Unk_6bce993", &t.Unk_6bce993, d...)
	cb.Do("Unk_6b4a81d", &t.Unk_6b4a81d, d...)
	cb.Do("SnoMonsterFamily", &t.SnoMonsterFamily, d...)
	cb.Do("SzArchetype", &t.SzArchetype, d...)
	cb.Do("SnoMalignantAppearance", &t.SnoMalignantAppearance, d...)
	cb.Do("EBaseElement", &t.EBaseElement, d...)
	cb.Do("SnoMainHand", &t.SnoMainHand, d...)
	cb.Do("SnoOffHand", &t.SnoOffHand, d...)
	cb.Do("TLevelScaling", &t.TLevelScaling, d...)
	cb.Do("NGoldGranted", &t.NGoldGranted, d...)
	cb.Do("SnoTreasureClass", &t.SnoTreasureClass, d...)
	cb.Do("SnoTreasureClassElite", &t.SnoTreasureClassElite, d...)
	cb.Do("SnoTreasureClassSuperElite", &t.SnoTreasureClassSuperElite, d...)
	cb.Do("FlSummonLifetime", &t.FlSummonLifetime, d...)
	cb.Do("NSummonMaxConcurrent", &t.NSummonMaxConcurrent, d...)
	cb.Do("NSummonMaxTotal", &t.NSummonMaxTotal, d...)
	cb.Do("ArAIBehaviors", &t.ArAIBehaviors, d...)
	cb.Do("BKillSummonsOnDeath", &t.BKillSummonsOnDeath, d...)
	cb.Do("SnoSummonActor", &t.SnoSummonActor, d...)
	cb.Do("ArSummonActors", &t.ArSummonActors, d...)
	cb.Do("SnoAffixes", &t.SnoAffixes, d...)
	cb.Do("TFixedAffixData", &t.TFixedAffixData, d...)
	cb.Do("SnoDisallowedAffixes", &t.SnoDisallowedAffixes, d...)
	cb.Do("ArForcedMonsterTags", &t.ArForcedMonsterTags, d...)
	cb.Do("EAITargetStyleNormal", &t.EAITargetStyleNormal, d...)
	cb.Do("EAITargetStyleElite", &t.EAITargetStyleElite, d...)
	cb.Do("GbidAITargetingStyleNormal", &t.GbidAITargetingStyleNormal, d...)
	cb.Do("GbidAITargetingStyleElite", &t.GbidAITargetingStyleElite, d...)
	cb.Do("DwLookAtTargetingFlags", &t.DwLookAtTargetingFlags, d...)
	cb.Do("SzInternalName", &t.SzInternalName, d...)
	cb.Do("BDoesRetreat", &t.BDoesRetreat, d...)
	cb.Do("Unk_50569ba", &t.Unk_50569ba, d...)
	cb.Do("DwCCImmunityFlags", &t.DwCCImmunityFlags, d...)
	cb.Do("SnoMount", &t.SnoMount, d...)
	cb.Do("SnoPowerPossessed", &t.SnoPowerPossessed, d...)
	cb.Do("SnoFootsteps", &t.SnoFootsteps, d...)
	cb.Do("EOverriddenMonsterRarity", &t.EOverriddenMonsterRarity, d...)
	cb.Do("Unk_7859c5b", &t.Unk_7859c5b, d...)
	cb.Do("BIsWorldBoss", &t.BIsWorldBoss, d...)
	cb.Do("Unk_bc58cee", &t.Unk_bc58cee, d...)
	cb.Do("Unk_7fdab9c", &t.Unk_7fdab9c, d...)
	cb.Do("Unk_e7ee8f1", &t.Unk_e7ee8f1, d...)
	cb.Do("Unk_e4c90d3", &t.Unk_e4c90d3, d...)
	cb.Do("Unk_12ecd6a", &t.Unk_12ecd6a, d...)
	cb.Do("Unk_c0565bf", &t.Unk_c0565bf, d...)
	cb.Do("FlHPScalarOverride", &t.FlHPScalarOverride, d...)
	cb.Do("FlDamageScalarOverride", &t.FlDamageScalarOverride, d...)
	cb.Do("Unk_c2cc767", &t.Unk_c2cc767, d...)
	cb.Do("SnoStaggerPower", &t.SnoStaggerPower, d...)
	cb.Do("SnoStaggerSettings", &t.SnoStaggerSettings, d...)
	cb.Do("SnoBossObserver", &t.SnoBossObserver, d...)
	cb.Do("Unk_1627b04", &t.Unk_1627b04, d...)
	cb.Do("Unk_401e0d6", &t.Unk_401e0d6, d...)
	cb.Do("Unk_401dfd8", &t.Unk_401dfd8, d...)
	cb.Do("Unk_f68cd00", &t.Unk_f68cd00, d...)
	cb.Do("Unk_f68cc02", &t.Unk_f68cc02, d...)
	cb.Do("FlBossCameraSmoothing", &t.FlBossCameraSmoothing, d...)
	cb.Do("Unk_5428a5e", &t.Unk_5428a5e, d...)
	cb.Do("Unk_3b9132c", &t.Unk_3b9132c, d...)
	cb.Do("Unk_c0cc954", &t.Unk_c0cc954, d...)
	cb.Do("Unk_d5178b2", &t.Unk_d5178b2, d...)
	cb.Do("Unk_e08f0df", &t.Unk_e08f0df, d...)
}

type MaterialEnumValueDefinition struct {
	// Inherits DefaultMaterialValueDefinition
	// Inherits PolymorphicBase
	DwType DT_UINT
	DwPad  DT_UINT
	VValue DT_VECTOR4D
}

func (t *MaterialEnumValueDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.VValue, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *MaterialEnumValueDefinition) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("VValue", &t.VValue, d...)
}

type dmMeshTriangleMirror struct {
	I1            DT_INT
	I2            DT_INT
	I3            DT_INT
	W1            DT_INT
	W2            DT_INT
	W3            DT_INT
	DwMaterialId  DT_WORD
	DwGameFlags   DT_WORD
	DwIncludeMask DT_WORD
}

func (t *dmMeshTriangleMirror) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.I1, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.I2, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.I3, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.W1, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.W2, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.W3, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.DwMaterialId, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+26, &t.DwGameFlags, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.DwIncludeMask, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *dmMeshTriangleMirror) Walk(cb WalkCallback, d ...any) {
	cb.Do("I1", &t.I1, d...)
	cb.Do("I2", &t.I2, d...)
	cb.Do("I3", &t.I3, d...)
	cb.Do("W1", &t.W1, d...)
	cb.Do("W2", &t.W2, d...)
	cb.Do("W3", &t.W3, d...)
	cb.Do("DwMaterialId", &t.DwMaterialId, d...)
	cb.Do("DwGameFlags", &t.DwGameFlags, d...)
	cb.Do("DwIncludeMask", &t.DwIncludeMask, d...)
}

type Currencies_Table struct {
	// Inherits GameBalanceTable
	// Inherits PolymorphicBase
	DwType   DT_UINT
	DwPad    DT_UINT
	TEntries DT_VARIABLEARRAY[*Currencies]
}

func (t *Currencies_Table) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TEntries, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Currencies_Table) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("TEntries", &t.TEntries, d...)
}

type WorldTierUnlockedMessage struct {
	THeader    RequiredMessageHeader
	EWorldTier DT_INT
}

func (t *WorldTierUnlockedMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.EWorldTier, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+20, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *WorldTierUnlockedMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("EWorldTier", &t.EWorldTier, d...)
}

type ScoreStatistic struct{}

func (t *ScoreStatistic) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if _, err := r.Seek(p+1, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ScoreStatistic) Walk(cb WalkCallback, d ...any) {}

type SpeedTreeWind8 struct {
	// Inherits SpeedTreeWindBase
	// Inherits PolymorphicBase
	DwType  DT_UINT
	DwPad   DT_UINT
	TParams SpeedTreeWind8Params
}

func (t *SpeedTreeWind8) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TParams, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+1000, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *SpeedTreeWind8) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("TParams", &t.TParams, d...)
}

type BoneStructureInfo struct {
	TBoneName       AppBone
	TParentBoneName AppBone
	FSnapGround     DT_INT
}

func (t *BoneStructureInfo) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.TBoneName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.TParentBoneName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.FSnapGround, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+12, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *BoneStructureInfo) Walk(cb WalkCallback, d ...any) {
	cb.Do("TBoneName", &t.TBoneName, d...)
	cb.Do("TParentBoneName", &t.TParentBoneName, d...)
	cb.Do("FSnapGround", &t.FSnapGround, d...)
}

type PlayerActorSetInitialMessage struct {
	THeader               RequiredMessageHeader
	Ann                   DT_ACD_NETWORK_NAME
	DwPlayerGameAccountId DT_UINT
}

func (t *PlayerActorSetInitialMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Ann, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.DwPlayerGameAccountId, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+28, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PlayerActorSetInitialMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("Ann", &t.Ann, d...)
	cb.Do("DwPlayerGameAccountId", &t.DwPlayerGameAccountId, d...)
}

type PhaseJumpDestinationReached struct {
	// Inherits PhaseJumpBase
	// Inherits PolymorphicBase
	DwType       DT_UINT
	Unk_2de4987  DT_UINT
	ArConditions DT_POLYMORPHIC_VARIABLEARRAY[*DT_INT64]
	BEnd         DT_INT
	DwPad        DT_UINT
	Unk_b8abd18  DT_FLOAT
}

func (t *PhaseJumpDestinationReached) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_2de4987, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ArConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.BEnd, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.Unk_b8abd18, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+64, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PhaseJumpDestinationReached) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("Unk_2de4987", &t.Unk_2de4987, d...)
	cb.Do("ArConditions", &t.ArConditions, d...)
	cb.Do("BEnd", &t.BEnd, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("Unk_b8abd18", &t.Unk_b8abd18, d...)
}

type StoryboardUIControlSetValueTrack_RGBAColor struct {
	DwType          DT_UINT
	TNodeCollection StoryboardValueNodeCollection_RGBAColor
	Unk_77ed19a     DT_ENUM
	DwPad           DT_UINT
}

func (t *StoryboardUIControlSetValueTrack_RGBAColor) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TNodeCollection, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.Unk_77ed19a, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+56, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *StoryboardUIControlSetValueTrack_RGBAColor) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("TNodeCollection", &t.TNodeCollection, d...)
	cb.Do("Unk_77ed19a", &t.Unk_77ed19a, d...)
	cb.Do("DwPad", &t.DwPad, d...)
}

type LoreDefinition struct {
	NXPTier         DT_INT
	SnoConversation DT_SNO
	Unk_f4b6cde     Type_56ff7d6a
}

func (t *LoreDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.NXPTier, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.SnoConversation, r, &Options{
		Flags: 1,
		Group: 12,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_f4b6cde, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *LoreDefinition) Walk(cb WalkCallback, d ...any) {
	cb.Do("NXPTier", &t.NXPTier, d...)
	cb.Do("SnoConversation", &t.SnoConversation, d...)
	cb.Do("Unk_f4b6cde", &t.Unk_f4b6cde, d...)
}

type ShaderNodeBBEFormula struct {
	DwFormulaHash DT_UINT
	BEvaluateOnce DT_INT
}

func (t *ShaderNodeBBEFormula) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.DwFormulaHash, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.BEvaluateOnce, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ShaderNodeBBEFormula) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwFormulaHash", &t.DwFormulaHash, d...)
	cb.Do("BEvaluateOnce", &t.BEvaluateOnce, d...)
}

type OnDotApplyBuffCallback struct {
	// Inherits BuffCallbackBase
	// Inherits PolymorphicBase
	DwType                DT_UINT
	DwPad                 DT_UINT
	SnoTriggerEffectGroup DT_SNO
	ArConditions          DT_POLYMORPHIC_VARIABLEARRAY[*DT_INT64]
}

func (t *OnDotApplyBuffCallback) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoTriggerEffectGroup, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ArConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *OnDotApplyBuffCallback) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("SnoTriggerEffectGroup", &t.SnoTriggerEffectGroup, d...)
	cb.Do("ArConditions", &t.ArConditions, d...)
}

type PowerPayloadDefinition struct {
	Unk_84473c1                DT_SNO
	Unk_2c0d1b7                DT_SNO
	DwID                       DT_UINT
	EForcedDamageType          DT_ENUM
	TDamage                    HitpointSpecifier
	BHasCustomDamageVariance   DT_INT
	TDamageVariance            DT_STRING_FORMULA
	Unk_c1c7b04                DT_INT
	Unk_907cc39                DT_STRING_FORMULA
	TFortifiedHealth           HitpointSpecifier
	TApplyFreeze               DT_STRING_FORMULA
	Unk_634341a                DT_STRING_FORMULA
	Unk_e659b0f                DT_ENUM
	THeal                      HitpointSpecifier
	EHealType                  DT_ENUM
	BPlayHealEffect            DT_INT
	Unk_8bc45f2                DT_INT
	Unk_15c6c03                DT_INT
	Unk_e842c84                DT_INT
	Unk_b8f2b                  DT_ENUM
	BHasCombatEffectOverride   DT_INT
	TCombatEffectOverride      DT_STRING_FORMULA
	Unk_ddcd868                DT_ENUM
	SnoNormalHitEffectGroup    DT_SNO
	SnoTargetImpactEffectGroup DT_SNO
	Unk_b65cd61                DT_FLOAT
	IPowerNeedTarget           DT_INT
	Unk_b9a00d9                DT_INT
	Unk_969096b                DT_INT
	Unk_5885b8                 DT_ENUM
	Unk_f38eac9                DT_INT
	TOnHitSoundsPayload        OnHitSounds
}

func (t *PowerPayloadDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Unk_84473c1, r, &Options{
		Flags: 1,
		Group: 98,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.Unk_2c0d1b7, r, &Options{
		Flags: 1,
		Group: 98,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.EForcedDamageType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TDamage, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.BHasCustomDamageVariance, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.TDamageVariance, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.Unk_c1c7b04, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+136, &t.Unk_907cc39, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+168, &t.TFortifiedHealth, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+240, &t.TApplyFreeze, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+272, &t.Unk_634341a, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+304, &t.Unk_e659b0f, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+312, &t.THeal, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+384, &t.EHealType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+388, &t.BPlayHealEffect, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+392, &t.Unk_8bc45f2, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+396, &t.Unk_15c6c03, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+400, &t.Unk_e842c84, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+404, &t.Unk_b8f2b, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+408, &t.BHasCombatEffectOverride, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+416, &t.TCombatEffectOverride, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+448, &t.Unk_ddcd868, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+452, &t.SnoNormalHitEffectGroup, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+456, &t.SnoTargetImpactEffectGroup, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+460, &t.Unk_b65cd61, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+464, &t.IPowerNeedTarget, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+468, &t.Unk_b9a00d9, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+472, &t.Unk_969096b, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+476, &t.Unk_5885b8, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+480, &t.Unk_f38eac9, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+484, &t.TOnHitSoundsPayload, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+496, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PowerPayloadDefinition) Walk(cb WalkCallback, d ...any) {
	cb.Do("Unk_84473c1", &t.Unk_84473c1, d...)
	cb.Do("Unk_2c0d1b7", &t.Unk_2c0d1b7, d...)
	cb.Do("DwID", &t.DwID, d...)
	cb.Do("EForcedDamageType", &t.EForcedDamageType, d...)
	cb.Do("TDamage", &t.TDamage, d...)
	cb.Do("BHasCustomDamageVariance", &t.BHasCustomDamageVariance, d...)
	cb.Do("TDamageVariance", &t.TDamageVariance, d...)
	cb.Do("Unk_c1c7b04", &t.Unk_c1c7b04, d...)
	cb.Do("Unk_907cc39", &t.Unk_907cc39, d...)
	cb.Do("TFortifiedHealth", &t.TFortifiedHealth, d...)
	cb.Do("TApplyFreeze", &t.TApplyFreeze, d...)
	cb.Do("Unk_634341a", &t.Unk_634341a, d...)
	cb.Do("Unk_e659b0f", &t.Unk_e659b0f, d...)
	cb.Do("THeal", &t.THeal, d...)
	cb.Do("EHealType", &t.EHealType, d...)
	cb.Do("BPlayHealEffect", &t.BPlayHealEffect, d...)
	cb.Do("Unk_8bc45f2", &t.Unk_8bc45f2, d...)
	cb.Do("Unk_15c6c03", &t.Unk_15c6c03, d...)
	cb.Do("Unk_e842c84", &t.Unk_e842c84, d...)
	cb.Do("Unk_b8f2b", &t.Unk_b8f2b, d...)
	cb.Do("BHasCombatEffectOverride", &t.BHasCombatEffectOverride, d...)
	cb.Do("TCombatEffectOverride", &t.TCombatEffectOverride, d...)
	cb.Do("Unk_ddcd868", &t.Unk_ddcd868, d...)
	cb.Do("SnoNormalHitEffectGroup", &t.SnoNormalHitEffectGroup, d...)
	cb.Do("SnoTargetImpactEffectGroup", &t.SnoTargetImpactEffectGroup, d...)
	cb.Do("Unk_b65cd61", &t.Unk_b65cd61, d...)
	cb.Do("IPowerNeedTarget", &t.IPowerNeedTarget, d...)
	cb.Do("Unk_b9a00d9", &t.Unk_b9a00d9, d...)
	cb.Do("Unk_969096b", &t.Unk_969096b, d...)
	cb.Do("Unk_5885b8", &t.Unk_5885b8, d...)
	cb.Do("Unk_f38eac9", &t.Unk_f38eac9, d...)
	cb.Do("TOnHitSoundsPayload", &t.TOnHitSoundsPayload, d...)
}

type AICellBytes struct {
	M_data DT_VARIABLEARRAY[*DT_BYTE]
}

func (t *AICellBytes) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.M_data, r, &Options{Flags: 262144}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *AICellBytes) Walk(cb WalkCallback, d ...any) {
	cb.Do("M_data", &t.M_data, d...)
}

type SurfaceGrid struct {
	Grid         DT_VARIABLEARRAY[*DT_WORD]
	ArPrimitives DT_VARIABLEARRAY[*SurfaceGridPrimitive]
	AabbBounds   AABB
	DwRows       DT_UINT
	DwColumns    DT_UINT
}

func (t *SurfaceGrid) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Grid, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.ArPrimitives, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.AabbBounds, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.DwRows, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+60, &t.DwColumns, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+64, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *SurfaceGrid) Walk(cb WalkCallback, d ...any) {
	cb.Do("Grid", &t.Grid, d...)
	cb.Do("ArPrimitives", &t.ArPrimitives, d...)
	cb.Do("AabbBounds", &t.AabbBounds, d...)
	cb.Do("DwRows", &t.DwRows, d...)
	cb.Do("DwColumns", &t.DwColumns, d...)
}

type TrackedAchievementChangedMessage struct {
	THeader               RequiredMessageHeader
	DwPlayerGameAccountId DT_UINT
	SnoAchievement        DT_SNO
	BManuallyTracked      DT_INT
}

func (t *TrackedAchievementChangedMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.DwPlayerGameAccountId, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.SnoAchievement, r, &Options{
		Flags: 1,
		Group: 99,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.BManuallyTracked, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+28, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TrackedAchievementChangedMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("DwPlayerGameAccountId", &t.DwPlayerGameAccountId, d...)
	cb.Do("SnoAchievement", &t.SnoAchievement, d...)
	cb.Do("BManuallyTracked", &t.BManuallyTracked, d...)
}

type ExperienceLevelAlt_Table struct {
	// Inherits GameBalanceTable
	// Inherits PolymorphicBase
	DwType   DT_UINT
	DwPad    DT_UINT
	TEntries DT_VARIABLEARRAY[*ExperienceLevelAlt]
}

func (t *ExperienceLevelAlt_Table) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TEntries, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ExperienceLevelAlt_Table) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("TEntries", &t.TEntries, d...)
}

type SavedPlayerTitle struct {
	SnoPrefix DT_SNO
	SnoSuffix DT_SNO
}

func (t *SavedPlayerTitle) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoPrefix, r, &Options{
		Flags: 1,
		Group: 120,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.SnoSuffix, r, &Options{
		Flags: 1,
		Group: 120,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *SavedPlayerTitle) Walk(cb WalkCallback, d ...any) {
	cb.Do("SnoPrefix", &t.SnoPrefix, d...)
	cb.Do("SnoSuffix", &t.SnoSuffix, d...)
}

type Type_31220ee1 struct {
	FlZoomScaleMin        DT_FLOAT
	Unk_dee8d29           DT_FLOAT
	FlZoomScaleMax        DT_FLOAT
	Unk_92c785e           DT_FLOAT
	Unk_1f05fd7           DT_FLOAT
	FlMouseWheelZoomSpeed DT_FLOAT
	Unk_4548ccf           DT_FLOAT
	Unk_33bda99           DT_FLOAT
	Unk_1c550ca           DT_FLOAT
	Unk_6d6c5ac           DT_FLOAT
	Unk_1b2420c           DT_FLOAT
	Unk_7e4ef05           DT_FLOAT
	Unk_9814907           DT_FLOAT
	Unk_fde953b           DT_FLOAT
	Unk_cc72c59           DT_FLOAT
	Unk_a19ea25           DT_INT
	Unk_9c74994           DT_FLOAT
}

func (t *Type_31220ee1) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.FlZoomScaleMin, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.Unk_dee8d29, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.FlZoomScaleMax, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.Unk_92c785e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_1f05fd7, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.FlMouseWheelZoomSpeed, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_4548ccf, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.Unk_33bda99, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.Unk_1c550ca, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.Unk_6d6c5ac, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.Unk_1b2420c, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.Unk_7e4ef05, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.Unk_9814907, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.Unk_fde953b, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.Unk_cc72c59, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+60, &t.Unk_a19ea25, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.Unk_9c74994, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+68, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_31220ee1) Walk(cb WalkCallback, d ...any) {
	cb.Do("FlZoomScaleMin", &t.FlZoomScaleMin, d...)
	cb.Do("Unk_dee8d29", &t.Unk_dee8d29, d...)
	cb.Do("FlZoomScaleMax", &t.FlZoomScaleMax, d...)
	cb.Do("Unk_92c785e", &t.Unk_92c785e, d...)
	cb.Do("Unk_1f05fd7", &t.Unk_1f05fd7, d...)
	cb.Do("FlMouseWheelZoomSpeed", &t.FlMouseWheelZoomSpeed, d...)
	cb.Do("Unk_4548ccf", &t.Unk_4548ccf, d...)
	cb.Do("Unk_33bda99", &t.Unk_33bda99, d...)
	cb.Do("Unk_1c550ca", &t.Unk_1c550ca, d...)
	cb.Do("Unk_6d6c5ac", &t.Unk_6d6c5ac, d...)
	cb.Do("Unk_1b2420c", &t.Unk_1b2420c, d...)
	cb.Do("Unk_7e4ef05", &t.Unk_7e4ef05, d...)
	cb.Do("Unk_9814907", &t.Unk_9814907, d...)
	cb.Do("Unk_fde953b", &t.Unk_fde953b, d...)
	cb.Do("Unk_cc72c59", &t.Unk_cc72c59, d...)
	cb.Do("Unk_a19ea25", &t.Unk_a19ea25, d...)
	cb.Do("Unk_9c74994", &t.Unk_9c74994, d...)
}

type WwiseMetaDataSoundBank struct {
	// Inherits WwiseSoundBankContentBase
	// Inherits PolymorphicBase
	DwType           DT_UINT
	DwPad            DT_UINT
	PtStreamedSounds DT_VARIABLEARRAY[*WwiseStreamedSound]
	PtWWiseBank      DT_VARIABLEARRAY[*DT_BYTE]
	ArMusicSegments  DT_VARIABLEARRAY[*WwiseMusicPlaylistItem]
}

func (t *WwiseMetaDataSoundBank) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.PtStreamedSounds, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.PtWWiseBank, r, &Options{Flags: 2097152}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.ArMusicSegments, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+64, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *WwiseMetaDataSoundBank) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("PtStreamedSounds", &t.PtStreamedSounds, d...)
	cb.Do("PtWWiseBank", &t.PtWWiseBank, d...)
	cb.Do("ArMusicSegments", &t.ArMusicSegments, d...)
}

type Type_31555106 struct {
	TDuration   DT_STRING_FORMULA
	Unk_bb865d0 DT_INT
}

func (t *Type_31555106) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.TDuration, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.Unk_bb865d0, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+40, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_31555106) Walk(cb WalkCallback, d ...any) {
	cb.Do("TDuration", &t.TDuration, d...)
	cb.Do("Unk_bb865d0", &t.Unk_bb865d0, d...)
}

type PrioritySideQuestIcons struct {
	Unk_6ffbdb1    DT_UINT
	HIconAvailable DT_UINT
	HIconTracked   DT_UINT
	Unk_6093332    DT_UINT
	Unk_b913ea6    DT_UINT
	Unk_cd66645    DT_SNO
	Unk_93fe537    DT_SNO
	Unk_51d2d9a    DT_SNO
}

func (t *PrioritySideQuestIcons) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Unk_6ffbdb1, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.HIconAvailable, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.HIconTracked, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.Unk_6093332, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_b913ea6, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.Unk_cd66645, r, &Options{
		Flags: 1,
		Group: 27,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_93fe537, r, &Options{
		Flags: 1,
		Group: 27,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.Unk_51d2d9a, r, &Options{
		Flags: 1,
		Group: 27,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PrioritySideQuestIcons) Walk(cb WalkCallback, d ...any) {
	cb.Do("Unk_6ffbdb1", &t.Unk_6ffbdb1, d...)
	cb.Do("HIconAvailable", &t.HIconAvailable, d...)
	cb.Do("HIconTracked", &t.HIconTracked, d...)
	cb.Do("Unk_6093332", &t.Unk_6093332, d...)
	cb.Do("Unk_b913ea6", &t.Unk_b913ea6, d...)
	cb.Do("Unk_cd66645", &t.Unk_cd66645, d...)
	cb.Do("Unk_93fe537", &t.Unk_93fe537, d...)
	cb.Do("Unk_51d2d9a", &t.Unk_51d2d9a, d...)
}

type GlobalRoadGraphCell struct {
	ArSegmentIndices DT_VARIABLEARRAY[*DT_INT]
}

func (t *GlobalRoadGraphCell) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.ArSegmentIndices, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *GlobalRoadGraphCell) Walk(cb WalkCallback, d ...any) {
	cb.Do("ArSegmentIndices", &t.ArSegmentIndices, d...)
}

type FavorSeason struct {
	THeader         GBIDHeader
	DwMaxFavorLevel DT_UINT
}

func (t *FavorSeason) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+260, &t.DwMaxFavorLevel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+264, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *FavorSeason) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("DwMaxFavorLevel", &t.DwMaxFavorLevel, d...)
}

type PortalTransferSetupMessage struct {
	THeader      RequiredMessageHeader
	DwPortalType DT_UINT
	Unk_1bf9922  DT_INT
	SnoLevelArea DT_SNO
	SnoSubzone   DT_SNO
	BDungeon     DT_INT
}

func (t *PortalTransferSetupMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.DwPortalType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.Unk_1bf9922, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SnoLevelArea, r, &Options{
		Flags: 1,
		Group: 22,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.SnoSubzone, r, &Options{
		Flags: 1,
		Group: 80,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.BDungeon, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+36, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PortalTransferSetupMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("DwPortalType", &t.DwPortalType, d...)
	cb.Do("Unk_1bf9922", &t.Unk_1bf9922, d...)
	cb.Do("SnoLevelArea", &t.SnoLevelArea, d...)
	cb.Do("SnoSubzone", &t.SnoSubzone, d...)
	cb.Do("BDungeon", &t.BDungeon, d...)
}

type MaterialValue_bcVec4 struct {
	Value        DT_VECTOR4D
	FUsesGraph   DT_INT
	PathValGraph InterpolationPath_bcVec4
}

func (t *MaterialValue_bcVec4) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Value, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.FUsesGraph, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.PathValGraph, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+80, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *MaterialValue_bcVec4) Walk(cb WalkCallback, d ...any) {
	cb.Do("Value", &t.Value, d...)
	cb.Do("FUsesGraph", &t.FUsesGraph, d...)
	cb.Do("PathValGraph", &t.PathValGraph, d...)
}

type Structure struct {
	PtCollisionMeshes   DT_VARIABLEARRAY[*CollisionMesh]
	PtCollisionCapsules DT_VARIABLEARRAY[*CollisionCapsule]
	PtChunks            DT_VARIABLEARRAY[*GeoChunk]
	PtSceneData         DT_VARIABLEARRAY[*SceneData]
	PtBoneData          DT_VARIABLEARRAY[*BoneData]
	DwFlags             DT_UINT
	Unk_6bd8898         DT_FLOAT
	WsBounds            Sphere
	AabbBounds          AABB
	Unk_d8c9b68         DT_INT
	PtPostprocessed     DT_INT64
}

func (t *Structure) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.PtCollisionMeshes, r, &Options{Flags: 2097152}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.PtCollisionCapsules, r, &Options{Flags: 2097152}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.PtChunks, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.PtSceneData, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.PtBoneData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.DwFlags, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.Unk_6bd8898, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.WsBounds, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+104, &t.AabbBounds, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.Unk_d8c9b68, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+136, &t.PtPostprocessed, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if _, err := r.Seek(p+144, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Structure) Walk(cb WalkCallback, d ...any) {
	cb.Do("PtCollisionMeshes", &t.PtCollisionMeshes, d...)
	cb.Do("PtCollisionCapsules", &t.PtCollisionCapsules, d...)
	cb.Do("PtChunks", &t.PtChunks, d...)
	cb.Do("PtSceneData", &t.PtSceneData, d...)
	cb.Do("PtBoneData", &t.PtBoneData, d...)
	cb.Do("DwFlags", &t.DwFlags, d...)
	cb.Do("Unk_6bd8898", &t.Unk_6bd8898, d...)
	cb.Do("WsBounds", &t.WsBounds, d...)
	cb.Do("AabbBounds", &t.AabbBounds, d...)
	cb.Do("Unk_d8c9b68", &t.Unk_d8c9b68, d...)
	cb.Do("PtPostprocessed", &t.PtPostprocessed, d...)
}

type RopeDefinition struct {
	DwRopeFlags                        DT_UINT
	NWidth                             DT_INT
	NTraversalWidth                    DT_INT
	Unk_5be6305                        DT_FLOAT
	FlLength                           DT_FLOAT
	FlMass                             DT_FLOAT
	FlMassTaperFactor                  DT_FLOAT
	FlMassEnd                          DT_FLOAT
	FTextureRepeatCount                DT_FLOAT
	NRopeType                          DT_ENUM
	NCircleSegmentCount                DT_INT
	Unk_daaa964                        DT_FLOAT
	FlStiffness                        DT_FLOAT
	Unk_ac6c29b                        DT_ENUM
	Unk_e590d3c                        InterpolationPath_float
	Unk_24547d4                        InterpolationPath_float
	SnoMaterial                        DT_SNO
	SnoPhysics                         DT_SNO
	FlWindFactor                       DT_FLOAT
	TSystemDurationRange               DT_RANGE[*DT_FLOAT]
	TSystemDurationScalar              InterpolationScalar
	FlOutroDuration                    DT_FLOAT
	Unk_b1810a4                        DT_INT
	PathColorOverTime                  InterpolationPath_RGBAColor
	PathColorOverLength                InterpolationPath_RGBAColor
	PathAlpha                          InterpolationPath_float
	PathAlphaOverLength                InterpolationPath_float
	PathAlpha2OverTime                 InterpolationPath_float
	PathAlpha2OverLength               InterpolationPath_float
	PathDistortionFactorOverTime       InterpolationPath_float
	PathDistortionFactorOverLength     InterpolationPath_float
	PathColorIntensityOverTime         InterpolationPath_float
	PathColorIntensityOverLength       InterpolationPath_float
	Unk_3a6dc3c                        InterpolationPath_float
	Unk_5ddd86f                        InterpolationPath_float
	PathWidthOverTime                  InterpolationPath_float
	PathWidthOverLength                InterpolationPath_float
	PathSourcePointWorldUpMotion       InterpolationPath_float
	PathSourcePointAlongRopeMotion     InterpolationPath_float
	PathSourcePointPerpendicularMotion InterpolationPath_float
	Unk_fd2b7ac                        InterpolationPath_float
	PathDestPointWorldUpMotion         InterpolationPath_float
	PathDestPointAlongRopeMotion       InterpolationPath_float
	PathDestPointPerpendicularMotion   InterpolationPath_float
	PathSeparation                     InterpolationPath_float
	PathXAmpOverLength                 InterpolationPath_float
	PathYAmpOverLength                 InterpolationPath_float
	Unk_14d71e7                        InterpolationPath_float
	Unk_3e97148                        InterpolationPath_float
	PathFreqOverTime                   InterpolationPath_float
	PathPhaseSpeedOverTime             InterpolationPath_float
	Unk_e85eb5                         DT_RANGE[*DT_FLOAT]
	Unk_f7381a2                        DT_RANGE[*DT_FLOAT]
	Unk_bc10ec1                        DT_RANGE[*DT_FLOAT]
	Unk_6a3b8c1                        InterpolationPath_float
	Unk_a74800e                        InterpolationPath_float
	Unk_a85b95c                        DT_RANGE[*DT_FLOAT]
	Unk_910dc49                        DT_RANGE[*DT_FLOAT]
	Unk_fa52de8                        DT_RANGE[*DT_FLOAT]
	Unk_c44c7c8                        InterpolationPath_float
	Unk_4a82155                        InterpolationPath_float
	NNoiseFrequency                    DT_INT
	TNoiseRateRange                    DT_RANGE[*DT_FLOAT]
	PathNoiseRangeOverLength           InterpolationPath_float
	PathTangentSourceOverTime          VectorPath
	PathTangentDestinationOverTime     VectorPath
	PtMsgTriggeredEvents               DT_VARIABLEARRAY[*MsgTriggeredEvent]
	DwMaxSystems                       DT_UINT
}

func (t *RopeDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwRopeFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.NWidth, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.NTraversalWidth, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.Unk_5be6305, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.FlLength, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.FlMass, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.FlMassTaperFactor, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.FlMassEnd, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.FTextureRepeatCount, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.NRopeType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.NCircleSegmentCount, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.Unk_daaa964, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.FlStiffness, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+60, &t.Unk_ac6c29b, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.Unk_e590d3c, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.Unk_24547d4, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+176, &t.SnoMaterial, r, &Options{
		Flags: 1,
		Group: 57,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+180, &t.SnoPhysics, r, &Options{
		Flags: 1,
		Group: 28,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+184, &t.FlWindFactor, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+188, &t.TSystemDurationRange, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+196, &t.TSystemDurationScalar, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+228, &t.FlOutroDuration, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+232, &t.Unk_b1810a4, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+240, &t.PathColorOverTime, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+296, &t.PathColorOverLength, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+352, &t.PathAlpha, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+408, &t.PathAlphaOverLength, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+464, &t.PathAlpha2OverTime, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+520, &t.PathAlpha2OverLength, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+576, &t.PathDistortionFactorOverTime, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+632, &t.PathDistortionFactorOverLength, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+688, &t.PathColorIntensityOverTime, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+744, &t.PathColorIntensityOverLength, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+800, &t.Unk_3a6dc3c, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+856, &t.Unk_5ddd86f, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+912, &t.PathWidthOverTime, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+968, &t.PathWidthOverLength, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1024, &t.PathSourcePointWorldUpMotion, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1080, &t.PathSourcePointAlongRopeMotion, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1136, &t.PathSourcePointPerpendicularMotion, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1192, &t.Unk_fd2b7ac, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1248, &t.PathDestPointWorldUpMotion, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1304, &t.PathDestPointAlongRopeMotion, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1360, &t.PathDestPointPerpendicularMotion, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1416, &t.PathSeparation, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1472, &t.PathXAmpOverLength, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1528, &t.PathYAmpOverLength, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1584, &t.Unk_14d71e7, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1640, &t.Unk_3e97148, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1696, &t.PathFreqOverTime, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1752, &t.PathPhaseSpeedOverTime, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1808, &t.Unk_e85eb5, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1816, &t.Unk_f7381a2, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1824, &t.Unk_bc10ec1, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1832, &t.Unk_6a3b8c1, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1888, &t.Unk_a74800e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1944, &t.Unk_a85b95c, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1952, &t.Unk_910dc49, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1960, &t.Unk_fa52de8, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1968, &t.Unk_c44c7c8, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2024, &t.Unk_4a82155, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2080, &t.NNoiseFrequency, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2084, &t.TNoiseRateRange, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2096, &t.PathNoiseRangeOverLength, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2152, &t.PathTangentSourceOverTime, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2208, &t.PathTangentDestinationOverTime, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2264, &t.PtMsgTriggeredEvents, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2280, &t.DwMaxSystems, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+2288, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *RopeDefinition) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwRopeFlags", &t.DwRopeFlags, d...)
	cb.Do("NWidth", &t.NWidth, d...)
	cb.Do("NTraversalWidth", &t.NTraversalWidth, d...)
	cb.Do("Unk_5be6305", &t.Unk_5be6305, d...)
	cb.Do("FlLength", &t.FlLength, d...)
	cb.Do("FlMass", &t.FlMass, d...)
	cb.Do("FlMassTaperFactor", &t.FlMassTaperFactor, d...)
	cb.Do("FlMassEnd", &t.FlMassEnd, d...)
	cb.Do("FTextureRepeatCount", &t.FTextureRepeatCount, d...)
	cb.Do("NRopeType", &t.NRopeType, d...)
	cb.Do("NCircleSegmentCount", &t.NCircleSegmentCount, d...)
	cb.Do("Unk_daaa964", &t.Unk_daaa964, d...)
	cb.Do("FlStiffness", &t.FlStiffness, d...)
	cb.Do("Unk_ac6c29b", &t.Unk_ac6c29b, d...)
	cb.Do("Unk_e590d3c", &t.Unk_e590d3c, d...)
	cb.Do("Unk_24547d4", &t.Unk_24547d4, d...)
	cb.Do("SnoMaterial", &t.SnoMaterial, d...)
	cb.Do("SnoPhysics", &t.SnoPhysics, d...)
	cb.Do("FlWindFactor", &t.FlWindFactor, d...)
	cb.Do("TSystemDurationRange", &t.TSystemDurationRange, d...)
	cb.Do("TSystemDurationScalar", &t.TSystemDurationScalar, d...)
	cb.Do("FlOutroDuration", &t.FlOutroDuration, d...)
	cb.Do("Unk_b1810a4", &t.Unk_b1810a4, d...)
	cb.Do("PathColorOverTime", &t.PathColorOverTime, d...)
	cb.Do("PathColorOverLength", &t.PathColorOverLength, d...)
	cb.Do("PathAlpha", &t.PathAlpha, d...)
	cb.Do("PathAlphaOverLength", &t.PathAlphaOverLength, d...)
	cb.Do("PathAlpha2OverTime", &t.PathAlpha2OverTime, d...)
	cb.Do("PathAlpha2OverLength", &t.PathAlpha2OverLength, d...)
	cb.Do("PathDistortionFactorOverTime", &t.PathDistortionFactorOverTime, d...)
	cb.Do("PathDistortionFactorOverLength", &t.PathDistortionFactorOverLength, d...)
	cb.Do("PathColorIntensityOverTime", &t.PathColorIntensityOverTime, d...)
	cb.Do("PathColorIntensityOverLength", &t.PathColorIntensityOverLength, d...)
	cb.Do("Unk_3a6dc3c", &t.Unk_3a6dc3c, d...)
	cb.Do("Unk_5ddd86f", &t.Unk_5ddd86f, d...)
	cb.Do("PathWidthOverTime", &t.PathWidthOverTime, d...)
	cb.Do("PathWidthOverLength", &t.PathWidthOverLength, d...)
	cb.Do("PathSourcePointWorldUpMotion", &t.PathSourcePointWorldUpMotion, d...)
	cb.Do("PathSourcePointAlongRopeMotion", &t.PathSourcePointAlongRopeMotion, d...)
	cb.Do("PathSourcePointPerpendicularMotion", &t.PathSourcePointPerpendicularMotion, d...)
	cb.Do("Unk_fd2b7ac", &t.Unk_fd2b7ac, d...)
	cb.Do("PathDestPointWorldUpMotion", &t.PathDestPointWorldUpMotion, d...)
	cb.Do("PathDestPointAlongRopeMotion", &t.PathDestPointAlongRopeMotion, d...)
	cb.Do("PathDestPointPerpendicularMotion", &t.PathDestPointPerpendicularMotion, d...)
	cb.Do("PathSeparation", &t.PathSeparation, d...)
	cb.Do("PathXAmpOverLength", &t.PathXAmpOverLength, d...)
	cb.Do("PathYAmpOverLength", &t.PathYAmpOverLength, d...)
	cb.Do("Unk_14d71e7", &t.Unk_14d71e7, d...)
	cb.Do("Unk_3e97148", &t.Unk_3e97148, d...)
	cb.Do("PathFreqOverTime", &t.PathFreqOverTime, d...)
	cb.Do("PathPhaseSpeedOverTime", &t.PathPhaseSpeedOverTime, d...)
	cb.Do("Unk_e85eb5", &t.Unk_e85eb5, d...)
	cb.Do("Unk_f7381a2", &t.Unk_f7381a2, d...)
	cb.Do("Unk_bc10ec1", &t.Unk_bc10ec1, d...)
	cb.Do("Unk_6a3b8c1", &t.Unk_6a3b8c1, d...)
	cb.Do("Unk_a74800e", &t.Unk_a74800e, d...)
	cb.Do("Unk_a85b95c", &t.Unk_a85b95c, d...)
	cb.Do("Unk_910dc49", &t.Unk_910dc49, d...)
	cb.Do("Unk_fa52de8", &t.Unk_fa52de8, d...)
	cb.Do("Unk_c44c7c8", &t.Unk_c44c7c8, d...)
	cb.Do("Unk_4a82155", &t.Unk_4a82155, d...)
	cb.Do("NNoiseFrequency", &t.NNoiseFrequency, d...)
	cb.Do("TNoiseRateRange", &t.TNoiseRateRange, d...)
	cb.Do("PathNoiseRangeOverLength", &t.PathNoiseRangeOverLength, d...)
	cb.Do("PathTangentSourceOverTime", &t.PathTangentSourceOverTime, d...)
	cb.Do("PathTangentDestinationOverTime", &t.PathTangentDestinationOverTime, d...)
	cb.Do("PtMsgTriggeredEvents", &t.PtMsgTriggeredEvents, d...)
	cb.Do("DwMaxSystems", &t.DwMaxSystems, d...)
}

type WorldTierSubcondition struct {
	// Inherits NumericComparisonSubcondition
	// Inherits Subcondition
	// Inherits PolymorphicBase
	DwType        DT_UINT
	BNegate       DT_INT
	EComparisonOp DT_ENUM
	DwPad         DT_UINT
	EWorldTier    DT_ENUM
}

func (t *WorldTierSubcondition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BNegate, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.EComparisonOp, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.EWorldTier, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+40, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *WorldTierSubcondition) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("BNegate", &t.BNegate, d...)
	cb.Do("EComparisonOp", &t.EComparisonOp, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("EWorldTier", &t.EWorldTier, d...)
}

type StoryboardActivationNode struct {
	// Inherits StoryboardTimePointNode
	// Inherits PolymorphicBase
	DwType   DT_UINT
	FlTime   DT_FLOAT
	DwPad    DT_UINT
	Activate DT_INT
}

func (t *StoryboardActivationNode) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.FlTime, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Activate, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *StoryboardActivationNode) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("FlTime", &t.FlTime, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("Activate", &t.Activate, d...)
}

type FogVolumeInstanceData struct {
	EShape            DT_ENUM
	FlDensity         DT_FLOAT
	FlHeightScale     DT_FLOAT
	FlNoiseScale      DT_FLOAT
	FlNoiseUVScale    DT_FLOAT
	FlNoiseOffset     DT_FLOAT
	FlEmissive        DT_FLOAT
	FlScatteringCoeff DT_FLOAT
	FlAbsorptionCoeff DT_FLOAT
	FlFlowSpeed       DT_FLOAT
	FlFlowPower       DT_FLOAT
	FlInnerScale      DT_FLOAT
	Unk_b345994       DT_FLOAT
	Unk_4d7c109       DT_FLOAT
	Unk_29ac45        DT_FLOAT
	DwFogFlags        DT_UINT
	Unk_56127ed       DT_ENUM
	FlWindSpeedFactor DT_FLOAT
	PathHeightColor   InterpolationPath_RGBAColor
	BUseMask          DT_INT
}

func (t *FogVolumeInstanceData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.EShape, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.FlDensity, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.FlHeightScale, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.FlNoiseScale, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.FlNoiseUVScale, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.FlNoiseOffset, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.FlEmissive, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.FlScatteringCoeff, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.FlAbsorptionCoeff, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.FlFlowSpeed, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.FlFlowPower, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.FlInnerScale, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.Unk_b345994, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.Unk_4d7c109, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.Unk_29ac45, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+60, &t.DwFogFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.Unk_56127ed, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.FlWindSpeedFactor, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.PathHeightColor, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.BUseMask, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+136, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *FogVolumeInstanceData) Walk(cb WalkCallback, d ...any) {
	cb.Do("EShape", &t.EShape, d...)
	cb.Do("FlDensity", &t.FlDensity, d...)
	cb.Do("FlHeightScale", &t.FlHeightScale, d...)
	cb.Do("FlNoiseScale", &t.FlNoiseScale, d...)
	cb.Do("FlNoiseUVScale", &t.FlNoiseUVScale, d...)
	cb.Do("FlNoiseOffset", &t.FlNoiseOffset, d...)
	cb.Do("FlEmissive", &t.FlEmissive, d...)
	cb.Do("FlScatteringCoeff", &t.FlScatteringCoeff, d...)
	cb.Do("FlAbsorptionCoeff", &t.FlAbsorptionCoeff, d...)
	cb.Do("FlFlowSpeed", &t.FlFlowSpeed, d...)
	cb.Do("FlFlowPower", &t.FlFlowPower, d...)
	cb.Do("FlInnerScale", &t.FlInnerScale, d...)
	cb.Do("Unk_b345994", &t.Unk_b345994, d...)
	cb.Do("Unk_4d7c109", &t.Unk_4d7c109, d...)
	cb.Do("Unk_29ac45", &t.Unk_29ac45, d...)
	cb.Do("DwFogFlags", &t.DwFogFlags, d...)
	cb.Do("Unk_56127ed", &t.Unk_56127ed, d...)
	cb.Do("FlWindSpeedFactor", &t.FlWindSpeedFactor, d...)
	cb.Do("PathHeightColor", &t.PathHeightColor, d...)
	cb.Do("BUseMask", &t.BUseMask, d...)
}

type UIControlClickSoundsOptionalFieldMapDefaults struct {
	SnoClickSound     DT_SNO
	SnoMouseOverSound DT_SNO
}

func (t *UIControlClickSoundsOptionalFieldMapDefaults) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoClickSound, r, &Options{
		Flags: 1,
		Group: 40,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.SnoMouseOverSound, r, &Options{
		Flags: 1,
		Group: 40,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *UIControlClickSoundsOptionalFieldMapDefaults) Walk(cb WalkCallback, d ...any) {
	cb.Do("SnoClickSound", &t.SnoClickSound, d...)
	cb.Do("SnoMouseOverSound", &t.SnoMouseOverSound, d...)
}

type ACDTranslateSyncMessage struct {
	THeader   RequiredMessageHeader
	Ann       DT_ACD_NETWORK_NAME
	VDestX    DT_OPTIONAL[*DT_INT]
	VDestY    DT_OPTIONAL[*DT_INT]
	VDestZ    DT_OPTIONAL[*DT_INT]
	BSnap     DT_OPTIONAL[*DT_INT]
	UAckValue DT_OPTIONAL[*DT_UINT]
}

func (t *ACDTranslateSyncMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Ann, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.VDestX, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.VDestY, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.VDestZ, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.BSnap, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.UAckValue, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+64, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ACDTranslateSyncMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("Ann", &t.Ann, d...)
	cb.Do("VDestX", &t.VDestX, d...)
	cb.Do("VDestY", &t.VDestY, d...)
	cb.Do("VDestZ", &t.VDestZ, d...)
	cb.Do("BSnap", &t.BSnap, d...)
	cb.Do("UAckValue", &t.UAckValue, d...)
}

type TryRepairAllMessage struct {
	THeader   RequiredMessageHeader
	BEquipped DT_INT
	BBackpack DT_INT
	BStash    DT_INT
}

func (t *TryRepairAllMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BEquipped, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.BBackpack, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.BStash, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+28, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TryRepairAllMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("BEquipped", &t.BEquipped, d...)
	cb.Do("BBackpack", &t.BBackpack, d...)
	cb.Do("BStash", &t.BStash, d...)
}

type MarkerSoundData struct {
	// Inherits MarkerDataBase
	// Inherits PolymorphicBase
	DwType DT_UINT
	DwPad  DT_UINT
}

func (t *MarkerSoundData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *MarkerSoundData) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
}

type ServerNotificationDataMessage struct {
	THeader RequiredMessageHeader
	USec    DT_UINT
	EType   DT_ENUM
}

func (t *ServerNotificationDataMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.USec, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.EType, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ServerNotificationDataMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("USec", &t.USec, d...)
	cb.Do("EType", &t.EType, d...)
}

type OnHealingReceivedBuffCallback struct {
	// Inherits BuffCallbackBase
	// Inherits PolymorphicBase
	DwType                DT_UINT
	DwPad                 DT_UINT
	SnoTriggerEffectGroup DT_SNO
	ArConditions          DT_POLYMORPHIC_VARIABLEARRAY[*DT_INT64]
}

func (t *OnHealingReceivedBuffCallback) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoTriggerEffectGroup, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ArConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *OnHealingReceivedBuffCallback) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("SnoTriggerEffectGroup", &t.SnoTriggerEffectGroup, d...)
	cb.Do("ArConditions", &t.ArConditions, d...)
}

type ItemTier struct {
	SnoHead          DT_SNO
	SnoTorso         DT_SNO
	SnoFeet          DT_SNO
	SnoHands         DT_SNO
	SnoLegs          DT_SNO
	SnoMainHand      DT_SNO
	SnoOffHand       DT_SNO
	SnoTwoHandBlunt  DT_SNO
	SnoTwoHandSlash  DT_SNO
	SnoTwoHandRanged DT_SNO
	SnoOneHandMain   DT_SNO
	SnoOneHandOff    DT_SNO
	SnoDye           DT_SNO
	SzName           DT_UINT
}

func (t *ItemTier) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoHead, r, &Options{
		Flags: 513,
		Group: 73,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.SnoTorso, r, &Options{
		Flags: 513,
		Group: 73,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.SnoFeet, r, &Options{
		Flags: 513,
		Group: 73,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.SnoHands, r, &Options{
		Flags: 513,
		Group: 73,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoLegs, r, &Options{
		Flags: 513,
		Group: 73,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.SnoMainHand, r, &Options{
		Flags: 513,
		Group: 73,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SnoOffHand, r, &Options{
		Flags: 513,
		Group: 73,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.SnoTwoHandBlunt, r, &Options{
		Flags: 513,
		Group: 73,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.SnoTwoHandSlash, r, &Options{
		Flags: 513,
		Group: 73,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.SnoTwoHandRanged, r, &Options{
		Flags: 513,
		Group: 73,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.SnoOneHandMain, r, &Options{
		Flags: 513,
		Group: 73,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.SnoOneHandOff, r, &Options{
		Flags: 513,
		Group: 73,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.SnoDye, r, &Options{
		Flags: 513,
		Group: 122,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.SzName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+56, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ItemTier) Walk(cb WalkCallback, d ...any) {
	cb.Do("SnoHead", &t.SnoHead, d...)
	cb.Do("SnoTorso", &t.SnoTorso, d...)
	cb.Do("SnoFeet", &t.SnoFeet, d...)
	cb.Do("SnoHands", &t.SnoHands, d...)
	cb.Do("SnoLegs", &t.SnoLegs, d...)
	cb.Do("SnoMainHand", &t.SnoMainHand, d...)
	cb.Do("SnoOffHand", &t.SnoOffHand, d...)
	cb.Do("SnoTwoHandBlunt", &t.SnoTwoHandBlunt, d...)
	cb.Do("SnoTwoHandSlash", &t.SnoTwoHandSlash, d...)
	cb.Do("SnoTwoHandRanged", &t.SnoTwoHandRanged, d...)
	cb.Do("SnoOneHandMain", &t.SnoOneHandMain, d...)
	cb.Do("SnoOneHandOff", &t.SnoOneHandOff, d...)
	cb.Do("SnoDye", &t.SnoDye, d...)
	cb.Do("SzName", &t.SzName, d...)
}

type ACDForceAddedMessage struct {
	THeader        RequiredMessageHeader
	Ann            DT_ACD_NETWORK_NAME
	VImpulsePerSec DT_VECTOR3D
	FlSecs         DT_FLOAT
}

func (t *ACDForceAddedMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Ann, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.VImpulsePerSec, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.FlSecs, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+40, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ACDForceAddedMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("Ann", &t.Ann, d...)
	cb.Do("VImpulsePerSec", &t.VImpulsePerSec, d...)
	cb.Do("FlSecs", &t.FlSecs, d...)
}

type ActiveSkillEntry struct {
	SnoPower    DT_SNO
	Unk_cc81097 DT_INT
	NLevelReq   DT_INT
}

func (t *ActiveSkillEntry) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoPower, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.Unk_cc81097, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.NLevelReq, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+12, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ActiveSkillEntry) Walk(cb WalkCallback, d ...any) {
	cb.Do("SnoPower", &t.SnoPower, d...)
	cb.Do("Unk_cc81097", &t.Unk_cc81097, d...)
	cb.Do("NLevelReq", &t.NLevelReq, d...)
}

type CollisionCapsule struct {
	FlRadiusA    DT_FLOAT
	FlRadiusB    DT_FLOAT
	FlLength     DT_FLOAT
	THardpoint   Hardpoint
	DwShapeFlags DT_UINT
	Unk_d094b9a  DT_ENUM
}

func (t *CollisionCapsule) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.FlRadiusA, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.FlRadiusB, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.FlLength, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.THardpoint, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.DwShapeFlags, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+60, &t.Unk_d094b9a, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+64, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *CollisionCapsule) Walk(cb WalkCallback, d ...any) {
	cb.Do("FlRadiusA", &t.FlRadiusA, d...)
	cb.Do("FlRadiusB", &t.FlRadiusB, d...)
	cb.Do("FlLength", &t.FlLength, d...)
	cb.Do("THardpoint", &t.THardpoint, d...)
	cb.Do("DwShapeFlags", &t.DwShapeFlags, d...)
	cb.Do("Unk_d094b9a", &t.Unk_d094b9a, d...)
}

type StoryboardValueNodeCollection_RGBAColor struct {
	ArNodes     DT_VARIABLEARRAY[*StoryboardValueNode_RGBAColor]
	Unk_36cc429 DT_VARIABLEARRAY[*DT_INT]
}

func (t *StoryboardValueNodeCollection_RGBAColor) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.ArNodes, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_36cc429, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *StoryboardValueNodeCollection_RGBAColor) Walk(cb WalkCallback, d ...any) {
	cb.Do("ArNodes", &t.ArNodes, d...)
	cb.Do("Unk_36cc429", &t.Unk_36cc429, d...)
}

type PlayLineParams struct {
	SnoConversation       DT_SNO
	SnoParentConversation DT_SNO
	Unk_d85ca94           DT_INT
	BFirstLine            DT_INT
	DwLineUID             DT_UINT
	Unk_3528310           DT_UINT
	ELineGender           DT_ENUM
	ELineClass            DT_ENUM
	Unk_1dc956e           DT_UINT
	EPlayerGender         DT_ENUM
	EPlayerClass          DT_ENUM
	SnoSpeaker            DT_SNO
	DwLineFlags           DT_UINT
	FlLineDisplayTime     DT_FLOAT
	NLineGUID             DT_INT
	SnoSoundOverride      DT_SNO
	TActorNameInfo        PlayLineActorNameInfo
}

func (t *PlayLineParams) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoConversation, r, &Options{
		Flags: 1,
		Group: 12,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.SnoParentConversation, r, &Options{
		Flags: 1,
		Group: 12,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.Unk_d85ca94, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.BFirstLine, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.DwLineUID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.Unk_3528310, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ELineGender, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.ELineClass, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.Unk_1dc956e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.EPlayerGender, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.EPlayerClass, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.SnoSpeaker, r, &Options{
		Flags: 1,
		Group: 72,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.DwLineFlags, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.FlLineDisplayTime, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.NLineGUID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+60, &t.SnoSoundOverride, r, &Options{
		Flags: 1,
		Group: 40,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.TActorNameInfo, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+88, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PlayLineParams) Walk(cb WalkCallback, d ...any) {
	cb.Do("SnoConversation", &t.SnoConversation, d...)
	cb.Do("SnoParentConversation", &t.SnoParentConversation, d...)
	cb.Do("Unk_d85ca94", &t.Unk_d85ca94, d...)
	cb.Do("BFirstLine", &t.BFirstLine, d...)
	cb.Do("DwLineUID", &t.DwLineUID, d...)
	cb.Do("Unk_3528310", &t.Unk_3528310, d...)
	cb.Do("ELineGender", &t.ELineGender, d...)
	cb.Do("ELineClass", &t.ELineClass, d...)
	cb.Do("Unk_1dc956e", &t.Unk_1dc956e, d...)
	cb.Do("EPlayerGender", &t.EPlayerGender, d...)
	cb.Do("EPlayerClass", &t.EPlayerClass, d...)
	cb.Do("SnoSpeaker", &t.SnoSpeaker, d...)
	cb.Do("DwLineFlags", &t.DwLineFlags, d...)
	cb.Do("FlLineDisplayTime", &t.FlLineDisplayTime, d...)
	cb.Do("NLineGUID", &t.NLineGUID, d...)
	cb.Do("SnoSoundOverride", &t.SnoSoundOverride, d...)
	cb.Do("TActorNameInfo", &t.TActorNameInfo, d...)
}

type UIDownloadImageStyle struct {
	// Inherits UIWindowStyle
	// Inherits UIControlStyle
	// Inherits PolymorphicBase
	DwType                    DT_UINT
	DwPad                     DT_UINT
	HParentStyle              UIControlHandle
	Unk_441f783               DT_INT64
	M_eHasModifiedPowerTagMap DT_TAGMAP[*DT_ENUM]
	TConsoleInput             UIControlConsoleInput
	Unk_b4f614c               DT_TAGMAP[*DT_ENUM]
}

func (t *UIDownloadImageStyle) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.HParentStyle, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_441f783, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.M_eHasModifiedPowerTagMap, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.TConsoleInput, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.Unk_b4f614c, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+80, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *UIDownloadImageStyle) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("HParentStyle", &t.HParentStyle, d...)
	cb.Do("Unk_441f783", &t.Unk_441f783, d...)
	cb.Do("M_eHasModifiedPowerTagMap", &t.M_eHasModifiedPowerTagMap, d...)
	cb.Do("TConsoleInput", &t.TConsoleInput, d...)
	cb.Do("Unk_b4f614c", &t.Unk_b4f614c, d...)
}

type GameTestingNPCSamplingStartMessage struct {
	THeader        RequiredMessageHeader
	SzLocationName DT_CHARARRAY
	SnoWorld       DT_SNO
	SnoActor       DT_SNO
	NActorCount    DT_INT
}

func (t *GameTestingNPCSamplingStartMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SzLocationName, r, &Options{
		ArrayLength: 64,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.SnoWorld, r, &Options{
		Flags: 1,
		Group: 48,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.SnoActor, r, &Options{
		Flags: 1,
		Group: 1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.NActorCount, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+92, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *GameTestingNPCSamplingStartMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("SzLocationName", &t.SzLocationName, d...)
	cb.Do("SnoWorld", &t.SnoWorld, d...)
	cb.Do("SnoActor", &t.SnoActor, d...)
	cb.Do("NActorCount", &t.NActorCount, d...)
}

type ParametricClutterIndex struct {
	EBaseClutterIndex              DT_ENUM
	ArParametricClutterIndexLayers DT_VARIABLEARRAY[*ParametricClutterIndexLayer]
}

func (t *ParametricClutterIndex) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.EBaseClutterIndex, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.ArParametricClutterIndexLayers, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ParametricClutterIndex) Walk(cb WalkCallback, d ...any) {
	cb.Do("EBaseClutterIndex", &t.EBaseClutterIndex, d...)
	cb.Do("ArParametricClutterIndexLayers", &t.ArParametricClutterIndexLayers, d...)
}

type QuestSwitchGizmoData struct {
	// Inherits NamedGizmoData
	// Inherits ActorGizmoData
	// Inherits PolymorphicBase
	DwType                           DT_UINT
	DwPad                            DT_UINT
	FDisableNonFriendlyOperation     DT_INT
	FWalkToCenter                    DT_INT
	FGizmoStartsDisabled             DT_INT
	FUseStringListName               DT_INT
	FForceMinimapIcon                DT_INT
	FlOperationRadius                DT_FLOAT
	Unk_d0b1df5                      DT_FLOAT
	FlGizmoUseTime                   DT_FLOAT
	SnoChannelingEffect              DT_SNO
	Unk_2767229                      DT_INT
	FGizmoShowProgressBar            DT_INT
	Unk_6d9ebe1                      DT_INT
	Unk_5456245                      DT_INT
	Unk_af5815a                      DT_INT
	SnoOnClickEffect                 DT_SNO
	SnoPickedUpEffect                DT_SNO
	SnoDropOnGroundEffect            DT_SNO
	TConditionData                   GizmoConditionData
	SnoPowerOperator                 DT_SNO
	SnoPowerOperate                  DT_SNO
	SnoPowerOperatorActive           DT_SNO
	SnoPowerOperateActive            DT_SNO
	Unk_359810e                      DT_INT
	NCooldown                        DT_UINT
	Unk_9c8478e                      DT_UINT
	Unk_d45ed2d                      DT_INT
	Unk_f6b20b7                      DT_INT
	Unk_54513b8                      DT_INT
	Unk_fd1f378                      DT_UINT
	HGizmoOperateFlavorTextMsgLabel  DT_UINT
	HGizmoOperateDescriptionMsgLabel DT_UINT
	FlGizmoOperateOffset             DT_FLOAT
	Unk_ab58cd3                      DT_ENUM
	Unk_91a3966                      DT_UINT
	HGizmoChannelingLabel            DT_UINT
	Unk_4be4371                      DT_INT
	TLockData                        LockingGizmoData
}

func (t *QuestSwitchGizmoData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.FDisableNonFriendlyOperation, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.FWalkToCenter, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.FGizmoStartsDisabled, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.FUseStringListName, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.FForceMinimapIcon, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.FlOperationRadius, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.Unk_d0b1df5, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.FlGizmoUseTime, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.SnoChannelingEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.Unk_2767229, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.FGizmoShowProgressBar, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+60, &t.Unk_6d9ebe1, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.Unk_5456245, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.Unk_af5815a, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.SnoOnClickEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.SnoPickedUpEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.SnoDropOnGroundEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.TConditionData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.SnoPowerOperator, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.SnoPowerOperate, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.SnoPowerOperatorActive, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+100, &t.SnoPowerOperateActive, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+104, &t.Unk_359810e, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+108, &t.NCooldown, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.Unk_9c8478e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+116, &t.Unk_d45ed2d, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.Unk_f6b20b7, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+124, &t.Unk_54513b8, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.Unk_fd1f378, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+132, &t.HGizmoOperateFlavorTextMsgLabel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+136, &t.HGizmoOperateDescriptionMsgLabel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+140, &t.FlGizmoOperateOffset, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+144, &t.Unk_ab58cd3, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+148, &t.Unk_91a3966, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+152, &t.HGizmoChannelingLabel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+156, &t.Unk_4be4371, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+160, &t.TLockData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+200, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *QuestSwitchGizmoData) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("FDisableNonFriendlyOperation", &t.FDisableNonFriendlyOperation, d...)
	cb.Do("FWalkToCenter", &t.FWalkToCenter, d...)
	cb.Do("FGizmoStartsDisabled", &t.FGizmoStartsDisabled, d...)
	cb.Do("FUseStringListName", &t.FUseStringListName, d...)
	cb.Do("FForceMinimapIcon", &t.FForceMinimapIcon, d...)
	cb.Do("FlOperationRadius", &t.FlOperationRadius, d...)
	cb.Do("Unk_d0b1df5", &t.Unk_d0b1df5, d...)
	cb.Do("FlGizmoUseTime", &t.FlGizmoUseTime, d...)
	cb.Do("SnoChannelingEffect", &t.SnoChannelingEffect, d...)
	cb.Do("Unk_2767229", &t.Unk_2767229, d...)
	cb.Do("FGizmoShowProgressBar", &t.FGizmoShowProgressBar, d...)
	cb.Do("Unk_6d9ebe1", &t.Unk_6d9ebe1, d...)
	cb.Do("Unk_5456245", &t.Unk_5456245, d...)
	cb.Do("Unk_af5815a", &t.Unk_af5815a, d...)
	cb.Do("SnoOnClickEffect", &t.SnoOnClickEffect, d...)
	cb.Do("SnoPickedUpEffect", &t.SnoPickedUpEffect, d...)
	cb.Do("SnoDropOnGroundEffect", &t.SnoDropOnGroundEffect, d...)
	cb.Do("TConditionData", &t.TConditionData, d...)
	cb.Do("SnoPowerOperator", &t.SnoPowerOperator, d...)
	cb.Do("SnoPowerOperate", &t.SnoPowerOperate, d...)
	cb.Do("SnoPowerOperatorActive", &t.SnoPowerOperatorActive, d...)
	cb.Do("SnoPowerOperateActive", &t.SnoPowerOperateActive, d...)
	cb.Do("Unk_359810e", &t.Unk_359810e, d...)
	cb.Do("NCooldown", &t.NCooldown, d...)
	cb.Do("Unk_9c8478e", &t.Unk_9c8478e, d...)
	cb.Do("Unk_d45ed2d", &t.Unk_d45ed2d, d...)
	cb.Do("Unk_f6b20b7", &t.Unk_f6b20b7, d...)
	cb.Do("Unk_54513b8", &t.Unk_54513b8, d...)
	cb.Do("Unk_fd1f378", &t.Unk_fd1f378, d...)
	cb.Do("HGizmoOperateFlavorTextMsgLabel", &t.HGizmoOperateFlavorTextMsgLabel, d...)
	cb.Do("HGizmoOperateDescriptionMsgLabel", &t.HGizmoOperateDescriptionMsgLabel, d...)
	cb.Do("FlGizmoOperateOffset", &t.FlGizmoOperateOffset, d...)
	cb.Do("Unk_ab58cd3", &t.Unk_ab58cd3, d...)
	cb.Do("Unk_91a3966", &t.Unk_91a3966, d...)
	cb.Do("HGizmoChannelingLabel", &t.HGizmoChannelingLabel, d...)
	cb.Do("Unk_4be4371", &t.Unk_4be4371, d...)
	cb.Do("TLockData", &t.TLockData, d...)
}

type AnimationDefinition struct {
	DwNextID                 DT_UINT
	DwFlags                  DT_UINT
	EPlaybackMode            DT_ENUM
	Unk_38fab0d              DT_ENUM
	ESelectionOrder          DT_ENUM
	Unk_ba85a8e              DT_INT
	BAlternatesAnims         DT_INT
	SnoAppearance            DT_SNO
	PtPermutations           DT_VARIABLEARRAY[*AnimPermutation]
	ArPermutationIndices     DT_VARIABLEARRAY[*DT_INT]
	PtRepeatablePermutations DT_VARIABLEARRAY[*DT_BYTE]
	BHasPermutationGroups    DT_INT
	Unk_5316586              DT_INT
}

func (t *AnimationDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwNextID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.EPlaybackMode, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.Unk_38fab0d, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ESelectionOrder, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.Unk_ba85a8e, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.BAlternatesAnims, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.SnoAppearance, r, &Options{
		Flags: 769,
		Group: 9,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.PtPermutations, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.ArPermutationIndices, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.PtRepeatablePermutations, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.BHasPermutationGroups, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.Unk_5316586, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+96, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *AnimationDefinition) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwNextID", &t.DwNextID, d...)
	cb.Do("DwFlags", &t.DwFlags, d...)
	cb.Do("EPlaybackMode", &t.EPlaybackMode, d...)
	cb.Do("Unk_38fab0d", &t.Unk_38fab0d, d...)
	cb.Do("ESelectionOrder", &t.ESelectionOrder, d...)
	cb.Do("Unk_ba85a8e", &t.Unk_ba85a8e, d...)
	cb.Do("BAlternatesAnims", &t.BAlternatesAnims, d...)
	cb.Do("SnoAppearance", &t.SnoAppearance, d...)
	cb.Do("PtPermutations", &t.PtPermutations, d...)
	cb.Do("ArPermutationIndices", &t.ArPermutationIndices, d...)
	cb.Do("PtRepeatablePermutations", &t.PtRepeatablePermutations, d...)
	cb.Do("BHasPermutationGroups", &t.BHasPermutationGroups, d...)
	cb.Do("Unk_5316586", &t.Unk_5316586, d...)
}

type MarkerNoMountVolumeData struct {
	// Inherits MarkerDataBase
	// Inherits PolymorphicBase
	DwType              DT_UINT
	DwPad               DT_UINT
	ENoMountVolumeShape DT_ENUM
}

func (t *MarkerNoMountVolumeData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.ENoMountVolumeShape, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *MarkerNoMountVolumeData) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("ENoMountVolumeShape", &t.ENoMountVolumeShape, d...)
}

type Type_34923ee5 struct {
	Unk_36658ce DT_SNO
	TSNONames   SerialDataInfo
}

func (t *Type_34923ee5) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Unk_36658ce, r, &Options{
		Flags: 1,
		Group: 135,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.TSNONames, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+12, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_34923ee5) Walk(cb WalkCallback, d ...any) {
	cb.Do("Unk_36658ce", &t.Unk_36658ce, d...)
	cb.Do("TSNONames", &t.TSNONames, d...)
}

type HeroNameChangedMessage struct {
	THeader               RequiredMessageHeader
	DwPlayerGameAccountId DT_UINT
	SzOldHeroName         DT_CHARARRAY
	SzNewHeroName         DT_CHARARRAY
}

func (t *HeroNameChangedMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.DwPlayerGameAccountId, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.SzOldHeroName, r, &Options{
		ArrayLength: 49,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+69, &t.SzNewHeroName, r, &Options{
		ArrayLength: 49,
		Flags:       1,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+120, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *HeroNameChangedMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("DwPlayerGameAccountId", &t.DwPlayerGameAccountId, d...)
	cb.Do("SzOldHeroName", &t.SzOldHeroName, d...)
	cb.Do("SzNewHeroName", &t.SzNewHeroName, d...)
}

type VoiceActorEntry struct {
	THeader GBIDHeader
}

func (t *VoiceActorEntry) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+260, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *VoiceActorEntry) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
}

type CrafterTab struct {
	SnoTab                  DT_SNO
	SnoCraftUnlockCondition DT_SNO
	SzTabInstanceName       DT_CSTRING[*DT_BYTE]
	SzPanelInstanceName     DT_CSTRING[*DT_BYTE]
	BShowHeader             DT_INT
}

func (t *CrafterTab) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoTab, r, &Options{
		Flags: 1,
		Group: 145,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.SnoCraftUnlockCondition, r, &Options{
		Flags: 1,
		Group: 51,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.SzTabInstanceName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SzPanelInstanceName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.BShowHeader, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *CrafterTab) Walk(cb WalkCallback, d ...any) {
	cb.Do("SnoTab", &t.SnoTab, d...)
	cb.Do("SnoCraftUnlockCondition", &t.SnoCraftUnlockCondition, d...)
	cb.Do("SzTabInstanceName", &t.SzTabInstanceName, d...)
	cb.Do("SzPanelInstanceName", &t.SzPanelInstanceName, d...)
	cb.Do("BShowHeader", &t.BShowHeader, d...)
}

type UpgradeItemMessage struct {
	THeader   RequiredMessageHeader
	AnnItem   DT_ACD_NETWORK_NAME
	AnnVendor DT_ACD_NETWORK_NAME
}

func (t *UpgradeItemMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.AnnItem, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.AnnVendor, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *UpgradeItemMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("AnnItem", &t.AnnItem, d...)
	cb.Do("AnnVendor", &t.AnnVendor, d...)
}

type TriggerConditions struct {
	FlChance              DT_FLOAT
	BMute                 DT_INT
	BMuteExternal         DT_INT
	TDelay                DT_FLOAT
	TImpactVelocityRange  DT_RANGE[*DT_FLOAT]
	TImpactWeightRange    DT_RANGE[*DT_FLOAT]
	EMaterial             DT_ENUM
	DwConditionFlags      DT_UINT
	EPlayerCountCondition DT_ENUM
	Unk_b51df67           DT_ENUM
	DwPad                 DT_UINT
}

func (t *TriggerConditions) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.FlChance, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.BMute, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.BMuteExternal, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.TDelay, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TImpactVelocityRange, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.TImpactWeightRange, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.EMaterial, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.DwConditionFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.EPlayerCountCondition, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.Unk_b51df67, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+52, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TriggerConditions) Walk(cb WalkCallback, d ...any) {
	cb.Do("FlChance", &t.FlChance, d...)
	cb.Do("BMute", &t.BMute, d...)
	cb.Do("BMuteExternal", &t.BMuteExternal, d...)
	cb.Do("TDelay", &t.TDelay, d...)
	cb.Do("TImpactVelocityRange", &t.TImpactVelocityRange, d...)
	cb.Do("TImpactWeightRange", &t.TImpactWeightRange, d...)
	cb.Do("EMaterial", &t.EMaterial, d...)
	cb.Do("DwConditionFlags", &t.DwConditionFlags, d...)
	cb.Do("EPlayerCountCondition", &t.EPlayerCountCondition, d...)
	cb.Do("Unk_b51df67", &t.Unk_b51df67, d...)
	cb.Do("DwPad", &t.DwPad, d...)
}

type Type_352f49ec struct {
	// Inherits PowerConditionBase
	// Inherits PolymorphicBase
	DwType         DT_UINT
	BInverse       DT_INT
	DwPad          DT_UINT
	SzVariableName DT_UINT
	FlValue        DT_FLOAT
}

func (t *Type_352f49ec) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BInverse, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SzVariableName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.FlValue, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_352f49ec) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("BInverse", &t.BInverse, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("SzVariableName", &t.SzVariableName, d...)
	cb.Do("FlValue", &t.FlValue, d...)
}

type OnKillBuffCallback struct {
	// Inherits BuffCallbackBase
	// Inherits PolymorphicBase
	DwType                DT_UINT
	DwPad                 DT_UINT
	SnoTriggerEffectGroup DT_SNO
	ArConditions          DT_POLYMORPHIC_VARIABLEARRAY[*DT_INT64]
}

func (t *OnKillBuffCallback) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoTriggerEffectGroup, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ArConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *OnKillBuffCallback) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("SnoTriggerEffectGroup", &t.SnoTriggerEffectGroup, d...)
	cb.Do("ArConditions", &t.ArConditions, d...)
}

type AnimDepthOfField struct {
	FlFStop         DT_FLOAT
	FlFocalDistance DT_FLOAT
}

func (t *AnimDepthOfField) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.FlFStop, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.FlFocalDistance, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *AnimDepthOfField) Walk(cb WalkCallback, d ...any) {
	cb.Do("FlFStop", &t.FlFStop, d...)
	cb.Do("FlFocalDistance", &t.FlFocalDistance, d...)
}

type GlobalZoneProgressData struct {
	// Inherits GlobalBase
	// Inherits PolymorphicBase
	DwType                      DT_UINT
	DwPad                       DT_UINT
	SzCurrentTargetBranch       DT_CSTRING[*DT_BYTE]
	ArPerZoneData               DT_FIXEDARRAY[*ZoneProgressPerZoneData]
	Unk_83a373                  DT_FIXEDARRAY[*DT_INT]
	Unk_2d36569                 DT_FIXEDARRAY[*DT_INT]
	ArRewardStringLabels        DT_FIXEDARRAY[*DT_UINT]
	ArTrackedRewardStringLabels DT_FIXEDARRAY[*DT_UINT]
	Unk_980ba0f                 DT_VARIABLEARRAY[*Type_ba2327fc]
}

func (t *GlobalZoneProgressData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SzCurrentTargetBranch, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.ArPerZoneData, r, &Options{
		ArrayLength: 5,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1912, &t.Unk_83a373, r, &Options{
		ArrayLength: 6,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1936, &t.Unk_2d36569, r, &Options{
		ArrayLength: 5,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1956, &t.ArRewardStringLabels, r, &Options{
		ArrayLength: 2,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1964, &t.ArTrackedRewardStringLabels, r, &Options{
		ArrayLength: 7,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1992, &t.Unk_980ba0f, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+2008, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *GlobalZoneProgressData) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("SzCurrentTargetBranch", &t.SzCurrentTargetBranch, d...)
	cb.Do("ArPerZoneData", &t.ArPerZoneData, d...)
	cb.Do("Unk_83a373", &t.Unk_83a373, d...)
	cb.Do("Unk_2d36569", &t.Unk_2d36569, d...)
	cb.Do("ArRewardStringLabels", &t.ArRewardStringLabels, d...)
	cb.Do("ArTrackedRewardStringLabels", &t.ArTrackedRewardStringLabels, d...)
	cb.Do("Unk_980ba0f", &t.Unk_980ba0f, d...)
}

type IKRopeTraversal struct {
	Unk_20a6d7a DT_VECTOR3D
	Unk_9fd3bed DT_VECTOR3D
}

func (t *IKRopeTraversal) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Unk_20a6d7a, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.Unk_9fd3bed, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *IKRopeTraversal) Walk(cb WalkCallback, d ...any) {
	cb.Do("Unk_20a6d7a", &t.Unk_20a6d7a, d...)
	cb.Do("Unk_9fd3bed", &t.Unk_9fd3bed, d...)
}

type OnDeflectBuffCallback struct {
	// Inherits BuffCallbackBase
	// Inherits PolymorphicBase
	DwType                DT_UINT
	DwPad                 DT_UINT
	SnoTriggerEffectGroup DT_SNO
	ArConditions          DT_POLYMORPHIC_VARIABLEARRAY[*DT_INT64]
}

func (t *OnDeflectBuffCallback) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoTriggerEffectGroup, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ArConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *OnDeflectBuffCallback) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("SnoTriggerEffectGroup", &t.SnoTriggerEffectGroup, d...)
	cb.Do("ArConditions", &t.ArConditions, d...)
}

type ActorPlayerData struct {
	EGender                    DT_ENUM
	EPlayerClass               DT_ENUM
	ArSkinColorChoices         DT_VARIABLEARRAY[*PersonaSkinColor]
	SnoPowerPassives           DT_VARIABLEARRAY[*DT_SNO]
	FlIrisSize                 DT_FLOAT
	ArWarningConversationLines DT_FIXEDARRAY[*ConversationNodeReference]
	ArConditionalAudioStates   DT_VARIABLEARRAY[*ConditionalAudioState]
}

func (t *ActorPlayerData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.EGender, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.EPlayerClass, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.ArSkinColorChoices, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SnoPowerPassives, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.FlIrisSize, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.ArWarningConversationLines, r, &Options{
		ArrayLength: 26,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+256, &t.ArConditionalAudioStates, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+272, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ActorPlayerData) Walk(cb WalkCallback, d ...any) {
	cb.Do("EGender", &t.EGender, d...)
	cb.Do("EPlayerClass", &t.EPlayerClass, d...)
	cb.Do("ArSkinColorChoices", &t.ArSkinColorChoices, d...)
	cb.Do("SnoPowerPassives", &t.SnoPowerPassives, d...)
	cb.Do("FlIrisSize", &t.FlIrisSize, d...)
	cb.Do("ArWarningConversationLines", &t.ArWarningConversationLines, d...)
	cb.Do("ArConditionalAudioStates", &t.ArConditionalAudioStates, d...)
}

type PlayerLevelRangeSubcondition struct {
	// Inherits Subcondition
	// Inherits PolymorphicBase
	DwType    DT_UINT
	BNegate   DT_INT
	DwPad     DT_UINT
	NMinLevel DT_INT
	NMaxLevel DT_INT
}

func (t *PlayerLevelRangeSubcondition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BNegate, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.NMinLevel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.NMaxLevel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PlayerLevelRangeSubcondition) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("BNegate", &t.BNegate, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("NMinLevel", &t.NMinLevel, d...)
	cb.Do("NMaxLevel", &t.NMaxLevel, d...)
}

type Type_36030d2d struct {
	ArTracks DT_POLYMORPHIC_VARIABLEARRAY[*DT_INT64]
}

func (t *Type_36030d2d) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.ArTracks, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_36030d2d) Walk(cb WalkCallback, d ...any) {
	cb.Do("ArTracks", &t.ArTracks, d...)
}

type UniqueOperatorChestGizmoData struct {
	// Inherits ChestGizmoData
	// Inherits NamedGizmoData
	// Inherits ActorGizmoData
	// Inherits PolymorphicBase
	DwType                            DT_UINT
	FDisableNonFriendlyOperation      DT_INT
	FWalkToCenter                     DT_INT
	FGizmoStartsDisabled              DT_INT
	FUseStringListName                DT_INT
	FForceMinimapIcon                 DT_INT
	FlOperationRadius                 DT_FLOAT
	Unk_d0b1df5                       DT_FLOAT
	FlGizmoUseTime                    DT_FLOAT
	SnoChannelingEffect               DT_SNO
	Unk_2767229                       DT_INT
	FGizmoShowProgressBar             DT_INT
	Unk_6d9ebe1                       DT_INT
	Unk_5456245                       DT_INT
	Unk_af5815a                       DT_INT
	SnoOnClickEffect                  DT_SNO
	SnoPickedUpEffect                 DT_SNO
	SnoDropOnGroundEffect             DT_SNO
	TConditionData                    GizmoConditionData
	SnoPowerOperator                  DT_SNO
	SnoPowerOperate                   DT_SNO
	SnoPowerOperatorActive            DT_SNO
	SnoPowerOperateActive             DT_SNO
	Unk_359810e                       DT_INT
	NCooldown                         DT_UINT
	Unk_9c8478e                       DT_UINT
	Unk_d45ed2d                       DT_INT
	Unk_f6b20b7                       DT_INT
	Unk_54513b8                       DT_INT
	Unk_fd1f378                       DT_UINT
	HGizmoOperateFlavorTextMsgLabel   DT_UINT
	HGizmoOperateDescriptionMsgLabel  DT_UINT
	FlGizmoOperateOffset              DT_FLOAT
	Unk_ab58cd3                       DT_ENUM
	Unk_91a3966                       DT_UINT
	HGizmoChannelingLabel             DT_UINT
	Unk_4be4371                       DT_INT
	SnoTreasureClass                  DT_SNO
	TLockData                         LockingGizmoData
	FChestRemovesCollisionOnOperation DT_INT
	FChestOperatesOnProximity         DT_INT
	FChestLight                       DT_INT
	Unk_51b0c11                       DT_INT
	Unk_6b4a81d                       DT_FLOAT
	DwPad                             DT_UINT
}

func (t *UniqueOperatorChestGizmoData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.FDisableNonFriendlyOperation, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.FWalkToCenter, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.FGizmoStartsDisabled, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.FUseStringListName, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.FForceMinimapIcon, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.FlOperationRadius, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.Unk_d0b1df5, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.FlGizmoUseTime, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.SnoChannelingEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.Unk_2767229, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.FGizmoShowProgressBar, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+60, &t.Unk_6d9ebe1, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.Unk_5456245, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.Unk_af5815a, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.SnoOnClickEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.SnoPickedUpEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.SnoDropOnGroundEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.TConditionData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.SnoPowerOperator, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.SnoPowerOperate, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.SnoPowerOperatorActive, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+100, &t.SnoPowerOperateActive, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+104, &t.Unk_359810e, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+108, &t.NCooldown, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.Unk_9c8478e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+116, &t.Unk_d45ed2d, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.Unk_f6b20b7, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+124, &t.Unk_54513b8, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.Unk_fd1f378, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+132, &t.HGizmoOperateFlavorTextMsgLabel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+136, &t.HGizmoOperateDescriptionMsgLabel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+140, &t.FlGizmoOperateOffset, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+144, &t.Unk_ab58cd3, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+148, &t.Unk_91a3966, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+152, &t.HGizmoChannelingLabel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+156, &t.Unk_4be4371, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+160, &t.SnoTreasureClass, r, &Options{
		Flags: 1,
		Group: 52,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+164, &t.TLockData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+200, &t.FChestRemovesCollisionOnOperation, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+204, &t.FChestOperatesOnProximity, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+208, &t.FChestLight, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+212, &t.Unk_51b0c11, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+216, &t.Unk_6b4a81d, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+220, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+224, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *UniqueOperatorChestGizmoData) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("FDisableNonFriendlyOperation", &t.FDisableNonFriendlyOperation, d...)
	cb.Do("FWalkToCenter", &t.FWalkToCenter, d...)
	cb.Do("FGizmoStartsDisabled", &t.FGizmoStartsDisabled, d...)
	cb.Do("FUseStringListName", &t.FUseStringListName, d...)
	cb.Do("FForceMinimapIcon", &t.FForceMinimapIcon, d...)
	cb.Do("FlOperationRadius", &t.FlOperationRadius, d...)
	cb.Do("Unk_d0b1df5", &t.Unk_d0b1df5, d...)
	cb.Do("FlGizmoUseTime", &t.FlGizmoUseTime, d...)
	cb.Do("SnoChannelingEffect", &t.SnoChannelingEffect, d...)
	cb.Do("Unk_2767229", &t.Unk_2767229, d...)
	cb.Do("FGizmoShowProgressBar", &t.FGizmoShowProgressBar, d...)
	cb.Do("Unk_6d9ebe1", &t.Unk_6d9ebe1, d...)
	cb.Do("Unk_5456245", &t.Unk_5456245, d...)
	cb.Do("Unk_af5815a", &t.Unk_af5815a, d...)
	cb.Do("SnoOnClickEffect", &t.SnoOnClickEffect, d...)
	cb.Do("SnoPickedUpEffect", &t.SnoPickedUpEffect, d...)
	cb.Do("SnoDropOnGroundEffect", &t.SnoDropOnGroundEffect, d...)
	cb.Do("TConditionData", &t.TConditionData, d...)
	cb.Do("SnoPowerOperator", &t.SnoPowerOperator, d...)
	cb.Do("SnoPowerOperate", &t.SnoPowerOperate, d...)
	cb.Do("SnoPowerOperatorActive", &t.SnoPowerOperatorActive, d...)
	cb.Do("SnoPowerOperateActive", &t.SnoPowerOperateActive, d...)
	cb.Do("Unk_359810e", &t.Unk_359810e, d...)
	cb.Do("NCooldown", &t.NCooldown, d...)
	cb.Do("Unk_9c8478e", &t.Unk_9c8478e, d...)
	cb.Do("Unk_d45ed2d", &t.Unk_d45ed2d, d...)
	cb.Do("Unk_f6b20b7", &t.Unk_f6b20b7, d...)
	cb.Do("Unk_54513b8", &t.Unk_54513b8, d...)
	cb.Do("Unk_fd1f378", &t.Unk_fd1f378, d...)
	cb.Do("HGizmoOperateFlavorTextMsgLabel", &t.HGizmoOperateFlavorTextMsgLabel, d...)
	cb.Do("HGizmoOperateDescriptionMsgLabel", &t.HGizmoOperateDescriptionMsgLabel, d...)
	cb.Do("FlGizmoOperateOffset", &t.FlGizmoOperateOffset, d...)
	cb.Do("Unk_ab58cd3", &t.Unk_ab58cd3, d...)
	cb.Do("Unk_91a3966", &t.Unk_91a3966, d...)
	cb.Do("HGizmoChannelingLabel", &t.HGizmoChannelingLabel, d...)
	cb.Do("Unk_4be4371", &t.Unk_4be4371, d...)
	cb.Do("SnoTreasureClass", &t.SnoTreasureClass, d...)
	cb.Do("TLockData", &t.TLockData, d...)
	cb.Do("FChestRemovesCollisionOnOperation", &t.FChestRemovesCollisionOnOperation, d...)
	cb.Do("FChestOperatesOnProximity", &t.FChestOperatesOnProximity, d...)
	cb.Do("FChestLight", &t.FChestLight, d...)
	cb.Do("Unk_51b0c11", &t.Unk_51b0c11, d...)
	cb.Do("Unk_6b4a81d", &t.Unk_6b4a81d, d...)
	cb.Do("DwPad", &t.DwPad, d...)
}

type SubzoneModifierStateMessage struct {
	THeader                RequiredMessageHeader
	GbidSubzoneModifierTag DT_GBID
	SnoSubzone             DT_SNO
	DwStartTime            DT_INT64
	DwEndTime              DT_INT64
	SnoQuest               DT_SNO
	WpLocation             DT_VECTOR3D
	NWorldStateValue       DT_INT
	BShouldNotify          DT_INT
}

func (t *SubzoneModifierStateMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.GbidSubzoneModifierTag, r, &Options{
		Flags: 1,
		Group: 60,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.SnoSubzone, r, &Options{
		Flags: 1,
		Group: 80,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.DwStartTime, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.DwEndTime, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.SnoQuest, r, &Options{
		Flags: 1,
		Group: 31,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.WpLocation, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.NWorldStateValue, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+60, &t.BShouldNotify, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+64, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *SubzoneModifierStateMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("GbidSubzoneModifierTag", &t.GbidSubzoneModifierTag, d...)
	cb.Do("SnoSubzone", &t.SnoSubzone, d...)
	cb.Do("DwStartTime", &t.DwStartTime, d...)
	cb.Do("DwEndTime", &t.DwEndTime, d...)
	cb.Do("SnoQuest", &t.SnoQuest, d...)
	cb.Do("WpLocation", &t.WpLocation, d...)
	cb.Do("NWorldStateValue", &t.NWorldStateValue, d...)
	cb.Do("BShouldNotify", &t.BShouldNotify, d...)
}

type TriggerEventFoley struct {
	// Inherits TriggerEvent
	// Inherits PolymorphicBase
	DwType             DT_UINT
	DwPad              DT_UINT
	TConditions        TriggerConditions
	FGenerated         DT_INT
	Unk_6cba752        DT_INT
	DwParentActorID    DT_UINT
	THardpointLink     HardpointLink
	SzFoleyTypeTag     DT_UINT
	SnoFoleySoundTable DT_SNO
	Unk_e6137fe        DT_UINT
	FMustAttach        DT_INT
	DwID               DT_UINT
	TCleanup           TriggerCleanup
}

func (t *TriggerEventFoley) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.FGenerated, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_6cba752, r, &Options{Flags: 16}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.DwParentActorID, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.THardpointLink, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.SzFoleyTypeTag, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.SnoFoleySoundTable, r, &Options{
		Flags: 513,
		Group: 79,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.Unk_e6137fe, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+100, &t.FMustAttach, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+104, &t.DwID, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+108, &t.TCleanup, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+136, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TriggerEventFoley) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("TConditions", &t.TConditions, d...)
	cb.Do("FGenerated", &t.FGenerated, d...)
	cb.Do("Unk_6cba752", &t.Unk_6cba752, d...)
	cb.Do("DwParentActorID", &t.DwParentActorID, d...)
	cb.Do("THardpointLink", &t.THardpointLink, d...)
	cb.Do("SzFoleyTypeTag", &t.SzFoleyTypeTag, d...)
	cb.Do("SnoFoleySoundTable", &t.SnoFoleySoundTable, d...)
	cb.Do("Unk_e6137fe", &t.Unk_e6137fe, d...)
	cb.Do("FMustAttach", &t.FMustAttach, d...)
	cb.Do("DwID", &t.DwID, d...)
	cb.Do("TCleanup", &t.TCleanup, d...)
}

type TexAnim struct {
	// Inherits PolymorphicBase
	DwType   DT_UINT
	DwPad    DT_UINT
	FlUScale DT_FLOAT
	FlVScale DT_FLOAT
}

func (t *TexAnim) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.FlUScale, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.FlVScale, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TexAnim) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("FlUScale", &t.FlUScale, d...)
	cb.Do("FlVScale", &t.FlVScale, d...)
}

type PowerConditionDungeonTier struct {
	// Inherits PowerConditionBase
	// Inherits PolymorphicBase
	DwType   DT_UINT
	BInverse DT_INT
	DwPad    DT_UINT
	ETier    DT_ENUM
}

func (t *PowerConditionDungeonTier) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BInverse, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ETier, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PowerConditionDungeonTier) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("BInverse", &t.BInverse, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("ETier", &t.ETier, d...)
}

type PassivePowerContainerDefinition struct {
	SnoPower         DT_SNO
	ERarity          DT_ENUM
	EUnlockType      DT_ENUM
	ArArmorPactCosts DT_VARIABLEARRAY[*ArmorPactCost]
	Unk_4968995      StringLabelHandleEx
	Unk_be04306      DT_VARIABLEARRAY[*DT_GBID]
	HIcon            ItemImageHandleReference
	HIconEquipped    ItemImageHandleReference
	HIconLocked      ItemImageHandleReference
}

func (t *PassivePowerContainerDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.SnoPower, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.ERarity, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.EUnlockType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ArArmorPactCosts, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.Unk_4968995, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.Unk_be04306, r, &Options{
		Flags: 1,
		Group: 56,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.HIcon, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.HIconEquipped, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.HIconLocked, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+80, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PassivePowerContainerDefinition) Walk(cb WalkCallback, d ...any) {
	cb.Do("SnoPower", &t.SnoPower, d...)
	cb.Do("ERarity", &t.ERarity, d...)
	cb.Do("EUnlockType", &t.EUnlockType, d...)
	cb.Do("ArArmorPactCosts", &t.ArArmorPactCosts, d...)
	cb.Do("Unk_4968995", &t.Unk_4968995, d...)
	cb.Do("Unk_be04306", &t.Unk_be04306, d...)
	cb.Do("HIcon", &t.HIcon, d...)
	cb.Do("HIconEquipped", &t.HIconEquipped, d...)
	cb.Do("HIconLocked", &t.HIconLocked, d...)
}

type CommandFrameSynchronizeMessage struct {
	THeader       RequiredMessageHeader
	UCommandFrame DT_UINT
	Unk_b0fd968   DT_UINT
	UFlags        DT_BYTE
}

func (t *CommandFrameSynchronizeMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.UCommandFrame, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.Unk_b0fd968, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.UFlags, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+28, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *CommandFrameSynchronizeMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("UCommandFrame", &t.UCommandFrame, d...)
	cb.Do("Unk_b0fd968", &t.Unk_b0fd968, d...)
	cb.Do("UFlags", &t.UFlags, d...)
}

type ObjectiveRegionParams struct {
	TDefault           IndicatorTypeMinor
	THover             IndicatorTypeMinor
	TTracked           IndicatorTypeMinor
	THoverTracked      IndicatorTypeMinor
	FlFalloffThickness DT_FLOAT
	FlThickness        DT_FLOAT
	SnoPattern         DT_SNO
	FlPatternRepeats   DT_FLOAT
	FlPatternThickness DT_FLOAT
}

func (t *ObjectiveRegionParams) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.TDefault, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.THover, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.TTracked, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.THoverTracked, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.FlFalloffThickness, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.FlThickness, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.SnoPattern, r, &Options{
		Flags: 1,
		Group: 44,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.FlPatternRepeats, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.FlPatternThickness, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+84, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ObjectiveRegionParams) Walk(cb WalkCallback, d ...any) {
	cb.Do("TDefault", &t.TDefault, d...)
	cb.Do("THover", &t.THover, d...)
	cb.Do("TTracked", &t.TTracked, d...)
	cb.Do("THoverTracked", &t.THoverTracked, d...)
	cb.Do("FlFalloffThickness", &t.FlFalloffThickness, d...)
	cb.Do("FlThickness", &t.FlThickness, d...)
	cb.Do("SnoPattern", &t.SnoPattern, d...)
	cb.Do("FlPatternRepeats", &t.FlPatternRepeats, d...)
	cb.Do("FlPatternThickness", &t.FlPatternThickness, d...)
}

type TriggerEventMusic struct {
	// Inherits TriggerEvent
	// Inherits PolymorphicBase
	DwType          DT_UINT
	DwPad           DT_UINT
	TConditions     TriggerConditions
	FGenerated      DT_INT
	Unk_6cba752     DT_INT
	DwParentActorID DT_UINT
	SnoMusic        DT_SNO
}

func (t *TriggerEventMusic) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.FGenerated, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_6cba752, r, &Options{Flags: 16}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.DwParentActorID, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.SnoMusic, r, &Options{
		Flags: 1,
		Group: 62,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+88, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TriggerEventMusic) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("TConditions", &t.TConditions, d...)
	cb.Do("FGenerated", &t.FGenerated, d...)
	cb.Do("Unk_6cba752", &t.Unk_6cba752, d...)
	cb.Do("DwParentActorID", &t.DwParentActorID, d...)
	cb.Do("SnoMusic", &t.SnoMusic, d...)
}

type ShaderDefinition struct {
	DwRenderLayers DT_UINT
	PtPasses       DT_VARIABLEARRAY[*RenderPass]
	Unk_a0d6c95    DT_INT
	Unk_860effa    DT_INT
	Unk_cee0ffd    DT_CHARARRAY
	PShaderData    DT_VARIABLEARRAY[*DT_BYTE]
}

func (t *ShaderDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwRenderLayers, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.PtPasses, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.Unk_a0d6c95, r, &Options{Flags: 16}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.Unk_860effa, r, &Options{Flags: 16}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.Unk_cee0ffd, r, &Options{ArrayLength: 256}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+296, &t.PShaderData, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if _, err := r.Seek(p+312, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ShaderDefinition) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwRenderLayers", &t.DwRenderLayers, d...)
	cb.Do("PtPasses", &t.PtPasses, d...)
	cb.Do("Unk_a0d6c95", &t.Unk_a0d6c95, d...)
	cb.Do("Unk_860effa", &t.Unk_860effa, d...)
	cb.Do("Unk_cee0ffd", &t.Unk_cee0ffd, d...)
	cb.Do("PShaderData", &t.PShaderData, d...)
}

type BoolDataMessage struct {
	THeader RequiredMessageHeader
	BVal    DT_INT
}

func (t *BoolDataMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BVal, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+20, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *BoolDataMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("BVal", &t.BVal, d...)
}

type TriggerEventVoice struct {
	// Inherits TriggerEvent
	// Inherits PolymorphicBase
	DwType             DT_UINT
	DwPad              DT_UINT
	TConditions        TriggerConditions
	FGenerated         DT_INT
	Unk_6cba752        DT_INT
	DwParentActorID    DT_UINT
	THardpointLink     HardpointLink
	SzVoiceTypeTag     DT_UINT
	SnoVoiceSoundTable DT_SNO
	DwID               DT_UINT
	TCleanup           TriggerCleanup
}

func (t *TriggerEventVoice) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.FGenerated, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_6cba752, r, &Options{Flags: 16}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.DwParentActorID, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.THardpointLink, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.SzVoiceTypeTag, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.SnoVoiceSoundTable, r, &Options{
		Flags: 513,
		Group: 79,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.DwID, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+100, &t.TCleanup, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+128, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TriggerEventVoice) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("TConditions", &t.TConditions, d...)
	cb.Do("FGenerated", &t.FGenerated, d...)
	cb.Do("Unk_6cba752", &t.Unk_6cba752, d...)
	cb.Do("DwParentActorID", &t.DwParentActorID, d...)
	cb.Do("THardpointLink", &t.THardpointLink, d...)
	cb.Do("SzVoiceTypeTag", &t.SzVoiceTypeTag, d...)
	cb.Do("SnoVoiceSoundTable", &t.SnoVoiceSoundTable, d...)
	cb.Do("DwID", &t.DwID, d...)
	cb.Do("TCleanup", &t.TCleanup, d...)
}

type NpcLookEntry struct {
	GbidLookTag                DT_GBID
	SnoMaleComponentSet        DT_SNO
	SnoMaleAppearance          DT_SNO
	SnoFemaleComponentSet      DT_SNO
	SnoFemaleAppearance        DT_SNO
	SnoMountedAnimSetOverride  DT_SNO
	SnoMountedAnimTreeOverride DT_SNO
	ArAnimSetOverrides         DT_VARIABLEARRAY[*AnimSetOverrideEntry]
	EActorVariantType          DT_ENUM
	SzToolTip                  DT_CSTRING[*DT_BYTE]
	Unk_83f3d3e                DT_INT
	FHideIdles                 DT_INT
	Unk_fd60c8f                DT_INT
	Unk_8711100                DT_INT
	Unk_d289db4                DT_INT
	Unk_c3784ea                DT_INT
}

func (t *NpcLookEntry) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.GbidLookTag, r, &Options{
		Flags: 1,
		Group: 52,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.SnoMaleComponentSet, r, &Options{
		Flags: 1,
		Group: 2,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.SnoMaleAppearance, r, &Options{
		Flags: 1,
		Group: 9,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.SnoFemaleComponentSet, r, &Options{
		Flags: 1,
		Group: 2,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoFemaleAppearance, r, &Options{
		Flags: 1,
		Group: 9,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.SnoMountedAnimSetOverride, r, &Options{
		Flags: 1,
		Group: 8,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SnoMountedAnimTreeOverride, r, &Options{
		Flags: 1,
		Group: 67,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.ArAnimSetOverrides, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.EActorVariantType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.SzToolTip, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_83f3d3e, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.FHideIdles, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.Unk_fd60c8f, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.Unk_8711100, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.Unk_d289db4, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.Unk_c3784ea, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+96, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *NpcLookEntry) Walk(cb WalkCallback, d ...any) {
	cb.Do("GbidLookTag", &t.GbidLookTag, d...)
	cb.Do("SnoMaleComponentSet", &t.SnoMaleComponentSet, d...)
	cb.Do("SnoMaleAppearance", &t.SnoMaleAppearance, d...)
	cb.Do("SnoFemaleComponentSet", &t.SnoFemaleComponentSet, d...)
	cb.Do("SnoFemaleAppearance", &t.SnoFemaleAppearance, d...)
	cb.Do("SnoMountedAnimSetOverride", &t.SnoMountedAnimSetOverride, d...)
	cb.Do("SnoMountedAnimTreeOverride", &t.SnoMountedAnimTreeOverride, d...)
	cb.Do("ArAnimSetOverrides", &t.ArAnimSetOverrides, d...)
	cb.Do("EActorVariantType", &t.EActorVariantType, d...)
	cb.Do("SzToolTip", &t.SzToolTip, d...)
	cb.Do("Unk_83f3d3e", &t.Unk_83f3d3e, d...)
	cb.Do("FHideIdles", &t.FHideIdles, d...)
	cb.Do("Unk_fd60c8f", &t.Unk_fd60c8f, d...)
	cb.Do("Unk_8711100", &t.Unk_8711100, d...)
	cb.Do("Unk_d289db4", &t.Unk_d289db4, d...)
	cb.Do("Unk_c3784ea", &t.Unk_c3784ea, d...)
}

type UIHotbarButtonStyle struct {
	// Inherits UIButtonStyle
	// Inherits UITextStyle
	// Inherits UIWindowStyle
	// Inherits UIControlStyle
	// Inherits PolymorphicBase
	DwType                      DT_UINT
	DwPad                       DT_UINT
	HParentStyle                UIControlHandle
	Unk_441f783                 DT_INT64
	M_eHasModifiedPowerTagMap   DT_TAGMAP[*DT_ENUM]
	TConsoleInput               UIControlConsoleInput
	Unk_b4f614c                 DT_TAGMAP[*DT_ENUM]
	TFont                       UIControlFont
	PtUIControlTagMapIconLabels DT_TAGMAP[*DT_ENUM]
	TIcon                       UIControlIcon
	TClickSounds                UIControlClickSounds
	Unk_10f81f0                 DT_TAGMAP[*DT_ENUM]
	Unk_3c001f0                 DT_TAGMAP[*DT_ENUM]
}

func (t *UIHotbarButtonStyle) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.HParentStyle, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_441f783, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.M_eHasModifiedPowerTagMap, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.TConsoleInput, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.Unk_b4f614c, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.TFont, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.PtUIControlTagMapIconLabels, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.TIcon, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.TClickSounds, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+144, &t.Unk_10f81f0, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+160, &t.Unk_3c001f0, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+176, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *UIHotbarButtonStyle) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("HParentStyle", &t.HParentStyle, d...)
	cb.Do("Unk_441f783", &t.Unk_441f783, d...)
	cb.Do("M_eHasModifiedPowerTagMap", &t.M_eHasModifiedPowerTagMap, d...)
	cb.Do("TConsoleInput", &t.TConsoleInput, d...)
	cb.Do("Unk_b4f614c", &t.Unk_b4f614c, d...)
	cb.Do("TFont", &t.TFont, d...)
	cb.Do("PtUIControlTagMapIconLabels", &t.PtUIControlTagMapIconLabels, d...)
	cb.Do("TIcon", &t.TIcon, d...)
	cb.Do("TClickSounds", &t.TClickSounds, d...)
	cb.Do("Unk_10f81f0", &t.Unk_10f81f0, d...)
	cb.Do("Unk_3c001f0", &t.Unk_3c001f0, d...)
}

type EmoteDefinition struct {
	SnoPower       DT_SNO
	HImageNormal   DT_UINT
	HImageHover    DT_UINT
	HImageDisabled DT_UINT
}

func (t *EmoteDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.SnoPower, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.HImageNormal, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.HImageHover, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.HImageDisabled, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *EmoteDefinition) Walk(cb WalkCallback, d ...any) {
	cb.Do("SnoPower", &t.SnoPower, d...)
	cb.Do("HImageNormal", &t.HImageNormal, d...)
	cb.Do("HImageHover", &t.HImageHover, d...)
	cb.Do("HImageDisabled", &t.HImageDisabled, d...)
}

type MarkerLightData struct {
	// Inherits MarkerDataBase
	// Inherits PolymorphicBase
	DwType        DT_UINT
	DwPad         DT_UINT
	TInstanceData LightInstanceData
	Unk_ef69835   DT_INT
}

func (t *MarkerLightData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TInstanceData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+912, &t.Unk_ef69835, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+920, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *MarkerLightData) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("TInstanceData", &t.TInstanceData, d...)
	cb.Do("Unk_ef69835", &t.Unk_ef69835, d...)
}

type ListenerReaction struct {
	SnoListener DT_SNO
	SnonameAnim DT_SNO_NAME
}

func (t *ListenerReaction) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoListener, r, &Options{
		Flags: 1,
		Group: 72,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.SnonameAnim, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+12, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ListenerReaction) Walk(cb WalkCallback, d ...any) {
	cb.Do("SnoListener", &t.SnoListener, d...)
	cb.Do("SnonameAnim", &t.SnonameAnim, d...)
}

type EnterKnownShaderMapOverrides struct {
	AShaderMapOverrides DT_FIXEDARRAY[*DT_UINT]
}

func (t *EnterKnownShaderMapOverrides) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.AShaderMapOverrides, r, &Options{
		ArrayLength: 6,
		Flags:       1,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *EnterKnownShaderMapOverrides) Walk(cb WalkCallback, d ...any) {
	cb.Do("AShaderMapOverrides", &t.AShaderMapOverrides, d...)
}

type NecroArmyUnitSpecializationSacrificeData struct {
	SnoSacrificePower DT_SNO
}

func (t *NecroArmyUnitSpecializationSacrificeData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoSacrificePower, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+4, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *NecroArmyUnitSpecializationSacrificeData) Walk(cb WalkCallback, d ...any) {
	cb.Do("SnoSacrificePower", &t.SnoSacrificePower, d...)
}

type SoundEventGameParameter struct {
	EScalarFunction     DT_ENUM
	EWwiseGameParameter DT_ENUM
	UID                 DT_UINT
	UNameHash           DT_UINT
	FBypass             DT_INT
}

func (t *SoundEventGameParameter) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.EScalarFunction, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.EWwiseGameParameter, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.UID, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.UNameHash, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.FBypass, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+20, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *SoundEventGameParameter) Walk(cb WalkCallback, d ...any) {
	cb.Do("EScalarFunction", &t.EScalarFunction, d...)
	cb.Do("EWwiseGameParameter", &t.EWwiseGameParameter, d...)
	cb.Do("UID", &t.UID, d...)
	cb.Do("UNameHash", &t.UNameHash, d...)
	cb.Do("FBypass", &t.FBypass, d...)
}

type AnimTreeLayerName struct {
	DwHash DT_UINT
}

func (t *AnimTreeLayerName) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.DwHash, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+4, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *AnimTreeLayerName) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwHash", &t.DwHash, d...)
}

type MaterialValue_float struct {
	Value        DT_FLOAT
	FUsesGraph   DT_INT
	PathValGraph InterpolationPath_float
}

func (t *MaterialValue_float) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Value, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.FUsesGraph, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.PathValGraph, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+64, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *MaterialValue_float) Walk(cb WalkCallback, d ...any) {
	cb.Do("Value", &t.Value, d...)
	cb.Do("FUsesGraph", &t.FUsesGraph, d...)
	cb.Do("PathValGraph", &t.PathValGraph, d...)
}

type MaterialValue_int32 struct {
	Value        DT_INT
	FUsesGraph   DT_INT
	PathValGraph InterpolationPath_int32
}

func (t *MaterialValue_int32) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Value, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.FUsesGraph, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.PathValGraph, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+64, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *MaterialValue_int32) Walk(cb WalkCallback, d ...any) {
	cb.Do("Value", &t.Value, d...)
	cb.Do("FUsesGraph", &t.FUsesGraph, d...)
	cb.Do("PathValGraph", &t.PathValGraph, d...)
}

type DebugPlayerProcessHelpCodeMessage struct {
	THeader      RequiredMessageHeader
	Ann          DT_ACD_NETWORK_NAME
	GbidHelpCode DT_GBID
}

func (t *DebugPlayerProcessHelpCodeMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Ann, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.GbidHelpCode, r, &Options{
		Flags: 1,
		Group: 9,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+28, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *DebugPlayerProcessHelpCodeMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("Ann", &t.Ann, d...)
	cb.Do("GbidHelpCode", &t.GbidHelpCode, d...)
}

type NotLogicSubcondition struct {
	// Inherits Subcondition
	// Inherits PolymorphicBase
	DwType      DT_UINT
	BNegate     DT_INT
	DwPad       DT_UINT
	PtCondition DT_POLYMORPHIC_VARIABLEARRAY[*Subcondition]
}

func (t *NotLogicSubcondition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BNegate, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.PtCondition, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *NotLogicSubcondition) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("BNegate", &t.BNegate, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("PtCondition", &t.PtCondition, d...)
}

type EffectGroupHardpoint struct {
	TInfo     HardpointInfo
	Transform PRTransform
}

func (t *EffectGroupHardpoint) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.TInfo, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.Transform, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+36, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *EffectGroupHardpoint) Walk(cb WalkCallback, d ...any) {
	cb.Do("TInfo", &t.TInfo, d...)
	cb.Do("Transform", &t.Transform, d...)
}

type ParametricSettings struct {
	FCavity                        DT_INT
	ECavityMode                    DT_ENUM
	FlCavityTolerance              DT_FLOAT
	FlCavitySmoothness             DT_FLOAT
	FHeight                        DT_INT
	FlHeightMin                    DT_FLOAT
	FlHeightMinSmoothness          DT_FLOAT
	FlHeightMax                    DT_FLOAT
	FlHeightMaxSmoothness          DT_FLOAT
	FSlope                         DT_INT
	FlSlopeMin                     DT_FLOAT
	FlSlopeMinSmoothness           DT_FLOAT
	FlSlopeMax                     DT_FLOAT
	FlSlopeMaxSmoothness           DT_FLOAT
	FDirection                     DT_INT
	FlDirectionAltitude            DT_FLOAT
	FlDirectionAzimuth             DT_FLOAT
	FlDirectionTolerance           DT_FLOAT
	FlDirectionSmoothness          DT_FLOAT
	FNoise                         DT_INT
	FlNoiseFrequency               DT_FLOAT
	FlNoiseTileDistance            DT_FLOAT
	FlNoiseMin                     DT_FLOAT
	FlNoiseMax                     DT_FLOAT
	VNoiseOffset                   DT_VECTOR2D
	FDistanceToWater               DT_INT
	FlDistanceToWaterMin           DT_FLOAT
	FlDistanceToWaterMinSmoothness DT_FLOAT
	FlDistanceToWaterMax           DT_FLOAT
	FlDistanceToWaterMaxSmoothness DT_FLOAT
	FInvert                        DT_INT
}

func (t *ParametricSettings) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.FCavity, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.ECavityMode, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.FlCavityTolerance, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.FlCavitySmoothness, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.FHeight, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.FlHeightMin, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.FlHeightMinSmoothness, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.FlHeightMax, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.FlHeightMaxSmoothness, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.FSlope, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.FlSlopeMin, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.FlSlopeMinSmoothness, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.FlSlopeMax, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.FlSlopeMaxSmoothness, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.FDirection, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+60, &t.FlDirectionAltitude, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.FlDirectionAzimuth, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.FlDirectionTolerance, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.FlDirectionSmoothness, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.FNoise, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.FlNoiseFrequency, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.FlNoiseTileDistance, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.FlNoiseMin, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.FlNoiseMax, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.VNoiseOffset, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+104, &t.FDistanceToWater, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+108, &t.FlDistanceToWaterMin, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.FlDistanceToWaterMinSmoothness, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+116, &t.FlDistanceToWaterMax, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.FlDistanceToWaterMaxSmoothness, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+124, &t.FInvert, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+128, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ParametricSettings) Walk(cb WalkCallback, d ...any) {
	cb.Do("FCavity", &t.FCavity, d...)
	cb.Do("ECavityMode", &t.ECavityMode, d...)
	cb.Do("FlCavityTolerance", &t.FlCavityTolerance, d...)
	cb.Do("FlCavitySmoothness", &t.FlCavitySmoothness, d...)
	cb.Do("FHeight", &t.FHeight, d...)
	cb.Do("FlHeightMin", &t.FlHeightMin, d...)
	cb.Do("FlHeightMinSmoothness", &t.FlHeightMinSmoothness, d...)
	cb.Do("FlHeightMax", &t.FlHeightMax, d...)
	cb.Do("FlHeightMaxSmoothness", &t.FlHeightMaxSmoothness, d...)
	cb.Do("FSlope", &t.FSlope, d...)
	cb.Do("FlSlopeMin", &t.FlSlopeMin, d...)
	cb.Do("FlSlopeMinSmoothness", &t.FlSlopeMinSmoothness, d...)
	cb.Do("FlSlopeMax", &t.FlSlopeMax, d...)
	cb.Do("FlSlopeMaxSmoothness", &t.FlSlopeMaxSmoothness, d...)
	cb.Do("FDirection", &t.FDirection, d...)
	cb.Do("FlDirectionAltitude", &t.FlDirectionAltitude, d...)
	cb.Do("FlDirectionAzimuth", &t.FlDirectionAzimuth, d...)
	cb.Do("FlDirectionTolerance", &t.FlDirectionTolerance, d...)
	cb.Do("FlDirectionSmoothness", &t.FlDirectionSmoothness, d...)
	cb.Do("FNoise", &t.FNoise, d...)
	cb.Do("FlNoiseFrequency", &t.FlNoiseFrequency, d...)
	cb.Do("FlNoiseTileDistance", &t.FlNoiseTileDistance, d...)
	cb.Do("FlNoiseMin", &t.FlNoiseMin, d...)
	cb.Do("FlNoiseMax", &t.FlNoiseMax, d...)
	cb.Do("VNoiseOffset", &t.VNoiseOffset, d...)
	cb.Do("FDistanceToWater", &t.FDistanceToWater, d...)
	cb.Do("FlDistanceToWaterMin", &t.FlDistanceToWaterMin, d...)
	cb.Do("FlDistanceToWaterMinSmoothness", &t.FlDistanceToWaterMinSmoothness, d...)
	cb.Do("FlDistanceToWaterMax", &t.FlDistanceToWaterMax, d...)
	cb.Do("FlDistanceToWaterMaxSmoothness", &t.FlDistanceToWaterMaxSmoothness, d...)
	cb.Do("FInvert", &t.FInvert, d...)
}

type GeneratorToItemResponseMessage struct {
	THeader RequiredResponseMessageHeader
	TItemId Type_f5ac91bb
	Ann     DT_ACD_NETWORK_NAME
}

func (t *GeneratorToItemResponseMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.TItemId, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.Ann, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *GeneratorToItemResponseMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("TItemId", &t.TItemId, d...)
	cb.Do("Ann", &t.Ann, d...)
}

type OnHitSounds struct {
	Sno1P         DT_SNO
	Sno3PEnemy    DT_SNO
	Sno3PFriendly DT_SNO
}

func (t *OnHitSounds) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Sno1P, r, &Options{
		Flags: 1,
		Group: 40,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.Sno3PEnemy, r, &Options{
		Flags: 1,
		Group: 40,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.Sno3PFriendly, r, &Options{
		Flags: 1,
		Group: 40,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+12, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *OnHitSounds) Walk(cb WalkCallback, d ...any) {
	cb.Do("Sno1P", &t.Sno1P, d...)
	cb.Do("Sno3PEnemy", &t.Sno3PEnemy, d...)
	cb.Do("Sno3PFriendly", &t.Sno3PFriendly, d...)
}

type CraftMultipleMessage struct {
	THeader   RequiredMessageHeader
	SnoRecipe DT_SNO
	UAmount   DT_INT64
}

func (t *CraftMultipleMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoRecipe, r, &Options{
		Flags: 1,
		Group: 49,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.UAmount, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *CraftMultipleMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("SnoRecipe", &t.SnoRecipe, d...)
	cb.Do("UAmount", &t.UAmount, d...)
}

type BloodSealSetExperienceMessage struct {
	THeader      RequiredMessageHeader
	SnoBloodSeal DT_SNO
	DwExperience DT_UINT
}

func (t *BloodSealSetExperienceMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoBloodSeal, r, &Options{
		Flags: 1,
		Group: 142,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwExperience, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *BloodSealSetExperienceMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("SnoBloodSeal", &t.SnoBloodSeal, d...)
	cb.Do("DwExperience", &t.DwExperience, d...)
}

type MarkerReflectionProbeData struct {
	// Inherits MarkerDataBase
	// Inherits PolymorphicBase
	DwType           DT_UINT
	DwPad            DT_UINT
	Unk_65aa6d9      DT_ENUM
	FlInnerScale     DT_FLOAT
	Unk_fb8100e      DT_FLOAT
	SnoTexture       DT_SNO
	QTextureRotation bcQuat
	Unk_340c842      DT_INT
	FHighQuality     DT_INT
	Unk_4f5b254      DT_VECTOR3D
	Unk_56127ed      DT_ENUM
}

func (t *MarkerReflectionProbeData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_65aa6d9, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.FlInnerScale, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_fb8100e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.SnoTexture, r, &Options{
		Flags: 1,
		Group: 44,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.QTextureRotation, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.Unk_340c842, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.FHighQuality, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.Unk_4f5b254, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.Unk_56127ed, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+72, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *MarkerReflectionProbeData) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("Unk_65aa6d9", &t.Unk_65aa6d9, d...)
	cb.Do("FlInnerScale", &t.FlInnerScale, d...)
	cb.Do("Unk_fb8100e", &t.Unk_fb8100e, d...)
	cb.Do("SnoTexture", &t.SnoTexture, d...)
	cb.Do("QTextureRotation", &t.QTextureRotation, d...)
	cb.Do("Unk_340c842", &t.Unk_340c842, d...)
	cb.Do("FHighQuality", &t.FHighQuality, d...)
	cb.Do("Unk_4f5b254", &t.Unk_4f5b254, d...)
	cb.Do("Unk_56127ed", &t.Unk_56127ed, d...)
}

type HearthPortalInfoMessage struct {
	THeader      RequiredMessageHeader
	SnoLevelArea DT_SNO
	AnnPortal    DT_ACD_NETWORK_NAME
	BResetUI     DT_INT
}

func (t *HearthPortalInfoMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoLevelArea, r, &Options{
		Flags: 1,
		Group: 22,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.AnnPortal, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.BResetUI, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *HearthPortalInfoMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("SnoLevelArea", &t.SnoLevelArea, d...)
	cb.Do("AnnPortal", &t.AnnPortal, d...)
	cb.Do("BResetUI", &t.BResetUI, d...)
}

type ScriptEventParamOwnerFollower struct {
	// Inherits ScriptEventParamBase
	// Inherits PolymorphicBase
	DwType     DT_UINT
	EParamType DT_ENUM
	DwPad      DT_UINT
	SnoActor   DT_SNO
}

func (t *ScriptEventParamOwnerFollower) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.EParamType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SnoActor, r, &Options{
		Flags: 513,
		Group: 1,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ScriptEventParamOwnerFollower) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("EParamType", &t.EParamType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("SnoActor", &t.SnoActor, d...)
}

type ConditionalAudioState struct {
	TDefaultAudioState WwiseSwitchValue
	ArStateSetters     DT_VARIABLEARRAY[*ConditionalAudioStateSetter]
}

func (t *ConditionalAudioState) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.TDefaultAudioState, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.ArStateSetters, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ConditionalAudioState) Walk(cb WalkCallback, d ...any) {
	cb.Do("TDefaultAudioState", &t.TDefaultAudioState, d...)
	cb.Do("ArStateSetters", &t.ArStateSetters, d...)
}

type PlayerWorldTierSubcondition struct {
	// Inherits NumericComparisonSubcondition
	// Inherits Subcondition
	// Inherits PolymorphicBase
	DwType        DT_UINT
	BNegate       DT_INT
	EComparisonOp DT_ENUM
	DwPad         DT_UINT
	EWorldTier    DT_ENUM
}

func (t *PlayerWorldTierSubcondition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BNegate, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.EComparisonOp, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.EWorldTier, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+40, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PlayerWorldTierSubcondition) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("BNegate", &t.BNegate, d...)
	cb.Do("EComparisonOp", &t.EComparisonOp, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("EWorldTier", &t.EWorldTier, d...)
}

type AnimSetPowerEntry struct {
	SnoPower              DT_SNO
	SnoAnim               DT_SNO
	SnoFemaleOverrideAnim DT_SNO
}

func (t *AnimSetPowerEntry) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoPower, r, &Options{
		Flags: 513,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.SnoAnim, r, &Options{
		Flags: 1,
		Group: 6,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.SnoFemaleOverrideAnim, r, &Options{
		Flags: 1,
		Group: 6,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+12, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *AnimSetPowerEntry) Walk(cb WalkCallback, d ...any) {
	cb.Do("SnoPower", &t.SnoPower, d...)
	cb.Do("SnoAnim", &t.SnoAnim, d...)
	cb.Do("SnoFemaleOverrideAnim", &t.SnoFemaleOverrideAnim, d...)
}

type FreezeDirectionMessage struct {
	THeader           RequiredMessageHeader
	AnnTarget         DT_OPTIONAL[*DT_ACD_NETWORK_NAME]
	VLocalImpactPos   DT_OPTIONAL[*DT_VECTOR3D]
	FlImpactDirection DT_OPTIONAL[*DT_FLOAT]
	Unk_a6fef34       DT_OPTIONAL[*DT_VECTOR3D]
}

func (t *FreezeDirectionMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.AnnTarget, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.VLocalImpactPos, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.FlImpactDirection, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.Unk_a6fef34, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+68, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *FreezeDirectionMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("AnnTarget", &t.AnnTarget, d...)
	cb.Do("VLocalImpactPos", &t.VLocalImpactPos, d...)
	cb.Do("FlImpactDirection", &t.FlImpactDirection, d...)
	cb.Do("Unk_a6fef34", &t.Unk_a6fef34, d...)
}

type dmClothDataMirror struct {
	BindVertices      DT_INT64
	BindNormals       DT_INT64
	Unk_1655a99       DT_INT64
	BlendWeights      DT_INT64
	Unk_55f9a53       DT_INT64
	DeltaFrames       DT_INT64
	Levels            DT_INT64
	AttachmentLengths DT_INT64
	ParentIndices     DT_INT64
	KinematicRoots    DT_INT64
	TangentIndices    DT_INT64
	Weights           DT_INT64
	DriverInfluences  DT_INT64
	FollowerIndices   DT_INT64
	Triangles         DT_INT64
	ConstraintIndices DT_INT64
	ConstraintLengths DT_INT64
	Unk_d55a167       DT_INT64
	Unk_e5fff43       DT_INT64
	WarpClusters      DT_INT64
	WeftClusters      DT_INT64
	ShearClusters     DT_INT64
	BendClusters      DT_INT64
	CapsuleDefs       DT_INT64
	PlaneDefs         DT_INT64
	DriverBindPose    DT_INT64
	DriverMap         DT_INT64
	Name              DT_FIXEDARRAY[*DT_BYTE]
	Density           DT_FLOAT
	VertexCount       DT_WORD
	VertexCapacity    DT_WORD
	KinematicCount    DT_WORD
	TriangleCount     DT_WORD
	WarpClusterCount  DT_WORD
	WeftClusterCount  DT_WORD
	ShearClusterCount DT_WORD
	BendClusterCount  DT_WORD
	ConstraintCount   DT_WORD
	Unk_9460e91       DT_WORD
	MaxLevel          DT_WORD
	BoneCount         DT_WORD
	DriverCount       DT_WORD
	CapsuleCount      DT_WORD
	PlaneCount        DT_WORD
}

func (t *dmClothDataMirror) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.BindVertices, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.BindNormals, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_1655a99, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.BlendWeights, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.Unk_55f9a53, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.DeltaFrames, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.Levels, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.AttachmentLengths, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.ParentIndices, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.KinematicRoots, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.TangentIndices, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.Weights, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.DriverInfluences, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+104, &t.FollowerIndices, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.Triangles, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.ConstraintIndices, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.ConstraintLengths, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+136, &t.Unk_d55a167, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+144, &t.Unk_e5fff43, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+152, &t.WarpClusters, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+160, &t.WeftClusters, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+168, &t.ShearClusters, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+176, &t.BendClusters, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+184, &t.CapsuleDefs, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+192, &t.PlaneDefs, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+200, &t.DriverBindPose, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+208, &t.DriverMap, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+216, &t.Name, r, &Options{ArrayLength: 32}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+248, &t.Density, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+252, &t.VertexCount, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+254, &t.VertexCapacity, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+256, &t.KinematicCount, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+258, &t.TriangleCount, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+260, &t.WarpClusterCount, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+262, &t.WeftClusterCount, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+264, &t.ShearClusterCount, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+266, &t.BendClusterCount, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+268, &t.ConstraintCount, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+270, &t.Unk_9460e91, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+272, &t.MaxLevel, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+274, &t.BoneCount, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+276, &t.DriverCount, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+278, &t.CapsuleCount, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+280, &t.PlaneCount, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+288, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *dmClothDataMirror) Walk(cb WalkCallback, d ...any) {
	cb.Do("BindVertices", &t.BindVertices, d...)
	cb.Do("BindNormals", &t.BindNormals, d...)
	cb.Do("Unk_1655a99", &t.Unk_1655a99, d...)
	cb.Do("BlendWeights", &t.BlendWeights, d...)
	cb.Do("Unk_55f9a53", &t.Unk_55f9a53, d...)
	cb.Do("DeltaFrames", &t.DeltaFrames, d...)
	cb.Do("Levels", &t.Levels, d...)
	cb.Do("AttachmentLengths", &t.AttachmentLengths, d...)
	cb.Do("ParentIndices", &t.ParentIndices, d...)
	cb.Do("KinematicRoots", &t.KinematicRoots, d...)
	cb.Do("TangentIndices", &t.TangentIndices, d...)
	cb.Do("Weights", &t.Weights, d...)
	cb.Do("DriverInfluences", &t.DriverInfluences, d...)
	cb.Do("FollowerIndices", &t.FollowerIndices, d...)
	cb.Do("Triangles", &t.Triangles, d...)
	cb.Do("ConstraintIndices", &t.ConstraintIndices, d...)
	cb.Do("ConstraintLengths", &t.ConstraintLengths, d...)
	cb.Do("Unk_d55a167", &t.Unk_d55a167, d...)
	cb.Do("Unk_e5fff43", &t.Unk_e5fff43, d...)
	cb.Do("WarpClusters", &t.WarpClusters, d...)
	cb.Do("WeftClusters", &t.WeftClusters, d...)
	cb.Do("ShearClusters", &t.ShearClusters, d...)
	cb.Do("BendClusters", &t.BendClusters, d...)
	cb.Do("CapsuleDefs", &t.CapsuleDefs, d...)
	cb.Do("PlaneDefs", &t.PlaneDefs, d...)
	cb.Do("DriverBindPose", &t.DriverBindPose, d...)
	cb.Do("DriverMap", &t.DriverMap, d...)
	cb.Do("Name", &t.Name, d...)
	cb.Do("Density", &t.Density, d...)
	cb.Do("VertexCount", &t.VertexCount, d...)
	cb.Do("VertexCapacity", &t.VertexCapacity, d...)
	cb.Do("KinematicCount", &t.KinematicCount, d...)
	cb.Do("TriangleCount", &t.TriangleCount, d...)
	cb.Do("WarpClusterCount", &t.WarpClusterCount, d...)
	cb.Do("WeftClusterCount", &t.WeftClusterCount, d...)
	cb.Do("ShearClusterCount", &t.ShearClusterCount, d...)
	cb.Do("BendClusterCount", &t.BendClusterCount, d...)
	cb.Do("ConstraintCount", &t.ConstraintCount, d...)
	cb.Do("Unk_9460e91", &t.Unk_9460e91, d...)
	cb.Do("MaxLevel", &t.MaxLevel, d...)
	cb.Do("BoneCount", &t.BoneCount, d...)
	cb.Do("DriverCount", &t.DriverCount, d...)
	cb.Do("CapsuleCount", &t.CapsuleCount, d...)
	cb.Do("PlaneCount", &t.PlaneCount, d...)
}

type Type_3a9f0d72 struct {
	Unk_efe84b7 DT_TAGMAP[*DT_ENUM]
}

func (t *Type_3a9f0d72) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Unk_efe84b7, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_3a9f0d72) Walk(cb WalkCallback, d ...any) {
	cb.Do("Unk_efe84b7", &t.Unk_efe84b7, d...)
}

type NPCPreset struct {
	// Inherits CharacterPreset
	// Inherits PolymorphicBase
	DwType     DT_UINT
	DwPad      DT_UINT
	SzName     DT_CSTRING[*DT_BYTE]
	SnoWorld   DT_SNO
	NPadding1  DT_INT
	SnoActor   DT_SNO
	SHairColor DT_CSTRING[*DT_BYTE]
	SSkinColor DT_CSTRING[*DT_BYTE]
	ArrItems   DT_FIXEDARRAY[*PresetNPCComponent]
	ArrWeapons DT_FIXEDARRAY[*DT_SNO]
}

func (t *NPCPreset) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SzName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.SnoWorld, r, &Options{
		Flags: 513,
		Group: 48,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.NPadding1, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.SnoActor, r, &Options{
		Flags: 513,
		Group: 1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.SHairColor, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.SSkinColor, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.ArrItems, r, &Options{
		ArrayLength: 4,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+176, &t.ArrWeapons, r, &Options{
		ArrayLength: 2,
		Flags:       513,
		Group:       73,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+184, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *NPCPreset) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("SzName", &t.SzName, d...)
	cb.Do("SnoWorld", &t.SnoWorld, d...)
	cb.Do("NPadding1", &t.NPadding1, d...)
	cb.Do("SnoActor", &t.SnoActor, d...)
	cb.Do("SHairColor", &t.SHairColor, d...)
	cb.Do("SSkinColor", &t.SSkinColor, d...)
	cb.Do("ArrItems", &t.ArrItems, d...)
	cb.Do("ArrWeapons", &t.ArrWeapons, d...)
}

type NpcGenerationData struct {
	ArAnimSetOrder     DT_VARIABLEARRAY[*DT_GBID]
	SnoMountedAnimTree DT_SNO
	SnoMountedAnimSet  DT_SNO
	SnoDefaultMount    DT_SNO
	Unk_e9dd8e9        DT_CSTRING[*DT_BYTE]
	Unk_d42692e        DT_CSTRING[*DT_BYTE]
	Unk_1059e8c        DT_CSTRING[*DT_BYTE]
}

func (t *NpcGenerationData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.ArAnimSetOrder, r, &Options{
		Flags: 1,
		Group: 53,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoMountedAnimTree, r, &Options{
		Flags: 1,
		Group: 67,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.SnoMountedAnimSet, r, &Options{
		Flags: 1,
		Group: 8,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SnoDefaultMount, r, &Options{
		Flags: 1,
		Group: 1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.Unk_e9dd8e9, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.Unk_d42692e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.Unk_1059e8c, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+80, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *NpcGenerationData) Walk(cb WalkCallback, d ...any) {
	cb.Do("ArAnimSetOrder", &t.ArAnimSetOrder, d...)
	cb.Do("SnoMountedAnimTree", &t.SnoMountedAnimTree, d...)
	cb.Do("SnoMountedAnimSet", &t.SnoMountedAnimSet, d...)
	cb.Do("SnoDefaultMount", &t.SnoDefaultMount, d...)
	cb.Do("Unk_e9dd8e9", &t.Unk_e9dd8e9, d...)
	cb.Do("Unk_d42692e", &t.Unk_d42692e, d...)
	cb.Do("Unk_1059e8c", &t.Unk_1059e8c, d...)
}

type StoryboardUIControlSetLeftTrack struct {
	// Inherits StoryboardUIControlSetValueTrack_float
	DwType          DT_UINT
	TNodeCollection StoryboardValueNodeCollection_float
	Unk_77ed19a     DT_ENUM
	DwPad           DT_UINT
}

func (t *StoryboardUIControlSetLeftTrack) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TNodeCollection, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.Unk_77ed19a, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+56, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *StoryboardUIControlSetLeftTrack) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("TNodeCollection", &t.TNodeCollection, d...)
	cb.Do("Unk_77ed19a", &t.Unk_77ed19a, d...)
	cb.Do("DwPad", &t.DwPad, d...)
}

type Type_3b00e8b9 struct {
	FlMinOffset              DT_FLOAT
	FlMaxCumulativeOffset    DT_FLOAT
	FlMaxPerpendicularOffset DT_FLOAT
	Unk_d07468e              DT_FLOAT
	Unk_d0f7bfd              DT_FLOAT
	Unk_4f8fc91              DT_FLOAT
}

func (t *Type_3b00e8b9) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.FlMinOffset, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.FlMaxCumulativeOffset, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.FlMaxPerpendicularOffset, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.Unk_d07468e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_d0f7bfd, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.Unk_4f8fc91, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_3b00e8b9) Walk(cb WalkCallback, d ...any) {
	cb.Do("FlMinOffset", &t.FlMinOffset, d...)
	cb.Do("FlMaxCumulativeOffset", &t.FlMaxCumulativeOffset, d...)
	cb.Do("FlMaxPerpendicularOffset", &t.FlMaxPerpendicularOffset, d...)
	cb.Do("Unk_d07468e", &t.Unk_d07468e, d...)
	cb.Do("Unk_d0f7bfd", &t.Unk_d0f7bfd, d...)
	cb.Do("Unk_4f8fc91", &t.Unk_4f8fc91, d...)
}

type Cylinder struct {
	Wp1      DT_VECTOR3D
	Wp2      DT_VECTOR3D
	FlRadius DT_FLOAT
}

func (t *Cylinder) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Wp1, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.Wp2, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.FlRadius, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+28, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Cylinder) Walk(cb WalkCallback, d ...any) {
	cb.Do("Wp1", &t.Wp1, d...)
	cb.Do("Wp2", &t.Wp2, d...)
	cb.Do("FlRadius", &t.FlRadius, d...)
}

type InterpolationScalar struct {
	NScalarFunction DT_ENUM
	DwFlags         DT_UINT
	TInputRange     DT_RANGE[*DT_FLOAT]
	TRemapRange     DT_RANGE[*DT_FLOAT]
	ERemapEasing    DT_ENUM
	SzFormulaName   DT_UINT
}

func (t *InterpolationScalar) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.NScalarFunction, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.DwFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.TInputRange, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TRemapRange, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ERemapEasing, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.SzFormulaName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *InterpolationScalar) Walk(cb WalkCallback, d ...any) {
	cb.Do("NScalarFunction", &t.NScalarFunction, d...)
	cb.Do("DwFlags", &t.DwFlags, d...)
	cb.Do("TInputRange", &t.TInputRange, d...)
	cb.Do("TRemapRange", &t.TRemapRange, d...)
	cb.Do("ERemapEasing", &t.ERemapEasing, d...)
	cb.Do("SzFormulaName", &t.SzFormulaName, d...)
}

type StoryboardPlayStoryboardNode struct {
	// Inherits StoryboardTimePointNode
	// Inherits PolymorphicBase
	DwType        DT_UINT
	FlTime        DT_FLOAT
	DwPad         DT_UINT
	SnoStoryboard DT_SNO
}

func (t *StoryboardPlayStoryboardNode) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.FlTime, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SnoStoryboard, r, &Options{
		Flags: 1,
		Group: 90,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *StoryboardPlayStoryboardNode) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("FlTime", &t.FlTime, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("SnoStoryboard", &t.SnoStoryboard, d...)
}

type ParametricLayer struct {
	SnoLayer  DT_SNO
	TSettings ParametricSettings
}

func (t *ParametricLayer) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoLayer, r, &Options{
		Flags: 1,
		Group: 57,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.TSettings, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+132, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ParametricLayer) Walk(cb WalkCallback, d ...any) {
	cb.Do("SnoLayer", &t.SnoLayer, d...)
	cb.Do("TSettings", &t.TSettings, d...)
}

type WorldStateDefinition struct {
	DwFlags DT_UINT
}

func (t *WorldStateDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwFlags, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+12, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *WorldStateDefinition) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwFlags", &t.DwFlags, d...)
}

type ChangedPlayerMessage struct {
	THeader               RequiredMessageHeader
	DwPlayerGameAccountId DT_UINT
	UsHeroName            DT_CHARARRAY
	EClass                DT_ENUM
}

func (t *ChangedPlayerMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.DwPlayerGameAccountId, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.UsHeroName, r, &Options{
		ArrayLength: 49,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.EClass, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+76, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ChangedPlayerMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("DwPlayerGameAccountId", &t.DwPlayerGameAccountId, d...)
	cb.Do("UsHeroName", &t.UsHeroName, d...)
	cb.Do("EClass", &t.EClass, d...)
}

type WallCornerPieces struct {
	ArPieces          DT_VARIABLEARRAY[*WallPiece]
	ArStartCapPieces  DT_VARIABLEARRAY[*WallPiece]
	ArEndCapPieces    DT_VARIABLEARRAY[*WallPiece]
	TScale            DT_RANGE[*DT_FLOAT]
	EPieceSelectMode  DT_ENUM
	THorizontalOffset DT_RANGE[*DT_FLOAT]
	TYaw              DT_RANGE[*DT_FLOAT]
	Unk_609e23d       DT_INT
	Unk_d8fcfe4       DT_INT
	Unk_435bdfd       DT_INT
	Unk_f2dbd17       DT_INT
	TVerticalOffset   DT_RANGE[*DT_FLOAT]
	Unk_2a8c4b6       DT_FLOAT
}

func (t *WallCornerPieces) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.ArPieces, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.ArStartCapPieces, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.ArEndCapPieces, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.TScale, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.EPieceSelectMode, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+60, &t.THorizontalOffset, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.TYaw, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.Unk_609e23d, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.Unk_d8fcfe4, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.Unk_435bdfd, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.Unk_f2dbd17, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.TVerticalOffset, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+100, &t.Unk_2a8c4b6, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+104, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *WallCornerPieces) Walk(cb WalkCallback, d ...any) {
	cb.Do("ArPieces", &t.ArPieces, d...)
	cb.Do("ArStartCapPieces", &t.ArStartCapPieces, d...)
	cb.Do("ArEndCapPieces", &t.ArEndCapPieces, d...)
	cb.Do("TScale", &t.TScale, d...)
	cb.Do("EPieceSelectMode", &t.EPieceSelectMode, d...)
	cb.Do("THorizontalOffset", &t.THorizontalOffset, d...)
	cb.Do("TYaw", &t.TYaw, d...)
	cb.Do("Unk_609e23d", &t.Unk_609e23d, d...)
	cb.Do("Unk_d8fcfe4", &t.Unk_d8fcfe4, d...)
	cb.Do("Unk_435bdfd", &t.Unk_435bdfd, d...)
	cb.Do("Unk_f2dbd17", &t.Unk_f2dbd17, d...)
	cb.Do("TVerticalOffset", &t.TVerticalOffset, d...)
	cb.Do("Unk_2a8c4b6", &t.Unk_2a8c4b6, d...)
}

type StoreCameraTransition struct {
	EEasing     DT_ENUM
	WdDuration  DT_FLOAT
	WdOffset    DT_FLOAT
	Unk_2c71308 PRTransform
}

func (t *StoreCameraTransition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.EEasing, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.WdDuration, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.WdOffset, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.Unk_2c71308, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+40, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *StoreCameraTransition) Walk(cb WalkCallback, d ...any) {
	cb.Do("EEasing", &t.EEasing, d...)
	cb.Do("WdDuration", &t.WdDuration, d...)
	cb.Do("WdOffset", &t.WdOffset, d...)
	cb.Do("Unk_2c71308", &t.Unk_2c71308, d...)
}

type TexAnimFrameByFrame struct {
	// Inherits TexAnim
	// Inherits PolymorphicBase
	DwType           DT_UINT
	DwPad            DT_UINT
	FlUScale         DT_FLOAT
	FlVScale         DT_FLOAT
	TFrameAnim       FrameAnim
	FScaleUVsToFrame DT_INT
}

func (t *TexAnimFrameByFrame) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.FlUScale, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.FlVScale, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.TFrameAnim, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+60, &t.FScaleUVsToFrame, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+64, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TexAnimFrameByFrame) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("FlUScale", &t.FlUScale, d...)
	cb.Do("FlVScale", &t.FlVScale, d...)
	cb.Do("TFrameAnim", &t.TFrameAnim, d...)
	cb.Do("FScaleUVsToFrame", &t.FScaleUVsToFrame, d...)
}

type PlasmaAttachMessage struct {
	THeader     RequiredMessageHeader
	AnnPlasma   DT_ACD_NETWORK_NAME
	AnnAttachTo DT_ACD_NETWORK_NAME
}

func (t *PlasmaAttachMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.AnnPlasma, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.AnnAttachTo, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PlasmaAttachMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("AnnPlasma", &t.AnnPlasma, d...)
	cb.Do("AnnAttachTo", &t.AnnAttachTo, d...)
}

type MalignantColorWeight struct {
	GbidMalignantColor DT_GBID
	DwWeight           DT_UINT
}

func (t *MalignantColorWeight) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.GbidMalignantColor, r, &Options{
		Flags: 1,
		Group: 63,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.DwWeight, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *MalignantColorWeight) Walk(cb WalkCallback, d ...any) {
	cb.Do("GbidMalignantColor", &t.GbidMalignantColor, d...)
	cb.Do("DwWeight", &t.DwWeight, d...)
}

type TriggerEventDisableRagdollAnimationOverride struct {
	// Inherits TriggerEvent
	// Inherits PolymorphicBase
	DwType          DT_UINT
	DwPad           DT_UINT
	TConditions     TriggerConditions
	FGenerated      DT_INT
	Unk_6cba752     DT_INT
	DwParentActorID DT_UINT
}

func (t *TriggerEventDisableRagdollAnimationOverride) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.FGenerated, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_6cba752, r, &Options{Flags: 16}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.DwParentActorID, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+80, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TriggerEventDisableRagdollAnimationOverride) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("TConditions", &t.TConditions, d...)
	cb.Do("FGenerated", &t.FGenerated, d...)
	cb.Do("Unk_6cba752", &t.Unk_6cba752, d...)
	cb.Do("DwParentActorID", &t.DwParentActorID, d...)
}

type CancelGroupTransferMessage struct {
	THeader RequiredMessageHeader
}

func (t *CancelGroupTransferMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *CancelGroupTransferMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
}

type ConversationNodeReference struct {
	SnoConversation DT_SNO
	DwNodeID        DT_UINT
}

func (t *ConversationNodeReference) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoConversation, r, &Options{
		Flags: 1,
		Group: 12,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.DwNodeID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ConversationNodeReference) Walk(cb WalkCallback, d ...any) {
	cb.Do("SnoConversation", &t.SnoConversation, d...)
	cb.Do("DwNodeID", &t.DwNodeID, d...)
}

type ParticipantTimerGizmoData struct {
	// Inherits NamedGizmoData
	// Inherits ActorGizmoData
	// Inherits PolymorphicBase
	DwType                           DT_UINT
	DwPad                            DT_UINT
	FDisableNonFriendlyOperation     DT_INT
	FWalkToCenter                    DT_INT
	FGizmoStartsDisabled             DT_INT
	FUseStringListName               DT_INT
	FForceMinimapIcon                DT_INT
	FlOperationRadius                DT_FLOAT
	Unk_d0b1df5                      DT_FLOAT
	FlGizmoUseTime                   DT_FLOAT
	SnoChannelingEffect              DT_SNO
	Unk_2767229                      DT_INT
	FGizmoShowProgressBar            DT_INT
	Unk_6d9ebe1                      DT_INT
	Unk_5456245                      DT_INT
	Unk_af5815a                      DT_INT
	SnoOnClickEffect                 DT_SNO
	SnoPickedUpEffect                DT_SNO
	SnoDropOnGroundEffect            DT_SNO
	TConditionData                   GizmoConditionData
	SnoPowerOperator                 DT_SNO
	SnoPowerOperate                  DT_SNO
	SnoPowerOperatorActive           DT_SNO
	SnoPowerOperateActive            DT_SNO
	Unk_359810e                      DT_INT
	NCooldown                        DT_UINT
	Unk_9c8478e                      DT_UINT
	Unk_d45ed2d                      DT_INT
	Unk_f6b20b7                      DT_INT
	Unk_54513b8                      DT_INT
	Unk_fd1f378                      DT_UINT
	HGizmoOperateFlavorTextMsgLabel  DT_UINT
	HGizmoOperateDescriptionMsgLabel DT_UINT
	FlGizmoOperateOffset             DT_FLOAT
	Unk_ab58cd3                      DT_ENUM
	Unk_91a3966                      DT_UINT
	HGizmoChannelingLabel            DT_UINT
	Unk_4be4371                      DT_INT
	DwParticipantTime                DT_UINT
}

func (t *ParticipantTimerGizmoData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.FDisableNonFriendlyOperation, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.FWalkToCenter, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.FGizmoStartsDisabled, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.FUseStringListName, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.FForceMinimapIcon, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.FlOperationRadius, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.Unk_d0b1df5, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.FlGizmoUseTime, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.SnoChannelingEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.Unk_2767229, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.FGizmoShowProgressBar, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+60, &t.Unk_6d9ebe1, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.Unk_5456245, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.Unk_af5815a, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.SnoOnClickEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.SnoPickedUpEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.SnoDropOnGroundEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.TConditionData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.SnoPowerOperator, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.SnoPowerOperate, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.SnoPowerOperatorActive, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+100, &t.SnoPowerOperateActive, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+104, &t.Unk_359810e, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+108, &t.NCooldown, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.Unk_9c8478e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+116, &t.Unk_d45ed2d, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.Unk_f6b20b7, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+124, &t.Unk_54513b8, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.Unk_fd1f378, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+132, &t.HGizmoOperateFlavorTextMsgLabel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+136, &t.HGizmoOperateDescriptionMsgLabel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+140, &t.FlGizmoOperateOffset, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+144, &t.Unk_ab58cd3, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+148, &t.Unk_91a3966, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+152, &t.HGizmoChannelingLabel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+156, &t.Unk_4be4371, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+160, &t.DwParticipantTime, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+168, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ParticipantTimerGizmoData) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("FDisableNonFriendlyOperation", &t.FDisableNonFriendlyOperation, d...)
	cb.Do("FWalkToCenter", &t.FWalkToCenter, d...)
	cb.Do("FGizmoStartsDisabled", &t.FGizmoStartsDisabled, d...)
	cb.Do("FUseStringListName", &t.FUseStringListName, d...)
	cb.Do("FForceMinimapIcon", &t.FForceMinimapIcon, d...)
	cb.Do("FlOperationRadius", &t.FlOperationRadius, d...)
	cb.Do("Unk_d0b1df5", &t.Unk_d0b1df5, d...)
	cb.Do("FlGizmoUseTime", &t.FlGizmoUseTime, d...)
	cb.Do("SnoChannelingEffect", &t.SnoChannelingEffect, d...)
	cb.Do("Unk_2767229", &t.Unk_2767229, d...)
	cb.Do("FGizmoShowProgressBar", &t.FGizmoShowProgressBar, d...)
	cb.Do("Unk_6d9ebe1", &t.Unk_6d9ebe1, d...)
	cb.Do("Unk_5456245", &t.Unk_5456245, d...)
	cb.Do("Unk_af5815a", &t.Unk_af5815a, d...)
	cb.Do("SnoOnClickEffect", &t.SnoOnClickEffect, d...)
	cb.Do("SnoPickedUpEffect", &t.SnoPickedUpEffect, d...)
	cb.Do("SnoDropOnGroundEffect", &t.SnoDropOnGroundEffect, d...)
	cb.Do("TConditionData", &t.TConditionData, d...)
	cb.Do("SnoPowerOperator", &t.SnoPowerOperator, d...)
	cb.Do("SnoPowerOperate", &t.SnoPowerOperate, d...)
	cb.Do("SnoPowerOperatorActive", &t.SnoPowerOperatorActive, d...)
	cb.Do("SnoPowerOperateActive", &t.SnoPowerOperateActive, d...)
	cb.Do("Unk_359810e", &t.Unk_359810e, d...)
	cb.Do("NCooldown", &t.NCooldown, d...)
	cb.Do("Unk_9c8478e", &t.Unk_9c8478e, d...)
	cb.Do("Unk_d45ed2d", &t.Unk_d45ed2d, d...)
	cb.Do("Unk_f6b20b7", &t.Unk_f6b20b7, d...)
	cb.Do("Unk_54513b8", &t.Unk_54513b8, d...)
	cb.Do("Unk_fd1f378", &t.Unk_fd1f378, d...)
	cb.Do("HGizmoOperateFlavorTextMsgLabel", &t.HGizmoOperateFlavorTextMsgLabel, d...)
	cb.Do("HGizmoOperateDescriptionMsgLabel", &t.HGizmoOperateDescriptionMsgLabel, d...)
	cb.Do("FlGizmoOperateOffset", &t.FlGizmoOperateOffset, d...)
	cb.Do("Unk_ab58cd3", &t.Unk_ab58cd3, d...)
	cb.Do("Unk_91a3966", &t.Unk_91a3966, d...)
	cb.Do("HGizmoChannelingLabel", &t.HGizmoChannelingLabel, d...)
	cb.Do("Unk_4be4371", &t.Unk_4be4371, d...)
	cb.Do("DwParticipantTime", &t.DwParticipantTime, d...)
}

type ActorMountData struct {
	EMountRarity          DT_ENUM
	EMountType            DT_ENUM
	SnoMountPowerOverride DT_SNO
}

func (t *ActorMountData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.EMountRarity, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.EMountType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.SnoMountPowerOverride, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+12, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ActorMountData) Walk(cb WalkCallback, d ...any) {
	cb.Do("EMountRarity", &t.EMountRarity, d...)
	cb.Do("EMountType", &t.EMountType, d...)
	cb.Do("SnoMountPowerOverride", &t.SnoMountPowerOverride, d...)
}

type PlayerACDInfo struct {
	FFemale               DT_INT
	EPlayerClass          DT_ENUM
	NSkinColorIndex       DT_INT
	SnoFace               DT_SNO
	SnoMakeup             DT_SNO
	SnoMarkingShape       DT_SNO
	SnoMarkingColor       DT_SNO
	SnoHairColor          DT_SNO
	SnoEyeColor           DT_SNO
	SnoHairStyle          DT_SNO
	SnoFacialHair         DT_SNO
	SnoJewelry            DT_SNO
	SnoMount              DT_SNO
	SnoHeadstone          DT_SNO
	SnoTownPortalCosmetic DT_SNO
	SnoItems              DT_FIXEDARRAY[*DT_SNO]
	SnoPowers             DT_FIXEDARRAY[*DT_SNO]
	SnoEmotePowers        DT_FIXEDARRAY[*DT_SNO]
	Unk_d96f751           DT_FIXEDARRAY[*DT_SNO_NAME]
}

func (t *PlayerACDInfo) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.FFemale, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.EPlayerClass, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.NSkinColorIndex, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.SnoFace, r, &Options{
		Flags: 1,
		Group: 140,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoMakeup, r, &Options{
		Flags: 1,
		Group: 132,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.SnoMarkingShape, r, &Options{
		Flags: 1,
		Group: 115,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SnoMarkingColor, r, &Options{
		Flags: 1,
		Group: 133,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.SnoHairColor, r, &Options{
		Flags: 1,
		Group: 134,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.SnoEyeColor, r, &Options{
		Flags: 1,
		Group: 131,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.SnoHairStyle, r, &Options{
		Flags: 1,
		Group: 138,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.SnoFacialHair, r, &Options{
		Flags: 1,
		Group: 139,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.SnoJewelry, r, &Options{
		Flags: 1,
		Group: 119,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.SnoMount, r, &Options{
		Flags: 1,
		Group: 1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.SnoHeadstone, r, &Options{
		Flags: 1,
		Group: 1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.SnoTownPortalCosmetic, r, &Options{
		Flags: 1,
		Group: 146,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+60, &t.SnoItems, r, &Options{
		ArrayLength: 18,
		Flags:       9,
		Group:       73,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+136, &t.SnoPowers, r, &Options{
		ArrayLength: 128,
		Flags:       9,
		Group:       29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+652, &t.SnoEmotePowers, r, &Options{
		ArrayLength: 24,
		Flags:       9,
		Group:       29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+752, &t.Unk_d96f751, r, &Options{
		ArrayLength: 16,
		Flags:       8,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+884, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PlayerACDInfo) Walk(cb WalkCallback, d ...any) {
	cb.Do("FFemale", &t.FFemale, d...)
	cb.Do("EPlayerClass", &t.EPlayerClass, d...)
	cb.Do("NSkinColorIndex", &t.NSkinColorIndex, d...)
	cb.Do("SnoFace", &t.SnoFace, d...)
	cb.Do("SnoMakeup", &t.SnoMakeup, d...)
	cb.Do("SnoMarkingShape", &t.SnoMarkingShape, d...)
	cb.Do("SnoMarkingColor", &t.SnoMarkingColor, d...)
	cb.Do("SnoHairColor", &t.SnoHairColor, d...)
	cb.Do("SnoEyeColor", &t.SnoEyeColor, d...)
	cb.Do("SnoHairStyle", &t.SnoHairStyle, d...)
	cb.Do("SnoFacialHair", &t.SnoFacialHair, d...)
	cb.Do("SnoJewelry", &t.SnoJewelry, d...)
	cb.Do("SnoMount", &t.SnoMount, d...)
	cb.Do("SnoHeadstone", &t.SnoHeadstone, d...)
	cb.Do("SnoTownPortalCosmetic", &t.SnoTownPortalCosmetic, d...)
	cb.Do("SnoItems", &t.SnoItems, d...)
	cb.Do("SnoPowers", &t.SnoPowers, d...)
	cb.Do("SnoEmotePowers", &t.SnoEmotePowers, d...)
	cb.Do("Unk_d96f751", &t.Unk_d96f751, d...)
}

type PlayerSavedDataMessage struct {
	THeader               RequiredMessageHeader
	TSavedData            PlayerSavedData
	DwPlayerGameAccountId DT_UINT
}

func (t *PlayerSavedDataMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TSavedData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+3688, &t.DwPlayerGameAccountId, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+3696, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PlayerSavedDataMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("TSavedData", &t.TSavedData, d...)
	cb.Do("DwPlayerGameAccountId", &t.DwPlayerGameAccountId, d...)
}

type TransmogSlotMessage struct {
	THeader               RequiredMessageHeader
	ESlot                 DT_ENUM
	SnoTransmogSourceItem DT_SNO
	SnoDye                DT_SNO
}

func (t *TransmogSlotMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.ESlot, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.SnoTransmogSourceItem, r, &Options{
		Flags: 1,
		Group: 73,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SnoDye, r, &Options{
		Flags: 1,
		Group: 122,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+28, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TransmogSlotMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("ESlot", &t.ESlot, d...)
	cb.Do("SnoTransmogSourceItem", &t.SnoTransmogSourceItem, d...)
	cb.Do("SnoDye", &t.SnoDye, d...)
}

type RecipeTier struct {
	NRequiredLevel DT_INT
	NGoldCost      DT_INT
	ArRecipes      DT_VARIABLEARRAY[*DT_SNO]
}

func (t *RecipeTier) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.NRequiredLevel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.NGoldCost, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.ArRecipes, r, &Options{
		Flags: 1,
		Group: 49,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *RecipeTier) Walk(cb WalkCallback, d ...any) {
	cb.Do("NRequiredLevel", &t.NRequiredLevel, d...)
	cb.Do("NGoldCost", &t.NGoldCost, d...)
	cb.Do("ArRecipes", &t.ArRecipes, d...)
}

type ActorHitRotationJoint struct {
	SzBoneName            DT_UINT
	FlBlendOutTime        DT_FLOAT
	FlDuration            DT_FLOAT
	FlRotationSpeed       DT_FLOAT
	FlRotationAngle       DT_FLOAT
	Unk_92ce5f2           DT_INT
	Unk_10363a5           InterpolationPath_float
	ArChildRotationJoints DT_VARIABLEARRAY[*ActorChildRotationJoint]
}

func (t *ActorHitRotationJoint) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SzBoneName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.FlBlendOutTime, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.FlDuration, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.FlRotationSpeed, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.FlRotationAngle, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.Unk_92ce5f2, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_10363a5, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.ArChildRotationJoints, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+96, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ActorHitRotationJoint) Walk(cb WalkCallback, d ...any) {
	cb.Do("SzBoneName", &t.SzBoneName, d...)
	cb.Do("FlBlendOutTime", &t.FlBlendOutTime, d...)
	cb.Do("FlDuration", &t.FlDuration, d...)
	cb.Do("FlRotationSpeed", &t.FlRotationSpeed, d...)
	cb.Do("FlRotationAngle", &t.FlRotationAngle, d...)
	cb.Do("Unk_92ce5f2", &t.Unk_92ce5f2, d...)
	cb.Do("Unk_10363a5", &t.Unk_10363a5, d...)
	cb.Do("ArChildRotationJoints", &t.ArChildRotationJoints, d...)
}

type CollisionSettingsDefinition struct {
	TCollFlags  ActorCollisionFlags
	Unk_a882afd DT_INT
	Unk_54403ff DT_INT
}

func (t *CollisionSettingsDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.TCollFlags, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_a882afd, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.Unk_54403ff, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *CollisionSettingsDefinition) Walk(cb WalkCallback, d ...any) {
	cb.Do("TCollFlags", &t.TCollFlags, d...)
	cb.Do("Unk_a882afd", &t.Unk_a882afd, d...)
	cb.Do("Unk_54403ff", &t.Unk_54403ff, d...)
}

type PlayerVariableValueSubcondition struct {
	// Inherits NumericComparisonSubcondition
	// Inherits Subcondition
	// Inherits PolymorphicBase
	DwType               DT_UINT
	BNegate              DT_INT
	EComparisonOp        DT_ENUM
	DwPad                DT_UINT
	GbidDesignerVariable DT_GBID
	NValue               DT_INT
}

func (t *PlayerVariableValueSubcondition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BNegate, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.EComparisonOp, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.GbidDesignerVariable, r, &Options{
		Flags: 1,
		Group: 45,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.NValue, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+40, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PlayerVariableValueSubcondition) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("BNegate", &t.BNegate, d...)
	cb.Do("EComparisonOp", &t.EComparisonOp, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("GbidDesignerVariable", &t.GbidDesignerVariable, d...)
	cb.Do("NValue", &t.NValue, d...)
}

type AssetList struct {
	ArEntries DT_VARIABLEARRAY[*AssetListEntry]
}

func (t *AssetList) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.ArEntries, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *AssetList) Walk(cb WalkCallback, d ...any) {
	cb.Do("ArEntries", &t.ArEntries, d...)
}

type TriggerEventChangeClothParameters struct {
	// Inherits TriggerEvent
	// Inherits PolymorphicBase
	DwType                DT_UINT
	DwPad                 DT_UINT
	TConditions           TriggerConditions
	FGenerated            DT_INT
	Unk_6cba752           DT_INT
	DwParentActorID       DT_UINT
	Unk_85269a4           DT_INT
	Unk_950c6ac           DT_INT
	DwActorID             DT_UINT
	SnoNewClothParameters DT_SNO
	SzSubObjectName       DT_UINT
	FlBlendTime           DT_FLOAT
	ParamsOverride        ClothParamsOverride
}

func (t *TriggerEventChangeClothParameters) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.FGenerated, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_6cba752, r, &Options{Flags: 16}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.DwParentActorID, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.Unk_85269a4, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.Unk_950c6ac, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.DwActorID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.SnoNewClothParameters, r, &Options{
		Flags: 1,
		Group: 11,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.SzSubObjectName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+100, &t.FlBlendTime, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+104, &t.ParamsOverride, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+152, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TriggerEventChangeClothParameters) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("TConditions", &t.TConditions, d...)
	cb.Do("FGenerated", &t.FGenerated, d...)
	cb.Do("Unk_6cba752", &t.Unk_6cba752, d...)
	cb.Do("DwParentActorID", &t.DwParentActorID, d...)
	cb.Do("Unk_85269a4", &t.Unk_85269a4, d...)
	cb.Do("Unk_950c6ac", &t.Unk_950c6ac, d...)
	cb.Do("DwActorID", &t.DwActorID, d...)
	cb.Do("SnoNewClothParameters", &t.SnoNewClothParameters, d...)
	cb.Do("SzSubObjectName", &t.SzSubObjectName, d...)
	cb.Do("FlBlendTime", &t.FlBlendTime, d...)
	cb.Do("ParamsOverride", &t.ParamsOverride, d...)
}

type WallDeformPiece struct {
	SnoActor            DT_SNO
	SzLookName          DT_UINT
	DwShaderMapOverride DT_UINT
	Unk_189be9b         DT_INT
	Unk_94a2b91         DT_INT
	Unk_d094b9a         DT_ENUM
	FlWeight            DT_FLOAT
	FlFootprint         DT_FLOAT
	EFadeMethod         DT_ENUM
	Unk_da5b372         DT_INT
	Unk_8dea4d9         DT_INT
	NFadeGroup          DT_INT
}

func (t *WallDeformPiece) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoActor, r, &Options{
		Flags: 513,
		Group: 1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.SzLookName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwShaderMapOverride, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.Unk_189be9b, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_94a2b91, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.Unk_d094b9a, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.FlWeight, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.FlFootprint, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.EFadeMethod, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.Unk_da5b372, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.Unk_8dea4d9, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.NFadeGroup, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *WallDeformPiece) Walk(cb WalkCallback, d ...any) {
	cb.Do("SnoActor", &t.SnoActor, d...)
	cb.Do("SzLookName", &t.SzLookName, d...)
	cb.Do("DwShaderMapOverride", &t.DwShaderMapOverride, d...)
	cb.Do("Unk_189be9b", &t.Unk_189be9b, d...)
	cb.Do("Unk_94a2b91", &t.Unk_94a2b91, d...)
	cb.Do("Unk_d094b9a", &t.Unk_d094b9a, d...)
	cb.Do("FlWeight", &t.FlWeight, d...)
	cb.Do("FlFootprint", &t.FlFootprint, d...)
	cb.Do("EFadeMethod", &t.EFadeMethod, d...)
	cb.Do("Unk_da5b372", &t.Unk_da5b372, d...)
	cb.Do("Unk_8dea4d9", &t.Unk_8dea4d9, d...)
	cb.Do("NFadeGroup", &t.NFadeGroup, d...)
}

type DebugDataBlockMessage struct {
	THeader         RequiredMessageHeader
	NType           DT_INT
	ArParams        DT_FIXEDARRAY[*DT_INT]
	NDataBlockIndex DT_INT
	TData           DT_FIXEDARRAY[*DT_BYTE]
}

func (t *DebugDataBlockMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.NType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.ArParams, r, &Options{
		ArrayLength: 2,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.NDataBlockIndex, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.TData, r, &Options{
		ArrayLength: 30000,
		Flags:       8,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+30036, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *DebugDataBlockMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("NType", &t.NType, d...)
	cb.Do("ArParams", &t.ArParams, d...)
	cb.Do("NDataBlockIndex", &t.NDataBlockIndex, d...)
	cb.Do("TData", &t.TData, d...)
}

type TrackedRewardDefinition struct {
	ESource     DT_ENUM
	EType       DT_ENUM
	EStatType   DT_ENUM
	FlAmount    DT_FLOAT
	SnoAspect   DT_SNO
	Unk_f4b6cde Type_56ff7d6a
}

func (t *TrackedRewardDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.ESource, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.EType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.EStatType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.FlAmount, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SnoAspect, r, &Options{
		Flags: 1,
		Group: 128,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.Unk_f4b6cde, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TrackedRewardDefinition) Walk(cb WalkCallback, d ...any) {
	cb.Do("ESource", &t.ESource, d...)
	cb.Do("EType", &t.EType, d...)
	cb.Do("EStatType", &t.EStatType, d...)
	cb.Do("FlAmount", &t.FlAmount, d...)
	cb.Do("SnoAspect", &t.SnoAspect, d...)
	cb.Do("Unk_f4b6cde", &t.Unk_f4b6cde, d...)
}

type SpeedTreeWindParams struct {
	FStrengthResponse            DT_FLOAT
	FDirectionResponse           DT_FLOAT
	FAnchorOffset                DT_FLOAT
	FAnchorDistanceScale         DT_FLOAT
	AfFrequencies                DT_FIXEDARRAY[*DT_FLOAT]
	FGlobalHeight                DT_FLOAT
	FGlobalHeightExponent        DT_FLOAT
	AfGlobalDistance             DT_FIXEDARRAY[*DT_FLOAT]
	AfGlobalDirectionAdherence   DT_FIXEDARRAY[*DT_FLOAT]
	AtBranch                     DT_FIXEDARRAY[*SpeedTreeBranchWindLevel]
	AtLeaf                       DT_FIXEDARRAY[*SpeedTreeWindGroup]
	AfFrondRippleDistance        DT_FIXEDARRAY[*DT_FLOAT]
	FFrondRippleTile             DT_FLOAT
	FFrondRippleLightingScalar   DT_FLOAT
	Unk_9938ef6                  DT_FLOAT
	Unk_c1eed76                  DT_FLOAT
	Unk_ba61ab4                  DT_FLOAT
	Unk_567053e                  DT_FLOAT
	Unk_c08eb6c                  DT_FLOAT
	FRollingBranchRipple         DT_FLOAT
	FRollingBranchFieldMin       DT_FLOAT
	FRollingBranchLightingAdjust DT_FLOAT
	FRollingBranchVerticalOffset DT_FLOAT
	Unk_b06b705                  DT_FLOAT
	Unk_f7ea482                  DT_FLOAT
	FGustFrequency               DT_FLOAT
	FGustStrengthMin             DT_FLOAT
	FGustStrengthMax             DT_FLOAT
	FGustDurationMin             DT_FLOAT
	FGustDurationMax             DT_FLOAT
	FGustRiseScalar              DT_FLOAT
	FGustFallScalar              DT_FLOAT
	Unk_5c5413                   DT_INT
	Unk_5c5414                   DT_INT
	VBranchWindAnchor            DT_VECTOR3D
	Unk_2e7a7c5                  DT_FLOAT
}

func (t *SpeedTreeWindParams) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.FStrengthResponse, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.FDirectionResponse, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.FAnchorOffset, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.FAnchorDistanceScale, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.AfFrequencies, r, &Options{
		ArrayLength: 100,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+416, &t.FGlobalHeight, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+420, &t.FGlobalHeightExponent, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+424, &t.AfGlobalDistance, r, &Options{
		ArrayLength: 10,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+464, &t.AfGlobalDirectionAdherence, r, &Options{
		ArrayLength: 10,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+504, &t.AtBranch, r, &Options{
		ArrayLength: 2,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+768, &t.AtLeaf, r, &Options{
		ArrayLength: 2,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1216, &t.AfFrondRippleDistance, r, &Options{
		ArrayLength: 10,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1256, &t.FFrondRippleTile, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1260, &t.FFrondRippleLightingScalar, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1264, &t.Unk_9938ef6, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1268, &t.Unk_c1eed76, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1272, &t.Unk_ba61ab4, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1276, &t.Unk_567053e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1280, &t.Unk_c08eb6c, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1284, &t.FRollingBranchRipple, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1288, &t.FRollingBranchFieldMin, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1292, &t.FRollingBranchLightingAdjust, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1296, &t.FRollingBranchVerticalOffset, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1300, &t.Unk_b06b705, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1304, &t.Unk_f7ea482, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1308, &t.FGustFrequency, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1312, &t.FGustStrengthMin, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1316, &t.FGustStrengthMax, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1320, &t.FGustDurationMin, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1324, &t.FGustDurationMax, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1328, &t.FGustRiseScalar, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1332, &t.FGustFallScalar, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1336, &t.Unk_5c5413, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1340, &t.Unk_5c5414, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1344, &t.VBranchWindAnchor, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1356, &t.Unk_2e7a7c5, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+1360, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *SpeedTreeWindParams) Walk(cb WalkCallback, d ...any) {
	cb.Do("FStrengthResponse", &t.FStrengthResponse, d...)
	cb.Do("FDirectionResponse", &t.FDirectionResponse, d...)
	cb.Do("FAnchorOffset", &t.FAnchorOffset, d...)
	cb.Do("FAnchorDistanceScale", &t.FAnchorDistanceScale, d...)
	cb.Do("AfFrequencies", &t.AfFrequencies, d...)
	cb.Do("FGlobalHeight", &t.FGlobalHeight, d...)
	cb.Do("FGlobalHeightExponent", &t.FGlobalHeightExponent, d...)
	cb.Do("AfGlobalDistance", &t.AfGlobalDistance, d...)
	cb.Do("AfGlobalDirectionAdherence", &t.AfGlobalDirectionAdherence, d...)
	cb.Do("AtBranch", &t.AtBranch, d...)
	cb.Do("AtLeaf", &t.AtLeaf, d...)
	cb.Do("AfFrondRippleDistance", &t.AfFrondRippleDistance, d...)
	cb.Do("FFrondRippleTile", &t.FFrondRippleTile, d...)
	cb.Do("FFrondRippleLightingScalar", &t.FFrondRippleLightingScalar, d...)
	cb.Do("Unk_9938ef6", &t.Unk_9938ef6, d...)
	cb.Do("Unk_c1eed76", &t.Unk_c1eed76, d...)
	cb.Do("Unk_ba61ab4", &t.Unk_ba61ab4, d...)
	cb.Do("Unk_567053e", &t.Unk_567053e, d...)
	cb.Do("Unk_c08eb6c", &t.Unk_c08eb6c, d...)
	cb.Do("FRollingBranchRipple", &t.FRollingBranchRipple, d...)
	cb.Do("FRollingBranchFieldMin", &t.FRollingBranchFieldMin, d...)
	cb.Do("FRollingBranchLightingAdjust", &t.FRollingBranchLightingAdjust, d...)
	cb.Do("FRollingBranchVerticalOffset", &t.FRollingBranchVerticalOffset, d...)
	cb.Do("Unk_b06b705", &t.Unk_b06b705, d...)
	cb.Do("Unk_f7ea482", &t.Unk_f7ea482, d...)
	cb.Do("FGustFrequency", &t.FGustFrequency, d...)
	cb.Do("FGustStrengthMin", &t.FGustStrengthMin, d...)
	cb.Do("FGustStrengthMax", &t.FGustStrengthMax, d...)
	cb.Do("FGustDurationMin", &t.FGustDurationMin, d...)
	cb.Do("FGustDurationMax", &t.FGustDurationMax, d...)
	cb.Do("FGustRiseScalar", &t.FGustRiseScalar, d...)
	cb.Do("FGustFallScalar", &t.FGustFallScalar, d...)
	cb.Do("Unk_5c5413", &t.Unk_5c5413, d...)
	cb.Do("Unk_5c5414", &t.Unk_5c5414, d...)
	cb.Do("VBranchWindAnchor", &t.VBranchWindAnchor, d...)
	cb.Do("Unk_2e7a7c5", &t.Unk_2e7a7c5, d...)
}

type ActorAIDisperseData struct {
	ArTiers DT_VARIABLEARRAY[*ActorAIDisperseTierData]
}

func (t *ActorAIDisperseData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.ArTiers, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ActorAIDisperseData) Walk(cb WalkCallback, d ...any) {
	cb.Do("ArTiers", &t.ArTiers, d...)
}

type QuestDefinition struct {
	EQuestType                     DT_ENUM
	EPlayerQuestType               DT_ENUM
	EEventQuestType                DT_ENUM
	EInstanceQuestType             DT_ENUM
	ERepeatType                    DT_ENUM
	EVignetteType                  DT_ENUM
	Unk_43f3849                    DT_INT
	Unk_48a2b16                    DT_INT
	TMarkerHandleStartLocation     MarkerHandle
	VecStartLocation               DT_VECTOR3D
	SnoWorldStartLocation          DT_SNO
	TMarkerHandleDevStartLocation  MarkerHandle
	VecDevStartLocation            DT_VECTOR3D
	SnoWorldDevStartLocation       DT_SNO
	Unk_d2181f0                    DT_STARTLOC_NAME
	SnoLevelArea                   DT_SNO
	Unk_f956a05                    DT_INT
	Unk_14dee1b                    DT_INT
	FlParticipationRadius          DT_FLOAT
	Unk_8881b0e                    DT_FLOAT
	DwNextUID                      DT_UINT
	FPrioritySideQuest             DT_INT
	EPrioritySideQuestType         DT_ENUM
	EPersistentEventType           DT_ENUM
	Unk_e6be43                     DT_VARIABLEARRAY[*DT_SNO]
	Unk_79f6e17                    DT_ENUM
	GbidSubzoneModifierTag         DT_GBID
	SnoBountySubzone               DT_SNO
	EBountyTier                    DT_ENUM
	EBountyType                    DT_ENUM
	Unk_313dbf6                    DT_INT
	DwRegionSourceCallbackUID      DT_UINT
	ESimQuestPhase                 DT_ENUM
	Unk_942bcdb                    DT_INT
	DwFlags                        DT_UINT
	ArQuestPhases                  DT_POLYMORPHIC_VARIABLEARRAY[*DT_INT64]
	ArRequiredReputations          DT_VARIABLEARRAY[*ReputationValuePair]
	ArReputationRewards            DT_VARIABLEARRAY[*ReputationValuePair]
	ArRequiredCompletedQuests      DT_VARIABLEARRAY[*DT_SNO]
	SnoStartCondition              DT_SNO
	ArFollowers                    DT_VARIABLEARRAY[*QuestFollower]
	ArQuestItems                   DT_VARIABLEARRAY[*DT_SNO]
	ArQuestDungeons                DT_VARIABLEARRAY[*DT_SNO]
	Unk_2aa5f20                    DT_VARIABLEARRAY[*DT_SNO]
	Unk_b43b442                    DT_VARIABLEARRAY[*DT_GBID]
	GbidSurveyType                 DT_GBID
	GbidNightmareDungeonSurveyType DT_GBID
	Unk_9ac873                     DT_INT
	Unk_f4b6cde                    Type_56ff7d6a
	SnoAudioContext                DT_SNO
	ArAllReferencedItems           DT_VARIABLEARRAY[*DT_SNO]
}

func (t *QuestDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.EQuestType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.EPlayerQuestType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.EEventQuestType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.EInstanceQuestType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ERepeatType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.EVignetteType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.Unk_43f3849, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.Unk_48a2b16, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.TMarkerHandleStartLocation, r, &Options{Flags: 513}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.VecStartLocation, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+60, &t.SnoWorldStartLocation, r, &Options{
		Flags: 512,
		Group: 48,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.TMarkerHandleDevStartLocation, r, &Options{Flags: 513}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.VecDevStartLocation, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.SnoWorldDevStartLocation, r, &Options{
		Flags: 512,
		Group: 48,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.Unk_d2181f0, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.SnoLevelArea, r, &Options{
		Flags: 513,
		Group: 22,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.Unk_f956a05, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+100, &t.Unk_14dee1b, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+104, &t.FlParticipationRadius, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+108, &t.Unk_8881b0e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.DwNextUID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+116, &t.FPrioritySideQuest, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.EPrioritySideQuestType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+124, &t.EPersistentEventType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.Unk_e6be43, r, &Options{
		Flags: 1,
		Group: 31,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+144, &t.Unk_79f6e17, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+148, &t.GbidSubzoneModifierTag, r, &Options{
		Flags: 1,
		Group: 60,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+152, &t.SnoBountySubzone, r, &Options{
		Flags: 513,
		Group: 80,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+156, &t.EBountyTier, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+160, &t.EBountyType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+164, &t.Unk_313dbf6, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+168, &t.DwRegionSourceCallbackUID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+172, &t.ESimQuestPhase, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+176, &t.Unk_942bcdb, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+180, &t.DwFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+184, &t.ArQuestPhases, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+208, &t.ArRequiredReputations, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+224, &t.ArReputationRewards, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+240, &t.ArRequiredCompletedQuests, r, &Options{
		Flags: 513,
		Group: 31,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+256, &t.SnoStartCondition, r, &Options{
		Flags: 1,
		Group: 51,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+264, &t.ArFollowers, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+280, &t.ArQuestItems, r, &Options{
		Flags: 1,
		Group: 73,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+296, &t.ArQuestDungeons, r, &Options{
		Flags: 1,
		Group: 48,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+312, &t.Unk_2aa5f20, r, &Options{
		Flags: 1,
		Group: 31,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+328, &t.Unk_b43b442, r, &Options{
		Flags: 1,
		Group: 45,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+344, &t.GbidSurveyType, r, &Options{
		Flags: 1,
		Group: 57,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+348, &t.GbidNightmareDungeonSurveyType, r, &Options{
		Flags: 1,
		Group: 57,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+352, &t.Unk_9ac873, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+360, &t.Unk_f4b6cde, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+376, &t.SnoAudioContext, r, &Options{
		Flags: 1,
		Group: 93,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+384, &t.ArAllReferencedItems, r, &Options{Group: 73}); err != nil {
		return err
	}
	if _, err := r.Seek(p+400, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *QuestDefinition) Walk(cb WalkCallback, d ...any) {
	cb.Do("EQuestType", &t.EQuestType, d...)
	cb.Do("EPlayerQuestType", &t.EPlayerQuestType, d...)
	cb.Do("EEventQuestType", &t.EEventQuestType, d...)
	cb.Do("EInstanceQuestType", &t.EInstanceQuestType, d...)
	cb.Do("ERepeatType", &t.ERepeatType, d...)
	cb.Do("EVignetteType", &t.EVignetteType, d...)
	cb.Do("Unk_43f3849", &t.Unk_43f3849, d...)
	cb.Do("Unk_48a2b16", &t.Unk_48a2b16, d...)
	cb.Do("TMarkerHandleStartLocation", &t.TMarkerHandleStartLocation, d...)
	cb.Do("VecStartLocation", &t.VecStartLocation, d...)
	cb.Do("SnoWorldStartLocation", &t.SnoWorldStartLocation, d...)
	cb.Do("TMarkerHandleDevStartLocation", &t.TMarkerHandleDevStartLocation, d...)
	cb.Do("VecDevStartLocation", &t.VecDevStartLocation, d...)
	cb.Do("SnoWorldDevStartLocation", &t.SnoWorldDevStartLocation, d...)
	cb.Do("Unk_d2181f0", &t.Unk_d2181f0, d...)
	cb.Do("SnoLevelArea", &t.SnoLevelArea, d...)
	cb.Do("Unk_f956a05", &t.Unk_f956a05, d...)
	cb.Do("Unk_14dee1b", &t.Unk_14dee1b, d...)
	cb.Do("FlParticipationRadius", &t.FlParticipationRadius, d...)
	cb.Do("Unk_8881b0e", &t.Unk_8881b0e, d...)
	cb.Do("DwNextUID", &t.DwNextUID, d...)
	cb.Do("FPrioritySideQuest", &t.FPrioritySideQuest, d...)
	cb.Do("EPrioritySideQuestType", &t.EPrioritySideQuestType, d...)
	cb.Do("EPersistentEventType", &t.EPersistentEventType, d...)
	cb.Do("Unk_e6be43", &t.Unk_e6be43, d...)
	cb.Do("Unk_79f6e17", &t.Unk_79f6e17, d...)
	cb.Do("GbidSubzoneModifierTag", &t.GbidSubzoneModifierTag, d...)
	cb.Do("SnoBountySubzone", &t.SnoBountySubzone, d...)
	cb.Do("EBountyTier", &t.EBountyTier, d...)
	cb.Do("EBountyType", &t.EBountyType, d...)
	cb.Do("Unk_313dbf6", &t.Unk_313dbf6, d...)
	cb.Do("DwRegionSourceCallbackUID", &t.DwRegionSourceCallbackUID, d...)
	cb.Do("ESimQuestPhase", &t.ESimQuestPhase, d...)
	cb.Do("Unk_942bcdb", &t.Unk_942bcdb, d...)
	cb.Do("DwFlags", &t.DwFlags, d...)
	cb.Do("ArQuestPhases", &t.ArQuestPhases, d...)
	cb.Do("ArRequiredReputations", &t.ArRequiredReputations, d...)
	cb.Do("ArReputationRewards", &t.ArReputationRewards, d...)
	cb.Do("ArRequiredCompletedQuests", &t.ArRequiredCompletedQuests, d...)
	cb.Do("SnoStartCondition", &t.SnoStartCondition, d...)
	cb.Do("ArFollowers", &t.ArFollowers, d...)
	cb.Do("ArQuestItems", &t.ArQuestItems, d...)
	cb.Do("ArQuestDungeons", &t.ArQuestDungeons, d...)
	cb.Do("Unk_2aa5f20", &t.Unk_2aa5f20, d...)
	cb.Do("Unk_b43b442", &t.Unk_b43b442, d...)
	cb.Do("GbidSurveyType", &t.GbidSurveyType, d...)
	cb.Do("GbidNightmareDungeonSurveyType", &t.GbidNightmareDungeonSurveyType, d...)
	cb.Do("Unk_9ac873", &t.Unk_9ac873, d...)
	cb.Do("Unk_f4b6cde", &t.Unk_f4b6cde, d...)
	cb.Do("SnoAudioContext", &t.SnoAudioContext, d...)
	cb.Do("ArAllReferencedItems", &t.ArAllReferencedItems, d...)
}

type VendorInventory struct {
	ArInventories DT_VARIABLEARRAY[*DT_SNO]
}

func (t *VendorInventory) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.ArInventories, r, &Options{
		Flags: 513,
		Group: 52,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *VendorInventory) Walk(cb WalkCallback, d ...any) {
	cb.Do("ArInventories", &t.ArInventories, d...)
}

type Type_3ee2b992 struct {
	SnoParticle DT_SNO
	Unk_9644926 DT_FLOAT
}

func (t *Type_3ee2b992) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoParticle, r, &Options{
		Flags: 1,
		Group: 27,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.Unk_9644926, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_3ee2b992) Walk(cb WalkCallback, d ...any) {
	cb.Do("SnoParticle", &t.SnoParticle, d...)
	cb.Do("Unk_9644926", &t.Unk_9644926, d...)
}

type ChallengeDefinition struct {
	DwNextID     DT_UINT
	ArCategories DT_VARIABLEARRAY[*ChallengeCategory]
}

func (t *ChallengeDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwNextID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.ArCategories, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ChallengeDefinition) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwNextID", &t.DwNextID, d...)
	cb.Do("ArCategories", &t.ArCategories, d...)
}

type LightStateParams struct {
	PathRadius             InterpolationPath_float
	PathSourceRadius       InterpolationPath_float
	Unk_d2a3cb0            InterpolationPath_float
	PathFalloffBias        InterpolationPath_float
	Unk_500fe1e            InterpolationPath_float
	PathWidth              InterpolationPath_float
	PathHotspot            InterpolationPath_float
	PathFalloff            InterpolationPath_float
	PathColor              InterpolationPath_RGBAColor
	PathIntensity          InterpolationPath_float
	Unk_6634e3c            DT_FLOAT
	Unk_114300f            DT_FLOAT
	PathSunIntensityFactor InterpolationPath_float
	PathShadowIntensity    InterpolationPath_float
	PathPivotOffset        VectorPath
}

func (t *LightStateParams) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.PathRadius, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.PathSourceRadius, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.Unk_d2a3cb0, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+168, &t.PathFalloffBias, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+224, &t.Unk_500fe1e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+280, &t.PathWidth, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+336, &t.PathHotspot, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+392, &t.PathFalloff, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+448, &t.PathColor, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+504, &t.PathIntensity, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+560, &t.Unk_6634e3c, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+564, &t.Unk_114300f, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+568, &t.PathSunIntensityFactor, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+624, &t.PathShadowIntensity, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+680, &t.PathPivotOffset, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+736, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *LightStateParams) Walk(cb WalkCallback, d ...any) {
	cb.Do("PathRadius", &t.PathRadius, d...)
	cb.Do("PathSourceRadius", &t.PathSourceRadius, d...)
	cb.Do("Unk_d2a3cb0", &t.Unk_d2a3cb0, d...)
	cb.Do("PathFalloffBias", &t.PathFalloffBias, d...)
	cb.Do("Unk_500fe1e", &t.Unk_500fe1e, d...)
	cb.Do("PathWidth", &t.PathWidth, d...)
	cb.Do("PathHotspot", &t.PathHotspot, d...)
	cb.Do("PathFalloff", &t.PathFalloff, d...)
	cb.Do("PathColor", &t.PathColor, d...)
	cb.Do("PathIntensity", &t.PathIntensity, d...)
	cb.Do("Unk_6634e3c", &t.Unk_6634e3c, d...)
	cb.Do("Unk_114300f", &t.Unk_114300f, d...)
	cb.Do("PathSunIntensityFactor", &t.PathSunIntensityFactor, d...)
	cb.Do("PathShadowIntensity", &t.PathShadowIntensity, d...)
	cb.Do("PathPivotOffset", &t.PathPivotOffset, d...)
}

type MarkerHeightFieldClutter struct {
	Unk_cd39b27    DT_FIXEDARRAY[*DT_BYTE]
	DwClutterMasks DT_FIXEDARRAY[*DT_BYTE]
	NHeightValue   DT_WORD
	DwFlags        DT_BYTE
	Unk_d188924    DT_BYTE
}

func (t *MarkerHeightFieldClutter) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Unk_cd39b27, r, &Options{
		ArrayLength: 4,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.DwClutterMasks, r, &Options{
		ArrayLength: 4,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.NHeightValue, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+10, &t.DwFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+11, &t.Unk_d188924, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+12, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *MarkerHeightFieldClutter) Walk(cb WalkCallback, d ...any) {
	cb.Do("Unk_cd39b27", &t.Unk_cd39b27, d...)
	cb.Do("DwClutterMasks", &t.DwClutterMasks, d...)
	cb.Do("NHeightValue", &t.NHeightValue, d...)
	cb.Do("DwFlags", &t.DwFlags, d...)
	cb.Do("Unk_d188924", &t.Unk_d188924, d...)
}

type ParagonGlyphAffixAttributeMap struct {
	TDestinationAttribute ParagonGlyphAffixAttribute
	TSourceAttribute      ParagonGlyphAffixAttribute
}

func (t *ParagonGlyphAffixAttributeMap) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.TDestinationAttribute, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.TSourceAttribute, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ParagonGlyphAffixAttributeMap) Walk(cb WalkCallback, d ...any) {
	cb.Do("TDestinationAttribute", &t.TDestinationAttribute, d...)
	cb.Do("TSourceAttribute", &t.TSourceAttribute, d...)
}

type ShrineGizmoData struct {
	// Inherits NamedGizmoData
	// Inherits ActorGizmoData
	// Inherits PolymorphicBase
	DwType                           DT_UINT
	DwPad                            DT_UINT
	FDisableNonFriendlyOperation     DT_INT
	FWalkToCenter                    DT_INT
	FGizmoStartsDisabled             DT_INT
	FUseStringListName               DT_INT
	FForceMinimapIcon                DT_INT
	FlOperationRadius                DT_FLOAT
	Unk_d0b1df5                      DT_FLOAT
	FlGizmoUseTime                   DT_FLOAT
	SnoChannelingEffect              DT_SNO
	Unk_2767229                      DT_INT
	FGizmoShowProgressBar            DT_INT
	Unk_6d9ebe1                      DT_INT
	Unk_5456245                      DT_INT
	Unk_af5815a                      DT_INT
	SnoOnClickEffect                 DT_SNO
	SnoPickedUpEffect                DT_SNO
	SnoDropOnGroundEffect            DT_SNO
	TConditionData                   GizmoConditionData
	SnoPowerOperator                 DT_SNO
	SnoPowerOperate                  DT_SNO
	SnoPowerOperatorActive           DT_SNO
	SnoPowerOperateActive            DT_SNO
	Unk_359810e                      DT_INT
	NCooldown                        DT_UINT
	Unk_9c8478e                      DT_UINT
	Unk_d45ed2d                      DT_INT
	Unk_f6b20b7                      DT_INT
	Unk_54513b8                      DT_INT
	Unk_fd1f378                      DT_UINT
	HGizmoOperateFlavorTextMsgLabel  DT_UINT
	HGizmoOperateDescriptionMsgLabel DT_UINT
	FlGizmoOperateOffset             DT_FLOAT
	Unk_ab58cd3                      DT_ENUM
	Unk_91a3966                      DT_UINT
	HGizmoChannelingLabel            DT_UINT
	Unk_4be4371                      DT_INT
	SnoActivationPower               DT_SNO
	Unk_6451e0                       DT_INT
}

func (t *ShrineGizmoData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.FDisableNonFriendlyOperation, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.FWalkToCenter, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.FGizmoStartsDisabled, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.FUseStringListName, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.FForceMinimapIcon, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.FlOperationRadius, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.Unk_d0b1df5, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.FlGizmoUseTime, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.SnoChannelingEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.Unk_2767229, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.FGizmoShowProgressBar, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+60, &t.Unk_6d9ebe1, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.Unk_5456245, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.Unk_af5815a, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.SnoOnClickEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.SnoPickedUpEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.SnoDropOnGroundEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.TConditionData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.SnoPowerOperator, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.SnoPowerOperate, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.SnoPowerOperatorActive, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+100, &t.SnoPowerOperateActive, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+104, &t.Unk_359810e, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+108, &t.NCooldown, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.Unk_9c8478e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+116, &t.Unk_d45ed2d, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.Unk_f6b20b7, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+124, &t.Unk_54513b8, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.Unk_fd1f378, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+132, &t.HGizmoOperateFlavorTextMsgLabel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+136, &t.HGizmoOperateDescriptionMsgLabel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+140, &t.FlGizmoOperateOffset, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+144, &t.Unk_ab58cd3, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+148, &t.Unk_91a3966, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+152, &t.HGizmoChannelingLabel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+156, &t.Unk_4be4371, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+160, &t.SnoActivationPower, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+164, &t.Unk_6451e0, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+168, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ShrineGizmoData) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("FDisableNonFriendlyOperation", &t.FDisableNonFriendlyOperation, d...)
	cb.Do("FWalkToCenter", &t.FWalkToCenter, d...)
	cb.Do("FGizmoStartsDisabled", &t.FGizmoStartsDisabled, d...)
	cb.Do("FUseStringListName", &t.FUseStringListName, d...)
	cb.Do("FForceMinimapIcon", &t.FForceMinimapIcon, d...)
	cb.Do("FlOperationRadius", &t.FlOperationRadius, d...)
	cb.Do("Unk_d0b1df5", &t.Unk_d0b1df5, d...)
	cb.Do("FlGizmoUseTime", &t.FlGizmoUseTime, d...)
	cb.Do("SnoChannelingEffect", &t.SnoChannelingEffect, d...)
	cb.Do("Unk_2767229", &t.Unk_2767229, d...)
	cb.Do("FGizmoShowProgressBar", &t.FGizmoShowProgressBar, d...)
	cb.Do("Unk_6d9ebe1", &t.Unk_6d9ebe1, d...)
	cb.Do("Unk_5456245", &t.Unk_5456245, d...)
	cb.Do("Unk_af5815a", &t.Unk_af5815a, d...)
	cb.Do("SnoOnClickEffect", &t.SnoOnClickEffect, d...)
	cb.Do("SnoPickedUpEffect", &t.SnoPickedUpEffect, d...)
	cb.Do("SnoDropOnGroundEffect", &t.SnoDropOnGroundEffect, d...)
	cb.Do("TConditionData", &t.TConditionData, d...)
	cb.Do("SnoPowerOperator", &t.SnoPowerOperator, d...)
	cb.Do("SnoPowerOperate", &t.SnoPowerOperate, d...)
	cb.Do("SnoPowerOperatorActive", &t.SnoPowerOperatorActive, d...)
	cb.Do("SnoPowerOperateActive", &t.SnoPowerOperateActive, d...)
	cb.Do("Unk_359810e", &t.Unk_359810e, d...)
	cb.Do("NCooldown", &t.NCooldown, d...)
	cb.Do("Unk_9c8478e", &t.Unk_9c8478e, d...)
	cb.Do("Unk_d45ed2d", &t.Unk_d45ed2d, d...)
	cb.Do("Unk_f6b20b7", &t.Unk_f6b20b7, d...)
	cb.Do("Unk_54513b8", &t.Unk_54513b8, d...)
	cb.Do("Unk_fd1f378", &t.Unk_fd1f378, d...)
	cb.Do("HGizmoOperateFlavorTextMsgLabel", &t.HGizmoOperateFlavorTextMsgLabel, d...)
	cb.Do("HGizmoOperateDescriptionMsgLabel", &t.HGizmoOperateDescriptionMsgLabel, d...)
	cb.Do("FlGizmoOperateOffset", &t.FlGizmoOperateOffset, d...)
	cb.Do("Unk_ab58cd3", &t.Unk_ab58cd3, d...)
	cb.Do("Unk_91a3966", &t.Unk_91a3966, d...)
	cb.Do("HGizmoChannelingLabel", &t.HGizmoChannelingLabel, d...)
	cb.Do("Unk_4be4371", &t.Unk_4be4371, d...)
	cb.Do("SnoActivationPower", &t.SnoActivationPower, d...)
	cb.Do("Unk_6451e0", &t.Unk_6451e0, d...)
}

type Type_3f7811d2 struct {
	Unk_589fc97 DT_TAGMAP[*DT_ENUM]
}

func (t *Type_3f7811d2) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Unk_589fc97, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_3f7811d2) Walk(cb WalkCallback, d ...any) {
	cb.Do("Unk_589fc97", &t.Unk_589fc97, d...)
}

type TriggerEventChangeShaderMapOverride struct {
	// Inherits TriggerEvent
	// Inherits PolymorphicBase
	DwType              DT_UINT
	DwPad               DT_UINT
	TConditions         TriggerConditions
	FGenerated          DT_INT
	Unk_6cba752         DT_INT
	DwParentActorID     DT_UINT
	DwActorID           DT_UINT
	DwShaderMapOverride DT_UINT
	Unk_279aa5a         DT_INT
}

func (t *TriggerEventChangeShaderMapOverride) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.FGenerated, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_6cba752, r, &Options{Flags: 16}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.DwParentActorID, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.DwActorID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.DwShaderMapOverride, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.Unk_279aa5a, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+96, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TriggerEventChangeShaderMapOverride) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("TConditions", &t.TConditions, d...)
	cb.Do("FGenerated", &t.FGenerated, d...)
	cb.Do("Unk_6cba752", &t.Unk_6cba752, d...)
	cb.Do("DwParentActorID", &t.DwParentActorID, d...)
	cb.Do("DwActorID", &t.DwActorID, d...)
	cb.Do("DwShaderMapOverride", &t.DwShaderMapOverride, d...)
	cb.Do("Unk_279aa5a", &t.Unk_279aa5a, d...)
}

type FrameAnim struct {
	EPlaybackMode        DT_ENUM
	TFrameRateRange      DT_RANGE[*DT_FLOAT]
	TStartFrameRange     DT_RANGE[*DT_UINT]
	DwFrameRandomSeed    DT_UINT
	TAnimationDelayRange DT_RANGE[*DT_FLOAT]
	Unk_ca71af4          DT_INT
}

func (t *FrameAnim) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.EPlaybackMode, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.TFrameRateRange, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.TStartFrameRange, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwFrameRandomSeed, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.TAnimationDelayRange, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.Unk_ca71af4, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+36, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *FrameAnim) Walk(cb WalkCallback, d ...any) {
	cb.Do("EPlaybackMode", &t.EPlaybackMode, d...)
	cb.Do("TFrameRateRange", &t.TFrameRateRange, d...)
	cb.Do("TStartFrameRange", &t.TStartFrameRange, d...)
	cb.Do("DwFrameRandomSeed", &t.DwFrameRandomSeed, d...)
	cb.Do("TAnimationDelayRange", &t.TAnimationDelayRange, d...)
	cb.Do("Unk_ca71af4", &t.Unk_ca71af4, d...)
}

type PowerBuffDefinition struct {
	DwID               DT_UINT
	DwBuffId           DT_UINT
	BHarmful           DT_INT
	BInfinite          DT_INT
	TDuration          DT_STRING_FORMULA
	TMaxStackCount     DT_STRING_FORMULA
	Unk_89134c5        DT_INT
	BShowDuration      DT_INT
	BCancellable       DT_INT
	Unk_99b5752        DT_INT
	Unk_93cd85f        DT_INT
	Unk_5c11505        DT_INT
	Unk_9eb6fb0        DT_INT
	Unk_e8f1e19        DT_INT
	Unk_9cb4832        DT_INT
	Unk_71ba554        DT_INT
	HIcon              DT_UINT
	HFloatingIcon      DT_UINT
	HFloatingTextLabel DT_UINT
	Unk_c35001         DT_FLOAT
	Unk_395ccd6        DT_INT
	BDealsDOT          DT_INT
	TDOT               PowerBuffDOTDamage
	Unk_dcb22bd        DT_INT
	TCrowdControl      PowerBuffCrowdControl
	BHasDamageShield   DT_INT
	TDamageShield      HitpointSpecifier
}

func (t *PowerBuffDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.DwID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.DwBuffId, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.BHarmful, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.BInfinite, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TDuration, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.TMaxStackCount, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.Unk_89134c5, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.BShowDuration, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.BCancellable, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.Unk_99b5752, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.Unk_93cd85f, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+100, &t.Unk_5c11505, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+104, &t.Unk_9eb6fb0, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+108, &t.Unk_e8f1e19, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.Unk_9cb4832, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+116, &t.Unk_71ba554, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.HIcon, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+124, &t.HFloatingIcon, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.HFloatingTextLabel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+132, &t.Unk_c35001, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+136, &t.Unk_395ccd6, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+140, &t.BDealsDOT, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+144, &t.TDOT, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+296, &t.Unk_dcb22bd, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+304, &t.TCrowdControl, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+416, &t.BHasDamageShield, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+424, &t.TDamageShield, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+496, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PowerBuffDefinition) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwID", &t.DwID, d...)
	cb.Do("DwBuffId", &t.DwBuffId, d...)
	cb.Do("BHarmful", &t.BHarmful, d...)
	cb.Do("BInfinite", &t.BInfinite, d...)
	cb.Do("TDuration", &t.TDuration, d...)
	cb.Do("TMaxStackCount", &t.TMaxStackCount, d...)
	cb.Do("Unk_89134c5", &t.Unk_89134c5, d...)
	cb.Do("BShowDuration", &t.BShowDuration, d...)
	cb.Do("BCancellable", &t.BCancellable, d...)
	cb.Do("Unk_99b5752", &t.Unk_99b5752, d...)
	cb.Do("Unk_93cd85f", &t.Unk_93cd85f, d...)
	cb.Do("Unk_5c11505", &t.Unk_5c11505, d...)
	cb.Do("Unk_9eb6fb0", &t.Unk_9eb6fb0, d...)
	cb.Do("Unk_e8f1e19", &t.Unk_e8f1e19, d...)
	cb.Do("Unk_9cb4832", &t.Unk_9cb4832, d...)
	cb.Do("Unk_71ba554", &t.Unk_71ba554, d...)
	cb.Do("HIcon", &t.HIcon, d...)
	cb.Do("HFloatingIcon", &t.HFloatingIcon, d...)
	cb.Do("HFloatingTextLabel", &t.HFloatingTextLabel, d...)
	cb.Do("Unk_c35001", &t.Unk_c35001, d...)
	cb.Do("Unk_395ccd6", &t.Unk_395ccd6, d...)
	cb.Do("BDealsDOT", &t.BDealsDOT, d...)
	cb.Do("TDOT", &t.TDOT, d...)
	cb.Do("Unk_dcb22bd", &t.Unk_dcb22bd, d...)
	cb.Do("TCrowdControl", &t.TCrowdControl, d...)
	cb.Do("BHasDamageShield", &t.BHasDamageShield, d...)
	cb.Do("TDamageShield", &t.TDamageShield, d...)
}

type CollSettingsParam struct {
	NFrameStart DT_INT
	NFrameEnd   DT_INT
}

func (t *CollSettingsParam) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.NFrameStart, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.NFrameEnd, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *CollSettingsParam) Walk(cb WalkCallback, d ...any) {
	cb.Do("NFrameStart", &t.NFrameStart, d...)
	cb.Do("NFrameEnd", &t.NFrameEnd, d...)
}

type TriggerEventHitFlashDuration struct {
	// Inherits TriggerEventRangedDuration
	// Inherits TriggerEvent
	// Inherits PolymorphicBase
	DwType                      DT_UINT
	TConditions                 TriggerConditions
	FGenerated                  DT_INT
	Unk_6cba752                 DT_INT
	DwParentActorID             DT_UINT
	TDuration                   DT_FLOAT
	DwTriggerFlags              DT_UINT
	DwTriggerFlagsEx            DT_UINT
	TCleanup                    TriggerCleanup
	Unk_49e9257                 DT_INT
	Unk_5490979                 DT_INT
	DwPad                       DT_UINT
	RgbaColorAdd                DT_RGBACOLOR
	NHitFlashAddDuration        DT_FLOAT
	RgbaColorMul                DT_RGBACOLOR
	NHitFlashMulDuration        DT_FLOAT
	FlHitFlashIntensity         DT_FLOAT
	Unk_622a853                 DT_FLOAT
	FlHitFlashIntensityDuration DT_FLOAT
	EHitFlashAddFresnel         DT_ENUM
	EHitFlashMulFresnel         DT_ENUM
	EHitFlashCurve              DT_ENUM
	DwID                        DT_UINT
	NMaxHitFlash                DT_UINT
	Unk_17f7deb                 DT_INT
	Unk_b19da4b                 DT_INT
}

func (t *TriggerEventHitFlashDuration) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.FGenerated, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_6cba752, r, &Options{Flags: 16}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.DwParentActorID, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.TDuration, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.DwTriggerFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.DwTriggerFlagsEx, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.TCleanup, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+116, &t.Unk_49e9257, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.Unk_5490979, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+124, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.RgbaColorAdd, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+132, &t.NHitFlashAddDuration, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+136, &t.RgbaColorMul, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+140, &t.NHitFlashMulDuration, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+144, &t.FlHitFlashIntensity, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+148, &t.Unk_622a853, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+152, &t.FlHitFlashIntensityDuration, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+156, &t.EHitFlashAddFresnel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+160, &t.EHitFlashMulFresnel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+164, &t.EHitFlashCurve, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+168, &t.DwID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+172, &t.NMaxHitFlash, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+176, &t.Unk_17f7deb, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+180, &t.Unk_b19da4b, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+184, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TriggerEventHitFlashDuration) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("TConditions", &t.TConditions, d...)
	cb.Do("FGenerated", &t.FGenerated, d...)
	cb.Do("Unk_6cba752", &t.Unk_6cba752, d...)
	cb.Do("DwParentActorID", &t.DwParentActorID, d...)
	cb.Do("TDuration", &t.TDuration, d...)
	cb.Do("DwTriggerFlags", &t.DwTriggerFlags, d...)
	cb.Do("DwTriggerFlagsEx", &t.DwTriggerFlagsEx, d...)
	cb.Do("TCleanup", &t.TCleanup, d...)
	cb.Do("Unk_49e9257", &t.Unk_49e9257, d...)
	cb.Do("Unk_5490979", &t.Unk_5490979, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("RgbaColorAdd", &t.RgbaColorAdd, d...)
	cb.Do("NHitFlashAddDuration", &t.NHitFlashAddDuration, d...)
	cb.Do("RgbaColorMul", &t.RgbaColorMul, d...)
	cb.Do("NHitFlashMulDuration", &t.NHitFlashMulDuration, d...)
	cb.Do("FlHitFlashIntensity", &t.FlHitFlashIntensity, d...)
	cb.Do("Unk_622a853", &t.Unk_622a853, d...)
	cb.Do("FlHitFlashIntensityDuration", &t.FlHitFlashIntensityDuration, d...)
	cb.Do("EHitFlashAddFresnel", &t.EHitFlashAddFresnel, d...)
	cb.Do("EHitFlashMulFresnel", &t.EHitFlashMulFresnel, d...)
	cb.Do("EHitFlashCurve", &t.EHitFlashCurve, d...)
	cb.Do("DwID", &t.DwID, d...)
	cb.Do("NMaxHitFlash", &t.NMaxHitFlash, d...)
	cb.Do("Unk_17f7deb", &t.Unk_17f7deb, d...)
	cb.Do("Unk_b19da4b", &t.Unk_b19da4b, d...)
}

type TextureContent struct {
	TTexture SerialDataInfo
}

func (t *TextureContent) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.TTexture, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TextureContent) Walk(cb WalkCallback, d ...any) {
	cb.Do("TTexture", &t.TTexture, d...)
}

type PlayerTitleDefinition struct {
	BIsSeasonal DT_INT
}

func (t *PlayerTitleDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.BIsSeasonal, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+12, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PlayerTitleDefinition) Walk(cb WalkCallback, d ...any) {
	cb.Do("BIsSeasonal", &t.BIsSeasonal, d...)
}

type PreloadSceneDataMessage struct {
	THeader  RequiredMessageHeader
	IdSScene DT_SHARED_SERVER_DATA_ID
	SnoScene DT_SNO
}

func (t *PreloadSceneDataMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.IdSScene, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SnoScene, r, &Options{
		Flags: 1,
		Group: 33,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+28, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PreloadSceneDataMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("IdSScene", &t.IdSScene, d...)
	cb.Do("SnoScene", &t.SnoScene, d...)
}

type DWordDataMessage struct {
	THeader RequiredMessageHeader
	DwData  DT_UINT
}

func (t *DWordDataMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.DwData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+20, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *DWordDataMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("DwData", &t.DwData, d...)
}

type AlwaysFalseSubcondition struct {
	// Inherits Subcondition
	// Inherits PolymorphicBase
	DwType  DT_UINT
	BNegate DT_INT
	DwPad   DT_UINT
}

func (t *AlwaysFalseSubcondition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BNegate, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *AlwaysFalseSubcondition) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("BNegate", &t.BNegate, d...)
	cb.Do("DwPad", &t.DwPad, d...)
}

type ParagonThresholdDefinition struct {
	PtThresholds    DT_VARIABLEARRAY[*ParagonThresholdEntry]
	ArUsableByClass DT_FIXEDARRAY[*DT_INT]
}

func (t *ParagonThresholdDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.PtThresholds, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ArUsableByClass, r, &Options{
		ArrayLength: 5,
		Flags:       1,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ParagonThresholdDefinition) Walk(cb WalkCallback, d ...any) {
	cb.Do("PtThresholds", &t.PtThresholds, d...)
	cb.Do("ArUsableByClass", &t.ArUsableByClass, d...)
}

type StaggerDefinition struct{}

func (t *StaggerDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *StaggerDefinition) Walk(cb WalkCallback, d ...any) {}

type Type_4174a154 struct {
	RtpcName WwiseName
	FlValue  DT_FLOAT
}

func (t *Type_4174a154) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.RtpcName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.FlValue, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_4174a154) Walk(cb WalkCallback, d ...any) {
	cb.Do("RtpcName", &t.RtpcName, d...)
	cb.Do("FlValue", &t.FlValue, d...)
}

type OpenDungeonForLFDMessage struct {
	THeader RequiredMessageHeader
	IsOpen  DT_INT
}

func (t *OpenDungeonForLFDMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.IsOpen, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+20, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *OpenDungeonForLFDMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("IsOpen", &t.IsOpen, d...)
}

type InterpolationPath_bcVec3 struct {
	THeader      InterpolationPathHeader
	PtArrayNodes DT_VARIABLEARRAY[*InterpolationNode_bcVec3]
}

func (t *InterpolationPath_bcVec3) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.PtArrayNodes, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+56, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *InterpolationPath_bcVec3) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("PtArrayNodes", &t.PtArrayNodes, d...)
}

type InterpolationPath_bcVec4 struct {
	THeader      InterpolationPathHeader
	PtArrayNodes DT_VARIABLEARRAY[*InterpolationNode_bcVec4]
}

func (t *InterpolationPath_bcVec4) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.PtArrayNodes, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+56, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *InterpolationPath_bcVec4) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("PtArrayNodes", &t.PtArrayNodes, d...)
}

type FlagSetDefinition struct {
	ArFlagLookups DT_VARIABLEARRAY[*FlagLookup]
}

func (t *FlagSetDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.ArFlagLookups, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *FlagSetDefinition) Walk(cb WalkCallback, d ...any) {
	cb.Do("ArFlagLookups", &t.ArFlagLookups, d...)
}

type DemonSummoningQuestBucket struct {
	THeader  GBIDHeader
	ArQuests DT_VARIABLEARRAY[*DemonSummoningRitualQuests]
}

func (t *DemonSummoningQuestBucket) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+264, &t.ArQuests, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+280, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *DemonSummoningQuestBucket) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("ArQuests", &t.ArQuests, d...)
}

type StoryboardValueNode_RGBAColor struct {
	DwType  DT_UINT
	FlTime  DT_FLOAT
	DwPad   DT_UINT
	TValue  DT_RGBACOLOR
	EEasing DT_ENUM
}

func (t *StoryboardValueNode_RGBAColor) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.FlTime, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.TValue, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.EEasing, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *StoryboardValueNode_RGBAColor) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("FlTime", &t.FlTime, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("TValue", &t.TValue, d...)
	cb.Do("EEasing", &t.EEasing, d...)
}

type AnimTreeNodeOverrideWrapper struct {
	TChildOverride AnimTreeNodeOverride
}

func (t *AnimTreeNodeOverrideWrapper) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.TChildOverride, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+120, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *AnimTreeNodeOverrideWrapper) Walk(cb WalkCallback, d ...any) {
	cb.Do("TChildOverride", &t.TChildOverride, d...)
}

type TriggerEventFrostBreath struct {
	// Inherits TriggerEvent
	// Inherits PolymorphicBase
	DwType          DT_UINT
	DwPad           DT_UINT
	TConditions     TriggerConditions
	FGenerated      DT_INT
	Unk_6cba752     DT_INT
	DwParentActorID DT_UINT
	THardpointLink  HardpointLink
}

func (t *TriggerEventFrostBreath) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.FGenerated, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_6cba752, r, &Options{Flags: 16}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.DwParentActorID, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.THardpointLink, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+88, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TriggerEventFrostBreath) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("TConditions", &t.TConditions, d...)
	cb.Do("FGenerated", &t.FGenerated, d...)
	cb.Do("Unk_6cba752", &t.Unk_6cba752, d...)
	cb.Do("DwParentActorID", &t.DwParentActorID, d...)
	cb.Do("THardpointLink", &t.THardpointLink, d...)
}

type SubzoneWorldMarkerSetEntry struct {
	SnoWorld     DT_SNO
	SnoMarkerSet DT_SNO
}

func (t *SubzoneWorldMarkerSetEntry) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoWorld, r, &Options{
		Flags: 513,
		Group: 48,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.SnoMarkerSet, r, &Options{
		Flags: 1,
		Group: 24,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *SubzoneWorldMarkerSetEntry) Walk(cb WalkCallback, d ...any) {
	cb.Do("SnoWorld", &t.SnoWorld, d...)
	cb.Do("SnoMarkerSet", &t.SnoMarkerSet, d...)
}

type TriggerEventDeleteAllObjects struct {
	// Inherits TriggerEvent
	// Inherits PolymorphicBase
	DwType          DT_UINT
	DwPad           DT_UINT
	TConditions     TriggerConditions
	FGenerated      DT_INT
	Unk_6cba752     DT_INT
	DwParentActorID DT_UINT
}

func (t *TriggerEventDeleteAllObjects) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.FGenerated, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_6cba752, r, &Options{Flags: 16}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.DwParentActorID, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+80, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TriggerEventDeleteAllObjects) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("TConditions", &t.TConditions, d...)
	cb.Do("FGenerated", &t.FGenerated, d...)
	cb.Do("Unk_6cba752", &t.Unk_6cba752, d...)
	cb.Do("DwParentActorID", &t.DwParentActorID, d...)
}

type Type_42378b43 struct {
	FlGridSize    DT_FLOAT
	VecGridOffset DT_VECTOR3D
	Unk_1e8e20d   DT_INT
}

func (t *Type_42378b43) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.FlGridSize, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.VecGridOffset, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_1e8e20d, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+20, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_42378b43) Walk(cb WalkCallback, d ...any) {
	cb.Do("FlGridSize", &t.FlGridSize, d...)
	cb.Do("VecGridOffset", &t.VecGridOffset, d...)
	cb.Do("Unk_1e8e20d", &t.Unk_1e8e20d, d...)
}

type StoryboardUIControlSetFontScaleTrack struct {
	// Inherits StoryboardUIControlSetValueTrack_float
	DwType          DT_UINT
	TNodeCollection StoryboardValueNodeCollection_float
	Unk_77ed19a     DT_ENUM
	DwPad           DT_UINT
}

func (t *StoryboardUIControlSetFontScaleTrack) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TNodeCollection, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.Unk_77ed19a, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+56, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *StoryboardUIControlSetFontScaleTrack) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("TNodeCollection", &t.TNodeCollection, d...)
	cb.Do("Unk_77ed19a", &t.Unk_77ed19a, d...)
	cb.Do("DwPad", &t.DwPad, d...)
}

type BiomeObject struct {
	// Inherits BiomeItem
	// Inherits PolymorphicBase
	DwType                      DT_UINT
	FlRadius                    DT_FLOAT
	Unk_2fd1cdb                 DT_FLOAT
	TAllowedScaleRange          DT_RANGE[*DT_FLOAT]
	FlItemNonAngularFrequencyA  DT_RANGE[*DT_FLOAT]
	FlItemNonAngularFrequencyB  DT_RANGE[*DT_FLOAT]
	FlItemNonAngularFrequencyC  DT_RANGE[*DT_FLOAT]
	TAllowedVerticalOffsetRange DT_RANGE[*DT_FLOAT]
	FlChance                    DT_FLOAT
	DwFlags                     DT_UINT
	Unk_2a8c4b6                 DT_FLOAT
	AAzimuthAngle               DT_FLOAT
	AAltitudeAngle              DT_FLOAT
	Unk_6ead041                 DT_RANGE[*DT_FLOAT]
	TParametricSettings         ParametricSettings
	ArProximityAdjustments      DT_VARIABLEARRAY[*ProximityAdjustment]
	SnonameObject               DT_SNO_NAME
	Unk_d094b9a                 DT_ENUM
	QInitialOrientation         bcQuat
	SzLookName                  DT_UINT
	DwShaderMapOverride         DT_UINT
	DwPad                       DT_UINT
}

func (t *BiomeObject) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.FlRadius, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.Unk_2fd1cdb, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.TAllowedScaleRange, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.FlItemNonAngularFrequencyA, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.FlItemNonAngularFrequencyB, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.FlItemNonAngularFrequencyC, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.TAllowedVerticalOffsetRange, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.FlChance, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.DwFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_2a8c4b6, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.AAzimuthAngle, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.AAltitudeAngle, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.Unk_6ead041, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.TParametricSettings, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+224, &t.ArProximityAdjustments, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+240, &t.SnonameObject, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+248, &t.Unk_d094b9a, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+252, &t.QInitialOrientation, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+268, &t.SzLookName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+272, &t.DwShaderMapOverride, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+276, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+280, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *BiomeObject) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("FlRadius", &t.FlRadius, d...)
	cb.Do("Unk_2fd1cdb", &t.Unk_2fd1cdb, d...)
	cb.Do("TAllowedScaleRange", &t.TAllowedScaleRange, d...)
	cb.Do("FlItemNonAngularFrequencyA", &t.FlItemNonAngularFrequencyA, d...)
	cb.Do("FlItemNonAngularFrequencyB", &t.FlItemNonAngularFrequencyB, d...)
	cb.Do("FlItemNonAngularFrequencyC", &t.FlItemNonAngularFrequencyC, d...)
	cb.Do("TAllowedVerticalOffsetRange", &t.TAllowedVerticalOffsetRange, d...)
	cb.Do("FlChance", &t.FlChance, d...)
	cb.Do("DwFlags", &t.DwFlags, d...)
	cb.Do("Unk_2a8c4b6", &t.Unk_2a8c4b6, d...)
	cb.Do("AAzimuthAngle", &t.AAzimuthAngle, d...)
	cb.Do("AAltitudeAngle", &t.AAltitudeAngle, d...)
	cb.Do("Unk_6ead041", &t.Unk_6ead041, d...)
	cb.Do("TParametricSettings", &t.TParametricSettings, d...)
	cb.Do("ArProximityAdjustments", &t.ArProximityAdjustments, d...)
	cb.Do("SnonameObject", &t.SnonameObject, d...)
	cb.Do("Unk_d094b9a", &t.Unk_d094b9a, d...)
	cb.Do("QInitialOrientation", &t.QInitialOrientation, d...)
	cb.Do("SzLookName", &t.SzLookName, d...)
	cb.Do("DwShaderMapOverride", &t.DwShaderMapOverride, d...)
	cb.Do("DwPad", &t.DwPad, d...)
}

type ConversationCooldown struct {
	SnoConversation DT_SNO
	UExpirationTime DT_INT64
}

func (t *ConversationCooldown) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoConversation, r, &Options{
		Flags: 1,
		Group: 12,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.UExpirationTime, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ConversationCooldown) Walk(cb WalkCallback, d ...any) {
	cb.Do("SnoConversation", &t.SnoConversation, d...)
	cb.Do("UExpirationTime", &t.UExpirationTime, d...)
}

type PowerConditionHasModPoints struct {
	// Inherits PowerConditionBase
	// Inherits PolymorphicBase
	DwType     DT_UINT
	BInverse   DT_INT
	DwPad      DT_UINT
	ESubject   DT_ENUM
	SnoPower   DT_SNO
	SzPowerMod DT_UINT
}

func (t *PowerConditionHasModPoints) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BInverse, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ESubject, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.SnoPower, r, &Options{
		Flags: 513,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.SzPowerMod, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+40, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PowerConditionHasModPoints) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("BInverse", &t.BInverse, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("ESubject", &t.ESubject, d...)
	cb.Do("SnoPower", &t.SnoPower, d...)
	cb.Do("SzPowerMod", &t.SzPowerMod, d...)
}

type PhaseJumpDurationReached struct {
	// Inherits PhaseJumpBase
	// Inherits PolymorphicBase
	DwType       DT_UINT
	Unk_2de4987  DT_UINT
	ArConditions DT_POLYMORPHIC_VARIABLEARRAY[*DT_INT64]
	BEnd         DT_INT
	DwPad        DT_UINT
	FlSeconds    DT_FLOAT
	Unk_21b19af  DT_INT
}

func (t *PhaseJumpDurationReached) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_2de4987, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ArConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.BEnd, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.FlSeconds, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+60, &t.Unk_21b19af, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+64, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PhaseJumpDurationReached) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("Unk_2de4987", &t.Unk_2de4987, d...)
	cb.Do("ArConditions", &t.ArConditions, d...)
	cb.Do("BEnd", &t.BEnd, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("FlSeconds", &t.FlSeconds, d...)
	cb.Do("Unk_21b19af", &t.Unk_21b19af, d...)
}

type MountPreset struct {
	// Inherits CharacterPreset
	// Inherits PolymorphicBase
	DwType           DT_UINT
	DwPad            DT_UINT
	SzName           DT_CSTRING[*DT_BYTE]
	SnoWorld         DT_SNO
	NPadding1        DT_INT
	SnoActor         DT_SNO
	ArrItems         DT_FIXEDARRAY[*Type_8c33d728]
	ArrCosmeticItems DT_FIXEDARRAY[*DT_SNO]
}

func (t *MountPreset) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SzName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.SnoWorld, r, &Options{
		Flags: 513,
		Group: 48,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.NPadding1, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.SnoActor, r, &Options{
		Flags: 513,
		Group: 1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.ArrItems, r, &Options{
		ArrayLength: 1,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.ArrCosmeticItems, r, &Options{
		ArrayLength: 1,
		Flags:       513,
		Group:       73,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+56, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *MountPreset) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("SzName", &t.SzName, d...)
	cb.Do("SnoWorld", &t.SnoWorld, d...)
	cb.Do("NPadding1", &t.NPadding1, d...)
	cb.Do("SnoActor", &t.SnoActor, d...)
	cb.Do("ArrItems", &t.ArrItems, d...)
	cb.Do("ArrCosmeticItems", &t.ArrCosmeticItems, d...)
}

type RenderPassOptionalFieldMapDefaults struct {
	TAG_VS_ENABLE_SKINNING         DT_INT
	TAG_VS_ENABLE_PRE_SKINNING     DT_INT
	Unk_3c20112                    DT_INT
	Unk_37f7400                    DT_INT
	Unk_600caa4                    DT_INT
	TAG_VS_NUM_BONE_WEIGHTS        DT_INT
	TAG_VS_ENABLE_FOGGING          DT_INT
	Unk_614a4ae                    DT_INT
	TAG_VS_LIGHTING                DT_INT
	TAG_VS_AO_LIGHTING             DT_INT
	Unk_824f045                    DT_INT
	Unk_59d4467                    DT_INT
	TAG_VS_ENABLE_AMBIENT_LIGHTING DT_INT
	Unk_4ce57f1                    DT_INT
	TAG_VS_ENABLE_SHADOWS          DT_INT
	Unk_62c245b                    DT_INT
	Unk_c159e29                    DT_INT
	Unk_5a0096e                    DT_INT
	Unk_85c6e8f                    DT_INT
	Unk_4474d8f                    DT_INT
	Unk_ccf1401                    DT_INT
	Unk_ea5fbdd                    DT_INT
	Unk_bf1747b                    DT_INT
	Unk_fe04400                    DT_INT
	TAG_VS_ALPHATESTFUNC           DT_ENUM
	TAG_VS_ALPHABLENDOP            DT_ENUM
	Unk_c1aab5e                    DT_ENUM
	Unk_c1aab5f                    DT_ENUM
	TAG_VS_USES_ALPHA2             DT_INT
	Unk_ffc104e                    DT_INT
	TAG_VS_USES_NORMAL             DT_INT
	TAG_VS_USES_TANGENT            DT_INT
	TAG_VS_FLIP_NORMAL_BACKFACE    DT_INT
	TAG_VS_EARLY_DEPTH_STENCIL     DT_INT
	Unk_cddfc14                    DT_INT
	Unk_d731da9                    DT_INT
	TAG_VS_USES_INSTANCING         DT_INT
	Unk_49dc685                    DT_INT
	Unk_4ab8fbb                    DT_INT
	Unk_a3587ec                    DT_INT
	Unk_bc87fa3                    DT_INT
	Unk_3e22e69                    DT_INT
	Unk_4894c35                    DT_INT
	Unk_98f68dd                    DT_INT
	TAG_VS_USES_LIGHTMAP           DT_INT
	Unk_5897d0d                    DT_INT
	Unk_3f60c57                    DT_INT
	Unk_e1f2170                    DT_INT
	Unk_74273ac                    DT_INT
	Unk_f1ecc65                    DT_INT
	Unk_f7d4a46                    DT_ENUM
	Unk_c742a40                    DT_INT
	Unk_14516fd                    DT_INT
	Unk_97c5063                    DT_INT
	TAG_VS_VERTEX_AO               DT_INT
	Unk_109905                     DT_INT
	Unk_66a9220                    DT_INT
	Unk_8bf73b0                    DT_INT
	Unk_7a124ce                    DT_INT
	Unk_17363d1                    DT_INT
	Unk_318eef                     DT_INT
	Unk_4ecdccc                    DT_INT
	Unk_636a751                    DT_INT
	Unk_f056e4d                    DT_INT
	Unk_a4ae492                    DT_INT
	Unk_8257cf                     DT_INT
	Unk_3953748                    DT_INT
	Unk_d364ba9                    DT_INT
	Unk_1f19986                    DT_INT
	Unk_390ed8b                    DT_INT
	Unk_27c7d1e                    DT_INT
	Unk_b1023b5                    DT_INT
	Unk_9ee4396                    DT_INT
	Unk_85f21c9                    DT_INT
	Unk_73d41aa                    DT_INT
	Unk_5b5ba50                    DT_INT
	Unk_198d14                     DT_INT
	Unk_3f5eba8                    DT_INT
	Unk_4ca89f2                    DT_INT
	Unk_896a40e                    DT_INT
	Unk_c13a0c0                    DT_INT
	Unk_e5c3ecd                    DT_INT
	Unk_b4bbc51                    DT_INT
	Unk_b4fb094                    DT_INT
	Unk_3a61fd9                    DT_INT
	Unk_fe7f4ba                    DT_INT
	Unk_ce57789                    DT_INT
	Unk_2301c1c                    DT_INT
	Unk_f4251fb                    DT_INT
	Unk_f5a0fff                    DT_INT
	Unk_e5c3ece                    DT_INT
	Unk_b4bbc52                    DT_INT
	Unk_ce5778a                    DT_INT
	Unk_2301c1d                    DT_INT
	Unk_f4251fc                    DT_INT
	Unk_f5a1000                    DT_INT
	Unk_831d89e                    DT_INT
	Unk_49e93b9                    DT_INT
	Unk_375ae36                    DT_INT
	Unk_5565ba0                    DT_INT
	Unk_8fcbebc                    DT_INT
	Unk_831d89f                    DT_INT
	Unk_49e93ba                    DT_INT
	Unk_375ae37                    DT_INT
	Unk_5565ba1                    DT_INT
	Unk_8fcbebd                    DT_INT
	Unk_1808c53                    DT_INT
	Unk_8059ccb                    DT_INT
	Unk_bf32a89                    DT_INT
	Unk_14596d1                    DT_INT
	Unk_1da53ed                    DT_INT
	Unk_e279c83                    DT_ENUM
	TAG_VS_SHADER_QUALITY          DT_ENUM
	Unk_cf50d72                    DT_INT
	Unk_3b29d58                    DT_INT
}

func (t *RenderPassOptionalFieldMapDefaults) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.TAG_VS_ENABLE_SKINNING, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.TAG_VS_ENABLE_PRE_SKINNING, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.Unk_3c20112, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.Unk_37f7400, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_600caa4, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.TAG_VS_NUM_BONE_WEIGHTS, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.TAG_VS_ENABLE_FOGGING, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.Unk_614a4ae, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.TAG_VS_LIGHTING, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.TAG_VS_AO_LIGHTING, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.Unk_824f045, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.Unk_59d4467, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.TAG_VS_ENABLE_AMBIENT_LIGHTING, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.Unk_4ce57f1, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.TAG_VS_ENABLE_SHADOWS, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+60, &t.Unk_62c245b, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.Unk_c159e29, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.Unk_5a0096e, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_85c6e8f, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.Unk_4474d8f, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.Unk_ccf1401, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.Unk_ea5fbdd, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.Unk_bf1747b, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.Unk_fe04400, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.TAG_VS_ALPHATESTFUNC, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+100, &t.TAG_VS_ALPHABLENDOP, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+104, &t.Unk_c1aab5e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+108, &t.Unk_c1aab5f, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.TAG_VS_USES_ALPHA2, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+116, &t.Unk_ffc104e, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.TAG_VS_USES_NORMAL, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+124, &t.TAG_VS_USES_TANGENT, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.TAG_VS_FLIP_NORMAL_BACKFACE, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+132, &t.TAG_VS_EARLY_DEPTH_STENCIL, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+136, &t.Unk_cddfc14, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+140, &t.Unk_d731da9, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+144, &t.TAG_VS_USES_INSTANCING, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+148, &t.Unk_49dc685, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+152, &t.Unk_4ab8fbb, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+156, &t.Unk_a3587ec, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+160, &t.Unk_bc87fa3, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+164, &t.Unk_3e22e69, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+168, &t.Unk_4894c35, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+172, &t.Unk_98f68dd, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+176, &t.TAG_VS_USES_LIGHTMAP, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+180, &t.Unk_5897d0d, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+184, &t.Unk_3f60c57, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+188, &t.Unk_e1f2170, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+192, &t.Unk_74273ac, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+196, &t.Unk_f1ecc65, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+200, &t.Unk_f7d4a46, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+204, &t.Unk_c742a40, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+208, &t.Unk_14516fd, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+212, &t.Unk_97c5063, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+216, &t.TAG_VS_VERTEX_AO, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+220, &t.Unk_109905, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+224, &t.Unk_66a9220, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+228, &t.Unk_8bf73b0, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+232, &t.Unk_7a124ce, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+236, &t.Unk_17363d1, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+240, &t.Unk_318eef, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+244, &t.Unk_4ecdccc, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+248, &t.Unk_636a751, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+252, &t.Unk_f056e4d, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+256, &t.Unk_a4ae492, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+260, &t.Unk_8257cf, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+264, &t.Unk_3953748, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+268, &t.Unk_d364ba9, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+272, &t.Unk_1f19986, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+276, &t.Unk_390ed8b, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+280, &t.Unk_27c7d1e, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+284, &t.Unk_b1023b5, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+288, &t.Unk_9ee4396, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+292, &t.Unk_85f21c9, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+296, &t.Unk_73d41aa, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+300, &t.Unk_5b5ba50, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+304, &t.Unk_198d14, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+308, &t.Unk_3f5eba8, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+312, &t.Unk_4ca89f2, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+316, &t.Unk_896a40e, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+320, &t.Unk_c13a0c0, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+324, &t.Unk_e5c3ecd, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+328, &t.Unk_b4bbc51, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+332, &t.Unk_b4fb094, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+336, &t.Unk_3a61fd9, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+340, &t.Unk_fe7f4ba, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+344, &t.Unk_ce57789, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+348, &t.Unk_2301c1c, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+352, &t.Unk_f4251fb, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+356, &t.Unk_f5a0fff, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+360, &t.Unk_e5c3ece, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+364, &t.Unk_b4bbc52, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+368, &t.Unk_ce5778a, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+372, &t.Unk_2301c1d, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+376, &t.Unk_f4251fc, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+380, &t.Unk_f5a1000, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+384, &t.Unk_831d89e, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+388, &t.Unk_49e93b9, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+392, &t.Unk_375ae36, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+396, &t.Unk_5565ba0, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+400, &t.Unk_8fcbebc, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+404, &t.Unk_831d89f, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+408, &t.Unk_49e93ba, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+412, &t.Unk_375ae37, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+416, &t.Unk_5565ba1, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+420, &t.Unk_8fcbebd, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+424, &t.Unk_1808c53, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+428, &t.Unk_8059ccb, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+432, &t.Unk_bf32a89, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+436, &t.Unk_14596d1, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+440, &t.Unk_1da53ed, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+444, &t.Unk_e279c83, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+448, &t.TAG_VS_SHADER_QUALITY, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+452, &t.Unk_cf50d72, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+456, &t.Unk_3b29d58, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+460, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *RenderPassOptionalFieldMapDefaults) Walk(cb WalkCallback, d ...any) {
	cb.Do("TAG_VS_ENABLE_SKINNING", &t.TAG_VS_ENABLE_SKINNING, d...)
	cb.Do("TAG_VS_ENABLE_PRE_SKINNING", &t.TAG_VS_ENABLE_PRE_SKINNING, d...)
	cb.Do("Unk_3c20112", &t.Unk_3c20112, d...)
	cb.Do("Unk_37f7400", &t.Unk_37f7400, d...)
	cb.Do("Unk_600caa4", &t.Unk_600caa4, d...)
	cb.Do("TAG_VS_NUM_BONE_WEIGHTS", &t.TAG_VS_NUM_BONE_WEIGHTS, d...)
	cb.Do("TAG_VS_ENABLE_FOGGING", &t.TAG_VS_ENABLE_FOGGING, d...)
	cb.Do("Unk_614a4ae", &t.Unk_614a4ae, d...)
	cb.Do("TAG_VS_LIGHTING", &t.TAG_VS_LIGHTING, d...)
	cb.Do("TAG_VS_AO_LIGHTING", &t.TAG_VS_AO_LIGHTING, d...)
	cb.Do("Unk_824f045", &t.Unk_824f045, d...)
	cb.Do("Unk_59d4467", &t.Unk_59d4467, d...)
	cb.Do("TAG_VS_ENABLE_AMBIENT_LIGHTING", &t.TAG_VS_ENABLE_AMBIENT_LIGHTING, d...)
	cb.Do("Unk_4ce57f1", &t.Unk_4ce57f1, d...)
	cb.Do("TAG_VS_ENABLE_SHADOWS", &t.TAG_VS_ENABLE_SHADOWS, d...)
	cb.Do("Unk_62c245b", &t.Unk_62c245b, d...)
	cb.Do("Unk_c159e29", &t.Unk_c159e29, d...)
	cb.Do("Unk_5a0096e", &t.Unk_5a0096e, d...)
	cb.Do("Unk_85c6e8f", &t.Unk_85c6e8f, d...)
	cb.Do("Unk_4474d8f", &t.Unk_4474d8f, d...)
	cb.Do("Unk_ccf1401", &t.Unk_ccf1401, d...)
	cb.Do("Unk_ea5fbdd", &t.Unk_ea5fbdd, d...)
	cb.Do("Unk_bf1747b", &t.Unk_bf1747b, d...)
	cb.Do("Unk_fe04400", &t.Unk_fe04400, d...)
	cb.Do("TAG_VS_ALPHATESTFUNC", &t.TAG_VS_ALPHATESTFUNC, d...)
	cb.Do("TAG_VS_ALPHABLENDOP", &t.TAG_VS_ALPHABLENDOP, d...)
	cb.Do("Unk_c1aab5e", &t.Unk_c1aab5e, d...)
	cb.Do("Unk_c1aab5f", &t.Unk_c1aab5f, d...)
	cb.Do("TAG_VS_USES_ALPHA2", &t.TAG_VS_USES_ALPHA2, d...)
	cb.Do("Unk_ffc104e", &t.Unk_ffc104e, d...)
	cb.Do("TAG_VS_USES_NORMAL", &t.TAG_VS_USES_NORMAL, d...)
	cb.Do("TAG_VS_USES_TANGENT", &t.TAG_VS_USES_TANGENT, d...)
	cb.Do("TAG_VS_FLIP_NORMAL_BACKFACE", &t.TAG_VS_FLIP_NORMAL_BACKFACE, d...)
	cb.Do("TAG_VS_EARLY_DEPTH_STENCIL", &t.TAG_VS_EARLY_DEPTH_STENCIL, d...)
	cb.Do("Unk_cddfc14", &t.Unk_cddfc14, d...)
	cb.Do("Unk_d731da9", &t.Unk_d731da9, d...)
	cb.Do("TAG_VS_USES_INSTANCING", &t.TAG_VS_USES_INSTANCING, d...)
	cb.Do("Unk_49dc685", &t.Unk_49dc685, d...)
	cb.Do("Unk_4ab8fbb", &t.Unk_4ab8fbb, d...)
	cb.Do("Unk_a3587ec", &t.Unk_a3587ec, d...)
	cb.Do("Unk_bc87fa3", &t.Unk_bc87fa3, d...)
	cb.Do("Unk_3e22e69", &t.Unk_3e22e69, d...)
	cb.Do("Unk_4894c35", &t.Unk_4894c35, d...)
	cb.Do("Unk_98f68dd", &t.Unk_98f68dd, d...)
	cb.Do("TAG_VS_USES_LIGHTMAP", &t.TAG_VS_USES_LIGHTMAP, d...)
	cb.Do("Unk_5897d0d", &t.Unk_5897d0d, d...)
	cb.Do("Unk_3f60c57", &t.Unk_3f60c57, d...)
	cb.Do("Unk_e1f2170", &t.Unk_e1f2170, d...)
	cb.Do("Unk_74273ac", &t.Unk_74273ac, d...)
	cb.Do("Unk_f1ecc65", &t.Unk_f1ecc65, d...)
	cb.Do("Unk_f7d4a46", &t.Unk_f7d4a46, d...)
	cb.Do("Unk_c742a40", &t.Unk_c742a40, d...)
	cb.Do("Unk_14516fd", &t.Unk_14516fd, d...)
	cb.Do("Unk_97c5063", &t.Unk_97c5063, d...)
	cb.Do("TAG_VS_VERTEX_AO", &t.TAG_VS_VERTEX_AO, d...)
	cb.Do("Unk_109905", &t.Unk_109905, d...)
	cb.Do("Unk_66a9220", &t.Unk_66a9220, d...)
	cb.Do("Unk_8bf73b0", &t.Unk_8bf73b0, d...)
	cb.Do("Unk_7a124ce", &t.Unk_7a124ce, d...)
	cb.Do("Unk_17363d1", &t.Unk_17363d1, d...)
	cb.Do("Unk_318eef", &t.Unk_318eef, d...)
	cb.Do("Unk_4ecdccc", &t.Unk_4ecdccc, d...)
	cb.Do("Unk_636a751", &t.Unk_636a751, d...)
	cb.Do("Unk_f056e4d", &t.Unk_f056e4d, d...)
	cb.Do("Unk_a4ae492", &t.Unk_a4ae492, d...)
	cb.Do("Unk_8257cf", &t.Unk_8257cf, d...)
	cb.Do("Unk_3953748", &t.Unk_3953748, d...)
	cb.Do("Unk_d364ba9", &t.Unk_d364ba9, d...)
	cb.Do("Unk_1f19986", &t.Unk_1f19986, d...)
	cb.Do("Unk_390ed8b", &t.Unk_390ed8b, d...)
	cb.Do("Unk_27c7d1e", &t.Unk_27c7d1e, d...)
	cb.Do("Unk_b1023b5", &t.Unk_b1023b5, d...)
	cb.Do("Unk_9ee4396", &t.Unk_9ee4396, d...)
	cb.Do("Unk_85f21c9", &t.Unk_85f21c9, d...)
	cb.Do("Unk_73d41aa", &t.Unk_73d41aa, d...)
	cb.Do("Unk_5b5ba50", &t.Unk_5b5ba50, d...)
	cb.Do("Unk_198d14", &t.Unk_198d14, d...)
	cb.Do("Unk_3f5eba8", &t.Unk_3f5eba8, d...)
	cb.Do("Unk_4ca89f2", &t.Unk_4ca89f2, d...)
	cb.Do("Unk_896a40e", &t.Unk_896a40e, d...)
	cb.Do("Unk_c13a0c0", &t.Unk_c13a0c0, d...)
	cb.Do("Unk_e5c3ecd", &t.Unk_e5c3ecd, d...)
	cb.Do("Unk_b4bbc51", &t.Unk_b4bbc51, d...)
	cb.Do("Unk_b4fb094", &t.Unk_b4fb094, d...)
	cb.Do("Unk_3a61fd9", &t.Unk_3a61fd9, d...)
	cb.Do("Unk_fe7f4ba", &t.Unk_fe7f4ba, d...)
	cb.Do("Unk_ce57789", &t.Unk_ce57789, d...)
	cb.Do("Unk_2301c1c", &t.Unk_2301c1c, d...)
	cb.Do("Unk_f4251fb", &t.Unk_f4251fb, d...)
	cb.Do("Unk_f5a0fff", &t.Unk_f5a0fff, d...)
	cb.Do("Unk_e5c3ece", &t.Unk_e5c3ece, d...)
	cb.Do("Unk_b4bbc52", &t.Unk_b4bbc52, d...)
	cb.Do("Unk_ce5778a", &t.Unk_ce5778a, d...)
	cb.Do("Unk_2301c1d", &t.Unk_2301c1d, d...)
	cb.Do("Unk_f4251fc", &t.Unk_f4251fc, d...)
	cb.Do("Unk_f5a1000", &t.Unk_f5a1000, d...)
	cb.Do("Unk_831d89e", &t.Unk_831d89e, d...)
	cb.Do("Unk_49e93b9", &t.Unk_49e93b9, d...)
	cb.Do("Unk_375ae36", &t.Unk_375ae36, d...)
	cb.Do("Unk_5565ba0", &t.Unk_5565ba0, d...)
	cb.Do("Unk_8fcbebc", &t.Unk_8fcbebc, d...)
	cb.Do("Unk_831d89f", &t.Unk_831d89f, d...)
	cb.Do("Unk_49e93ba", &t.Unk_49e93ba, d...)
	cb.Do("Unk_375ae37", &t.Unk_375ae37, d...)
	cb.Do("Unk_5565ba1", &t.Unk_5565ba1, d...)
	cb.Do("Unk_8fcbebd", &t.Unk_8fcbebd, d...)
	cb.Do("Unk_1808c53", &t.Unk_1808c53, d...)
	cb.Do("Unk_8059ccb", &t.Unk_8059ccb, d...)
	cb.Do("Unk_bf32a89", &t.Unk_bf32a89, d...)
	cb.Do("Unk_14596d1", &t.Unk_14596d1, d...)
	cb.Do("Unk_1da53ed", &t.Unk_1da53ed, d...)
	cb.Do("Unk_e279c83", &t.Unk_e279c83, d...)
	cb.Do("TAG_VS_SHADER_QUALITY", &t.TAG_VS_SHADER_QUALITY, d...)
	cb.Do("Unk_cf50d72", &t.Unk_cf50d72, d...)
	cb.Do("Unk_3b29d58", &t.Unk_3b29d58, d...)
}

type EffectGroupPreloadHelper struct {
	SnoEffectGroup DT_SNO
	Unk_34956e3    DT_INT
	Unk_7eb10c0    SerialDataInfo
	Unk_9ffef5e    SerialDataInfo
	Unk_82f1fc7    SerialDataInfo
}

func (t *EffectGroupPreloadHelper) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoEffectGroup, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.Unk_34956e3, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.Unk_7eb10c0, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_9ffef5e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_82f1fc7, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *EffectGroupPreloadHelper) Walk(cb WalkCallback, d ...any) {
	cb.Do("SnoEffectGroup", &t.SnoEffectGroup, d...)
	cb.Do("Unk_34956e3", &t.Unk_34956e3, d...)
	cb.Do("Unk_7eb10c0", &t.Unk_7eb10c0, d...)
	cb.Do("Unk_9ffef5e", &t.Unk_9ffef5e, d...)
	cb.Do("Unk_82f1fc7", &t.Unk_82f1fc7, d...)
}

type BoneStructureInfoData struct {
	PtBoneStructureInfo DT_VARIABLEARRAY[*BoneStructureInfo]
}

func (t *BoneStructureInfoData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.PtBoneStructureInfo, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *BoneStructureInfoData) Walk(cb WalkCallback, d ...any) {
	cb.Do("PtBoneStructureInfo", &t.PtBoneStructureInfo, d...)
}

type RopeEffectMessageACDToPlace struct {
	THeader           RequiredMessageHeader
	SnoRope           DT_SNO
	AnnFrom           DT_ACD_NETWORK_NAME
	EPositionFrom     DT_ENUM
	TPlaceTo          SharedServerWorldPlace
	BIgnoreOwnerAlpha DT_INT
}

func (t *RopeEffectMessageACDToPlace) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoRope, r, &Options{
		Flags: 1,
		Group: 32,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.AnnFrom, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.EPositionFrom, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.TPlaceTo, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.BIgnoreOwnerAlpha, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+56, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *RopeEffectMessageACDToPlace) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("SnoRope", &t.SnoRope, d...)
	cb.Do("AnnFrom", &t.AnnFrom, d...)
	cb.Do("EPositionFrom", &t.EPositionFrom, d...)
	cb.Do("TPlaceTo", &t.TPlaceTo, d...)
	cb.Do("BIgnoreOwnerAlpha", &t.BIgnoreOwnerAlpha, d...)
}

type TriggerEventAddBaseMountLoadout struct {
	// Inherits TriggerEvent
	// Inherits PolymorphicBase
	DwType          DT_UINT
	DwPad           DT_UINT
	TConditions     TriggerConditions
	FGenerated      DT_INT
	Unk_6cba752     DT_INT
	DwParentActorID DT_UINT
}

func (t *TriggerEventAddBaseMountLoadout) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.FGenerated, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_6cba752, r, &Options{Flags: 16}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.DwParentActorID, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+80, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TriggerEventAddBaseMountLoadout) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("TConditions", &t.TConditions, d...)
	cb.Do("FGenerated", &t.FGenerated, d...)
	cb.Do("Unk_6cba752", &t.Unk_6cba752, d...)
	cb.Do("DwParentActorID", &t.DwParentActorID, d...)
}

type TriggerEventSubObjectVisibility struct {
	// Inherits TriggerEvent
	// Inherits PolymorphicBase
	DwType          DT_UINT
	DwPad           DT_UINT
	TConditions     TriggerConditions
	FGenerated      DT_INT
	Unk_6cba752     DT_INT
	DwParentActorID DT_UINT
	SzSubObjectName DT_UINT
	BVisible        DT_INT
}

func (t *TriggerEventSubObjectVisibility) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.FGenerated, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_6cba752, r, &Options{Flags: 16}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.DwParentActorID, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.SzSubObjectName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.BVisible, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+88, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TriggerEventSubObjectVisibility) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("TConditions", &t.TConditions, d...)
	cb.Do("FGenerated", &t.FGenerated, d...)
	cb.Do("Unk_6cba752", &t.Unk_6cba752, d...)
	cb.Do("DwParentActorID", &t.DwParentActorID, d...)
	cb.Do("SzSubObjectName", &t.SzSubObjectName, d...)
	cb.Do("BVisible", &t.BVisible, d...)
}

type PvPChestGizmoData struct {
	// Inherits ChestGizmoData
	// Inherits NamedGizmoData
	// Inherits ActorGizmoData
	// Inherits PolymorphicBase
	DwType                            DT_UINT
	FDisableNonFriendlyOperation      DT_INT
	FWalkToCenter                     DT_INT
	FGizmoStartsDisabled              DT_INT
	FUseStringListName                DT_INT
	FForceMinimapIcon                 DT_INT
	FlOperationRadius                 DT_FLOAT
	Unk_d0b1df5                       DT_FLOAT
	FlGizmoUseTime                    DT_FLOAT
	SnoChannelingEffect               DT_SNO
	Unk_2767229                       DT_INT
	FGizmoShowProgressBar             DT_INT
	Unk_6d9ebe1                       DT_INT
	Unk_5456245                       DT_INT
	Unk_af5815a                       DT_INT
	SnoOnClickEffect                  DT_SNO
	SnoPickedUpEffect                 DT_SNO
	SnoDropOnGroundEffect             DT_SNO
	TConditionData                    GizmoConditionData
	SnoPowerOperator                  DT_SNO
	SnoPowerOperate                   DT_SNO
	SnoPowerOperatorActive            DT_SNO
	SnoPowerOperateActive             DT_SNO
	Unk_359810e                       DT_INT
	NCooldown                         DT_UINT
	Unk_9c8478e                       DT_UINT
	Unk_d45ed2d                       DT_INT
	Unk_f6b20b7                       DT_INT
	Unk_54513b8                       DT_INT
	Unk_fd1f378                       DT_UINT
	HGizmoOperateFlavorTextMsgLabel   DT_UINT
	HGizmoOperateDescriptionMsgLabel  DT_UINT
	FlGizmoOperateOffset              DT_FLOAT
	Unk_ab58cd3                       DT_ENUM
	Unk_91a3966                       DT_UINT
	HGizmoChannelingLabel             DT_UINT
	Unk_4be4371                       DT_INT
	SnoTreasureClass                  DT_SNO
	TLockData                         LockingGizmoData
	FChestRemovesCollisionOnOperation DT_INT
	FChestOperatesOnProximity         DT_INT
	FChestLight                       DT_INT
	Unk_51b0c11                       DT_INT
	Unk_6b4a81d                       DT_FLOAT
	DwPad                             DT_UINT
	Unk_58318b6                       DT_FLOAT
}

func (t *PvPChestGizmoData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.FDisableNonFriendlyOperation, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.FWalkToCenter, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.FGizmoStartsDisabled, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.FUseStringListName, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.FForceMinimapIcon, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.FlOperationRadius, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.Unk_d0b1df5, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.FlGizmoUseTime, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.SnoChannelingEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.Unk_2767229, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.FGizmoShowProgressBar, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+60, &t.Unk_6d9ebe1, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.Unk_5456245, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.Unk_af5815a, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.SnoOnClickEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.SnoPickedUpEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.SnoDropOnGroundEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.TConditionData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.SnoPowerOperator, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.SnoPowerOperate, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.SnoPowerOperatorActive, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+100, &t.SnoPowerOperateActive, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+104, &t.Unk_359810e, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+108, &t.NCooldown, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.Unk_9c8478e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+116, &t.Unk_d45ed2d, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.Unk_f6b20b7, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+124, &t.Unk_54513b8, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.Unk_fd1f378, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+132, &t.HGizmoOperateFlavorTextMsgLabel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+136, &t.HGizmoOperateDescriptionMsgLabel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+140, &t.FlGizmoOperateOffset, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+144, &t.Unk_ab58cd3, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+148, &t.Unk_91a3966, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+152, &t.HGizmoChannelingLabel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+156, &t.Unk_4be4371, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+160, &t.SnoTreasureClass, r, &Options{
		Flags: 1,
		Group: 52,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+164, &t.TLockData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+200, &t.FChestRemovesCollisionOnOperation, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+204, &t.FChestOperatesOnProximity, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+208, &t.FChestLight, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+212, &t.Unk_51b0c11, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+216, &t.Unk_6b4a81d, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+220, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+224, &t.Unk_58318b6, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+232, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PvPChestGizmoData) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("FDisableNonFriendlyOperation", &t.FDisableNonFriendlyOperation, d...)
	cb.Do("FWalkToCenter", &t.FWalkToCenter, d...)
	cb.Do("FGizmoStartsDisabled", &t.FGizmoStartsDisabled, d...)
	cb.Do("FUseStringListName", &t.FUseStringListName, d...)
	cb.Do("FForceMinimapIcon", &t.FForceMinimapIcon, d...)
	cb.Do("FlOperationRadius", &t.FlOperationRadius, d...)
	cb.Do("Unk_d0b1df5", &t.Unk_d0b1df5, d...)
	cb.Do("FlGizmoUseTime", &t.FlGizmoUseTime, d...)
	cb.Do("SnoChannelingEffect", &t.SnoChannelingEffect, d...)
	cb.Do("Unk_2767229", &t.Unk_2767229, d...)
	cb.Do("FGizmoShowProgressBar", &t.FGizmoShowProgressBar, d...)
	cb.Do("Unk_6d9ebe1", &t.Unk_6d9ebe1, d...)
	cb.Do("Unk_5456245", &t.Unk_5456245, d...)
	cb.Do("Unk_af5815a", &t.Unk_af5815a, d...)
	cb.Do("SnoOnClickEffect", &t.SnoOnClickEffect, d...)
	cb.Do("SnoPickedUpEffect", &t.SnoPickedUpEffect, d...)
	cb.Do("SnoDropOnGroundEffect", &t.SnoDropOnGroundEffect, d...)
	cb.Do("TConditionData", &t.TConditionData, d...)
	cb.Do("SnoPowerOperator", &t.SnoPowerOperator, d...)
	cb.Do("SnoPowerOperate", &t.SnoPowerOperate, d...)
	cb.Do("SnoPowerOperatorActive", &t.SnoPowerOperatorActive, d...)
	cb.Do("SnoPowerOperateActive", &t.SnoPowerOperateActive, d...)
	cb.Do("Unk_359810e", &t.Unk_359810e, d...)
	cb.Do("NCooldown", &t.NCooldown, d...)
	cb.Do("Unk_9c8478e", &t.Unk_9c8478e, d...)
	cb.Do("Unk_d45ed2d", &t.Unk_d45ed2d, d...)
	cb.Do("Unk_f6b20b7", &t.Unk_f6b20b7, d...)
	cb.Do("Unk_54513b8", &t.Unk_54513b8, d...)
	cb.Do("Unk_fd1f378", &t.Unk_fd1f378, d...)
	cb.Do("HGizmoOperateFlavorTextMsgLabel", &t.HGizmoOperateFlavorTextMsgLabel, d...)
	cb.Do("HGizmoOperateDescriptionMsgLabel", &t.HGizmoOperateDescriptionMsgLabel, d...)
	cb.Do("FlGizmoOperateOffset", &t.FlGizmoOperateOffset, d...)
	cb.Do("Unk_ab58cd3", &t.Unk_ab58cd3, d...)
	cb.Do("Unk_91a3966", &t.Unk_91a3966, d...)
	cb.Do("HGizmoChannelingLabel", &t.HGizmoChannelingLabel, d...)
	cb.Do("Unk_4be4371", &t.Unk_4be4371, d...)
	cb.Do("SnoTreasureClass", &t.SnoTreasureClass, d...)
	cb.Do("TLockData", &t.TLockData, d...)
	cb.Do("FChestRemovesCollisionOnOperation", &t.FChestRemovesCollisionOnOperation, d...)
	cb.Do("FChestOperatesOnProximity", &t.FChestOperatesOnProximity, d...)
	cb.Do("FChestLight", &t.FChestLight, d...)
	cb.Do("Unk_51b0c11", &t.Unk_51b0c11, d...)
	cb.Do("Unk_6b4a81d", &t.Unk_6b4a81d, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("Unk_58318b6", &t.Unk_58318b6, d...)
}

type UIScrollableTextStyleOptionalFieldMapDefaults struct {
	EScrollableTextStyle DT_ENUM
	SzIDScrollbar        DT_CSTRING[*DT_BYTE]
}

func (t *UIScrollableTextStyleOptionalFieldMapDefaults) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.EScrollableTextStyle, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.SzIDScrollbar, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *UIScrollableTextStyleOptionalFieldMapDefaults) Walk(cb WalkCallback, d ...any) {
	cb.Do("EScrollableTextStyle", &t.EScrollableTextStyle, d...)
	cb.Do("SzIDScrollbar", &t.SzIDScrollbar, d...)
}

type TriggerEventHideWarpUI struct {
	// Inherits TriggerEvent
	// Inherits PolymorphicBase
	DwType          DT_UINT
	DwPad           DT_UINT
	TConditions     TriggerConditions
	FGenerated      DT_INT
	Unk_6cba752     DT_INT
	DwParentActorID DT_UINT
	SnoUI           DT_SNO
}

func (t *TriggerEventHideWarpUI) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.FGenerated, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_6cba752, r, &Options{Flags: 16}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.DwParentActorID, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.SnoUI, r, &Options{
		Flags: 1,
		Group: 46,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+88, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TriggerEventHideWarpUI) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("TConditions", &t.TConditions, d...)
	cb.Do("FGenerated", &t.FGenerated, d...)
	cb.Do("Unk_6cba752", &t.Unk_6cba752, d...)
	cb.Do("DwParentActorID", &t.DwParentActorID, d...)
	cb.Do("SnoUI", &t.SnoUI, d...)
}

type MusicDefinition struct {
	TPlayEvent              DT_SNO
	DwFlags                 DT_UINT
	FlCooldownDuration      DT_FLOAT
	FlMinimumDuration       DT_FLOAT
	PtStateValues           DT_VARIABLEARRAY[*WwiseSwitchValue]
	PtGameParameters        DT_VARIABLEARRAY[*WwiseGameParameter]
	TDefaultEventTransition MusicTransition
}

func (t *MusicDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.TPlayEvent, r, &Options{
		Flags: 1,
		Group: 40,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.FlCooldownDuration, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.FlMinimumDuration, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.PtStateValues, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.PtGameParameters, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.TDefaultEventTransition, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+72, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *MusicDefinition) Walk(cb WalkCallback, d ...any) {
	cb.Do("TPlayEvent", &t.TPlayEvent, d...)
	cb.Do("DwFlags", &t.DwFlags, d...)
	cb.Do("FlCooldownDuration", &t.FlCooldownDuration, d...)
	cb.Do("FlMinimumDuration", &t.FlMinimumDuration, d...)
	cb.Do("PtStateValues", &t.PtStateValues, d...)
	cb.Do("PtGameParameters", &t.PtGameParameters, d...)
	cb.Do("TDefaultEventTransition", &t.TDefaultEventTransition, d...)
}

type Type_44575aca struct {
	// Inherits TriggerEventRangedDuration
	// Inherits TriggerEvent
	// Inherits PolymorphicBase
	DwType           DT_UINT
	TConditions      TriggerConditions
	FGenerated       DT_INT
	Unk_6cba752      DT_INT
	DwParentActorID  DT_UINT
	TDuration        DT_FLOAT
	DwTriggerFlags   DT_UINT
	DwTriggerFlagsEx DT_UINT
	TCleanup         TriggerCleanup
	Unk_49e9257      DT_INT
	Unk_5490979      DT_INT
	DwPad            DT_UINT
	Unk_279aa5a      DT_INT
	DwActorID        DT_UINT
	Unk_154cedd      DT_FLOAT
}

func (t *Type_44575aca) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.FGenerated, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_6cba752, r, &Options{Flags: 16}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.DwParentActorID, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.TDuration, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.DwTriggerFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.DwTriggerFlagsEx, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.TCleanup, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+116, &t.Unk_49e9257, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.Unk_5490979, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+124, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.Unk_279aa5a, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+132, &t.DwActorID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+136, &t.Unk_154cedd, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+144, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_44575aca) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("TConditions", &t.TConditions, d...)
	cb.Do("FGenerated", &t.FGenerated, d...)
	cb.Do("Unk_6cba752", &t.Unk_6cba752, d...)
	cb.Do("DwParentActorID", &t.DwParentActorID, d...)
	cb.Do("TDuration", &t.TDuration, d...)
	cb.Do("DwTriggerFlags", &t.DwTriggerFlags, d...)
	cb.Do("DwTriggerFlagsEx", &t.DwTriggerFlagsEx, d...)
	cb.Do("TCleanup", &t.TCleanup, d...)
	cb.Do("Unk_49e9257", &t.Unk_49e9257, d...)
	cb.Do("Unk_5490979", &t.Unk_5490979, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("Unk_279aa5a", &t.Unk_279aa5a, d...)
	cb.Do("DwActorID", &t.DwActorID, d...)
	cb.Do("Unk_154cedd", &t.Unk_154cedd, d...)
}

type PlayerCurrentWorldSubcondition struct {
	// Inherits Subcondition
	// Inherits PolymorphicBase
	DwType   DT_UINT
	BNegate  DT_INT
	DwPad    DT_UINT
	SnoWorld DT_SNO
}

func (t *PlayerCurrentWorldSubcondition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BNegate, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SnoWorld, r, &Options{
		Flags: 513,
		Group: 48,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PlayerCurrentWorldSubcondition) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("BNegate", &t.BNegate, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("SnoWorld", &t.SnoWorld, d...)
}

type ProximityAdjustment struct {
	SnonameObject    DT_SNO_NAME
	SnoAppearance    DT_SNO
	AWanderPlane     DT_FLOAT
	FlChanceOverride DT_FLOAT
	FlInnerRadius    DT_FLOAT
	FlOuterRadius    DT_FLOAT
}

func (t *ProximityAdjustment) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnonameObject, r, &Options{Flags: 513}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.SnoAppearance, r, &Options{
		Flags: 512,
		Group: 9,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.AWanderPlane, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.FlChanceOverride, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.FlInnerRadius, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.FlOuterRadius, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+28, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ProximityAdjustment) Walk(cb WalkCallback, d ...any) {
	cb.Do("SnonameObject", &t.SnonameObject, d...)
	cb.Do("SnoAppearance", &t.SnoAppearance, d...)
	cb.Do("AWanderPlane", &t.AWanderPlane, d...)
	cb.Do("FlChanceOverride", &t.FlChanceOverride, d...)
	cb.Do("FlInnerRadius", &t.FlInnerRadius, d...)
	cb.Do("FlOuterRadius", &t.FlOuterRadius, d...)
}

type VisualEquipment struct {
	TVisualItem DT_FIXEDARRAY[*VisualItem]
}

func (t *VisualEquipment) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.TVisualItem, r, &Options{
		ArrayLength: 15,
		Flags:       1,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+120, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *VisualEquipment) Walk(cb WalkCallback, d ...any) {
	cb.Do("TVisualItem", &t.TVisualItem, d...)
}

type TraversalGizmoData struct {
	// Inherits NamedGizmoData
	// Inherits ActorGizmoData
	// Inherits PolymorphicBase
	DwType                           DT_UINT
	DwPad                            DT_UINT
	FDisableNonFriendlyOperation     DT_INT
	FWalkToCenter                    DT_INT
	FGizmoStartsDisabled             DT_INT
	FUseStringListName               DT_INT
	FForceMinimapIcon                DT_INT
	FlOperationRadius                DT_FLOAT
	Unk_d0b1df5                      DT_FLOAT
	FlGizmoUseTime                   DT_FLOAT
	SnoChannelingEffect              DT_SNO
	Unk_2767229                      DT_INT
	FGizmoShowProgressBar            DT_INT
	Unk_6d9ebe1                      DT_INT
	Unk_5456245                      DT_INT
	Unk_af5815a                      DT_INT
	SnoOnClickEffect                 DT_SNO
	SnoPickedUpEffect                DT_SNO
	SnoDropOnGroundEffect            DT_SNO
	TConditionData                   GizmoConditionData
	SnoPowerOperator                 DT_SNO
	SnoPowerOperate                  DT_SNO
	SnoPowerOperatorActive           DT_SNO
	SnoPowerOperateActive            DT_SNO
	Unk_359810e                      DT_INT
	NCooldown                        DT_UINT
	Unk_9c8478e                      DT_UINT
	Unk_d45ed2d                      DT_INT
	Unk_f6b20b7                      DT_INT
	Unk_54513b8                      DT_INT
	Unk_fd1f378                      DT_UINT
	HGizmoOperateFlavorTextMsgLabel  DT_UINT
	HGizmoOperateDescriptionMsgLabel DT_UINT
	FlGizmoOperateOffset             DT_FLOAT
	Unk_ab58cd3                      DT_ENUM
	Unk_91a3966                      DT_UINT
	HGizmoChannelingLabel            DT_UINT
	Unk_4be4371                      DT_INT
	TTraversalData                   TraversalInstanceData
	BAmbientInteract                 DT_INT
	Unk_33bc35b                      DT_FLOAT
}

func (t *TraversalGizmoData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.FDisableNonFriendlyOperation, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.FWalkToCenter, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.FGizmoStartsDisabled, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.FUseStringListName, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.FForceMinimapIcon, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.FlOperationRadius, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.Unk_d0b1df5, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.FlGizmoUseTime, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.SnoChannelingEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.Unk_2767229, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.FGizmoShowProgressBar, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+60, &t.Unk_6d9ebe1, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.Unk_5456245, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.Unk_af5815a, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.SnoOnClickEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.SnoPickedUpEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.SnoDropOnGroundEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.TConditionData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.SnoPowerOperator, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.SnoPowerOperate, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.SnoPowerOperatorActive, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+100, &t.SnoPowerOperateActive, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+104, &t.Unk_359810e, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+108, &t.NCooldown, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.Unk_9c8478e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+116, &t.Unk_d45ed2d, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.Unk_f6b20b7, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+124, &t.Unk_54513b8, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.Unk_fd1f378, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+132, &t.HGizmoOperateFlavorTextMsgLabel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+136, &t.HGizmoOperateDescriptionMsgLabel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+140, &t.FlGizmoOperateOffset, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+144, &t.Unk_ab58cd3, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+148, &t.Unk_91a3966, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+152, &t.HGizmoChannelingLabel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+156, &t.Unk_4be4371, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+160, &t.TTraversalData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+172, &t.BAmbientInteract, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+176, &t.Unk_33bc35b, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+184, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TraversalGizmoData) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("FDisableNonFriendlyOperation", &t.FDisableNonFriendlyOperation, d...)
	cb.Do("FWalkToCenter", &t.FWalkToCenter, d...)
	cb.Do("FGizmoStartsDisabled", &t.FGizmoStartsDisabled, d...)
	cb.Do("FUseStringListName", &t.FUseStringListName, d...)
	cb.Do("FForceMinimapIcon", &t.FForceMinimapIcon, d...)
	cb.Do("FlOperationRadius", &t.FlOperationRadius, d...)
	cb.Do("Unk_d0b1df5", &t.Unk_d0b1df5, d...)
	cb.Do("FlGizmoUseTime", &t.FlGizmoUseTime, d...)
	cb.Do("SnoChannelingEffect", &t.SnoChannelingEffect, d...)
	cb.Do("Unk_2767229", &t.Unk_2767229, d...)
	cb.Do("FGizmoShowProgressBar", &t.FGizmoShowProgressBar, d...)
	cb.Do("Unk_6d9ebe1", &t.Unk_6d9ebe1, d...)
	cb.Do("Unk_5456245", &t.Unk_5456245, d...)
	cb.Do("Unk_af5815a", &t.Unk_af5815a, d...)
	cb.Do("SnoOnClickEffect", &t.SnoOnClickEffect, d...)
	cb.Do("SnoPickedUpEffect", &t.SnoPickedUpEffect, d...)
	cb.Do("SnoDropOnGroundEffect", &t.SnoDropOnGroundEffect, d...)
	cb.Do("TConditionData", &t.TConditionData, d...)
	cb.Do("SnoPowerOperator", &t.SnoPowerOperator, d...)
	cb.Do("SnoPowerOperate", &t.SnoPowerOperate, d...)
	cb.Do("SnoPowerOperatorActive", &t.SnoPowerOperatorActive, d...)
	cb.Do("SnoPowerOperateActive", &t.SnoPowerOperateActive, d...)
	cb.Do("Unk_359810e", &t.Unk_359810e, d...)
	cb.Do("NCooldown", &t.NCooldown, d...)
	cb.Do("Unk_9c8478e", &t.Unk_9c8478e, d...)
	cb.Do("Unk_d45ed2d", &t.Unk_d45ed2d, d...)
	cb.Do("Unk_f6b20b7", &t.Unk_f6b20b7, d...)
	cb.Do("Unk_54513b8", &t.Unk_54513b8, d...)
	cb.Do("Unk_fd1f378", &t.Unk_fd1f378, d...)
	cb.Do("HGizmoOperateFlavorTextMsgLabel", &t.HGizmoOperateFlavorTextMsgLabel, d...)
	cb.Do("HGizmoOperateDescriptionMsgLabel", &t.HGizmoOperateDescriptionMsgLabel, d...)
	cb.Do("FlGizmoOperateOffset", &t.FlGizmoOperateOffset, d...)
	cb.Do("Unk_ab58cd3", &t.Unk_ab58cd3, d...)
	cb.Do("Unk_91a3966", &t.Unk_91a3966, d...)
	cb.Do("HGizmoChannelingLabel", &t.HGizmoChannelingLabel, d...)
	cb.Do("Unk_4be4371", &t.Unk_4be4371, d...)
	cb.Do("TTraversalData", &t.TTraversalData, d...)
	cb.Do("BAmbientInteract", &t.BAmbientInteract, d...)
	cb.Do("Unk_33bc35b", &t.Unk_33bc35b, d...)
}

type ScriptEventParamAchievement struct {
	// Inherits ScriptEventParamBase
	// Inherits PolymorphicBase
	DwType         DT_UINT
	EParamType     DT_ENUM
	DwPad          DT_UINT
	SnoAchievement DT_SNO
}

func (t *ScriptEventParamAchievement) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.EParamType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SnoAchievement, r, &Options{
		Flags: 1,
		Group: 99,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ScriptEventParamAchievement) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("EParamType", &t.EParamType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("SnoAchievement", &t.SnoAchievement, d...)
}

type OnDeathBuffCallback struct {
	// Inherits BuffCallbackBase
	// Inherits PolymorphicBase
	DwType                DT_UINT
	DwPad                 DT_UINT
	SnoTriggerEffectGroup DT_SNO
	ArConditions          DT_POLYMORPHIC_VARIABLEARRAY[*DT_INT64]
}

func (t *OnDeathBuffCallback) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoTriggerEffectGroup, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ArConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *OnDeathBuffCallback) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("SnoTriggerEffectGroup", &t.SnoTriggerEffectGroup, d...)
	cb.Do("ArConditions", &t.ArConditions, d...)
}

type CheckBoxTree struct{}

func (t *CheckBoxTree) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if _, err := r.Seek(p+1, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *CheckBoxTree) Walk(cb WalkCallback, d ...any) {}

type ParagonThresholdEntry struct {
	TThresholdAttribute    ParagonGlyphAffixAttribute
	TThresholdValueFormula DT_STRING_FORMULA
}

func (t *ParagonThresholdEntry) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.TThresholdAttribute, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.TThresholdValueFormula, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+40, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ParagonThresholdEntry) Walk(cb WalkCallback, d ...any) {
	cb.Do("TThresholdAttribute", &t.TThresholdAttribute, d...)
	cb.Do("TThresholdValueFormula", &t.TThresholdValueFormula, d...)
}

type ClothDefinition struct {
	SnoAmbientSound DT_SNO
	DwFlags         DT_UINT
	NPurchaseGizmo  DT_INT
	TClothTuning    dmClothTuningMirror
	Unk_570fcff     DT_FLOAT
	Unk_b8886b      DT_FLOAT
	Unk_a3b3e2      DT_FLOAT
	Unk_c5496ae     DT_FLOAT
	Unk_fc18a85     DT_FLOAT
	Unk_643f5b      DT_FLOAT
	Unk_5f96b22     DT_RANGE[*DT_FLOAT]
	Unk_4848e0f     DT_RANGE[*DT_FLOAT]
}

func (t *ClothDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.SnoAmbientSound, r, &Options{
		Flags: 8388608,
		Group: 5,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwFlags, r, &Options{Flags: 8912896}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.NPurchaseGizmo, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.TClothTuning, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+204, &t.Unk_570fcff, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+208, &t.Unk_b8886b, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+212, &t.Unk_a3b3e2, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+216, &t.Unk_c5496ae, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+220, &t.Unk_fc18a85, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+224, &t.Unk_643f5b, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+228, &t.Unk_5f96b22, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+236, &t.Unk_4848e0f, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if _, err := r.Seek(p+244, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ClothDefinition) Walk(cb WalkCallback, d ...any) {
	cb.Do("SnoAmbientSound", &t.SnoAmbientSound, d...)
	cb.Do("DwFlags", &t.DwFlags, d...)
	cb.Do("NPurchaseGizmo", &t.NPurchaseGizmo, d...)
	cb.Do("TClothTuning", &t.TClothTuning, d...)
	cb.Do("Unk_570fcff", &t.Unk_570fcff, d...)
	cb.Do("Unk_b8886b", &t.Unk_b8886b, d...)
	cb.Do("Unk_a3b3e2", &t.Unk_a3b3e2, d...)
	cb.Do("Unk_c5496ae", &t.Unk_c5496ae, d...)
	cb.Do("Unk_fc18a85", &t.Unk_fc18a85, d...)
	cb.Do("Unk_643f5b", &t.Unk_643f5b, d...)
	cb.Do("Unk_5f96b22", &t.Unk_5f96b22, d...)
	cb.Do("Unk_4848e0f", &t.Unk_4848e0f, d...)
}

type GameTestingCloseVendor struct {
	THeader RequiredMessageHeader
}

func (t *GameTestingCloseVendor) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *GameTestingCloseVendor) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
}

type UIItemButtonStyle struct {
	// Inherits UIButtonStyle
	// Inherits UITextStyle
	// Inherits UIWindowStyle
	// Inherits UIControlStyle
	// Inherits PolymorphicBase
	DwType                      DT_UINT
	DwPad                       DT_UINT
	HParentStyle                UIControlHandle
	Unk_441f783                 DT_INT64
	M_eHasModifiedPowerTagMap   DT_TAGMAP[*DT_ENUM]
	TConsoleInput               UIControlConsoleInput
	Unk_b4f614c                 DT_TAGMAP[*DT_ENUM]
	TFont                       UIControlFont
	PtUIControlTagMapIconLabels DT_TAGMAP[*DT_ENUM]
	TIcon                       UIControlIcon
	TClickSounds                UIControlClickSounds
	Unk_10f81f0                 DT_TAGMAP[*DT_ENUM]
	Unk_adf9a5f                 DT_TAGMAP[*DT_ENUM]
}

func (t *UIItemButtonStyle) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.HParentStyle, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_441f783, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.M_eHasModifiedPowerTagMap, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.TConsoleInput, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.Unk_b4f614c, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.TFont, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.PtUIControlTagMapIconLabels, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.TIcon, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.TClickSounds, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+144, &t.Unk_10f81f0, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+160, &t.Unk_adf9a5f, r, &Options{Flags: 513}); err != nil {
		return err
	}
	if _, err := r.Seek(p+176, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *UIItemButtonStyle) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("HParentStyle", &t.HParentStyle, d...)
	cb.Do("Unk_441f783", &t.Unk_441f783, d...)
	cb.Do("M_eHasModifiedPowerTagMap", &t.M_eHasModifiedPowerTagMap, d...)
	cb.Do("TConsoleInput", &t.TConsoleInput, d...)
	cb.Do("Unk_b4f614c", &t.Unk_b4f614c, d...)
	cb.Do("TFont", &t.TFont, d...)
	cb.Do("PtUIControlTagMapIconLabels", &t.PtUIControlTagMapIconLabels, d...)
	cb.Do("TIcon", &t.TIcon, d...)
	cb.Do("TClickSounds", &t.TClickSounds, d...)
	cb.Do("Unk_10f81f0", &t.Unk_10f81f0, d...)
	cb.Do("Unk_adf9a5f", &t.Unk_adf9a5f, d...)
}

type Quaternion16 struct {
	X DT_WORD
	Y DT_WORD
	Z DT_WORD
	W DT_WORD
}

func (t *Quaternion16) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.X, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2, &t.Y, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.Z, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+6, &t.W, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Quaternion16) Walk(cb WalkCallback, d ...any) {
	cb.Do("X", &t.X, d...)
	cb.Do("Y", &t.Y, d...)
	cb.Do("Z", &t.Z, d...)
	cb.Do("W", &t.W, d...)
}

type HitpointSpecifier struct {
	EType           DT_ENUM
	THitpointScalar DT_STRING_FORMULA
	TFlatLevel      DT_STRING_FORMULA
}

func (t *HitpointSpecifier) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.EType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.THitpointScalar, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.TFlatLevel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+72, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *HitpointSpecifier) Walk(cb WalkCallback, d ...any) {
	cb.Do("EType", &t.EType, d...)
	cb.Do("THitpointScalar", &t.THitpointScalar, d...)
	cb.Do("TFlatLevel", &t.TFlatLevel, d...)
}

type AssetListEntry struct {
	NID    DT_INT
	NIndex DT_UINT
}

func (t *AssetListEntry) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.NID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.NIndex, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *AssetListEntry) Walk(cb WalkCallback, d ...any) {
	cb.Do("NID", &t.NID, d...)
	cb.Do("NIndex", &t.NIndex, d...)
}

type StoryboardUIControlPlayStoryboardTrack struct {
	// Inherits StoryboardUIControlTrack
	// Inherits StoryboardTrack
	// Inherits PolymorphicBase
	DwType          DT_UINT
	DwPad           DT_UINT
	TNodeCollection StoryboardPlayStoryboardNodeCollection
}

func (t *StoryboardUIControlPlayStoryboardTrack) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TNodeCollection, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *StoryboardUIControlPlayStoryboardTrack) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("TNodeCollection", &t.TNodeCollection, d...)
}

type EffectGroupActorTrack struct {
	// Inherits EffectGroupTrack
	// Inherits PolymorphicBase
	DwType              DT_UINT
	DwPad               DT_UINT
	BCustomEffectTiming DT_INT
}

func (t *EffectGroupActorTrack) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BCustomEffectTiming, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *EffectGroupActorTrack) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("BCustomEffectTiming", &t.BCustomEffectTiming, d...)
}

type OperateRecipeEventMessage struct {
	THeader  RequiredMessageHeader
	AnnGizmo DT_ACD_NETWORK_NAME
	BSuccess DT_INT
}

func (t *OperateRecipeEventMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.AnnGizmo, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.BSuccess, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+28, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *OperateRecipeEventMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("AnnGizmo", &t.AnnGizmo, d...)
	cb.Do("BSuccess", &t.BSuccess, d...)
}

type DefaultMaterialValueDefinition struct {
	// Inherits PolymorphicBase
	DwType DT_UINT
	DwPad  DT_UINT
	VValue DT_VECTOR4D
}

func (t *DefaultMaterialValueDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.VValue, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *DefaultMaterialValueDefinition) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("VValue", &t.VValue, d...)
}

type TriggerEventAddTrail struct {
	// Inherits TriggerEventRangedDuration
	// Inherits TriggerEvent
	// Inherits PolymorphicBase
	DwType              DT_UINT
	TConditions         TriggerConditions
	FGenerated          DT_INT
	Unk_6cba752         DT_INT
	DwParentActorID     DT_UINT
	TDuration           DT_FLOAT
	DwTriggerFlags      DT_UINT
	DwTriggerFlagsEx    DT_UINT
	TCleanup            TriggerCleanup
	Unk_49e9257         DT_INT
	Unk_5490979         DT_INT
	DwPad               DT_UINT
	DwID                DT_UINT
	SnoTrail            DT_SNO
	VecScalar           DT_VECTOR2D
	TrailBase           HardpointLink
	SnoPowerEffectParam DT_SNO
	Unk_526c582         DT_VARIABLEARRAY[*HardpointLink]
}

func (t *TriggerEventAddTrail) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.FGenerated, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_6cba752, r, &Options{Flags: 16}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.DwParentActorID, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.TDuration, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.DwTriggerFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.DwTriggerFlagsEx, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.TCleanup, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+116, &t.Unk_49e9257, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.Unk_5490979, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+124, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.DwID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+132, &t.SnoTrail, r, &Options{
		Flags: 1,
		Group: 45,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+136, &t.VecScalar, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+144, &t.TrailBase, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+152, &t.SnoPowerEffectParam, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+160, &t.Unk_526c582, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+176, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TriggerEventAddTrail) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("TConditions", &t.TConditions, d...)
	cb.Do("FGenerated", &t.FGenerated, d...)
	cb.Do("Unk_6cba752", &t.Unk_6cba752, d...)
	cb.Do("DwParentActorID", &t.DwParentActorID, d...)
	cb.Do("TDuration", &t.TDuration, d...)
	cb.Do("DwTriggerFlags", &t.DwTriggerFlags, d...)
	cb.Do("DwTriggerFlagsEx", &t.DwTriggerFlagsEx, d...)
	cb.Do("TCleanup", &t.TCleanup, d...)
	cb.Do("Unk_49e9257", &t.Unk_49e9257, d...)
	cb.Do("Unk_5490979", &t.Unk_5490979, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("DwID", &t.DwID, d...)
	cb.Do("SnoTrail", &t.SnoTrail, d...)
	cb.Do("VecScalar", &t.VecScalar, d...)
	cb.Do("TrailBase", &t.TrailBase, d...)
	cb.Do("SnoPowerEffectParam", &t.SnoPowerEffectParam, d...)
	cb.Do("Unk_526c582", &t.Unk_526c582, d...)
}

type PowerConditionDistanceToTarget struct {
	// Inherits PowerConditionBase
	// Inherits PolymorphicBase
	DwType     DT_UINT
	BInverse   DT_INT
	DwPad      DT_UINT
	FlDistance DT_FLOAT
}

func (t *PowerConditionDistanceToTarget) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BInverse, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.FlDistance, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PowerConditionDistanceToTarget) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("BInverse", &t.BInverse, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("FlDistance", &t.FlDistance, d...)
}

type EngagedMessage struct {
	THeader               RequiredMessageHeader
	DwPlayerGameAccountId DT_UINT
	SnoActorMonster       DT_SNO
	EMonsterRarity        DT_ENUM
	BUseAlternateName     DT_INT
	PRareNameGBIDs        DT_FIXEDARRAY[*DT_GBID]
	SnoMonsterAffixes     DT_FIXEDARRAY[*DT_SNO]
}

func (t *EngagedMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.DwPlayerGameAccountId, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.SnoActorMonster, r, &Options{
		Flags: 1,
		Group: 1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.EMonsterRarity, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.BUseAlternateName, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.PRareNameGBIDs, r, &Options{
		ArrayLength: 2,
		Flags:       1,
		Group:       7,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.SnoMonsterAffixes, r, &Options{
		ArrayLength: 4,
		Flags:       1,
		Group:       107,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+56, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *EngagedMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("DwPlayerGameAccountId", &t.DwPlayerGameAccountId, d...)
	cb.Do("SnoActorMonster", &t.SnoActorMonster, d...)
	cb.Do("EMonsterRarity", &t.EMonsterRarity, d...)
	cb.Do("BUseAlternateName", &t.BUseAlternateName, d...)
	cb.Do("PRareNameGBIDs", &t.PRareNameGBIDs, d...)
	cb.Do("SnoMonsterAffixes", &t.SnoMonsterAffixes, d...)
}

type DestroyableObjectGizmoData struct {
	// Inherits NamedGizmoData
	// Inherits ActorGizmoData
	// Inherits PolymorphicBase
	DwType                           DT_UINT
	DwPad                            DT_UINT
	FDisableNonFriendlyOperation     DT_INT
	FWalkToCenter                    DT_INT
	FGizmoStartsDisabled             DT_INT
	FUseStringListName               DT_INT
	FForceMinimapIcon                DT_INT
	FlOperationRadius                DT_FLOAT
	Unk_d0b1df5                      DT_FLOAT
	FlGizmoUseTime                   DT_FLOAT
	SnoChannelingEffect              DT_SNO
	Unk_2767229                      DT_INT
	FGizmoShowProgressBar            DT_INT
	Unk_6d9ebe1                      DT_INT
	Unk_5456245                      DT_INT
	Unk_af5815a                      DT_INT
	SnoOnClickEffect                 DT_SNO
	SnoPickedUpEffect                DT_SNO
	SnoDropOnGroundEffect            DT_SNO
	TConditionData                   GizmoConditionData
	SnoPowerOperator                 DT_SNO
	SnoPowerOperate                  DT_SNO
	SnoPowerOperatorActive           DT_SNO
	SnoPowerOperateActive            DT_SNO
	Unk_359810e                      DT_INT
	NCooldown                        DT_UINT
	Unk_9c8478e                      DT_UINT
	Unk_d45ed2d                      DT_INT
	Unk_f6b20b7                      DT_INT
	Unk_54513b8                      DT_INT
	Unk_fd1f378                      DT_UINT
	HGizmoOperateFlavorTextMsgLabel  DT_UINT
	HGizmoOperateDescriptionMsgLabel DT_UINT
	FlGizmoOperateOffset             DT_FLOAT
	Unk_ab58cd3                      DT_ENUM
	Unk_91a3966                      DT_UINT
	HGizmoChannelingLabel            DT_UINT
	Unk_4be4371                      DT_INT
	EWreckableStrength               DT_ENUM
	SnoRequiredPower                 DT_SNO
	Unk_c0f7c                        DT_INT
	Unk_4d93264                      DT_ENUM
}

func (t *DestroyableObjectGizmoData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.FDisableNonFriendlyOperation, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.FWalkToCenter, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.FGizmoStartsDisabled, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.FUseStringListName, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.FForceMinimapIcon, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.FlOperationRadius, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.Unk_d0b1df5, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.FlGizmoUseTime, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.SnoChannelingEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.Unk_2767229, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.FGizmoShowProgressBar, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+60, &t.Unk_6d9ebe1, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.Unk_5456245, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.Unk_af5815a, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.SnoOnClickEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.SnoPickedUpEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.SnoDropOnGroundEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.TConditionData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.SnoPowerOperator, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.SnoPowerOperate, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.SnoPowerOperatorActive, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+100, &t.SnoPowerOperateActive, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+104, &t.Unk_359810e, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+108, &t.NCooldown, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.Unk_9c8478e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+116, &t.Unk_d45ed2d, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.Unk_f6b20b7, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+124, &t.Unk_54513b8, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.Unk_fd1f378, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+132, &t.HGizmoOperateFlavorTextMsgLabel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+136, &t.HGizmoOperateDescriptionMsgLabel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+140, &t.FlGizmoOperateOffset, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+144, &t.Unk_ab58cd3, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+148, &t.Unk_91a3966, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+152, &t.HGizmoChannelingLabel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+156, &t.Unk_4be4371, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+160, &t.EWreckableStrength, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+164, &t.SnoRequiredPower, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+168, &t.Unk_c0f7c, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+172, &t.Unk_4d93264, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+176, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *DestroyableObjectGizmoData) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("FDisableNonFriendlyOperation", &t.FDisableNonFriendlyOperation, d...)
	cb.Do("FWalkToCenter", &t.FWalkToCenter, d...)
	cb.Do("FGizmoStartsDisabled", &t.FGizmoStartsDisabled, d...)
	cb.Do("FUseStringListName", &t.FUseStringListName, d...)
	cb.Do("FForceMinimapIcon", &t.FForceMinimapIcon, d...)
	cb.Do("FlOperationRadius", &t.FlOperationRadius, d...)
	cb.Do("Unk_d0b1df5", &t.Unk_d0b1df5, d...)
	cb.Do("FlGizmoUseTime", &t.FlGizmoUseTime, d...)
	cb.Do("SnoChannelingEffect", &t.SnoChannelingEffect, d...)
	cb.Do("Unk_2767229", &t.Unk_2767229, d...)
	cb.Do("FGizmoShowProgressBar", &t.FGizmoShowProgressBar, d...)
	cb.Do("Unk_6d9ebe1", &t.Unk_6d9ebe1, d...)
	cb.Do("Unk_5456245", &t.Unk_5456245, d...)
	cb.Do("Unk_af5815a", &t.Unk_af5815a, d...)
	cb.Do("SnoOnClickEffect", &t.SnoOnClickEffect, d...)
	cb.Do("SnoPickedUpEffect", &t.SnoPickedUpEffect, d...)
	cb.Do("SnoDropOnGroundEffect", &t.SnoDropOnGroundEffect, d...)
	cb.Do("TConditionData", &t.TConditionData, d...)
	cb.Do("SnoPowerOperator", &t.SnoPowerOperator, d...)
	cb.Do("SnoPowerOperate", &t.SnoPowerOperate, d...)
	cb.Do("SnoPowerOperatorActive", &t.SnoPowerOperatorActive, d...)
	cb.Do("SnoPowerOperateActive", &t.SnoPowerOperateActive, d...)
	cb.Do("Unk_359810e", &t.Unk_359810e, d...)
	cb.Do("NCooldown", &t.NCooldown, d...)
	cb.Do("Unk_9c8478e", &t.Unk_9c8478e, d...)
	cb.Do("Unk_d45ed2d", &t.Unk_d45ed2d, d...)
	cb.Do("Unk_f6b20b7", &t.Unk_f6b20b7, d...)
	cb.Do("Unk_54513b8", &t.Unk_54513b8, d...)
	cb.Do("Unk_fd1f378", &t.Unk_fd1f378, d...)
	cb.Do("HGizmoOperateFlavorTextMsgLabel", &t.HGizmoOperateFlavorTextMsgLabel, d...)
	cb.Do("HGizmoOperateDescriptionMsgLabel", &t.HGizmoOperateDescriptionMsgLabel, d...)
	cb.Do("FlGizmoOperateOffset", &t.FlGizmoOperateOffset, d...)
	cb.Do("Unk_ab58cd3", &t.Unk_ab58cd3, d...)
	cb.Do("Unk_91a3966", &t.Unk_91a3966, d...)
	cb.Do("HGizmoChannelingLabel", &t.HGizmoChannelingLabel, d...)
	cb.Do("Unk_4be4371", &t.Unk_4be4371, d...)
	cb.Do("EWreckableStrength", &t.EWreckableStrength, d...)
	cb.Do("SnoRequiredPower", &t.SnoRequiredPower, d...)
	cb.Do("Unk_c0f7c", &t.Unk_c0f7c, d...)
	cb.Do("Unk_4d93264", &t.Unk_4d93264, d...)
}

type WeaponExpertiseRanks struct {
	THeader GBIDHeader
	ArRanks DT_VARIABLEARRAY[*WeaponExpertiseRank]
}

func (t *WeaponExpertiseRanks) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+264, &t.ArRanks, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+280, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *WeaponExpertiseRanks) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("ArRanks", &t.ArRanks, d...)
}

type TriggerEventCameraMoveToCameraMarker struct {
	// Inherits TriggerEventRangedDuration
	// Inherits TriggerEvent
	// Inherits PolymorphicBase
	DwType                     DT_UINT
	TConditions                TriggerConditions
	FGenerated                 DT_INT
	Unk_6cba752                DT_INT
	DwParentActorID            DT_UINT
	TDuration                  DT_FLOAT
	DwTriggerFlags             DT_UINT
	DwTriggerFlagsEx           DT_UINT
	TCleanup                   TriggerCleanup
	Unk_49e9257                DT_INT
	Unk_5490979                DT_INT
	DwPad                      DT_UINT
	SzCameraMarker             DT_UINT
	Unk_8f65c3f                DT_INT
	EOrientationMode           DT_ENUM
	ELookAtTargetType          DT_ENUM
	Unk_6101673                DT_UINT
	THardpointLinkLookAtTarget HardpointLink
	DwLookAtTargetID           DT_UINT
	VecTargetOffset            DT_VECTOR3D
	EMicrophoneMode            DT_ENUM
	VecMicrophoneOffset        DT_VECTOR3D
	EBlendEasing               DT_ENUM
}

func (t *TriggerEventCameraMoveToCameraMarker) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.FGenerated, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_6cba752, r, &Options{Flags: 16}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.DwParentActorID, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.TDuration, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.DwTriggerFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.DwTriggerFlagsEx, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.TCleanup, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+116, &t.Unk_49e9257, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.Unk_5490979, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+124, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.SzCameraMarker, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+132, &t.Unk_8f65c3f, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+136, &t.EOrientationMode, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+140, &t.ELookAtTargetType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+144, &t.Unk_6101673, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+148, &t.THardpointLinkLookAtTarget, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+156, &t.DwLookAtTargetID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+160, &t.VecTargetOffset, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+172, &t.EMicrophoneMode, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+176, &t.VecMicrophoneOffset, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+188, &t.EBlendEasing, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+192, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TriggerEventCameraMoveToCameraMarker) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("TConditions", &t.TConditions, d...)
	cb.Do("FGenerated", &t.FGenerated, d...)
	cb.Do("Unk_6cba752", &t.Unk_6cba752, d...)
	cb.Do("DwParentActorID", &t.DwParentActorID, d...)
	cb.Do("TDuration", &t.TDuration, d...)
	cb.Do("DwTriggerFlags", &t.DwTriggerFlags, d...)
	cb.Do("DwTriggerFlagsEx", &t.DwTriggerFlagsEx, d...)
	cb.Do("TCleanup", &t.TCleanup, d...)
	cb.Do("Unk_49e9257", &t.Unk_49e9257, d...)
	cb.Do("Unk_5490979", &t.Unk_5490979, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("SzCameraMarker", &t.SzCameraMarker, d...)
	cb.Do("Unk_8f65c3f", &t.Unk_8f65c3f, d...)
	cb.Do("EOrientationMode", &t.EOrientationMode, d...)
	cb.Do("ELookAtTargetType", &t.ELookAtTargetType, d...)
	cb.Do("Unk_6101673", &t.Unk_6101673, d...)
	cb.Do("THardpointLinkLookAtTarget", &t.THardpointLinkLookAtTarget, d...)
	cb.Do("DwLookAtTargetID", &t.DwLookAtTargetID, d...)
	cb.Do("VecTargetOffset", &t.VecTargetOffset, d...)
	cb.Do("EMicrophoneMode", &t.EMicrophoneMode, d...)
	cb.Do("VecMicrophoneOffset", &t.VecMicrophoneOffset, d...)
	cb.Do("EBlendEasing", &t.EBlendEasing, d...)
}

type ScriptEventParamBase struct {
	// Inherits PolymorphicBase
	DwType     DT_UINT
	EParamType DT_ENUM
	DwPad      DT_UINT
}

func (t *ScriptEventParamBase) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.EParamType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ScriptEventParamBase) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("EParamType", &t.EParamType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
}

type WorldStateUpdateMessage struct {
	THeader       RequiredMessageHeader
	SnoWorldState DT_SNO
	NValue        DT_INT
}

func (t *WorldStateUpdateMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoWorldState, r, &Options{
		Flags: 1,
		Group: 86,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.NValue, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *WorldStateUpdateMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("SnoWorldState", &t.SnoWorldState, d...)
	cb.Do("NValue", &t.NValue, d...)
}

type ScriptEventParamItem struct {
	// Inherits ScriptEventParamBase
	// Inherits PolymorphicBase
	DwType     DT_UINT
	EParamType DT_ENUM
	DwPad      DT_UINT
	SnoItem    DT_SNO
}

func (t *ScriptEventParamItem) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.EParamType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SnoItem, r, &Options{
		Flags: 513,
		Group: 73,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ScriptEventParamItem) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("EParamType", &t.EParamType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("SnoItem", &t.SnoItem, d...)
}

type ScriptEventParamSelf struct {
	// Inherits ScriptEventParamBase
	// Inherits PolymorphicBase
	DwType     DT_UINT
	EParamType DT_ENUM
	DwPad      DT_UINT
	IdValue    DT_INT
}

func (t *ScriptEventParamSelf) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.EParamType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.IdValue, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ScriptEventParamSelf) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("EParamType", &t.EParamType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("IdValue", &t.IdValue, d...)
}

type ScaleKey struct {
	NFrame DT_INT
	VScale DT_VECTOR3D
}

func (t *ScaleKey) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.NFrame, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.VScale, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ScaleKey) Walk(cb WalkCallback, d ...any) {
	cb.Do("NFrame", &t.NFrame, d...)
	cb.Do("VScale", &t.VScale, d...)
}

type DungeonAffixDefinition struct {
	NWeight           DT_INT
	EAffixCategory    DT_ENUM
	BIsHiddenAffix    DT_INT
	GbidAffixFamily   DT_GBID
	ArValidTierRanges DT_VARIABLEARRAY[*DungeonAffixRange]
}

func (t *DungeonAffixDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.NWeight, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.EAffixCategory, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BIsHiddenAffix, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.GbidAffixFamily, r, &Options{
		Flags: 1,
		Group: 30,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ArValidTierRanges, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+40, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *DungeonAffixDefinition) Walk(cb WalkCallback, d ...any) {
	cb.Do("NWeight", &t.NWeight, d...)
	cb.Do("EAffixCategory", &t.EAffixCategory, d...)
	cb.Do("BIsHiddenAffix", &t.BIsHiddenAffix, d...)
	cb.Do("GbidAffixFamily", &t.GbidAffixFamily, d...)
	cb.Do("ArValidTierRanges", &t.ArValidTierRanges, d...)
}

type UIWrapPanelStyle struct {
	// Inherits UIWindowStyle
	// Inherits UIControlStyle
	// Inherits PolymorphicBase
	DwType                    DT_UINT
	DwPad                     DT_UINT
	HParentStyle              UIControlHandle
	Unk_441f783               DT_INT64
	M_eHasModifiedPowerTagMap DT_TAGMAP[*DT_ENUM]
	TConsoleInput             UIControlConsoleInput
	Unk_b4f614c               DT_TAGMAP[*DT_ENUM]
	Unk_725129e               DT_TAGMAP[*DT_ENUM]
}

func (t *UIWrapPanelStyle) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.HParentStyle, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_441f783, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.M_eHasModifiedPowerTagMap, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.TConsoleInput, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.Unk_b4f614c, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.Unk_725129e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+96, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *UIWrapPanelStyle) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("HParentStyle", &t.HParentStyle, d...)
	cb.Do("Unk_441f783", &t.Unk_441f783, d...)
	cb.Do("M_eHasModifiedPowerTagMap", &t.M_eHasModifiedPowerTagMap, d...)
	cb.Do("TConsoleInput", &t.TConsoleInput, d...)
	cb.Do("Unk_b4f614c", &t.Unk_b4f614c, d...)
	cb.Do("Unk_725129e", &t.Unk_725129e, d...)
}

type DynamicMovementData_Table struct {
	// Inherits GameBalanceTable
	// Inherits PolymorphicBase
	DwType   DT_UINT
	DwPad    DT_UINT
	TEntries DT_VARIABLEARRAY[*DynamicMovementData]
}

func (t *DynamicMovementData_Table) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TEntries, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *DynamicMovementData_Table) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("TEntries", &t.TEntries, d...)
}

type InventoryRequestUseMessage struct {
	THeader      RequiredMessageHeader
	AnnItemToUse DT_ACD_NETWORK_NAME
	SnoItem      DT_SNO
	EType        DT_ENUM
	AnnTarget    DT_ACD_NETWORK_NAME
	TPlace       SharedServerWorldPlace
}

func (t *InventoryRequestUseMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.AnnItemToUse, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SnoItem, r, &Options{
		Flags: 1,
		Group: 73,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.EType, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.AnnTarget, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.TPlace, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+60, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *InventoryRequestUseMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("AnnItemToUse", &t.AnnItemToUse, d...)
	cb.Do("SnoItem", &t.SnoItem, d...)
	cb.Do("EType", &t.EType, d...)
	cb.Do("AnnTarget", &t.AnnTarget, d...)
	cb.Do("TPlace", &t.TPlace, d...)
}

type ParagonEquipBoardMessage struct {
	THeader         RequiredMessageHeader
	SnoBoard        DT_SNO
	ERotation       DT_ENUM
	DwGateNodeIndex DT_UINT
}

func (t *ParagonEquipBoardMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoBoard, r, &Options{
		Flags: 1,
		Group: 108,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.ERotation, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.DwGateNodeIndex, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+28, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ParagonEquipBoardMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("SnoBoard", &t.SnoBoard, d...)
	cb.Do("ERotation", &t.ERotation, d...)
	cb.Do("DwGateNodeIndex", &t.DwGateNodeIndex, d...)
}

type VibrationDefinition struct {
	DwFlags         DT_UINT
	TSystemDuration DT_FLOAT
	TOutroDuration  DT_FLOAT
	WdMinRange      DT_FLOAT
	WdMaxRange      DT_FLOAT
	FlPriority      DT_FLOAT
	Unk_b7a52c1     DT_INT
	Unk_d131223     InterpolationPath_float
	Unk_7bb3b91     InterpolationPath_float
}

func (t *VibrationDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.TSystemDuration, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TOutroDuration, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.WdMinRange, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.WdMaxRange, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.FlPriority, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.Unk_b7a52c1, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.Unk_d131223, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.Unk_7bb3b91, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+152, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *VibrationDefinition) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwFlags", &t.DwFlags, d...)
	cb.Do("TSystemDuration", &t.TSystemDuration, d...)
	cb.Do("TOutroDuration", &t.TOutroDuration, d...)
	cb.Do("WdMinRange", &t.WdMinRange, d...)
	cb.Do("WdMaxRange", &t.WdMaxRange, d...)
	cb.Do("FlPriority", &t.FlPriority, d...)
	cb.Do("Unk_b7a52c1", &t.Unk_b7a52c1, d...)
	cb.Do("Unk_d131223", &t.Unk_d131223, d...)
	cb.Do("Unk_7bb3b91", &t.Unk_7bb3b91, d...)
}

type ConnectionEstablishedMessage struct {
	THeader          RequiredMessageHeader
	DwGameAccountId  DT_UINT
	DwAnimSyncedSeed DT_UINT
	TTrace           TraceMessage
}

func (t *ConnectionEstablishedMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.DwGameAccountId, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwAnimSyncedSeed, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.TTrace, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+104, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ConnectionEstablishedMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("DwGameAccountId", &t.DwGameAccountId, d...)
	cb.Do("DwAnimSyncedSeed", &t.DwAnimSyncedSeed, d...)
	cb.Do("TTrace", &t.TTrace, d...)
}

type EffectGroupTrack struct {
	// Inherits PolymorphicBase
	DwType DT_UINT
	DwPad  DT_UINT
}

func (t *EffectGroupTrack) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *EffectGroupTrack) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
}

type SceneSubzoneMarkerSetPreloadHelper struct {
	SnoScene           DT_SNO
	TSubzoneMarkerSets SerialDataInfo
}

func (t *SceneSubzoneMarkerSetPreloadHelper) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoScene, r, &Options{
		Flags: 1,
		Group: 33,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.TSubzoneMarkerSets, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+12, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *SceneSubzoneMarkerSetPreloadHelper) Walk(cb WalkCallback, d ...any) {
	cb.Do("SnoScene", &t.SnoScene, d...)
	cb.Do("TSubzoneMarkerSets", &t.TSubzoneMarkerSets, d...)
}

type Type_49d4b843 struct {
	THeader   RequiredMessageHeader
	SnoAffix  DT_SNO
	BIsAdding DT_INT
}

func (t *Type_49d4b843) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoAffix, r, &Options{
		Flags: 1,
		Group: 104,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.BIsAdding, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_49d4b843) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("SnoAffix", &t.SnoAffix, d...)
	cb.Do("BIsAdding", &t.BIsAdding, d...)
}

type IconScaleOptionalFieldMapDefaults struct {
	FlMax DT_FLOAT
	FlMin DT_FLOAT
}

func (t *IconScaleOptionalFieldMapDefaults) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.FlMax, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.FlMin, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *IconScaleOptionalFieldMapDefaults) Walk(cb WalkCallback, d ...any) {
	cb.Do("FlMax", &t.FlMax, d...)
	cb.Do("FlMin", &t.FlMin, d...)
}

type ActorPropData struct {
	FIsCorpse             DT_INT
	FIsTraversalExit      DT_INT
	ECrafterType          DT_ENUM
	FIsTraversalRope      DT_INT
	FlTraversalRopeLength DT_FLOAT
}

func (t *ActorPropData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.FIsCorpse, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.FIsTraversalExit, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.ECrafterType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.FIsTraversalRope, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.FlTraversalRopeLength, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+20, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ActorPropData) Walk(cb WalkCallback, d ...any) {
	cb.Do("FIsCorpse", &t.FIsCorpse, d...)
	cb.Do("FIsTraversalExit", &t.FIsTraversalExit, d...)
	cb.Do("ECrafterType", &t.ECrafterType, d...)
	cb.Do("FIsTraversalRope", &t.FIsTraversalRope, d...)
	cb.Do("FlTraversalRopeLength", &t.FlTraversalRopeLength, d...)
}

type OnGetHitBuffCallback struct {
	// Inherits BuffCallbackBase
	// Inherits PolymorphicBase
	DwType                DT_UINT
	DwPad                 DT_UINT
	SnoTriggerEffectGroup DT_SNO
	ArConditions          DT_POLYMORPHIC_VARIABLEARRAY[*DT_INT64]
	Unk_99e97f7           DT_INT
	Unk_ecd3027           DT_INT
}

func (t *OnGetHitBuffCallback) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoTriggerEffectGroup, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ArConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.Unk_99e97f7, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.Unk_ecd3027, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+56, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *OnGetHitBuffCallback) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("SnoTriggerEffectGroup", &t.SnoTriggerEffectGroup, d...)
	cb.Do("ArConditions", &t.ArConditions, d...)
	cb.Do("Unk_99e97f7", &t.Unk_99e97f7, d...)
	cb.Do("Unk_ecd3027", &t.Unk_ecd3027, d...)
}

type HeightFieldWaveSettings struct {
	FlMinWaveLength  DT_FLOAT
	FlMaxWaveLength  DT_FLOAT
	FlAmplitudeRatio DT_FLOAT
	Unk_12070ce      DT_FLOAT
}

func (t *HeightFieldWaveSettings) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.FlMinWaveLength, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.FlMaxWaveLength, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.FlAmplitudeRatio, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.Unk_12070ce, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *HeightFieldWaveSettings) Walk(cb WalkCallback, d ...any) {
	cb.Do("FlMinWaveLength", &t.FlMinWaveLength, d...)
	cb.Do("FlMaxWaveLength", &t.FlMaxWaveLength, d...)
	cb.Do("FlAmplitudeRatio", &t.FlAmplitudeRatio, d...)
	cb.Do("Unk_12070ce", &t.Unk_12070ce, d...)
}

type DemonScrollDefinition struct {
	ArRewards DT_FIXEDARRAY[*DemonScrollReward]
}

func (t *DemonScrollDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.ArRewards, r, &Options{
		ArrayLength: 5,
		Flags:       1,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+548, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *DemonScrollDefinition) Walk(cb WalkCallback, d ...any) {
	cb.Do("ArRewards", &t.ArRewards, d...)
}

type ArmorPactCost struct {
	GbidArmorPact DT_GBID
	Cost          DT_INT
}

func (t *ArmorPactCost) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.GbidArmorPact, r, &Options{
		Flags: 1,
		Group: 68,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.Cost, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ArmorPactCost) Walk(cb WalkCallback, d ...any) {
	cb.Do("GbidArmorPact", &t.GbidArmorPact, d...)
	cb.Do("Cost", &t.Cost, d...)
}

type ScaleCurve struct {
	PtKeysComp DT_VARIABLEARRAY[*DT_BYTE]
}

func (t *ScaleCurve) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.PtKeysComp, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ScaleCurve) Walk(cb WalkCallback, d ...any) {
	cb.Do("PtKeysComp", &t.PtKeysComp, d...)
}

type ArmorPactType struct {
	THeader          GBIDHeader
	TPactIcon        UIImageHandleReference
	Unk_2c2ef16      UIImageHandleReference
	HPactDescription StringLabelHandleEx
}

func (t *ArmorPactType) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+260, &t.TPactIcon, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+264, &t.Unk_2c2ef16, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+268, &t.HPactDescription, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+276, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ArmorPactType) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("TPactIcon", &t.TPactIcon, d...)
	cb.Do("Unk_2c2ef16", &t.Unk_2c2ef16, d...)
	cb.Do("HPactDescription", &t.HPactDescription, d...)
}

type AIStateDebugTestPowerMessage struct {
	THeader       RequiredMessageHeader
	AnnActor      DT_ACD_NETWORK_NAME
	SnoPower      DT_SNO
	DwCooldownKey DT_INT64
}

func (t *AIStateDebugTestPowerMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.AnnActor, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SnoPower, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.DwCooldownKey, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+40, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *AIStateDebugTestPowerMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("AnnActor", &t.AnnActor, d...)
	cb.Do("SnoPower", &t.SnoPower, d...)
	cb.Do("DwCooldownKey", &t.DwCooldownKey, d...)
}

type LookVariantMaterialMap struct {
	DwLookVariant                  DT_UINT
	ArLookVariantMaterialOverrides DT_VARIABLEARRAY[*LookVariantMaterialOverride]
}

func (t *LookVariantMaterialMap) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.DwLookVariant, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.ArLookVariantMaterialOverrides, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *LookVariantMaterialMap) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwLookVariant", &t.DwLookVariant, d...)
	cb.Do("ArLookVariantMaterialOverrides", &t.ArLookVariantMaterialOverrides, d...)
}

type TryUnlockRecipeTierMessage struct {
	THeader      RequiredMessageHeader
	ECrafterType DT_ENUM
}

func (t *TryUnlockRecipeTierMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.ECrafterType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+20, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TryUnlockRecipeTierMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("ECrafterType", &t.ECrafterType, d...)
}

type PlayerIntValMessage struct {
	THeader               RequiredMessageHeader
	DwPlayerGameAccountId DT_UINT
	NVal                  DT_INT
}

func (t *PlayerIntValMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.DwPlayerGameAccountId, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.NVal, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PlayerIntValMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("DwPlayerGameAccountId", &t.DwPlayerGameAccountId, d...)
	cb.Do("NVal", &t.NVal, d...)
}

type GroundNormalTests struct {
	BEnabled      DT_INT
	PtGroundTests DT_VARIABLEARRAY[*GroundTestPosition]
}

func (t *GroundNormalTests) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.BEnabled, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.PtGroundTests, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *GroundNormalTests) Walk(cb WalkCallback, d ...any) {
	cb.Do("BEnabled", &t.BEnabled, d...)
	cb.Do("PtGroundTests", &t.PtGroundTests, d...)
}

type MarkerHeightFieldTexture struct {
	NWidth     DT_INT
	NHeight    DT_INT
	EFormat    DT_ENUM
	ArTexels   DT_VARIABLEARRAY[*DT_BYTE]
	SnoTexture DT_SNO
}

func (t *MarkerHeightFieldTexture) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.NWidth, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.NHeight, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.EFormat, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.ArTexels, r, &Options{Flags: 2097153}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.SnoTexture, r, &Options{Group: 44}); err != nil {
		return err
	}
	if _, err := r.Seek(p+40, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *MarkerHeightFieldTexture) Walk(cb WalkCallback, d ...any) {
	cb.Do("NWidth", &t.NWidth, d...)
	cb.Do("NHeight", &t.NHeight, d...)
	cb.Do("EFormat", &t.EFormat, d...)
	cb.Do("ArTexels", &t.ArTexels, d...)
	cb.Do("SnoTexture", &t.SnoTexture, d...)
}

type StringWrapper struct {
	SzValue DT_CSTRING[*DT_BYTE]
}

func (t *StringWrapper) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SzValue, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *StringWrapper) Walk(cb WalkCallback, d ...any) {
	cb.Do("SzValue", &t.SzValue, d...)
}

type HairAndBeardState struct {
	EHairState    DT_ENUM
	EBeardState   DT_ENUM
	EJewelryState DT_ENUM
	EPersonaState DT_ENUM
	EEyeState     DT_ENUM
	EMouthState   DT_ENUM
}

func (t *HairAndBeardState) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.EHairState, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.EBeardState, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.EJewelryState, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.EPersonaState, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.EEyeState, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.EMouthState, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *HairAndBeardState) Walk(cb WalkCallback, d ...any) {
	cb.Do("EHairState", &t.EHairState, d...)
	cb.Do("EBeardState", &t.EBeardState, d...)
	cb.Do("EJewelryState", &t.EJewelryState, d...)
	cb.Do("EPersonaState", &t.EPersonaState, d...)
	cb.Do("EEyeState", &t.EEyeState, d...)
	cb.Do("EMouthState", &t.EMouthState, d...)
}

type StoryboardPlaySoundTrack struct {
	// Inherits StoryboardGenericTrack
	// Inherits StoryboardTrack
	// Inherits PolymorphicBase
	DwType          DT_UINT
	DwPad           DT_UINT
	TNodeCollection StoryboardPlaySoundNodeCollection
}

func (t *StoryboardPlaySoundTrack) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TNodeCollection, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *StoryboardPlaySoundTrack) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("TNodeCollection", &t.TNodeCollection, d...)
}

type DebugDataHeaderMessage struct {
	THeader     RequiredMessageHeader
	NType       DT_INT
	ArParams    DT_FIXEDARRAY[*DT_INT]
	NDataBlocks DT_INT
}

func (t *DebugDataHeaderMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.NType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.ArParams, r, &Options{
		ArrayLength: 2,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.NDataBlocks, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *DebugDataHeaderMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("NType", &t.NType, d...)
	cb.Do("ArParams", &t.ArParams, d...)
	cb.Do("NDataBlocks", &t.NDataBlocks, d...)
}

type UInt64DataMessage struct {
	THeader RequiredMessageHeader
	UData   DT_INT64
}

func (t *UInt64DataMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.UData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *UInt64DataMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("UData", &t.UData, d...)
}

type RareMonsterNamesMessage struct {
	THeader           RequiredMessageHeader
	Ann               DT_ACD_NETWORK_NAME
	PgbidRareNames    DT_FIXEDARRAY[*DT_GBID]
	SnoMonsterAffixes DT_FIXEDARRAY[*DT_SNO]
}

func (t *RareMonsterNamesMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Ann, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.PgbidRareNames, r, &Options{
		ArrayLength: 2,
		Flags:       1,
		Group:       7,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.SnoMonsterAffixes, r, &Options{
		ArrayLength: 4,
		Flags:       1,
		Group:       107,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *RareMonsterNamesMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("Ann", &t.Ann, d...)
	cb.Do("PgbidRareNames", &t.PgbidRareNames, d...)
	cb.Do("SnoMonsterAffixes", &t.SnoMonsterAffixes, d...)
}

type QuestTrackedQuestChangedMessage struct {
	THeader               RequiredMessageHeader
	DwPlayerGameAccountId DT_UINT
	SnoQuest              DT_SNO
	BManuallyTracked      DT_INT
}

func (t *QuestTrackedQuestChangedMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.DwPlayerGameAccountId, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.SnoQuest, r, &Options{
		Flags: 1,
		Group: 31,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.BManuallyTracked, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+28, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *QuestTrackedQuestChangedMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("DwPlayerGameAccountId", &t.DwPlayerGameAccountId, d...)
	cb.Do("SnoQuest", &t.SnoQuest, d...)
	cb.Do("BManuallyTracked", &t.BManuallyTracked, d...)
}

type BloodSealAddExperienceMessage struct {
	THeader      RequiredMessageHeader
	SnoBloodSeal DT_SNO
	DwExperience DT_UINT
}

func (t *BloodSealAddExperienceMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoBloodSeal, r, &Options{
		Flags: 1,
		Group: 142,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwExperience, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *BloodSealAddExperienceMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("SnoBloodSeal", &t.SnoBloodSeal, d...)
	cb.Do("DwExperience", &t.DwExperience, d...)
}

type PVPMonsterMessage struct {
	THeader        RequiredMessageHeader
	AnnMonsterName DT_ACD_NETWORK_NAME
	SnoMonster     DT_SNO
	WpLocation     DT_VECTOR3D
	BRemove        DT_INT
}

func (t *PVPMonsterMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.AnnMonsterName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SnoMonster, r, &Options{
		Flags: 1,
		Group: 1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.WpLocation, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.BRemove, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+44, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PVPMonsterMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("AnnMonsterName", &t.AnnMonsterName, d...)
	cb.Do("SnoMonster", &t.SnoMonster, d...)
	cb.Do("WpLocation", &t.WpLocation, d...)
	cb.Do("BRemove", &t.BRemove, d...)
}

type ScriptEventParamActor struct {
	// Inherits ScriptEventParamBase
	// Inherits PolymorphicBase
	DwType     DT_UINT
	EParamType DT_ENUM
	DwPad      DT_UINT
	SnoActor   DT_SNO
}

func (t *ScriptEventParamActor) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.EParamType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SnoActor, r, &Options{
		Flags: 513,
		Group: 1,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ScriptEventParamActor) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("EParamType", &t.EParamType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("SnoActor", &t.SnoActor, d...)
}

type TriggerEventDisableConstraint struct {
	// Inherits TriggerEvent
	// Inherits PolymorphicBase
	DwType          DT_UINT
	DwPad           DT_UINT
	TConditions     TriggerConditions
	FGenerated      DT_INT
	Unk_6cba752     DT_INT
	DwParentActorID DT_UINT
	TConstraintLink ConstraintLink
	THardpointLink  HardpointLink
}

func (t *TriggerEventDisableConstraint) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.FGenerated, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_6cba752, r, &Options{Flags: 16}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.DwParentActorID, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.TConstraintLink, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.THardpointLink, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+96, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TriggerEventDisableConstraint) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("TConditions", &t.TConditions, d...)
	cb.Do("FGenerated", &t.FGenerated, d...)
	cb.Do("Unk_6cba752", &t.Unk_6cba752, d...)
	cb.Do("DwParentActorID", &t.DwParentActorID, d...)
	cb.Do("TConstraintLink", &t.TConstraintLink, d...)
	cb.Do("THardpointLink", &t.THardpointLink, d...)
}

type Triangle2D struct {
	Wp0 DT_VECTOR2D
	Wp1 DT_VECTOR2D
	Wp2 DT_VECTOR2D
}

func (t *Triangle2D) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Wp0, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.Wp1, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Wp2, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Triangle2D) Walk(cb WalkCallback, d ...any) {
	cb.Do("Wp0", &t.Wp0, d...)
	cb.Do("Wp1", &t.Wp1, d...)
	cb.Do("Wp2", &t.Wp2, d...)
}

type Triangle3D struct {
	Wp0 DT_VECTOR3D
	Wp1 DT_VECTOR3D
	Wp2 DT_VECTOR3D
}

func (t *Triangle3D) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Wp0, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.Wp1, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Wp2, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+36, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Triangle3D) Walk(cb WalkCallback, d ...any) {
	cb.Do("Wp0", &t.Wp0, d...)
	cb.Do("Wp1", &t.Wp1, d...)
	cb.Do("Wp2", &t.Wp2, d...)
}

type PowerConditionSkillRankCompare struct {
	// Inherits PowerConditionBase
	// Inherits PolymorphicBase
	DwType   DT_UINT
	BInverse DT_INT
	DwPad    DT_UINT
	ECompare DT_ENUM
	NValue   DT_INT
}

func (t *PowerConditionSkillRankCompare) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BInverse, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ECompare, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.NValue, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PowerConditionSkillRankCompare) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("BInverse", &t.BInverse, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("ECompare", &t.ECompare, d...)
	cb.Do("NValue", &t.NValue, d...)
}

type ScriptEventParamDWORD struct {
	// Inherits ScriptEventParamBase
	// Inherits PolymorphicBase
	DwType     DT_UINT
	EParamType DT_ENUM
	DwPad      DT_UINT
	DwValue    DT_UINT
}

func (t *ScriptEventParamDWORD) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.EParamType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.DwValue, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ScriptEventParamDWORD) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("EParamType", &t.EParamType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("DwValue", &t.DwValue, d...)
}

type ScriptEventParamFloat struct {
	// Inherits ScriptEventParamBase
	// Inherits PolymorphicBase
	DwType     DT_UINT
	EParamType DT_ENUM
	DwPad      DT_UINT
	FlValue    DT_FLOAT
}

func (t *ScriptEventParamFloat) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.EParamType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.FlValue, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ScriptEventParamFloat) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("EParamType", &t.EParamType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("FlValue", &t.FlValue, d...)
}

type ScriptEventParamAllowAny struct {
	// Inherits ScriptEventParamBase
	// Inherits PolymorphicBase
	DwType     DT_UINT
	EParamType DT_ENUM
	DwPad      DT_UINT
}

func (t *ScriptEventParamAllowAny) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.EParamType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ScriptEventParamAllowAny) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("EParamType", &t.EParamType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
}

type RunTimeMaterialValues struct {
	ArMaterialScalarValues DT_VARIABLEARRAY[*RunTimeMaterialScalarValueEntry]
	ArMaterialScalarGraphs DT_VARIABLEARRAY[*RunTimeMaterialScalarGraphEntry]
	ArMaterialVectorValues DT_VARIABLEARRAY[*RunTimeMaterialVectorValueEntry]
	ArMaterialVectorGraphs DT_VARIABLEARRAY[*RunTimeMaterialVectorGraphEntry]
}

func (t *RunTimeMaterialValues) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.ArMaterialScalarValues, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.ArMaterialScalarGraphs, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.ArMaterialVectorValues, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.ArMaterialVectorGraphs, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+64, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *RunTimeMaterialValues) Walk(cb WalkCallback, d ...any) {
	cb.Do("ArMaterialScalarValues", &t.ArMaterialScalarValues, d...)
	cb.Do("ArMaterialScalarGraphs", &t.ArMaterialScalarGraphs, d...)
	cb.Do("ArMaterialVectorValues", &t.ArMaterialVectorValues, d...)
	cb.Do("ArMaterialVectorGraphs", &t.ArMaterialVectorGraphs, d...)
}

type ScriptEventParamPower struct {
	// Inherits ScriptEventParamBase
	// Inherits PolymorphicBase
	DwType     DT_UINT
	EParamType DT_ENUM
	DwPad      DT_UINT
	SnoPower   DT_SNO
}

func (t *ScriptEventParamPower) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.EParamType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SnoPower, r, &Options{
		Flags: 513,
		Group: 29,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ScriptEventParamPower) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("EParamType", &t.EParamType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("SnoPower", &t.SnoPower, d...)
}

type MalignantColor_Table struct {
	// Inherits GameBalanceTable
	// Inherits PolymorphicBase
	DwType   DT_UINT
	DwPad    DT_UINT
	TEntries DT_VARIABLEARRAY[*MalignantColor]
}

func (t *MalignantColor_Table) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TEntries, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *MalignantColor_Table) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("TEntries", &t.TEntries, d...)
}

type ScriptEventParamQuest struct {
	// Inherits ScriptEventParamBase
	// Inherits PolymorphicBase
	DwType     DT_UINT
	EParamType DT_ENUM
	DwPad      DT_UINT
	SnoQuest   DT_SNO
}

func (t *ScriptEventParamQuest) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.EParamType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SnoQuest, r, &Options{
		Flags: 513,
		Group: 31,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ScriptEventParamQuest) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("EParamType", &t.EParamType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("SnoQuest", &t.SnoQuest, d...)
}

type TraversalInstanceData struct {
	ETraversalType  DT_ENUM
	Unk_df09d6a     DT_INT
	SnoCameraEffect DT_SNO
}

func (t *TraversalInstanceData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.ETraversalType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.Unk_df09d6a, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.SnoCameraEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+12, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TraversalInstanceData) Walk(cb WalkCallback, d ...any) {
	cb.Do("ETraversalType", &t.ETraversalType, d...)
	cb.Do("Unk_df09d6a", &t.Unk_df09d6a, d...)
	cb.Do("SnoCameraEffect", &t.SnoCameraEffect, d...)
}

type VersionsMessage struct {
	THeader       RequiredMessageHeader
	UProtocolHash DT_UINT
	SzBuildVer    DT_CHARARRAY
	UServiceHash  DT_INT64
}

func (t *VersionsMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.UProtocolHash, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.SzBuildVer, r, &Options{
		ArrayLength: 32,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.UServiceHash, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+64, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *VersionsMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("UProtocolHash", &t.UProtocolHash, d...)
	cb.Do("SzBuildVer", &t.SzBuildVer, d...)
	cb.Do("UServiceHash", &t.UServiceHash, d...)
}

type ScriptEventParamScene struct {
	// Inherits ScriptEventParamBase
	// Inherits PolymorphicBase
	DwType     DT_UINT
	EParamType DT_ENUM
	DwPad      DT_UINT
	SnoScene   DT_SNO
}

func (t *ScriptEventParamScene) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.EParamType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SnoScene, r, &Options{
		Flags: 513,
		Group: 33,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ScriptEventParamScene) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("EParamType", &t.EParamType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("SnoScene", &t.SnoScene, d...)
}

type SpawnLocType struct {
	THeader   GBIDHeader
	ECategory DT_ENUM
}

func (t *SpawnLocType) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+260, &t.ECategory, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+264, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *SpawnLocType) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("ECategory", &t.ECategory, d...)
}

type TriggerEventCancelLook struct {
	// Inherits TriggerEvent
	// Inherits PolymorphicBase
	DwType          DT_UINT
	DwPad           DT_UINT
	TConditions     TriggerConditions
	FGenerated      DT_INT
	Unk_6cba752     DT_INT
	DwParentActorID DT_UINT
	DwActorID       DT_UINT
	SnoAppearance   DT_SNO
	TLookLink       LookLink
	Unk_279aa5a     DT_INT
}

func (t *TriggerEventCancelLook) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.FGenerated, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_6cba752, r, &Options{Flags: 16}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.DwParentActorID, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.DwActorID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.SnoAppearance, r, &Options{
		Flags: 513,
		Group: 9,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.TLookLink, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.Unk_279aa5a, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+96, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TriggerEventCancelLook) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("TConditions", &t.TConditions, d...)
	cb.Do("FGenerated", &t.FGenerated, d...)
	cb.Do("Unk_6cba752", &t.Unk_6cba752, d...)
	cb.Do("DwParentActorID", &t.DwParentActorID, d...)
	cb.Do("DwActorID", &t.DwActorID, d...)
	cb.Do("SnoAppearance", &t.SnoAppearance, d...)
	cb.Do("TLookLink", &t.TLookLink, d...)
	cb.Do("Unk_279aa5a", &t.Unk_279aa5a, d...)
}

type StoryboardUIControlSetValueTrack_bcVec2 struct {
	DwType          DT_UINT
	TNodeCollection StoryboardValueNodeCollection_bcVec2
	Unk_77ed19a     DT_ENUM
	DwPad           DT_UINT
}

func (t *StoryboardUIControlSetValueTrack_bcVec2) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TNodeCollection, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.Unk_77ed19a, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+56, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *StoryboardUIControlSetValueTrack_bcVec2) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("TNodeCollection", &t.TNodeCollection, d...)
	cb.Do("Unk_77ed19a", &t.Unk_77ed19a, d...)
	cb.Do("DwPad", &t.DwPad, d...)
}

type ScriptEventParamWorld struct {
	// Inherits ScriptEventParamBase
	// Inherits PolymorphicBase
	DwType     DT_UINT
	EParamType DT_ENUM
	DwPad      DT_UINT
	SnoWorld   DT_SNO
}

func (t *ScriptEventParamWorld) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.EParamType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SnoWorld, r, &Options{
		Flags: 513,
		Group: 48,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ScriptEventParamWorld) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("EParamType", &t.EParamType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("SnoWorld", &t.SnoWorld, d...)
}

type MarkerHeightFieldTextureInfo struct {
	NTextureIndex DT_INT
	NXOffset      DT_INT
	NWidth        DT_INT
}

func (t *MarkerHeightFieldTextureInfo) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.NTextureIndex, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.NXOffset, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.NWidth, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+12, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *MarkerHeightFieldTextureInfo) Walk(cb WalkCallback, d ...any) {
	cb.Do("NTextureIndex", &t.NTextureIndex, d...)
	cb.Do("NXOffset", &t.NXOffset, d...)
	cb.Do("NWidth", &t.NWidth, d...)
}

type GameBalanceDefinition struct {
	EGameBalanceType DT_ENUM
	BIgnoreOnLoad    DT_INT
	PtData           DT_POLYMORPHIC_VARIABLEARRAY[*GameBalanceTable]
	PtPostprocessed  DT_INT64
}

func (t *GameBalanceDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.EGameBalanceType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.BIgnoreOnLoad, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.PtData, r, &Options{Flags: 262145}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.PtPostprocessed, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *GameBalanceDefinition) Walk(cb WalkCallback, d ...any) {
	cb.Do("EGameBalanceType", &t.EGameBalanceType, d...)
	cb.Do("BIgnoreOnLoad", &t.BIgnoreOnLoad, d...)
	cb.Do("PtData", &t.PtData, d...)
	cb.Do("PtPostprocessed", &t.PtPostprocessed, d...)
}

type SubzoneRelation struct {
	SnoSubzone    DT_SNO
	ERelationType DT_ENUM
}

func (t *SubzoneRelation) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoSubzone, r, &Options{
		Flags: 1,
		Group: 80,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.ERelationType, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *SubzoneRelation) Walk(cb WalkCallback, d ...any) {
	cb.Do("SnoSubzone", &t.SnoSubzone, d...)
	cb.Do("ERelationType", &t.ERelationType, d...)
}

type BlockingActorLoadMessage struct {
	THeader           RequiredMessageHeader
	Ann               DT_ACD_NETWORK_NAME
	SnoActor          DT_SNO
	Unk_73c20e        DT_SNO_NAME
	EBlockingLoadType DT_ENUM
}

func (t *BlockingActorLoadMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Ann, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SnoActor, r, &Options{
		Flags: 1,
		Group: 1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.Unk_73c20e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.EBlockingLoadType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+40, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *BlockingActorLoadMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("Ann", &t.Ann, d...)
	cb.Do("SnoActor", &t.SnoActor, d...)
	cb.Do("Unk_73c20e", &t.Unk_73c20e, d...)
	cb.Do("EBlockingLoadType", &t.EBlockingLoadType, d...)
}

type RareMonsterNamesEntry struct {
	THeader                 GBIDHeader
	FPrefix                 DT_INT
	SnoAffixEffect          DT_SNO
	ArFamilyRestrictions    DT_VARIABLEARRAY[*DT_SNO]
	EActorGenderRestriction DT_ENUM
	SnoCondition            DT_SNO
	Unk_340ed93             DT_INT
}

func (t *RareMonsterNamesEntry) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+260, &t.FPrefix, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+264, &t.SnoAffixEffect, r, &Options{
		Flags: 1,
		Group: 107,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+272, &t.ArFamilyRestrictions, r, &Options{
		Flags: 1,
		Group: 82,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+288, &t.EActorGenderRestriction, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+292, &t.SnoCondition, r, &Options{
		Flags: 1,
		Group: 51,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+296, &t.Unk_340ed93, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+304, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *RareMonsterNamesEntry) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("FPrefix", &t.FPrefix, d...)
	cb.Do("SnoAffixEffect", &t.SnoAffixEffect, d...)
	cb.Do("ArFamilyRestrictions", &t.ArFamilyRestrictions, d...)
	cb.Do("EActorGenderRestriction", &t.EActorGenderRestriction, d...)
	cb.Do("SnoCondition", &t.SnoCondition, d...)
	cb.Do("Unk_340ed93", &t.Unk_340ed93, d...)
}

type WorldStateUpdateData struct {
	SnoWorldState DT_SNO
	NValue        DT_INT
}

func (t *WorldStateUpdateData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoWorldState, r, &Options{
		Flags: 1,
		Group: 86,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.NValue, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *WorldStateUpdateData) Walk(cb WalkCallback, d ...any) {
	cb.Do("SnoWorldState", &t.SnoWorldState, d...)
	cb.Do("NValue", &t.NValue, d...)
}

type TriggerEventFootstep struct {
	// Inherits TriggerEvent
	// Inherits PolymorphicBase
	DwType                DT_UINT
	DwPad                 DT_UINT
	TConditions           TriggerConditions
	FGenerated            DT_INT
	Unk_6cba752           DT_INT
	DwParentActorID       DT_UINT
	THardpointLink        HardpointLink
	EFootstepType         DT_ENUM
	EFootstepSide         DT_ENUM
	SnoFootstepSoundTable DT_SNO
	SnoFootstepSurface    DT_SNO
}

func (t *TriggerEventFootstep) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.FGenerated, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_6cba752, r, &Options{Flags: 16}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.DwParentActorID, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.THardpointLink, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.EFootstepType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.EFootstepSide, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.SnoFootstepSoundTable, r, &Options{
		Flags: 513,
		Group: 79,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+100, &t.SnoFootstepSurface, r, &Options{
		Flags: 513,
		Group: 43,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+104, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TriggerEventFootstep) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("TConditions", &t.TConditions, d...)
	cb.Do("FGenerated", &t.FGenerated, d...)
	cb.Do("Unk_6cba752", &t.Unk_6cba752, d...)
	cb.Do("DwParentActorID", &t.DwParentActorID, d...)
	cb.Do("THardpointLink", &t.THardpointLink, d...)
	cb.Do("EFootstepType", &t.EFootstepType, d...)
	cb.Do("EFootstepSide", &t.EFootstepSide, d...)
	cb.Do("SnoFootstepSoundTable", &t.SnoFootstepSoundTable, d...)
	cb.Do("SnoFootstepSurface", &t.SnoFootstepSurface, d...)
}

type WwiseAudioBus struct {
	TName   WwiseName
	TParent WwiseName
}

func (t *WwiseAudioBus) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.TName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.TParent, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *WwiseAudioBus) Walk(cb WalkCallback, d ...any) {
	cb.Do("TName", &t.TName, d...)
	cb.Do("TParent", &t.TParent, d...)
}

type ActorGroupSubcondition struct {
	// Inherits Subcondition
	// Inherits PolymorphicBase
	DwType           DT_UINT
	BNegate          DT_INT
	DwPad            DT_UINT
	GbidActorGroup   DT_GBID
	EActorToEvaluate DT_ENUM
}

func (t *ActorGroupSubcondition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BNegate, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.GbidActorGroup, r, &Options{
		Flags: 1,
		Group: 24,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.EActorToEvaluate, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ActorGroupSubcondition) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("BNegate", &t.BNegate, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("GbidActorGroup", &t.GbidActorGroup, d...)
	cb.Do("EActorToEvaluate", &t.EActorToEvaluate, d...)
}

type OnOtherBuffAddedCallback struct {
	// Inherits BuffCallbackBase
	// Inherits PolymorphicBase
	DwType                DT_UINT
	DwPad                 DT_UINT
	SnoTriggerEffectGroup DT_SNO
	ArConditions          DT_POLYMORPHIC_VARIABLEARRAY[*DT_INT64]
	Unk_880879b           DT_VARIABLEARRAY[*PowerBuffIdentifier]
}

func (t *OnOtherBuffAddedCallback) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoTriggerEffectGroup, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ArConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.Unk_880879b, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+64, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *OnOtherBuffAddedCallback) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("SnoTriggerEffectGroup", &t.SnoTriggerEffectGroup, d...)
	cb.Do("ArConditions", &t.ArConditions, d...)
	cb.Do("Unk_880879b", &t.Unk_880879b, d...)
}

type TriggerEventCameraTransitionToObserver struct {
	// Inherits TriggerEventRangedDuration
	// Inherits TriggerEvent
	// Inherits PolymorphicBase
	DwType               DT_UINT
	TConditions          TriggerConditions
	FGenerated           DT_INT
	Unk_6cba752          DT_INT
	DwParentActorID      DT_UINT
	TDuration            DT_FLOAT
	DwTriggerFlags       DT_UINT
	DwTriggerFlagsEx     DT_UINT
	TCleanup             TriggerCleanup
	Unk_49e9257          DT_INT
	Unk_5490979          DT_INT
	DwPad                DT_UINT
	SnoObserver          DT_SNO
	Unk_74b7ed1          DT_INT
	ETargetType          DT_ENUM
	SzTargetLocatorName  DT_UINT
	THardpointLinkTarget HardpointLink
	DwTargetID           DT_UINT
	ArAdditionalTargets  DT_VARIABLEARRAY[*Type_5eb6ade]
	EBlendEasing         DT_ENUM
	FlRadiusConstraint   DT_FLOAT
}

func (t *TriggerEventCameraTransitionToObserver) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.FGenerated, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_6cba752, r, &Options{Flags: 16}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.DwParentActorID, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.TDuration, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.DwTriggerFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.DwTriggerFlagsEx, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.TCleanup, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+116, &t.Unk_49e9257, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.Unk_5490979, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+124, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.SnoObserver, r, &Options{
		Flags: 1,
		Group: 26,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+132, &t.Unk_74b7ed1, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+136, &t.ETargetType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+140, &t.SzTargetLocatorName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+144, &t.THardpointLinkTarget, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+152, &t.DwTargetID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+160, &t.ArAdditionalTargets, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+176, &t.EBlendEasing, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+180, &t.FlRadiusConstraint, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+184, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TriggerEventCameraTransitionToObserver) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("TConditions", &t.TConditions, d...)
	cb.Do("FGenerated", &t.FGenerated, d...)
	cb.Do("Unk_6cba752", &t.Unk_6cba752, d...)
	cb.Do("DwParentActorID", &t.DwParentActorID, d...)
	cb.Do("TDuration", &t.TDuration, d...)
	cb.Do("DwTriggerFlags", &t.DwTriggerFlags, d...)
	cb.Do("DwTriggerFlagsEx", &t.DwTriggerFlagsEx, d...)
	cb.Do("TCleanup", &t.TCleanup, d...)
	cb.Do("Unk_49e9257", &t.Unk_49e9257, d...)
	cb.Do("Unk_5490979", &t.Unk_5490979, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("SnoObserver", &t.SnoObserver, d...)
	cb.Do("Unk_74b7ed1", &t.Unk_74b7ed1, d...)
	cb.Do("ETargetType", &t.ETargetType, d...)
	cb.Do("SzTargetLocatorName", &t.SzTargetLocatorName, d...)
	cb.Do("THardpointLinkTarget", &t.THardpointLinkTarget, d...)
	cb.Do("DwTargetID", &t.DwTargetID, d...)
	cb.Do("ArAdditionalTargets", &t.ArAdditionalTargets, d...)
	cb.Do("EBlendEasing", &t.EBlendEasing, d...)
	cb.Do("FlRadiusConstraint", &t.FlRadiusConstraint, d...)
}

type HirelingSwapMessage struct {
	THeader   RequiredMessageHeader
	ENewClass DT_ENUM
}

func (t *HirelingSwapMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.ENewClass, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+20, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *HirelingSwapMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("ENewClass", &t.ENewClass, d...)
}

type ActivityMetadata struct{}

func (t *ActivityMetadata) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if _, err := r.Seek(p+1, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ActivityMetadata) Walk(cb WalkCallback, d ...any) {}

type Material struct {
	NSortPri DT_INT
}

func (t *Material) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.NSortPri, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+4, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Material) Walk(cb WalkCallback, d ...any) {
	cb.Do("NSortPri", &t.NSortPri, d...)
}

type Type_50b285a4 struct {
	THeader  RequiredMessageHeader
	Ann      DT_ACD_NETWORK_NAME
	SnoPower DT_SNO
}

func (t *Type_50b285a4) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Ann, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SnoPower, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+28, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_50b285a4) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("Ann", &t.Ann, d...)
	cb.Do("SnoPower", &t.SnoPower, d...)
}

type SalvagedItemLabelSubcondition struct {
	// Inherits Subcondition
	// Inherits PolymorphicBase
	DwType     DT_UINT
	BNegate    DT_INT
	DwPad      DT_UINT
	EItemLabel DT_ENUM
}

func (t *SalvagedItemLabelSubcondition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BNegate, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.EItemLabel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *SalvagedItemLabelSubcondition) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("BNegate", &t.BNegate, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("EItemLabel", &t.EItemLabel, d...)
}

type AnimPermutation struct {
	UID                     DT_UINT
	DwFlags                 DT_UINT
	FlFrameRate             DT_FLOAT
	FlCompression           DT_FLOAT
	DwBlendTime             DT_FLOAT
	Unk_fe5755e             DT_FLOAT
	EBlendCurve             DT_ENUM
	DwWeight                DT_UINT
	TSpeedMultRange         DT_RANGE[*DT_FLOAT]
	NBoneCount              DT_INT
	PtPayloadData           DT_VARIABLEARRAY[*AnimPayloadData]
	TPhaseName              DT_UINT
	EPhasePlaybackMode      DT_ENUM
	ArContactFrames         DT_FIXEDARRAY[*AnimContactFrame]
	ArFacingWindows         DT_VARIABLEARRAY[*AnimFacingWindow]
	ArIKFrames              DT_VARIABLEARRAY[*IKFrames]
	Unk_c61b9d1             DT_FLOAT
	ArInterruptFrames       DT_FIXEDARRAY[*DT_INT]
	Unk_75e1ebe             DT_RANGE[*DT_INT]
	Unk_f14b63c             DT_RANGE[*DT_INT]
	Unk_ddce6df             DT_INT
	EAnimationScalingType   DT_ENUM
	FlMinimumAnimationScale DT_FLOAT
	FlMaximumAnimationScale DT_FLOAT
	Unk_4f89e54             DT_FLOAT
	Unk_40c83b5             DT_FLOAT
	Unk_41ae864             DT_FLOAT
	Unk_f219e46             DT_ENUM
	Unk_acf4ed5             DT_INT
	Unk_779d247             DT_INT
	NPermutationGroup       DT_BYTE
	NKeyframeCount          DT_INT
	NCycleCount             DT_UINT
	SnoEffectGroup          DT_SNO
	Unk_2e355dd             DT_INT
	Unk_536659a             DT_INT
	Unk_b4c58a6             DT_INT
	PtSweptBones            DT_VARIABLEARRAY[*AnimSweptBone]
	WvAvgVel                DT_VECTOR3D
	Unk_57d4879             PRTransform
	THardpointLink          HardpointLink
	Unk_bd4a157             DT_FLOAT
	Unk_a3acec8             DT_UINT
	PnAnimToStructure       DT_INT64
}

func (t *AnimPermutation) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.UID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.DwFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.FlFrameRate, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.FlCompression, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.DwBlendTime, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.Unk_fe5755e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.EBlendCurve, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.DwWeight, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.TSpeedMultRange, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.NBoneCount, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.PtPayloadData, r, &Options{Flags: 2097152}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.TPhaseName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.EPhasePlaybackMode, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.ArContactFrames, r, &Options{
		ArrayLength: 4,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+136, &t.ArFacingWindows, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+152, &t.ArIKFrames, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+168, &t.Unk_c61b9d1, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+172, &t.ArInterruptFrames, r, &Options{
		ArrayLength: 4,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+188, &t.Unk_75e1ebe, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+196, &t.Unk_f14b63c, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+204, &t.Unk_ddce6df, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+208, &t.EAnimationScalingType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+212, &t.FlMinimumAnimationScale, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+216, &t.FlMaximumAnimationScale, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+220, &t.Unk_4f89e54, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+224, &t.Unk_40c83b5, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+228, &t.Unk_41ae864, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+232, &t.Unk_f219e46, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+236, &t.Unk_acf4ed5, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+240, &t.Unk_779d247, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+244, &t.NPermutationGroup, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+248, &t.NKeyframeCount, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+252, &t.NCycleCount, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+256, &t.SnoEffectGroup, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+260, &t.Unk_2e355dd, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+264, &t.Unk_536659a, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+268, &t.Unk_b4c58a6, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+272, &t.PtSweptBones, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+288, &t.WvAvgVel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+300, &t.Unk_57d4879, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+328, &t.THardpointLink, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+336, &t.Unk_bd4a157, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+340, &t.Unk_a3acec8, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+344, &t.PnAnimToStructure, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if _, err := r.Seek(p+352, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *AnimPermutation) Walk(cb WalkCallback, d ...any) {
	cb.Do("UID", &t.UID, d...)
	cb.Do("DwFlags", &t.DwFlags, d...)
	cb.Do("FlFrameRate", &t.FlFrameRate, d...)
	cb.Do("FlCompression", &t.FlCompression, d...)
	cb.Do("DwBlendTime", &t.DwBlendTime, d...)
	cb.Do("Unk_fe5755e", &t.Unk_fe5755e, d...)
	cb.Do("EBlendCurve", &t.EBlendCurve, d...)
	cb.Do("DwWeight", &t.DwWeight, d...)
	cb.Do("TSpeedMultRange", &t.TSpeedMultRange, d...)
	cb.Do("NBoneCount", &t.NBoneCount, d...)
	cb.Do("PtPayloadData", &t.PtPayloadData, d...)
	cb.Do("TPhaseName", &t.TPhaseName, d...)
	cb.Do("EPhasePlaybackMode", &t.EPhasePlaybackMode, d...)
	cb.Do("ArContactFrames", &t.ArContactFrames, d...)
	cb.Do("ArFacingWindows", &t.ArFacingWindows, d...)
	cb.Do("ArIKFrames", &t.ArIKFrames, d...)
	cb.Do("Unk_c61b9d1", &t.Unk_c61b9d1, d...)
	cb.Do("ArInterruptFrames", &t.ArInterruptFrames, d...)
	cb.Do("Unk_75e1ebe", &t.Unk_75e1ebe, d...)
	cb.Do("Unk_f14b63c", &t.Unk_f14b63c, d...)
	cb.Do("Unk_ddce6df", &t.Unk_ddce6df, d...)
	cb.Do("EAnimationScalingType", &t.EAnimationScalingType, d...)
	cb.Do("FlMinimumAnimationScale", &t.FlMinimumAnimationScale, d...)
	cb.Do("FlMaximumAnimationScale", &t.FlMaximumAnimationScale, d...)
	cb.Do("Unk_4f89e54", &t.Unk_4f89e54, d...)
	cb.Do("Unk_40c83b5", &t.Unk_40c83b5, d...)
	cb.Do("Unk_41ae864", &t.Unk_41ae864, d...)
	cb.Do("Unk_f219e46", &t.Unk_f219e46, d...)
	cb.Do("Unk_acf4ed5", &t.Unk_acf4ed5, d...)
	cb.Do("Unk_779d247", &t.Unk_779d247, d...)
	cb.Do("NPermutationGroup", &t.NPermutationGroup, d...)
	cb.Do("NKeyframeCount", &t.NKeyframeCount, d...)
	cb.Do("NCycleCount", &t.NCycleCount, d...)
	cb.Do("SnoEffectGroup", &t.SnoEffectGroup, d...)
	cb.Do("Unk_2e355dd", &t.Unk_2e355dd, d...)
	cb.Do("Unk_536659a", &t.Unk_536659a, d...)
	cb.Do("Unk_b4c58a6", &t.Unk_b4c58a6, d...)
	cb.Do("PtSweptBones", &t.PtSweptBones, d...)
	cb.Do("WvAvgVel", &t.WvAvgVel, d...)
	cb.Do("Unk_57d4879", &t.Unk_57d4879, d...)
	cb.Do("THardpointLink", &t.THardpointLink, d...)
	cb.Do("Unk_bd4a157", &t.Unk_bd4a157, d...)
	cb.Do("Unk_a3acec8", &t.Unk_a3acec8, d...)
	cb.Do("PnAnimToStructure", &t.PnAnimToStructure, d...)
}

type ACDPrimaryPowerMessage struct {
	THeader               RequiredMessageHeader
	Ann                   DT_ACD_NETWORK_NAME
	SnoPower              DT_SNO
	UCommandFrame         DT_UINT
	Unk_f4fb70            DT_VECTOR3D
	BForceOverride        DT_INT
	EInterruptReason      DT_OPTIONAL[*DT_ENUM]
	DwFlags               DT_OPTIONAL[*DT_UINT]
	AnnTargetName         DT_OPTIONAL[*DT_ACD_NETWORK_NAME]
	WpTarget              DT_OPTIONAL[*SharedServerWorldPlace]
	WpTargetOffset        DT_OPTIONAL[*DT_VECTOR3D]
	AnnInteractTargetName DT_OPTIONAL[*DT_ACD_NETWORK_NAME]
	SnoTraversalSurface   DT_OPTIONAL[*DT_SNO]
	DwPhaseNameHash       DT_OPTIONAL[*DT_UINT]
	DwPhasesFinished      DT_OPTIONAL[*DT_UINT]
	ESlot                 DT_OPTIONAL[*DT_ENUM]
	TLocalSyncTransform   DT_OPTIONAL[*PRTransform]
	Unk_c69d3ef           DT_OPTIONAL[*DT_FLOAT]
	Unk_f6c2065           DT_OPTIONAL[*DT_INT]
	SnoPowerInterrupted   DT_OPTIONAL[*DT_SNO]
}

func (t *ACDPrimaryPowerMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Ann, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SnoPower, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.UCommandFrame, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.Unk_f4fb70, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.BForceOverride, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.EInterruptReason, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.DwFlags, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.AnnTargetName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.WpTarget, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+100, &t.WpTargetOffset, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+116, &t.AnnInteractTargetName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.SnoTraversalSurface, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+136, &t.DwPhaseNameHash, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+144, &t.DwPhasesFinished, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+152, &t.ESlot, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+160, &t.TLocalSyncTransform, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+192, &t.Unk_c69d3ef, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+200, &t.Unk_f6c2065, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+208, &t.SnoPowerInterrupted, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+216, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ACDPrimaryPowerMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("Ann", &t.Ann, d...)
	cb.Do("SnoPower", &t.SnoPower, d...)
	cb.Do("UCommandFrame", &t.UCommandFrame, d...)
	cb.Do("Unk_f4fb70", &t.Unk_f4fb70, d...)
	cb.Do("BForceOverride", &t.BForceOverride, d...)
	cb.Do("EInterruptReason", &t.EInterruptReason, d...)
	cb.Do("DwFlags", &t.DwFlags, d...)
	cb.Do("AnnTargetName", &t.AnnTargetName, d...)
	cb.Do("WpTarget", &t.WpTarget, d...)
	cb.Do("WpTargetOffset", &t.WpTargetOffset, d...)
	cb.Do("AnnInteractTargetName", &t.AnnInteractTargetName, d...)
	cb.Do("SnoTraversalSurface", &t.SnoTraversalSurface, d...)
	cb.Do("DwPhaseNameHash", &t.DwPhaseNameHash, d...)
	cb.Do("DwPhasesFinished", &t.DwPhasesFinished, d...)
	cb.Do("ESlot", &t.ESlot, d...)
	cb.Do("TLocalSyncTransform", &t.TLocalSyncTransform, d...)
	cb.Do("Unk_c69d3ef", &t.Unk_c69d3ef, d...)
	cb.Do("Unk_f6c2065", &t.Unk_f6c2065, d...)
	cb.Do("SnoPowerInterrupted", &t.SnoPowerInterrupted, d...)
}

type TriggerData struct {
	TTriggerProxData       TriggerProximityData
	SnoTriggerEnteredPower DT_SNO
	SnoTriggerPulsePower   DT_SNO
	FLogicMust             DT_INT
	SnoTriggerExitedPower  DT_SNO
}

func (t *TriggerData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.TTriggerProxData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.SnoTriggerEnteredPower, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.SnoTriggerPulsePower, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.FLogicMust, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.SnoTriggerExitedPower, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+80, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TriggerData) Walk(cb WalkCallback, d ...any) {
	cb.Do("TTriggerProxData", &t.TTriggerProxData, d...)
	cb.Do("SnoTriggerEnteredPower", &t.SnoTriggerEnteredPower, d...)
	cb.Do("SnoTriggerPulsePower", &t.SnoTriggerPulsePower, d...)
	cb.Do("FLogicMust", &t.FLogicMust, d...)
	cb.Do("SnoTriggerExitedPower", &t.SnoTriggerExitedPower, d...)
}

type DRLGDungeonState struct {
	GbidDungeonState DT_GBID
	BNegate          DT_INT
}

func (t *DRLGDungeonState) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.GbidDungeonState, r, &Options{
		Flags: 1,
		Group: 31,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.BNegate, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *DRLGDungeonState) Walk(cb WalkCallback, d ...any) {
	cb.Do("GbidDungeonState", &t.GbidDungeonState, d...)
	cb.Do("BNegate", &t.BNegate, d...)
}

type ActorPhysicsData struct {
	SnoPhysics                     DT_SNO
	SnoPartialRagdollPhysics       DT_SNO
	EMaterial                      DT_ENUM
	FlExplosionFactor              DT_FLOAT
	FlWindFactor                   DT_FLOAT
	FlPartialRagdollResponsiveness DT_FLOAT
	Unk_fdc1015                    DT_UINT
}

func (t *ActorPhysicsData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoPhysics, r, &Options{
		Flags: 1,
		Group: 28,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.SnoPartialRagdollPhysics, r, &Options{
		Flags: 1,
		Group: 28,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.EMaterial, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.FlExplosionFactor, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.FlWindFactor, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.FlPartialRagdollResponsiveness, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_fdc1015, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+28, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ActorPhysicsData) Walk(cb WalkCallback, d ...any) {
	cb.Do("SnoPhysics", &t.SnoPhysics, d...)
	cb.Do("SnoPartialRagdollPhysics", &t.SnoPartialRagdollPhysics, d...)
	cb.Do("EMaterial", &t.EMaterial, d...)
	cb.Do("FlExplosionFactor", &t.FlExplosionFactor, d...)
	cb.Do("FlWindFactor", &t.FlWindFactor, d...)
	cb.Do("FlPartialRagdollResponsiveness", &t.FlPartialRagdollResponsiveness, d...)
	cb.Do("Unk_fdc1015", &t.Unk_fdc1015, d...)
}

type BoneData struct {
	Unk_a3acec8                      DT_UINT
	NBaseBoneCount                   DT_INT
	PtBoneStructure                  DT_VARIABLEARRAY[*BoneStructure]
	NClothBoneCount                  DT_INT
	Unk_ad025d8                      DT_INT
	Unk_4118a82                      DT_FIXEDARRAY[*Type_dbcb04f3]
	Unk_73d52a2                      DT_VARIABLEARRAY[*Type_f5cd87eb]
	TLookAtData                      LookAtData
	TIKData                          IKData
	TLockedRotationBoneData          LockedRotationBoneData
	TGroundNormalTests               GroundNormalTests
	PtHardpoints                     DT_VARIABLEARRAY[*Hardpoint]
	PtLoopConstraints                DT_VARIABLEARRAY[*ConstraintParameters]
	PtAdditionalDamageHardpoints     DT_VARIABLEARRAY[*HardpointLink]
	PtNPCComponentHardpointOverrides DT_VARIABLEARRAY[*NPCComponentHardpointOverride]
	PtHardpointMountedOffsets        DT_VARIABLEARRAY[*HardpointOffset]
	PtNPCWeaponHardpointOverrides    DT_VARIABLEARRAY[*NPCWeaponHardpointOverride]
	Unk_b98787b                      DT_INT
	URagdollDegrade                  DT_UINT
}

func (t *BoneData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Unk_a3acec8, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.NBaseBoneCount, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.PtBoneStructure, r, &Options{Flags: 2097152}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.NClothBoneCount, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.Unk_ad025d8, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.Unk_4118a82, r, &Options{ArrayLength: 7}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+144, &t.Unk_73d52a2, r, &Options{Flags: 2097152}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+160, &t.TLookAtData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+208, &t.TIKData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+272, &t.TLockedRotationBoneData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+288, &t.TGroundNormalTests, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+312, &t.PtHardpoints, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+328, &t.PtLoopConstraints, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+344, &t.PtAdditionalDamageHardpoints, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+360, &t.PtNPCComponentHardpointOverrides, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+376, &t.PtHardpointMountedOffsets, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+392, &t.PtNPCWeaponHardpointOverrides, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+408, &t.Unk_b98787b, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+412, &t.URagdollDegrade, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+416, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *BoneData) Walk(cb WalkCallback, d ...any) {
	cb.Do("Unk_a3acec8", &t.Unk_a3acec8, d...)
	cb.Do("NBaseBoneCount", &t.NBaseBoneCount, d...)
	cb.Do("PtBoneStructure", &t.PtBoneStructure, d...)
	cb.Do("NClothBoneCount", &t.NClothBoneCount, d...)
	cb.Do("Unk_ad025d8", &t.Unk_ad025d8, d...)
	cb.Do("Unk_4118a82", &t.Unk_4118a82, d...)
	cb.Do("Unk_73d52a2", &t.Unk_73d52a2, d...)
	cb.Do("TLookAtData", &t.TLookAtData, d...)
	cb.Do("TIKData", &t.TIKData, d...)
	cb.Do("TLockedRotationBoneData", &t.TLockedRotationBoneData, d...)
	cb.Do("TGroundNormalTests", &t.TGroundNormalTests, d...)
	cb.Do("PtHardpoints", &t.PtHardpoints, d...)
	cb.Do("PtLoopConstraints", &t.PtLoopConstraints, d...)
	cb.Do("PtAdditionalDamageHardpoints", &t.PtAdditionalDamageHardpoints, d...)
	cb.Do("PtNPCComponentHardpointOverrides", &t.PtNPCComponentHardpointOverrides, d...)
	cb.Do("PtHardpointMountedOffsets", &t.PtHardpointMountedOffsets, d...)
	cb.Do("PtNPCWeaponHardpointOverrides", &t.PtNPCWeaponHardpointOverrides, d...)
	cb.Do("Unk_b98787b", &t.Unk_b98787b, d...)
	cb.Do("URagdollDegrade", &t.URagdollDegrade, d...)
}

type RecipeIngredient struct {
	SnoCondition                 DT_SNO
	SnoItem                      DT_SNO
	NQuantity                    DT_UINT
	BIgnoreScaling               DT_INT
	Unk_20e0a16                  DT_INT
	Unk_a6432a8                  DT_RANGE[*DT_FLOAT]
	GbidIngredientScalingFormula DT_GBID
}

func (t *RecipeIngredient) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoCondition, r, &Options{
		Flags: 1,
		Group: 51,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.SnoItem, r, &Options{
		Flags: 513,
		Group: 73,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.NQuantity, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.BIgnoreScaling, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_20e0a16, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.Unk_a6432a8, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.GbidIngredientScalingFormula, r, &Options{
		Flags: 1,
		Group: 22,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *RecipeIngredient) Walk(cb WalkCallback, d ...any) {
	cb.Do("SnoCondition", &t.SnoCondition, d...)
	cb.Do("SnoItem", &t.SnoItem, d...)
	cb.Do("NQuantity", &t.NQuantity, d...)
	cb.Do("BIgnoreScaling", &t.BIgnoreScaling, d...)
	cb.Do("Unk_20e0a16", &t.Unk_20e0a16, d...)
	cb.Do("Unk_a6432a8", &t.Unk_a6432a8, d...)
	cb.Do("GbidIngredientScalingFormula", &t.GbidIngredientScalingFormula, d...)
}

type BoneName struct {
	SzName DT_UINT
}

func (t *BoneName) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SzName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+4, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *BoneName) Walk(cb WalkCallback, d ...any) {
	cb.Do("SzName", &t.SzName, d...)
}

type TriggerEventHideCaptionUI struct {
	// Inherits TriggerEvent
	// Inherits PolymorphicBase
	DwType          DT_UINT
	DwPad           DT_UINT
	TConditions     TriggerConditions
	FGenerated      DT_INT
	Unk_6cba752     DT_INT
	DwParentActorID DT_UINT
}

func (t *TriggerEventHideCaptionUI) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.FGenerated, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_6cba752, r, &Options{Flags: 16}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.DwParentActorID, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+80, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TriggerEventHideCaptionUI) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("TConditions", &t.TConditions, d...)
	cb.Do("FGenerated", &t.FGenerated, d...)
	cb.Do("Unk_6cba752", &t.Unk_6cba752, d...)
	cb.Do("DwParentActorID", &t.DwParentActorID, d...)
}

type PlayerPossessActorMessage struct {
	THeader               RequiredMessageHeader
	DwPlayerGameAccountId DT_UINT
	AnnACD                DT_ACD_NETWORK_NAME
}

func (t *PlayerPossessActorMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.DwPlayerGameAccountId, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.AnnACD, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+28, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PlayerPossessActorMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("DwPlayerGameAccountId", &t.DwPlayerGameAccountId, d...)
	cb.Do("AnnACD", &t.AnnACD, d...)
}

type SubObjectSegment struct {
	PBoneIDs     DT_VARIABLEARRAY[*DT_INT]
	NVertCount   DT_INT
	NVertOffset  DT_INT
	NIndexCount  DT_INT
	NIndexOffset DT_INT
}

func (t *SubObjectSegment) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.PBoneIDs, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.NVertCount, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.NVertOffset, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.NIndexCount, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.NIndexOffset, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *SubObjectSegment) Walk(cb WalkCallback, d ...any) {
	cb.Do("PBoneIDs", &t.PBoneIDs, d...)
	cb.Do("NVertCount", &t.NVertCount, d...)
	cb.Do("NVertOffset", &t.NVertOffset, d...)
	cb.Do("NIndexCount", &t.NIndexCount, d...)
	cb.Do("NIndexOffset", &t.NIndexOffset, d...)
}

type OnFirstHitAttemptBuffCallback struct {
	// Inherits BuffCallbackBase
	// Inherits PolymorphicBase
	DwType                DT_UINT
	DwPad                 DT_UINT
	SnoTriggerEffectGroup DT_SNO
	ArConditions          DT_POLYMORPHIC_VARIABLEARRAY[*DT_INT64]
}

func (t *OnFirstHitAttemptBuffCallback) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoTriggerEffectGroup, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ArConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *OnFirstHitAttemptBuffCallback) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("SnoTriggerEffectGroup", &t.SnoTriggerEffectGroup, d...)
	cb.Do("ArConditions", &t.ArConditions, d...)
}

type PowerMod struct {
	SzName             DT_UINT
	NMaxPoints         DT_INT
	DwModId            DT_UINT
	DwModMask          DT_UINT
	Unk_94cc84e        DT_UINT
	BAppendDescription DT_INT
	Unk_7b47c37        DT_INT
	ArSkillTags        DT_VARIABLEARRAY[*DT_GBID]
}

func (t *PowerMod) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SzName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.NMaxPoints, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwModId, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwModMask, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_94cc84e, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.BAppendDescription, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_7b47c37, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.ArSkillTags, r, &Options{
		Flags: 1,
		Group: 56,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PowerMod) Walk(cb WalkCallback, d ...any) {
	cb.Do("SzName", &t.SzName, d...)
	cb.Do("NMaxPoints", &t.NMaxPoints, d...)
	cb.Do("DwModId", &t.DwModId, d...)
	cb.Do("DwModMask", &t.DwModMask, d...)
	cb.Do("Unk_94cc84e", &t.Unk_94cc84e, d...)
	cb.Do("BAppendDescription", &t.BAppendDescription, d...)
	cb.Do("Unk_7b47c37", &t.Unk_7b47c37, d...)
	cb.Do("ArSkillTags", &t.ArSkillTags, d...)
}

type Type_52314c2f struct {
	Bones DT_VARIABLEARRAY[*Type_6f18c43c]
}

func (t *Type_52314c2f) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Bones, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_52314c2f) Walk(cb WalkCallback, d ...any) {
	cb.Do("Bones", &t.Bones, d...)
}

type WorldLocationMessageData struct {
	VScale    DT_VECTOR3D
	Transform PRTransform
	IdSWorld  DT_SHARED_SERVER_DATA_ID
}

func (t *WorldLocationMessageData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.VScale, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.Transform, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.IdSWorld, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *WorldLocationMessageData) Walk(cb WalkCallback, d ...any) {
	cb.Do("VScale", &t.VScale, d...)
	cb.Do("Transform", &t.Transform, d...)
	cb.Do("IdSWorld", &t.IdSWorld, d...)
}

type SorcererEnchantSlotUnlockData struct {
	Unk_1c4f058      DT_UINT
	TUnlockCondition ConditionWrapper
}

func (t *SorcererEnchantSlotUnlockData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Unk_1c4f058, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.TUnlockCondition, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+40, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *SorcererEnchantSlotUnlockData) Walk(cb WalkCallback, d ...any) {
	cb.Do("Unk_1c4f058", &t.Unk_1c4f058, d...)
	cb.Do("TUnlockCondition", &t.TUnlockCondition, d...)
}

type TriggerEventAddEffectGroup struct {
	// Inherits TriggerEvent
	// Inherits PolymorphicBase
	DwType                         DT_UINT
	DwPad                          DT_UINT
	TConditions                    TriggerConditions
	FGenerated                     DT_INT
	Unk_6cba752                    DT_INT
	DwParentActorID                DT_UINT
	Unk_85269a4                    DT_INT
	FOverrideScalarValues          DT_INT
	FOverridePowerEffectSize       DT_INT
	FOverridePowerEffectIntensity  DT_INT
	FOverridePowerEffectDuration   DT_INT
	FOverridePowerEffectLength     DT_INT
	FOverridePowerEffectWidth      DT_INT
	FOverridePowerEffectHeight     DT_INT
	FOverrideHardpoint             DT_INT
	FOverrideEffectGroupID         DT_INT
	Unk_e312e34                    DT_UINT
	DwActorID                      DT_UINT
	DwID                           DT_UINT
	Unk_9758f2e                    DT_INT
	Unk_574dd8b                    DT_ENUM
	SnoEffectGroup                 DT_SNO
	THardpointLinks                DT_FIXEDARRAY[*HardpointLink]
	DwTriggerFlags                 DT_UINT
	DwTriggerFlagsEx               DT_UINT
	SzSpawnLocatorName             DT_UINT
	Transform                      PRTransform
	TEffectGroupHardpointLink      HardpointLink
	SnoPowerEffectParam            DT_SNO
	VecScale                       DT_VECTOR3D
	VecScalar                      DT_VECTOR2D
	FlPowerEffectSizeOverride      DT_FLOAT
	FlPowerEffectIntensityOverride DT_FLOAT
	FlPowerEffectDurationOverride  DT_FLOAT
	FlPowerEffectLengthOverride    DT_FLOAT
	FlPowerEffectWidthOverride     DT_FLOAT
	FlPowerEffectHeightOverride    DT_FLOAT
	DwUniqueID                     DT_UINT
}

func (t *TriggerEventAddEffectGroup) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.FGenerated, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_6cba752, r, &Options{Flags: 16}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.DwParentActorID, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.Unk_85269a4, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.FOverrideScalarValues, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.FOverridePowerEffectSize, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.FOverridePowerEffectIntensity, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.FOverridePowerEffectDuration, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+100, &t.FOverridePowerEffectLength, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+104, &t.FOverridePowerEffectWidth, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+108, &t.FOverridePowerEffectHeight, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.FOverrideHardpoint, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+116, &t.FOverrideEffectGroupID, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.Unk_e312e34, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+124, &t.DwActorID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.DwID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+132, &t.Unk_9758f2e, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+136, &t.Unk_574dd8b, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+140, &t.SnoEffectGroup, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+144, &t.THardpointLinks, r, &Options{
		ArrayLength: 2,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+160, &t.DwTriggerFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+164, &t.DwTriggerFlagsEx, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+168, &t.SzSpawnLocatorName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+172, &t.Transform, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+200, &t.TEffectGroupHardpointLink, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+208, &t.SnoPowerEffectParam, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+212, &t.VecScale, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+224, &t.VecScalar, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+232, &t.FlPowerEffectSizeOverride, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+236, &t.FlPowerEffectIntensityOverride, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+240, &t.FlPowerEffectDurationOverride, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+244, &t.FlPowerEffectLengthOverride, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+248, &t.FlPowerEffectWidthOverride, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+252, &t.FlPowerEffectHeightOverride, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+256, &t.DwUniqueID, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+264, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TriggerEventAddEffectGroup) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("TConditions", &t.TConditions, d...)
	cb.Do("FGenerated", &t.FGenerated, d...)
	cb.Do("Unk_6cba752", &t.Unk_6cba752, d...)
	cb.Do("DwParentActorID", &t.DwParentActorID, d...)
	cb.Do("Unk_85269a4", &t.Unk_85269a4, d...)
	cb.Do("FOverrideScalarValues", &t.FOverrideScalarValues, d...)
	cb.Do("FOverridePowerEffectSize", &t.FOverridePowerEffectSize, d...)
	cb.Do("FOverridePowerEffectIntensity", &t.FOverridePowerEffectIntensity, d...)
	cb.Do("FOverridePowerEffectDuration", &t.FOverridePowerEffectDuration, d...)
	cb.Do("FOverridePowerEffectLength", &t.FOverridePowerEffectLength, d...)
	cb.Do("FOverridePowerEffectWidth", &t.FOverridePowerEffectWidth, d...)
	cb.Do("FOverridePowerEffectHeight", &t.FOverridePowerEffectHeight, d...)
	cb.Do("FOverrideHardpoint", &t.FOverrideHardpoint, d...)
	cb.Do("FOverrideEffectGroupID", &t.FOverrideEffectGroupID, d...)
	cb.Do("Unk_e312e34", &t.Unk_e312e34, d...)
	cb.Do("DwActorID", &t.DwActorID, d...)
	cb.Do("DwID", &t.DwID, d...)
	cb.Do("Unk_9758f2e", &t.Unk_9758f2e, d...)
	cb.Do("Unk_574dd8b", &t.Unk_574dd8b, d...)
	cb.Do("SnoEffectGroup", &t.SnoEffectGroup, d...)
	cb.Do("THardpointLinks", &t.THardpointLinks, d...)
	cb.Do("DwTriggerFlags", &t.DwTriggerFlags, d...)
	cb.Do("DwTriggerFlagsEx", &t.DwTriggerFlagsEx, d...)
	cb.Do("SzSpawnLocatorName", &t.SzSpawnLocatorName, d...)
	cb.Do("Transform", &t.Transform, d...)
	cb.Do("TEffectGroupHardpointLink", &t.TEffectGroupHardpointLink, d...)
	cb.Do("SnoPowerEffectParam", &t.SnoPowerEffectParam, d...)
	cb.Do("VecScale", &t.VecScale, d...)
	cb.Do("VecScalar", &t.VecScalar, d...)
	cb.Do("FlPowerEffectSizeOverride", &t.FlPowerEffectSizeOverride, d...)
	cb.Do("FlPowerEffectIntensityOverride", &t.FlPowerEffectIntensityOverride, d...)
	cb.Do("FlPowerEffectDurationOverride", &t.FlPowerEffectDurationOverride, d...)
	cb.Do("FlPowerEffectLengthOverride", &t.FlPowerEffectLengthOverride, d...)
	cb.Do("FlPowerEffectWidthOverride", &t.FlPowerEffectWidthOverride, d...)
	cb.Do("FlPowerEffectHeightOverride", &t.FlPowerEffectHeightOverride, d...)
	cb.Do("DwUniqueID", &t.DwUniqueID, d...)
}

type ExtractAffixResultMessage struct {
	THeader     RequiredMessageHeader
	NResultCode DT_INT
	AnnItem     DT_ACD_NETWORK_NAME
}

func (t *ExtractAffixResultMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.NResultCode, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.AnnItem, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+28, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ExtractAffixResultMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("NResultCode", &t.NResultCode, d...)
	cb.Do("AnnItem", &t.AnnItem, d...)
}

type MarkerEffectGroupData struct {
	// Inherits MarkerDataBase
	// Inherits PolymorphicBase
	DwType                   DT_UINT
	DwPad                    DT_UINT
	DwMarkerEffectGroupFlags DT_UINT
	Unk_4bf3f6b              DT_FLOAT
	Unk_9411612              DT_FLOAT
	PtRunTimeMaterialValues  DT_VARIABLEARRAY[*RunTimeMaterialValues]
}

func (t *MarkerEffectGroupData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.DwMarkerEffectGroupFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.Unk_4bf3f6b, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_9411612, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.PtRunTimeMaterialValues, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *MarkerEffectGroupData) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("DwMarkerEffectGroupFlags", &t.DwMarkerEffectGroupFlags, d...)
	cb.Do("Unk_4bf3f6b", &t.Unk_4bf3f6b, d...)
	cb.Do("Unk_9411612", &t.Unk_9411612, d...)
	cb.Do("PtRunTimeMaterialValues", &t.PtRunTimeMaterialValues, d...)
}

type EnchantAffixChooseMessage struct {
	THeader              RequiredMessageHeader
	AnnItem              DT_ACD_NETWORK_NAME
	TEnchantAffixChoices DT_FIXEDARRAY[*EnchantAffixChoice]
}

func (t *EnchantAffixChooseMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.AnnItem, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.TEnchantAffixChoices, r, &Options{
		ArrayLength: 5,
		Flags:       8,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+68, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *EnchantAffixChooseMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("AnnItem", &t.AnnItem, d...)
	cb.Do("TEnchantAffixChoices", &t.TEnchantAffixChoices, d...)
}

type SimpleRequest struct {
	THeader RequiredRequestMessageHeader
}

func (t *SimpleRequest) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+20, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *SimpleRequest) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
}

type AdditionalStatistic struct{}

func (t *AdditionalStatistic) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if _, err := r.Seek(p+1, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *AdditionalStatistic) Walk(cb WalkCallback, d ...any) {}

type WwiseMusicPlaylistItem struct {
	Key         WwiseMusicPlaylistItemKey
	TDebugName  WwiseName
	Unk_a08b499 DT_INT
}

func (t *WwiseMusicPlaylistItem) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Key, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.TDebugName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.Unk_a08b499, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *WwiseMusicPlaylistItem) Walk(cb WalkCallback, d ...any) {
	cb.Do("Key", &t.Key, d...)
	cb.Do("TDebugName", &t.TDebugName, d...)
	cb.Do("Unk_a08b499", &t.Unk_a08b499, d...)
}

type AIPathData struct {
	M_cellData   DT_VARIABLEARRAY[*AICellData]
	M_cellBytes  DT_VARIABLEARRAY[*AICellBytes]
	Unk_5d4c076  DT_VARIABLEARRAY[*Type_5f1859b4]
	Unk_14f08f0  DT_INT64
	Unk_7a5d20a  DT_INT
	M_cellWidth  DT_FLOAT
	M_cellHeight DT_FLOAT
}

func (t *AIPathData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.M_cellData, r, &Options{Flags: 262144}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.M_cellBytes, r, &Options{Flags: 262144}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.Unk_5d4c076, r, &Options{Flags: 262144}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.Unk_14f08f0, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.Unk_7a5d20a, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+60, &t.M_cellWidth, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.M_cellHeight, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+72, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *AIPathData) Walk(cb WalkCallback, d ...any) {
	cb.Do("M_cellData", &t.M_cellData, d...)
	cb.Do("M_cellBytes", &t.M_cellBytes, d...)
	cb.Do("Unk_5d4c076", &t.Unk_5d4c076, d...)
	cb.Do("Unk_14f08f0", &t.Unk_14f08f0, d...)
	cb.Do("Unk_7a5d20a", &t.Unk_7a5d20a, d...)
	cb.Do("M_cellWidth", &t.M_cellWidth, d...)
	cb.Do("M_cellHeight", &t.M_cellHeight, d...)
}

type OnContactFramePowerCallback struct {
	// Inherits PowerCallbackBase
	// Inherits PolymorphicBase
	DwType                DT_UINT
	DwPad                 DT_UINT
	SnoTriggerEffectGroup DT_SNO
	BCouldHaveRagdolled   DT_INT
	EContactFrame         DT_ENUM
	BOptional             DT_INT
}

func (t *OnContactFramePowerCallback) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoTriggerEffectGroup, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.BCouldHaveRagdolled, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.EContactFrame, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.BOptional, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *OnContactFramePowerCallback) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("SnoTriggerEffectGroup", &t.SnoTriggerEffectGroup, d...)
	cb.Do("BCouldHaveRagdolled", &t.BCouldHaveRagdolled, d...)
	cb.Do("EContactFrame", &t.EContactFrame, d...)
	cb.Do("BOptional", &t.BOptional, d...)
}

type ConditionData struct {
	SnoCondition   DT_SNO
	HConditionText StringLabelHandleEx
}

func (t *ConditionData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoCondition, r, &Options{
		Flags: 1,
		Group: 51,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.HConditionText, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+12, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ConditionData) Walk(cb WalkCallback, d ...any) {
	cb.Do("SnoCondition", &t.SnoCondition, d...)
	cb.Do("HConditionText", &t.HConditionText, d...)
}

type GoToWaypointMessage struct {
	THeader        RequiredMessageHeader
	SnoLevelArea   DT_SNO
	AnnWaypointSrc DT_ACD_NETWORK_NAME
}

func (t *GoToWaypointMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoLevelArea, r, &Options{
		Flags: 1,
		Group: 22,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.AnnWaypointSrc, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+28, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *GoToWaypointMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("SnoLevelArea", &t.SnoLevelArea, d...)
	cb.Do("AnnWaypointSrc", &t.AnnWaypointSrc, d...)
}

type MonsterExtRaritySubcondition struct {
	// Inherits Subcondition
	// Inherits PolymorphicBase
	DwType           DT_UINT
	BNegate          DT_INT
	DwPad            DT_UINT
	ERarity          DT_ENUM
	EActorToEvaluate DT_ENUM
}

func (t *MonsterExtRaritySubcondition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BNegate, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ERarity, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.EActorToEvaluate, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *MonsterExtRaritySubcondition) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("BNegate", &t.BNegate, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("ERarity", &t.ERarity, d...)
	cb.Do("EActorToEvaluate", &t.EActorToEvaluate, d...)
}

type ScriptEventInvalidType struct {
	// Inherits ScriptEventParamBase
	// Inherits PolymorphicBase
	DwType     DT_UINT
	EParamType DT_ENUM
	DwPad      DT_UINT
}

func (t *ScriptEventInvalidType) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.EParamType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ScriptEventInvalidType) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("EParamType", &t.EParamType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
}

type POICameraGizmoData struct {
	// Inherits NamedGizmoData
	// Inherits ActorGizmoData
	// Inherits PolymorphicBase
	DwType                           DT_UINT
	DwPad                            DT_UINT
	FDisableNonFriendlyOperation     DT_INT
	FWalkToCenter                    DT_INT
	FGizmoStartsDisabled             DT_INT
	FUseStringListName               DT_INT
	FForceMinimapIcon                DT_INT
	FlOperationRadius                DT_FLOAT
	Unk_d0b1df5                      DT_FLOAT
	FlGizmoUseTime                   DT_FLOAT
	SnoChannelingEffect              DT_SNO
	Unk_2767229                      DT_INT
	FGizmoShowProgressBar            DT_INT
	Unk_6d9ebe1                      DT_INT
	Unk_5456245                      DT_INT
	Unk_af5815a                      DT_INT
	SnoOnClickEffect                 DT_SNO
	SnoPickedUpEffect                DT_SNO
	SnoDropOnGroundEffect            DT_SNO
	TConditionData                   GizmoConditionData
	SnoPowerOperator                 DT_SNO
	SnoPowerOperate                  DT_SNO
	SnoPowerOperatorActive           DT_SNO
	SnoPowerOperateActive            DT_SNO
	Unk_359810e                      DT_INT
	NCooldown                        DT_UINT
	Unk_9c8478e                      DT_UINT
	Unk_d45ed2d                      DT_INT
	Unk_f6b20b7                      DT_INT
	Unk_54513b8                      DT_INT
	Unk_fd1f378                      DT_UINT
	HGizmoOperateFlavorTextMsgLabel  DT_UINT
	HGizmoOperateDescriptionMsgLabel DT_UINT
	FlGizmoOperateOffset             DT_FLOAT
	Unk_ab58cd3                      DT_ENUM
	Unk_91a3966                      DT_UINT
	HGizmoChannelingLabel            DT_UINT
	Unk_4be4371                      DT_INT
	TPOICameraData                   POICameraInstanceData
}

func (t *POICameraGizmoData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.FDisableNonFriendlyOperation, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.FWalkToCenter, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.FGizmoStartsDisabled, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.FUseStringListName, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.FForceMinimapIcon, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.FlOperationRadius, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.Unk_d0b1df5, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.FlGizmoUseTime, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.SnoChannelingEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.Unk_2767229, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.FGizmoShowProgressBar, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+60, &t.Unk_6d9ebe1, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.Unk_5456245, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.Unk_af5815a, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.SnoOnClickEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.SnoPickedUpEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.SnoDropOnGroundEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.TConditionData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.SnoPowerOperator, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.SnoPowerOperate, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.SnoPowerOperatorActive, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+100, &t.SnoPowerOperateActive, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+104, &t.Unk_359810e, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+108, &t.NCooldown, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.Unk_9c8478e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+116, &t.Unk_d45ed2d, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.Unk_f6b20b7, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+124, &t.Unk_54513b8, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.Unk_fd1f378, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+132, &t.HGizmoOperateFlavorTextMsgLabel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+136, &t.HGizmoOperateDescriptionMsgLabel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+140, &t.FlGizmoOperateOffset, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+144, &t.Unk_ab58cd3, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+148, &t.Unk_91a3966, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+152, &t.HGizmoChannelingLabel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+156, &t.Unk_4be4371, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+160, &t.TPOICameraData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+208, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *POICameraGizmoData) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("FDisableNonFriendlyOperation", &t.FDisableNonFriendlyOperation, d...)
	cb.Do("FWalkToCenter", &t.FWalkToCenter, d...)
	cb.Do("FGizmoStartsDisabled", &t.FGizmoStartsDisabled, d...)
	cb.Do("FUseStringListName", &t.FUseStringListName, d...)
	cb.Do("FForceMinimapIcon", &t.FForceMinimapIcon, d...)
	cb.Do("FlOperationRadius", &t.FlOperationRadius, d...)
	cb.Do("Unk_d0b1df5", &t.Unk_d0b1df5, d...)
	cb.Do("FlGizmoUseTime", &t.FlGizmoUseTime, d...)
	cb.Do("SnoChannelingEffect", &t.SnoChannelingEffect, d...)
	cb.Do("Unk_2767229", &t.Unk_2767229, d...)
	cb.Do("FGizmoShowProgressBar", &t.FGizmoShowProgressBar, d...)
	cb.Do("Unk_6d9ebe1", &t.Unk_6d9ebe1, d...)
	cb.Do("Unk_5456245", &t.Unk_5456245, d...)
	cb.Do("Unk_af5815a", &t.Unk_af5815a, d...)
	cb.Do("SnoOnClickEffect", &t.SnoOnClickEffect, d...)
	cb.Do("SnoPickedUpEffect", &t.SnoPickedUpEffect, d...)
	cb.Do("SnoDropOnGroundEffect", &t.SnoDropOnGroundEffect, d...)
	cb.Do("TConditionData", &t.TConditionData, d...)
	cb.Do("SnoPowerOperator", &t.SnoPowerOperator, d...)
	cb.Do("SnoPowerOperate", &t.SnoPowerOperate, d...)
	cb.Do("SnoPowerOperatorActive", &t.SnoPowerOperatorActive, d...)
	cb.Do("SnoPowerOperateActive", &t.SnoPowerOperateActive, d...)
	cb.Do("Unk_359810e", &t.Unk_359810e, d...)
	cb.Do("NCooldown", &t.NCooldown, d...)
	cb.Do("Unk_9c8478e", &t.Unk_9c8478e, d...)
	cb.Do("Unk_d45ed2d", &t.Unk_d45ed2d, d...)
	cb.Do("Unk_f6b20b7", &t.Unk_f6b20b7, d...)
	cb.Do("Unk_54513b8", &t.Unk_54513b8, d...)
	cb.Do("Unk_fd1f378", &t.Unk_fd1f378, d...)
	cb.Do("HGizmoOperateFlavorTextMsgLabel", &t.HGizmoOperateFlavorTextMsgLabel, d...)
	cb.Do("HGizmoOperateDescriptionMsgLabel", &t.HGizmoOperateDescriptionMsgLabel, d...)
	cb.Do("FlGizmoOperateOffset", &t.FlGizmoOperateOffset, d...)
	cb.Do("Unk_ab58cd3", &t.Unk_ab58cd3, d...)
	cb.Do("Unk_91a3966", &t.Unk_91a3966, d...)
	cb.Do("HGizmoChannelingLabel", &t.HGizmoChannelingLabel, d...)
	cb.Do("Unk_4be4371", &t.Unk_4be4371, d...)
	cb.Do("TPOICameraData", &t.TPOICameraData, d...)
}

type SupportedServices struct {
	ArVendors     DT_FIXEDARRAY[*ServiceAvailability]
	FCrafter      DT_FIXEDARRAY[*DT_INT]
	FClanBank     DT_INT
	FClassPassive DT_INT
	FHealer       DT_INT
	FStash        DT_INT
	FWardrobe     DT_INT
}

func (t *SupportedServices) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.ArVendors, r, &Options{
		ArrayLength: 13,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+104, &t.FCrafter, r, &Options{
		ArrayLength: 6,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.FClanBank, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+132, &t.FClassPassive, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+136, &t.FHealer, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+140, &t.FStash, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+144, &t.FWardrobe, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+148, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *SupportedServices) Walk(cb WalkCallback, d ...any) {
	cb.Do("ArVendors", &t.ArVendors, d...)
	cb.Do("FCrafter", &t.FCrafter, d...)
	cb.Do("FClanBank", &t.FClanBank, d...)
	cb.Do("FClassPassive", &t.FClassPassive, d...)
	cb.Do("FHealer", &t.FHealer, d...)
	cb.Do("FStash", &t.FStash, d...)
	cb.Do("FWardrobe", &t.FWardrobe, d...)
}

type ScriptEventParamFloatGreaterThan struct {
	// Inherits ScriptEventParamBase
	// Inherits PolymorphicBase
	DwType     DT_UINT
	EParamType DT_ENUM
	DwPad      DT_UINT
	FlValue    DT_FLOAT
}

func (t *ScriptEventParamFloatGreaterThan) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.EParamType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.FlValue, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ScriptEventParamFloatGreaterThan) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("EParamType", &t.EParamType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("FlValue", &t.FlValue, d...)
}

type AffixSortGroup struct {
	ArSortedAffixes DT_VARIABLEARRAY[*DT_SNO]
}

func (t *AffixSortGroup) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.ArSortedAffixes, r, &Options{
		Flags: 1,
		Group: 104,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *AffixSortGroup) Walk(cb WalkCallback, d ...any) {
	cb.Do("ArSortedAffixes", &t.ArSortedAffixes, d...)
}

type TriggerEventShowCaptionUIOptionalFieldMapDefaults struct {
	SzIDStoryboard DT_CSTRING[*DT_BYTE]
}

func (t *TriggerEventShowCaptionUIOptionalFieldMapDefaults) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SzIDStoryboard, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TriggerEventShowCaptionUIOptionalFieldMapDefaults) Walk(cb WalkCallback, d ...any) {
	cb.Do("SzIDStoryboard", &t.SzIDStoryboard, d...)
}

type EnterWorldMessage struct {
	THeader   RequiredMessageHeader
	IdSWorld  DT_SHARED_SERVER_DATA_ID
	SnoWorld  DT_SNO
	AtPlayers DT_FIXEDARRAY[*EnterWorldPlayer]
}

func (t *EnterWorldMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.IdSWorld, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SnoWorld, r, &Options{
		Flags: 1,
		Group: 48,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.AtPlayers, r, &Options{
		ArrayLength: 2,
		Flags:       8,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+224, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *EnterWorldMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("IdSWorld", &t.IdSWorld, d...)
	cb.Do("SnoWorld", &t.SnoWorld, d...)
	cb.Do("AtPlayers", &t.AtPlayers, d...)
}

type PowerBlendOverrideList struct {
	SnoPowerFrom           DT_SNO
	PtBlendOverrideEntries DT_VARIABLEARRAY[*BlendTimeOverrideEntry]
}

func (t *PowerBlendOverrideList) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoPowerFrom, r, &Options{
		Flags: 513,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.PtBlendOverrideEntries, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PowerBlendOverrideList) Walk(cb WalkCallback, d ...any) {
	cb.Do("SnoPowerFrom", &t.SnoPowerFrom, d...)
	cb.Do("PtBlendOverrideEntries", &t.PtBlendOverrideEntries, d...)
}

type BiomeItem struct {
	// Inherits PolymorphicBase
	DwType                      DT_UINT
	DwPad                       DT_UINT
	FlRadius                    DT_FLOAT
	Unk_2fd1cdb                 DT_FLOAT
	TAllowedScaleRange          DT_RANGE[*DT_FLOAT]
	FlItemNonAngularFrequencyA  DT_RANGE[*DT_FLOAT]
	FlItemNonAngularFrequencyB  DT_RANGE[*DT_FLOAT]
	FlItemNonAngularFrequencyC  DT_RANGE[*DT_FLOAT]
	TAllowedVerticalOffsetRange DT_RANGE[*DT_FLOAT]
	FlChance                    DT_FLOAT
	DwFlags                     DT_UINT
	Unk_2a8c4b6                 DT_FLOAT
	AAzimuthAngle               DT_FLOAT
	AAltitudeAngle              DT_FLOAT
	Unk_6ead041                 DT_RANGE[*DT_FLOAT]
	TParametricSettings         ParametricSettings
	ArProximityAdjustments      DT_VARIABLEARRAY[*ProximityAdjustment]
}

func (t *BiomeItem) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.FlRadius, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.Unk_2fd1cdb, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.TAllowedScaleRange, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.FlItemNonAngularFrequencyA, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.FlItemNonAngularFrequencyB, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.FlItemNonAngularFrequencyC, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.TAllowedVerticalOffsetRange, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.FlChance, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.DwFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_2a8c4b6, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.AAzimuthAngle, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.AAltitudeAngle, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.Unk_6ead041, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.TParametricSettings, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+224, &t.ArProximityAdjustments, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+240, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *BiomeItem) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("FlRadius", &t.FlRadius, d...)
	cb.Do("Unk_2fd1cdb", &t.Unk_2fd1cdb, d...)
	cb.Do("TAllowedScaleRange", &t.TAllowedScaleRange, d...)
	cb.Do("FlItemNonAngularFrequencyA", &t.FlItemNonAngularFrequencyA, d...)
	cb.Do("FlItemNonAngularFrequencyB", &t.FlItemNonAngularFrequencyB, d...)
	cb.Do("FlItemNonAngularFrequencyC", &t.FlItemNonAngularFrequencyC, d...)
	cb.Do("TAllowedVerticalOffsetRange", &t.TAllowedVerticalOffsetRange, d...)
	cb.Do("FlChance", &t.FlChance, d...)
	cb.Do("DwFlags", &t.DwFlags, d...)
	cb.Do("Unk_2a8c4b6", &t.Unk_2a8c4b6, d...)
	cb.Do("AAzimuthAngle", &t.AAzimuthAngle, d...)
	cb.Do("AAltitudeAngle", &t.AAltitudeAngle, d...)
	cb.Do("Unk_6ead041", &t.Unk_6ead041, d...)
	cb.Do("TParametricSettings", &t.TParametricSettings, d...)
	cb.Do("ArProximityAdjustments", &t.ArProximityAdjustments, d...)
}

type GlobalRoadSpline struct {
	SnoWorld       DT_SNO
	DwMarkerPathID DT_UINT
	ERoadType      DT_ENUM
	ArWorldPoints  DT_VARIABLEARRAY[*DT_VECTOR3D]
}

func (t *GlobalRoadSpline) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoWorld, r, &Options{
		Flags: 513,
		Group: 48,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.DwMarkerPathID, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.ERoadType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.ArWorldPoints, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *GlobalRoadSpline) Walk(cb WalkCallback, d ...any) {
	cb.Do("SnoWorld", &t.SnoWorld, d...)
	cb.Do("DwMarkerPathID", &t.DwMarkerPathID, d...)
	cb.Do("ERoadType", &t.ERoadType, d...)
	cb.Do("ArWorldPoints", &t.ArWorldPoints, d...)
}

type OnKnockbackEndPowerCallback struct {
	// Inherits PowerCallbackBase
	// Inherits PolymorphicBase
	DwType                DT_UINT
	DwPad                 DT_UINT
	SnoTriggerEffectGroup DT_SNO
	BCouldHaveRagdolled   DT_INT
}

func (t *OnKnockbackEndPowerCallback) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoTriggerEffectGroup, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.BCouldHaveRagdolled, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *OnKnockbackEndPowerCallback) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("SnoTriggerEffectGroup", &t.SnoTriggerEffectGroup, d...)
	cb.Do("BCouldHaveRagdolled", &t.BCouldHaveRagdolled, d...)
}

type GameTestingWorldSamplingStartMessage struct {
	THeader         RequiredMessageHeader
	SnoWorld        DT_SNO
	SnoSubzone      DT_SNO
	SnoScene        DT_SNO
	SnoQuest        DT_SNO
	SzTileSetName   DT_CHARARRAY
	SzLocationName  DT_CHARARRAY
	TimeOfDay       DT_FLOAT
	VecChunkIndex   DT_BCVEC2I
	GbidLabel       DT_GBID
	BHelltideActive DT_INT
	Unk_874cd69     DT_INT
}

func (t *GameTestingWorldSamplingStartMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoWorld, r, &Options{
		Flags: 1,
		Group: 48,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.SnoSubzone, r, &Options{
		Flags: 1,
		Group: 80,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SnoScene, r, &Options{
		Flags: 1,
		Group: 33,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.SnoQuest, r, &Options{
		Flags: 1,
		Group: 31,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.SzTileSetName, r, &Options{
		ArrayLength: 64,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.SzLocationName, r, &Options{
		ArrayLength: 64,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+160, &t.TimeOfDay, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+164, &t.VecChunkIndex, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+172, &t.GbidLabel, r, &Options{
		Flags: 1,
		Group: 4,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+176, &t.BHelltideActive, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+180, &t.Unk_874cd69, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+184, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *GameTestingWorldSamplingStartMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("SnoWorld", &t.SnoWorld, d...)
	cb.Do("SnoSubzone", &t.SnoSubzone, d...)
	cb.Do("SnoScene", &t.SnoScene, d...)
	cb.Do("SnoQuest", &t.SnoQuest, d...)
	cb.Do("SzTileSetName", &t.SzTileSetName, d...)
	cb.Do("SzLocationName", &t.SzLocationName, d...)
	cb.Do("TimeOfDay", &t.TimeOfDay, d...)
	cb.Do("VecChunkIndex", &t.VecChunkIndex, d...)
	cb.Do("GbidLabel", &t.GbidLabel, d...)
	cb.Do("BHelltideActive", &t.BHelltideActive, d...)
	cb.Do("Unk_874cd69", &t.Unk_874cd69, d...)
}

type SkillTreeConnectionFrameProperties struct {
	TDefaultFrameProperties ConnectorProperties
	SnoVerticalTexPattern   DT_SNO
	Unk_a8bd38a             DT_FLOAT
}

func (t *SkillTreeConnectionFrameProperties) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.TDefaultFrameProperties, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.SnoVerticalTexPattern, r, &Options{
		Flags: 1,
		Group: 44,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.Unk_a8bd38a, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+36, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *SkillTreeConnectionFrameProperties) Walk(cb WalkCallback, d ...any) {
	cb.Do("TDefaultFrameProperties", &t.TDefaultFrameProperties, d...)
	cb.Do("SnoVerticalTexPattern", &t.SnoVerticalTexPattern, d...)
	cb.Do("Unk_a8bd38a", &t.Unk_a8bd38a, d...)
}

type AnimSetOrderTagEntry_Table struct {
	// Inherits GameBalanceTable
	// Inherits PolymorphicBase
	DwType   DT_UINT
	DwPad    DT_UINT
	TEntries DT_VARIABLEARRAY[*AnimSetOrderTagEntry]
}

func (t *AnimSetOrderTagEntry_Table) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TEntries, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *AnimSetOrderTagEntry_Table) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("TEntries", &t.TEntries, d...)
}

type InterpolationPath_RGBAColor struct {
	THeader      InterpolationPathHeader
	PtArrayNodes DT_VARIABLEARRAY[*InterpolationNode_RGBAColor]
}

func (t *InterpolationPath_RGBAColor) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.PtArrayNodes, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+56, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *InterpolationPath_RGBAColor) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("PtArrayNodes", &t.PtArrayNodes, d...)
}

type UIColorPickerStyleOptionalFieldMapDefaults struct {
	SzColorPickerOnChange DT_CSTRING[*DT_BYTE]
	SzSelectionCursor     DT_CSTRING[*DT_BYTE]
}

func (t *UIColorPickerStyleOptionalFieldMapDefaults) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SzColorPickerOnChange, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SzSelectionCursor, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *UIColorPickerStyleOptionalFieldMapDefaults) Walk(cb WalkCallback, d ...any) {
	cb.Do("SzColorPickerOnChange", &t.SzColorPickerOnChange, d...)
	cb.Do("SzSelectionCursor", &t.SzSelectionCursor, d...)
}

type MarkerObserverVolumeData struct {
	// Inherits MarkerDataBase
	// Inherits PolymorphicBase
	DwType                 DT_UINT
	DwPad                  DT_UINT
	EObserverVolumeShape   DT_ENUM
	SnoObserver            DT_SNO
	SnoObserverMount       DT_SNO
	SnoActivationCondition DT_SNO
	Unk_fef4192            DT_FLOAT
	Unk_838ae70            DT_INT
}

func (t *MarkerObserverVolumeData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.EObserverVolumeShape, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.SnoObserver, r, &Options{
		Flags: 1,
		Group: 26,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SnoObserverMount, r, &Options{
		Flags: 1,
		Group: 26,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.SnoActivationCondition, r, &Options{
		Flags: 1,
		Group: 51,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.Unk_fef4192, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.Unk_838ae70, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+40, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *MarkerObserverVolumeData) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("EObserverVolumeShape", &t.EObserverVolumeShape, d...)
	cb.Do("SnoObserver", &t.SnoObserver, d...)
	cb.Do("SnoObserverMount", &t.SnoObserverMount, d...)
	cb.Do("SnoActivationCondition", &t.SnoActivationCondition, d...)
	cb.Do("Unk_fef4192", &t.Unk_fef4192, d...)
	cb.Do("Unk_838ae70", &t.Unk_838ae70, d...)
}

type PrefabCustomization struct {
	SnoPrefab           DT_SNO
	ArCustomizedMarkers DT_VARIABLEARRAY[*PrefabCustomizedMarker]
}

func (t *PrefabCustomization) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoPrefab, r, &Options{
		Flags: 1,
		Group: 24,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.ArCustomizedMarkers, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PrefabCustomization) Walk(cb WalkCallback, d ...any) {
	cb.Do("SnoPrefab", &t.SnoPrefab, d...)
	cb.Do("ArCustomizedMarkers", &t.ArCustomizedMarkers, d...)
}

type PowerStartVariant struct {
	TName               DT_UINT
	Unk_73750d7         DT_INT
	BAutoCast           DT_INT
	BIgnoreRange        DT_INT
	BForceCast          DT_INT
	Unk_fca3b69         DT_INT
	ArPowerScriptParams DT_VARIABLEARRAY[*PowerScriptParam]
}

func (t *PowerStartVariant) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.TName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.Unk_73750d7, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.BAutoCast, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.BIgnoreRange, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BForceCast, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.Unk_fca3b69, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ArPowerScriptParams, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+40, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PowerStartVariant) Walk(cb WalkCallback, d ...any) {
	cb.Do("TName", &t.TName, d...)
	cb.Do("Unk_73750d7", &t.Unk_73750d7, d...)
	cb.Do("BAutoCast", &t.BAutoCast, d...)
	cb.Do("BIgnoreRange", &t.BIgnoreRange, d...)
	cb.Do("BForceCast", &t.BForceCast, d...)
	cb.Do("Unk_fca3b69", &t.Unk_fca3b69, d...)
	cb.Do("ArPowerScriptParams", &t.ArPowerScriptParams, d...)
}

type StoryboardUIControlSetAlphaTrack struct {
	// Inherits StoryboardUIControlSetValueTrack_float
	DwType          DT_UINT
	TNodeCollection StoryboardValueNodeCollection_float
	Unk_77ed19a     DT_ENUM
	DwPad           DT_UINT
}

func (t *StoryboardUIControlSetAlphaTrack) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TNodeCollection, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.Unk_77ed19a, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+56, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *StoryboardUIControlSetAlphaTrack) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("TNodeCollection", &t.TNodeCollection, d...)
	cb.Do("Unk_77ed19a", &t.Unk_77ed19a, d...)
	cb.Do("DwPad", &t.DwPad, d...)
}

type ActorItemData struct {
	SnoItemInventorySound                DT_SNO
	SnoSalvageSound                      DT_SNO
	SnoRepairSound                       DT_SNO
	SnoCraftedSound                      DT_SNO
	SnoPickupOverrideSound               DT_SNO
	SnoFlippySoundOverride               DT_SNO
	SnoFlippyLandingSound                DT_SNO
	SnoFlippyMouseoverSound              DT_SNO
	ArFoleyMaterialTags                  DT_FIXEDARRAY[*FoleyMaterialTag]
	Unk_472eb5b                          DT_SNO
	SnoLootFlippyParticle                DT_SNO
	SnoLootSpecialFlippyActor            DT_SNO
	FLootLaunchFlippyForwards            DT_INT
	FLootFlippyDontOverrideParticleActor DT_INT
	Unk_13d073c                          DT_INT
	FVisibleToAll                        DT_INT
	Unk_842ce3a                          DT_INT
	FlLootFlippyLandingHeight            DT_FLOAT
	Unk_62f6313                          DT_SNO
	Unk_221fdb7                          DT_SNO
	SnoPickupEffectGroup                 DT_SNO
	TAttachmentHardpointLink             HardpointLink
	Unk_204fa35                          DT_ENUM
	Unk_28e7959                          DT_INT
	Unk_1427368                          DT_INT
	THairStateDefault                    HairAndBeardState
	FUseClassHairStateOverrides          DT_INT
	Unk_54f6b16                          DT_INT
	TClassHairStateOverrides             DT_FIXEDARRAY[*HairAndBeardState]
	Unk_431ffb7                          DT_FIXEDARRAY[*Type_ab308a2d]
	SnoAttachedActor                     DT_SNO
	HDefaultImage                        DT_UINT
	HSocketedImage                       DT_UINT
	HSocketedActiveImage                 DT_UINT
	FMustKeepInInventory                 DT_INT
	FBottomless                          DT_INT
	EItemUseType                         DT_ENUM
	SnoPowerUpPower                      DT_SNO
	SnoItemUseLevelAreaRequirement       DT_SNO
	THardpointOffsets                    DT_FIXEDARRAY[*HardpointOffsets]
	THardpointMountedOffsets             DT_FIXEDARRAY[*HardpointOffsets]
	Unk_def7f43                          DT_VARIABLEARRAY[*HardpointOffset]
	TWeaponData                          ActorWeaponData
	TVisualInvData                       ActorVisualInventoryData
	Unk_e133e62                          DT_INT
	Unk_6990c4a                          DT_ENUM
}

func (t *ActorItemData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoItemInventorySound, r, &Options{
		Flags: 1,
		Group: 40,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.SnoSalvageSound, r, &Options{
		Flags: 1,
		Group: 40,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.SnoRepairSound, r, &Options{
		Flags: 1,
		Group: 40,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.SnoCraftedSound, r, &Options{
		Flags: 1,
		Group: 40,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoPickupOverrideSound, r, &Options{
		Flags: 1,
		Group: 40,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.SnoFlippySoundOverride, r, &Options{
		Flags: 1,
		Group: 40,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SnoFlippyLandingSound, r, &Options{
		Flags: 1,
		Group: 40,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.SnoFlippyMouseoverSound, r, &Options{
		Flags: 1,
		Group: 40,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.ArFoleyMaterialTags, r, &Options{
		ArrayLength: 5,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.Unk_472eb5b, r, &Options{
		Flags: 1,
		Group: 79,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.SnoLootFlippyParticle, r, &Options{
		Flags: 1,
		Group: 27,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+60, &t.SnoLootSpecialFlippyActor, r, &Options{
		Flags: 1,
		Group: 1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.FLootLaunchFlippyForwards, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.FLootFlippyDontOverrideParticleActor, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_13d073c, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.FVisibleToAll, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.Unk_842ce3a, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.FlLootFlippyLandingHeight, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.Unk_62f6313, r, &Options{
		Flags: 1,
		Group: 27,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.Unk_221fdb7, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.SnoPickupEffectGroup, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+100, &t.TAttachmentHardpointLink, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+108, &t.Unk_204fa35, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.Unk_28e7959, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+116, &t.Unk_1427368, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.THairStateDefault, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+144, &t.FUseClassHairStateOverrides, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+148, &t.Unk_54f6b16, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+152, &t.TClassHairStateOverrides, r, &Options{
		ArrayLength: 5,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+272, &t.Unk_431ffb7, r, &Options{
		ArrayLength: 5,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+392, &t.SnoAttachedActor, r, &Options{
		Flags: 1,
		Group: 1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+396, &t.HDefaultImage, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+400, &t.HSocketedImage, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+404, &t.HSocketedActiveImage, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+408, &t.FMustKeepInInventory, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+412, &t.FBottomless, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+416, &t.EItemUseType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+420, &t.SnoPowerUpPower, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+424, &t.SnoItemUseLevelAreaRequirement, r, &Options{
		Flags: 513,
		Group: 22,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+432, &t.THardpointOffsets, r, &Options{
		ArrayLength: 5,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+592, &t.THardpointMountedOffsets, r, &Options{
		ArrayLength: 5,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+752, &t.Unk_def7f43, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+768, &t.TWeaponData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+784, &t.TVisualInvData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+868, &t.Unk_e133e62, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+872, &t.Unk_6990c4a, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+880, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ActorItemData) Walk(cb WalkCallback, d ...any) {
	cb.Do("SnoItemInventorySound", &t.SnoItemInventorySound, d...)
	cb.Do("SnoSalvageSound", &t.SnoSalvageSound, d...)
	cb.Do("SnoRepairSound", &t.SnoRepairSound, d...)
	cb.Do("SnoCraftedSound", &t.SnoCraftedSound, d...)
	cb.Do("SnoPickupOverrideSound", &t.SnoPickupOverrideSound, d...)
	cb.Do("SnoFlippySoundOverride", &t.SnoFlippySoundOverride, d...)
	cb.Do("SnoFlippyLandingSound", &t.SnoFlippyLandingSound, d...)
	cb.Do("SnoFlippyMouseoverSound", &t.SnoFlippyMouseoverSound, d...)
	cb.Do("ArFoleyMaterialTags", &t.ArFoleyMaterialTags, d...)
	cb.Do("Unk_472eb5b", &t.Unk_472eb5b, d...)
	cb.Do("SnoLootFlippyParticle", &t.SnoLootFlippyParticle, d...)
	cb.Do("SnoLootSpecialFlippyActor", &t.SnoLootSpecialFlippyActor, d...)
	cb.Do("FLootLaunchFlippyForwards", &t.FLootLaunchFlippyForwards, d...)
	cb.Do("FLootFlippyDontOverrideParticleActor", &t.FLootFlippyDontOverrideParticleActor, d...)
	cb.Do("Unk_13d073c", &t.Unk_13d073c, d...)
	cb.Do("FVisibleToAll", &t.FVisibleToAll, d...)
	cb.Do("Unk_842ce3a", &t.Unk_842ce3a, d...)
	cb.Do("FlLootFlippyLandingHeight", &t.FlLootFlippyLandingHeight, d...)
	cb.Do("Unk_62f6313", &t.Unk_62f6313, d...)
	cb.Do("Unk_221fdb7", &t.Unk_221fdb7, d...)
	cb.Do("SnoPickupEffectGroup", &t.SnoPickupEffectGroup, d...)
	cb.Do("TAttachmentHardpointLink", &t.TAttachmentHardpointLink, d...)
	cb.Do("Unk_204fa35", &t.Unk_204fa35, d...)
	cb.Do("Unk_28e7959", &t.Unk_28e7959, d...)
	cb.Do("Unk_1427368", &t.Unk_1427368, d...)
	cb.Do("THairStateDefault", &t.THairStateDefault, d...)
	cb.Do("FUseClassHairStateOverrides", &t.FUseClassHairStateOverrides, d...)
	cb.Do("Unk_54f6b16", &t.Unk_54f6b16, d...)
	cb.Do("TClassHairStateOverrides", &t.TClassHairStateOverrides, d...)
	cb.Do("Unk_431ffb7", &t.Unk_431ffb7, d...)
	cb.Do("SnoAttachedActor", &t.SnoAttachedActor, d...)
	cb.Do("HDefaultImage", &t.HDefaultImage, d...)
	cb.Do("HSocketedImage", &t.HSocketedImage, d...)
	cb.Do("HSocketedActiveImage", &t.HSocketedActiveImage, d...)
	cb.Do("FMustKeepInInventory", &t.FMustKeepInInventory, d...)
	cb.Do("FBottomless", &t.FBottomless, d...)
	cb.Do("EItemUseType", &t.EItemUseType, d...)
	cb.Do("SnoPowerUpPower", &t.SnoPowerUpPower, d...)
	cb.Do("SnoItemUseLevelAreaRequirement", &t.SnoItemUseLevelAreaRequirement, d...)
	cb.Do("THardpointOffsets", &t.THardpointOffsets, d...)
	cb.Do("THardpointMountedOffsets", &t.THardpointMountedOffsets, d...)
	cb.Do("Unk_def7f43", &t.Unk_def7f43, d...)
	cb.Do("TWeaponData", &t.TWeaponData, d...)
	cb.Do("TVisualInvData", &t.TVisualInvData, d...)
	cb.Do("Unk_e133e62", &t.Unk_e133e62, d...)
	cb.Do("Unk_6990c4a", &t.Unk_6990c4a, d...)
}

type Type_56ff7d6a struct {
	ArSeasons DT_VARIABLEARRAY[*DT_SNO]
}

func (t *Type_56ff7d6a) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.ArSeasons, r, &Options{
		Flags: 513,
		Group: 137,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_56ff7d6a) Walk(cb WalkCallback, d ...any) {
	cb.Do("ArSeasons", &t.ArSeasons, d...)
}

type TrackedQuestChangedMessage struct {
	THeader         RequiredMessageHeader
	AnnPlayer       DT_ACD_NETWORK_NAME
	SnoTrackedQuest DT_SNO
}

func (t *TrackedQuestChangedMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.AnnPlayer, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SnoTrackedQuest, r, &Options{
		Flags: 1,
		Group: 31,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+28, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TrackedQuestChangedMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("AnnPlayer", &t.AnnPlayer, d...)
	cb.Do("SnoTrackedQuest", &t.SnoTrackedQuest, d...)
}

type ParagonGlyphDefinition struct {
	HIcon               DT_UINT
	NStartingSize       DT_UINT
	ArSizeUpgradeLevels DT_VARIABLEARRAY[*DT_UINT]
	NMaxLevel           DT_UINT
	ERarity             DT_ENUM
	FUsableByClass      DT_FIXEDARRAY[*DT_INT]
	ArAffixes           DT_VARIABLEARRAY[*DT_SNO]
}

func (t *ParagonGlyphDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.HIcon, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.NStartingSize, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.ArSizeUpgradeLevels, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.NMaxLevel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.ERarity, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.FUsableByClass, r, &Options{
		ArrayLength: 5,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.ArAffixes, r, &Options{
		Flags: 1,
		Group: 112,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+80, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ParagonGlyphDefinition) Walk(cb WalkCallback, d ...any) {
	cb.Do("HIcon", &t.HIcon, d...)
	cb.Do("NStartingSize", &t.NStartingSize, d...)
	cb.Do("ArSizeUpgradeLevels", &t.ArSizeUpgradeLevels, d...)
	cb.Do("NMaxLevel", &t.NMaxLevel, d...)
	cb.Do("ERarity", &t.ERarity, d...)
	cb.Do("FUsableByClass", &t.FUsableByClass, d...)
	cb.Do("ArAffixes", &t.ArAffixes, d...)
}

type Type_572f201c struct {
	// Inherits PowerPhaseBase
	// Inherits PolymorphicBase
	DwType       DT_UINT
	DwPad        DT_UINT
	TPhaseName   DT_UINT
	ArPhaseJumps DT_POLYMORPHIC_VARIABLEARRAY[*DT_INT64]
	Unk_d0d932b  DT_INT
	Unk_9a8200e  DT_INT
}

func (t *Type_572f201c) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TPhaseName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ArPhaseJumps, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.Unk_d0d932b, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.Unk_9a8200e, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+56, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_572f201c) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("TPhaseName", &t.TPhaseName, d...)
	cb.Do("ArPhaseJumps", &t.ArPhaseJumps, d...)
	cb.Do("Unk_d0d932b", &t.Unk_d0d932b, d...)
	cb.Do("Unk_9a8200e", &t.Unk_9a8200e, d...)
}

type ACDSyncBuffsMessage struct {
	THeader                       RequiredMessageHeader
	Ann                           DT_ACD_NETWORK_NAME
	Unk_35403b1                   DT_INT
	ArBuffs                       DT_FIXEDARRAY[*ACDBuffSyncedData]
	TEnterKnownLookOverrides      DT_OPTIONAL[*EnterKnownLookOverrides]
	TEnterKnownShaderMapOverrides DT_OPTIONAL[*EnterKnownShaderMapOverrides]
}

func (t *ACDSyncBuffsMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Ann, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_35403b1, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.ArBuffs, r, &Options{
		ArrayLength: 15,
		Flags:       8,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1652, &t.TEnterKnownLookOverrides, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1704, &t.TEnterKnownShaderMapOverrides, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+1732, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ACDSyncBuffsMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("Ann", &t.Ann, d...)
	cb.Do("Unk_35403b1", &t.Unk_35403b1, d...)
	cb.Do("ArBuffs", &t.ArBuffs, d...)
	cb.Do("TEnterKnownLookOverrides", &t.TEnterKnownLookOverrides, d...)
	cb.Do("TEnterKnownShaderMapOverrides", &t.TEnterKnownShaderMapOverrides, d...)
}

type AllLogicSubcondition struct {
	// Inherits LogicSubcondition
	// Inherits Subcondition
	// Inherits PolymorphicBase
	DwType       DT_UINT
	BNegate      DT_INT
	DwPad        DT_UINT
	ArConditions DT_POLYMORPHIC_VARIABLEARRAY[*DT_INT64]
}

func (t *AllLogicSubcondition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BNegate, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ArConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *AllLogicSubcondition) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("BNegate", &t.BNegate, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("ArConditions", &t.ArConditions, d...)
}

type MonsterFamilySubcondition struct {
	// Inherits Subcondition
	// Inherits PolymorphicBase
	DwType           DT_UINT
	BNegate          DT_INT
	DwPad            DT_UINT
	SnoMonsterFamily DT_SNO
	SzArchetype      DT_UINT
	EActorToEvaluate DT_ENUM
}

func (t *MonsterFamilySubcondition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BNegate, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SnoMonsterFamily, r, &Options{
		Flags: 513,
		Group: 82,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.SzArchetype, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.EActorToEvaluate, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+40, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *MonsterFamilySubcondition) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("BNegate", &t.BNegate, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("SnoMonsterFamily", &t.SnoMonsterFamily, d...)
	cb.Do("SzArchetype", &t.SzArchetype, d...)
	cb.Do("EActorToEvaluate", &t.EActorToEvaluate, d...)
}

type GlobalTownPortalCosmetics struct {
	// Inherits GlobalBase
	// Inherits PolymorphicBase
	DwType      DT_UINT
	DwPad       DT_UINT
	Unk_8739cc1 DT_VARIABLEARRAY[*DT_SNO]
}

func (t *GlobalTownPortalCosmetics) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_8739cc1, r, &Options{
		Flags: 1,
		Group: 146,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *GlobalTownPortalCosmetics) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("Unk_8739cc1", &t.Unk_8739cc1, d...)
}

type ArmorPactTypeWeight struct {
	GbidArmorPactType DT_GBID
	FlWeight          DT_FLOAT
}

func (t *ArmorPactTypeWeight) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.GbidArmorPactType, r, &Options{
		Flags: 1,
		Group: 68,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.FlWeight, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ArmorPactTypeWeight) Walk(cb WalkCallback, d ...any) {
	cb.Do("GbidArmorPactType", &t.GbidArmorPactType, d...)
	cb.Do("FlWeight", &t.FlWeight, d...)
}

type GizmoMessage struct {
	THeader        RequiredCommandFrameMessageHeader
	AnnGizmo       DT_ACD_NETWORK_NAME
	DwGizmoContext DT_OPTIONAL[*DT_UINT]
}

func (t *GizmoMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.AnnGizmo, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.DwGizmoContext, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+36, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *GizmoMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("AnnGizmo", &t.AnnGizmo, d...)
	cb.Do("DwGizmoContext", &t.DwGizmoContext, d...)
}

type ActorGroupData_Table struct {
	// Inherits GameBalanceTable
	// Inherits PolymorphicBase
	DwType   DT_UINT
	DwPad    DT_UINT
	TEntries DT_VARIABLEARRAY[*ActorGroupData]
}

func (t *ActorGroupData_Table) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TEntries, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ActorGroupData_Table) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("TEntries", &t.TEntries, d...)
}

type TraceMessage struct {
	TTraceId        Type_f5ac91bb
	SzSpanId        DT_CHARARRAY
	DwGameAccountId DT_UINT
	SzName          DT_CHARARRAY
	FIsTracked      DT_INT
}

func (t *TraceMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.TTraceId, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SzSpanId, r, &Options{
		ArrayLength: 17,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.DwGameAccountId, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.SzName, r, &Options{
		ArrayLength: 33,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.FIsTracked, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+80, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TraceMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("TTraceId", &t.TTraceId, d...)
	cb.Do("SzSpanId", &t.SzSpanId, d...)
	cb.Do("DwGameAccountId", &t.DwGameAccountId, d...)
	cb.Do("SzName", &t.SzName, d...)
	cb.Do("FIsTracked", &t.FIsTracked, d...)
}

type Type_5887daa1 struct {
	Unk_52f2d9         StringLabelHandleEx
	SzTOSLink          DT_CSTRING[*DT_BYTE]
	SzRefundPolicyLink DT_CSTRING[*DT_BYTE]
}

func (t *Type_5887daa1) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Unk_52f2d9, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.SzTOSLink, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SzRefundPolicyLink, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+40, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_5887daa1) Walk(cb WalkCallback, d ...any) {
	cb.Do("Unk_52f2d9", &t.Unk_52f2d9, d...)
	cb.Do("SzTOSLink", &t.SzTOSLink, d...)
	cb.Do("SzRefundPolicyLink", &t.SzRefundPolicyLink, d...)
}

type TriggerEventActorPlayAnimation struct {
	// Inherits TriggerEventRangedDuration
	// Inherits TriggerEvent
	// Inherits PolymorphicBase
	DwType             DT_UINT
	TConditions        TriggerConditions
	FGenerated         DT_INT
	Unk_6cba752        DT_INT
	DwParentActorID    DT_UINT
	TDuration          DT_FLOAT
	DwTriggerFlags     DT_UINT
	DwTriggerFlagsEx   DT_UINT
	TCleanup           TriggerCleanup
	Unk_49e9257        DT_INT
	Unk_5490979        DT_INT
	DwPad              DT_UINT
	Unk_f3d6423        DT_ENUM
	Unk_478755b        DT_ENUM
	Unk_4d01218        DT_FLOAT
	Unk_84dd910        DT_FLOAT
	DwActorID          DT_UINT
	EAnimLayerMode     DT_ENUM
	Unk_9209538        DT_ENUM
	Unk_a5153a1        DT_INT
	BUsePowerAnimLayer DT_INT
	Unk_9b2ead         DT_INT
	SnonameAnim        DT_SNO_NAME
	Unk_85269a4        DT_INT
	FRandomPermutation DT_INT
	NPermutationIndex  DT_INT
	Unk_32a328c        DT_INT
	FlAnimSpeedScale   DT_FLOAT
	DwAnimWeight       DT_BYTE
	EAnimLoopMode      DT_ENUM
	Unk_c86af88        DT_FLOAT
	Unk_396c7d1        DT_FLOAT
	Unk_515279b        DT_INT
	SzLocatorName      DT_UINT
	FlLocatorBlend     DT_FLOAT
}

func (t *TriggerEventActorPlayAnimation) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.FGenerated, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_6cba752, r, &Options{Flags: 16}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.DwParentActorID, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.TDuration, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.DwTriggerFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.DwTriggerFlagsEx, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.TCleanup, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+116, &t.Unk_49e9257, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.Unk_5490979, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+124, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.Unk_f3d6423, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+132, &t.Unk_478755b, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+136, &t.Unk_4d01218, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+140, &t.Unk_84dd910, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+144, &t.DwActorID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+148, &t.EAnimLayerMode, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+152, &t.Unk_9209538, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+156, &t.Unk_a5153a1, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+160, &t.BUsePowerAnimLayer, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+164, &t.Unk_9b2ead, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+168, &t.SnonameAnim, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+176, &t.Unk_85269a4, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+180, &t.FRandomPermutation, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+184, &t.NPermutationIndex, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+188, &t.Unk_32a328c, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+192, &t.FlAnimSpeedScale, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+196, &t.DwAnimWeight, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+200, &t.EAnimLoopMode, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+204, &t.Unk_c86af88, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+208, &t.Unk_396c7d1, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+212, &t.Unk_515279b, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+216, &t.SzLocatorName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+220, &t.FlLocatorBlend, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+224, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TriggerEventActorPlayAnimation) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("TConditions", &t.TConditions, d...)
	cb.Do("FGenerated", &t.FGenerated, d...)
	cb.Do("Unk_6cba752", &t.Unk_6cba752, d...)
	cb.Do("DwParentActorID", &t.DwParentActorID, d...)
	cb.Do("TDuration", &t.TDuration, d...)
	cb.Do("DwTriggerFlags", &t.DwTriggerFlags, d...)
	cb.Do("DwTriggerFlagsEx", &t.DwTriggerFlagsEx, d...)
	cb.Do("TCleanup", &t.TCleanup, d...)
	cb.Do("Unk_49e9257", &t.Unk_49e9257, d...)
	cb.Do("Unk_5490979", &t.Unk_5490979, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("Unk_f3d6423", &t.Unk_f3d6423, d...)
	cb.Do("Unk_478755b", &t.Unk_478755b, d...)
	cb.Do("Unk_4d01218", &t.Unk_4d01218, d...)
	cb.Do("Unk_84dd910", &t.Unk_84dd910, d...)
	cb.Do("DwActorID", &t.DwActorID, d...)
	cb.Do("EAnimLayerMode", &t.EAnimLayerMode, d...)
	cb.Do("Unk_9209538", &t.Unk_9209538, d...)
	cb.Do("Unk_a5153a1", &t.Unk_a5153a1, d...)
	cb.Do("BUsePowerAnimLayer", &t.BUsePowerAnimLayer, d...)
	cb.Do("Unk_9b2ead", &t.Unk_9b2ead, d...)
	cb.Do("SnonameAnim", &t.SnonameAnim, d...)
	cb.Do("Unk_85269a4", &t.Unk_85269a4, d...)
	cb.Do("FRandomPermutation", &t.FRandomPermutation, d...)
	cb.Do("NPermutationIndex", &t.NPermutationIndex, d...)
	cb.Do("Unk_32a328c", &t.Unk_32a328c, d...)
	cb.Do("FlAnimSpeedScale", &t.FlAnimSpeedScale, d...)
	cb.Do("DwAnimWeight", &t.DwAnimWeight, d...)
	cb.Do("EAnimLoopMode", &t.EAnimLoopMode, d...)
	cb.Do("Unk_c86af88", &t.Unk_c86af88, d...)
	cb.Do("Unk_396c7d1", &t.Unk_396c7d1, d...)
	cb.Do("Unk_515279b", &t.Unk_515279b, d...)
	cb.Do("SzLocatorName", &t.SzLocatorName, d...)
	cb.Do("FlLocatorBlend", &t.FlLocatorBlend, d...)
}

type DemonSummoningQuestBucket_Table struct {
	// Inherits GameBalanceTable
	// Inherits PolymorphicBase
	DwType   DT_UINT
	DwPad    DT_UINT
	TEntries DT_VARIABLEARRAY[*DemonSummoningQuestBucket]
}

func (t *DemonSummoningQuestBucket_Table) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TEntries, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *DemonSummoningQuestBucket_Table) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("TEntries", &t.TEntries, d...)
}

type ScriptEventParamSpawnerParentName struct {
	// Inherits ScriptEventParamBase
	// Inherits PolymorphicBase
	DwType       DT_UINT
	EParamType   DT_ENUM
	DwPad        DT_UINT
	DwParentHash DT_UINT
	SzParent     DT_CSTRING[*DT_BYTE]
}

func (t *ScriptEventParamSpawnerParentName) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.EParamType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.DwParentHash, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.SzParent, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ScriptEventParamSpawnerParentName) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("EParamType", &t.EParamType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("DwParentHash", &t.DwParentHash, d...)
	cb.Do("SzParent", &t.SzParent, d...)
}

type ScriptEventParamSpawnerParentSelf struct {
	// Inherits ScriptEventParamBase
	// Inherits PolymorphicBase
	DwType     DT_UINT
	EParamType DT_ENUM
	DwPad      DT_UINT
}

func (t *ScriptEventParamSpawnerParentSelf) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.EParamType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ScriptEventParamSpawnerParentSelf) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("EParamType", &t.EParamType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
}

type MarkerSplineData struct {
	// Inherits MarkerDataBase
	// Inherits PolymorphicBase
	DwType             DT_UINT
	DwPad              DT_UINT
	EInterpolationMode DT_ENUM
	Unk_a3f1699        DT_FLOAT
}

func (t *MarkerSplineData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.EInterpolationMode, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.Unk_a3f1699, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *MarkerSplineData) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("EInterpolationMode", &t.EInterpolationMode, d...)
	cb.Do("Unk_a3f1699", &t.Unk_a3f1699, d...)
}

type ClassPassiveSkillSlotData struct {
	TUnlockCondition ConditionWrapper
}

func (t *ClassPassiveSkillSlotData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.TUnlockCondition, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ClassPassiveSkillSlotData) Walk(cb WalkCallback, d ...any) {
	cb.Do("TUnlockCondition", &t.TUnlockCondition, d...)
}

type UIThumbButtonStyle struct {
	// Inherits UIButtonStyle
	// Inherits UITextStyle
	// Inherits UIWindowStyle
	// Inherits UIControlStyle
	// Inherits PolymorphicBase
	DwType                      DT_UINT
	DwPad                       DT_UINT
	HParentStyle                UIControlHandle
	Unk_441f783                 DT_INT64
	M_eHasModifiedPowerTagMap   DT_TAGMAP[*DT_ENUM]
	TConsoleInput               UIControlConsoleInput
	Unk_b4f614c                 DT_TAGMAP[*DT_ENUM]
	TFont                       UIControlFont
	PtUIControlTagMapIconLabels DT_TAGMAP[*DT_ENUM]
	TIcon                       UIControlIcon
	TClickSounds                UIControlClickSounds
	Unk_10f81f0                 DT_TAGMAP[*DT_ENUM]
}

func (t *UIThumbButtonStyle) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.HParentStyle, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_441f783, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.M_eHasModifiedPowerTagMap, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.TConsoleInput, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.Unk_b4f614c, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.TFont, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.PtUIControlTagMapIconLabels, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.TIcon, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.TClickSounds, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+144, &t.Unk_10f81f0, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+160, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *UIThumbButtonStyle) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("HParentStyle", &t.HParentStyle, d...)
	cb.Do("Unk_441f783", &t.Unk_441f783, d...)
	cb.Do("M_eHasModifiedPowerTagMap", &t.M_eHasModifiedPowerTagMap, d...)
	cb.Do("TConsoleInput", &t.TConsoleInput, d...)
	cb.Do("Unk_b4f614c", &t.Unk_b4f614c, d...)
	cb.Do("TFont", &t.TFont, d...)
	cb.Do("PtUIControlTagMapIconLabels", &t.PtUIControlTagMapIconLabels, d...)
	cb.Do("TIcon", &t.TIcon, d...)
	cb.Do("TClickSounds", &t.TClickSounds, d...)
	cb.Do("Unk_10f81f0", &t.Unk_10f81f0, d...)
}

type NPCComponentSetDefinition struct {
	ArAppearances                DT_VARIABLEARRAY[*DT_SNO]
	ArSkinColors                 DT_VARIABLEARRAY[*DT_INT]
	ArHairColors                 DT_VARIABLEARRAY[*DT_INT]
	ArEquipmentDyes              DT_VARIABLEARRAY[*DT_SNO]
	ArLegFoleyComponentOverrides DT_VARIABLEARRAY[*NPCLegFoleyMaterialOverride]
	ArLegFootstepTypeOverrides   DT_VARIABLEARRAY[*NPCLegFootstepTypeOverride]
	Unk_7cdd390                  DT_FIXEDARRAY[*DT_VARIABLEARRAY[*DT_UINT]]
	Unk_8bee334                  DT_FIXEDARRAY[*DT_VARIABLEARRAY[*DT_INT]]
	Unk_2e94cee                  DT_VARIABLEARRAY[*Type_9b106a7f]
	Unk_395e53                   DT_VARIABLEARRAY[*Type_1109bb04]
	Unk_3810f4                   DT_VARIABLEARRAY[*Type_1f34a5e5]
	TDefaultLegFoleyMaterialTag  FoleyMaterialTag
	EDefaultLegFootstepType      DT_ENUM
}

func (t *NPCComponentSetDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.ArAppearances, r, &Options{
		Flags: 1,
		Group: 9,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ArSkinColors, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.ArHairColors, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.ArEquipmentDyes, r, &Options{
		Flags: 1,
		Group: 122,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.ArLegFoleyComponentOverrides, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.ArLegFootstepTypeOverrides, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+104, &t.Unk_7cdd390, r, &Options{ArrayLength: 4}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+168, &t.Unk_8bee334, r, &Options{ArrayLength: 4}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+232, &t.Unk_2e94cee, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+248, &t.Unk_395e53, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+264, &t.Unk_3810f4, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+280, &t.TDefaultLegFoleyMaterialTag, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+284, &t.EDefaultLegFootstepType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+288, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *NPCComponentSetDefinition) Walk(cb WalkCallback, d ...any) {
	cb.Do("ArAppearances", &t.ArAppearances, d...)
	cb.Do("ArSkinColors", &t.ArSkinColors, d...)
	cb.Do("ArHairColors", &t.ArHairColors, d...)
	cb.Do("ArEquipmentDyes", &t.ArEquipmentDyes, d...)
	cb.Do("ArLegFoleyComponentOverrides", &t.ArLegFoleyComponentOverrides, d...)
	cb.Do("ArLegFootstepTypeOverrides", &t.ArLegFootstepTypeOverrides, d...)
	cb.Do("Unk_7cdd390", &t.Unk_7cdd390, d...)
	cb.Do("Unk_8bee334", &t.Unk_8bee334, d...)
	cb.Do("Unk_2e94cee", &t.Unk_2e94cee, d...)
	cb.Do("Unk_395e53", &t.Unk_395e53, d...)
	cb.Do("Unk_3810f4", &t.Unk_3810f4, d...)
	cb.Do("TDefaultLegFoleyMaterialTag", &t.TDefaultLegFoleyMaterialTag, d...)
	cb.Do("EDefaultLegFootstepType", &t.EDefaultLegFootstepType, d...)
}

type ParagonGlyphUpgradeMessage struct {
	THeader     RequiredMessageHeader
	SnoGlyph    DT_SNO
	Unk_6499985 DT_UINT
}

func (t *ParagonGlyphUpgradeMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoGlyph, r, &Options{
		Flags: 1,
		Group: 111,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.Unk_6499985, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ParagonGlyphUpgradeMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("SnoGlyph", &t.SnoGlyph, d...)
	cb.Do("Unk_6499985", &t.Unk_6499985, d...)
}

type HorizontalTiledWindowPieces struct {
	// Inherits WindowPiecesBase
	// Inherits PolymorphicBase
	DwType       DT_UINT
	DwPad        DT_UINT
	FlImageScale DT_FLOAT
	NPadding     DT_UINT
	HPieceLeft   DT_UINT
	HPieceRight  DT_UINT
	HPieceMiddle DT_UINT
}

func (t *HorizontalTiledWindowPieces) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.FlImageScale, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.NPadding, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.HPieceLeft, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.HPieceRight, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.HPieceMiddle, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+40, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *HorizontalTiledWindowPieces) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("FlImageScale", &t.FlImageScale, d...)
	cb.Do("NPadding", &t.NPadding, d...)
	cb.Do("HPieceLeft", &t.HPieceLeft, d...)
	cb.Do("HPieceRight", &t.HPieceRight, d...)
	cb.Do("HPieceMiddle", &t.HPieceMiddle, d...)
}

type ClanLabel struct {
	SzName     DT_UINT
	ELabelType DT_ENUM
	BEnabled   DT_INT
}

func (t *ClanLabel) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SzName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.ELabelType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.BEnabled, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+12, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ClanLabel) Walk(cb WalkCallback, d ...any) {
	cb.Do("SzName", &t.SzName, d...)
	cb.Do("ELabelType", &t.ELabelType, d...)
	cb.Do("BEnabled", &t.BEnabled, d...)
}

type TerritoryRegionParams struct {
	SnoTexPattern         DT_SNO
	RgbaColor             DT_RGBACOLOR
	Unk_4b95c37           DT_FLOAT
	Unk_be4fdf8           DT_FLOAT
	FlTextureRepeatLength DT_FLOAT
	FlFadeInTime          DT_FLOAT
}

func (t *TerritoryRegionParams) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoTexPattern, r, &Options{
		Flags: 1,
		Group: 44,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.RgbaColor, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.Unk_4b95c37, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.Unk_be4fdf8, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.FlTextureRepeatLength, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.FlFadeInTime, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TerritoryRegionParams) Walk(cb WalkCallback, d ...any) {
	cb.Do("SnoTexPattern", &t.SnoTexPattern, d...)
	cb.Do("RgbaColor", &t.RgbaColor, d...)
	cb.Do("Unk_4b95c37", &t.Unk_4b95c37, d...)
	cb.Do("Unk_be4fdf8", &t.Unk_be4fdf8, d...)
	cb.Do("FlTextureRepeatLength", &t.FlTextureRepeatLength, d...)
	cb.Do("FlFadeInTime", &t.FlFadeInTime, d...)
}

type AccountDefinition struct {
	PProtoData DT_VARIABLEARRAY[*DT_BYTE]
}

func (t *AccountDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.PProtoData, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *AccountDefinition) Walk(cb WalkCallback, d ...any) {
	cb.Do("PProtoData", &t.PProtoData, d...)
}

type UIComboBoxStyle struct {
	// Inherits UIWindowStyle
	// Inherits UIControlStyle
	// Inherits PolymorphicBase
	DwType                    DT_UINT
	DwPad                     DT_UINT
	HParentStyle              UIControlHandle
	Unk_441f783               DT_INT64
	M_eHasModifiedPowerTagMap DT_TAGMAP[*DT_ENUM]
	TConsoleInput             UIControlConsoleInput
	Unk_b4f614c               DT_TAGMAP[*DT_ENUM]
	TClickSounds              UIControlClickSounds
	TFont                     UIControlFont
	Unk_6657a4d               DT_TAGMAP[*DT_ENUM]
}

func (t *UIComboBoxStyle) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.HParentStyle, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_441f783, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.M_eHasModifiedPowerTagMap, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.TConsoleInput, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.Unk_b4f614c, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.TClickSounds, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.TFont, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.Unk_6657a4d, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+128, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *UIComboBoxStyle) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("HParentStyle", &t.HParentStyle, d...)
	cb.Do("Unk_441f783", &t.Unk_441f783, d...)
	cb.Do("M_eHasModifiedPowerTagMap", &t.M_eHasModifiedPowerTagMap, d...)
	cb.Do("TConsoleInput", &t.TConsoleInput, d...)
	cb.Do("Unk_b4f614c", &t.Unk_b4f614c, d...)
	cb.Do("TClickSounds", &t.TClickSounds, d...)
	cb.Do("TFont", &t.TFont, d...)
	cb.Do("Unk_6657a4d", &t.Unk_6657a4d, d...)
}

type SwitchGizmoData struct {
	// Inherits NamedGizmoData
	// Inherits ActorGizmoData
	// Inherits PolymorphicBase
	DwType                           DT_UINT
	DwPad                            DT_UINT
	FDisableNonFriendlyOperation     DT_INT
	FWalkToCenter                    DT_INT
	FGizmoStartsDisabled             DT_INT
	FUseStringListName               DT_INT
	FForceMinimapIcon                DT_INT
	FlOperationRadius                DT_FLOAT
	Unk_d0b1df5                      DT_FLOAT
	FlGizmoUseTime                   DT_FLOAT
	SnoChannelingEffect              DT_SNO
	Unk_2767229                      DT_INT
	FGizmoShowProgressBar            DT_INT
	Unk_6d9ebe1                      DT_INT
	Unk_5456245                      DT_INT
	Unk_af5815a                      DT_INT
	SnoOnClickEffect                 DT_SNO
	SnoPickedUpEffect                DT_SNO
	SnoDropOnGroundEffect            DT_SNO
	TConditionData                   GizmoConditionData
	SnoPowerOperator                 DT_SNO
	SnoPowerOperate                  DT_SNO
	SnoPowerOperatorActive           DT_SNO
	SnoPowerOperateActive            DT_SNO
	Unk_359810e                      DT_INT
	NCooldown                        DT_UINT
	Unk_9c8478e                      DT_UINT
	Unk_d45ed2d                      DT_INT
	Unk_f6b20b7                      DT_INT
	Unk_54513b8                      DT_INT
	Unk_fd1f378                      DT_UINT
	HGizmoOperateFlavorTextMsgLabel  DT_UINT
	HGizmoOperateDescriptionMsgLabel DT_UINT
	FlGizmoOperateOffset             DT_FLOAT
	Unk_ab58cd3                      DT_ENUM
	Unk_91a3966                      DT_UINT
	HGizmoChannelingLabel            DT_UINT
	Unk_4be4371                      DT_INT
	TLockData                        LockingGizmoData
	TSwitchBehaviorData              SwitchBehaviorGizmoData
	FSwitchCanOperateMultipleTimes   DT_INT
}

func (t *SwitchGizmoData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.FDisableNonFriendlyOperation, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.FWalkToCenter, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.FGizmoStartsDisabled, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.FUseStringListName, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.FForceMinimapIcon, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.FlOperationRadius, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.Unk_d0b1df5, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.FlGizmoUseTime, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.SnoChannelingEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.Unk_2767229, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.FGizmoShowProgressBar, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+60, &t.Unk_6d9ebe1, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.Unk_5456245, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.Unk_af5815a, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.SnoOnClickEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.SnoPickedUpEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.SnoDropOnGroundEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.TConditionData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.SnoPowerOperator, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.SnoPowerOperate, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.SnoPowerOperatorActive, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+100, &t.SnoPowerOperateActive, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+104, &t.Unk_359810e, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+108, &t.NCooldown, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.Unk_9c8478e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+116, &t.Unk_d45ed2d, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.Unk_f6b20b7, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+124, &t.Unk_54513b8, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.Unk_fd1f378, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+132, &t.HGizmoOperateFlavorTextMsgLabel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+136, &t.HGizmoOperateDescriptionMsgLabel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+140, &t.FlGizmoOperateOffset, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+144, &t.Unk_ab58cd3, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+148, &t.Unk_91a3966, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+152, &t.HGizmoChannelingLabel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+156, &t.Unk_4be4371, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+160, &t.TLockData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+196, &t.TSwitchBehaviorData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+200, &t.FSwitchCanOperateMultipleTimes, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+208, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *SwitchGizmoData) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("FDisableNonFriendlyOperation", &t.FDisableNonFriendlyOperation, d...)
	cb.Do("FWalkToCenter", &t.FWalkToCenter, d...)
	cb.Do("FGizmoStartsDisabled", &t.FGizmoStartsDisabled, d...)
	cb.Do("FUseStringListName", &t.FUseStringListName, d...)
	cb.Do("FForceMinimapIcon", &t.FForceMinimapIcon, d...)
	cb.Do("FlOperationRadius", &t.FlOperationRadius, d...)
	cb.Do("Unk_d0b1df5", &t.Unk_d0b1df5, d...)
	cb.Do("FlGizmoUseTime", &t.FlGizmoUseTime, d...)
	cb.Do("SnoChannelingEffect", &t.SnoChannelingEffect, d...)
	cb.Do("Unk_2767229", &t.Unk_2767229, d...)
	cb.Do("FGizmoShowProgressBar", &t.FGizmoShowProgressBar, d...)
	cb.Do("Unk_6d9ebe1", &t.Unk_6d9ebe1, d...)
	cb.Do("Unk_5456245", &t.Unk_5456245, d...)
	cb.Do("Unk_af5815a", &t.Unk_af5815a, d...)
	cb.Do("SnoOnClickEffect", &t.SnoOnClickEffect, d...)
	cb.Do("SnoPickedUpEffect", &t.SnoPickedUpEffect, d...)
	cb.Do("SnoDropOnGroundEffect", &t.SnoDropOnGroundEffect, d...)
	cb.Do("TConditionData", &t.TConditionData, d...)
	cb.Do("SnoPowerOperator", &t.SnoPowerOperator, d...)
	cb.Do("SnoPowerOperate", &t.SnoPowerOperate, d...)
	cb.Do("SnoPowerOperatorActive", &t.SnoPowerOperatorActive, d...)
	cb.Do("SnoPowerOperateActive", &t.SnoPowerOperateActive, d...)
	cb.Do("Unk_359810e", &t.Unk_359810e, d...)
	cb.Do("NCooldown", &t.NCooldown, d...)
	cb.Do("Unk_9c8478e", &t.Unk_9c8478e, d...)
	cb.Do("Unk_d45ed2d", &t.Unk_d45ed2d, d...)
	cb.Do("Unk_f6b20b7", &t.Unk_f6b20b7, d...)
	cb.Do("Unk_54513b8", &t.Unk_54513b8, d...)
	cb.Do("Unk_fd1f378", &t.Unk_fd1f378, d...)
	cb.Do("HGizmoOperateFlavorTextMsgLabel", &t.HGizmoOperateFlavorTextMsgLabel, d...)
	cb.Do("HGizmoOperateDescriptionMsgLabel", &t.HGizmoOperateDescriptionMsgLabel, d...)
	cb.Do("FlGizmoOperateOffset", &t.FlGizmoOperateOffset, d...)
	cb.Do("Unk_ab58cd3", &t.Unk_ab58cd3, d...)
	cb.Do("Unk_91a3966", &t.Unk_91a3966, d...)
	cb.Do("HGizmoChannelingLabel", &t.HGizmoChannelingLabel, d...)
	cb.Do("Unk_4be4371", &t.Unk_4be4371, d...)
	cb.Do("TLockData", &t.TLockData, d...)
	cb.Do("TSwitchBehaviorData", &t.TSwitchBehaviorData, d...)
	cb.Do("FSwitchCanOperateMultipleTimes", &t.FSwitchCanOperateMultipleTimes, d...)
}

type MonsterACDInfo struct {
	EActorVariantType          DT_ENUM
	EGender                    DT_ENUM
	EWeaponClass               DT_ENUM
	SnoAnimSetOverride         DT_SNO
	SnoMonsterAffixes          DT_FIXEDARRAY[*DT_SNO]
	SnoMonsterPotentialAffixes DT_FIXEDARRAY[*DT_SNO]
}

func (t *MonsterACDInfo) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.EActorVariantType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.EGender, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.EWeaponClass, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.SnoAnimSetOverride, r, &Options{
		Flags: 1,
		Group: 8,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoMonsterAffixes, r, &Options{
		ArrayLength: 4,
		Flags:       9,
		Group:       107,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.SnoMonsterPotentialAffixes, r, &Options{
		ArrayLength: 4,
		Flags:       9,
		Group:       107,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+56, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *MonsterACDInfo) Walk(cb WalkCallback, d ...any) {
	cb.Do("EActorVariantType", &t.EActorVariantType, d...)
	cb.Do("EGender", &t.EGender, d...)
	cb.Do("EWeaponClass", &t.EWeaponClass, d...)
	cb.Do("SnoAnimSetOverride", &t.SnoAnimSetOverride, d...)
	cb.Do("SnoMonsterAffixes", &t.SnoMonsterAffixes, d...)
	cb.Do("SnoMonsterPotentialAffixes", &t.SnoMonsterPotentialAffixes, d...)
}

type GlobalCrafterEvents struct {
	SnoConversations DT_FIXEDARRAY[*DT_SNO]
}

func (t *GlobalCrafterEvents) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoConversations, r, &Options{
		ArrayLength: 7,
		Flags:       1,
		Group:       12,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+28, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *GlobalCrafterEvents) Walk(cb WalkCallback, d ...any) {
	cb.Do("SnoConversations", &t.SnoConversations, d...)
}

type PlayerPartitionLevelSubcondition struct {
	// Inherits NumericComparisonSubcondition
	// Inherits Subcondition
	// Inherits PolymorphicBase
	DwType        DT_UINT
	BNegate       DT_INT
	EComparisonOp DT_ENUM
	DwPad         DT_UINT
	NLevel        DT_INT
}

func (t *PlayerPartitionLevelSubcondition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BNegate, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.EComparisonOp, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.NLevel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+40, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PlayerPartitionLevelSubcondition) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("BNegate", &t.BNegate, d...)
	cb.Do("EComparisonOp", &t.EComparisonOp, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("NLevel", &t.NLevel, d...)
}

type DemonSummoningRitualQuests struct {
	SnoStartQuest      DT_SNO
	ArActivityQuests   DT_VARIABLEARRAY[*DT_SNO]
	ArCompletionQuests DT_VARIABLEARRAY[*DT_SNO]
	SnoRitualItem      DT_SNO
	Unk_9f4512f        DT_FIXEDARRAY[*DT_UINT]
	Unk_8649a3e        DT_FIXEDARRAY[*DT_UINT]
	Unk_85f303c        DT_FIXEDARRAY[*DT_UINT]
}

func (t *DemonSummoningRitualQuests) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoStartQuest, r, &Options{
		Flags: 1,
		Group: 31,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.ArActivityQuests, r, &Options{
		Flags: 1,
		Group: 31,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ArCompletionQuests, r, &Options{
		Flags: 1,
		Group: 31,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.SnoRitualItem, r, &Options{
		Flags: 1,
		Group: 73,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.Unk_9f4512f, r, &Options{
		ArrayLength: 3,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.Unk_8649a3e, r, &Options{
		ArrayLength: 3,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.Unk_85f303c, r, &Options{
		ArrayLength: 3,
		Flags:       1,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+80, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *DemonSummoningRitualQuests) Walk(cb WalkCallback, d ...any) {
	cb.Do("SnoStartQuest", &t.SnoStartQuest, d...)
	cb.Do("ArActivityQuests", &t.ArActivityQuests, d...)
	cb.Do("ArCompletionQuests", &t.ArCompletionQuests, d...)
	cb.Do("SnoRitualItem", &t.SnoRitualItem, d...)
	cb.Do("Unk_9f4512f", &t.Unk_9f4512f, d...)
	cb.Do("Unk_8649a3e", &t.Unk_8649a3e, d...)
	cb.Do("Unk_85f303c", &t.Unk_85f303c, d...)
}

type GameTestingPersonaSamplingStartMessage struct {
	THeader       RequiredMessageHeader
	SnoClass      DT_SNO
	SnoFacialHair DT_SNO
	SnoHairStyle  DT_SNO
	SnoJewelry    DT_SNO
	BFemale       DT_INT
}

func (t *GameTestingPersonaSamplingStartMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoClass, r, &Options{
		Flags: 1,
		Group: 74,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.SnoFacialHair, r, &Options{
		Flags: 1,
		Group: 139,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SnoHairStyle, r, &Options{
		Flags: 1,
		Group: 138,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.SnoJewelry, r, &Options{
		Flags: 1,
		Group: 119,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.BFemale, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+36, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *GameTestingPersonaSamplingStartMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("SnoClass", &t.SnoClass, d...)
	cb.Do("SnoFacialHair", &t.SnoFacialHair, d...)
	cb.Do("SnoHairStyle", &t.SnoHairStyle, d...)
	cb.Do("SnoJewelry", &t.SnoJewelry, d...)
	cb.Do("BFemale", &t.BFemale, d...)
}

type SurveyTypeEntry_Table struct {
	// Inherits GameBalanceTable
	// Inherits PolymorphicBase
	DwType   DT_UINT
	DwPad    DT_UINT
	TEntries DT_VARIABLEARRAY[*SurveyTypeEntry]
}

func (t *SurveyTypeEntry_Table) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TEntries, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *SurveyTypeEntry_Table) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("TEntries", &t.TEntries, d...)
}

type SoundTableEntry struct {
	DwID                DT_UINT
	SzTag               DT_UINT
	SnoSound            DT_SNO
	SnoSoundFriendly    DT_SNO
	SnoSoundNotFriendly DT_SNO
	DwFlags             DT_UINT
}

func (t *SoundTableEntry) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.DwID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.SzTag, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.SnoSound, r, &Options{
		Flags: 1,
		Group: 40,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.SnoSoundFriendly, r, &Options{
		Flags: 1,
		Group: 40,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoSoundNotFriendly, r, &Options{
		Flags: 1,
		Group: 40,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *SoundTableEntry) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwID", &t.DwID, d...)
	cb.Do("SzTag", &t.SzTag, d...)
	cb.Do("SnoSound", &t.SnoSound, d...)
	cb.Do("SnoSoundFriendly", &t.SnoSoundFriendly, d...)
	cb.Do("SnoSoundNotFriendly", &t.SnoSoundNotFriendly, d...)
	cb.Do("DwFlags", &t.DwFlags, d...)
}

type PlayerLevelSubcondition struct {
	// Inherits NumericComparisonSubcondition
	// Inherits Subcondition
	// Inherits PolymorphicBase
	DwType        DT_UINT
	BNegate       DT_INT
	EComparisonOp DT_ENUM
	DwPad         DT_UINT
	NLevel        DT_INT
}

func (t *PlayerLevelSubcondition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BNegate, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.EComparisonOp, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.NLevel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+40, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PlayerLevelSubcondition) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("BNegate", &t.BNegate, d...)
	cb.Do("EComparisonOp", &t.EComparisonOp, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("NLevel", &t.NLevel, d...)
}

type MaterialScalarValueDefinition struct {
	// Inherits DefaultMaterialValueDefinition
	// Inherits PolymorphicBase
	DwType DT_UINT
	DwPad  DT_UINT
	VValue DT_VECTOR4D
}

func (t *MaterialScalarValueDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.VValue, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *MaterialScalarValueDefinition) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("VValue", &t.VValue, d...)
}

type TriggerEventFadeRemotePlayers struct {
	// Inherits TriggerEventRangedDuration
	// Inherits TriggerEvent
	// Inherits PolymorphicBase
	DwType           DT_UINT
	TConditions      TriggerConditions
	FGenerated       DT_INT
	Unk_6cba752      DT_INT
	DwParentActorID  DT_UINT
	TDuration        DT_FLOAT
	DwTriggerFlags   DT_UINT
	DwTriggerFlagsEx DT_UINT
	TCleanup         TriggerCleanup
	Unk_49e9257      DT_INT
	Unk_5490979      DT_INT
	DwPad            DT_UINT
}

func (t *TriggerEventFadeRemotePlayers) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.FGenerated, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_6cba752, r, &Options{Flags: 16}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.DwParentActorID, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.TDuration, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.DwTriggerFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.DwTriggerFlagsEx, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.TCleanup, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+116, &t.Unk_49e9257, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.Unk_5490979, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+124, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+128, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TriggerEventFadeRemotePlayers) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("TConditions", &t.TConditions, d...)
	cb.Do("FGenerated", &t.FGenerated, d...)
	cb.Do("Unk_6cba752", &t.Unk_6cba752, d...)
	cb.Do("DwParentActorID", &t.DwParentActorID, d...)
	cb.Do("TDuration", &t.TDuration, d...)
	cb.Do("DwTriggerFlags", &t.DwTriggerFlags, d...)
	cb.Do("DwTriggerFlagsEx", &t.DwTriggerFlagsEx, d...)
	cb.Do("TCleanup", &t.TCleanup, d...)
	cb.Do("Unk_49e9257", &t.Unk_49e9257, d...)
	cb.Do("Unk_5490979", &t.Unk_5490979, d...)
	cb.Do("DwPad", &t.DwPad, d...)
}

type VertInfluences struct {
	TBoneInfluence DT_FIXEDARRAY[*Influence]
}

func (t *VertInfluences) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.TBoneInfluence, r, &Options{
		ArrayLength: 4,
		Flags:       1,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *VertInfluences) Walk(cb WalkCallback, d ...any) {
	cb.Do("TBoneInfluence", &t.TBoneInfluence, d...)
}

type EnterKnownLookOverrides struct {
	ALookOverrides DT_FIXEDARRAY[*DT_UINT]
	Unk_3fb7293    DT_FIXEDARRAY[*DT_INT]
}

func (t *EnterKnownLookOverrides) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.ALookOverrides, r, &Options{
		ArrayLength: 6,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_3fb7293, r, &Options{
		ArrayLength: 6,
		Flags:       1,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *EnterKnownLookOverrides) Walk(cb WalkCallback, d ...any) {
	cb.Do("ALookOverrides", &t.ALookOverrides, d...)
	cb.Do("Unk_3fb7293", &t.Unk_3fb7293, d...)
}

type AIStateDebugSetEntryStateMessage struct {
	THeader       RequiredMessageHeader
	AnnActor      DT_ACD_NETWORK_NAME
	BEnabled      DT_INT
	DwCooldownKey DT_INT64
}

func (t *AIStateDebugSetEntryStateMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.AnnActor, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.BEnabled, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.DwCooldownKey, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+40, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *AIStateDebugSetEntryStateMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("AnnActor", &t.AnnActor, d...)
	cb.Do("BEnabled", &t.BEnabled, d...)
	cb.Do("DwCooldownKey", &t.DwCooldownKey, d...)
}

type GlobalNPCCustomizationData struct {
	// Inherits GlobalBase
	// Inherits PolymorphicBase
	DwType          DT_UINT
	DwPad           DT_UINT
	ArHairColorList DT_VARIABLEARRAY[*NPCHairColors]
	ArSkinColorList DT_VARIABLEARRAY[*PersonaSkinColor]
	ArDyeList       DT_VARIABLEARRAY[*DT_SNO]
}

func (t *GlobalNPCCustomizationData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.ArHairColorList, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.ArSkinColorList, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.ArDyeList, r, &Options{
		Flags: 1,
		Group: 122,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+64, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *GlobalNPCCustomizationData) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("ArHairColorList", &t.ArHairColorList, d...)
	cb.Do("ArSkinColorList", &t.ArSkinColorList, d...)
	cb.Do("ArDyeList", &t.ArDyeList, d...)
}

type PowerConditionDamageIsCrit struct {
	// Inherits PowerConditionBase
	// Inherits PolymorphicBase
	DwType   DT_UINT
	BInverse DT_INT
	DwPad    DT_UINT
}

func (t *PowerConditionDamageIsCrit) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BInverse, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PowerConditionDamageIsCrit) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("BInverse", &t.BInverse, d...)
	cb.Do("DwPad", &t.DwPad, d...)
}

type PowerConditionDamageIsNear struct {
	// Inherits PowerConditionBase
	// Inherits PolymorphicBase
	DwType   DT_UINT
	BInverse DT_INT
	DwPad    DT_UINT
}

func (t *PowerConditionDamageIsNear) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BInverse, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PowerConditionDamageIsNear) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("BInverse", &t.BInverse, d...)
	cb.Do("DwPad", &t.DwPad, d...)
}

type VertexElem struct {
	ESemantic DT_ENUM
	EFormat   DT_ENUM
	NOffset   DT_INT
}

func (t *VertexElem) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.ESemantic, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.EFormat, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.NOffset, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+12, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *VertexElem) Walk(cb WalkCallback, d ...any) {
	cb.Do("ESemantic", &t.ESemantic, d...)
	cb.Do("EFormat", &t.EFormat, d...)
	cb.Do("NOffset", &t.NOffset, d...)
}

type PostApplyBuffCallback struct {
	// Inherits BuffCallbackBase
	// Inherits PolymorphicBase
	DwType                DT_UINT
	DwPad                 DT_UINT
	SnoTriggerEffectGroup DT_SNO
	ArConditions          DT_POLYMORPHIC_VARIABLEARRAY[*DT_INT64]
}

func (t *PostApplyBuffCallback) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoTriggerEffectGroup, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ArConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PostApplyBuffCallback) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("SnoTriggerEffectGroup", &t.SnoTriggerEffectGroup, d...)
	cb.Do("ArConditions", &t.ArConditions, d...)
}

type HoudiniParticlesSimDefinition struct {
	Unk_ce1c03c           DT_UINT
	DwRopeFragment        DT_UINT
	Unk_82df211           DT_FLOAT
	Unk_728cb31           DT_UINT
	FlRadius              DT_FLOAT
	BHasRotation          DT_INT
	FlFps                 DT_FLOAT
	FlCompression         DT_FLOAT
	PtParticlesLifeEvents DT_VARIABLEARRAY[*ParticleLifeEvent]
	PtParticlesKeyframes  DT_VARIABLEARRAY[*ParticleKeyFrames]
}

func (t *HoudiniParticlesSimDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.Unk_ce1c03c, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwRopeFragment, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_82df211, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.Unk_728cb31, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.FlRadius, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.BHasRotation, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.FlFps, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.FlCompression, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.PtParticlesLifeEvents, r, &Options{Flags: 2097152}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.PtParticlesKeyframes, r, &Options{Flags: 2097152}); err != nil {
		return err
	}
	if _, err := r.Seek(p+72, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *HoudiniParticlesSimDefinition) Walk(cb WalkCallback, d ...any) {
	cb.Do("Unk_ce1c03c", &t.Unk_ce1c03c, d...)
	cb.Do("DwRopeFragment", &t.DwRopeFragment, d...)
	cb.Do("Unk_82df211", &t.Unk_82df211, d...)
	cb.Do("Unk_728cb31", &t.Unk_728cb31, d...)
	cb.Do("FlRadius", &t.FlRadius, d...)
	cb.Do("BHasRotation", &t.BHasRotation, d...)
	cb.Do("FlFps", &t.FlFps, d...)
	cb.Do("FlCompression", &t.FlCompression, d...)
	cb.Do("PtParticlesLifeEvents", &t.PtParticlesLifeEvents, d...)
	cb.Do("PtParticlesKeyframes", &t.PtParticlesKeyframes, d...)
}

type InventoryLocationMessageData struct {
	AnnContainer DT_ACD_NETWORK_NAME
	ESlot        DT_ENUM
	Pt           DT_BCVEC2I
}

func (t *InventoryLocationMessageData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.AnnContainer, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.ESlot, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.Pt, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+20, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *InventoryLocationMessageData) Walk(cb WalkCallback, d ...any) {
	cb.Do("AnnContainer", &t.AnnContainer, d...)
	cb.Do("ESlot", &t.ESlot, d...)
	cb.Do("Pt", &t.Pt, d...)
}

type NecroArmyUnitSpecializationData struct {
	SnoActor               DT_SNO
	TUnlockCondition       ConditionWrapper
	ArUpgradeOptions       DT_VARIABLEARRAY[*NecroArmyUnitSpecializationUpgradeData]
	TSacrifice             NecroArmyUnitSpecializationSacrificeData
	ArAdditionalActorTypes DT_VARIABLEARRAY[*DT_SNO]
	EUnitDamageType        DT_ENUM
}

func (t *NecroArmyUnitSpecializationData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoActor, r, &Options{
		Flags: 513,
		Group: 1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.TUnlockCondition, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.ArUpgradeOptions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.TSacrifice, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.ArAdditionalActorTypes, r, &Options{
		Flags: 1,
		Group: 1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.EUnitDamageType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+88, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *NecroArmyUnitSpecializationData) Walk(cb WalkCallback, d ...any) {
	cb.Do("SnoActor", &t.SnoActor, d...)
	cb.Do("TUnlockCondition", &t.TUnlockCondition, d...)
	cb.Do("ArUpgradeOptions", &t.ArUpgradeOptions, d...)
	cb.Do("TSacrifice", &t.TSacrifice, d...)
	cb.Do("ArAdditionalActorTypes", &t.ArAdditionalActorTypes, d...)
	cb.Do("EUnitDamageType", &t.EUnitDamageType, d...)
}

type UIControlIconOptionalFieldMapDefaults struct {
	NButtonIconWidth         DT_INT
	NButtonIconHeight        DT_INT
	EButtonIconAlignment     DT_ENUM
	NButtonIconTextPaddingX  DT_INT
	FlButtonIconOffsetX      DT_FLOAT
	FlButtonIconOffsetY      DT_FLOAT
	HImageFrameIcon          UIImageHandleReference
	HImageFrameIconMouseOver UIImageHandleReference
	HImageFrameIconPressed   UIImageHandleReference
	HImageFrameIconDisable   UIImageHandleReference
	Unk_fca1727              DT_INT
	FLeft                    DT_FLOAT
	FTop                     DT_FLOAT
}

func (t *UIControlIconOptionalFieldMapDefaults) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.NButtonIconWidth, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.NButtonIconHeight, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.EButtonIconAlignment, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.NButtonIconTextPaddingX, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.FlButtonIconOffsetX, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.FlButtonIconOffsetY, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.HImageFrameIcon, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.HImageFrameIconMouseOver, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.HImageFrameIconPressed, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.HImageFrameIconDisable, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.Unk_fca1727, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.FLeft, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.FTop, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+52, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *UIControlIconOptionalFieldMapDefaults) Walk(cb WalkCallback, d ...any) {
	cb.Do("NButtonIconWidth", &t.NButtonIconWidth, d...)
	cb.Do("NButtonIconHeight", &t.NButtonIconHeight, d...)
	cb.Do("EButtonIconAlignment", &t.EButtonIconAlignment, d...)
	cb.Do("NButtonIconTextPaddingX", &t.NButtonIconTextPaddingX, d...)
	cb.Do("FlButtonIconOffsetX", &t.FlButtonIconOffsetX, d...)
	cb.Do("FlButtonIconOffsetY", &t.FlButtonIconOffsetY, d...)
	cb.Do("HImageFrameIcon", &t.HImageFrameIcon, d...)
	cb.Do("HImageFrameIconMouseOver", &t.HImageFrameIconMouseOver, d...)
	cb.Do("HImageFrameIconPressed", &t.HImageFrameIconPressed, d...)
	cb.Do("HImageFrameIconDisable", &t.HImageFrameIconDisable, d...)
	cb.Do("Unk_fca1727", &t.Unk_fca1727, d...)
	cb.Do("FLeft", &t.FLeft, d...)
	cb.Do("FTop", &t.FTop, d...)
}

type MonsterDamageStateThresholds struct {
	EBreaksOn   DT_ENUM
	Unk_e714dff DT_FLOAT
	SnoEffect   DT_SNO
	Transform   PRTransform
}

func (t *MonsterDamageStateThresholds) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.EBreaksOn, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.Unk_e714dff, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.SnoEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.Transform, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+40, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *MonsterDamageStateThresholds) Walk(cb WalkCallback, d ...any) {
	cb.Do("EBreaksOn", &t.EBreaksOn, d...)
	cb.Do("Unk_e714dff", &t.Unk_e714dff, d...)
	cb.Do("SnoEffect", &t.SnoEffect, d...)
	cb.Do("Transform", &t.Transform, d...)
}

type MapImageHandleReference struct {
	HImageHandle DT_UINT
}

func (t *MapImageHandleReference) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.HImageHandle, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+4, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *MapImageHandleReference) Walk(cb WalkCallback, d ...any) {
	cb.Do("HImageHandle", &t.HImageHandle, d...)
}

type OnHitBuffCallback struct {
	// Inherits ProcChanceBuffCallbackBase
	// Inherits BuffCallbackBase
	// Inherits PolymorphicBase
	DwType                DT_UINT
	DwPad                 DT_UINT
	SnoTriggerEffectGroup DT_SNO
	ArConditions          DT_POLYMORPHIC_VARIABLEARRAY[*DT_INT64]
	BAlwaysProcs          DT_INT
	DwPadding             DT_UINT
	TProcChance           DT_STRING_FORMULA
	Unk_b52872c           DT_INT
	Unk_ac0bfbc           DT_INT
	Unk_99e97f7           DT_INT
	Unk_ecd3027           DT_INT
}

func (t *OnHitBuffCallback) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoTriggerEffectGroup, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ArConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.BAlwaysProcs, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.DwPadding, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.TProcChance, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.Unk_b52872c, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.Unk_ac0bfbc, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.Unk_99e97f7, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+100, &t.Unk_ecd3027, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+104, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *OnHitBuffCallback) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("SnoTriggerEffectGroup", &t.SnoTriggerEffectGroup, d...)
	cb.Do("ArConditions", &t.ArConditions, d...)
	cb.Do("BAlwaysProcs", &t.BAlwaysProcs, d...)
	cb.Do("DwPadding", &t.DwPadding, d...)
	cb.Do("TProcChance", &t.TProcChance, d...)
	cb.Do("Unk_b52872c", &t.Unk_b52872c, d...)
	cb.Do("Unk_ac0bfbc", &t.Unk_ac0bfbc, d...)
	cb.Do("Unk_99e97f7", &t.Unk_99e97f7, d...)
	cb.Do("Unk_ecd3027", &t.Unk_ecd3027, d...)
}

type FogOfWarDefinition struct {
	NDummy       DT_INT
	SzUITextName DT_CSTRING[*DT_BYTE]
}

func (t *FogOfWarDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.NDummy, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SzUITextName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *FogOfWarDefinition) Walk(cb WalkCallback, d ...any) {
	cb.Do("NDummy", &t.NDummy, d...)
	cb.Do("SzUITextName", &t.SzUITextName, d...)
}

type ScriptEventParamHashedString struct {
	// Inherits ScriptEventParamBase
	// Inherits PolymorphicBase
	DwType     DT_UINT
	EParamType DT_ENUM
	DwPad      DT_UINT
	DwHash     DT_UINT
	SzString   DT_CSTRING[*DT_BYTE]
}

func (t *ScriptEventParamHashedString) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.EParamType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.DwHash, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.SzString, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ScriptEventParamHashedString) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("EParamType", &t.EParamType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("DwHash", &t.DwHash, d...)
	cb.Do("SzString", &t.SzString, d...)
}

type VisualItem struct {
	SnoItem DT_SNO
	SnoDye  DT_SNO
}

func (t *VisualItem) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoItem, r, &Options{
		Flags: 1,
		Group: 73,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.SnoDye, r, &Options{
		Flags: 1,
		Group: 122,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *VisualItem) Walk(cb WalkCallback, d ...any) {
	cb.Do("SnoItem", &t.SnoItem, d...)
	cb.Do("SnoDye", &t.SnoDye, d...)
}

type PlayerClassNecroData struct {
	Unk_4a28fe           DT_FLOAT
	NUnlockLevel         DT_INT
	ArNecroArmyUnitTypes DT_FIXEDARRAY[*NecroArmyUnitTypeData]
}

func (t *PlayerClassNecroData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Unk_4a28fe, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.NUnlockLevel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.ArNecroArmyUnitTypes, r, &Options{
		ArrayLength: 3,
		Flags:       1,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+848, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PlayerClassNecroData) Walk(cb WalkCallback, d ...any) {
	cb.Do("Unk_4a28fe", &t.Unk_4a28fe, d...)
	cb.Do("NUnlockLevel", &t.NUnlockLevel, d...)
	cb.Do("ArNecroArmyUnitTypes", &t.ArNecroArmyUnitTypes, d...)
}

type InventoryRequestSocketMessage struct {
	THeader             RequiredMessageHeader
	AnnItemToSocket     DT_ACD_NETWORK_NAME
	AnnItemToSocketInto DT_ACD_NETWORK_NAME
	NSocketIndex        DT_OPTIONAL[*DT_INT]
}

func (t *InventoryRequestSocketMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.AnnItemToSocket, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.AnnItemToSocketInto, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.NSocketIndex, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+40, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *InventoryRequestSocketMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("AnnItemToSocket", &t.AnnItemToSocket, d...)
	cb.Do("AnnItemToSocketInto", &t.AnnItemToSocketInto, d...)
	cb.Do("NSocketIndex", &t.NSocketIndex, d...)
}

type OnResourceSpentBuffCallback struct {
	// Inherits BuffCallbackBase
	// Inherits PolymorphicBase
	DwType                DT_UINT
	DwPad                 DT_UINT
	SnoTriggerEffectGroup DT_SNO
	ArConditions          DT_POLYMORPHIC_VARIABLEARRAY[*DT_INT64]
}

func (t *OnResourceSpentBuffCallback) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoTriggerEffectGroup, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ArConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *OnResourceSpentBuffCallback) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("SnoTriggerEffectGroup", &t.SnoTriggerEffectGroup, d...)
	cb.Do("ArConditions", &t.ArConditions, d...)
}

type SceneCommonSpecification struct {
	DwFlags                      DT_UINT
	SnoLevelArea                 DT_SNO
	SnoLevelAreaDungeonAlternate DT_SNO
	Unk_989f2d7                  DT_ENUM
	UProceduralEntranceName      DT_STARTLOC_NAME
	SnoPrevWorld                 DT_SNO
	UPrevEntranceGUID            DT_UINT
	SnoPrevLevelArea             DT_SNO
	TAudioVisual                 SceneCommonSpecAudioVisual
	TAudioVisualDungeonAlternate SceneCommonSpecAudioVisual
	SnoPresetWorld               DT_SNO
	NSceneChunk                  DT_INT
	Unk_1e9ef9d                  DT_OPTIONAL[*DT_UINT]
	ArSubzoneRelations           DT_FIXEDARRAY[*SubzoneRelation]
	ArDisabledSpawnLocTypes      DT_FIXEDARRAY[*DT_GBID]
	TDRLGCreationInfo            DT_OPTIONAL[*DRLGSceneCreationInfo]
}

func (t *SceneCommonSpecification) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.DwFlags, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.SnoLevelArea, r, &Options{
		Flags: 1,
		Group: 22,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.SnoLevelAreaDungeonAlternate, r, &Options{
		Flags: 1,
		Group: 22,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.Unk_989f2d7, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.UProceduralEntranceName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.SnoPrevWorld, r, &Options{
		Flags: 1,
		Group: 48,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.UPrevEntranceGUID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.SnoPrevLevelArea, r, &Options{
		Flags: 1,
		Group: 22,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.TAudioVisual, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.TAudioVisualDungeonAlternate, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.SnoPresetWorld, r, &Options{
		Flags: 1,
		Group: 48,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.NSceneChunk, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_1e9ef9d, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.ArSubzoneRelations, r, &Options{
		ArrayLength: 16,
		Flags:       8,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+212, &t.ArDisabledSpawnLocTypes, r, &Options{
		ArrayLength: 16,
		Flags:       9,
		Group:       20,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+280, &t.TDRLGCreationInfo, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+308, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *SceneCommonSpecification) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwFlags", &t.DwFlags, d...)
	cb.Do("SnoLevelArea", &t.SnoLevelArea, d...)
	cb.Do("SnoLevelAreaDungeonAlternate", &t.SnoLevelAreaDungeonAlternate, d...)
	cb.Do("Unk_989f2d7", &t.Unk_989f2d7, d...)
	cb.Do("UProceduralEntranceName", &t.UProceduralEntranceName, d...)
	cb.Do("SnoPrevWorld", &t.SnoPrevWorld, d...)
	cb.Do("UPrevEntranceGUID", &t.UPrevEntranceGUID, d...)
	cb.Do("SnoPrevLevelArea", &t.SnoPrevLevelArea, d...)
	cb.Do("TAudioVisual", &t.TAudioVisual, d...)
	cb.Do("TAudioVisualDungeonAlternate", &t.TAudioVisualDungeonAlternate, d...)
	cb.Do("SnoPresetWorld", &t.SnoPresetWorld, d...)
	cb.Do("NSceneChunk", &t.NSceneChunk, d...)
	cb.Do("Unk_1e9ef9d", &t.Unk_1e9ef9d, d...)
	cb.Do("ArSubzoneRelations", &t.ArSubzoneRelations, d...)
	cb.Do("ArDisabledSpawnLocTypes", &t.ArDisabledSpawnLocTypes, d...)
	cb.Do("TDRLGCreationInfo", &t.TDRLGCreationInfo, d...)
}

type PlayerSavedData struct {
	THotbarBtnAssignments     DT_FIXEDARRAY[*HotbarButtonData]
	TPotionBtn                HotbarButtonData
	USecondsPlayed            DT_UINT
	THirelingSavedData        HirelingSavedData
	ArWaypointsActivated      DT_FIXEDARRAY[*DT_SNO]
	UTimeLastLevel            DT_UINT
	TActiveSkills             DT_FIXEDARRAY[*ActiveSkillSavedData]
	TEnchantSkills            DT_FIXEDARRAY[*SkillEnchantSavedData]
	TSkillPassiveData         ClassPassiveSkillTypeSaveData
	ArSkillExtraAndArsenals   DT_FIXEDARRAY[*SkillExtraAndArsenalEntry]
	ArPurchasedSkillTreeNodes DT_FIXEDARRAY[*SkillTreeNodeEntry]
	Unk_4968c70               DT_UINT
	BUnlockedTownPortal       DT_INT
	ArTransmogSlots           DT_FIXEDARRAY[*TransmogSlot]
	ArSavedTransmogs          DT_FIXEDARRAY[*SavedTransmog]
	TSavedPlayerTitle         SavedPlayerTitle
}

func (t *PlayerSavedData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THotbarBtnAssignments, r, &Options{
		ArrayLength: 6,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.TPotionBtn, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.USecondsPlayed, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+116, &t.THirelingSavedData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+220, &t.ArWaypointsActivated, r, &Options{
		ArrayLength: 64,
		Flags:       9,
		Group:       22,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+480, &t.UTimeLastLevel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+484, &t.TActiveSkills, r, &Options{
		ArrayLength: 6,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+532, &t.TEnchantSkills, r, &Options{
		ArrayLength: 6,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+556, &t.TSkillPassiveData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+576, &t.ArSkillExtraAndArsenals, r, &Options{
		ArrayLength: 50,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+976, &t.ArPurchasedSkillTreeNodes, r, &Options{
		ArrayLength: 128,
		Flags:       8,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2004, &t.Unk_4968c70, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2008, &t.BUnlockedTownPortal, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2012, &t.ArTransmogSlots, r, &Options{
		ArrayLength: 15,
		Flags:       8,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2256, &t.ArSavedTransmogs, r, &Options{
		ArrayLength: 5,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+3496, &t.TSavedPlayerTitle, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+3672, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PlayerSavedData) Walk(cb WalkCallback, d ...any) {
	cb.Do("THotbarBtnAssignments", &t.THotbarBtnAssignments, d...)
	cb.Do("TPotionBtn", &t.TPotionBtn, d...)
	cb.Do("USecondsPlayed", &t.USecondsPlayed, d...)
	cb.Do("THirelingSavedData", &t.THirelingSavedData, d...)
	cb.Do("ArWaypointsActivated", &t.ArWaypointsActivated, d...)
	cb.Do("UTimeLastLevel", &t.UTimeLastLevel, d...)
	cb.Do("TActiveSkills", &t.TActiveSkills, d...)
	cb.Do("TEnchantSkills", &t.TEnchantSkills, d...)
	cb.Do("TSkillPassiveData", &t.TSkillPassiveData, d...)
	cb.Do("ArSkillExtraAndArsenals", &t.ArSkillExtraAndArsenals, d...)
	cb.Do("ArPurchasedSkillTreeNodes", &t.ArPurchasedSkillTreeNodes, d...)
	cb.Do("Unk_4968c70", &t.Unk_4968c70, d...)
	cb.Do("BUnlockedTownPortal", &t.BUnlockedTownPortal, d...)
	cb.Do("ArTransmogSlots", &t.ArTransmogSlots, d...)
	cb.Do("ArSavedTransmogs", &t.ArSavedTransmogs, d...)
	cb.Do("TSavedPlayerTitle", &t.TSavedPlayerTitle, d...)
}

type PolymorphicBase struct {
	DwType DT_UINT
	DwPad  DT_UINT
}

func (t *PolymorphicBase) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PolymorphicBase) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
}

type PolytopeData struct {
	PolytopeDataMirror dmPolytopeDataMirror
	PtVertices         DT_VARIABLEARRAY[*DT_VECTOR3D]
	PtPlanes           DT_VARIABLEARRAY[*dmPlaneMirror]
	PtSubEdges         DT_VARIABLEARRAY[*dmSubEdgeMirror]
	PtFaceSubEdges     DT_VARIABLEARRAY[*DT_BYTE]
}

func (t *PolytopeData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.PolytopeDataMirror, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.PtVertices, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.PtPlanes, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.PtSubEdges, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.PtFaceSubEdges, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+128, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PolytopeData) Walk(cb WalkCallback, d ...any) {
	cb.Do("PolytopeDataMirror", &t.PolytopeDataMirror, d...)
	cb.Do("PtVertices", &t.PtVertices, d...)
	cb.Do("PtPlanes", &t.PtPlanes, d...)
	cb.Do("PtSubEdges", &t.PtSubEdges, d...)
	cb.Do("PtFaceSubEdges", &t.PtFaceSubEdges, d...)
}

type PrefetchSceneMessage struct {
	THeader    RequiredMessageHeader
	SnoScene   DT_SNO
	Unk_a61d97 DT_INT
}

func (t *PrefetchSceneMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoScene, r, &Options{
		Flags: 1,
		Group: 33,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.Unk_a61d97, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PrefetchSceneMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("SnoScene", &t.SnoScene, d...)
	cb.Do("Unk_a61d97", &t.Unk_a61d97, d...)
}

type NpcTemplate struct {
	SzName    DT_CSTRING[*DT_BYTE]
	SnoMale   DT_SNO
	SnoFemale DT_SNO
}

func (t *NpcTemplate) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SzName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoMale, r, &Options{
		Flags: 1,
		Group: 1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.SnoFemale, r, &Options{
		Flags: 1,
		Group: 1,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *NpcTemplate) Walk(cb WalkCallback, d ...any) {
	cb.Do("SzName", &t.SzName, d...)
	cb.Do("SnoMale", &t.SnoMale, d...)
	cb.Do("SnoFemale", &t.SnoFemale, d...)
}

type PowerConditionIsSkillSlot struct {
	// Inherits PowerConditionBase
	// Inherits PolymorphicBase
	DwType         DT_UINT
	BInverse       DT_INT
	DwPad          DT_UINT
	EPowerCategory DT_ENUM
}

func (t *PowerConditionIsSkillSlot) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BInverse, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.EPowerCategory, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PowerConditionIsSkillSlot) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("BInverse", &t.BInverse, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("EPowerCategory", &t.EPowerCategory, d...)
}

type AssignTechniqueSlotMessage struct {
	THeader     RequiredMessageHeader
	SnoItemType DT_SNO
}

func (t *AssignTechniqueSlotMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoItemType, r, &Options{
		Flags: 1,
		Group: 98,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+20, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *AssignTechniqueSlotMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("SnoItemType", &t.SnoItemType, d...)
}

type GroundTestPosition struct {
	TBone            IKBone
	WpPosOffset      DT_VECTOR3D
	FlGroundDistance DT_FLOAT
}

func (t *GroundTestPosition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.TBone, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.WpPosOffset, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.FlGroundDistance, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+20, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *GroundTestPosition) Walk(cb WalkCallback, d ...any) {
	cb.Do("TBone", &t.TBone, d...)
	cb.Do("WpPosOffset", &t.WpPosOffset, d...)
	cb.Do("FlGroundDistance", &t.FlGroundDistance, d...)
}

type ScriptEventParamMonsterFamily struct {
	// Inherits ScriptEventParamBase
	// Inherits PolymorphicBase
	DwType           DT_UINT
	EParamType       DT_ENUM
	DwPad            DT_UINT
	SnoMonsterFamily DT_SNO
}

func (t *ScriptEventParamMonsterFamily) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.EParamType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SnoMonsterFamily, r, &Options{
		Flags: 513,
		Group: 82,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ScriptEventParamMonsterFamily) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("EParamType", &t.EParamType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("SnoMonsterFamily", &t.SnoMonsterFamily, d...)
}

type ConditionalAudioStateSetter struct {
	TCondition        ConditionWrapper
	Unk_dd101c8       DT_INT
	TAudioState       WwiseSwitchValue
	FlMinimumDuration DT_FLOAT
}

func (t *ConditionalAudioStateSetter) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.TCondition, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.Unk_dd101c8, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.TAudioState, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.FlMinimumDuration, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ConditionalAudioStateSetter) Walk(cb WalkCallback, d ...any) {
	cb.Do("TCondition", &t.TCondition, d...)
	cb.Do("Unk_dd101c8", &t.Unk_dd101c8, d...)
	cb.Do("TAudioState", &t.TAudioState, d...)
	cb.Do("FlMinimumDuration", &t.FlMinimumDuration, d...)
}

type SpeedTreeWindGroup struct {
	AfRippleDistance           DT_FIXEDARRAY[*DT_FLOAT]
	AfTumbleFlip               DT_FIXEDARRAY[*DT_FLOAT]
	AfTumbleTwist              DT_FIXEDARRAY[*DT_FLOAT]
	AfTumbleDirectionAdherence DT_FIXEDARRAY[*DT_FLOAT]
	AfTwitchThrow              DT_FIXEDARRAY[*DT_FLOAT]
	FTwitchSharpness           DT_FLOAT
	FRollMaxScale              DT_FLOAT
	FRollMinScale              DT_FLOAT
	FRollSpeed                 DT_FLOAT
	FRollSeparation            DT_FLOAT
	FLeewardScalar             DT_FLOAT
}

func (t *SpeedTreeWindGroup) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.AfRippleDistance, r, &Options{
		ArrayLength: 10,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.AfTumbleFlip, r, &Options{
		ArrayLength: 10,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.AfTumbleTwist, r, &Options{
		ArrayLength: 10,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.AfTumbleDirectionAdherence, r, &Options{
		ArrayLength: 10,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+160, &t.AfTwitchThrow, r, &Options{
		ArrayLength: 10,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+200, &t.FTwitchSharpness, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+204, &t.FRollMaxScale, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+208, &t.FRollMinScale, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+212, &t.FRollSpeed, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+216, &t.FRollSeparation, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+220, &t.FLeewardScalar, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+224, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *SpeedTreeWindGroup) Walk(cb WalkCallback, d ...any) {
	cb.Do("AfRippleDistance", &t.AfRippleDistance, d...)
	cb.Do("AfTumbleFlip", &t.AfTumbleFlip, d...)
	cb.Do("AfTumbleTwist", &t.AfTumbleTwist, d...)
	cb.Do("AfTumbleDirectionAdherence", &t.AfTumbleDirectionAdherence, d...)
	cb.Do("AfTwitchThrow", &t.AfTwitchThrow, d...)
	cb.Do("FTwitchSharpness", &t.FTwitchSharpness, d...)
	cb.Do("FRollMaxScale", &t.FRollMaxScale, d...)
	cb.Do("FRollMinScale", &t.FRollMinScale, d...)
	cb.Do("FRollSpeed", &t.FRollSpeed, d...)
	cb.Do("FRollSeparation", &t.FRollSeparation, d...)
	cb.Do("FLeewardScalar", &t.FLeewardScalar, d...)
}

type SteamAchievementDefinition struct {
	SIdentifier DT_CSTRING[*DT_BYTE]
}

func (t *SteamAchievementDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SIdentifier, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *SteamAchievementDefinition) Walk(cb WalkCallback, d ...any) {
	cb.Do("SIdentifier", &t.SIdentifier, d...)
}

type MusicTransition struct {
	EFadeoutBehavior   DT_ENUM
	FlFadeoutTime      DT_FLOAT
	SnoTransitionEvent DT_SNO
}

func (t *MusicTransition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.EFadeoutBehavior, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.FlFadeoutTime, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.SnoTransitionEvent, r, &Options{
		Flags: 1,
		Group: 40,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+12, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *MusicTransition) Walk(cb WalkCallback, d ...any) {
	cb.Do("EFadeoutBehavior", &t.EFadeoutBehavior, d...)
	cb.Do("FlFadeoutTime", &t.FlFadeoutTime, d...)
	cb.Do("SnoTransitionEvent", &t.SnoTransitionEvent, d...)
}

type TrophyUnlockCondition struct{}

func (t *TrophyUnlockCondition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if _, err := r.Seek(p+1, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TrophyUnlockCondition) Walk(cb WalkCallback, d ...any) {}

type PowerConditionIsStealthed struct {
	// Inherits PowerConditionBase
	// Inherits PolymorphicBase
	DwType   DT_UINT
	BInverse DT_INT
	DwPad    DT_UINT
	ESubject DT_ENUM
}

func (t *PowerConditionIsStealthed) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BInverse, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ESubject, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PowerConditionIsStealthed) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("BInverse", &t.BInverse, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("ESubject", &t.ESubject, d...)
}

type DecalLookVariantMap struct {
	DwLookVariant       DT_UINT
	SnoMaterialOverride DT_SNO
}

func (t *DecalLookVariantMap) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.DwLookVariant, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.SnoMaterialOverride, r, &Options{
		Flags: 1,
		Group: 57,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *DecalLookVariantMap) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwLookVariant", &t.DwLookVariant, d...)
	cb.Do("SnoMaterialOverride", &t.SnoMaterialOverride, d...)
}

type Type_5f1859b4 struct {
	M_cellId                    DT_INT64
	Unk_179f850                 DT_INT64
	M_detailGrid                DT_FIXEDARRAY[*DT_INT64]
	M_detailGridWalkable        DT_FIXEDARRAY[*DT_INT64]
	M_slicesInternal            DT_INT64
	M_slicesExtents             DT_BYTE
	M_aabbWalkableBounds        AABB
	M_aabbPreventWalkableBounds AABB
}

func (t *Type_5f1859b4) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.M_cellId, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.Unk_179f850, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.M_detailGrid, r, &Options{ArrayLength: 4608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36880, &t.M_detailGridWalkable, r, &Options{ArrayLength: 4608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+73744, &t.M_slicesInternal, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+73752, &t.M_slicesExtents, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+73756, &t.M_aabbWalkableBounds, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+73780, &t.M_aabbPreventWalkableBounds, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+73808, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_5f1859b4) Walk(cb WalkCallback, d ...any) {
	cb.Do("M_cellId", &t.M_cellId, d...)
	cb.Do("Unk_179f850", &t.Unk_179f850, d...)
	cb.Do("M_detailGrid", &t.M_detailGrid, d...)
	cb.Do("M_detailGridWalkable", &t.M_detailGridWalkable, d...)
	cb.Do("M_slicesInternal", &t.M_slicesInternal, d...)
	cb.Do("M_slicesExtents", &t.M_slicesExtents, d...)
	cb.Do("M_aabbWalkableBounds", &t.M_aabbWalkableBounds, d...)
	cb.Do("M_aabbPreventWalkableBounds", &t.M_aabbPreventWalkableBounds, d...)
}

type HeroDefinition struct {
	PProtoData DT_VARIABLEARRAY[*DT_BYTE]
}

func (t *HeroDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.PProtoData, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *HeroDefinition) Walk(cb WalkCallback, d ...any) {
	cb.Do("PProtoData", &t.PProtoData, d...)
}

type RareMonsterNamesEntry_Table struct {
	// Inherits GameBalanceTable
	// Inherits PolymorphicBase
	DwType   DT_UINT
	DwPad    DT_UINT
	TEntries DT_VARIABLEARRAY[*RareMonsterNamesEntry]
}

func (t *RareMonsterNamesEntry_Table) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TEntries, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *RareMonsterNamesEntry_Table) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("TEntries", &t.TEntries, d...)
}

type dmTransformMirror struct {
	Q DT_VECTOR4D
	P DT_VECTOR4D
}

func (t *dmTransformMirror) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Q, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.P, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *dmTransformMirror) Walk(cb WalkCallback, d ...any) {
	cb.Do("Q", &t.Q, d...)
	cb.Do("P", &t.P, d...)
}

type PowerFacingWindow struct {
	NFrameStart DT_INT
	NFrameEnd   DT_INT
	Unk_f28aa5a DT_FLOAT
	Unk_963cba8 DT_INT
	Unk_65d9350 DT_INT
	Unk_6ebf840 DT_UINT
}

func (t *PowerFacingWindow) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.NFrameStart, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.NFrameEnd, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.Unk_f28aa5a, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.Unk_963cba8, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_65d9350, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.Unk_6ebf840, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PowerFacingWindow) Walk(cb WalkCallback, d ...any) {
	cb.Do("NFrameStart", &t.NFrameStart, d...)
	cb.Do("NFrameEnd", &t.NFrameEnd, d...)
	cb.Do("Unk_f28aa5a", &t.Unk_f28aa5a, d...)
	cb.Do("Unk_963cba8", &t.Unk_963cba8, d...)
	cb.Do("Unk_65d9350", &t.Unk_65d9350, d...)
	cb.Do("Unk_6ebf840", &t.Unk_6ebf840, d...)
}

type UIScrollableTextStyle struct {
	// Inherits UITextStyle
	// Inherits UIWindowStyle
	// Inherits UIControlStyle
	// Inherits PolymorphicBase
	DwType                      DT_UINT
	DwPad                       DT_UINT
	HParentStyle                UIControlHandle
	Unk_441f783                 DT_INT64
	M_eHasModifiedPowerTagMap   DT_TAGMAP[*DT_ENUM]
	TConsoleInput               UIControlConsoleInput
	Unk_b4f614c                 DT_TAGMAP[*DT_ENUM]
	TFont                       UIControlFont
	PtUIControlTagMapIconLabels DT_TAGMAP[*DT_ENUM]
	HArtificiallyOwnedTagMap    DT_TAGMAP[*DT_ENUM]
}

func (t *UIScrollableTextStyle) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.HParentStyle, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_441f783, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.M_eHasModifiedPowerTagMap, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.TConsoleInput, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.Unk_b4f614c, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.TFont, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.PtUIControlTagMapIconLabels, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.HArtificiallyOwnedTagMap, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+128, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *UIScrollableTextStyle) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("HParentStyle", &t.HParentStyle, d...)
	cb.Do("Unk_441f783", &t.Unk_441f783, d...)
	cb.Do("M_eHasModifiedPowerTagMap", &t.M_eHasModifiedPowerTagMap, d...)
	cb.Do("TConsoleInput", &t.TConsoleInput, d...)
	cb.Do("Unk_b4f614c", &t.Unk_b4f614c, d...)
	cb.Do("TFont", &t.TFont, d...)
	cb.Do("PtUIControlTagMapIconLabels", &t.PtUIControlTagMapIconLabels, d...)
	cb.Do("HArtificiallyOwnedTagMap", &t.HArtificiallyOwnedTagMap, d...)
}

type SNONameDataMessage struct {
	THeader RequiredMessageHeader
	SnoName DT_SNO_NAME
}

func (t *SNONameDataMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *SNONameDataMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("SnoName", &t.SnoName, d...)
}

type MarkerWallData struct {
	// Inherits MarkerSplineData
	// Inherits MarkerDataBase
	// Inherits PolymorphicBase
	DwType             DT_UINT
	DwPad              DT_UINT
	EInterpolationMode DT_ENUM
	Unk_a3f1699        DT_FLOAT
	DwFlags            DT_UINT
}

func (t *MarkerWallData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.EInterpolationMode, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.Unk_a3f1699, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.DwFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *MarkerWallData) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("EInterpolationMode", &t.EInterpolationMode, d...)
	cb.Do("Unk_a3f1699", &t.Unk_a3f1699, d...)
	cb.Do("DwFlags", &t.DwFlags, d...)
}

type ScriptEventParamLinkedMarkerAny struct {
	// Inherits ScriptEventParamBase
	// Inherits PolymorphicBase
	DwType     DT_UINT
	EParamType DT_ENUM
	DwPad      DT_UINT
	IdValue    DT_INT
}

func (t *ScriptEventParamLinkedMarkerAny) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.EParamType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.IdValue, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ScriptEventParamLinkedMarkerAny) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("EParamType", &t.EParamType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("IdValue", &t.IdValue, d...)
}

type PS5ConsoleAwardDefinition struct {
	// Inherits SonyConsoleAwardDefinition
	// Inherits ConsoleAwardDefinition
	// Inherits PolymorphicBase
	DwType          DT_UINT
	UProfileAwardId DT_UINT
	DwPad           DT_UINT
}

func (t *PS5ConsoleAwardDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.UProfileAwardId, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PS5ConsoleAwardDefinition) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("UProfileAwardId", &t.UProfileAwardId, d...)
	cb.Do("DwPad", &t.DwPad, d...)
}

type LookVariant struct {
	SzName  DT_UINT
	DwValue DT_UINT
}

func (t *LookVariant) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SzName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.DwValue, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *LookVariant) Walk(cb WalkCallback, d ...any) {
	cb.Do("SzName", &t.SzName, d...)
	cb.Do("DwValue", &t.DwValue, d...)
}

type EmitterCylinderData struct {
	// Inherits EmitterDataBase
	// Inherits PolymorphicBase
	DwType            DT_UINT
	DwPad             DT_UINT
	EFacing           DT_ENUM
	AWedge            DT_FLOAT
	FEvenDistribution DT_INT
	PathRadius        InterpolationPath_float
	PathHeight        InterpolationPath_float
}

func (t *EmitterCylinderData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.EFacing, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.AWedge, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.FEvenDistribution, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.PathRadius, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.PathHeight, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+144, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *EmitterCylinderData) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("EFacing", &t.EFacing, d...)
	cb.Do("AWedge", &t.AWedge, d...)
	cb.Do("FEvenDistribution", &t.FEvenDistribution, d...)
	cb.Do("PathRadius", &t.PathRadius, d...)
	cb.Do("PathHeight", &t.PathHeight, d...)
}

type RunTimeMaterialScalarGraphEntry struct {
	PathValGraph InterpolationPath_float
}

func (t *RunTimeMaterialScalarGraphEntry) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.PathValGraph, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+56, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *RunTimeMaterialScalarGraphEntry) Walk(cb WalkCallback, d ...any) {
	cb.Do("PathValGraph", &t.PathValGraph, d...)
}

type Type_6105185b struct {
	// Inherits PowerConditionBase
	// Inherits PolymorphicBase
	DwType   DT_UINT
	BInverse DT_INT
	DwPad    DT_UINT
	ESubject DT_ENUM
	SnoAffix DT_SNO
}

func (t *Type_6105185b) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BInverse, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ESubject, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.SnoAffix, r, &Options{
		Flags: 513,
		Group: 104,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_6105185b) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("BInverse", &t.BInverse, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("ESubject", &t.ESubject, d...)
	cb.Do("SnoAffix", &t.SnoAffix, d...)
}

type AbortPowerMessage struct {
	THeader  RequiredCommandFrameMessageHeader
	SnoPower DT_SNO
}

func (t *AbortPowerMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.SnoPower, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *AbortPowerMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("SnoPower", &t.SnoPower, d...)
}

type CheckpointGizmoData struct {
	// Inherits ActorGizmoData
	// Inherits PolymorphicBase
	DwType                           DT_UINT
	DwPad                            DT_UINT
	FDisableNonFriendlyOperation     DT_INT
	FWalkToCenter                    DT_INT
	FGizmoStartsDisabled             DT_INT
	FUseStringListName               DT_INT
	FForceMinimapIcon                DT_INT
	FlOperationRadius                DT_FLOAT
	Unk_d0b1df5                      DT_FLOAT
	FlGizmoUseTime                   DT_FLOAT
	SnoChannelingEffect              DT_SNO
	Unk_2767229                      DT_INT
	FGizmoShowProgressBar            DT_INT
	Unk_6d9ebe1                      DT_INT
	Unk_5456245                      DT_INT
	Unk_af5815a                      DT_INT
	SnoOnClickEffect                 DT_SNO
	SnoPickedUpEffect                DT_SNO
	SnoDropOnGroundEffect            DT_SNO
	TConditionData                   GizmoConditionData
	SnoPowerOperator                 DT_SNO
	SnoPowerOperate                  DT_SNO
	SnoPowerOperatorActive           DT_SNO
	SnoPowerOperateActive            DT_SNO
	Unk_359810e                      DT_INT
	NCooldown                        DT_UINT
	Unk_9c8478e                      DT_UINT
	Unk_d45ed2d                      DT_INT
	Unk_f6b20b7                      DT_INT
	Unk_54513b8                      DT_INT
	Unk_fd1f378                      DT_UINT
	HGizmoOperateFlavorTextMsgLabel  DT_UINT
	HGizmoOperateDescriptionMsgLabel DT_UINT
	FlGizmoOperateOffset             DT_FLOAT
	Unk_ab58cd3                      DT_ENUM
	Unk_91a3966                      DT_UINT
	HGizmoChannelingLabel            DT_UINT
	Unk_4be4371                      DT_INT
	PtProxData                       DT_POLYMORPHIC_VARIABLEARRAY[*ProximityDataBase]
}

func (t *CheckpointGizmoData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.FDisableNonFriendlyOperation, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.FWalkToCenter, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.FGizmoStartsDisabled, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.FUseStringListName, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.FForceMinimapIcon, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.FlOperationRadius, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.Unk_d0b1df5, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.FlGizmoUseTime, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.SnoChannelingEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.Unk_2767229, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.FGizmoShowProgressBar, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+60, &t.Unk_6d9ebe1, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.Unk_5456245, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.Unk_af5815a, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.SnoOnClickEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.SnoPickedUpEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.SnoDropOnGroundEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.TConditionData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.SnoPowerOperator, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.SnoPowerOperate, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.SnoPowerOperatorActive, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+100, &t.SnoPowerOperateActive, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+104, &t.Unk_359810e, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+108, &t.NCooldown, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.Unk_9c8478e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+116, &t.Unk_d45ed2d, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.Unk_f6b20b7, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+124, &t.Unk_54513b8, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.Unk_fd1f378, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+132, &t.HGizmoOperateFlavorTextMsgLabel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+136, &t.HGizmoOperateDescriptionMsgLabel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+140, &t.FlGizmoOperateOffset, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+144, &t.Unk_ab58cd3, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+148, &t.Unk_91a3966, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+152, &t.HGizmoChannelingLabel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+156, &t.Unk_4be4371, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+160, &t.PtProxData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+184, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *CheckpointGizmoData) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("FDisableNonFriendlyOperation", &t.FDisableNonFriendlyOperation, d...)
	cb.Do("FWalkToCenter", &t.FWalkToCenter, d...)
	cb.Do("FGizmoStartsDisabled", &t.FGizmoStartsDisabled, d...)
	cb.Do("FUseStringListName", &t.FUseStringListName, d...)
	cb.Do("FForceMinimapIcon", &t.FForceMinimapIcon, d...)
	cb.Do("FlOperationRadius", &t.FlOperationRadius, d...)
	cb.Do("Unk_d0b1df5", &t.Unk_d0b1df5, d...)
	cb.Do("FlGizmoUseTime", &t.FlGizmoUseTime, d...)
	cb.Do("SnoChannelingEffect", &t.SnoChannelingEffect, d...)
	cb.Do("Unk_2767229", &t.Unk_2767229, d...)
	cb.Do("FGizmoShowProgressBar", &t.FGizmoShowProgressBar, d...)
	cb.Do("Unk_6d9ebe1", &t.Unk_6d9ebe1, d...)
	cb.Do("Unk_5456245", &t.Unk_5456245, d...)
	cb.Do("Unk_af5815a", &t.Unk_af5815a, d...)
	cb.Do("SnoOnClickEffect", &t.SnoOnClickEffect, d...)
	cb.Do("SnoPickedUpEffect", &t.SnoPickedUpEffect, d...)
	cb.Do("SnoDropOnGroundEffect", &t.SnoDropOnGroundEffect, d...)
	cb.Do("TConditionData", &t.TConditionData, d...)
	cb.Do("SnoPowerOperator", &t.SnoPowerOperator, d...)
	cb.Do("SnoPowerOperate", &t.SnoPowerOperate, d...)
	cb.Do("SnoPowerOperatorActive", &t.SnoPowerOperatorActive, d...)
	cb.Do("SnoPowerOperateActive", &t.SnoPowerOperateActive, d...)
	cb.Do("Unk_359810e", &t.Unk_359810e, d...)
	cb.Do("NCooldown", &t.NCooldown, d...)
	cb.Do("Unk_9c8478e", &t.Unk_9c8478e, d...)
	cb.Do("Unk_d45ed2d", &t.Unk_d45ed2d, d...)
	cb.Do("Unk_f6b20b7", &t.Unk_f6b20b7, d...)
	cb.Do("Unk_54513b8", &t.Unk_54513b8, d...)
	cb.Do("Unk_fd1f378", &t.Unk_fd1f378, d...)
	cb.Do("HGizmoOperateFlavorTextMsgLabel", &t.HGizmoOperateFlavorTextMsgLabel, d...)
	cb.Do("HGizmoOperateDescriptionMsgLabel", &t.HGizmoOperateDescriptionMsgLabel, d...)
	cb.Do("FlGizmoOperateOffset", &t.FlGizmoOperateOffset, d...)
	cb.Do("Unk_ab58cd3", &t.Unk_ab58cd3, d...)
	cb.Do("Unk_91a3966", &t.Unk_91a3966, d...)
	cb.Do("HGizmoChannelingLabel", &t.HGizmoChannelingLabel, d...)
	cb.Do("Unk_4be4371", &t.Unk_4be4371, d...)
	cb.Do("PtProxData", &t.PtProxData, d...)
}

type UIStoryboard2StyleOptionalFieldMapDefaults struct {
	SzOnEnd DT_CSTRING[*DT_BYTE]
}

func (t *UIStoryboard2StyleOptionalFieldMapDefaults) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SzOnEnd, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *UIStoryboard2StyleOptionalFieldMapDefaults) Walk(cb WalkCallback, d ...any) {
	cb.Do("SzOnEnd", &t.SzOnEnd, d...)
}

type PetMessage struct {
	THeader     RequiredMessageHeader
	Unk_70bf7e7 DT_UINT
	NIndex      DT_INT
	AnnPet      DT_ACD_NETWORK_NAME
	GbidPetType DT_GBID
	TNecroPet   DT_OPTIONAL[*NecroPetData]
	Unk_9e938b5 DT_OPTIONAL[*DT_INT64]
}

func (t *PetMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_70bf7e7, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.NIndex, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.AnnPet, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.GbidPetType, r, &Options{
		Flags: 1,
		Group: 23,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.TNecroPet, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.Unk_9e938b5, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+64, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PetMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("Unk_70bf7e7", &t.Unk_70bf7e7, d...)
	cb.Do("NIndex", &t.NIndex, d...)
	cb.Do("AnnPet", &t.AnnPet, d...)
	cb.Do("GbidPetType", &t.GbidPetType, d...)
	cb.Do("TNecroPet", &t.TNecroPet, d...)
	cb.Do("Unk_9e938b5", &t.Unk_9e938b5, d...)
}

type Type_619110a4 struct {
	NIsFemale        DT_INT
	SnoFace          DT_SNO
	SnoMakeup        DT_SNO
	SnoMarkingShape  DT_SNO
	SnoMarkingColor  DT_SNO
	SnoEyeColor      DT_SNO
	NSkinColorChoice DT_INT
	SnoHairColor     DT_SNO
	SnoHairStyle     DT_SNO
	SnoFacialHair    DT_SNO
	SnoJewelry       DT_SNO
	Unk_23f8995      DT_INT
	Unk_35e41c8      DT_INT
}

func (t *Type_619110a4) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.NIsFemale, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.SnoFace, r, &Options{
		Flags: 1,
		Group: 140,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.SnoMakeup, r, &Options{
		Flags: 1,
		Group: 132,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.SnoMarkingShape, r, &Options{
		Flags: 1,
		Group: 115,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoMarkingColor, r, &Options{
		Flags: 1,
		Group: 133,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.SnoEyeColor, r, &Options{
		Flags: 1,
		Group: 131,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.NSkinColorChoice, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.SnoHairColor, r, &Options{
		Flags: 1,
		Group: 134,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.SnoHairStyle, r, &Options{
		Flags: 1,
		Group: 138,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.SnoFacialHair, r, &Options{
		Flags: 1,
		Group: 139,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.SnoJewelry, r, &Options{
		Flags: 1,
		Group: 119,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.Unk_23f8995, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.Unk_35e41c8, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+52, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_619110a4) Walk(cb WalkCallback, d ...any) {
	cb.Do("NIsFemale", &t.NIsFemale, d...)
	cb.Do("SnoFace", &t.SnoFace, d...)
	cb.Do("SnoMakeup", &t.SnoMakeup, d...)
	cb.Do("SnoMarkingShape", &t.SnoMarkingShape, d...)
	cb.Do("SnoMarkingColor", &t.SnoMarkingColor, d...)
	cb.Do("SnoEyeColor", &t.SnoEyeColor, d...)
	cb.Do("NSkinColorChoice", &t.NSkinColorChoice, d...)
	cb.Do("SnoHairColor", &t.SnoHairColor, d...)
	cb.Do("SnoHairStyle", &t.SnoHairStyle, d...)
	cb.Do("SnoFacialHair", &t.SnoFacialHair, d...)
	cb.Do("SnoJewelry", &t.SnoJewelry, d...)
	cb.Do("Unk_23f8995", &t.Unk_23f8995, d...)
	cb.Do("Unk_35e41c8", &t.Unk_35e41c8, d...)
}

type AnimTreeBlendTriangle struct {
	NChildIndex1     DT_UINT
	NChildIndex2     DT_UINT
	DwDisintegrative DT_UINT
	TTriangle        Triangle2D
}

func (t *AnimTreeBlendTriangle) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.NChildIndex1, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.NChildIndex2, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwDisintegrative, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.TTriangle, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+36, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *AnimTreeBlendTriangle) Walk(cb WalkCallback, d ...any) {
	cb.Do("NChildIndex1", &t.NChildIndex1, d...)
	cb.Do("NChildIndex2", &t.NChildIndex2, d...)
	cb.Do("DwDisintegrative", &t.DwDisintegrative, d...)
	cb.Do("TTriangle", &t.TTriangle, d...)
}

type PowerConditionIsInActorGroup struct {
	// Inherits PowerConditionBase
	// Inherits PolymorphicBase
	DwType         DT_UINT
	BInverse       DT_INT
	DwPad          DT_UINT
	ESubject       DT_ENUM
	GbidActorGroup DT_GBID
}

func (t *PowerConditionIsInActorGroup) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BInverse, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ESubject, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.GbidActorGroup, r, &Options{
		Flags: 1,
		Group: 24,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PowerConditionIsInActorGroup) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("BInverse", &t.BInverse, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("ESubject", &t.ESubject, d...)
	cb.Do("GbidActorGroup", &t.GbidActorGroup, d...)
}

type LargeBiomeObject struct {
	// Inherits BiomeObject
	// Inherits BiomeItem
	// Inherits PolymorphicBase
	DwType                      DT_UINT
	FlRadius                    DT_FLOAT
	Unk_2fd1cdb                 DT_FLOAT
	TAllowedScaleRange          DT_RANGE[*DT_FLOAT]
	FlItemNonAngularFrequencyA  DT_RANGE[*DT_FLOAT]
	FlItemNonAngularFrequencyB  DT_RANGE[*DT_FLOAT]
	FlItemNonAngularFrequencyC  DT_RANGE[*DT_FLOAT]
	TAllowedVerticalOffsetRange DT_RANGE[*DT_FLOAT]
	FlChance                    DT_FLOAT
	DwFlags                     DT_UINT
	Unk_2a8c4b6                 DT_FLOAT
	AAzimuthAngle               DT_FLOAT
	AAltitudeAngle              DT_FLOAT
	Unk_6ead041                 DT_RANGE[*DT_FLOAT]
	TParametricSettings         ParametricSettings
	ArProximityAdjustments      DT_VARIABLEARRAY[*ProximityAdjustment]
	SnonameObject               DT_SNO_NAME
	Unk_d094b9a                 DT_ENUM
	QInitialOrientation         bcQuat
	SzLookName                  DT_UINT
	DwShaderMapOverride         DT_UINT
	DwPad                       DT_UINT
}

func (t *LargeBiomeObject) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.FlRadius, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.Unk_2fd1cdb, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.TAllowedScaleRange, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.FlItemNonAngularFrequencyA, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.FlItemNonAngularFrequencyB, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.FlItemNonAngularFrequencyC, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.TAllowedVerticalOffsetRange, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.FlChance, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.DwFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_2a8c4b6, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.AAzimuthAngle, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.AAltitudeAngle, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.Unk_6ead041, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.TParametricSettings, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+224, &t.ArProximityAdjustments, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+240, &t.SnonameObject, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+248, &t.Unk_d094b9a, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+252, &t.QInitialOrientation, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+268, &t.SzLookName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+272, &t.DwShaderMapOverride, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+276, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+280, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *LargeBiomeObject) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("FlRadius", &t.FlRadius, d...)
	cb.Do("Unk_2fd1cdb", &t.Unk_2fd1cdb, d...)
	cb.Do("TAllowedScaleRange", &t.TAllowedScaleRange, d...)
	cb.Do("FlItemNonAngularFrequencyA", &t.FlItemNonAngularFrequencyA, d...)
	cb.Do("FlItemNonAngularFrequencyB", &t.FlItemNonAngularFrequencyB, d...)
	cb.Do("FlItemNonAngularFrequencyC", &t.FlItemNonAngularFrequencyC, d...)
	cb.Do("TAllowedVerticalOffsetRange", &t.TAllowedVerticalOffsetRange, d...)
	cb.Do("FlChance", &t.FlChance, d...)
	cb.Do("DwFlags", &t.DwFlags, d...)
	cb.Do("Unk_2a8c4b6", &t.Unk_2a8c4b6, d...)
	cb.Do("AAzimuthAngle", &t.AAzimuthAngle, d...)
	cb.Do("AAltitudeAngle", &t.AAltitudeAngle, d...)
	cb.Do("Unk_6ead041", &t.Unk_6ead041, d...)
	cb.Do("TParametricSettings", &t.TParametricSettings, d...)
	cb.Do("ArProximityAdjustments", &t.ArProximityAdjustments, d...)
	cb.Do("SnonameObject", &t.SnonameObject, d...)
	cb.Do("Unk_d094b9a", &t.Unk_d094b9a, d...)
	cb.Do("QInitialOrientation", &t.QInitialOrientation, d...)
	cb.Do("SzLookName", &t.SzLookName, d...)
	cb.Do("DwShaderMapOverride", &t.DwShaderMapOverride, d...)
	cb.Do("DwPad", &t.DwPad, d...)
}

type MonsterFamilyDefinition struct {
	ArArchetypes DT_VARIABLEARRAY[*MonsterFamilyArchetype]
}

func (t *MonsterFamilyDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.ArArchetypes, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *MonsterFamilyDefinition) Walk(cb WalkCallback, d ...any) {
	cb.Do("ArArchetypes", &t.ArArchetypes, d...)
}

type TriggerEventHitFlash struct {
	// Inherits TriggerEvent
	// Inherits PolymorphicBase
	DwType                      DT_UINT
	DwPad                       DT_UINT
	TConditions                 TriggerConditions
	FGenerated                  DT_INT
	Unk_6cba752                 DT_INT
	DwParentActorID             DT_UINT
	DwTriggerFlags              DT_UINT
	DwTriggerFlagsEx            DT_UINT
	RgbaColorAdd                DT_RGBACOLOR
	NHitFlashAddDuration        DT_FLOAT
	RgbaColorMul                DT_RGBACOLOR
	NHitFlashMulDuration        DT_FLOAT
	FlHitFlashIntensity         DT_FLOAT
	Unk_622a853                 DT_FLOAT
	FlHitFlashIntensityDuration DT_FLOAT
	EHitFlashAddFresnel         DT_ENUM
	EHitFlashMulFresnel         DT_ENUM
	EHitFlashCurve              DT_ENUM
	DwID                        DT_UINT
	NMaxHitFlash                DT_UINT
	Unk_17f7deb                 DT_INT
	Unk_b19da4b                 DT_INT
}

func (t *TriggerEventHitFlash) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.FGenerated, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_6cba752, r, &Options{Flags: 16}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.DwParentActorID, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.DwTriggerFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.DwTriggerFlagsEx, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.RgbaColorAdd, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.NHitFlashAddDuration, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.RgbaColorMul, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+100, &t.NHitFlashMulDuration, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+104, &t.FlHitFlashIntensity, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+108, &t.Unk_622a853, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.FlHitFlashIntensityDuration, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+116, &t.EHitFlashAddFresnel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.EHitFlashMulFresnel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+124, &t.EHitFlashCurve, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.DwID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+132, &t.NMaxHitFlash, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+136, &t.Unk_17f7deb, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+140, &t.Unk_b19da4b, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+144, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TriggerEventHitFlash) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("TConditions", &t.TConditions, d...)
	cb.Do("FGenerated", &t.FGenerated, d...)
	cb.Do("Unk_6cba752", &t.Unk_6cba752, d...)
	cb.Do("DwParentActorID", &t.DwParentActorID, d...)
	cb.Do("DwTriggerFlags", &t.DwTriggerFlags, d...)
	cb.Do("DwTriggerFlagsEx", &t.DwTriggerFlagsEx, d...)
	cb.Do("RgbaColorAdd", &t.RgbaColorAdd, d...)
	cb.Do("NHitFlashAddDuration", &t.NHitFlashAddDuration, d...)
	cb.Do("RgbaColorMul", &t.RgbaColorMul, d...)
	cb.Do("NHitFlashMulDuration", &t.NHitFlashMulDuration, d...)
	cb.Do("FlHitFlashIntensity", &t.FlHitFlashIntensity, d...)
	cb.Do("Unk_622a853", &t.Unk_622a853, d...)
	cb.Do("FlHitFlashIntensityDuration", &t.FlHitFlashIntensityDuration, d...)
	cb.Do("EHitFlashAddFresnel", &t.EHitFlashAddFresnel, d...)
	cb.Do("EHitFlashMulFresnel", &t.EHitFlashMulFresnel, d...)
	cb.Do("EHitFlashCurve", &t.EHitFlashCurve, d...)
	cb.Do("DwID", &t.DwID, d...)
	cb.Do("NMaxHitFlash", &t.NMaxHitFlash, d...)
	cb.Do("Unk_17f7deb", &t.Unk_17f7deb, d...)
	cb.Do("Unk_b19da4b", &t.Unk_b19da4b, d...)
}

type InterpolationNode_bcVec3 struct {
	TValueMin DT_VECTOR3D
	TValueMax DT_VECTOR3D
	TTime     DT_FLOAT
}

func (t *InterpolationNode_bcVec3) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.TValueMin, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.TValueMax, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.TTime, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+28, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *InterpolationNode_bcVec3) Walk(cb WalkCallback, d ...any) {
	cb.Do("TValueMin", &t.TValueMin, d...)
	cb.Do("TValueMax", &t.TValueMax, d...)
	cb.Do("TTime", &t.TTime, d...)
}

type InterpolationNode_bcVec4 struct {
	TValueMin DT_VECTOR4D
	TValueMax DT_VECTOR4D
	TTime     DT_FLOAT
}

func (t *InterpolationNode_bcVec4) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.TValueMin, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TValueMax, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.TTime, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+36, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *InterpolationNode_bcVec4) Walk(cb WalkCallback, d ...any) {
	cb.Do("TValueMin", &t.TValueMin, d...)
	cb.Do("TValueMax", &t.TValueMax, d...)
	cb.Do("TTime", &t.TTime, d...)
}

type QuestPhase struct {
	// Inherits PolymorphicBase
	DwType                  DT_UINT
	DwPad                   DT_UINT
	DwUID                   DT_UINT
	DwFlags                 DT_UINT
	EType                   DT_ENUM
	ArCallbackSets          DT_VARIABLEARRAY[*QuestObjectiveSet]
	Unk_4b2de13             DT_UINT
	Unk_188a07a             DT_VARIABLEARRAY[*DT_SNO]
	Unk_61c2846             DT_INT
	Unk_951ad2a             DT_SNO
	SnoReward               DT_SNO
	Unk_189b89b             DT_INT
	NTimerDuration          DT_UINT
	Unk_2bde7b6             DT_INT
	ArQuestChangedDestLevel DT_VARIABLEARRAY[*DT_SNO]
	Unk_8280b0e             DT_INT
	Unk_eff642d             DT_INT
	Unk_fc27941             DT_INT
	Unk_d9a8a05             DT_UINT
	Unk_5d4cfc0             DT_UINT
	Unk_669bcf8             DT_UINT
	Unk_287ecb5             DT_UINT
	Unk_6344bd7             DT_FLOAT
	Unk_fab6e45             MarkerHandle
	Unk_47f8481             DT_VECTOR3D
	Unk_ed8215b             DT_SNO
	Unk_f6ded77             UIImageHandleReference
	Unk_f84da79             UIImageHandleReference
	SnoAudioContext         DT_SNO
}

func (t *QuestPhase) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.DwUID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.EType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.ArCallbackSets, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.Unk_4b2de13, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.Unk_188a07a, r, &Options{
		Flags: 1,
		Group: 73,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_61c2846, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.Unk_951ad2a, r, &Options{
		Flags: 1,
		Group: 51,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.SnoReward, r, &Options{
		Flags: 1,
		Group: 52,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.Unk_189b89b, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.NTimerDuration, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.Unk_2bde7b6, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.ArQuestChangedDestLevel, r, &Options{
		Flags: 513,
		Group: 22,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.Unk_8280b0e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+116, &t.Unk_eff642d, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.Unk_fc27941, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+124, &t.Unk_d9a8a05, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.Unk_5d4cfc0, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+132, &t.Unk_669bcf8, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+136, &t.Unk_287ecb5, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+140, &t.Unk_6344bd7, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+144, &t.Unk_fab6e45, r, &Options{Flags: 513}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+152, &t.Unk_47f8481, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+164, &t.Unk_ed8215b, r, &Options{
		Flags: 512,
		Group: 48,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+168, &t.Unk_f6ded77, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+172, &t.Unk_f84da79, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+176, &t.SnoAudioContext, r, &Options{
		Flags: 1,
		Group: 93,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+184, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *QuestPhase) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("DwUID", &t.DwUID, d...)
	cb.Do("DwFlags", &t.DwFlags, d...)
	cb.Do("EType", &t.EType, d...)
	cb.Do("ArCallbackSets", &t.ArCallbackSets, d...)
	cb.Do("Unk_4b2de13", &t.Unk_4b2de13, d...)
	cb.Do("Unk_188a07a", &t.Unk_188a07a, d...)
	cb.Do("Unk_61c2846", &t.Unk_61c2846, d...)
	cb.Do("Unk_951ad2a", &t.Unk_951ad2a, d...)
	cb.Do("SnoReward", &t.SnoReward, d...)
	cb.Do("Unk_189b89b", &t.Unk_189b89b, d...)
	cb.Do("NTimerDuration", &t.NTimerDuration, d...)
	cb.Do("Unk_2bde7b6", &t.Unk_2bde7b6, d...)
	cb.Do("ArQuestChangedDestLevel", &t.ArQuestChangedDestLevel, d...)
	cb.Do("Unk_8280b0e", &t.Unk_8280b0e, d...)
	cb.Do("Unk_eff642d", &t.Unk_eff642d, d...)
	cb.Do("Unk_fc27941", &t.Unk_fc27941, d...)
	cb.Do("Unk_d9a8a05", &t.Unk_d9a8a05, d...)
	cb.Do("Unk_5d4cfc0", &t.Unk_5d4cfc0, d...)
	cb.Do("Unk_669bcf8", &t.Unk_669bcf8, d...)
	cb.Do("Unk_287ecb5", &t.Unk_287ecb5, d...)
	cb.Do("Unk_6344bd7", &t.Unk_6344bd7, d...)
	cb.Do("Unk_fab6e45", &t.Unk_fab6e45, d...)
	cb.Do("Unk_47f8481", &t.Unk_47f8481, d...)
	cb.Do("Unk_ed8215b", &t.Unk_ed8215b, d...)
	cb.Do("Unk_f6ded77", &t.Unk_f6ded77, d...)
	cb.Do("Unk_f84da79", &t.Unk_f84da79, d...)
	cb.Do("SnoAudioContext", &t.SnoAudioContext, d...)
}

type ImbueAffixResultMessage struct {
	THeader     RequiredMessageHeader
	NResultCode DT_INT
}

func (t *ImbueAffixResultMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.NResultCode, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+20, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ImbueAffixResultMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("NResultCode", &t.NResultCode, d...)
}

type AnimSetAnimPreloadHelper struct {
	SnoAnimSet         DT_SNO
	TWeaponClassMale   DT_FIXEDARRAY[*SerialDataInfo]
	TWeaponClassFemale DT_FIXEDARRAY[*SerialDataInfo]
}

func (t *AnimSetAnimPreloadHelper) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoAnimSet, r, &Options{
		Flags: 1,
		Group: 8,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.TWeaponClassMale, r, &Options{
		ArrayLength: 33,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+268, &t.TWeaponClassFemale, r, &Options{
		ArrayLength: 33,
		Flags:       1,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+532, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *AnimSetAnimPreloadHelper) Walk(cb WalkCallback, d ...any) {
	cb.Do("SnoAnimSet", &t.SnoAnimSet, d...)
	cb.Do("TWeaponClassMale", &t.TWeaponClassMale, d...)
	cb.Do("TWeaponClassFemale", &t.TWeaponClassFemale, d...)
}

type GlobalMarkerActorPortalDestData struct {
	// Inherits GlobalMarkerActorData
	// Inherits PolymorphicBase
	DwType         DT_UINT
	DwPad          DT_UINT
	DwEntranceName DT_STARTLOC_NAME
	DwPortalType   DT_UINT
}

func (t *GlobalMarkerActorPortalDestData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.DwEntranceName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPortalType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *GlobalMarkerActorPortalDestData) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("DwEntranceName", &t.DwEntranceName, d...)
	cb.Do("DwPortalType", &t.DwPortalType, d...)
}

type TriggerEventFootstepDrag struct {
	// Inherits TriggerEventRangedDuration
	// Inherits TriggerEvent
	// Inherits PolymorphicBase
	DwType           DT_UINT
	TConditions      TriggerConditions
	FGenerated       DT_INT
	Unk_6cba752      DT_INT
	DwParentActorID  DT_UINT
	TDuration        DT_FLOAT
	DwTriggerFlags   DT_UINT
	DwTriggerFlagsEx DT_UINT
	TCleanup         TriggerCleanup
	Unk_49e9257      DT_INT
	Unk_5490979      DT_INT
	DwPad            DT_UINT
	THardpointLink   HardpointLink
}

func (t *TriggerEventFootstepDrag) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.FGenerated, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_6cba752, r, &Options{Flags: 16}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.DwParentActorID, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.TDuration, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.DwTriggerFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.DwTriggerFlagsEx, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.TCleanup, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+116, &t.Unk_49e9257, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.Unk_5490979, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+124, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.THardpointLink, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+136, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TriggerEventFootstepDrag) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("TConditions", &t.TConditions, d...)
	cb.Do("FGenerated", &t.FGenerated, d...)
	cb.Do("Unk_6cba752", &t.Unk_6cba752, d...)
	cb.Do("DwParentActorID", &t.DwParentActorID, d...)
	cb.Do("TDuration", &t.TDuration, d...)
	cb.Do("DwTriggerFlags", &t.DwTriggerFlags, d...)
	cb.Do("DwTriggerFlagsEx", &t.DwTriggerFlagsEx, d...)
	cb.Do("TCleanup", &t.TCleanup, d...)
	cb.Do("Unk_49e9257", &t.Unk_49e9257, d...)
	cb.Do("Unk_5490979", &t.Unk_5490979, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("THardpointLink", &t.THardpointLink, d...)
}

type TriggerEventFootstepLift struct {
	// Inherits TriggerEvent
	// Inherits PolymorphicBase
	DwType          DT_UINT
	DwPad           DT_UINT
	TConditions     TriggerConditions
	FGenerated      DT_INT
	Unk_6cba752     DT_INT
	DwParentActorID DT_UINT
	THardpointLink  HardpointLink
}

func (t *TriggerEventFootstepLift) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.FGenerated, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_6cba752, r, &Options{Flags: 16}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.DwParentActorID, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.THardpointLink, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+88, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TriggerEventFootstepLift) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("TConditions", &t.TConditions, d...)
	cb.Do("FGenerated", &t.FGenerated, d...)
	cb.Do("Unk_6cba752", &t.Unk_6cba752, d...)
	cb.Do("DwParentActorID", &t.DwParentActorID, d...)
	cb.Do("THardpointLink", &t.THardpointLink, d...)
}

type ConversationSpeakerCaseNode struct {
	// Inherits ConversationScopeNode
	// Inherits ConversationTreeNode
	// Inherits PolymorphicBase
	DwType         DT_UINT
	DwPad          DT_UINT
	DwNodeID       DT_UINT
	DwNextNodeID   DT_UINT
	DwParentNodeID DT_UINT
	PtNextNode     DT_INT64
	DwFlags        DT_UINT
	SzComment      DT_CSTRING[*DT_BYTE]
	ArChildNodes   DT_POLYMORPHIC_VARIABLEARRAY[*DT_INT64]
	SnoCondition   DT_SNO
	Unk_d8bf9e4    DT_INT
	SnoSpeaker     DT_SNO
}

func (t *ConversationSpeakerCaseNode) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.DwNodeID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwNextNodeID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.DwParentNodeID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.PtNextNode, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.DwFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.SzComment, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.ArChildNodes, r, &Options{Flags: 262145}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.SnoCondition, r, &Options{
		Flags: 1,
		Group: 51,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.Unk_d8bf9e4, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.SnoSpeaker, r, &Options{
		Flags: 1,
		Group: 72,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+104, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ConversationSpeakerCaseNode) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("DwNodeID", &t.DwNodeID, d...)
	cb.Do("DwNextNodeID", &t.DwNextNodeID, d...)
	cb.Do("DwParentNodeID", &t.DwParentNodeID, d...)
	cb.Do("PtNextNode", &t.PtNextNode, d...)
	cb.Do("DwFlags", &t.DwFlags, d...)
	cb.Do("SzComment", &t.SzComment, d...)
	cb.Do("ArChildNodes", &t.ArChildNodes, d...)
	cb.Do("SnoCondition", &t.SnoCondition, d...)
	cb.Do("Unk_d8bf9e4", &t.Unk_d8bf9e4, d...)
	cb.Do("SnoSpeaker", &t.SnoSpeaker, d...)
}

type PlayerTalentRankSubcondition struct {
	// Inherits NumericComparisonSubcondition
	// Inherits Subcondition
	// Inherits PolymorphicBase
	DwType         DT_UINT
	BNegate        DT_INT
	EComparisonOp  DT_ENUM
	DwPad          DT_UINT
	SnoTalentPower DT_SNO
	DwTalentRank   DT_UINT
}

func (t *PlayerTalentRankSubcondition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BNegate, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.EComparisonOp, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.SnoTalentPower, r, &Options{
		Flags: 513,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.DwTalentRank, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+40, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PlayerTalentRankSubcondition) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("BNegate", &t.BNegate, d...)
	cb.Do("EComparisonOp", &t.EComparisonOp, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("SnoTalentPower", &t.SnoTalentPower, d...)
	cb.Do("DwTalentRank", &t.DwTalentRank, d...)
}

type BoostDefinition struct {
	SzBoostName        DT_CSTRING[*DT_BYTE]
	SzBoostDescription DT_CSTRING[*DT_BYTE]
	SzBoostMenuPath    DT_CSTRING[*DT_BYTE]
	NGold              DT_INT64
	ArAdditionalCheats DT_VARIABLEARRAY[*BoostCheatEntry]
	Unk_fd3ff28        DT_VARIABLEARRAY[*DT_BYTE]
	DwBoostHash        DT_UINT
}

func (t *BoostDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.SzBoostName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SzBoostDescription, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.SzBoostMenuPath, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.NGold, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.ArAdditionalCheats, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.Unk_fd3ff28, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.DwBoostHash, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+104, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *BoostDefinition) Walk(cb WalkCallback, d ...any) {
	cb.Do("SzBoostName", &t.SzBoostName, d...)
	cb.Do("SzBoostDescription", &t.SzBoostDescription, d...)
	cb.Do("SzBoostMenuPath", &t.SzBoostMenuPath, d...)
	cb.Do("NGold", &t.NGold, d...)
	cb.Do("ArAdditionalCheats", &t.ArAdditionalCheats, d...)
	cb.Do("Unk_fd3ff28", &t.Unk_fd3ff28, d...)
	cb.Do("DwBoostHash", &t.DwBoostHash, d...)
}

type StoryboardPlaySoundNodeCollection struct {
	ArNodes     DT_VARIABLEARRAY[*StoryboardPlaySoundNode]
	Unk_36cc429 DT_VARIABLEARRAY[*DT_INT]
}

func (t *StoryboardPlaySoundNodeCollection) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.ArNodes, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_36cc429, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *StoryboardPlaySoundNodeCollection) Walk(cb WalkCallback, d ...any) {
	cb.Do("ArNodes", &t.ArNodes, d...)
	cb.Do("Unk_36cc429", &t.Unk_36cc429, d...)
}

type OnGetHitWithCCBuffCallback struct {
	// Inherits BuffCallbackBase
	// Inherits PolymorphicBase
	DwType                DT_UINT
	DwPad                 DT_UINT
	SnoTriggerEffectGroup DT_SNO
	ArConditions          DT_POLYMORPHIC_VARIABLEARRAY[*DT_INT64]
	Unk_7f4b6d5           DT_INT
	Unk_a639294           DT_INT
	DwCCTypes             DT_UINT
}

func (t *OnGetHitWithCCBuffCallback) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoTriggerEffectGroup, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ArConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.Unk_7f4b6d5, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.Unk_a639294, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.DwCCTypes, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if _, err := r.Seek(p+64, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *OnGetHitWithCCBuffCallback) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("SnoTriggerEffectGroup", &t.SnoTriggerEffectGroup, d...)
	cb.Do("ArConditions", &t.ArConditions, d...)
	cb.Do("Unk_7f4b6d5", &t.Unk_7f4b6d5, d...)
	cb.Do("Unk_a639294", &t.Unk_a639294, d...)
	cb.Do("DwCCTypes", &t.DwCCTypes, d...)
}

type TriggerEventDisableCollisionMessages struct {
	// Inherits TriggerEvent
	// Inherits PolymorphicBase
	DwType          DT_UINT
	DwPad           DT_UINT
	TConditions     TriggerConditions
	FGenerated      DT_INT
	Unk_6cba752     DT_INT
	DwParentActorID DT_UINT
	DwTriggerFlags  DT_UINT
}

func (t *TriggerEventDisableCollisionMessages) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.FGenerated, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_6cba752, r, &Options{Flags: 16}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.DwParentActorID, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.DwTriggerFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if _, err := r.Seek(p+88, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TriggerEventDisableCollisionMessages) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("TConditions", &t.TConditions, d...)
	cb.Do("FGenerated", &t.FGenerated, d...)
	cb.Do("Unk_6cba752", &t.Unk_6cba752, d...)
	cb.Do("DwParentActorID", &t.DwParentActorID, d...)
	cb.Do("DwTriggerFlags", &t.DwTriggerFlags, d...)
}

type UIScrollBoxStyle struct {
	// Inherits UIWindowStyle
	// Inherits UIControlStyle
	// Inherits PolymorphicBase
	DwType                    DT_UINT
	DwPad                     DT_UINT
	HParentStyle              UIControlHandle
	Unk_441f783               DT_INT64
	M_eHasModifiedPowerTagMap DT_TAGMAP[*DT_ENUM]
	TConsoleInput             UIControlConsoleInput
	Unk_b4f614c               DT_TAGMAP[*DT_ENUM]
	Unk_651714c               DT_TAGMAP[*DT_ENUM]
}

func (t *UIScrollBoxStyle) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.HParentStyle, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_441f783, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.M_eHasModifiedPowerTagMap, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.TConsoleInput, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.Unk_b4f614c, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.Unk_651714c, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+96, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *UIScrollBoxStyle) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("HParentStyle", &t.HParentStyle, d...)
	cb.Do("Unk_441f783", &t.Unk_441f783, d...)
	cb.Do("M_eHasModifiedPowerTagMap", &t.M_eHasModifiedPowerTagMap, d...)
	cb.Do("TConsoleInput", &t.TConsoleInput, d...)
	cb.Do("Unk_b4f614c", &t.Unk_b4f614c, d...)
	cb.Do("Unk_651714c", &t.Unk_651714c, d...)
}

type InventorySplitStackMessage struct {
	THeader   RequiredMessageHeader
	AnnItem   DT_ACD_NETWORK_NAME
	UAmount   DT_INT64
	TLocation InvLoc
}

func (t *InventorySplitStackMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.AnnItem, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.UAmount, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.TLocation, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+56, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *InventorySplitStackMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("AnnItem", &t.AnnItem, d...)
	cb.Do("UAmount", &t.UAmount, d...)
	cb.Do("TLocation", &t.TLocation, d...)
}

type PlayerWorldTierEligibilityMessage struct {
	THeader               RequiredMessageHeader
	EWorldTierEligibility DT_INT
}

func (t *PlayerWorldTierEligibilityMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.EWorldTierEligibility, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+20, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PlayerWorldTierEligibilityMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("EWorldTierEligibility", &t.EWorldTierEligibility, d...)
}

type AIPropType struct {
	THeader               GBIDHeader
	ArAIPropPowerPairings DT_VARIABLEARRAY[*AIPropPowerPairing]
}

func (t *AIPropType) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+264, &t.ArAIPropPowerPairings, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+280, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *AIPropType) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("ArAIPropPowerPairings", &t.ArAIPropPowerPairings, d...)
}

type UIControlFont struct {
	Unk_86d67b DT_TAGMAP[*DT_ENUM]
}

func (t *UIControlFont) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Unk_86d67b, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *UIControlFont) Walk(cb WalkCallback, d ...any) {
	cb.Do("Unk_86d67b", &t.Unk_86d67b, d...)
}

type UIControlIcon struct {
	Unk_535a62d DT_TAGMAP[*DT_ENUM]
}

func (t *UIControlIcon) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Unk_535a62d, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *UIControlIcon) Walk(cb WalkCallback, d ...any) {
	cb.Do("Unk_535a62d", &t.Unk_535a62d, d...)
}

type PortalGizmoData struct {
	// Inherits ActorGizmoData
	// Inherits PolymorphicBase
	DwType                           DT_UINT
	DwPad                            DT_UINT
	FDisableNonFriendlyOperation     DT_INT
	FWalkToCenter                    DT_INT
	FGizmoStartsDisabled             DT_INT
	FUseStringListName               DT_INT
	FForceMinimapIcon                DT_INT
	FlOperationRadius                DT_FLOAT
	Unk_d0b1df5                      DT_FLOAT
	FlGizmoUseTime                   DT_FLOAT
	SnoChannelingEffect              DT_SNO
	Unk_2767229                      DT_INT
	FGizmoShowProgressBar            DT_INT
	Unk_6d9ebe1                      DT_INT
	Unk_5456245                      DT_INT
	Unk_af5815a                      DT_INT
	SnoOnClickEffect                 DT_SNO
	SnoPickedUpEffect                DT_SNO
	SnoDropOnGroundEffect            DT_SNO
	TConditionData                   GizmoConditionData
	SnoPowerOperator                 DT_SNO
	SnoPowerOperate                  DT_SNO
	SnoPowerOperatorActive           DT_SNO
	SnoPowerOperateActive            DT_SNO
	Unk_359810e                      DT_INT
	NCooldown                        DT_UINT
	Unk_9c8478e                      DT_UINT
	Unk_d45ed2d                      DT_INT
	Unk_f6b20b7                      DT_INT
	Unk_54513b8                      DT_INT
	Unk_fd1f378                      DT_UINT
	HGizmoOperateFlavorTextMsgLabel  DT_UINT
	HGizmoOperateDescriptionMsgLabel DT_UINT
	FlGizmoOperateOffset             DT_FLOAT
	Unk_ab58cd3                      DT_ENUM
	Unk_91a3966                      DT_UINT
	HGizmoChannelingLabel            DT_UINT
	Unk_4be4371                      DT_INT
	TCommonPortalData                CommonPortalGizmoData
	FSetsDynamicReturnLocation       DT_INT
}

func (t *PortalGizmoData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.FDisableNonFriendlyOperation, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.FWalkToCenter, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.FGizmoStartsDisabled, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.FUseStringListName, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.FForceMinimapIcon, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.FlOperationRadius, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.Unk_d0b1df5, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.FlGizmoUseTime, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.SnoChannelingEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.Unk_2767229, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.FGizmoShowProgressBar, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+60, &t.Unk_6d9ebe1, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.Unk_5456245, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.Unk_af5815a, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.SnoOnClickEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.SnoPickedUpEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.SnoDropOnGroundEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.TConditionData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.SnoPowerOperator, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.SnoPowerOperate, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.SnoPowerOperatorActive, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+100, &t.SnoPowerOperateActive, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+104, &t.Unk_359810e, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+108, &t.NCooldown, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.Unk_9c8478e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+116, &t.Unk_d45ed2d, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.Unk_f6b20b7, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+124, &t.Unk_54513b8, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.Unk_fd1f378, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+132, &t.HGizmoOperateFlavorTextMsgLabel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+136, &t.HGizmoOperateDescriptionMsgLabel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+140, &t.FlGizmoOperateOffset, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+144, &t.Unk_ab58cd3, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+148, &t.Unk_91a3966, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+152, &t.HGizmoChannelingLabel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+156, &t.Unk_4be4371, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+160, &t.TCommonPortalData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+192, &t.FSetsDynamicReturnLocation, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+200, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PortalGizmoData) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("FDisableNonFriendlyOperation", &t.FDisableNonFriendlyOperation, d...)
	cb.Do("FWalkToCenter", &t.FWalkToCenter, d...)
	cb.Do("FGizmoStartsDisabled", &t.FGizmoStartsDisabled, d...)
	cb.Do("FUseStringListName", &t.FUseStringListName, d...)
	cb.Do("FForceMinimapIcon", &t.FForceMinimapIcon, d...)
	cb.Do("FlOperationRadius", &t.FlOperationRadius, d...)
	cb.Do("Unk_d0b1df5", &t.Unk_d0b1df5, d...)
	cb.Do("FlGizmoUseTime", &t.FlGizmoUseTime, d...)
	cb.Do("SnoChannelingEffect", &t.SnoChannelingEffect, d...)
	cb.Do("Unk_2767229", &t.Unk_2767229, d...)
	cb.Do("FGizmoShowProgressBar", &t.FGizmoShowProgressBar, d...)
	cb.Do("Unk_6d9ebe1", &t.Unk_6d9ebe1, d...)
	cb.Do("Unk_5456245", &t.Unk_5456245, d...)
	cb.Do("Unk_af5815a", &t.Unk_af5815a, d...)
	cb.Do("SnoOnClickEffect", &t.SnoOnClickEffect, d...)
	cb.Do("SnoPickedUpEffect", &t.SnoPickedUpEffect, d...)
	cb.Do("SnoDropOnGroundEffect", &t.SnoDropOnGroundEffect, d...)
	cb.Do("TConditionData", &t.TConditionData, d...)
	cb.Do("SnoPowerOperator", &t.SnoPowerOperator, d...)
	cb.Do("SnoPowerOperate", &t.SnoPowerOperate, d...)
	cb.Do("SnoPowerOperatorActive", &t.SnoPowerOperatorActive, d...)
	cb.Do("SnoPowerOperateActive", &t.SnoPowerOperateActive, d...)
	cb.Do("Unk_359810e", &t.Unk_359810e, d...)
	cb.Do("NCooldown", &t.NCooldown, d...)
	cb.Do("Unk_9c8478e", &t.Unk_9c8478e, d...)
	cb.Do("Unk_d45ed2d", &t.Unk_d45ed2d, d...)
	cb.Do("Unk_f6b20b7", &t.Unk_f6b20b7, d...)
	cb.Do("Unk_54513b8", &t.Unk_54513b8, d...)
	cb.Do("Unk_fd1f378", &t.Unk_fd1f378, d...)
	cb.Do("HGizmoOperateFlavorTextMsgLabel", &t.HGizmoOperateFlavorTextMsgLabel, d...)
	cb.Do("HGizmoOperateDescriptionMsgLabel", &t.HGizmoOperateDescriptionMsgLabel, d...)
	cb.Do("FlGizmoOperateOffset", &t.FlGizmoOperateOffset, d...)
	cb.Do("Unk_ab58cd3", &t.Unk_ab58cd3, d...)
	cb.Do("Unk_91a3966", &t.Unk_91a3966, d...)
	cb.Do("HGizmoChannelingLabel", &t.HGizmoChannelingLabel, d...)
	cb.Do("Unk_4be4371", &t.Unk_4be4371, d...)
	cb.Do("TCommonPortalData", &t.TCommonPortalData, d...)
	cb.Do("FSetsDynamicReturnLocation", &t.FSetsDynamicReturnLocation, d...)
}

type TelemetryBugEnteredMessage struct {
	THeader     RequiredMessageHeader
	DwTimeStamp DT_INT64
}

func (t *TelemetryBugEnteredMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.DwTimeStamp, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TelemetryBugEnteredMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("DwTimeStamp", &t.DwTimeStamp, d...)
}

type SalvageResultItem struct {
	SnoItem DT_SNO
	NCount  DT_INT
}

func (t *SalvageResultItem) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoItem, r, &Options{
		Flags: 1,
		Group: 73,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.NCount, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *SalvageResultItem) Walk(cb WalkCallback, d ...any) {
	cb.Do("SnoItem", &t.SnoItem, d...)
	cb.Do("NCount", &t.NCount, d...)
}

type ItemUpgradeResultMessage struct {
	THeader   RequiredMessageHeader
	NNewLevel DT_INT
	NMaxLevel DT_INT
	SnoItem   DT_SNO
}

func (t *ItemUpgradeResultMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.NNewLevel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.NMaxLevel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SnoItem, r, &Options{
		Flags: 1,
		Group: 73,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+28, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ItemUpgradeResultMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("NNewLevel", &t.NNewLevel, d...)
	cb.Do("NMaxLevel", &t.NMaxLevel, d...)
	cb.Do("SnoItem", &t.SnoItem, d...)
}

type FoliageGrid struct {
	Grid       DT_VARIABLEARRAY[*DT_UINT]
	AabbBounds AABB
	DwRows     DT_UINT
	DwColumns  DT_UINT
}

func (t *FoliageGrid) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Grid, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.AabbBounds, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.DwRows, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.DwColumns, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *FoliageGrid) Walk(cb WalkCallback, d ...any) {
	cb.Do("Grid", &t.Grid, d...)
	cb.Do("AabbBounds", &t.AabbBounds, d...)
	cb.Do("DwRows", &t.DwRows, d...)
	cb.Do("DwColumns", &t.DwColumns, d...)
}

type GlobalVendorEvents struct {
	SnoConversations DT_FIXEDARRAY[*DT_SNO]
}

func (t *GlobalVendorEvents) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoConversations, r, &Options{
		ArrayLength: 5,
		Flags:       1,
		Group:       12,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+20, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *GlobalVendorEvents) Walk(cb WalkCallback, d ...any) {
	cb.Do("SnoConversations", &t.SnoConversations, d...)
}

type PlayerQuestMessage struct {
	THeader               RequiredMessageHeader
	DwPlayerGameAccountId DT_UINT
	SnoQuest              DT_SNO
	SnoLevelArea          DT_SNO
}

func (t *PlayerQuestMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.DwPlayerGameAccountId, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.SnoQuest, r, &Options{
		Flags: 1,
		Group: 31,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SnoLevelArea, r, &Options{
		Flags: 1,
		Group: 22,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+28, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PlayerQuestMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("DwPlayerGameAccountId", &t.DwPlayerGameAccountId, d...)
	cb.Do("SnoQuest", &t.SnoQuest, d...)
	cb.Do("SnoLevelArea", &t.SnoLevelArea, d...)
}

type UIEditStyleOptionalFieldMapDefaults struct {
	SnoTextCursorAnim                 DT_SNO
	SzOnChange                        DT_CSTRING[*DT_BYTE]
	BIMEDisabled                      DT_INT
	BNumbersOnly                      DT_INT
	Freshness                         DT_INT
	SzOnReturnEndEdit                 DT_CSTRING[*DT_BYTE]
	SzOnGainedFocus                   DT_CSTRING[*DT_BYTE]
	SzOnLostFocus                     DT_CSTRING[*DT_BYTE]
	HEditPlaceholderText              StringLabelHandleEx
	RgbaEditPlaceholderTextForeground DT_RGBACOLOR
	RgbaEditPlaceholderTextDropShadow DT_RGBACOLOR
	NMaxEditChars                     DT_INT
	Unk_a4c0376                       DT_CSTRING[*DT_BYTE]
	Unk_5b06d35                       StringLabelHandleEx
	NMaxEditBytes                     DT_INT
	NNumDecimalPlaces                 DT_INT
	BAcceptsReturn                    DT_INT
	Unk_75dc498                       DT_INT
	Unk_16b847e                       StringLabelHandleEx
	Unk_6240b01                       StringLabelHandleEx
}

func (t *UIEditStyleOptionalFieldMapDefaults) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoTextCursorAnim, r, &Options{
		Flags: 1,
		Group: 7,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.SzOnChange, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.BIMEDisabled, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.BNumbersOnly, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.Freshness, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.SzOnReturnEndEdit, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.SzOnGainedFocus, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.SzOnLostFocus, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.HEditPlaceholderText, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.RgbaEditPlaceholderTextForeground, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+100, &t.RgbaEditPlaceholderTextDropShadow, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+104, &t.NMaxEditChars, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.Unk_a4c0376, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.Unk_5b06d35, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+136, &t.NMaxEditBytes, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+140, &t.NNumDecimalPlaces, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+144, &t.BAcceptsReturn, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+148, &t.Unk_75dc498, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+152, &t.Unk_16b847e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+160, &t.Unk_6240b01, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+168, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *UIEditStyleOptionalFieldMapDefaults) Walk(cb WalkCallback, d ...any) {
	cb.Do("SnoTextCursorAnim", &t.SnoTextCursorAnim, d...)
	cb.Do("SzOnChange", &t.SzOnChange, d...)
	cb.Do("BIMEDisabled", &t.BIMEDisabled, d...)
	cb.Do("BNumbersOnly", &t.BNumbersOnly, d...)
	cb.Do("Freshness", &t.Freshness, d...)
	cb.Do("SzOnReturnEndEdit", &t.SzOnReturnEndEdit, d...)
	cb.Do("SzOnGainedFocus", &t.SzOnGainedFocus, d...)
	cb.Do("SzOnLostFocus", &t.SzOnLostFocus, d...)
	cb.Do("HEditPlaceholderText", &t.HEditPlaceholderText, d...)
	cb.Do("RgbaEditPlaceholderTextForeground", &t.RgbaEditPlaceholderTextForeground, d...)
	cb.Do("RgbaEditPlaceholderTextDropShadow", &t.RgbaEditPlaceholderTextDropShadow, d...)
	cb.Do("NMaxEditChars", &t.NMaxEditChars, d...)
	cb.Do("Unk_a4c0376", &t.Unk_a4c0376, d...)
	cb.Do("Unk_5b06d35", &t.Unk_5b06d35, d...)
	cb.Do("NMaxEditBytes", &t.NMaxEditBytes, d...)
	cb.Do("NNumDecimalPlaces", &t.NNumDecimalPlaces, d...)
	cb.Do("BAcceptsReturn", &t.BAcceptsReturn, d...)
	cb.Do("Unk_75dc498", &t.Unk_75dc498, d...)
	cb.Do("Unk_16b847e", &t.Unk_16b847e, d...)
	cb.Do("Unk_6240b01", &t.Unk_6240b01, d...)
}

type DebugProjectileDetPathData struct {
	EDetPathType DT_ENUM
	WpStartPos   DT_VECTOR3D
	WpTargetPos  DT_VECTOR3D
	AOriginalYaw DT_FLOAT
	Unk_36073a3  DT_INT
	FlFloatData0 DT_FLOAT
	FlFloatData1 DT_FLOAT
	FlFloatData2 DT_FLOAT
	FlFloatData3 DT_FLOAT
	FlFloatData4 DT_FLOAT
}

func (t *DebugProjectileDetPathData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.EDetPathType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.WpStartPos, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.WpTargetPos, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.AOriginalYaw, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.Unk_36073a3, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.FlFloatData0, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.FlFloatData1, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.FlFloatData2, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.FlFloatData3, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.FlFloatData4, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+56, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *DebugProjectileDetPathData) Walk(cb WalkCallback, d ...any) {
	cb.Do("EDetPathType", &t.EDetPathType, d...)
	cb.Do("WpStartPos", &t.WpStartPos, d...)
	cb.Do("WpTargetPos", &t.WpTargetPos, d...)
	cb.Do("AOriginalYaw", &t.AOriginalYaw, d...)
	cb.Do("Unk_36073a3", &t.Unk_36073a3, d...)
	cb.Do("FlFloatData0", &t.FlFloatData0, d...)
	cb.Do("FlFloatData1", &t.FlFloatData1, d...)
	cb.Do("FlFloatData2", &t.FlFloatData2, d...)
	cb.Do("FlFloatData3", &t.FlFloatData3, d...)
	cb.Do("FlFloatData4", &t.FlFloatData4, d...)
}

type Type_666e5231 struct {
	FlTime  DT_FLOAT
	FlValue DT_FLOAT
}

func (t *Type_666e5231) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.FlTime, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.FlValue, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_666e5231) Walk(cb WalkCallback, d ...any) {
	cb.Do("FlTime", &t.FlTime, d...)
	cb.Do("FlValue", &t.FlValue, d...)
}

type NecroArmyUnitSpecializationUpgradeData struct {
	SnoUpgradePower DT_SNO
}

func (t *NecroArmyUnitSpecializationUpgradeData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoUpgradePower, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+4, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *NecroArmyUnitSpecializationUpgradeData) Walk(cb WalkCallback, d ...any) {
	cb.Do("SnoUpgradePower", &t.SnoUpgradePower, d...)
}

type TriggerEventSequenceEnded struct {
	// Inherits TriggerEvent
	// Inherits PolymorphicBase
	DwType          DT_UINT
	DwPad           DT_UINT
	TConditions     TriggerConditions
	FGenerated      DT_INT
	Unk_6cba752     DT_INT
	DwParentActorID DT_UINT
	IdEffectGroup   DT_UINT
	FLoop           DT_INT
}

func (t *TriggerEventSequenceEnded) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.FGenerated, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_6cba752, r, &Options{Flags: 16}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.DwParentActorID, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.IdEffectGroup, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.FLoop, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+88, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TriggerEventSequenceEnded) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("TConditions", &t.TConditions, d...)
	cb.Do("FGenerated", &t.FGenerated, d...)
	cb.Do("Unk_6cba752", &t.Unk_6cba752, d...)
	cb.Do("DwParentActorID", &t.DwParentActorID, d...)
	cb.Do("IdEffectGroup", &t.IdEffectGroup, d...)
	cb.Do("FLoop", &t.FLoop, d...)
}

type UIMinimapRoadsStyle struct {
	// Inherits UIWindowStyle
	// Inherits UIControlStyle
	// Inherits PolymorphicBase
	DwType                    DT_UINT
	DwPad                     DT_UINT
	HParentStyle              UIControlHandle
	Unk_441f783               DT_INT64
	M_eHasModifiedPowerTagMap DT_TAGMAP[*DT_ENUM]
	TConsoleInput             UIControlConsoleInput
	Unk_b4f614c               DT_TAGMAP[*DT_ENUM]
}

func (t *UIMinimapRoadsStyle) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.HParentStyle, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_441f783, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.M_eHasModifiedPowerTagMap, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.TConsoleInput, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.Unk_b4f614c, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+80, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *UIMinimapRoadsStyle) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("HParentStyle", &t.HParentStyle, d...)
	cb.Do("Unk_441f783", &t.Unk_441f783, d...)
	cb.Do("M_eHasModifiedPowerTagMap", &t.M_eHasModifiedPowerTagMap, d...)
	cb.Do("TConsoleInput", &t.TConsoleInput, d...)
	cb.Do("Unk_b4f614c", &t.Unk_b4f614c, d...)
}

type ShaderMapOverrideOptionalFieldMapDefaults struct {
	SnoShaderEffect DT_SNO
}

func (t *ShaderMapOverrideOptionalFieldMapDefaults) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoShaderEffect, r, &Options{
		Flags: 1,
		Group: 37,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+4, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ShaderMapOverrideOptionalFieldMapDefaults) Walk(cb WalkCallback, d ...any) {
	cb.Do("SnoShaderEffect", &t.SnoShaderEffect, d...)
}

type AIPropPowerPairing struct {
	SnoPowerActivator                 DT_SNO
	SnoPowerSelf                      DT_SNO
	SnoSummonedEncounterOverridePower DT_SNO
	Unk_87c7255                       DT_FLOAT
	EPowerSyncType                    DT_ENUM
	Unk_c0c1492                       DT_INT
	SPropPairingName                  DT_UINT
	Unk_c7bd259                       DT_UINT
}

func (t *AIPropPowerPairing) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoPowerActivator, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.SnoPowerSelf, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.SnoSummonedEncounterOverridePower, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.Unk_87c7255, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.EPowerSyncType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.Unk_c0c1492, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SPropPairingName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.Unk_c7bd259, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *AIPropPowerPairing) Walk(cb WalkCallback, d ...any) {
	cb.Do("SnoPowerActivator", &t.SnoPowerActivator, d...)
	cb.Do("SnoPowerSelf", &t.SnoPowerSelf, d...)
	cb.Do("SnoSummonedEncounterOverridePower", &t.SnoSummonedEncounterOverridePower, d...)
	cb.Do("Unk_87c7255", &t.Unk_87c7255, d...)
	cb.Do("EPowerSyncType", &t.EPowerSyncType, d...)
	cb.Do("Unk_c0c1492", &t.Unk_c0c1492, d...)
	cb.Do("SPropPairingName", &t.SPropPairingName, d...)
	cb.Do("Unk_c7bd259", &t.Unk_c7bd259, d...)
}

type MarkerMonsterActorData struct {
	ETeamIndex                    DT_ENUM
	Unk_2a0e071                   DT_INT
	SnoStartingAIBehaviorOverride DT_SNO
	SnoStartingAnimSetOverride    DT_SNO
	Unk_e86679d                   DT_FLOAT
}

func (t *MarkerMonsterActorData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.ETeamIndex, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.Unk_2a0e071, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.SnoStartingAIBehaviorOverride, r, &Options{
		Flags: 1,
		Group: 3,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.SnoStartingAnimSetOverride, r, &Options{
		Flags: 1,
		Group: 8,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_e86679d, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+20, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *MarkerMonsterActorData) Walk(cb WalkCallback, d ...any) {
	cb.Do("ETeamIndex", &t.ETeamIndex, d...)
	cb.Do("Unk_2a0e071", &t.Unk_2a0e071, d...)
	cb.Do("SnoStartingAIBehaviorOverride", &t.SnoStartingAIBehaviorOverride, d...)
	cb.Do("SnoStartingAnimSetOverride", &t.SnoStartingAnimSetOverride, d...)
	cb.Do("Unk_e86679d", &t.Unk_e86679d, d...)
}

type PowerConditionDamageIsDot struct {
	// Inherits PowerConditionBase
	// Inherits PolymorphicBase
	DwType   DT_UINT
	BInverse DT_INT
	DwPad    DT_UINT
}

func (t *PowerConditionDamageIsDot) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BInverse, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PowerConditionDamageIsDot) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("BInverse", &t.BInverse, d...)
	cb.Do("DwPad", &t.DwPad, d...)
}

type PowerConditionDamageIsFar struct {
	// Inherits PowerConditionBase
	// Inherits PolymorphicBase
	DwType   DT_UINT
	BInverse DT_INT
	DwPad    DT_UINT
}

func (t *PowerConditionDamageIsFar) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BInverse, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PowerConditionDamageIsFar) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("BInverse", &t.BInverse, d...)
	cb.Do("DwPad", &t.DwPad, d...)
}

type MalignantMonsterColorSubcondition struct {
	// Inherits Subcondition
	// Inherits PolymorphicBase
	DwType             DT_UINT
	BNegate            DT_INT
	DwPad              DT_UINT
	GbidMalignantColor DT_GBID
	EActorToEvaluate   DT_ENUM
}

func (t *MalignantMonsterColorSubcondition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BNegate, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.GbidMalignantColor, r, &Options{
		Flags: 1,
		Group: 63,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.EActorToEvaluate, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *MalignantMonsterColorSubcondition) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("BNegate", &t.BNegate, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("GbidMalignantColor", &t.GbidMalignantColor, d...)
	cb.Do("EActorToEvaluate", &t.EActorToEvaluate, d...)
}

type SeasonalPostCampaignCompleteSubcondition struct {
	// Inherits Subcondition
	// Inherits PolymorphicBase
	DwType  DT_UINT
	BNegate DT_INT
	DwPad   DT_UINT
}

func (t *SeasonalPostCampaignCompleteSubcondition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BNegate, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *SeasonalPostCampaignCompleteSubcondition) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("BNegate", &t.BNegate, d...)
	cb.Do("DwPad", &t.DwPad, d...)
}

type PlayerIndexRequestMessage struct {
	THeader               RequiredRequestMessageHeader
	DwPlayerGameAccountId DT_UINT
}

func (t *PlayerIndexRequestMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPlayerGameAccountId, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PlayerIndexRequestMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("DwPlayerGameAccountId", &t.DwPlayerGameAccountId, d...)
}

type ActorSlotHelper struct {
	TComponent SerialDataInfo
}

func (t *ActorSlotHelper) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.TComponent, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ActorSlotHelper) Walk(cb WalkCallback, d ...any) {
	cb.Do("TComponent", &t.TComponent, d...)
}

type Type_6808914a struct {
	NHeightFieldCount       DT_INT
	FlHeightTexturesSize    DT_FLOAT
	FlMaskTexturesSize      DT_FLOAT
	FlFlowMapTexturesSize   DT_FLOAT
	FlClutterBuffersSize    DT_FLOAT
	FlIndexBuffersSize      DT_FLOAT
	FlFogMaskBuffersSize    DT_FLOAT
	FlOceanMaskBuffersSize  DT_FLOAT
	FlSphericalHarmonicSize DT_FLOAT
	FlVertexAOSize          DT_FLOAT
}

func (t *Type_6808914a) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.NHeightFieldCount, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.FlHeightTexturesSize, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.FlMaskTexturesSize, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.FlFlowMapTexturesSize, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.FlClutterBuffersSize, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.FlIndexBuffersSize, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.FlFogMaskBuffersSize, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.FlOceanMaskBuffersSize, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.FlSphericalHarmonicSize, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.FlVertexAOSize, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+40, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_6808914a) Walk(cb WalkCallback, d ...any) {
	cb.Do("NHeightFieldCount", &t.NHeightFieldCount, d...)
	cb.Do("FlHeightTexturesSize", &t.FlHeightTexturesSize, d...)
	cb.Do("FlMaskTexturesSize", &t.FlMaskTexturesSize, d...)
	cb.Do("FlFlowMapTexturesSize", &t.FlFlowMapTexturesSize, d...)
	cb.Do("FlClutterBuffersSize", &t.FlClutterBuffersSize, d...)
	cb.Do("FlIndexBuffersSize", &t.FlIndexBuffersSize, d...)
	cb.Do("FlFogMaskBuffersSize", &t.FlFogMaskBuffersSize, d...)
	cb.Do("FlOceanMaskBuffersSize", &t.FlOceanMaskBuffersSize, d...)
	cb.Do("FlSphericalHarmonicSize", &t.FlSphericalHarmonicSize, d...)
	cb.Do("FlVertexAOSize", &t.FlVertexAOSize, d...)
}

type Type_68303aef struct {
	// Inherits BuffCallbackBase
	// Inherits PolymorphicBase
	DwType                DT_UINT
	DwPad                 DT_UINT
	SnoTriggerEffectGroup DT_SNO
	ArConditions          DT_POLYMORPHIC_VARIABLEARRAY[*DT_INT64]
}

func (t *Type_68303aef) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoTriggerEffectGroup, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ArConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_68303aef) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("SnoTriggerEffectGroup", &t.SnoTriggerEffectGroup, d...)
	cb.Do("ArConditions", &t.ArConditions, d...)
}

type PreloadSpawnMarkerData struct {
	TSNOName   DT_SNO_NAME
	EActorType DT_ENUM
	EGender    DT_ENUM
}

func (t *PreloadSpawnMarkerData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.TSNOName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.EActorType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.EGender, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PreloadSpawnMarkerData) Walk(cb WalkCallback, d ...any) {
	cb.Do("TSNOName", &t.TSNOName, d...)
	cb.Do("EActorType", &t.EActorType, d...)
	cb.Do("EGender", &t.EGender, d...)
}

type UInt64DataResponse struct {
	THeader RequiredResponseMessageHeader
	UData   DT_INT64
}

func (t *UInt64DataResponse) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.UData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *UInt64DataResponse) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("UData", &t.UData, d...)
}

type WaypointEffectInfo struct {
	SnoIntroEffect        DT_SNO
	SnoLoopIntroEffect    DT_SNO
	SnoLoopEffect         DT_SNO
	SnoLoopOutroEffect    DT_SNO
	SnoLoopSkipEffect     DT_SNO
	Unk_7bc440d           DT_FLOAT
	FlLoopMinDuration     DT_FLOAT
	Unk_86403ef           DT_INT
	Unk_f0eaae5           DT_INT
	Unk_e0a3943           DT_INT
	Unk_9c071e3           DT_INT
	Unk_4bd94b4           DT_INT
	Unk_69b2ec7           DT_INT
	Unk_449111f           DT_INT
	SnoLoopingWorld       DT_SNO
	SzCameraMarkerName    DT_CHARARRAY
	SnoOutroEffect        DT_SNO
	SnoSkippedOutroEffect DT_SNO
	Unk_bdd12d            DT_INT
	Unk_f8d8170           DT_FLOAT
	Unk_188141b           DT_FLOAT
	Unk_66ebec            DT_FLOAT
	Unk_e660d97           DT_FLOAT
}

func (t *WaypointEffectInfo) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoIntroEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.SnoLoopIntroEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.SnoLoopEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.SnoLoopOutroEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoLoopSkipEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.Unk_7bc440d, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.FlLoopMinDuration, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.Unk_86403ef, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.Unk_f0eaae5, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.Unk_e0a3943, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.Unk_9c071e3, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.Unk_4bd94b4, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.Unk_69b2ec7, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.Unk_449111f, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.SnoLoopingWorld, r, &Options{
		Flags: 513,
		Group: 48,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+60, &t.SzCameraMarkerName, r, &Options{
		ArrayLength: 128,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+188, &t.SnoOutroEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+192, &t.SnoSkippedOutroEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+196, &t.Unk_bdd12d, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+200, &t.Unk_f8d8170, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+204, &t.Unk_188141b, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+208, &t.Unk_66ebec, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+212, &t.Unk_e660d97, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+216, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *WaypointEffectInfo) Walk(cb WalkCallback, d ...any) {
	cb.Do("SnoIntroEffect", &t.SnoIntroEffect, d...)
	cb.Do("SnoLoopIntroEffect", &t.SnoLoopIntroEffect, d...)
	cb.Do("SnoLoopEffect", &t.SnoLoopEffect, d...)
	cb.Do("SnoLoopOutroEffect", &t.SnoLoopOutroEffect, d...)
	cb.Do("SnoLoopSkipEffect", &t.SnoLoopSkipEffect, d...)
	cb.Do("Unk_7bc440d", &t.Unk_7bc440d, d...)
	cb.Do("FlLoopMinDuration", &t.FlLoopMinDuration, d...)
	cb.Do("Unk_86403ef", &t.Unk_86403ef, d...)
	cb.Do("Unk_f0eaae5", &t.Unk_f0eaae5, d...)
	cb.Do("Unk_e0a3943", &t.Unk_e0a3943, d...)
	cb.Do("Unk_9c071e3", &t.Unk_9c071e3, d...)
	cb.Do("Unk_4bd94b4", &t.Unk_4bd94b4, d...)
	cb.Do("Unk_69b2ec7", &t.Unk_69b2ec7, d...)
	cb.Do("Unk_449111f", &t.Unk_449111f, d...)
	cb.Do("SnoLoopingWorld", &t.SnoLoopingWorld, d...)
	cb.Do("SzCameraMarkerName", &t.SzCameraMarkerName, d...)
	cb.Do("SnoOutroEffect", &t.SnoOutroEffect, d...)
	cb.Do("SnoSkippedOutroEffect", &t.SnoSkippedOutroEffect, d...)
	cb.Do("Unk_bdd12d", &t.Unk_bdd12d, d...)
	cb.Do("Unk_f8d8170", &t.Unk_f8d8170, d...)
	cb.Do("Unk_188141b", &t.Unk_188141b, d...)
	cb.Do("Unk_66ebec", &t.Unk_66ebec, d...)
	cb.Do("Unk_e660d97", &t.Unk_e660d97, d...)
}

type HardpointOffsets struct {
	ArMaleOffsets   DT_VARIABLEARRAY[*HardpointOffset]
	ArFemaleOffsets DT_VARIABLEARRAY[*HardpointOffset]
}

func (t *HardpointOffsets) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.ArMaleOffsets, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.ArFemaleOffsets, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *HardpointOffsets) Walk(cb WalkCallback, d ...any) {
	cb.Do("ArMaleOffsets", &t.ArMaleOffsets, d...)
	cb.Do("ArFemaleOffsets", &t.ArFemaleOffsets, d...)
}

type RevealTeamMessage struct {
	THeader       RequiredMessageHeader
	ETeam         DT_ENUM
	DwTeamFlags   DT_UINT
	ETeamColoring DT_ENUM
}

func (t *RevealTeamMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.ETeam, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwTeamFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ETeamColoring, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+28, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *RevealTeamMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("ETeam", &t.ETeam, d...)
	cb.Do("DwTeamFlags", &t.DwTeamFlags, d...)
	cb.Do("ETeamColoring", &t.ETeamColoring, d...)
}

type IKLegBoneChain struct {
	// Inherits IKBoneChainBase
	// Inherits PolymorphicBase
	DwType                DT_UINT
	DwPad                 DT_UINT
	EIKLimb               DT_ENUM
	EIKTarget             DT_ENUM
	PtIKBones             DT_VARIABLEARRAY[*IKBone]
	BUseAnimatedOffset    DT_INT
	FlOffsetHeight        DT_FLOAT
	TAlternateBone        IKBone
	FlAlternateBoneHeight DT_FLOAT
}

func (t *IKLegBoneChain) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.EIKLimb, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.EIKTarget, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.PtIKBones, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.BUseAnimatedOffset, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.FlOffsetHeight, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.TAlternateBone, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.FlAlternateBoneHeight, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+56, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *IKLegBoneChain) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("EIKLimb", &t.EIKLimb, d...)
	cb.Do("EIKTarget", &t.EIKTarget, d...)
	cb.Do("PtIKBones", &t.PtIKBones, d...)
	cb.Do("BUseAnimatedOffset", &t.BUseAnimatedOffset, d...)
	cb.Do("FlOffsetHeight", &t.FlOffsetHeight, d...)
	cb.Do("TAlternateBone", &t.TAlternateBone, d...)
	cb.Do("FlAlternateBoneHeight", &t.FlAlternateBoneHeight, d...)
}

type Type_6909dd52 struct {
	ClothDataMirror       dmClothDataOldMirror
	PtVertices            DT_VARIABLEARRAY[*dmClothVertexOldMirror]
	PtFaces               DT_VARIABLEARRAY[*dmClothFaceOldMirror]
	PtDistanceConstraints DT_VARIABLEARRAY[*dmClothDistanceConstraintOldMirror]
	PtBendingConstraints  DT_VARIABLEARRAY[*dmClothBendingConstraintOldMirror]
	PtVertexMap           DT_VARIABLEARRAY[*DT_WORD]
	PtCapsules            DT_VARIABLEARRAY[*dmClothCapsuleOldMirror]
	PtPlanes              DT_VARIABLEARRAY[*dmClothPlaneOldMirror]
	PtFollowerIndices     DT_VARIABLEARRAY[*DT_WORD]
	PtAnchorMap           DT_VARIABLEARRAY[*DT_WORD]
}

func (t *Type_6909dd52) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.ClothDataMirror, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+152, &t.PtVertices, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+168, &t.PtFaces, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+184, &t.PtDistanceConstraints, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+200, &t.PtBendingConstraints, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+216, &t.PtVertexMap, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+232, &t.PtCapsules, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+248, &t.PtPlanes, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+264, &t.PtFollowerIndices, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+280, &t.PtAnchorMap, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+296, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_6909dd52) Walk(cb WalkCallback, d ...any) {
	cb.Do("ClothDataMirror", &t.ClothDataMirror, d...)
	cb.Do("PtVertices", &t.PtVertices, d...)
	cb.Do("PtFaces", &t.PtFaces, d...)
	cb.Do("PtDistanceConstraints", &t.PtDistanceConstraints, d...)
	cb.Do("PtBendingConstraints", &t.PtBendingConstraints, d...)
	cb.Do("PtVertexMap", &t.PtVertexMap, d...)
	cb.Do("PtCapsules", &t.PtCapsules, d...)
	cb.Do("PtPlanes", &t.PtPlanes, d...)
	cb.Do("PtFollowerIndices", &t.PtFollowerIndices, d...)
	cb.Do("PtAnchorMap", &t.PtAnchorMap, d...)
}

type SNOFileHeader struct {
	DwSignature  DT_UINT
	DwFormatHash DT_UINT
	DwDummy      DT_UINT
	DwXMLHash    DT_UINT
}

func (t *SNOFileHeader) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.DwSignature, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.DwFormatHash, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwDummy, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwXMLHash, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *SNOFileHeader) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwSignature", &t.DwSignature, d...)
	cb.Do("DwFormatHash", &t.DwFormatHash, d...)
	cb.Do("DwDummy", &t.DwDummy, d...)
	cb.Do("DwXMLHash", &t.DwXMLHash, d...)
}

type ShortcutKey struct {
	EKey           DT_ENUM
	DwModifiers    DT_UINT
	EKeyAlt        DT_ENUM
	DwModifiersAlt DT_UINT
}

func (t *ShortcutKey) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.EKey, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.DwModifiers, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.EKeyAlt, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwModifiersAlt, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ShortcutKey) Walk(cb WalkCallback, d ...any) {
	cb.Do("EKey", &t.EKey, d...)
	cb.Do("DwModifiers", &t.DwModifiers, d...)
	cb.Do("EKeyAlt", &t.EKeyAlt, d...)
	cb.Do("DwModifiersAlt", &t.DwModifiersAlt, d...)
}

type UITimerStyle struct {
	// Inherits UIWindowStyle
	// Inherits UIControlStyle
	// Inherits PolymorphicBase
	DwType                    DT_UINT
	DwPad                     DT_UINT
	HParentStyle              UIControlHandle
	Unk_441f783               DT_INT64
	M_eHasModifiedPowerTagMap DT_TAGMAP[*DT_ENUM]
	TConsoleInput             UIControlConsoleInput
	Unk_b4f614c               DT_TAGMAP[*DT_ENUM]
}

func (t *UITimerStyle) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.HParentStyle, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_441f783, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.M_eHasModifiedPowerTagMap, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.TConsoleInput, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.Unk_b4f614c, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+80, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *UITimerStyle) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("HParentStyle", &t.HParentStyle, d...)
	cb.Do("Unk_441f783", &t.Unk_441f783, d...)
	cb.Do("M_eHasModifiedPowerTagMap", &t.M_eHasModifiedPowerTagMap, d...)
	cb.Do("TConsoleInput", &t.TConsoleInput, d...)
	cb.Do("Unk_b4f614c", &t.Unk_b4f614c, d...)
}

type OnStartPowerCallback struct {
	// Inherits PowerCallbackBase
	// Inherits PolymorphicBase
	DwType                DT_UINT
	DwPad                 DT_UINT
	SnoTriggerEffectGroup DT_SNO
	BCouldHaveRagdolled   DT_INT
}

func (t *OnStartPowerCallback) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoTriggerEffectGroup, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.BCouldHaveRagdolled, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *OnStartPowerCallback) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("SnoTriggerEffectGroup", &t.SnoTriggerEffectGroup, d...)
	cb.Do("BCouldHaveRagdolled", &t.BCouldHaveRagdolled, d...)
}

type PowerConditionHasMonsterTag struct {
	// Inherits PowerConditionBase
	// Inherits PolymorphicBase
	DwType        DT_UINT
	BInverse      DT_INT
	DwPad         DT_UINT
	ESubject      DT_ENUM
	ArMonsterTags DT_VARIABLEARRAY[*DT_GBID]
}

func (t *PowerConditionHasMonsterTag) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BInverse, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ESubject, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.ArMonsterTags, r, &Options{
		Flags: 1,
		Group: 66,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PowerConditionHasMonsterTag) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("BInverse", &t.BInverse, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("ESubject", &t.ESubject, d...)
	cb.Do("ArMonsterTags", &t.ArMonsterTags, d...)
}

type ArmorPactType_Table struct {
	// Inherits GameBalanceTable
	// Inherits PolymorphicBase
	DwType   DT_UINT
	DwPad    DT_UINT
	TEntries DT_VARIABLEARRAY[*ArmorPactType]
}

func (t *ArmorPactType_Table) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TEntries, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ArmorPactType_Table) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("TEntries", &t.TEntries, d...)
}

type AtLeastLogicSubcondition struct {
	// Inherits LogicSubcondition
	// Inherits Subcondition
	// Inherits PolymorphicBase
	DwType       DT_UINT
	BNegate      DT_INT
	DwPad        DT_UINT
	ArConditions DT_POLYMORPHIC_VARIABLEARRAY[*DT_INT64]
	NMinimum     DT_INT
}

func (t *AtLeastLogicSubcondition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BNegate, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ArConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.NMinimum, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+56, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *AtLeastLogicSubcondition) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("BNegate", &t.BNegate, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("ArConditions", &t.ArConditions, d...)
	cb.Do("NMinimum", &t.NMinimum, d...)
}

type ItemCountSubcondition struct {
	// Inherits NumericComparisonSubcondition
	// Inherits Subcondition
	// Inherits PolymorphicBase
	DwType        DT_UINT
	BNegate       DT_INT
	EComparisonOp DT_ENUM
	DwPad         DT_UINT
	SnoItem       DT_SNO
	NItemCount    DT_INT
}

func (t *ItemCountSubcondition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BNegate, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.EComparisonOp, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.SnoItem, r, &Options{
		Flags: 513,
		Group: 73,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.NItemCount, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+40, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ItemCountSubcondition) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("BNegate", &t.BNegate, d...)
	cb.Do("EComparisonOp", &t.EComparisonOp, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("SnoItem", &t.SnoItem, d...)
	cb.Do("NItemCount", &t.NItemCount, d...)
}

type NecroPetData struct {
	EUnitType DT_ENUM
}

func (t *NecroPetData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.EUnitType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+4, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *NecroPetData) Walk(cb WalkCallback, d ...any) {
	cb.Do("EUnitType", &t.EUnitType, d...)
}

type EffectGroupActorAnimationTrack struct {
	// Inherits EffectGroupTrack
	// Inherits PolymorphicBase
	DwType DT_UINT
	DwPad  DT_UINT
}

func (t *EffectGroupActorAnimationTrack) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *EffectGroupActorAnimationTrack) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
}

type ScriptEventParamLevelArea struct {
	// Inherits ScriptEventParamBase
	// Inherits PolymorphicBase
	DwType       DT_UINT
	EParamType   DT_ENUM
	DwPad        DT_UINT
	SnoLevelArea DT_SNO
}

func (t *ScriptEventParamLevelArea) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.EParamType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SnoLevelArea, r, &Options{
		Flags: 513,
		Group: 22,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ScriptEventParamLevelArea) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("EParamType", &t.EParamType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("SnoLevelArea", &t.SnoLevelArea, d...)
}

type ItemQualityModifierSubcondition struct {
	// Inherits NumericComparisonSubcondition
	// Inherits Subcondition
	// Inherits PolymorphicBase
	DwType               DT_UINT
	BNegate              DT_INT
	EComparisonOp        DT_ENUM
	DwPad                DT_UINT
	EItemQualityModifier DT_ENUM
}

func (t *ItemQualityModifierSubcondition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BNegate, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.EComparisonOp, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.EItemQualityModifier, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+40, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ItemQualityModifierSubcondition) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("BNegate", &t.BNegate, d...)
	cb.Do("EComparisonOp", &t.EComparisonOp, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("EItemQualityModifier", &t.EItemQualityModifier, d...)
}

type UIContextMenuStyle struct {
	// Inherits UIStackPanelStyle
	// Inherits UIWindowStyle
	// Inherits UIControlStyle
	// Inherits PolymorphicBase
	DwType                    DT_UINT
	DwPad                     DT_UINT
	HParentStyle              UIControlHandle
	Unk_441f783               DT_INT64
	M_eHasModifiedPowerTagMap DT_TAGMAP[*DT_ENUM]
	TConsoleInput             UIControlConsoleInput
	Unk_b4f614c               DT_TAGMAP[*DT_ENUM]
	Unk_8e594da               DT_TAGMAP[*DT_ENUM]
}

func (t *UIContextMenuStyle) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.HParentStyle, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_441f783, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.M_eHasModifiedPowerTagMap, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.TConsoleInput, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.Unk_b4f614c, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.Unk_8e594da, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+96, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *UIContextMenuStyle) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("HParentStyle", &t.HParentStyle, d...)
	cb.Do("Unk_441f783", &t.Unk_441f783, d...)
	cb.Do("M_eHasModifiedPowerTagMap", &t.M_eHasModifiedPowerTagMap, d...)
	cb.Do("TConsoleInput", &t.TConsoleInput, d...)
	cb.Do("Unk_b4f614c", &t.Unk_b4f614c, d...)
	cb.Do("Unk_8e594da", &t.Unk_8e594da, d...)
}

type CraftingMatCategory struct {
	THeader GBIDHeader
}

func (t *CraftingMatCategory) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+260, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *CraftingMatCategory) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
}

type DeathMaterialTemplate struct{}

func (t *DeathMaterialTemplate) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if _, err := r.Seek(p+1, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *DeathMaterialTemplate) Walk(cb WalkCallback, d ...any) {}

type ParametricClutterIndexLayer struct {
	EClutterIndexLayer DT_ENUM
	TSettings          ParametricSettings
}

func (t *ParametricClutterIndexLayer) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.EClutterIndexLayer, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.TSettings, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+132, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ParametricClutterIndexLayer) Walk(cb WalkCallback, d ...any) {
	cb.Do("EClutterIndexLayer", &t.EClutterIndexLayer, d...)
	cb.Do("TSettings", &t.TSettings, d...)
}

type RunTimeMaterialVectorGraphEntry struct {
	PathValGraph InterpolationPath_bcVec4
}

func (t *RunTimeMaterialVectorGraphEntry) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.PathValGraph, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+56, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *RunTimeMaterialVectorGraphEntry) Walk(cb WalkCallback, d ...any) {
	cb.Do("PathValGraph", &t.PathValGraph, d...)
}

type GameTestingActorUseSkill struct {
	THeader      RequiredMessageHeader
	AnnKey       DT_ACD_NETWORK_NAME
	SnoSkill     DT_SNO
	WpLocation   DT_VECTOR3D
	SearchRadius DT_FLOAT
	BForce       DT_INT
}

func (t *GameTestingActorUseSkill) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.AnnKey, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SnoSkill, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.WpLocation, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.SearchRadius, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.BForce, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *GameTestingActorUseSkill) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("AnnKey", &t.AnnKey, d...)
	cb.Do("SnoSkill", &t.SnoSkill, d...)
	cb.Do("WpLocation", &t.WpLocation, d...)
	cb.Do("SearchRadius", &t.SearchRadius, d...)
	cb.Do("BForce", &t.BForce, d...)
}

type StoryboardValueNode_bcVec2 struct {
	DwType  DT_UINT
	FlTime  DT_FLOAT
	DwPad   DT_UINT
	TValue  DT_VECTOR2D
	EEasing DT_ENUM
}

func (t *StoryboardValueNode_bcVec2) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.FlTime, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.TValue, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.EEasing, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+40, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *StoryboardValueNode_bcVec2) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("FlTime", &t.FlTime, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("TValue", &t.TValue, d...)
	cb.Do("EEasing", &t.EEasing, d...)
}

type UIImageHandleReference struct {
	HImageHandle DT_UINT
}

func (t *UIImageHandleReference) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.HImageHandle, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+4, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *UIImageHandleReference) Walk(cb WalkCallback, d ...any) {
	cb.Do("HImageHandle", &t.HImageHandle, d...)
}

type PlayerWeaponExpertiseLevelMessage struct {
	THeader               RequiredMessageHeader
	DwPlayerGameAccountId DT_UINT
	SnoItemType           DT_SNO
	NNewLevel             DT_INT
}

func (t *PlayerWeaponExpertiseLevelMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.DwPlayerGameAccountId, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.SnoItemType, r, &Options{
		Flags: 1,
		Group: 98,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.NNewLevel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+28, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PlayerWeaponExpertiseLevelMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("DwPlayerGameAccountId", &t.DwPlayerGameAccountId, d...)
	cb.Do("SnoItemType", &t.SnoItemType, d...)
	cb.Do("NNewLevel", &t.NNewLevel, d...)
}

type SphereProximityData struct {
	// Inherits ProximityDataBase
	// Inherits PolymorphicBase
	DwType   DT_UINT
	DwPad    DT_UINT
	FlRadius DT_FLOAT
}

func (t *SphereProximityData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.FlRadius, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *SphereProximityData) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("FlRadius", &t.FlRadius, d...)
}

type ShaderPermShaderProgram struct {
	PShaderProgram DT_VARIABLEARRAY[*DT_BYTE]
	Unk_b776708    DT_VARIABLEARRAY[*DT_BYTE]
	DwKey          DT_INT64
	Unk_8e5f439    DT_VARIABLEARRAY[*DT_UINT]
	Unk_d4d5dbb    DT_VARIABLEARRAY[*DT_INT]
	PtResourceSlot DT_VARIABLEARRAY[*DT_ENUM]
	Unk_6f6dbab    DT_VARIABLEARRAY[*DT_ENUM]
}

func (t *ShaderPermShaderProgram) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.PShaderProgram, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_b776708, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.DwKey, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.Unk_8e5f439, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.Unk_d4d5dbb, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.PtResourceSlot, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.Unk_6f6dbab, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+104, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ShaderPermShaderProgram) Walk(cb WalkCallback, d ...any) {
	cb.Do("PShaderProgram", &t.PShaderProgram, d...)
	cb.Do("Unk_b776708", &t.Unk_b776708, d...)
	cb.Do("DwKey", &t.DwKey, d...)
	cb.Do("Unk_8e5f439", &t.Unk_8e5f439, d...)
	cb.Do("Unk_d4d5dbb", &t.Unk_d4d5dbb, d...)
	cb.Do("PtResourceSlot", &t.PtResourceSlot, d...)
	cb.Do("Unk_6f6dbab", &t.Unk_6f6dbab, d...)
}

type DebugDataFinishedMessage struct {
	THeader  RequiredMessageHeader
	NType    DT_INT
	ArParams DT_FIXEDARRAY[*DT_INT]
}

func (t *DebugDataFinishedMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.NType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.ArParams, r, &Options{
		ArrayLength: 2,
		Flags:       1,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+28, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *DebugDataFinishedMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("NType", &t.NType, d...)
	cb.Do("ArParams", &t.ArParams, d...)
}

type ACDTranslateNormalMessage struct {
	THeader                 RequiredMessageHeader
	Ann                     DT_ACD_NETWORK_NAME
	VDest                   DT_OPTIONAL[*DT_VECTOR3D]
	ADesiredYaw             DT_OPTIONAL[*DT_FLOAT]
	BSnapFacing             DT_OPTIONAL[*DT_INT]
	FlMovementSpeed         DT_OPTIONAL[*DT_FLOAT]
	UMoveFlags              DT_OPTIONAL[*DT_UINT]
	SnoPowerAnimKeyOverride DT_OPTIONAL[*DT_SNO]
	SnoPowerPassability     DT_OPTIONAL[*DT_SNO]
	UAckValue               DT_OPTIONAL[*DT_UINT]
	EMoveType               DT_OPTIONAL[*DT_UINT]
}

func (t *ACDTranslateNormalMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Ann, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.VDest, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.ADesiredYaw, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.BSnapFacing, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.FlMovementSpeed, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.UMoveFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.SnoPowerAnimKeyOverride, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.SnoPowerPassability, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.UAckValue, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.EMoveType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+104, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ACDTranslateNormalMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("Ann", &t.Ann, d...)
	cb.Do("VDest", &t.VDest, d...)
	cb.Do("ADesiredYaw", &t.ADesiredYaw, d...)
	cb.Do("BSnapFacing", &t.BSnapFacing, d...)
	cb.Do("FlMovementSpeed", &t.FlMovementSpeed, d...)
	cb.Do("UMoveFlags", &t.UMoveFlags, d...)
	cb.Do("SnoPowerAnimKeyOverride", &t.SnoPowerAnimKeyOverride, d...)
	cb.Do("SnoPowerPassability", &t.SnoPowerPassability, d...)
	cb.Do("UAckValue", &t.UAckValue, d...)
	cb.Do("EMoveType", &t.EMoveType, d...)
}

type GameFlagSubcondition struct {
	// Inherits Subcondition
	// Inherits PolymorphicBase
	DwType  DT_UINT
	BNegate DT_INT
	DwPad   DT_UINT
	SzLabel DT_CHARARRAY
}

func (t *GameFlagSubcondition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BNegate, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SzLabel, r, &Options{
		ArrayLength: 128,
		Flags:       1,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+152, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *GameFlagSubcondition) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("BNegate", &t.BNegate, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("SzLabel", &t.SzLabel, d...)
}

type Influence struct {
	NBoneIndex DT_INT
	FlWeight   DT_FLOAT
}

func (t *Influence) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.NBoneIndex, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.FlWeight, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Influence) Walk(cb WalkCallback, d ...any) {
	cb.Do("NBoneIndex", &t.NBoneIndex, d...)
	cb.Do("FlWeight", &t.FlWeight, d...)
}

type VertTiledWindowPieces struct {
	// Inherits WindowPiecesBase
	// Inherits PolymorphicBase
	DwType       DT_UINT
	DwPad        DT_UINT
	FlImageScale DT_FLOAT
	NPadding     DT_UINT
	HPieceTop    DT_UINT
	HPieceBottom DT_UINT
	HPieceMiddle DT_UINT
}

func (t *VertTiledWindowPieces) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.FlImageScale, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.NPadding, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.HPieceTop, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.HPieceBottom, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.HPieceMiddle, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+40, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *VertTiledWindowPieces) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("FlImageScale", &t.FlImageScale, d...)
	cb.Do("NPadding", &t.NPadding, d...)
	cb.Do("HPieceTop", &t.HPieceTop, d...)
	cb.Do("HPieceBottom", &t.HPieceBottom, d...)
	cb.Do("HPieceMiddle", &t.HPieceMiddle, d...)
}

type LayerVertexAO struct {
	SnoLayer DT_SNO
	PtChunks DT_VARIABLEARRAY[*LayerInstanceChunk]
}

func (t *LayerVertexAO) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoLayer, r, &Options{
		Flags: 513,
		Group: 24,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.PtChunks, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *LayerVertexAO) Walk(cb WalkCallback, d ...any) {
	cb.Do("SnoLayer", &t.SnoLayer, d...)
	cb.Do("PtChunks", &t.PtChunks, d...)
}

type ParagonGlyphObtainedMessage struct {
	THeader                 RequiredMessageHeader
	SnoParagonGlyphObtained DT_SNO
}

func (t *ParagonGlyphObtainedMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoParagonGlyphObtained, r, &Options{
		Flags: 1,
		Group: 111,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+20, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ParagonGlyphObtainedMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("SnoParagonGlyphObtained", &t.SnoParagonGlyphObtained, d...)
}

type DemonScrollNodeMessage struct {
	THeader   RequiredMessageHeader
	SnoScroll DT_SNO
	NNodeUID  DT_INT
}

func (t *DemonScrollNodeMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoScroll, r, &Options{
		Flags: 1,
		Group: 95,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.NNodeUID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *DemonScrollNodeMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("SnoScroll", &t.SnoScroll, d...)
	cb.Do("NNodeUID", &t.NNodeUID, d...)
}

type PlayPlayerMountSoundMessage struct {
	THeader    RequiredMessageHeader
	ESoundType DT_ENUM
}

func (t *PlayPlayerMountSoundMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.ESoundType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+20, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PlayPlayerMountSoundMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("ESoundType", &t.ESoundType, d...)
}

type PvPResurrectTriggeredBuffCallback struct {
	// Inherits BuffCallbackBase
	// Inherits PolymorphicBase
	DwType                DT_UINT
	DwPad                 DT_UINT
	SnoTriggerEffectGroup DT_SNO
	ArConditions          DT_POLYMORPHIC_VARIABLEARRAY[*DT_INT64]
}

func (t *PvPResurrectTriggeredBuffCallback) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoTriggerEffectGroup, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ArConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PvPResurrectTriggeredBuffCallback) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("SnoTriggerEffectGroup", &t.SnoTriggerEffectGroup, d...)
	cb.Do("ArConditions", &t.ArConditions, d...)
}

type ConditionProperty struct{}

func (t *ConditionProperty) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if _, err := r.Seek(p+1, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ConditionProperty) Walk(cb WalkCallback, d ...any) {}

type ParagonUnequipSocketMessage struct {
	THeader     RequiredMessageHeader
	DwNodeIndex DT_UINT
}

func (t *ParagonUnequipSocketMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.DwNodeIndex, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+20, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ParagonUnequipSocketMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("DwNodeIndex", &t.DwNodeIndex, d...)
}

type Type_6ce32aa3 struct {
	TItemTier   ItemTier
	Unk_14f575e Type_619110a4
}

func (t *Type_6ce32aa3) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.TItemTier, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.Unk_14f575e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+108, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_6ce32aa3) Walk(cb WalkCallback, d ...any) {
	cb.Do("TItemTier", &t.TItemTier, d...)
	cb.Do("Unk_14f575e", &t.Unk_14f575e, d...)
}

type MaterialValueSetDefinition struct{}

func (t *MaterialValueSetDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *MaterialValueSetDefinition) Walk(cb WalkCallback, d ...any) {}

type SkillTreeReward_Table struct {
	// Inherits GameBalanceTable
	// Inherits PolymorphicBase
	DwType   DT_UINT
	DwPad    DT_UINT
	TEntries DT_VARIABLEARRAY[*SkillTreeReward]
}

func (t *SkillTreeReward_Table) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TEntries, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *SkillTreeReward_Table) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("TEntries", &t.TEntries, d...)
}

type WorldRevealedPortalInfo struct {
	WpPosition                    DT_VECTOR3D
	UEntranceGUID                 DT_UINT
	SnoWorld                      DT_SNO
	SnoLevelArea                  DT_SNO
	Unk_38c174                    DT_INT
	SnoPhasingVisibilityCondition DT_SNO
	Unk_e5c224a                   DT_INT
	HMinimapIcon                  DT_UINT
}

func (t *WorldRevealedPortalInfo) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.WpPosition, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.UEntranceGUID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoWorld, r, &Options{
		Flags: 1,
		Group: 48,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.SnoLevelArea, r, &Options{
		Flags: 1,
		Group: 22,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_38c174, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.SnoPhasingVisibilityCondition, r, &Options{
		Flags: 1,
		Group: 51,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.Unk_e5c224a, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.HMinimapIcon, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+40, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *WorldRevealedPortalInfo) Walk(cb WalkCallback, d ...any) {
	cb.Do("WpPosition", &t.WpPosition, d...)
	cb.Do("UEntranceGUID", &t.UEntranceGUID, d...)
	cb.Do("SnoWorld", &t.SnoWorld, d...)
	cb.Do("SnoLevelArea", &t.SnoLevelArea, d...)
	cb.Do("Unk_38c174", &t.Unk_38c174, d...)
	cb.Do("SnoPhasingVisibilityCondition", &t.SnoPhasingVisibilityCondition, d...)
	cb.Do("Unk_e5c224a", &t.Unk_e5c224a, d...)
	cb.Do("HMinimapIcon", &t.HMinimapIcon, d...)
}

type PlayCutsceneMessage struct {
	THeader RequiredMessageHeader
	NIndex  DT_INT
}

func (t *PlayCutsceneMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.NIndex, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+20, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PlayCutsceneMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("NIndex", &t.NIndex, d...)
}

type Type_6de8333b struct {
	SnoSourceAppearance  DT_SNO
	Unk_38cc238          SharedChildFile
	Unk_68e4d62          DT_CHARARRAY
	Unk_9bec2e           SharedChildFile
	Unk_f0e97d8          DT_CHARARRAY
	SnoSourceAnimation   DT_SNO
	NSourcePermutationId DT_UINT
}

func (t *Type_6de8333b) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoSourceAppearance, r, &Options{
		Flags: 513,
		Group: 9,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.Unk_38cc238, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+54, &t.Unk_68e4d62, r, &Options{
		ArrayLength: 256,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+310, &t.Unk_9bec2e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+360, &t.Unk_f0e97d8, r, &Options{
		ArrayLength: 256,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+616, &t.SnoSourceAnimation, r, &Options{
		Flags: 513,
		Group: 6,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+620, &t.NSourcePermutationId, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+624, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_6de8333b) Walk(cb WalkCallback, d ...any) {
	cb.Do("SnoSourceAppearance", &t.SnoSourceAppearance, d...)
	cb.Do("Unk_38cc238", &t.Unk_38cc238, d...)
	cb.Do("Unk_68e4d62", &t.Unk_68e4d62, d...)
	cb.Do("Unk_9bec2e", &t.Unk_9bec2e, d...)
	cb.Do("Unk_f0e97d8", &t.Unk_f0e97d8, d...)
	cb.Do("SnoSourceAnimation", &t.SnoSourceAnimation, d...)
	cb.Do("NSourcePermutationId", &t.NSourcePermutationId, d...)
}

type PowerConditionDamageIsFromPayload struct {
	// Inherits PowerConditionBase
	// Inherits PolymorphicBase
	DwType        DT_UINT
	BInverse      DT_INT
	DwPad         DT_UINT
	SnoPower      DT_SNO
	SzPayloadName DT_UINT
}

func (t *PowerConditionDamageIsFromPayload) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BInverse, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SnoPower, r, &Options{
		Flags: 513,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.SzPayloadName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PowerConditionDamageIsFromPayload) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("BInverse", &t.BInverse, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("SnoPower", &t.SnoPower, d...)
	cb.Do("SzPayloadName", &t.SzPayloadName, d...)
}

type MapPinMessage struct {
	THeader           RequiredMessageHeader
	SnoWorld          DT_SNO
	VecPos            DT_VECTOR3D
	HDestStringLabel  DT_UINT
	SnoDestStringList DT_SNO
}

func (t *MapPinMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoWorld, r, &Options{
		Flags: 1,
		Group: 48,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.VecPos, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.HDestStringLabel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.SnoDestStringList, r, &Options{
		Flags: 1,
		Group: 42,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+40, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *MapPinMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("SnoWorld", &t.SnoWorld, d...)
	cb.Do("VecPos", &t.VecPos, d...)
	cb.Do("HDestStringLabel", &t.HDestStringLabel, d...)
	cb.Do("SnoDestStringList", &t.SnoDestStringList, d...)
}

type ActorVariantPreloadHelper struct {
	SnoActor        DT_SNO
	EDefaultVariant DT_ENUM
	TVariant        SerialDataInfo
}

func (t *ActorVariantPreloadHelper) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoActor, r, &Options{
		Flags: 1,
		Group: 1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.EDefaultVariant, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.TVariant, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ActorVariantPreloadHelper) Walk(cb WalkCallback, d ...any) {
	cb.Do("SnoActor", &t.SnoActor, d...)
	cb.Do("EDefaultVariant", &t.EDefaultVariant, d...)
	cb.Do("TVariant", &t.TVariant, d...)
}

type InterpolationPath_uint32 struct {
	THeader      InterpolationPathHeader
	PtArrayNodes DT_VARIABLEARRAY[*InterpolationNode_uint32]
}

func (t *InterpolationPath_uint32) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.PtArrayNodes, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+56, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *InterpolationPath_uint32) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("PtArrayNodes", &t.PtArrayNodes, d...)
}

type Type_6e97013a struct {
	// Inherits Subcondition
	// Inherits PolymorphicBase
	DwType     DT_UINT
	BNegate    DT_INT
	DwPad      DT_UINT
	TCondition ConditionWrapper
	EQualifier DT_ENUM
	NMaxDepth  DT_UINT
}

func (t *Type_6e97013a) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BNegate, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.TCondition, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.EQualifier, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+60, &t.NMaxDepth, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+64, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_6e97013a) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("BNegate", &t.BNegate, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("TCondition", &t.TCondition, d...)
	cb.Do("EQualifier", &t.EQualifier, d...)
	cb.Do("NMaxDepth", &t.NMaxDepth, d...)
}

type AttributeSetValueMessage struct {
	THeader RequiredMessageHeader
	Ann     DT_ACD_NETWORK_NAME
	TKeyVal NetAttributeKeyValue
}

func (t *AttributeSetValueMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Ann, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.TKeyVal, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+40, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *AttributeSetValueMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("Ann", &t.Ann, d...)
	cb.Do("TKeyVal", &t.TKeyVal, d...)
}

type MergedMsgTriggeredEvent struct {
	Unk_334eb2d          DT_INT
	PtMsgTriggeredEvents DT_VARIABLEARRAY[*MsgTriggeredEvent]
}

func (t *MergedMsgTriggeredEvent) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Unk_334eb2d, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.PtMsgTriggeredEvents, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *MergedMsgTriggeredEvent) Walk(cb WalkCallback, d ...any) {
	cb.Do("Unk_334eb2d", &t.Unk_334eb2d, d...)
	cb.Do("PtMsgTriggeredEvents", &t.PtMsgTriggeredEvents, d...)
}

type Type_6f18c43c struct {
	SzBoneName    DT_CHARARRAY
	FlBlendWeight DT_FLOAT
	Unk_3be99f4   DT_INT
}

func (t *Type_6f18c43c) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SzBoneName, r, &Options{
		ArrayLength: 64,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.FlBlendWeight, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.Unk_3be99f4, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+72, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_6f18c43c) Walk(cb WalkCallback, d ...any) {
	cb.Do("SzBoneName", &t.SzBoneName, d...)
	cb.Do("FlBlendWeight", &t.FlBlendWeight, d...)
	cb.Do("Unk_3be99f4", &t.Unk_3be99f4, d...)
}

type LockingGizmoData struct {
	NGizmoLockItemCountRequiredToOperate   DT_INT
	SnoGizmoLockItemRequiredToOperate      DT_SNO
	FGizmoLockItemConsumedOnOperation      DT_INT
	Unk_496ba25                            DT_INT
	FGizmoLockShowVagueItemRequiredMessage DT_INT
	Unk_dce555f                            DT_INT
	ECurrencyType                          DT_ENUM
	DwCurrencyAmount                       DT_UINT
	HGizmoLockLockedMsgLabel               DT_UINT
}

func (t *LockingGizmoData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.NGizmoLockItemCountRequiredToOperate, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.SnoGizmoLockItemRequiredToOperate, r, &Options{
		Flags: 1,
		Group: 73,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.FGizmoLockItemConsumedOnOperation, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.Unk_496ba25, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.FGizmoLockShowVagueItemRequiredMessage, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.Unk_dce555f, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ECurrencyType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.DwCurrencyAmount, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.HGizmoLockLockedMsgLabel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+36, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *LockingGizmoData) Walk(cb WalkCallback, d ...any) {
	cb.Do("NGizmoLockItemCountRequiredToOperate", &t.NGizmoLockItemCountRequiredToOperate, d...)
	cb.Do("SnoGizmoLockItemRequiredToOperate", &t.SnoGizmoLockItemRequiredToOperate, d...)
	cb.Do("FGizmoLockItemConsumedOnOperation", &t.FGizmoLockItemConsumedOnOperation, d...)
	cb.Do("Unk_496ba25", &t.Unk_496ba25, d...)
	cb.Do("FGizmoLockShowVagueItemRequiredMessage", &t.FGizmoLockShowVagueItemRequiredMessage, d...)
	cb.Do("Unk_dce555f", &t.Unk_dce555f, d...)
	cb.Do("ECurrencyType", &t.ECurrencyType, d...)
	cb.Do("DwCurrencyAmount", &t.DwCurrencyAmount, d...)
	cb.Do("HGizmoLockLockedMsgLabel", &t.HGizmoLockLockedMsgLabel, d...)
}

type GameTestingCloseCrafter struct {
	THeader RequiredMessageHeader
}

func (t *GameTestingCloseCrafter) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *GameTestingCloseCrafter) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
}

type HitReactionOverride struct {
	// Inherits PowerOverride
	// Inherits PolymorphicBase
	DwType           DT_UINT
	DwPad            DT_UINT
	SnoInputPower    DT_SNO
	SnoOverridePower DT_SNO
}

func (t *HitReactionOverride) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoInputPower, r, &Options{
		Flags: 513,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.SnoOverridePower, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *HitReactionOverride) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("SnoInputPower", &t.SnoInputPower, d...)
	cb.Do("SnoOverridePower", &t.SnoOverridePower, d...)
}

type IconLayout struct {
	SzName                   DT_UINT
	ArIconAnchorPointIndices DT_VARIABLEARRAY[*DT_UINT]
	Unk_9b8c777              DT_CSTRING[*DT_BYTE]
}

func (t *IconLayout) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SzName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.ArIconAnchorPointIndices, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_9b8c777, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+40, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *IconLayout) Walk(cb WalkCallback, d ...any) {
	cb.Do("SzName", &t.SzName, d...)
	cb.Do("ArIconAnchorPointIndices", &t.ArIconAnchorPointIndices, d...)
	cb.Do("Unk_9b8c777", &t.Unk_9b8c777, d...)
}

type TriggerEventChangePhysicsParameters struct {
	// Inherits TriggerEvent
	// Inherits PolymorphicBase
	DwType                  DT_UINT
	DwPad                   DT_UINT
	TConditions             TriggerConditions
	FGenerated              DT_INT
	Unk_6cba752             DT_INT
	DwParentActorID         DT_UINT
	SnoNewPhysicsParameters DT_SNO
	FlBlendTime             DT_FLOAT
	DwActorID               DT_UINT
	Unk_279aa5a             DT_INT
}

func (t *TriggerEventChangePhysicsParameters) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.FGenerated, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_6cba752, r, &Options{Flags: 16}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.DwParentActorID, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.SnoNewPhysicsParameters, r, &Options{
		Flags: 1,
		Group: 28,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.FlBlendTime, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.DwActorID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.Unk_279aa5a, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+96, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TriggerEventChangePhysicsParameters) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("TConditions", &t.TConditions, d...)
	cb.Do("FGenerated", &t.FGenerated, d...)
	cb.Do("Unk_6cba752", &t.Unk_6cba752, d...)
	cb.Do("DwParentActorID", &t.DwParentActorID, d...)
	cb.Do("SnoNewPhysicsParameters", &t.SnoNewPhysicsParameters, d...)
	cb.Do("FlBlendTime", &t.FlBlendTime, d...)
	cb.Do("DwActorID", &t.DwActorID, d...)
	cb.Do("Unk_279aa5a", &t.Unk_279aa5a, d...)
}

type ClanBankMoveItemMessage struct {
	THeader     RequiredRequestMessageHeader
	TItemId     Type_f5ac91bb
	Unk_cc95a19 DT_INT
}

func (t *ClanBankMoveItemMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.TItemId, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.Unk_cc95a19, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ClanBankMoveItemMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("TItemId", &t.TItemId, d...)
	cb.Do("Unk_cc95a19", &t.Unk_cc95a19, d...)
}

type PlayerCurrentLevelAreaSubcondition struct {
	// Inherits Subcondition
	// Inherits PolymorphicBase
	DwType       DT_UINT
	BNegate      DT_INT
	DwPad        DT_UINT
	SnoLevelArea DT_SNO
}

func (t *PlayerCurrentLevelAreaSubcondition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BNegate, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SnoLevelArea, r, &Options{
		Flags: 513,
		Group: 22,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PlayerCurrentLevelAreaSubcondition) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("BNegate", &t.BNegate, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("SnoLevelArea", &t.SnoLevelArea, d...)
}

type PlayerPartySummonReceivedMessage struct {
	THeader               RequiredCommandFrameMessageHeader
	DwPlayerGameAccountId DT_UINT
	SnoLevelArea          DT_SNO
	EPartySummonType      DT_ENUM
}

func (t *PlayerPartySummonReceivedMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPlayerGameAccountId, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SnoLevelArea, r, &Options{
		Flags: 1,
		Group: 22,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.EPartySummonType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PlayerPartySummonReceivedMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("DwPlayerGameAccountId", &t.DwPlayerGameAccountId, d...)
	cb.Do("SnoLevelArea", &t.SnoLevelArea, d...)
	cb.Do("EPartySummonType", &t.EPartySummonType, d...)
}

type TriggerEventTransparency struct {
	// Inherits TriggerEvent
	// Inherits PolymorphicBase
	DwType           DT_UINT
	DwPad            DT_UINT
	TConditions      TriggerConditions
	FGenerated       DT_INT
	Unk_6cba752      DT_INT
	DwParentActorID  DT_UINT
	DwTriggerFlags   DT_UINT
	DwTriggerFlagsEx DT_UINT
	FlAlpha          DT_FLOAT
}

func (t *TriggerEventTransparency) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.FGenerated, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_6cba752, r, &Options{Flags: 16}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.DwParentActorID, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.DwTriggerFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.DwTriggerFlagsEx, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.FlAlpha, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+96, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TriggerEventTransparency) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("TConditions", &t.TConditions, d...)
	cb.Do("FGenerated", &t.FGenerated, d...)
	cb.Do("Unk_6cba752", &t.Unk_6cba752, d...)
	cb.Do("DwParentActorID", &t.DwParentActorID, d...)
	cb.Do("DwTriggerFlags", &t.DwTriggerFlags, d...)
	cb.Do("DwTriggerFlagsEx", &t.DwTriggerFlagsEx, d...)
	cb.Do("FlAlpha", &t.FlAlpha, d...)
}

type TriggerEventObjectLookAt struct {
	// Inherits TriggerEventRangedDuration
	// Inherits TriggerEvent
	// Inherits PolymorphicBase
	DwType           DT_UINT
	TConditions      TriggerConditions
	FGenerated       DT_INT
	Unk_6cba752      DT_INT
	DwParentActorID  DT_UINT
	TDuration        DT_FLOAT
	DwTriggerFlags   DT_UINT
	DwTriggerFlagsEx DT_UINT
	TCleanup         TriggerCleanup
	Unk_49e9257      DT_INT
	Unk_5490979      DT_INT
	DwPad            DT_UINT
	DwObjectID       DT_UINT
	DwTargetID       DT_UINT
}

func (t *TriggerEventObjectLookAt) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.FGenerated, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_6cba752, r, &Options{Flags: 16}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.DwParentActorID, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.TDuration, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.DwTriggerFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.DwTriggerFlagsEx, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.TCleanup, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+116, &t.Unk_49e9257, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.Unk_5490979, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+124, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.DwObjectID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+132, &t.DwTargetID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+136, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TriggerEventObjectLookAt) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("TConditions", &t.TConditions, d...)
	cb.Do("FGenerated", &t.FGenerated, d...)
	cb.Do("Unk_6cba752", &t.Unk_6cba752, d...)
	cb.Do("DwParentActorID", &t.DwParentActorID, d...)
	cb.Do("TDuration", &t.TDuration, d...)
	cb.Do("DwTriggerFlags", &t.DwTriggerFlags, d...)
	cb.Do("DwTriggerFlagsEx", &t.DwTriggerFlagsEx, d...)
	cb.Do("TCleanup", &t.TCleanup, d...)
	cb.Do("Unk_49e9257", &t.Unk_49e9257, d...)
	cb.Do("Unk_5490979", &t.Unk_5490979, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("DwObjectID", &t.DwObjectID, d...)
	cb.Do("DwTargetID", &t.DwTargetID, d...)
}

type CraftingRecipeResultMessage struct {
	THeader   RequiredMessageHeader
	SnoRecipe DT_SNO
	UAmount   DT_INT64
}

func (t *CraftingRecipeResultMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoRecipe, r, &Options{
		Flags: 1,
		Group: 49,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.UAmount, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *CraftingRecipeResultMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("SnoRecipe", &t.SnoRecipe, d...)
	cb.Do("UAmount", &t.UAmount, d...)
}

type ScriptEventParamSecondaryGroup struct {
	// Inherits ScriptEventParamBase
	// Inherits PolymorphicBase
	DwType          DT_UINT
	EParamType      DT_ENUM
	DwPad           DT_UINT
	TSecondaryGroup ActorGroup
}

func (t *ScriptEventParamSecondaryGroup) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.EParamType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.TSecondaryGroup, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+96, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ScriptEventParamSecondaryGroup) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("EParamType", &t.EParamType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("TSecondaryGroup", &t.TSecondaryGroup, d...)
}

type HeroPreset struct {
	// Inherits CharacterPreset
	// Inherits PolymorphicBase
	DwType           DT_UINT
	DwPad            DT_UINT
	SzName           DT_CSTRING[*DT_BYTE]
	SnoWorld         DT_SNO
	NPadding1        DT_INT
	EGender          DT_ENUM
	EClass           DT_ENUM
	SnoFace          DT_SNO
	SnoHairColor     DT_SNO
	SnoHairStyle     DT_SNO
	SnoFacialHair    DT_SNO
	SSkinColor       DT_CSTRING[*DT_BYTE]
	SnoEyeColor      DT_SNO
	SnoMakeup        DT_SNO
	SnoMarkingShape  DT_SNO
	SnoMarkingColor  DT_SNO
	SnoJewelry       DT_SNO
	ArrItems         DT_FIXEDARRAY[*Type_8c33d728]
	ArrWeapons       DT_FIXEDARRAY[*DT_SNO]
	ArrCosmeticItems DT_FIXEDARRAY[*DT_SNO]
	Unk_b1142bf      DT_CSTRING[*DT_BYTE]
	SnoAnimOverride  DT_SNO
}

func (t *HeroPreset) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SzName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.SnoWorld, r, &Options{
		Flags: 513,
		Group: 48,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.NPadding1, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.EGender, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.EClass, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.SnoFace, r, &Options{
		Flags: 513,
		Group: 140,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.SnoHairColor, r, &Options{
		Flags: 513,
		Group: 134,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.SnoHairStyle, r, &Options{
		Flags: 513,
		Group: 138,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+60, &t.SnoFacialHair, r, &Options{
		Flags: 513,
		Group: 139,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.SSkinColor, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.SnoEyeColor, r, &Options{
		Flags: 513,
		Group: 131,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.SnoMakeup, r, &Options{
		Flags: 513,
		Group: 132,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.SnoMarkingShape, r, &Options{
		Flags: 513,
		Group: 115,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.SnoMarkingColor, r, &Options{
		Flags: 513,
		Group: 133,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.SnoJewelry, r, &Options{
		Flags: 513,
		Group: 119,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+100, &t.ArrItems, r, &Options{
		ArrayLength: 5,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+140, &t.ArrWeapons, r, &Options{
		ArrayLength: 7,
		Flags:       513,
		Group:       73,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+168, &t.ArrCosmeticItems, r, &Options{
		ArrayLength: 1,
		Flags:       513,
		Group:       73,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+176, &t.Unk_b1142bf, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+192, &t.SnoAnimOverride, r, &Options{
		Flags: 513,
		Group: 6,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+200, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *HeroPreset) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("SzName", &t.SzName, d...)
	cb.Do("SnoWorld", &t.SnoWorld, d...)
	cb.Do("NPadding1", &t.NPadding1, d...)
	cb.Do("EGender", &t.EGender, d...)
	cb.Do("EClass", &t.EClass, d...)
	cb.Do("SnoFace", &t.SnoFace, d...)
	cb.Do("SnoHairColor", &t.SnoHairColor, d...)
	cb.Do("SnoHairStyle", &t.SnoHairStyle, d...)
	cb.Do("SnoFacialHair", &t.SnoFacialHair, d...)
	cb.Do("SSkinColor", &t.SSkinColor, d...)
	cb.Do("SnoEyeColor", &t.SnoEyeColor, d...)
	cb.Do("SnoMakeup", &t.SnoMakeup, d...)
	cb.Do("SnoMarkingShape", &t.SnoMarkingShape, d...)
	cb.Do("SnoMarkingColor", &t.SnoMarkingColor, d...)
	cb.Do("SnoJewelry", &t.SnoJewelry, d...)
	cb.Do("ArrItems", &t.ArrItems, d...)
	cb.Do("ArrWeapons", &t.ArrWeapons, d...)
	cb.Do("ArrCosmeticItems", &t.ArrCosmeticItems, d...)
	cb.Do("Unk_b1142bf", &t.Unk_b1142bf, d...)
	cb.Do("SnoAnimOverride", &t.SnoAnimOverride, d...)
}

type PrefabDataInfo struct {
	DwMarkerPathID DT_UINT
	TPrefabData    PrefabData
}

func (t *PrefabDataInfo) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.DwMarkerPathID, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.TPrefabData, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+56, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PrefabDataInfo) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwMarkerPathID", &t.DwMarkerPathID, d...)
	cb.Do("TPrefabData", &t.TPrefabData, d...)
}

type PrefabScopedActorGroupData struct {
	THeader GBIDHeader
}

func (t *PrefabScopedActorGroupData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+260, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PrefabScopedActorGroupData) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
}

type UIAutoScrollingTextStyle struct {
	// Inherits UITextStyle
	// Inherits UIWindowStyle
	// Inherits UIControlStyle
	// Inherits PolymorphicBase
	DwType                      DT_UINT
	DwPad                       DT_UINT
	HParentStyle                UIControlHandle
	Unk_441f783                 DT_INT64
	M_eHasModifiedPowerTagMap   DT_TAGMAP[*DT_ENUM]
	TConsoleInput               UIControlConsoleInput
	Unk_b4f614c                 DT_TAGMAP[*DT_ENUM]
	TFont                       UIControlFont
	PtUIControlTagMapIconLabels DT_TAGMAP[*DT_ENUM]
	Unk_a88ab5f                 DT_TAGMAP[*DT_ENUM]
}

func (t *UIAutoScrollingTextStyle) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.HParentStyle, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_441f783, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.M_eHasModifiedPowerTagMap, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.TConsoleInput, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.Unk_b4f614c, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.TFont, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.PtUIControlTagMapIconLabels, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.Unk_a88ab5f, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+128, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *UIAutoScrollingTextStyle) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("HParentStyle", &t.HParentStyle, d...)
	cb.Do("Unk_441f783", &t.Unk_441f783, d...)
	cb.Do("M_eHasModifiedPowerTagMap", &t.M_eHasModifiedPowerTagMap, d...)
	cb.Do("TConsoleInput", &t.TConsoleInput, d...)
	cb.Do("Unk_b4f614c", &t.Unk_b4f614c, d...)
	cb.Do("TFont", &t.TFont, d...)
	cb.Do("PtUIControlTagMapIconLabels", &t.PtUIControlTagMapIconLabels, d...)
	cb.Do("Unk_a88ab5f", &t.Unk_a88ab5f, d...)
}

type BarbWeaponExpertiseData struct {
	SnoItemType     DT_SNO
	SnoPassivePower DT_SNO
	GbidRanks       DT_GBID
	ArRankRewards   DT_VARIABLEARRAY[*WeaponExpertiseRankReward]
}

func (t *BarbWeaponExpertiseData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoItemType, r, &Options{
		Flags: 1,
		Group: 98,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.SnoPassivePower, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.GbidRanks, r, &Options{
		Flags: 1,
		Group: 47,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.ArRankRewards, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *BarbWeaponExpertiseData) Walk(cb WalkCallback, d ...any) {
	cb.Do("SnoItemType", &t.SnoItemType, d...)
	cb.Do("SnoPassivePower", &t.SnoPassivePower, d...)
	cb.Do("GbidRanks", &t.GbidRanks, d...)
	cb.Do("ArRankRewards", &t.ArRankRewards, d...)
}

type PlayerNonAuthoritativePositionMessage struct {
	THeader        RequiredMessageHeader
	WpPos          DT_VECTOR3D
	BMounted       DT_INT
	BMountSummoned DT_INT
}

func (t *PlayerNonAuthoritativePositionMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.WpPos, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.BMounted, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.BMountSummoned, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+36, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PlayerNonAuthoritativePositionMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("WpPos", &t.WpPos, d...)
	cb.Do("BMounted", &t.BMounted, d...)
	cb.Do("BMountSummoned", &t.BMountSummoned, d...)
}

type GeneratorToItemMessage struct {
	THeader         RequiredRequestMessageHeader
	UsItemGenerator DT_CHARARRAY
}

func (t *GeneratorToItemMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.UsItemGenerator, r, &Options{
		ArrayLength: 1024,
		Flags:       1,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+1044, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *GeneratorToItemMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("UsItemGenerator", &t.UsItemGenerator, d...)
}

type Type_7146a43a struct {
	THeader       RequiredMessageHeader
	Unk_601d5c7   DT_FLOAT
	UCommandFrame DT_UINT
}

func (t *Type_7146a43a) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_601d5c7, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.UCommandFrame, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_7146a43a) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("Unk_601d5c7", &t.Unk_601d5c7, d...)
	cb.Do("UCommandFrame", &t.UCommandFrame, d...)
}

type ItemPowerSubcondition struct {
	// Inherits NumericComparisonSubcondition
	// Inherits Subcondition
	// Inherits PolymorphicBase
	DwType        DT_UINT
	BNegate       DT_INT
	EComparisonOp DT_ENUM
	DwPad         DT_UINT
	NIPower       DT_INT
}

func (t *ItemPowerSubcondition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BNegate, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.EComparisonOp, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.NIPower, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+40, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ItemPowerSubcondition) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("BNegate", &t.BNegate, d...)
	cb.Do("EComparisonOp", &t.EComparisonOp, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("NIPower", &t.NIPower, d...)
}

type PersonaSkinColor struct {
	EBase              DT_ENUM
	FlHue              DT_FLOAT
	FlSaturation       DT_FLOAT
	FlValue            DT_FLOAT
	FlDarken           DT_FLOAT
	RgbaUIDisplayColor DT_RGBACOLOR
	SzLabel            DT_CSTRING[*DT_BYTE]
}

func (t *PersonaSkinColor) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.EBase, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.FlHue, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.FlSaturation, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.FlValue, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.FlDarken, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.RgbaUIDisplayColor, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SzLabel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+40, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PersonaSkinColor) Walk(cb WalkCallback, d ...any) {
	cb.Do("EBase", &t.EBase, d...)
	cb.Do("FlHue", &t.FlHue, d...)
	cb.Do("FlSaturation", &t.FlSaturation, d...)
	cb.Do("FlValue", &t.FlValue, d...)
	cb.Do("FlDarken", &t.FlDarken, d...)
	cb.Do("RgbaUIDisplayColor", &t.RgbaUIDisplayColor, d...)
	cb.Do("SzLabel", &t.SzLabel, d...)
}

type ActorCollisionData struct {
	TCollisionSettings             CollisionSettings
	ECollisionShape                DT_ENUM
	WcylCollision                  AxialCylinder
	AabbCollision                  AABB
	Unk_3d328de                    DT_INT
	Unk_7a83a6d                    DT_INT
	Unk_7078ee3                    DT_INT
	FlStepUpHeight                 DT_FLOAT
	Unk_d094b9a                    DT_ENUM
	Unk_c5b3851                    DT_FLOAT
	PtHitCollisionShapes           DT_VARIABLEARRAY[*ActorHitCollisionShape]
	TProjectileSceneCollisionShape ActorHitCollisionShape
	TProjectileActorCollisionShape ActorHitCollisionShape
	Unk_c627b16                    DT_INT
}

func (t *ActorCollisionData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.TCollisionSettings, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.ECollisionShape, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.WcylCollision, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.AabbCollision, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.Unk_3d328de, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_7a83a6d, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.Unk_7078ee3, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.FlStepUpHeight, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.Unk_d094b9a, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.Unk_c5b3851, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.PtHitCollisionShapes, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.TProjectileSceneCollisionShape, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+148, &t.TProjectileActorCollisionShape, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+184, &t.Unk_c627b16, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+192, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ActorCollisionData) Walk(cb WalkCallback, d ...any) {
	cb.Do("TCollisionSettings", &t.TCollisionSettings, d...)
	cb.Do("ECollisionShape", &t.ECollisionShape, d...)
	cb.Do("WcylCollision", &t.WcylCollision, d...)
	cb.Do("AabbCollision", &t.AabbCollision, d...)
	cb.Do("Unk_3d328de", &t.Unk_3d328de, d...)
	cb.Do("Unk_7a83a6d", &t.Unk_7a83a6d, d...)
	cb.Do("Unk_7078ee3", &t.Unk_7078ee3, d...)
	cb.Do("FlStepUpHeight", &t.FlStepUpHeight, d...)
	cb.Do("Unk_d094b9a", &t.Unk_d094b9a, d...)
	cb.Do("Unk_c5b3851", &t.Unk_c5b3851, d...)
	cb.Do("PtHitCollisionShapes", &t.PtHitCollisionShapes, d...)
	cb.Do("TProjectileSceneCollisionShape", &t.TProjectileSceneCollisionShape, d...)
	cb.Do("TProjectileActorCollisionShape", &t.TProjectileActorCollisionShape, d...)
	cb.Do("Unk_c627b16", &t.Unk_c627b16, d...)
}

type StarsSettingsOptionalFieldMapDefaults struct {
	FlStarsDensity    DT_FLOAT
	FlStarsDistance   DT_FLOAT
	FlStarsScale      DT_FLOAT
	FlStarsRandomness DT_FLOAT
	FlStarsBrightness DT_FLOAT
	FlStarsColor      DT_RGBACOLOR
}

func (t *StarsSettingsOptionalFieldMapDefaults) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.FlStarsDensity, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.FlStarsDistance, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.FlStarsScale, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.FlStarsRandomness, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.FlStarsBrightness, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.FlStarsColor, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *StarsSettingsOptionalFieldMapDefaults) Walk(cb WalkCallback, d ...any) {
	cb.Do("FlStarsDensity", &t.FlStarsDensity, d...)
	cb.Do("FlStarsDistance", &t.FlStarsDistance, d...)
	cb.Do("FlStarsScale", &t.FlStarsScale, d...)
	cb.Do("FlStarsRandomness", &t.FlStarsRandomness, d...)
	cb.Do("FlStarsBrightness", &t.FlStarsBrightness, d...)
	cb.Do("FlStarsColor", &t.FlStarsColor, d...)
}

type Type_72081710 struct {
	Unk_9807ffc DT_FLOAT
	Unk_e3bcdd9 DT_FLOAT
	Unk_959fcde DT_FLOAT
	Unk_8ea8e1a DT_FLOAT
	Unk_129b8df DT_FLOAT
	Unk_38138dc DT_FLOAT
	Unk_d04ea13 DT_FLOAT
	Unk_15de174 DT_FLOAT
	Unk_6192f51 DT_FLOAT
	Unk_d00a056 DT_FLOAT
	Unk_2ed848a DT_FLOAT
	Unk_f597cdf DT_FLOAT
	Unk_db72561 DT_FLOAT
	Unk_8f70873 DT_FLOAT
	Unk_754b0f5 DT_FLOAT
	Unk_4ce8a9b DT_FLOAT
	Unk_cbaf386 DT_FLOAT
	Unk_e7daef4 DT_FLOAT
	Unk_497f7bf DT_FLOAT
	Unk_d19c35c DT_FLOAT
	Unk_5456aec DT_FLOAT
	Unk_b918f5a DT_FLOAT
	Unk_57d4c7e DT_FLOAT
	Unk_8a373c0 DT_FLOAT
	Unk_a1812c5 DT_FLOAT
	Unk_7124f86 DT_FLOAT
	Unk_2e0c8f7 DT_FLOAT
	Unk_7d8fd49 DT_FLOAT
	Unk_8a6d88  DT_FLOAT
	Unk_aeea64d DT_FLOAT
	Unk_b918f5b DT_FLOAT
	Unk_57d4c7f DT_FLOAT
	Unk_2e0c8f8 DT_FLOAT
	Unk_7d8fd4a DT_FLOAT
	Unk_8a6d89  DT_FLOAT
	Unk_aeea64e DT_FLOAT
	Unk_a09e1ed DT_FLOAT
	Unk_d28a307 DT_FLOAT
	Unk_cc5d963 DT_FLOAT
	Unk_131818d DT_FLOAT
	Unk_2352a09 DT_FLOAT
	Unk_a09e1ee DT_FLOAT
	Unk_d28a308 DT_FLOAT
	Unk_cc5d964 DT_FLOAT
	Unk_131818e DT_FLOAT
	Unk_2352a0a DT_FLOAT
	Unk_8522f61 DT_FLOAT
	Unk_1bb10d9 DT_FLOAT
	Unk_426ab57 DT_FLOAT
	FlPad0      DT_FLOAT
	FlPad1      DT_FLOAT
	FlPad2      DT_FLOAT
}

func (t *Type_72081710) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Unk_9807ffc, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.Unk_e3bcdd9, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.Unk_959fcde, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.Unk_8ea8e1a, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_129b8df, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.Unk_38138dc, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_d04ea13, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.Unk_15de174, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.Unk_6192f51, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.Unk_d00a056, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.Unk_2ed848a, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.Unk_f597cdf, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.Unk_db72561, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.Unk_8f70873, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.Unk_754b0f5, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+60, &t.Unk_4ce8a9b, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.Unk_cbaf386, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.Unk_e7daef4, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_497f7bf, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.Unk_d19c35c, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.Unk_5456aec, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.Unk_b918f5a, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.Unk_57d4c7e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.Unk_8a373c0, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.Unk_a1812c5, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+100, &t.Unk_7124f86, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+104, &t.Unk_2e0c8f7, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+108, &t.Unk_7d8fd49, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.Unk_8a6d88, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+116, &t.Unk_aeea64d, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.Unk_b918f5b, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+124, &t.Unk_57d4c7f, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.Unk_2e0c8f8, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+132, &t.Unk_7d8fd4a, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+136, &t.Unk_8a6d89, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+140, &t.Unk_aeea64e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+144, &t.Unk_a09e1ed, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+148, &t.Unk_d28a307, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+152, &t.Unk_cc5d963, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+156, &t.Unk_131818d, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+160, &t.Unk_2352a09, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+164, &t.Unk_a09e1ee, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+168, &t.Unk_d28a308, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+172, &t.Unk_cc5d964, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+176, &t.Unk_131818e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+180, &t.Unk_2352a0a, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+184, &t.Unk_8522f61, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+188, &t.Unk_1bb10d9, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+192, &t.Unk_426ab57, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+196, &t.FlPad0, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+200, &t.FlPad1, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+204, &t.FlPad2, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+208, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_72081710) Walk(cb WalkCallback, d ...any) {
	cb.Do("Unk_9807ffc", &t.Unk_9807ffc, d...)
	cb.Do("Unk_e3bcdd9", &t.Unk_e3bcdd9, d...)
	cb.Do("Unk_959fcde", &t.Unk_959fcde, d...)
	cb.Do("Unk_8ea8e1a", &t.Unk_8ea8e1a, d...)
	cb.Do("Unk_129b8df", &t.Unk_129b8df, d...)
	cb.Do("Unk_38138dc", &t.Unk_38138dc, d...)
	cb.Do("Unk_d04ea13", &t.Unk_d04ea13, d...)
	cb.Do("Unk_15de174", &t.Unk_15de174, d...)
	cb.Do("Unk_6192f51", &t.Unk_6192f51, d...)
	cb.Do("Unk_d00a056", &t.Unk_d00a056, d...)
	cb.Do("Unk_2ed848a", &t.Unk_2ed848a, d...)
	cb.Do("Unk_f597cdf", &t.Unk_f597cdf, d...)
	cb.Do("Unk_db72561", &t.Unk_db72561, d...)
	cb.Do("Unk_8f70873", &t.Unk_8f70873, d...)
	cb.Do("Unk_754b0f5", &t.Unk_754b0f5, d...)
	cb.Do("Unk_4ce8a9b", &t.Unk_4ce8a9b, d...)
	cb.Do("Unk_cbaf386", &t.Unk_cbaf386, d...)
	cb.Do("Unk_e7daef4", &t.Unk_e7daef4, d...)
	cb.Do("Unk_497f7bf", &t.Unk_497f7bf, d...)
	cb.Do("Unk_d19c35c", &t.Unk_d19c35c, d...)
	cb.Do("Unk_5456aec", &t.Unk_5456aec, d...)
	cb.Do("Unk_b918f5a", &t.Unk_b918f5a, d...)
	cb.Do("Unk_57d4c7e", &t.Unk_57d4c7e, d...)
	cb.Do("Unk_8a373c0", &t.Unk_8a373c0, d...)
	cb.Do("Unk_a1812c5", &t.Unk_a1812c5, d...)
	cb.Do("Unk_7124f86", &t.Unk_7124f86, d...)
	cb.Do("Unk_2e0c8f7", &t.Unk_2e0c8f7, d...)
	cb.Do("Unk_7d8fd49", &t.Unk_7d8fd49, d...)
	cb.Do("Unk_8a6d88", &t.Unk_8a6d88, d...)
	cb.Do("Unk_aeea64d", &t.Unk_aeea64d, d...)
	cb.Do("Unk_b918f5b", &t.Unk_b918f5b, d...)
	cb.Do("Unk_57d4c7f", &t.Unk_57d4c7f, d...)
	cb.Do("Unk_2e0c8f8", &t.Unk_2e0c8f8, d...)
	cb.Do("Unk_7d8fd4a", &t.Unk_7d8fd4a, d...)
	cb.Do("Unk_8a6d89", &t.Unk_8a6d89, d...)
	cb.Do("Unk_aeea64e", &t.Unk_aeea64e, d...)
	cb.Do("Unk_a09e1ed", &t.Unk_a09e1ed, d...)
	cb.Do("Unk_d28a307", &t.Unk_d28a307, d...)
	cb.Do("Unk_cc5d963", &t.Unk_cc5d963, d...)
	cb.Do("Unk_131818d", &t.Unk_131818d, d...)
	cb.Do("Unk_2352a09", &t.Unk_2352a09, d...)
	cb.Do("Unk_a09e1ee", &t.Unk_a09e1ee, d...)
	cb.Do("Unk_d28a308", &t.Unk_d28a308, d...)
	cb.Do("Unk_cc5d964", &t.Unk_cc5d964, d...)
	cb.Do("Unk_131818e", &t.Unk_131818e, d...)
	cb.Do("Unk_2352a0a", &t.Unk_2352a0a, d...)
	cb.Do("Unk_8522f61", &t.Unk_8522f61, d...)
	cb.Do("Unk_1bb10d9", &t.Unk_1bb10d9, d...)
	cb.Do("Unk_426ab57", &t.Unk_426ab57, d...)
	cb.Do("FlPad0", &t.FlPad0, d...)
	cb.Do("FlPad1", &t.FlPad1, d...)
	cb.Do("FlPad2", &t.FlPad2, d...)
}

type AssignClassPassiveSkillSlotMessage struct {
	THeader               RequiredMessageHeader
	SnoPower              DT_SNO
	NSlot                 DT_INT
	DwPlayerGameAccountId DT_UINT
}

func (t *AssignClassPassiveSkillSlotMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoPower, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.NSlot, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.DwPlayerGameAccountId, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+28, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *AssignClassPassiveSkillSlotMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("SnoPower", &t.SnoPower, d...)
	cb.Do("NSlot", &t.NSlot, d...)
	cb.Do("DwPlayerGameAccountId", &t.DwPlayerGameAccountId, d...)
}

type MediumBiomeObject struct {
	// Inherits BiomeObject
	// Inherits BiomeItem
	// Inherits PolymorphicBase
	DwType                      DT_UINT
	FlRadius                    DT_FLOAT
	Unk_2fd1cdb                 DT_FLOAT
	TAllowedScaleRange          DT_RANGE[*DT_FLOAT]
	FlItemNonAngularFrequencyA  DT_RANGE[*DT_FLOAT]
	FlItemNonAngularFrequencyB  DT_RANGE[*DT_FLOAT]
	FlItemNonAngularFrequencyC  DT_RANGE[*DT_FLOAT]
	TAllowedVerticalOffsetRange DT_RANGE[*DT_FLOAT]
	FlChance                    DT_FLOAT
	DwFlags                     DT_UINT
	Unk_2a8c4b6                 DT_FLOAT
	AAzimuthAngle               DT_FLOAT
	AAltitudeAngle              DT_FLOAT
	Unk_6ead041                 DT_RANGE[*DT_FLOAT]
	TParametricSettings         ParametricSettings
	ArProximityAdjustments      DT_VARIABLEARRAY[*ProximityAdjustment]
	SnonameObject               DT_SNO_NAME
	Unk_d094b9a                 DT_ENUM
	QInitialOrientation         bcQuat
	SzLookName                  DT_UINT
	DwShaderMapOverride         DT_UINT
	DwPad                       DT_UINT
}

func (t *MediumBiomeObject) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.FlRadius, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.Unk_2fd1cdb, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.TAllowedScaleRange, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.FlItemNonAngularFrequencyA, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.FlItemNonAngularFrequencyB, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.FlItemNonAngularFrequencyC, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.TAllowedVerticalOffsetRange, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.FlChance, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.DwFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_2a8c4b6, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.AAzimuthAngle, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.AAltitudeAngle, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.Unk_6ead041, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.TParametricSettings, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+224, &t.ArProximityAdjustments, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+240, &t.SnonameObject, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+248, &t.Unk_d094b9a, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+252, &t.QInitialOrientation, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+268, &t.SzLookName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+272, &t.DwShaderMapOverride, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+276, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+280, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *MediumBiomeObject) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("FlRadius", &t.FlRadius, d...)
	cb.Do("Unk_2fd1cdb", &t.Unk_2fd1cdb, d...)
	cb.Do("TAllowedScaleRange", &t.TAllowedScaleRange, d...)
	cb.Do("FlItemNonAngularFrequencyA", &t.FlItemNonAngularFrequencyA, d...)
	cb.Do("FlItemNonAngularFrequencyB", &t.FlItemNonAngularFrequencyB, d...)
	cb.Do("FlItemNonAngularFrequencyC", &t.FlItemNonAngularFrequencyC, d...)
	cb.Do("TAllowedVerticalOffsetRange", &t.TAllowedVerticalOffsetRange, d...)
	cb.Do("FlChance", &t.FlChance, d...)
	cb.Do("DwFlags", &t.DwFlags, d...)
	cb.Do("Unk_2a8c4b6", &t.Unk_2a8c4b6, d...)
	cb.Do("AAzimuthAngle", &t.AAzimuthAngle, d...)
	cb.Do("AAltitudeAngle", &t.AAltitudeAngle, d...)
	cb.Do("Unk_6ead041", &t.Unk_6ead041, d...)
	cb.Do("TParametricSettings", &t.TParametricSettings, d...)
	cb.Do("ArProximityAdjustments", &t.ArProximityAdjustments, d...)
	cb.Do("SnonameObject", &t.SnonameObject, d...)
	cb.Do("Unk_d094b9a", &t.Unk_d094b9a, d...)
	cb.Do("QInitialOrientation", &t.QInitialOrientation, d...)
	cb.Do("SzLookName", &t.SzLookName, d...)
	cb.Do("DwShaderMapOverride", &t.DwShaderMapOverride, d...)
	cb.Do("DwPad", &t.DwPad, d...)
}

type NightmareDungeonGlobalSpawn struct {
	GbidSpawnLocTypes     DT_VARIABLEARRAY[*DT_GBID]
	TSpawnPopulationGroup PopGroupHandle
	TSpawnCountRange      DT_RANGE[*DT_INT]
	FlSpawnCountPercent   DT_FLOAT
	FlNoSpawnChance       DT_FLOAT
}

func (t *NightmareDungeonGlobalSpawn) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.GbidSpawnLocTypes, r, &Options{
		Flags: 1,
		Group: 20,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TSpawnPopulationGroup, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.TSpawnCountRange, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.FlSpawnCountPercent, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.FlNoSpawnChance, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *NightmareDungeonGlobalSpawn) Walk(cb WalkCallback, d ...any) {
	cb.Do("GbidSpawnLocTypes", &t.GbidSpawnLocTypes, d...)
	cb.Do("TSpawnPopulationGroup", &t.TSpawnPopulationGroup, d...)
	cb.Do("TSpawnCountRange", &t.TSpawnCountRange, d...)
	cb.Do("FlSpawnCountPercent", &t.FlSpawnCountPercent, d...)
	cb.Do("FlNoSpawnChance", &t.FlNoSpawnChance, d...)
}

type LooteeLevelRangeSubcondition struct {
	// Inherits Subcondition
	// Inherits PolymorphicBase
	DwType    DT_UINT
	BNegate   DT_INT
	DwPad     DT_UINT
	NMinLevel DT_INT
	NMaxLevel DT_INT
}

func (t *LooteeLevelRangeSubcondition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BNegate, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.NMinLevel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.NMaxLevel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *LooteeLevelRangeSubcondition) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("BNegate", &t.BNegate, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("NMinLevel", &t.NMinLevel, d...)
	cb.Do("NMaxLevel", &t.NMaxLevel, d...)
}

type TriggerEventMsg struct {
	// Inherits TriggerEvent
	// Inherits PolymorphicBase
	DwType          DT_UINT
	DwPad           DT_UINT
	TConditions     TriggerConditions
	FGenerated      DT_INT
	Unk_6cba752     DT_INT
	DwParentActorID DT_UINT
	EMsgPassMethod  DT_ENUM
	DwMsgKey        DT_ENUM
}

func (t *TriggerEventMsg) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.FGenerated, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_6cba752, r, &Options{Flags: 16}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.DwParentActorID, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.EMsgPassMethod, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.DwMsgKey, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+88, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TriggerEventMsg) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("TConditions", &t.TConditions, d...)
	cb.Do("FGenerated", &t.FGenerated, d...)
	cb.Do("Unk_6cba752", &t.Unk_6cba752, d...)
	cb.Do("DwParentActorID", &t.DwParentActorID, d...)
	cb.Do("EMsgPassMethod", &t.EMsgPassMethod, d...)
	cb.Do("DwMsgKey", &t.DwMsgKey, d...)
}

type StencilParams struct {
	FStencilBufferEnable           DT_INT
	DwStencilBufferRefValue        DT_UINT
	DwStencilReadMask              DT_UINT
	DwStencilWriteMask             DT_UINT
	EFrontStencilBufferCompareFunc DT_ENUM
	EFrontStencilOpPass            DT_ENUM
	EFrontStencilOpFail            DT_ENUM
	EFrontStencilOpZFail           DT_ENUM
	EBackStencilBufferCompareFunc  DT_ENUM
	EBackStencilOpPass             DT_ENUM
	EBackStencilOpFail             DT_ENUM
	EBackStencilOpZFail            DT_ENUM
}

func (t *StencilParams) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.FStencilBufferEnable, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.DwStencilBufferRefValue, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwStencilReadMask, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwStencilWriteMask, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.EFrontStencilBufferCompareFunc, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.EFrontStencilOpPass, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.EFrontStencilOpFail, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.EFrontStencilOpZFail, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.EBackStencilBufferCompareFunc, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.EBackStencilOpPass, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.EBackStencilOpFail, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.EBackStencilOpZFail, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *StencilParams) Walk(cb WalkCallback, d ...any) {
	cb.Do("FStencilBufferEnable", &t.FStencilBufferEnable, d...)
	cb.Do("DwStencilBufferRefValue", &t.DwStencilBufferRefValue, d...)
	cb.Do("DwStencilReadMask", &t.DwStencilReadMask, d...)
	cb.Do("DwStencilWriteMask", &t.DwStencilWriteMask, d...)
	cb.Do("EFrontStencilBufferCompareFunc", &t.EFrontStencilBufferCompareFunc, d...)
	cb.Do("EFrontStencilOpPass", &t.EFrontStencilOpPass, d...)
	cb.Do("EFrontStencilOpFail", &t.EFrontStencilOpFail, d...)
	cb.Do("EFrontStencilOpZFail", &t.EFrontStencilOpZFail, d...)
	cb.Do("EBackStencilBufferCompareFunc", &t.EBackStencilBufferCompareFunc, d...)
	cb.Do("EBackStencilOpPass", &t.EBackStencilOpPass, d...)
	cb.Do("EBackStencilOpFail", &t.EBackStencilOpFail, d...)
	cb.Do("EBackStencilOpZFail", &t.EBackStencilOpZFail, d...)
}

type RequiredRequestMessageHeader struct {
	THeader RequiredMessageHeader
	UToken  DT_UINT
}

func (t *RequiredRequestMessageHeader) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.UToken, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+20, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *RequiredRequestMessageHeader) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("UToken", &t.UToken, d...)
}

type GlobalMarkerActorPortalData struct {
	// Inherits GlobalMarkerActorData
	// Inherits PolymorphicBase
	DwType                              DT_UINT
	DwPad                               DT_UINT
	EWorldToChoose                      DT_ENUM
	SnoSpecifiedWorld                   DT_SNO
	DwEntranceNameToFind                DT_STARTLOC_NAME
	DwPortalType                        DT_UINT
	SnoPortalDestSubzone                DT_SNO
	EPortalDestSubzoneType              DT_ENUM
	DwPortalDestSubzoneFlags            DT_UINT
	DwWorldFeatureFlags                 DT_UINT
	EDungeonFlavorType                  DT_ENUM
	SnoPortalDestLevelArea              DT_SNO
	SnoPhasingVisibilityCondition       DT_SNO
	SnoGizmoCondition                   DT_SNO
	SnoPortalDestObjectiveQuest         DT_SNO
	SnoPortalDestObjectiveDisplayItem   DT_SNO
	SnoPortalDestObjectiveTrackedReward DT_SNO
	Unk_9799a99                         DT_INT
}

func (t *GlobalMarkerActorPortalData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.EWorldToChoose, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.SnoSpecifiedWorld, r, &Options{
		Flags: 513,
		Group: 48,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.DwEntranceNameToFind, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.DwPortalType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.SnoPortalDestSubzone, r, &Options{
		Flags: 513,
		Group: 80,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.EPortalDestSubzoneType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.DwPortalDestSubzoneFlags, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.DwWorldFeatureFlags, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.EDungeonFlavorType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.SnoPortalDestLevelArea, r, &Options{
		Flags: 513,
		Group: 22,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.SnoPhasingVisibilityCondition, r, &Options{
		Flags: 513,
		Group: 51,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+60, &t.SnoGizmoCondition, r, &Options{
		Flags: 513,
		Group: 51,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.SnoPortalDestObjectiveQuest, r, &Options{
		Flags: 513,
		Group: 31,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.SnoPortalDestObjectiveDisplayItem, r, &Options{
		Flags: 513,
		Group: 73,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.SnoPortalDestObjectiveTrackedReward, r, &Options{
		Flags: 513,
		Group: 126,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.Unk_9799a99, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+80, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *GlobalMarkerActorPortalData) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("EWorldToChoose", &t.EWorldToChoose, d...)
	cb.Do("SnoSpecifiedWorld", &t.SnoSpecifiedWorld, d...)
	cb.Do("DwEntranceNameToFind", &t.DwEntranceNameToFind, d...)
	cb.Do("DwPortalType", &t.DwPortalType, d...)
	cb.Do("SnoPortalDestSubzone", &t.SnoPortalDestSubzone, d...)
	cb.Do("EPortalDestSubzoneType", &t.EPortalDestSubzoneType, d...)
	cb.Do("DwPortalDestSubzoneFlags", &t.DwPortalDestSubzoneFlags, d...)
	cb.Do("DwWorldFeatureFlags", &t.DwWorldFeatureFlags, d...)
	cb.Do("EDungeonFlavorType", &t.EDungeonFlavorType, d...)
	cb.Do("SnoPortalDestLevelArea", &t.SnoPortalDestLevelArea, d...)
	cb.Do("SnoPhasingVisibilityCondition", &t.SnoPhasingVisibilityCondition, d...)
	cb.Do("SnoGizmoCondition", &t.SnoGizmoCondition, d...)
	cb.Do("SnoPortalDestObjectiveQuest", &t.SnoPortalDestObjectiveQuest, d...)
	cb.Do("SnoPortalDestObjectiveDisplayItem", &t.SnoPortalDestObjectiveDisplayItem, d...)
	cb.Do("SnoPortalDestObjectiveTrackedReward", &t.SnoPortalDestObjectiveTrackedReward, d...)
	cb.Do("Unk_9799a99", &t.Unk_9799a99, d...)
}

type ChangeAppearanceMessage struct {
	THeader         RequiredMessageHeader
	SnoMarkingShape DT_SNO
	SnoMarkingColor DT_SNO
	SnoJewelry      DT_SNO
	SnoMakeup       DT_SNO
}

func (t *ChangeAppearanceMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoMarkingShape, r, &Options{
		Flags: 1,
		Group: 115,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.SnoMarkingColor, r, &Options{
		Flags: 1,
		Group: 133,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SnoJewelry, r, &Options{
		Flags: 1,
		Group: 119,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.SnoMakeup, r, &Options{
		Flags: 1,
		Group: 132,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ChangeAppearanceMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("SnoMarkingShape", &t.SnoMarkingShape, d...)
	cb.Do("SnoMarkingColor", &t.SnoMarkingColor, d...)
	cb.Do("SnoJewelry", &t.SnoJewelry, d...)
	cb.Do("SnoMakeup", &t.SnoMakeup, d...)
}

type PlayLineActorNameInfo struct {
	SnoActor       DT_SNO
	PRareNameGBIDs DT_FIXEDARRAY[*DT_GBID]
	ERarity        DT_ENUM
	BUseAltName    DT_INT
}

func (t *PlayLineActorNameInfo) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoActor, r, &Options{
		Flags: 1,
		Group: 1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.PRareNameGBIDs, r, &Options{
		ArrayLength: 2,
		Flags:       1,
		Group:       7,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.ERarity, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BUseAltName, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+20, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PlayLineActorNameInfo) Walk(cb WalkCallback, d ...any) {
	cb.Do("SnoActor", &t.SnoActor, d...)
	cb.Do("PRareNameGBIDs", &t.PRareNameGBIDs, d...)
	cb.Do("ERarity", &t.ERarity, d...)
	cb.Do("BUseAltName", &t.BUseAltName, d...)
}

type GameTestingStatusTextMessage struct {
	THeader RequiredMessageHeader
	SzText  DT_CHARARRAY
}

func (t *GameTestingStatusTextMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SzText, r, &Options{
		ArrayLength: 256,
		Flags:       1,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+272, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *GameTestingStatusTextMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("SzText", &t.SzText, d...)
}

type MarkerDestroyableObjectGizmoData struct {
	Unk_54513b8 DT_INT
}

func (t *MarkerDestroyableObjectGizmoData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Unk_54513b8, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+4, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *MarkerDestroyableObjectGizmoData) Walk(cb WalkCallback, d ...any) {
	cb.Do("Unk_54513b8", &t.Unk_54513b8, d...)
}

type ForcedPrefetchData struct {
	VTargetPosition   DT_VECTOR3D
	FPrefetchRadius   DT_FLOAT
	ArPrefetchEntries DT_VARIABLEARRAY[*ForcedPrefetchEntry]
}

func (t *ForcedPrefetchData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.VTargetPosition, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.FPrefetchRadius, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.ArPrefetchEntries, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ForcedPrefetchData) Walk(cb WalkCallback, d ...any) {
	cb.Do("VTargetPosition", &t.VTargetPosition, d...)
	cb.Do("FPrefetchRadius", &t.FPrefetchRadius, d...)
	cb.Do("ArPrefetchEntries", &t.ArPrefetchEntries, d...)
}

type OnInitializeDamageBuffCallback struct {
	// Inherits ProcChanceBuffCallbackBase
	// Inherits BuffCallbackBase
	// Inherits PolymorphicBase
	DwType                DT_UINT
	DwPad                 DT_UINT
	SnoTriggerEffectGroup DT_SNO
	ArConditions          DT_POLYMORPHIC_VARIABLEARRAY[*DT_INT64]
	BAlwaysProcs          DT_INT
	DwPadding             DT_UINT
	TProcChance           DT_STRING_FORMULA
}

func (t *OnInitializeDamageBuffCallback) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoTriggerEffectGroup, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ArConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.BAlwaysProcs, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.DwPadding, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.TProcChance, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+88, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *OnInitializeDamageBuffCallback) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("SnoTriggerEffectGroup", &t.SnoTriggerEffectGroup, d...)
	cb.Do("ArConditions", &t.ArConditions, d...)
	cb.Do("BAlwaysProcs", &t.BAlwaysProcs, d...)
	cb.Do("DwPadding", &t.DwPadding, d...)
	cb.Do("TProcChance", &t.TProcChance, d...)
}

type VoteKickMessage struct {
	THeader     RequiredMessageHeader
	Unk_390da21 DT_UINT
	Unk_1d54bcc DT_UINT
	UsMessage   DT_CHARARRAY
}

func (t *VoteKickMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_390da21, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.Unk_1d54bcc, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.UsMessage, r, &Options{
		ArrayLength: 1024,
		Flags:       1,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+1048, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *VoteKickMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("Unk_390da21", &t.Unk_390da21, d...)
	cb.Do("Unk_1d54bcc", &t.Unk_1d54bcc, d...)
	cb.Do("UsMessage", &t.UsMessage, d...)
}

type Type_737898bc struct {
	// Inherits BuffCallbackBase
	// Inherits PolymorphicBase
	DwType                DT_UINT
	DwPad                 DT_UINT
	SnoTriggerEffectGroup DT_SNO
	ArConditions          DT_POLYMORPHIC_VARIABLEARRAY[*DT_INT64]
}

func (t *Type_737898bc) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoTriggerEffectGroup, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ArConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_737898bc) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("SnoTriggerEffectGroup", &t.SnoTriggerEffectGroup, d...)
	cb.Do("ArConditions", &t.ArConditions, d...)
}

type SkillTreeNodeEntry struct {
	DwNodeId DT_UINT
	DwRank   DT_UINT
}

func (t *SkillTreeNodeEntry) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.DwNodeId, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.DwRank, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *SkillTreeNodeEntry) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwNodeId", &t.DwNodeId, d...)
	cb.Do("DwRank", &t.DwRank, d...)
}

type ChangedHeroIdMessage struct {
	THeader     RequiredMessageHeader
	SzNewHeroId DT_CHARARRAY
}

func (t *ChangedHeroIdMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SzNewHeroId, r, &Options{
		ArrayLength: 37,
		Flags:       1,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+56, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ChangedHeroIdMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("SzNewHeroId", &t.SzNewHeroId, d...)
}

type PowerConditionHasActorTarget struct {
	// Inherits PowerConditionBase
	// Inherits PolymorphicBase
	DwType   DT_UINT
	BInverse DT_INT
	DwPad    DT_UINT
}

func (t *PowerConditionHasActorTarget) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BInverse, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PowerConditionHasActorTarget) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("BInverse", &t.BInverse, d...)
	cb.Do("DwPad", &t.DwPad, d...)
}

type LogicSubcondition struct {
	// Inherits Subcondition
	// Inherits PolymorphicBase
	DwType       DT_UINT
	BNegate      DT_INT
	DwPad        DT_UINT
	ArConditions DT_POLYMORPHIC_VARIABLEARRAY[*DT_INT64]
}

func (t *LogicSubcondition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BNegate, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ArConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *LogicSubcondition) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("BNegate", &t.BNegate, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("ArConditions", &t.ArConditions, d...)
}

type UIConsoleEditStyle struct {
	// Inherits UIEditStyle
	// Inherits UITextStyle
	// Inherits UIWindowStyle
	// Inherits UIControlStyle
	// Inherits PolymorphicBase
	DwType                      DT_UINT
	DwPad                       DT_UINT
	HParentStyle                UIControlHandle
	Unk_441f783                 DT_INT64
	M_eHasModifiedPowerTagMap   DT_TAGMAP[*DT_ENUM]
	TConsoleInput               UIControlConsoleInput
	Unk_b4f614c                 DT_TAGMAP[*DT_ENUM]
	TFont                       UIControlFont
	PtUIControlTagMapIconLabels DT_TAGMAP[*DT_ENUM]
	Unk_172e19a                 DT_TAGMAP[*DT_ENUM]
}

func (t *UIConsoleEditStyle) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.HParentStyle, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_441f783, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.M_eHasModifiedPowerTagMap, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.TConsoleInput, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.Unk_b4f614c, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.TFont, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.PtUIControlTagMapIconLabels, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.Unk_172e19a, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+128, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *UIConsoleEditStyle) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("HParentStyle", &t.HParentStyle, d...)
	cb.Do("Unk_441f783", &t.Unk_441f783, d...)
	cb.Do("M_eHasModifiedPowerTagMap", &t.M_eHasModifiedPowerTagMap, d...)
	cb.Do("TConsoleInput", &t.TConsoleInput, d...)
	cb.Do("Unk_b4f614c", &t.Unk_b4f614c, d...)
	cb.Do("TFont", &t.TFont, d...)
	cb.Do("PtUIControlTagMapIconLabels", &t.PtUIControlTagMapIconLabels, d...)
	cb.Do("Unk_172e19a", &t.Unk_172e19a, d...)
}

type Type_74225f63 struct{}

func (t *Type_74225f63) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if _, err := r.Seek(p+1, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_74225f63) Walk(cb WalkCallback, d ...any) {}

type DRLGPortalInfo struct {
	EResolveMethod       DT_ENUM
	SnoSpecifiedWorld    DT_SNO
	DwEntranceNameToFind DT_STARTLOC_NAME
	SnoDestLevelArea     DT_SNO
}

func (t *DRLGPortalInfo) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.EResolveMethod, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.SnoSpecifiedWorld, r, &Options{
		Flags: 513,
		Group: 48,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwEntranceNameToFind, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.SnoDestLevelArea, r, &Options{
		Flags: 513,
		Group: 22,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *DRLGPortalInfo) Walk(cb WalkCallback, d ...any) {
	cb.Do("EResolveMethod", &t.EResolveMethod, d...)
	cb.Do("SnoSpecifiedWorld", &t.SnoSpecifiedWorld, d...)
	cb.Do("DwEntranceNameToFind", &t.DwEntranceNameToFind, d...)
	cb.Do("SnoDestLevelArea", &t.SnoDestLevelArea, d...)
}

type JoinExistingGamePlayer struct {
	UGameAccountId DT_UINT
	UAuthToken     DT_INT64
	Unk_2f5806b    DT_INT
	TSessionKey    DT_FIXEDARRAY[*DT_BYTE]
}

func (t *JoinExistingGamePlayer) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.UGameAccountId, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.UAuthToken, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_2f5806b, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.TSessionKey, r, &Options{
		ArrayLength: 128,
		Flags:       8,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+152, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *JoinExistingGamePlayer) Walk(cb WalkCallback, d ...any) {
	cb.Do("UGameAccountId", &t.UGameAccountId, d...)
	cb.Do("UAuthToken", &t.UAuthToken, d...)
	cb.Do("Unk_2f5806b", &t.Unk_2f5806b, d...)
	cb.Do("TSessionKey", &t.TSessionKey, d...)
}

type BoostCheatEntry struct {
	SzCheatString DT_CSTRING[*DT_BYTE]
}

func (t *BoostCheatEntry) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SzCheatString, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *BoostCheatEntry) Walk(cb WalkCallback, d ...any) {
	cb.Do("SzCheatString", &t.SzCheatString, d...)
}

type NpcLookTagEntry_Table struct {
	// Inherits GameBalanceTable
	// Inherits PolymorphicBase
	DwType   DT_UINT
	DwPad    DT_UINT
	TEntries DT_VARIABLEARRAY[*NpcLookTagEntry]
}

func (t *NpcLookTagEntry_Table) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TEntries, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *NpcLookTagEntry_Table) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("TEntries", &t.TEntries, d...)
}

type CameraModeSetMessage struct {
	THeader    RequiredMessageHeader
	FAVMode    DT_INT
	TTransform PRTransform
}

func (t *CameraModeSetMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.FAVMode, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.TTransform, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *CameraModeSetMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("FAVMode", &t.FAVMode, d...)
	cb.Do("TTransform", &t.TTransform, d...)
}

type ExperienceLevelAlt struct {
	NDeltaXP DT_INT64
}

func (t *ExperienceLevelAlt) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.NDeltaXP, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ExperienceLevelAlt) Walk(cb WalkCallback, d ...any) {
	cb.Do("NDeltaXP", &t.NDeltaXP, d...)
}

type Type_7535b2ad struct {
	ETier       DT_ENUM
	Unk_395d1e7 DT_INT
}

func (t *Type_7535b2ad) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.ETier, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.Unk_395d1e7, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_7535b2ad) Walk(cb WalkCallback, d ...any) {
	cb.Do("ETier", &t.ETier, d...)
	cb.Do("Unk_395d1e7", &t.Unk_395d1e7, d...)
}

type ColorCorrectionParams struct {
	Unk_ba29200 DT_TAGMAP[*DT_ENUM]
}

func (t *ColorCorrectionParams) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Unk_ba29200, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ColorCorrectionParams) Walk(cb WalkCallback, d ...any) {
	cb.Do("Unk_ba29200", &t.Unk_ba29200, d...)
}

type UIMinimapArtStyle struct {
	// Inherits UIWindowStyle
	// Inherits UIControlStyle
	// Inherits PolymorphicBase
	DwType                    DT_UINT
	DwPad                     DT_UINT
	HParentStyle              UIControlHandle
	Unk_441f783               DT_INT64
	M_eHasModifiedPowerTagMap DT_TAGMAP[*DT_ENUM]
	TConsoleInput             UIControlConsoleInput
	Unk_b4f614c               DT_TAGMAP[*DT_ENUM]
}

func (t *UIMinimapArtStyle) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.HParentStyle, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_441f783, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.M_eHasModifiedPowerTagMap, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.TConsoleInput, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.Unk_b4f614c, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+80, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *UIMinimapArtStyle) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("HParentStyle", &t.HParentStyle, d...)
	cb.Do("Unk_441f783", &t.Unk_441f783, d...)
	cb.Do("M_eHasModifiedPowerTagMap", &t.M_eHasModifiedPowerTagMap, d...)
	cb.Do("TConsoleInput", &t.TConsoleInput, d...)
	cb.Do("Unk_b4f614c", &t.Unk_b4f614c, d...)
}

type UIControlStyleOptionalFieldMapDefaults struct {
	HTemplate           UIControlHandle
	BActive             DT_INT
	BAcceptInitialFocus DT_INT
	BIgnoreInputFocus   DT_INT
	SzOnInit            DT_CSTRING[*DT_BYTE]
	SzOnOpen            DT_CSTRING[*DT_BYTE]
	SzOnClose           DT_CSTRING[*DT_BYTE]
	SzOnDispose         DT_CSTRING[*DT_BYTE]
	SzOnUpdate          DT_CSTRING[*DT_BYTE]
	SzOnSelChange       DT_CSTRING[*DT_BYTE]
	SzIDNext            DT_CSTRING[*DT_BYTE]
	SnoOnOpenSound      DT_SNO
	Unk_33fa5cf         DT_SNO
	SnoOnCloseSound     DT_SNO
	Unk_8ab8d6          DT_CSTRING[*DT_BYTE]
	Unk_2509b49         DT_CSTRING[*DT_BYTE]
	Unk_a2ead70         DT_CSTRING[*DT_BYTE]
	Unk_868283          DT_CSTRING[*DT_BYTE]
	Unk_785d371         DT_INT
	Unk_192fb51         DT_INT
	Unk_5251749         DT_INT
	Unk_1cfa0b8         DT_CSTRING[*DT_BYTE]
	Unk_1cfa0b9         DT_CSTRING[*DT_BYTE]
	Unk_513b522         DT_ENUM
	Unk_f0a3845         DT_INT
	Unk_40ae369         DT_INT
	Unk_7d6fa47         DT_INT
}

func (t *UIControlStyleOptionalFieldMapDefaults) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.HTemplate, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.BActive, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.BAcceptInitialFocus, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BIgnoreInputFocus, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SzOnInit, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.SzOnOpen, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.SzOnClose, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.SzOnDispose, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.SzOnUpdate, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+104, &t.SzOnSelChange, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.SzIDNext, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+136, &t.SnoOnOpenSound, r, &Options{
		Flags: 1,
		Group: 40,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+140, &t.Unk_33fa5cf, r, &Options{
		Flags: 1,
		Group: 40,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+144, &t.SnoOnCloseSound, r, &Options{
		Flags: 1,
		Group: 40,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+152, &t.Unk_8ab8d6, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+168, &t.Unk_2509b49, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+184, &t.Unk_a2ead70, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+200, &t.Unk_868283, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+216, &t.Unk_785d371, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+220, &t.Unk_192fb51, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+224, &t.Unk_5251749, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+232, &t.Unk_1cfa0b8, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+248, &t.Unk_1cfa0b9, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+264, &t.Unk_513b522, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+268, &t.Unk_f0a3845, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+272, &t.Unk_40ae369, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+276, &t.Unk_7d6fa47, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+280, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *UIControlStyleOptionalFieldMapDefaults) Walk(cb WalkCallback, d ...any) {
	cb.Do("HTemplate", &t.HTemplate, d...)
	cb.Do("BActive", &t.BActive, d...)
	cb.Do("BAcceptInitialFocus", &t.BAcceptInitialFocus, d...)
	cb.Do("BIgnoreInputFocus", &t.BIgnoreInputFocus, d...)
	cb.Do("SzOnInit", &t.SzOnInit, d...)
	cb.Do("SzOnOpen", &t.SzOnOpen, d...)
	cb.Do("SzOnClose", &t.SzOnClose, d...)
	cb.Do("SzOnDispose", &t.SzOnDispose, d...)
	cb.Do("SzOnUpdate", &t.SzOnUpdate, d...)
	cb.Do("SzOnSelChange", &t.SzOnSelChange, d...)
	cb.Do("SzIDNext", &t.SzIDNext, d...)
	cb.Do("SnoOnOpenSound", &t.SnoOnOpenSound, d...)
	cb.Do("Unk_33fa5cf", &t.Unk_33fa5cf, d...)
	cb.Do("SnoOnCloseSound", &t.SnoOnCloseSound, d...)
	cb.Do("Unk_8ab8d6", &t.Unk_8ab8d6, d...)
	cb.Do("Unk_2509b49", &t.Unk_2509b49, d...)
	cb.Do("Unk_a2ead70", &t.Unk_a2ead70, d...)
	cb.Do("Unk_868283", &t.Unk_868283, d...)
	cb.Do("Unk_785d371", &t.Unk_785d371, d...)
	cb.Do("Unk_192fb51", &t.Unk_192fb51, d...)
	cb.Do("Unk_5251749", &t.Unk_5251749, d...)
	cb.Do("Unk_1cfa0b8", &t.Unk_1cfa0b8, d...)
	cb.Do("Unk_1cfa0b9", &t.Unk_1cfa0b9, d...)
	cb.Do("Unk_513b522", &t.Unk_513b522, d...)
	cb.Do("Unk_f0a3845", &t.Unk_f0a3845, d...)
	cb.Do("Unk_40ae369", &t.Unk_40ae369, d...)
	cb.Do("Unk_7d6fa47", &t.Unk_7d6fa47, d...)
}

type TriggerEvent struct {
	// Inherits PolymorphicBase
	DwType          DT_UINT
	DwPad           DT_UINT
	TConditions     TriggerConditions
	FGenerated      DT_INT
	Unk_6cba752     DT_INT
	DwParentActorID DT_UINT
}

func (t *TriggerEvent) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.FGenerated, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_6cba752, r, &Options{Flags: 16}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.DwParentActorID, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+80, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TriggerEvent) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("TConditions", &t.TConditions, d...)
	cb.Do("FGenerated", &t.FGenerated, d...)
	cb.Do("Unk_6cba752", &t.Unk_6cba752, d...)
	cb.Do("DwParentActorID", &t.DwParentActorID, d...)
}

type AICellData struct {
	AabbWalkableBounds        AABB
	AabbPreventWalkableBounds AABB
	Unk_c225718               DT_UINT
	M_cellId                  DT_INT64
	Unk_179f850               DT_INT64
}

func (t *AICellData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.AabbWalkableBounds, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.AabbPreventWalkableBounds, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.Unk_c225718, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.M_cellId, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.Unk_179f850, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+72, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *AICellData) Walk(cb WalkCallback, d ...any) {
	cb.Do("AabbWalkableBounds", &t.AabbWalkableBounds, d...)
	cb.Do("AabbPreventWalkableBounds", &t.AabbPreventWalkableBounds, d...)
	cb.Do("Unk_c225718", &t.Unk_c225718, d...)
	cb.Do("M_cellId", &t.M_cellId, d...)
	cb.Do("Unk_179f850", &t.Unk_179f850, d...)
}

type PlayMusicOverlayMessage struct {
	THeader  RequiredMessageHeader
	SnoMusic DT_SNO
}

func (t *PlayMusicOverlayMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoMusic, r, &Options{
		Flags: 1,
		Group: 62,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+20, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PlayMusicOverlayMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("SnoMusic", &t.SnoMusic, d...)
}

type ServiceAvailability struct {
	FHasService         DT_INT
	SnoServiceCondition DT_SNO
}

func (t *ServiceAvailability) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.FHasService, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.SnoServiceCondition, r, &Options{
		Flags: 1,
		Group: 51,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ServiceAvailability) Walk(cb WalkCallback, d ...any) {
	cb.Do("FHasService", &t.FHasService, d...)
	cb.Do("SnoServiceCondition", &t.SnoServiceCondition, d...)
}

type BannerMaskOnly struct {
	SzName  DT_UINT
	HLabel  StringLabelHandleEx
	SnoMask DT_SNO
	HIcon   UIImageHandleReference
}

func (t *BannerMaskOnly) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SzName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.HLabel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.SnoMask, r, &Options{
		Flags: 1,
		Group: 44,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.HIcon, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+20, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *BannerMaskOnly) Walk(cb WalkCallback, d ...any) {
	cb.Do("SzName", &t.SzName, d...)
	cb.Do("HLabel", &t.HLabel, d...)
	cb.Do("SnoMask", &t.SnoMask, d...)
	cb.Do("HIcon", &t.HIcon, d...)
}

type DeathFadeTimeMessage struct {
	THeader                RequiredMessageHeader
	Ann                    DT_ACD_NETWORK_NAME
	NTimeUntilFade         DT_INT
	NFadeTime              DT_INT
	BRecurseForAttachments DT_INT
}

func (t *DeathFadeTimeMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Ann, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.NTimeUntilFade, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.NFadeTime, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.BRecurseForAttachments, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+36, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *DeathFadeTimeMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("Ann", &t.Ann, d...)
	cb.Do("NTimeUntilFade", &t.NTimeUntilFade, d...)
	cb.Do("NFadeTime", &t.NFadeTime, d...)
	cb.Do("BRecurseForAttachments", &t.BRecurseForAttachments, d...)
}

type ActorGizmoData struct {
	// Inherits PolymorphicBase
	DwType                           DT_UINT
	DwPad                            DT_UINT
	FDisableNonFriendlyOperation     DT_INT
	FWalkToCenter                    DT_INT
	FGizmoStartsDisabled             DT_INT
	FUseStringListName               DT_INT
	FForceMinimapIcon                DT_INT
	FlOperationRadius                DT_FLOAT
	Unk_d0b1df5                      DT_FLOAT
	FlGizmoUseTime                   DT_FLOAT
	SnoChannelingEffect              DT_SNO
	Unk_2767229                      DT_INT
	FGizmoShowProgressBar            DT_INT
	Unk_6d9ebe1                      DT_INT
	Unk_5456245                      DT_INT
	Unk_af5815a                      DT_INT
	SnoOnClickEffect                 DT_SNO
	SnoPickedUpEffect                DT_SNO
	SnoDropOnGroundEffect            DT_SNO
	TConditionData                   GizmoConditionData
	SnoPowerOperator                 DT_SNO
	SnoPowerOperate                  DT_SNO
	SnoPowerOperatorActive           DT_SNO
	SnoPowerOperateActive            DT_SNO
	Unk_359810e                      DT_INT
	NCooldown                        DT_UINT
	Unk_9c8478e                      DT_UINT
	Unk_d45ed2d                      DT_INT
	Unk_f6b20b7                      DT_INT
	Unk_54513b8                      DT_INT
	Unk_fd1f378                      DT_UINT
	HGizmoOperateFlavorTextMsgLabel  DT_UINT
	HGizmoOperateDescriptionMsgLabel DT_UINT
	FlGizmoOperateOffset             DT_FLOAT
	Unk_ab58cd3                      DT_ENUM
	Unk_91a3966                      DT_UINT
	HGizmoChannelingLabel            DT_UINT
	Unk_4be4371                      DT_INT
}

func (t *ActorGizmoData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.FDisableNonFriendlyOperation, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.FWalkToCenter, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.FGizmoStartsDisabled, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.FUseStringListName, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.FForceMinimapIcon, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.FlOperationRadius, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.Unk_d0b1df5, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.FlGizmoUseTime, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.SnoChannelingEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.Unk_2767229, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.FGizmoShowProgressBar, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+60, &t.Unk_6d9ebe1, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.Unk_5456245, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.Unk_af5815a, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.SnoOnClickEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.SnoPickedUpEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.SnoDropOnGroundEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.TConditionData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.SnoPowerOperator, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.SnoPowerOperate, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.SnoPowerOperatorActive, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+100, &t.SnoPowerOperateActive, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+104, &t.Unk_359810e, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+108, &t.NCooldown, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.Unk_9c8478e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+116, &t.Unk_d45ed2d, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.Unk_f6b20b7, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+124, &t.Unk_54513b8, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.Unk_fd1f378, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+132, &t.HGizmoOperateFlavorTextMsgLabel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+136, &t.HGizmoOperateDescriptionMsgLabel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+140, &t.FlGizmoOperateOffset, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+144, &t.Unk_ab58cd3, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+148, &t.Unk_91a3966, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+152, &t.HGizmoChannelingLabel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+156, &t.Unk_4be4371, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+160, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ActorGizmoData) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("FDisableNonFriendlyOperation", &t.FDisableNonFriendlyOperation, d...)
	cb.Do("FWalkToCenter", &t.FWalkToCenter, d...)
	cb.Do("FGizmoStartsDisabled", &t.FGizmoStartsDisabled, d...)
	cb.Do("FUseStringListName", &t.FUseStringListName, d...)
	cb.Do("FForceMinimapIcon", &t.FForceMinimapIcon, d...)
	cb.Do("FlOperationRadius", &t.FlOperationRadius, d...)
	cb.Do("Unk_d0b1df5", &t.Unk_d0b1df5, d...)
	cb.Do("FlGizmoUseTime", &t.FlGizmoUseTime, d...)
	cb.Do("SnoChannelingEffect", &t.SnoChannelingEffect, d...)
	cb.Do("Unk_2767229", &t.Unk_2767229, d...)
	cb.Do("FGizmoShowProgressBar", &t.FGizmoShowProgressBar, d...)
	cb.Do("Unk_6d9ebe1", &t.Unk_6d9ebe1, d...)
	cb.Do("Unk_5456245", &t.Unk_5456245, d...)
	cb.Do("Unk_af5815a", &t.Unk_af5815a, d...)
	cb.Do("SnoOnClickEffect", &t.SnoOnClickEffect, d...)
	cb.Do("SnoPickedUpEffect", &t.SnoPickedUpEffect, d...)
	cb.Do("SnoDropOnGroundEffect", &t.SnoDropOnGroundEffect, d...)
	cb.Do("TConditionData", &t.TConditionData, d...)
	cb.Do("SnoPowerOperator", &t.SnoPowerOperator, d...)
	cb.Do("SnoPowerOperate", &t.SnoPowerOperate, d...)
	cb.Do("SnoPowerOperatorActive", &t.SnoPowerOperatorActive, d...)
	cb.Do("SnoPowerOperateActive", &t.SnoPowerOperateActive, d...)
	cb.Do("Unk_359810e", &t.Unk_359810e, d...)
	cb.Do("NCooldown", &t.NCooldown, d...)
	cb.Do("Unk_9c8478e", &t.Unk_9c8478e, d...)
	cb.Do("Unk_d45ed2d", &t.Unk_d45ed2d, d...)
	cb.Do("Unk_f6b20b7", &t.Unk_f6b20b7, d...)
	cb.Do("Unk_54513b8", &t.Unk_54513b8, d...)
	cb.Do("Unk_fd1f378", &t.Unk_fd1f378, d...)
	cb.Do("HGizmoOperateFlavorTextMsgLabel", &t.HGizmoOperateFlavorTextMsgLabel, d...)
	cb.Do("HGizmoOperateDescriptionMsgLabel", &t.HGizmoOperateDescriptionMsgLabel, d...)
	cb.Do("FlGizmoOperateOffset", &t.FlGizmoOperateOffset, d...)
	cb.Do("Unk_ab58cd3", &t.Unk_ab58cd3, d...)
	cb.Do("Unk_91a3966", &t.Unk_91a3966, d...)
	cb.Do("HGizmoChannelingLabel", &t.HGizmoChannelingLabel, d...)
	cb.Do("Unk_4be4371", &t.Unk_4be4371, d...)
}

type FlagLookup struct {
	NIndex        DT_INT
	SzLabel       DT_CHARARRAY
	SzDescription DT_CHARARRAY
}

func (t *FlagLookup) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.NIndex, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.SzLabel, r, &Options{
		ArrayLength: 128,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+132, &t.SzDescription, r, &Options{
		ArrayLength: 256,
		Flags:       1,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+388, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *FlagLookup) Walk(cb WalkCallback, d ...any) {
	cb.Do("NIndex", &t.NIndex, d...)
	cb.Do("SzLabel", &t.SzLabel, d...)
	cb.Do("SzDescription", &t.SzDescription, d...)
}

type TriggerEventAddRope struct {
	// Inherits TriggerEventRangedDuration
	// Inherits TriggerEvent
	// Inherits PolymorphicBase
	DwType                   DT_UINT
	TConditions              TriggerConditions
	FGenerated               DT_INT
	Unk_6cba752              DT_INT
	DwParentActorID          DT_UINT
	TDuration                DT_FLOAT
	DwTriggerFlags           DT_UINT
	DwTriggerFlagsEx         DT_UINT
	TCleanup                 TriggerCleanup
	Unk_49e9257              DT_INT
	Unk_5490979              DT_INT
	DwPad                    DT_UINT
	DwID                     DT_UINT
	SnoRope                  DT_SNO
	SnoPowerEffectParam      DT_SNO
	TDefaultRopeAttachPoints DT_FIXEDARRAY[*RopeEventAttachPoint]
	ArAdditionalAttachPoints DT_VARIABLEARRAY[*RopeEventAttachPoint]
	VecScalar                DT_VECTOR2D
}

func (t *TriggerEventAddRope) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.FGenerated, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_6cba752, r, &Options{Flags: 16}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.DwParentActorID, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.TDuration, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.DwTriggerFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.DwTriggerFlagsEx, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.TCleanup, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+116, &t.Unk_49e9257, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.Unk_5490979, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+124, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.DwID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+132, &t.SnoRope, r, &Options{
		Flags: 1,
		Group: 32,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+136, &t.SnoPowerEffectParam, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+140, &t.TDefaultRopeAttachPoints, r, &Options{
		ArrayLength: 2,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+184, &t.ArAdditionalAttachPoints, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+200, &t.VecScalar, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+208, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TriggerEventAddRope) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("TConditions", &t.TConditions, d...)
	cb.Do("FGenerated", &t.FGenerated, d...)
	cb.Do("Unk_6cba752", &t.Unk_6cba752, d...)
	cb.Do("DwParentActorID", &t.DwParentActorID, d...)
	cb.Do("TDuration", &t.TDuration, d...)
	cb.Do("DwTriggerFlags", &t.DwTriggerFlags, d...)
	cb.Do("DwTriggerFlagsEx", &t.DwTriggerFlagsEx, d...)
	cb.Do("TCleanup", &t.TCleanup, d...)
	cb.Do("Unk_49e9257", &t.Unk_49e9257, d...)
	cb.Do("Unk_5490979", &t.Unk_5490979, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("DwID", &t.DwID, d...)
	cb.Do("SnoRope", &t.SnoRope, d...)
	cb.Do("SnoPowerEffectParam", &t.SnoPowerEffectParam, d...)
	cb.Do("TDefaultRopeAttachPoints", &t.TDefaultRopeAttachPoints, d...)
	cb.Do("ArAdditionalAttachPoints", &t.ArAdditionalAttachPoints, d...)
	cb.Do("VecScalar", &t.VecScalar, d...)
}

type GenericBlobResponseMessage struct {
	THeader   RequiredResponseMessageHeader
	UBlobSize DT_WORD
}

func (t *GenericBlobResponseMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.UBlobSize, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+28, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *GenericBlobResponseMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("UBlobSize", &t.UBlobSize, d...)
}

type BloodSealUnequipSocketMessage struct {
	THeader       RequiredMessageHeader
	DwSocketIndex DT_UINT
}

func (t *BloodSealUnequipSocketMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.DwSocketIndex, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+20, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *BloodSealUnequipSocketMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("DwSocketIndex", &t.DwSocketIndex, d...)
}

type EffectGroupActorPositionTrack struct {
	// Inherits EffectGroupTrack
	// Inherits PolymorphicBase
	DwType DT_UINT
	DwPad  DT_UINT
}

func (t *EffectGroupActorPositionTrack) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *EffectGroupActorPositionTrack) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
}

type WorldEventStartingMessage struct {
	THeader        RequiredMessageHeader
	SnoQuest       DT_SNO
	BIsWorldEvent  DT_INT
	SnoWorld       DT_SNO
	SnoSubzone     DT_SNO
	SnoReward      DT_SNO
	ERewardQuality DT_ENUM
	Unk_576b41d    DT_INT64
	WpLocation     DT_VECTOR3D
}

func (t *WorldEventStartingMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoQuest, r, &Options{
		Flags: 1,
		Group: 31,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.BIsWorldEvent, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SnoWorld, r, &Options{
		Flags: 1,
		Group: 48,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.SnoSubzone, r, &Options{
		Flags: 1,
		Group: 80,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.SnoReward, r, &Options{
		Flags: 1,
		Group: 73,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.ERewardQuality, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.Unk_576b41d, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.WpLocation, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+64, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *WorldEventStartingMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("SnoQuest", &t.SnoQuest, d...)
	cb.Do("BIsWorldEvent", &t.BIsWorldEvent, d...)
	cb.Do("SnoWorld", &t.SnoWorld, d...)
	cb.Do("SnoSubzone", &t.SnoSubzone, d...)
	cb.Do("SnoReward", &t.SnoReward, d...)
	cb.Do("ERewardQuality", &t.ERewardQuality, d...)
	cb.Do("Unk_576b41d", &t.Unk_576b41d, d...)
	cb.Do("WpLocation", &t.WpLocation, d...)
}

type ImbueRecipe struct {
	ETargetItemLabel       DT_ENUM
	EItemQualityModifier   DT_ENUM
	EAspectQualityModifier DT_ENUM
	SnoRecipe              DT_SNO
}

func (t *ImbueRecipe) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.ETargetItemLabel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.EItemQualityModifier, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.EAspectQualityModifier, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.SnoRecipe, r, &Options{
		Flags: 1,
		Group: 49,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ImbueRecipe) Walk(cb WalkCallback, d ...any) {
	cb.Do("ETargetItemLabel", &t.ETargetItemLabel, d...)
	cb.Do("EItemQualityModifier", &t.EItemQualityModifier, d...)
	cb.Do("EAspectQualityModifier", &t.EAspectQualityModifier, d...)
	cb.Do("SnoRecipe", &t.SnoRecipe, d...)
}

type Type_7727b914 struct {
	THeader     RequiredMessageHeader
	Unk_36658ce DT_SNO
	Unk_a61d97  DT_INT
}

func (t *Type_7727b914) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_36658ce, r, &Options{
		Flags: 1,
		Group: 135,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.Unk_a61d97, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_7727b914) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("Unk_36658ce", &t.Unk_36658ce, d...)
	cb.Do("Unk_a61d97", &t.Unk_a61d97, d...)
}

type NecroArmyUnitMessage struct {
	THeader   RequiredMessageHeader
	EUnitType DT_ENUM
}

func (t *NecroArmyUnitMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.EUnitType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+20, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *NecroArmyUnitMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("EUnitType", &t.EUnitType, d...)
}

type SpeakerDefinition struct {
	Unk_ca1a658    DT_INT
	PtVOParameters DT_VARIABLEARRAY[*WwiseGameParameter]
}

func (t *SpeakerDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.Unk_ca1a658, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.PtVOParameters, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *SpeakerDefinition) Walk(cb WalkCallback, d ...any) {
	cb.Do("Unk_ca1a658", &t.Unk_ca1a658, d...)
	cb.Do("PtVOParameters", &t.PtVOParameters, d...)
}

type TriggerEventSetWeaponSheathed struct {
	// Inherits TriggerEvent
	// Inherits PolymorphicBase
	DwType          DT_UINT
	DwPad           DT_UINT
	TConditions     TriggerConditions
	FGenerated      DT_INT
	Unk_6cba752     DT_INT
	DwParentActorID DT_UINT
	Unk_279aa5a     DT_INT
	DwActorID       DT_UINT
	BSheathed       DT_INT
}

func (t *TriggerEventSetWeaponSheathed) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.FGenerated, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_6cba752, r, &Options{Flags: 16}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.DwParentActorID, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.Unk_279aa5a, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.DwActorID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.BSheathed, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+96, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TriggerEventSetWeaponSheathed) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("TConditions", &t.TConditions, d...)
	cb.Do("FGenerated", &t.FGenerated, d...)
	cb.Do("Unk_6cba752", &t.Unk_6cba752, d...)
	cb.Do("DwParentActorID", &t.DwParentActorID, d...)
	cb.Do("Unk_279aa5a", &t.Unk_279aa5a, d...)
	cb.Do("DwActorID", &t.DwActorID, d...)
	cb.Do("BSheathed", &t.BSheathed, d...)
}

type LoudnessParamsOptionalFieldMapDefaults struct {
	Unk_ca89bd3               DT_FLOAT
	Unk_fb082e6               DT_FLOAT
	Unk_eb94539               DT_UINT
	Unk_bcdffc9               DT_FLOAT
	Unk_bb3a1d                DT_FLOAT
	FlCompressorSlope         DT_FLOAT
	FlCompressorGainReduction DT_FLOAT
	Unk_eb919f7               DT_FLOAT
	Unk_ba7b0e0               DT_FLOAT
	Unk_5419989               DT_FLOAT
	ECompressorMode           DT_ENUM
}

func (t *LoudnessParamsOptionalFieldMapDefaults) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Unk_ca89bd3, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.Unk_fb082e6, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.Unk_eb94539, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.Unk_bcdffc9, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_bb3a1d, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.FlCompressorSlope, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.FlCompressorGainReduction, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.Unk_eb919f7, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.Unk_ba7b0e0, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.Unk_5419989, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.ECompressorMode, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+44, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *LoudnessParamsOptionalFieldMapDefaults) Walk(cb WalkCallback, d ...any) {
	cb.Do("Unk_ca89bd3", &t.Unk_ca89bd3, d...)
	cb.Do("Unk_fb082e6", &t.Unk_fb082e6, d...)
	cb.Do("Unk_eb94539", &t.Unk_eb94539, d...)
	cb.Do("Unk_bcdffc9", &t.Unk_bcdffc9, d...)
	cb.Do("Unk_bb3a1d", &t.Unk_bb3a1d, d...)
	cb.Do("FlCompressorSlope", &t.FlCompressorSlope, d...)
	cb.Do("FlCompressorGainReduction", &t.FlCompressorGainReduction, d...)
	cb.Do("Unk_eb919f7", &t.Unk_eb919f7, d...)
	cb.Do("Unk_ba7b0e0", &t.Unk_ba7b0e0, d...)
	cb.Do("Unk_5419989", &t.Unk_5419989, d...)
	cb.Do("ECompressorMode", &t.ECompressorMode, d...)
}

type InterpolationNode_float struct {
	TValueMin DT_FLOAT
	TValueMax DT_FLOAT
	TTime     DT_FLOAT
}

func (t *InterpolationNode_float) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.TValueMin, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.TValueMax, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.TTime, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+12, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *InterpolationNode_float) Walk(cb WalkCallback, d ...any) {
	cb.Do("TValueMin", &t.TValueMin, d...)
	cb.Do("TValueMax", &t.TValueMax, d...)
	cb.Do("TTime", &t.TTime, d...)
}

type InterpolationNode_int32 struct {
	TValueMin DT_INT
	TValueMax DT_INT
	TTime     DT_FLOAT
}

func (t *InterpolationNode_int32) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.TValueMin, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.TValueMax, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.TTime, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+12, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *InterpolationNode_int32) Walk(cb WalkCallback, d ...any) {
	cb.Do("TValueMin", &t.TValueMin, d...)
	cb.Do("TValueMax", &t.TValueMax, d...)
	cb.Do("TTime", &t.TTime, d...)
}

type OnInterruptPowerCallback struct {
	// Inherits PowerCallbackBase
	// Inherits PolymorphicBase
	DwType                DT_UINT
	DwPad                 DT_UINT
	SnoTriggerEffectGroup DT_SNO
	BCouldHaveRagdolled   DT_INT
}

func (t *OnInterruptPowerCallback) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoTriggerEffectGroup, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.BCouldHaveRagdolled, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *OnInterruptPowerCallback) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("SnoTriggerEffectGroup", &t.SnoTriggerEffectGroup, d...)
	cb.Do("BCouldHaveRagdolled", &t.BCouldHaveRagdolled, d...)
}

type Type_78541b1a struct {
	NEnchantCountMin DT_INT
	FlDelta          DT_FLOAT
}

func (t *Type_78541b1a) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.NEnchantCountMin, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.FlDelta, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_78541b1a) Walk(cb WalkCallback, d ...any) {
	cb.Do("NEnchantCountMin", &t.NEnchantCountMin, d...)
	cb.Do("FlDelta", &t.FlDelta, d...)
}

type OnCreatePowerCallback struct {
	// Inherits PowerCallbackBase
	// Inherits PolymorphicBase
	DwType                DT_UINT
	DwPad                 DT_UINT
	SnoTriggerEffectGroup DT_SNO
	BCouldHaveRagdolled   DT_INT
}

func (t *OnCreatePowerCallback) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoTriggerEffectGroup, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.BCouldHaveRagdolled, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *OnCreatePowerCallback) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("SnoTriggerEffectGroup", &t.SnoTriggerEffectGroup, d...)
	cb.Do("BCouldHaveRagdolled", &t.BCouldHaveRagdolled, d...)
}

type ACDGroupMessage struct {
	THeader RequiredMessageHeader
	Ann     DT_ACD_NETWORK_NAME
	AGroups DT_FIXEDARRAY[*DT_GBID]
}

func (t *ACDGroupMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Ann, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.AGroups, r, &Options{
		ArrayLength: 8,
		Flags:       9,
		Group:       24,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+60, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ACDGroupMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("Ann", &t.Ann, d...)
	cb.Do("AGroups", &t.AGroups, d...)
}

type SceneCommonSpecAudioVisual struct {
	SnoMusic   DT_SNO
	SnoAmbient DT_SNO
	SnoReverb  DT_SNO
	SnoWeather DT_SNO
}

func (t *SceneCommonSpecAudioVisual) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoMusic, r, &Options{
		Flags: 1,
		Group: 62,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.SnoAmbient, r, &Options{
		Flags: 1,
		Group: 5,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.SnoReverb, r, &Options{
		Flags: 1,
		Group: 60,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.SnoWeather, r, &Options{
		Flags: 1,
		Group: 47,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *SceneCommonSpecAudioVisual) Walk(cb WalkCallback, d ...any) {
	cb.Do("SnoMusic", &t.SnoMusic, d...)
	cb.Do("SnoAmbient", &t.SnoAmbient, d...)
	cb.Do("SnoReverb", &t.SnoReverb, d...)
	cb.Do("SnoWeather", &t.SnoWeather, d...)
}

type ClassPassiveSkillData struct {
	ArSlots  DT_VARIABLEARRAY[*ClassPassiveSkillSlotData]
	ArPowers DT_VARIABLEARRAY[*ClassPassiveSkillPowerData]
}

func (t *ClassPassiveSkillData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.ArSlots, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.ArPowers, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ClassPassiveSkillData) Walk(cb WalkCallback, d ...any) {
	cb.Do("ArSlots", &t.ArSlots, d...)
	cb.Do("ArPowers", &t.ArPowers, d...)
}

type PlayerClassResourceData struct {
	EType                      DT_ENUM
	FlBase                     DT_FLOAT
	FlRegen                    DT_FLOAT
	FlPowerFormulaTablesResult DT_FLOAT
	Unk_171732b                DT_FLOAT
	Unk_8694d05                DT_FLOAT
	Unk_b19aa73                DT_FLOAT
	Unk_bf2b603                DT_FLOAT
}

func (t *PlayerClassResourceData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.EType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.FlBase, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.FlRegen, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.FlPowerFormulaTablesResult, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_171732b, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.Unk_8694d05, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_b19aa73, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.Unk_bf2b603, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PlayerClassResourceData) Walk(cb WalkCallback, d ...any) {
	cb.Do("EType", &t.EType, d...)
	cb.Do("FlBase", &t.FlBase, d...)
	cb.Do("FlRegen", &t.FlRegen, d...)
	cb.Do("FlPowerFormulaTablesResult", &t.FlPowerFormulaTablesResult, d...)
	cb.Do("Unk_171732b", &t.Unk_171732b, d...)
	cb.Do("Unk_8694d05", &t.Unk_8694d05, d...)
	cb.Do("Unk_b19aa73", &t.Unk_b19aa73, d...)
	cb.Do("Unk_bf2b603", &t.Unk_bf2b603, d...)
}

type TriggerCleanup struct {
	EOnOwnerDeath        DT_ENUM
	EOnAnimationEnd      DT_ENUM
	EOnSequenceEnd       DT_ENUM
	EOnOwnerResurrection DT_ENUM
	EOnOwnerDeletion     DT_ENUM
	EOnOwnerPaused       DT_ENUM
}

func (t *TriggerCleanup) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.EOnOwnerDeath, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.EOnAnimationEnd, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.EOnSequenceEnd, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.EOnOwnerResurrection, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.EOnOwnerDeletion, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.EOnOwnerPaused, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TriggerCleanup) Walk(cb WalkCallback, d ...any) {
	cb.Do("EOnOwnerDeath", &t.EOnOwnerDeath, d...)
	cb.Do("EOnAnimationEnd", &t.EOnAnimationEnd, d...)
	cb.Do("EOnSequenceEnd", &t.EOnSequenceEnd, d...)
	cb.Do("EOnOwnerResurrection", &t.EOnOwnerResurrection, d...)
	cb.Do("EOnOwnerDeletion", &t.EOnOwnerDeletion, d...)
	cb.Do("EOnOwnerPaused", &t.EOnOwnerPaused, d...)
}

type ClientDebugLogMessage struct {
	THeader     RequiredMessageHeader
	SzLogString DT_CHARARRAY
}

func (t *ClientDebugLogMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SzLogString, r, &Options{
		ArrayLength: 1000,
		Flags:       1,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+1016, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ClientDebugLogMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("SzLogString", &t.SzLogString, d...)
}

type ActivityReward struct{}

func (t *ActivityReward) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if _, err := r.Seek(p+1, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ActivityReward) Walk(cb WalkCallback, d ...any) {}

type PowerPhasePreplay struct {
	// Inherits PowerPhaseBase
	// Inherits PolymorphicBase
	DwType       DT_UINT
	DwPad        DT_UINT
	TPhaseName   DT_UINT
	ArPhaseJumps DT_POLYMORPHIC_VARIABLEARRAY[*DT_INT64]
	Unk_d0d932b  DT_INT
	Unk_9a8200e  DT_INT
}

func (t *PowerPhasePreplay) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TPhaseName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ArPhaseJumps, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.Unk_d0d932b, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.Unk_9a8200e, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+56, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PowerPhasePreplay) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("TPhaseName", &t.TPhaseName, d...)
	cb.Do("ArPhaseJumps", &t.ArPhaseJumps, d...)
	cb.Do("Unk_d0d932b", &t.Unk_d0d932b, d...)
	cb.Do("Unk_9a8200e", &t.Unk_9a8200e, d...)
}

type ReputationItemReward struct {
	SnoRewardCache   DT_SNO
	SnoTreasureClass DT_SNO
}

func (t *ReputationItemReward) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoRewardCache, r, &Options{
		Flags: 1,
		Group: 73,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.SnoTreasureClass, r, &Options{
		Flags: 1,
		Group: 52,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ReputationItemReward) Walk(cb WalkCallback, d ...any) {
	cb.Do("SnoRewardCache", &t.SnoRewardCache, d...)
	cb.Do("SnoTreasureClass", &t.SnoTreasureClass, d...)
}

type ScriptEventParamQuestName struct {
	// Inherits ScriptEventParamBase
	// Inherits PolymorphicBase
	DwType      DT_UINT
	EParamType  DT_ENUM
	DwPad       DT_UINT
	DwQuestHash DT_UINT
	SzQuest     DT_CSTRING[*DT_BYTE]
}

func (t *ScriptEventParamQuestName) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.EParamType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.DwQuestHash, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.SzQuest, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ScriptEventParamQuestName) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("EParamType", &t.EParamType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("DwQuestHash", &t.DwQuestHash, d...)
	cb.Do("SzQuest", &t.SzQuest, d...)
}

type CurrentLevelAreaSubcondition struct {
	// Inherits Subcondition
	// Inherits PolymorphicBase
	DwType           DT_UINT
	BNegate          DT_INT
	DwPad            DT_UINT
	SnoLevelArea     DT_SNO
	EActorToEvaluate DT_ENUM
}

func (t *CurrentLevelAreaSubcondition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BNegate, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SnoLevelArea, r, &Options{
		Flags: 513,
		Group: 22,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.EActorToEvaluate, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *CurrentLevelAreaSubcondition) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("BNegate", &t.BNegate, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("SnoLevelArea", &t.SnoLevelArea, d...)
	cb.Do("EActorToEvaluate", &t.EActorToEvaluate, d...)
}

type GlobalMarkerActorWaypointData struct {
	// Inherits GlobalMarkerActorData
	// Inherits PolymorphicBase
	DwType            DT_UINT
	DwPad             DT_UINT
	DwEntranceName    DT_STARTLOC_NAME
	HZoneLabel        DT_UINT
	Unk_92edf50       DT_SNO
	ArWaypointEffects DT_FIXEDARRAY[*WaypointEffectInfo]
}

func (t *GlobalMarkerActorWaypointData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.DwEntranceName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.HZoneLabel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_92edf50, r, &Options{
		Flags: 513,
		Group: 31,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.ArWaypointEffects, r, &Options{
		ArrayLength: 4,
		Flags:       1,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+896, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *GlobalMarkerActorWaypointData) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("DwEntranceName", &t.DwEntranceName, d...)
	cb.Do("HZoneLabel", &t.HZoneLabel, d...)
	cb.Do("Unk_92edf50", &t.Unk_92edf50, d...)
	cb.Do("ArWaypointEffects", &t.ArWaypointEffects, d...)
}

type PrivateGameSubcondition struct {
	// Inherits Subcondition
	// Inherits PolymorphicBase
	DwType  DT_UINT
	BNegate DT_INT
	DwPad   DT_UINT
}

func (t *PrivateGameSubcondition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BNegate, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PrivateGameSubcondition) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("BNegate", &t.BNegate, d...)
	cb.Do("DwPad", &t.DwPad, d...)
}

type GameTestingDungeonEntranceSamplingStartMessage struct {
	THeader        RequiredMessageHeader
	SnoSubzone     DT_SNO
	SnoDestSubzone DT_SNO
}

func (t *GameTestingDungeonEntranceSamplingStartMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoSubzone, r, &Options{
		Flags: 1,
		Group: 80,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.SnoDestSubzone, r, &Options{
		Flags: 1,
		Group: 80,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *GameTestingDungeonEntranceSamplingStartMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("SnoSubzone", &t.SnoSubzone, d...)
	cb.Do("SnoDestSubzone", &t.SnoDestSubzone, d...)
}

type MarkerInstanceChunk struct {
	PtInstanceGroups DT_VARIABLEARRAY[*MarkerInstanceGroup]
	TVertexAO        MarkerInstanceGroupsAO
	Unk_2f217b0      DT_INT
	AabbBounds       AABB
}

func (t *MarkerInstanceChunk) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.PtInstanceGroups, r, &Options{Flags: 2097152}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TVertexAO, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.Unk_2f217b0, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.AabbBounds, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+64, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *MarkerInstanceChunk) Walk(cb WalkCallback, d ...any) {
	cb.Do("PtInstanceGroups", &t.PtInstanceGroups, d...)
	cb.Do("TVertexAO", &t.TVertexAO, d...)
	cb.Do("Unk_2f217b0", &t.Unk_2f217b0, d...)
	cb.Do("AabbBounds", &t.AabbBounds, d...)
}

type LevelUpNotificationEntry struct {
	NLevel           DT_INT
	SnoCondition     DT_SNO
	HDisplayedString DT_UINT
}

func (t *LevelUpNotificationEntry) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.NLevel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.SnoCondition, r, &Options{
		Flags: 1,
		Group: 51,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.HDisplayedString, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+12, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *LevelUpNotificationEntry) Walk(cb WalkCallback, d ...any) {
	cb.Do("NLevel", &t.NLevel, d...)
	cb.Do("SnoCondition", &t.SnoCondition, d...)
	cb.Do("HDisplayedString", &t.HDisplayedString, d...)
}

type ScriptEventParamMonsterRarity struct {
	// Inherits ScriptEventParamBase
	// Inherits PolymorphicBase
	DwType         DT_UINT
	EParamType     DT_ENUM
	DwPad          DT_UINT
	EMonsterRarity DT_ENUM
}

func (t *ScriptEventParamMonsterRarity) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.EParamType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.EMonsterRarity, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ScriptEventParamMonsterRarity) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("EParamType", &t.EParamType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("EMonsterRarity", &t.EMonsterRarity, d...)
}

type MarkerInstanceGroup struct {
	SnoAppearance           DT_SNO
	SzLookName              DT_UINT
	DwShaderMapOverride     DT_UINT
	ECullingLevel           DT_ENUM
	EInstanceType           DT_ENUM
	PtInstances             DT_VARIABLEARRAY[*InstanceGroupInstance]
	TVertexAO               MarkerInstanceGroupAO
	DwFlags                 DT_UINT
	PtRunTimeMaterialValues DT_VARIABLEARRAY[*RunTimeMaterialValues]
}

func (t *MarkerInstanceGroup) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoAppearance, r, &Options{
		Flags: 1,
		Group: 9,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.SzLookName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwShaderMapOverride, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.ECullingLevel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.EInstanceType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.PtInstances, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.TVertexAO, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.DwFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.PtRunTimeMaterialValues, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+72, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *MarkerInstanceGroup) Walk(cb WalkCallback, d ...any) {
	cb.Do("SnoAppearance", &t.SnoAppearance, d...)
	cb.Do("SzLookName", &t.SzLookName, d...)
	cb.Do("DwShaderMapOverride", &t.DwShaderMapOverride, d...)
	cb.Do("ECullingLevel", &t.ECullingLevel, d...)
	cb.Do("EInstanceType", &t.EInstanceType, d...)
	cb.Do("PtInstances", &t.PtInstances, d...)
	cb.Do("TVertexAO", &t.TVertexAO, d...)
	cb.Do("DwFlags", &t.DwFlags, d...)
	cb.Do("PtRunTimeMaterialValues", &t.PtRunTimeMaterialValues, d...)
}

type PrefetchQuestMessage struct {
	THeader    RequiredMessageHeader
	SnoQuest   DT_SNO
	Unk_a61d97 DT_INT
}

func (t *PrefetchQuestMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoQuest, r, &Options{
		Flags: 1,
		Group: 31,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.Unk_a61d97, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PrefetchQuestMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("SnoQuest", &t.SnoQuest, d...)
	cb.Do("Unk_a61d97", &t.Unk_a61d97, d...)
}

type NPCComponentSlotComponentPreloadHelper struct {
	TComponent SerialDataInfo
}

func (t *NPCComponentSlotComponentPreloadHelper) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.TComponent, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *NPCComponentSlotComponentPreloadHelper) Walk(cb WalkCallback, d ...any) {
	cb.Do("TComponent", &t.TComponent, d...)
}

type EffectGroupDefinition struct {
	FlDuration          DT_FLOAT
	DwEffectFlags       DT_UINT
	Unk_4327903         DT_FLOAT
	Unk_9cf7635         DT_FLOAT
	Unk_30364bd         DT_FLOAT
	Unk_e8602d3         DT_FLOAT
	Unk_7d5553e         DT_FLOAT
	Unk_19bdc57         DT_FLOAT
	Unk_7c79fc2         DT_FLOAT
	EFrameRateMode      DT_ENUM
	TFallbackEffect     EffectItem
	PtEffects           DT_VARIABLEARRAY[*EffectItem]
	Unk_50a2c90         DT_VARIABLEARRAY[*DT_INT]
	NEffectWeightMethod DT_ENUM
	SnoPower            DT_SNO
	SnoPowerEffectParam DT_SNO
	SnoConversation     DT_SNO
	Unk_e7c25e0         DT_ENUM
	TLoopDelay          DT_RANGE[*DT_FLOAT]
	FPlayedBit          DT_FIXEDARRAY[*DT_UINT]
	PtHardpoints        DT_VARIABLEARRAY[*EffectGroupHardpoint]
	Unk_4f7a18a         DT_UINT
	Unk_adf7def         DT_ENUM
}

func (t *EffectGroupDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.FlDuration, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwEffectFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_4327903, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.Unk_9cf7635, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_30364bd, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.Unk_e8602d3, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.Unk_7d5553e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.Unk_19bdc57, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.Unk_7c79fc2, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.EFrameRateMode, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.TFallbackEffect, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+200, &t.PtEffects, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+216, &t.Unk_50a2c90, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+232, &t.NEffectWeightMethod, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+236, &t.SnoPower, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+240, &t.SnoPowerEffectParam, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+244, &t.SnoConversation, r, &Options{
		Flags: 1,
		Group: 12,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+248, &t.Unk_e7c25e0, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+252, &t.TLoopDelay, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+260, &t.FPlayedBit, r, &Options{ArrayLength: 16}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+328, &t.PtHardpoints, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+344, &t.Unk_4f7a18a, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+348, &t.Unk_adf7def, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+352, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *EffectGroupDefinition) Walk(cb WalkCallback, d ...any) {
	cb.Do("FlDuration", &t.FlDuration, d...)
	cb.Do("DwEffectFlags", &t.DwEffectFlags, d...)
	cb.Do("Unk_4327903", &t.Unk_4327903, d...)
	cb.Do("Unk_9cf7635", &t.Unk_9cf7635, d...)
	cb.Do("Unk_30364bd", &t.Unk_30364bd, d...)
	cb.Do("Unk_e8602d3", &t.Unk_e8602d3, d...)
	cb.Do("Unk_7d5553e", &t.Unk_7d5553e, d...)
	cb.Do("Unk_19bdc57", &t.Unk_19bdc57, d...)
	cb.Do("Unk_7c79fc2", &t.Unk_7c79fc2, d...)
	cb.Do("EFrameRateMode", &t.EFrameRateMode, d...)
	cb.Do("TFallbackEffect", &t.TFallbackEffect, d...)
	cb.Do("PtEffects", &t.PtEffects, d...)
	cb.Do("Unk_50a2c90", &t.Unk_50a2c90, d...)
	cb.Do("NEffectWeightMethod", &t.NEffectWeightMethod, d...)
	cb.Do("SnoPower", &t.SnoPower, d...)
	cb.Do("SnoPowerEffectParam", &t.SnoPowerEffectParam, d...)
	cb.Do("SnoConversation", &t.SnoConversation, d...)
	cb.Do("Unk_e7c25e0", &t.Unk_e7c25e0, d...)
	cb.Do("TLoopDelay", &t.TLoopDelay, d...)
	cb.Do("FPlayedBit", &t.FPlayedBit, d...)
	cb.Do("PtHardpoints", &t.PtHardpoints, d...)
	cb.Do("Unk_4f7a18a", &t.Unk_4f7a18a, d...)
	cb.Do("Unk_adf7def", &t.Unk_adf7def, d...)
}

type CurrencyModifiedMessage struct {
	THeader       RequiredMessageHeader
	BPlayEffects  DT_INT
	NAmount       DT_INT64
	ECurrencyType DT_ENUM
	EReason       DT_ENUM
}

func (t *CurrencyModifiedMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BPlayEffects, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.NAmount, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.ECurrencyType, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.EReason, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+40, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *CurrencyModifiedMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("BPlayEffects", &t.BPlayEffects, d...)
	cb.Do("NAmount", &t.NAmount, d...)
	cb.Do("ECurrencyType", &t.ECurrencyType, d...)
	cb.Do("EReason", &t.EReason, d...)
}

type UIListBoxStyleOptionalFieldMapDefaults struct {
	EListBoxStyle               DT_ENUM
	SnoHighlightAnim            DT_SNO
	SnoHoverAnim                DT_SNO
	BListBoxHorizontal          DT_INT
	NListBoxStackSpacing        DT_INT
	TMargins                    UIMargins
	HListItemTemplate           UIControlHandle
	BToggleSelection            DT_INT
	SzListBoxScrollbarControl   DT_CSTRING[*DT_BYTE]
	EListBoxScrollbarVisibility DT_ENUM
	FlScrollbarBlendTime        DT_FLOAT
	EBlendEasing                DT_ENUM
	Unk_ba769f2                 DT_FLOAT
	Unk_7111989                 DT_ENUM
	Unk_784f6fe                 DT_INT
	Unk_b91b721                 DT_INT
	Unk_1e24eb1                 DT_INT
	NPageIncrement              DT_INT
	Unk_f28083a                 DT_INT
}

func (t *UIListBoxStyleOptionalFieldMapDefaults) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.EListBoxStyle, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.SnoHighlightAnim, r, &Options{
		Flags: 1,
		Group: 7,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.SnoHoverAnim, r, &Options{
		Flags: 1,
		Group: 7,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.BListBoxHorizontal, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.NListBoxStackSpacing, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.TMargins, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.HListItemTemplate, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.BToggleSelection, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.SzListBoxScrollbarControl, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.EListBoxScrollbarVisibility, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.FlScrollbarBlendTime, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.EBlendEasing, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.Unk_ba769f2, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.Unk_7111989, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.Unk_784f6fe, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.Unk_b91b721, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.Unk_1e24eb1, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.NPageIncrement, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+100, &t.Unk_f28083a, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+104, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *UIListBoxStyleOptionalFieldMapDefaults) Walk(cb WalkCallback, d ...any) {
	cb.Do("EListBoxStyle", &t.EListBoxStyle, d...)
	cb.Do("SnoHighlightAnim", &t.SnoHighlightAnim, d...)
	cb.Do("SnoHoverAnim", &t.SnoHoverAnim, d...)
	cb.Do("BListBoxHorizontal", &t.BListBoxHorizontal, d...)
	cb.Do("NListBoxStackSpacing", &t.NListBoxStackSpacing, d...)
	cb.Do("TMargins", &t.TMargins, d...)
	cb.Do("HListItemTemplate", &t.HListItemTemplate, d...)
	cb.Do("BToggleSelection", &t.BToggleSelection, d...)
	cb.Do("SzListBoxScrollbarControl", &t.SzListBoxScrollbarControl, d...)
	cb.Do("EListBoxScrollbarVisibility", &t.EListBoxScrollbarVisibility, d...)
	cb.Do("FlScrollbarBlendTime", &t.FlScrollbarBlendTime, d...)
	cb.Do("EBlendEasing", &t.EBlendEasing, d...)
	cb.Do("Unk_ba769f2", &t.Unk_ba769f2, d...)
	cb.Do("Unk_7111989", &t.Unk_7111989, d...)
	cb.Do("Unk_784f6fe", &t.Unk_784f6fe, d...)
	cb.Do("Unk_b91b721", &t.Unk_b91b721, d...)
	cb.Do("Unk_1e24eb1", &t.Unk_1e24eb1, d...)
	cb.Do("NPageIncrement", &t.NPageIncrement, d...)
	cb.Do("Unk_f28083a", &t.Unk_f28083a, d...)
}

type UIItemButtonStyleOptionalFieldMapDefaults struct {
	SnoItem             DT_SNO
	BDrawSockets        DT_INT
	BDrawSlotBackground DT_INT
	BDrawBackground     DT_INT
	Unk_c67f281         DT_INT
	Unk_ce38d55         DT_INT
	Unk_a29eae9         DT_INT
	Unk_15242e9         DT_INT
}

func (t *UIItemButtonStyleOptionalFieldMapDefaults) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoItem, r, &Options{
		Flags: 513,
		Group: 73,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.BDrawSockets, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.BDrawSlotBackground, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.BDrawBackground, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_c67f281, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.Unk_ce38d55, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_a29eae9, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.Unk_15242e9, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *UIItemButtonStyleOptionalFieldMapDefaults) Walk(cb WalkCallback, d ...any) {
	cb.Do("SnoItem", &t.SnoItem, d...)
	cb.Do("BDrawSockets", &t.BDrawSockets, d...)
	cb.Do("BDrawSlotBackground", &t.BDrawSlotBackground, d...)
	cb.Do("BDrawBackground", &t.BDrawBackground, d...)
	cb.Do("Unk_c67f281", &t.Unk_c67f281, d...)
	cb.Do("Unk_ce38d55", &t.Unk_ce38d55, d...)
	cb.Do("Unk_a29eae9", &t.Unk_a29eae9, d...)
	cb.Do("Unk_15242e9", &t.Unk_15242e9, d...)
}

type GameTestingUnlockRecipeTier struct {
	THeader      RequiredMessageHeader
	NCrafterType DT_INT
}

func (t *GameTestingUnlockRecipeTier) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.NCrafterType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+20, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *GameTestingUnlockRecipeTier) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("NCrafterType", &t.NCrafterType, d...)
}

type ColorCorrectionParamsOptionalFieldMapDefaults struct {
	SnoTexCorrectionDay         DT_SNO
	SnoTexCorrectionNight       DT_SNO
	PathVignetteColor           InterpolationPath_RGBAColor
	PathVignetteIntensity       InterpolationPath_float
	PathVignetteSmoothness      InterpolationPath_float
	VecVignetteCenter           DT_VECTOR2D
	VecVignetteAspectRatioScale DT_VECTOR2D
}

func (t *ColorCorrectionParamsOptionalFieldMapDefaults) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoTexCorrectionDay, r, &Options{
		Flags: 1,
		Group: 44,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.SnoTexCorrectionNight, r, &Options{
		Flags: 1,
		Group: 44,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.PathVignetteColor, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.PathVignetteIntensity, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.PathVignetteSmoothness, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+176, &t.VecVignetteCenter, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+184, &t.VecVignetteAspectRatioScale, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+192, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ColorCorrectionParamsOptionalFieldMapDefaults) Walk(cb WalkCallback, d ...any) {
	cb.Do("SnoTexCorrectionDay", &t.SnoTexCorrectionDay, d...)
	cb.Do("SnoTexCorrectionNight", &t.SnoTexCorrectionNight, d...)
	cb.Do("PathVignetteColor", &t.PathVignetteColor, d...)
	cb.Do("PathVignetteIntensity", &t.PathVignetteIntensity, d...)
	cb.Do("PathVignetteSmoothness", &t.PathVignetteSmoothness, d...)
	cb.Do("VecVignetteCenter", &t.VecVignetteCenter, d...)
	cb.Do("VecVignetteAspectRatioScale", &t.VecVignetteAspectRatioScale, d...)
}

type OctreePrimitive struct {
	UUserData DT_INT64
}

func (t *OctreePrimitive) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.UUserData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *OctreePrimitive) Walk(cb WalkCallback, d ...any) {
	cb.Do("UUserData", &t.UUserData, d...)
}

type DebugProjectileCollisionCheck struct {
	FlRadius DT_OPTIONAL[*DT_FLOAT]
	BOverlap DT_OPTIONAL[*DT_INT]
	Wp1      DT_OPTIONAL[*DT_VECTOR3D]
	Wp2      DT_OPTIONAL[*DT_VECTOR3D]
}

func (t *DebugProjectileCollisionCheck) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.FlRadius, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.BOverlap, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Wp1, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.Wp2, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *DebugProjectileCollisionCheck) Walk(cb WalkCallback, d ...any) {
	cb.Do("FlRadius", &t.FlRadius, d...)
	cb.Do("BOverlap", &t.BOverlap, d...)
	cb.Do("Wp1", &t.Wp1, d...)
	cb.Do("Wp2", &t.Wp2, d...)
}

type MarkerPortalDestGizmoData struct {
	DwEntranceName      DT_STARTLOC_NAME
	BProceduralEntrance DT_INT
}

func (t *MarkerPortalDestGizmoData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.DwEntranceName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.BProceduralEntrance, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *MarkerPortalDestGizmoData) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwEntranceName", &t.DwEntranceName, d...)
	cb.Do("BProceduralEntrance", &t.BProceduralEntrance, d...)
}

type ItemSourceWorldTierSubcondition struct {
	// Inherits NumericComparisonSubcondition
	// Inherits Subcondition
	// Inherits PolymorphicBase
	DwType        DT_UINT
	BNegate       DT_INT
	EComparisonOp DT_ENUM
	DwPad         DT_UINT
	EWorldTier    DT_ENUM
}

func (t *ItemSourceWorldTierSubcondition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BNegate, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.EComparisonOp, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.EWorldTier, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+40, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ItemSourceWorldTierSubcondition) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("BNegate", &t.BNegate, d...)
	cb.Do("EComparisonOp", &t.EComparisonOp, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("EWorldTier", &t.EWorldTier, d...)
}

type ItemUpgradeCountSubcondition struct {
	// Inherits NumericComparisonSubcondition
	// Inherits Subcondition
	// Inherits PolymorphicBase
	DwType        DT_UINT
	BNegate       DT_INT
	EComparisonOp DT_ENUM
	DwPad         DT_UINT
	NUpgradeCount DT_INT
}

func (t *ItemUpgradeCountSubcondition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BNegate, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.EComparisonOp, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.NUpgradeCount, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+40, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ItemUpgradeCountSubcondition) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("BNegate", &t.BNegate, d...)
	cb.Do("EComparisonOp", &t.EComparisonOp, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("NUpgradeCount", &t.NUpgradeCount, d...)
}

type NPCHairColors struct {
	DwID                 DT_UINT
	RgbaColors           DT_FIXEDARRAY[*DT_RGBACOLOR]
	FlHairColorInfluence DT_FLOAT
	SzLabel              DT_CSTRING[*DT_BYTE]
}

func (t *NPCHairColors) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.DwID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.RgbaColors, r, &Options{
		ArrayLength: 3,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.FlHairColorInfluence, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SzLabel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+40, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *NPCHairColors) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwID", &t.DwID, d...)
	cb.Do("RgbaColors", &t.RgbaColors, d...)
	cb.Do("FlHairColorInfluence", &t.FlHairColorInfluence, d...)
	cb.Do("SzLabel", &t.SzLabel, d...)
}

type OnResourceGainedBuffCallback struct {
	// Inherits BuffCallbackBase
	// Inherits PolymorphicBase
	DwType                DT_UINT
	DwPad                 DT_UINT
	SnoTriggerEffectGroup DT_SNO
	ArConditions          DT_POLYMORPHIC_VARIABLEARRAY[*DT_INT64]
}

func (t *OnResourceGainedBuffCallback) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoTriggerEffectGroup, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ArConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *OnResourceGainedBuffCallback) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("SnoTriggerEffectGroup", &t.SnoTriggerEffectGroup, d...)
	cb.Do("ArConditions", &t.ArConditions, d...)
}

type ScriptEventParamSpawnerParentMarkerHandle struct {
	// Inherits ScriptEventParamBase
	// Inherits PolymorphicBase
	DwType        DT_UINT
	EParamType    DT_ENUM
	DwPad         DT_UINT
	TMarkerHandle MarkerHandle
}

func (t *ScriptEventParamSpawnerParentMarkerHandle) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.EParamType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.TMarkerHandle, r, &Options{Flags: 513}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ScriptEventParamSpawnerParentMarkerHandle) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("EParamType", &t.EParamType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("TMarkerHandle", &t.TMarkerHandle, d...)
}

type Type_7ba7c20f struct {
	// Inherits GlobalMarkerActorData
	// Inherits PolymorphicBase
	DwType       DT_UINT
	DwPad        DT_UINT
	SnoSubzone   DT_SNO
	SnoLevelArea DT_SNO
}

func (t *Type_7ba7c20f) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoSubzone, r, &Options{
		Flags: 513,
		Group: 80,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.SnoLevelArea, r, &Options{
		Flags: 513,
		Group: 22,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_7ba7c20f) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("SnoSubzone", &t.SnoSubzone, d...)
	cb.Do("SnoLevelArea", &t.SnoLevelArea, d...)
}

type FoleyMaterialTag struct {
	SzTag DT_UINT
}

func (t *FoleyMaterialTag) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SzTag, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+4, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *FoleyMaterialTag) Walk(cb WalkCallback, d ...any) {
	cb.Do("SzTag", &t.SzTag, d...)
}

type ClassPassiveSkillTypeSaveData struct {
	TPassiveSaveData DT_FIXEDARRAY[*ClassPassiveSkillSaveData]
}

func (t *ClassPassiveSkillTypeSaveData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.TPassiveSaveData, r, &Options{
		ArrayLength: 5,
		Flags:       1,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+20, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ClassPassiveSkillTypeSaveData) Walk(cb WalkCallback, d ...any) {
	cb.Do("TPassiveSaveData", &t.TPassiveSaveData, d...)
}

type ScriptEventParamConversation struct {
	// Inherits ScriptEventParamBase
	// Inherits PolymorphicBase
	DwType          DT_UINT
	EParamType      DT_ENUM
	DwPad           DT_UINT
	SnoConversation DT_SNO
}

func (t *ScriptEventParamConversation) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.EParamType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SnoConversation, r, &Options{
		Flags: 513,
		Group: 12,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ScriptEventParamConversation) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("EParamType", &t.EParamType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("SnoConversation", &t.SnoConversation, d...)
}

type SubObjectAppearance struct {
	DwFlags                     DT_UINT
	SnoMaterial                 DT_SNO
	SnoOverrideMaterial         DT_SNO
	SnoCloth                    DT_SNO
	SnoHighQualityClothOverride DT_SNO
	SnoMountedClothOverride     DT_SNO
	SnoEffectGroup              DT_SNO
	ArAnimClothOverrides        DT_VARIABLEARRAY[*AnimationClothOverride]
	ArVariantMaterials          DT_VARIABLEARRAY[*DT_SNO]
}

func (t *SubObjectAppearance) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.DwFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.SnoMaterial, r, &Options{
		Flags: 1,
		Group: 57,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.SnoOverrideMaterial, r, &Options{
		Flags: 1,
		Group: 57,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.SnoCloth, r, &Options{
		Flags: 1,
		Group: 11,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoHighQualityClothOverride, r, &Options{
		Flags: 1,
		Group: 11,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.SnoMountedClothOverride, r, &Options{
		Flags: 1,
		Group: 11,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SnoEffectGroup, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.ArAnimClothOverrides, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.ArVariantMaterials, r, &Options{Group: 57}); err != nil {
		return err
	}
	if _, err := r.Seek(p+64, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *SubObjectAppearance) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwFlags", &t.DwFlags, d...)
	cb.Do("SnoMaterial", &t.SnoMaterial, d...)
	cb.Do("SnoOverrideMaterial", &t.SnoOverrideMaterial, d...)
	cb.Do("SnoCloth", &t.SnoCloth, d...)
	cb.Do("SnoHighQualityClothOverride", &t.SnoHighQualityClothOverride, d...)
	cb.Do("SnoMountedClothOverride", &t.SnoMountedClothOverride, d...)
	cb.Do("SnoEffectGroup", &t.SnoEffectGroup, d...)
	cb.Do("ArAnimClothOverrides", &t.ArAnimClothOverrides, d...)
	cb.Do("ArVariantMaterials", &t.ArVariantMaterials, d...)
}

type PowerConditionIsValidForWeaponExpertise struct {
	// Inherits PowerConditionBase
	// Inherits PolymorphicBase
	DwType                DT_UINT
	BInverse              DT_INT
	DwPad                 DT_UINT
	SnoItemType           DT_SNO
	BIncludeTechniqueSlot DT_INT
}

func (t *PowerConditionIsValidForWeaponExpertise) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BInverse, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SnoItemType, r, &Options{
		Flags: 513,
		Group: 98,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.BIncludeTechniqueSlot, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PowerConditionIsValidForWeaponExpertise) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("BInverse", &t.BInverse, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("SnoItemType", &t.SnoItemType, d...)
	cb.Do("BIncludeTechniqueSlot", &t.BIncludeTechniqueSlot, d...)
}

type OnBerserkRemovedCallback struct {
	// Inherits BuffCallbackBase
	// Inherits PolymorphicBase
	DwType                DT_UINT
	DwPad                 DT_UINT
	SnoTriggerEffectGroup DT_SNO
	ArConditions          DT_POLYMORPHIC_VARIABLEARRAY[*DT_INT64]
	Unk_224db6f           DT_ENUM
	DwRemovalReasons      DT_UINT
}

func (t *OnBerserkRemovedCallback) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoTriggerEffectGroup, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ArConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.Unk_224db6f, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.DwRemovalReasons, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if _, err := r.Seek(p+56, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *OnBerserkRemovedCallback) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("SnoTriggerEffectGroup", &t.SnoTriggerEffectGroup, d...)
	cb.Do("ArConditions", &t.ArConditions, d...)
	cb.Do("Unk_224db6f", &t.Unk_224db6f, d...)
	cb.Do("DwRemovalReasons", &t.DwRemovalReasons, d...)
}

type BloodSealIntoSocketMessage struct {
	THeader       RequiredMessageHeader
	SnoBloodSeal  DT_SNO
	DwSocketIndex DT_UINT
}

func (t *BloodSealIntoSocketMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoBloodSeal, r, &Options{
		Flags: 1,
		Group: 142,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwSocketIndex, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *BloodSealIntoSocketMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("SnoBloodSeal", &t.SnoBloodSeal, d...)
	cb.Do("DwSocketIndex", &t.DwSocketIndex, d...)
}

type AnimSetOverrideEntry struct {
	GbidOrderTag       DT_GBID
	SnoAnimSetOverride DT_SNO
}

func (t *AnimSetOverrideEntry) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.GbidOrderTag, r, &Options{
		Flags: 1,
		Group: 53,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.SnoAnimSetOverride, r, &Options{
		Flags: 1,
		Group: 8,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *AnimSetOverrideEntry) Walk(cb WalkCallback, d ...any) {
	cb.Do("GbidOrderTag", &t.GbidOrderTag, d...)
	cb.Do("SnoAnimSetOverride", &t.SnoAnimSetOverride, d...)
}

type CollisionMesh struct {
	MeshDataMirror    dmMeshDataMirror
	PtDominoVertices  DT_VARIABLEARRAY[*dmFloat4Mirror]
	PtDominoTriangles DT_VARIABLEARRAY[*dmMeshTriangleMirror]
	PtDominoNodes     DT_VARIABLEARRAY[*dmMeshNodeMirror]
	Unk_b2f6ec8       DT_INT
	UFlags            DT_UINT
	UMaterial         DT_UINT
	UGroupIndex       DT_WORD
	Unk_732e0b0       DT_VARIABLEARRAY[*DT_UINT]
}

func (t *CollisionMesh) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.MeshDataMirror, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.PtDominoVertices, r, &Options{Flags: 2097153}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.PtDominoTriangles, r, &Options{Flags: 2097153}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.PtDominoNodes, r, &Options{Flags: 2097153}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.Unk_b2f6ec8, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+100, &t.UFlags, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+104, &t.UMaterial, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+108, &t.UGroupIndex, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.Unk_732e0b0, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+128, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *CollisionMesh) Walk(cb WalkCallback, d ...any) {
	cb.Do("MeshDataMirror", &t.MeshDataMirror, d...)
	cb.Do("PtDominoVertices", &t.PtDominoVertices, d...)
	cb.Do("PtDominoTriangles", &t.PtDominoTriangles, d...)
	cb.Do("PtDominoNodes", &t.PtDominoNodes, d...)
	cb.Do("Unk_b2f6ec8", &t.Unk_b2f6ec8, d...)
	cb.Do("UFlags", &t.UFlags, d...)
	cb.Do("UMaterial", &t.UMaterial, d...)
	cb.Do("UGroupIndex", &t.UGroupIndex, d...)
	cb.Do("Unk_732e0b0", &t.Unk_732e0b0, d...)
}

type SkillTreeNode struct {
	DwID                        DT_UINT
	GbidReward                  DT_GBID
	NExclusiveGroupId           DT_INT
	VPosition                   DT_VECTOR2D
	BRootNode                   DT_INT
	DwTalentAbilitiesSpentPoint DT_UINT
	Unk_bb82ad1                 DT_INT
	ArConnections               DT_VARIABLEARRAY[*SkillTreeNodePersonalConnection]
	ArSkillTreeSkillRankMods    DT_VARIABLEARRAY[*SkillTreeSkillRankMod]
}

func (t *SkillTreeNode) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.DwID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.GbidReward, r, &Options{
		Flags: 1,
		Group: 43,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.NExclusiveGroupId, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.VPosition, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.BRootNode, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.DwTalentAbilitiesSpentPoint, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.Unk_bb82ad1, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.ArConnections, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.ArSkillTreeSkillRankMods, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+64, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *SkillTreeNode) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwID", &t.DwID, d...)
	cb.Do("GbidReward", &t.GbidReward, d...)
	cb.Do("NExclusiveGroupId", &t.NExclusiveGroupId, d...)
	cb.Do("VPosition", &t.VPosition, d...)
	cb.Do("BRootNode", &t.BRootNode, d...)
	cb.Do("DwTalentAbilitiesSpentPoint", &t.DwTalentAbilitiesSpentPoint, d...)
	cb.Do("Unk_bb82ad1", &t.Unk_bb82ad1, d...)
	cb.Do("ArConnections", &t.ArConnections, d...)
	cb.Do("ArSkillTreeSkillRankMods", &t.ArSkillTreeSkillRankMods, d...)
}

type DungeonKeyBlockedMessage struct {
	THeader RequiredMessageHeader
	AnnKey  DT_ACD_NETWORK_NAME
	BLeader DT_INT
}

func (t *DungeonKeyBlockedMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.AnnKey, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.BLeader, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+28, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *DungeonKeyBlockedMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("AnnKey", &t.AnnKey, d...)
	cb.Do("BLeader", &t.BLeader, d...)
}

type ScriptEventParamFloatRangeEntered struct {
	// Inherits ScriptEventParamBase
	// Inherits PolymorphicBase
	DwType     DT_UINT
	EParamType DT_ENUM
	DwPad      DT_UINT
	FlMinValue DT_FLOAT
	FlMaxValue DT_FLOAT
}

func (t *ScriptEventParamFloatRangeEntered) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.EParamType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.FlMinValue, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.FlMaxValue, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ScriptEventParamFloatRangeEntered) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("EParamType", &t.EParamType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("FlMinValue", &t.FlMinValue, d...)
	cb.Do("FlMaxValue", &t.FlMaxValue, d...)
}

type ItemQualityLevelPowerRanges struct {
	TDropRange      DT_RANGE[*DT_INT]
	Unk_6a86924     DT_FLOAT
	FlExpectedValue DT_FLOAT
	Unk_6a86826     DT_FLOAT
	NWeights        DT_FIXEDARRAY[*DT_INT]
}

func (t *ItemQualityLevelPowerRanges) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.TDropRange, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.Unk_6a86924, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.FlExpectedValue, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_6a86826, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.NWeights, r, &Options{
		ArrayLength: 4,
		Flags:       1,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+36, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ItemQualityLevelPowerRanges) Walk(cb WalkCallback, d ...any) {
	cb.Do("TDropRange", &t.TDropRange, d...)
	cb.Do("Unk_6a86924", &t.Unk_6a86924, d...)
	cb.Do("FlExpectedValue", &t.FlExpectedValue, d...)
	cb.Do("Unk_6a86826", &t.Unk_6a86826, d...)
	cb.Do("NWeights", &t.NWeights, d...)
}

type ActorCombatData struct {
	SnoHitBySoundTable     DT_SNO
	EWeaponHitsound        DT_ENUM
	ArHitReactionOverrides DT_VARIABLEARRAY[*HitReactionOverride]
	Unk_5909501            DT_FLOAT
	ArJitterJoints         DT_VARIABLEARRAY[*ActorJitterJoint]
	ArRotationJoints       DT_VARIABLEARRAY[*ActorHitRotationJoint]
}

func (t *ActorCombatData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoHitBySoundTable, r, &Options{
		Flags: 1,
		Group: 79,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.EWeaponHitsound, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.ArHitReactionOverrides, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_5909501, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.ArJitterJoints, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.ArRotationJoints, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+64, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ActorCombatData) Walk(cb WalkCallback, d ...any) {
	cb.Do("SnoHitBySoundTable", &t.SnoHitBySoundTable, d...)
	cb.Do("EWeaponHitsound", &t.EWeaponHitsound, d...)
	cb.Do("ArHitReactionOverrides", &t.ArHitReactionOverrides, d...)
	cb.Do("Unk_5909501", &t.Unk_5909501, d...)
	cb.Do("ArJitterJoints", &t.ArJitterJoints, d...)
	cb.Do("ArRotationJoints", &t.ArRotationJoints, d...)
}

type GameSyncedDebugData struct {
	Unk_180e380 DT_UINT
	Unk_11cfeb2 DT_UINT
	Unk_8c3326b DT_UINT
	Unk_31f2130 DT_CHARARRAY
	Unk_9a7b27d DT_CHARARRAY
	Unk_e1de6e4 DT_INT64
	Unk_35d179b DT_INT64
	Unk_eb81e70 DT_UINT
	NGiftsPoint DT_INT
	SzDebugMsg  DT_CHARARRAY
	DwFlags     DT_UINT
}

func (t *GameSyncedDebugData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Unk_180e380, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.Unk_11cfeb2, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.Unk_8c3326b, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.Unk_31f2130, r, &Options{
		ArrayLength: 100,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.Unk_9a7b27d, r, &Options{
		ArrayLength: 40,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+152, &t.Unk_e1de6e4, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+160, &t.Unk_35d179b, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+168, &t.Unk_eb81e70, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+172, &t.NGiftsPoint, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+176, &t.SzDebugMsg, r, &Options{
		ArrayLength: 256,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+432, &t.DwFlags, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+440, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *GameSyncedDebugData) Walk(cb WalkCallback, d ...any) {
	cb.Do("Unk_180e380", &t.Unk_180e380, d...)
	cb.Do("Unk_11cfeb2", &t.Unk_11cfeb2, d...)
	cb.Do("Unk_8c3326b", &t.Unk_8c3326b, d...)
	cb.Do("Unk_31f2130", &t.Unk_31f2130, d...)
	cb.Do("Unk_9a7b27d", &t.Unk_9a7b27d, d...)
	cb.Do("Unk_e1de6e4", &t.Unk_e1de6e4, d...)
	cb.Do("Unk_35d179b", &t.Unk_35d179b, d...)
	cb.Do("Unk_eb81e70", &t.Unk_eb81e70, d...)
	cb.Do("NGiftsPoint", &t.NGiftsPoint, d...)
	cb.Do("SzDebugMsg", &t.SzDebugMsg, d...)
	cb.Do("DwFlags", &t.DwFlags, d...)
}

type PhaseJumpBase struct {
	// Inherits PolymorphicBase
	DwType       DT_UINT
	Unk_2de4987  DT_UINT
	ArConditions DT_POLYMORPHIC_VARIABLEARRAY[*DT_INT64]
	BEnd         DT_INT
	DwPad        DT_UINT
}

func (t *PhaseJumpBase) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_2de4987, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ArConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.BEnd, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+56, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PhaseJumpBase) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("Unk_2de4987", &t.Unk_2de4987, d...)
	cb.Do("ArConditions", &t.ArConditions, d...)
	cb.Do("BEnd", &t.BEnd, d...)
	cb.Do("DwPad", &t.DwPad, d...)
}

type GameTestingActorDeathSamplingStartMessage struct {
	THeader          RequiredMessageHeader
	SnoActor         DT_SNO
	SnoDeathOverride DT_SNO
	UCount           DT_UINT
}

func (t *GameTestingActorDeathSamplingStartMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoActor, r, &Options{
		Flags: 1,
		Group: 1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.SnoDeathOverride, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.UCount, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+28, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *GameTestingActorDeathSamplingStartMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("SnoActor", &t.SnoActor, d...)
	cb.Do("SnoDeathOverride", &t.SnoDeathOverride, d...)
	cb.Do("UCount", &t.UCount, d...)
}

type SeasonWorldTierData struct {
	FlMalignantEliteChance        DT_FLOAT
	ArMalignantSocketColorWeights DT_VARIABLEARRAY[*MalignantColorWeight]
}

func (t *SeasonWorldTierData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.FlMalignantEliteChance, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.ArMalignantSocketColorWeights, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *SeasonWorldTierData) Walk(cb WalkCallback, d ...any) {
	cb.Do("FlMalignantEliteChance", &t.FlMalignantEliteChance, d...)
	cb.Do("ArMalignantSocketColorWeights", &t.ArMalignantSocketColorWeights, d...)
}

type WorldEvent struct {
	TMarkerHandle MarkerHandle
	SnoWorldState DT_SNO
	NValue        DT_INT
	SnoScene      DT_SNO
}

func (t *WorldEvent) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.TMarkerHandle, r, &Options{Flags: 513}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.SnoWorldState, r, &Options{
		Flags: 1,
		Group: 86,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.NValue, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoScene, r, &Options{
		Flags: 513,
		Group: 33,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+20, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *WorldEvent) Walk(cb WalkCallback, d ...any) {
	cb.Do("TMarkerHandle", &t.TMarkerHandle, d...)
	cb.Do("SnoWorldState", &t.SnoWorldState, d...)
	cb.Do("NValue", &t.NValue, d...)
	cb.Do("SnoScene", &t.SnoScene, d...)
}

type DeathLookTemplate struct{}

func (t *DeathLookTemplate) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if _, err := r.Seek(p+1, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *DeathLookTemplate) Walk(cb WalkCallback, d ...any) {}

type StoryboardPlayStoryboardNodeCollection struct {
	ArNodes     DT_VARIABLEARRAY[*StoryboardPlayStoryboardNode]
	Unk_36cc429 DT_VARIABLEARRAY[*DT_INT]
}

func (t *StoryboardPlayStoryboardNodeCollection) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.ArNodes, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_36cc429, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *StoryboardPlayStoryboardNodeCollection) Walk(cb WalkCallback, d ...any) {
	cb.Do("ArNodes", &t.ArNodes, d...)
	cb.Do("Unk_36cc429", &t.Unk_36cc429, d...)
}

type HirelingInfo struct {
	EClass           DT_ENUM
	GbidName         DT_GBID
	FDead            DT_INT
	ArnPowerKeyParam DT_FIXEDARRAY[*DT_INT]
}

func (t *HirelingInfo) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.EClass, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.GbidName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.FDead, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.ArnPowerKeyParam, r, &Options{
		ArrayLength: 5,
		Flags:       1,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *HirelingInfo) Walk(cb WalkCallback, d ...any) {
	cb.Do("EClass", &t.EClass, d...)
	cb.Do("GbidName", &t.GbidName, d...)
	cb.Do("FDead", &t.FDead, d...)
	cb.Do("ArnPowerKeyParam", &t.ArnPowerKeyParam, d...)
}

type dmClothCapsuleDefOldMirror struct {
	LocalTransform dmTransformMirror
	Scale          DT_VECTOR4D
	Radius1        DT_FLOAT
	Radius2        DT_FLOAT
	Height         DT_FLOAT
	Stiffness      DT_FLOAT
	BoneIndex      DT_WORD
	Padding        DT_FIXEDARRAY[*DT_WORD]
}

func (t *dmClothCapsuleDefOldMirror) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.LocalTransform, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.Scale, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.Radius1, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.Radius2, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.Height, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+60, &t.Stiffness, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.BoneIndex, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+66, &t.Padding, r, &Options{ArrayLength: 7}); err != nil {
		return err
	}
	if _, err := r.Seek(p+80, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *dmClothCapsuleDefOldMirror) Walk(cb WalkCallback, d ...any) {
	cb.Do("LocalTransform", &t.LocalTransform, d...)
	cb.Do("Scale", &t.Scale, d...)
	cb.Do("Radius1", &t.Radius1, d...)
	cb.Do("Radius2", &t.Radius2, d...)
	cb.Do("Height", &t.Height, d...)
	cb.Do("Stiffness", &t.Stiffness, d...)
	cb.Do("BoneIndex", &t.BoneIndex, d...)
	cb.Do("Padding", &t.Padding, d...)
}

type HiddenCacheGizmoData struct {
	// Inherits NamedGizmoData
	// Inherits ActorGizmoData
	// Inherits PolymorphicBase
	DwType                           DT_UINT
	DwPad                            DT_UINT
	FDisableNonFriendlyOperation     DT_INT
	FWalkToCenter                    DT_INT
	FGizmoStartsDisabled             DT_INT
	FUseStringListName               DT_INT
	FForceMinimapIcon                DT_INT
	FlOperationRadius                DT_FLOAT
	Unk_d0b1df5                      DT_FLOAT
	FlGizmoUseTime                   DT_FLOAT
	SnoChannelingEffect              DT_SNO
	Unk_2767229                      DT_INT
	FGizmoShowProgressBar            DT_INT
	Unk_6d9ebe1                      DT_INT
	Unk_5456245                      DT_INT
	Unk_af5815a                      DT_INT
	SnoOnClickEffect                 DT_SNO
	SnoPickedUpEffect                DT_SNO
	SnoDropOnGroundEffect            DT_SNO
	TConditionData                   GizmoConditionData
	SnoPowerOperator                 DT_SNO
	SnoPowerOperate                  DT_SNO
	SnoPowerOperatorActive           DT_SNO
	SnoPowerOperateActive            DT_SNO
	Unk_359810e                      DT_INT
	NCooldown                        DT_UINT
	Unk_9c8478e                      DT_UINT
	Unk_d45ed2d                      DT_INT
	Unk_f6b20b7                      DT_INT
	Unk_54513b8                      DT_INT
	Unk_fd1f378                      DT_UINT
	HGizmoOperateFlavorTextMsgLabel  DT_UINT
	HGizmoOperateDescriptionMsgLabel DT_UINT
	FlGizmoOperateOffset             DT_FLOAT
	Unk_ab58cd3                      DT_ENUM
	Unk_91a3966                      DT_UINT
	HGizmoChannelingLabel            DT_UINT
	Unk_4be4371                      DT_INT
	SnoTreasureClass                 DT_SNO
	NXPTier                          DT_INT
	Unk_3592260                      DT_INT
	GbidHiddenCache                  DT_GBID
}

func (t *HiddenCacheGizmoData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.FDisableNonFriendlyOperation, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.FWalkToCenter, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.FGizmoStartsDisabled, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.FUseStringListName, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.FForceMinimapIcon, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.FlOperationRadius, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.Unk_d0b1df5, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.FlGizmoUseTime, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.SnoChannelingEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.Unk_2767229, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.FGizmoShowProgressBar, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+60, &t.Unk_6d9ebe1, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.Unk_5456245, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.Unk_af5815a, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.SnoOnClickEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.SnoPickedUpEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.SnoDropOnGroundEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.TConditionData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.SnoPowerOperator, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.SnoPowerOperate, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.SnoPowerOperatorActive, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+100, &t.SnoPowerOperateActive, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+104, &t.Unk_359810e, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+108, &t.NCooldown, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.Unk_9c8478e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+116, &t.Unk_d45ed2d, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.Unk_f6b20b7, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+124, &t.Unk_54513b8, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.Unk_fd1f378, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+132, &t.HGizmoOperateFlavorTextMsgLabel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+136, &t.HGizmoOperateDescriptionMsgLabel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+140, &t.FlGizmoOperateOffset, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+144, &t.Unk_ab58cd3, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+148, &t.Unk_91a3966, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+152, &t.HGizmoChannelingLabel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+156, &t.Unk_4be4371, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+160, &t.SnoTreasureClass, r, &Options{
		Flags: 1,
		Group: 52,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+164, &t.NXPTier, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+168, &t.Unk_3592260, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+172, &t.GbidHiddenCache, r, &Options{
		Flags: 1,
		Group: 28,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+176, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *HiddenCacheGizmoData) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("FDisableNonFriendlyOperation", &t.FDisableNonFriendlyOperation, d...)
	cb.Do("FWalkToCenter", &t.FWalkToCenter, d...)
	cb.Do("FGizmoStartsDisabled", &t.FGizmoStartsDisabled, d...)
	cb.Do("FUseStringListName", &t.FUseStringListName, d...)
	cb.Do("FForceMinimapIcon", &t.FForceMinimapIcon, d...)
	cb.Do("FlOperationRadius", &t.FlOperationRadius, d...)
	cb.Do("Unk_d0b1df5", &t.Unk_d0b1df5, d...)
	cb.Do("FlGizmoUseTime", &t.FlGizmoUseTime, d...)
	cb.Do("SnoChannelingEffect", &t.SnoChannelingEffect, d...)
	cb.Do("Unk_2767229", &t.Unk_2767229, d...)
	cb.Do("FGizmoShowProgressBar", &t.FGizmoShowProgressBar, d...)
	cb.Do("Unk_6d9ebe1", &t.Unk_6d9ebe1, d...)
	cb.Do("Unk_5456245", &t.Unk_5456245, d...)
	cb.Do("Unk_af5815a", &t.Unk_af5815a, d...)
	cb.Do("SnoOnClickEffect", &t.SnoOnClickEffect, d...)
	cb.Do("SnoPickedUpEffect", &t.SnoPickedUpEffect, d...)
	cb.Do("SnoDropOnGroundEffect", &t.SnoDropOnGroundEffect, d...)
	cb.Do("TConditionData", &t.TConditionData, d...)
	cb.Do("SnoPowerOperator", &t.SnoPowerOperator, d...)
	cb.Do("SnoPowerOperate", &t.SnoPowerOperate, d...)
	cb.Do("SnoPowerOperatorActive", &t.SnoPowerOperatorActive, d...)
	cb.Do("SnoPowerOperateActive", &t.SnoPowerOperateActive, d...)
	cb.Do("Unk_359810e", &t.Unk_359810e, d...)
	cb.Do("NCooldown", &t.NCooldown, d...)
	cb.Do("Unk_9c8478e", &t.Unk_9c8478e, d...)
	cb.Do("Unk_d45ed2d", &t.Unk_d45ed2d, d...)
	cb.Do("Unk_f6b20b7", &t.Unk_f6b20b7, d...)
	cb.Do("Unk_54513b8", &t.Unk_54513b8, d...)
	cb.Do("Unk_fd1f378", &t.Unk_fd1f378, d...)
	cb.Do("HGizmoOperateFlavorTextMsgLabel", &t.HGizmoOperateFlavorTextMsgLabel, d...)
	cb.Do("HGizmoOperateDescriptionMsgLabel", &t.HGizmoOperateDescriptionMsgLabel, d...)
	cb.Do("FlGizmoOperateOffset", &t.FlGizmoOperateOffset, d...)
	cb.Do("Unk_ab58cd3", &t.Unk_ab58cd3, d...)
	cb.Do("Unk_91a3966", &t.Unk_91a3966, d...)
	cb.Do("HGizmoChannelingLabel", &t.HGizmoChannelingLabel, d...)
	cb.Do("Unk_4be4371", &t.Unk_4be4371, d...)
	cb.Do("SnoTreasureClass", &t.SnoTreasureClass, d...)
	cb.Do("NXPTier", &t.NXPTier, d...)
	cb.Do("Unk_3592260", &t.Unk_3592260, d...)
	cb.Do("GbidHiddenCache", &t.GbidHiddenCache, d...)
}

type PhaseJumpAnimEnd struct {
	// Inherits PhaseJumpBase
	// Inherits PolymorphicBase
	DwType       DT_UINT
	Unk_2de4987  DT_UINT
	ArConditions DT_POLYMORPHIC_VARIABLEARRAY[*DT_INT64]
	BEnd         DT_INT
	DwPad        DT_UINT
}

func (t *PhaseJumpAnimEnd) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_2de4987, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ArConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.BEnd, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+56, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PhaseJumpAnimEnd) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("Unk_2de4987", &t.Unk_2de4987, d...)
	cb.Do("ArConditions", &t.ArConditions, d...)
	cb.Do("BEnd", &t.BEnd, d...)
	cb.Do("DwPad", &t.DwPad, d...)
}

type TriggerEventCameraStayOnSpline struct {
	// Inherits TriggerEventRangedDuration
	// Inherits TriggerEvent
	// Inherits PolymorphicBase
	DwType                        DT_UINT
	TConditions                   TriggerConditions
	FGenerated                    DT_INT
	Unk_6cba752                   DT_INT
	DwParentActorID               DT_UINT
	TDuration                     DT_FLOAT
	DwTriggerFlags                DT_UINT
	DwTriggerFlagsEx              DT_UINT
	TCleanup                      TriggerCleanup
	Unk_49e9257                   DT_INT
	Unk_5490979                   DT_INT
	DwPad                         DT_UINT
	SzSplineName                  DT_UINT
	Unk_30b49c2                   DT_ENUM
	Unk_8781d26                   DT_UINT
	Unk_9a31592                   DT_UINT
	FlFirstPercent                DT_FLOAT
	FlLastPercent                 DT_FLOAT
	FlFirstDistance               DT_FLOAT
	FlLastDistance                DT_FLOAT
	Unk_71c05df                   DT_INT
	Unk_325b1ab                   DT_INT
	EProximityType                DT_ENUM
	SzProximityLocatorName        DT_UINT
	THardpointLinkProximityObject HardpointLink
	DwProximityObjectID           DT_UINT
	VecProximityOffset            DT_VECTOR3D
	Unk_8ff6495                   DT_INT
	Unk_983a265                   DT_INT
	FlNodeDistance                DT_FLOAT
	FlMaxMovementSpeed            DT_FLOAT
	Unk_802b7b                    DT_INT
	SnoObserverForOrientation     DT_SNO
	EOrientationMode              DT_ENUM
	ELookAtTargetType             DT_ENUM
	Unk_6101673                   DT_UINT
	THardpointLinkLookAtTarget    HardpointLink
	DwLookAtTargetID              DT_UINT
	VecTargetOffset               DT_VECTOR3D
	EMicrophoneMode               DT_ENUM
	VecMicrophoneOffset           DT_VECTOR3D
	EBlendEasing                  DT_ENUM
}

func (t *TriggerEventCameraStayOnSpline) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.FGenerated, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_6cba752, r, &Options{Flags: 16}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.DwParentActorID, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.TDuration, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.DwTriggerFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.DwTriggerFlagsEx, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.TCleanup, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+116, &t.Unk_49e9257, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.Unk_5490979, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+124, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.SzSplineName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+132, &t.Unk_30b49c2, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+136, &t.Unk_8781d26, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+140, &t.Unk_9a31592, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+144, &t.FlFirstPercent, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+148, &t.FlLastPercent, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+152, &t.FlFirstDistance, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+156, &t.FlLastDistance, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+160, &t.Unk_71c05df, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+164, &t.Unk_325b1ab, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+168, &t.EProximityType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+172, &t.SzProximityLocatorName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+176, &t.THardpointLinkProximityObject, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+184, &t.DwProximityObjectID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+188, &t.VecProximityOffset, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+200, &t.Unk_8ff6495, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+204, &t.Unk_983a265, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+208, &t.FlNodeDistance, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+212, &t.FlMaxMovementSpeed, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+216, &t.Unk_802b7b, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+220, &t.SnoObserverForOrientation, r, &Options{
		Flags: 1,
		Group: 26,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+224, &t.EOrientationMode, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+228, &t.ELookAtTargetType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+232, &t.Unk_6101673, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+236, &t.THardpointLinkLookAtTarget, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+244, &t.DwLookAtTargetID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+248, &t.VecTargetOffset, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+260, &t.EMicrophoneMode, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+264, &t.VecMicrophoneOffset, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+276, &t.EBlendEasing, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+280, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TriggerEventCameraStayOnSpline) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("TConditions", &t.TConditions, d...)
	cb.Do("FGenerated", &t.FGenerated, d...)
	cb.Do("Unk_6cba752", &t.Unk_6cba752, d...)
	cb.Do("DwParentActorID", &t.DwParentActorID, d...)
	cb.Do("TDuration", &t.TDuration, d...)
	cb.Do("DwTriggerFlags", &t.DwTriggerFlags, d...)
	cb.Do("DwTriggerFlagsEx", &t.DwTriggerFlagsEx, d...)
	cb.Do("TCleanup", &t.TCleanup, d...)
	cb.Do("Unk_49e9257", &t.Unk_49e9257, d...)
	cb.Do("Unk_5490979", &t.Unk_5490979, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("SzSplineName", &t.SzSplineName, d...)
	cb.Do("Unk_30b49c2", &t.Unk_30b49c2, d...)
	cb.Do("Unk_8781d26", &t.Unk_8781d26, d...)
	cb.Do("Unk_9a31592", &t.Unk_9a31592, d...)
	cb.Do("FlFirstPercent", &t.FlFirstPercent, d...)
	cb.Do("FlLastPercent", &t.FlLastPercent, d...)
	cb.Do("FlFirstDistance", &t.FlFirstDistance, d...)
	cb.Do("FlLastDistance", &t.FlLastDistance, d...)
	cb.Do("Unk_71c05df", &t.Unk_71c05df, d...)
	cb.Do("Unk_325b1ab", &t.Unk_325b1ab, d...)
	cb.Do("EProximityType", &t.EProximityType, d...)
	cb.Do("SzProximityLocatorName", &t.SzProximityLocatorName, d...)
	cb.Do("THardpointLinkProximityObject", &t.THardpointLinkProximityObject, d...)
	cb.Do("DwProximityObjectID", &t.DwProximityObjectID, d...)
	cb.Do("VecProximityOffset", &t.VecProximityOffset, d...)
	cb.Do("Unk_8ff6495", &t.Unk_8ff6495, d...)
	cb.Do("Unk_983a265", &t.Unk_983a265, d...)
	cb.Do("FlNodeDistance", &t.FlNodeDistance, d...)
	cb.Do("FlMaxMovementSpeed", &t.FlMaxMovementSpeed, d...)
	cb.Do("Unk_802b7b", &t.Unk_802b7b, d...)
	cb.Do("SnoObserverForOrientation", &t.SnoObserverForOrientation, d...)
	cb.Do("EOrientationMode", &t.EOrientationMode, d...)
	cb.Do("ELookAtTargetType", &t.ELookAtTargetType, d...)
	cb.Do("Unk_6101673", &t.Unk_6101673, d...)
	cb.Do("THardpointLinkLookAtTarget", &t.THardpointLinkLookAtTarget, d...)
	cb.Do("DwLookAtTargetID", &t.DwLookAtTargetID, d...)
	cb.Do("VecTargetOffset", &t.VecTargetOffset, d...)
	cb.Do("EMicrophoneMode", &t.EMicrophoneMode, d...)
	cb.Do("VecMicrophoneOffset", &t.VecMicrophoneOffset, d...)
	cb.Do("EBlendEasing", &t.EBlendEasing, d...)
}

type ParticleDefinition struct {
	EType                             DT_ENUM
	DwFlags                           DT_UINT
	DwFlagsEx                         DT_UINT
	DwFlagsEx2                        DT_UINT
	TSystemDuration                   DT_FLOAT
	TOutroDuration                    DT_FLOAT
	TPrepumpDuration                  DT_FLOAT
	ERenderDistance                   DT_ENUM
	Unk_d59152e                       DT_ENUM
	TSystemDurationScalar             InterpolationScalar
	PathSystemScale                   DT_VARIABLEARRAY[*InterpolationPath_float]
	PathSystemCount                   DT_VARIABLEARRAY[*InterpolationPath_int32]
	PathSystemBurst                   DT_VARIABLEARRAY[*InterpolationPath_int32]
	PathSystemAlpha                   DT_VARIABLEARRAY[*InterpolationPath_float]
	PathSystemAlphaAux                DT_VARIABLEARRAY[*InterpolationPath_float]
	PathParticleDuration              DT_VARIABLEARRAY[*InterpolationPath_float]
	PathInitialScale                  DT_VARIABLEARRAY[*InterpolationPath_float]
	PathInitialSourceRelativeSpread   DT_VARIABLEARRAY[*InterpolationPath_float]
	PathInitialSourceRelativeVelocity DT_VARIABLEARRAY[*VectorPath]
	PathInitialWorldRelativeVelocity  DT_VARIABLEARRAY[*VectorPath]
	PathInitialAngularVelocity        DT_VARIABLEARRAY[*VectorPath]
	PathSystemSpawnRate               DT_VARIABLEARRAY[*InterpolationPath_float]
	PathSystemSpeedSpawnRate          DT_VARIABLEARRAY[*InterpolationPath_float]
	PathSystemSpeedDurationFactor     DT_VARIABLEARRAY[*InterpolationPath_float]
	PathSystemSpeedFraction           DT_VARIABLEARRAY[*InterpolationPath_float]
	PathNoiseFrequency                DT_VARIABLEARRAY[*InterpolationPath_float]
	PathNoiseSmoothness               DT_VARIABLEARRAY[*InterpolationPath_float]
	PathNoiseAmplitude                DT_VARIABLEARRAY[*InterpolationPath_float]
	PathNoiseAmplitudeRange           DT_VARIABLEARRAY[*VectorPath]
	PathCameraOffset                  DT_VARIABLEARRAY[*InterpolationPath_float]
	SnoMaterial                       DT_SNO
	SnoHoudini                        DT_SNO
	SnoPhysics                        DT_SNO
	SnoSpawnOnCollision               DT_SNO
	FlNormalBias                      DT_FLOAT
	FlWindFactor                      DT_FLOAT
	FlExplosionFactor                 DT_FLOAT
	FlExplosionFriction               DT_FLOAT
	FlMass                            DT_FLOAT
	DwMaxSystems                      DT_UINT
	Unk_12ce589                       DT_FLOAT
	FlClutterZOffset                  DT_FLOAT
	SnoActor                          DT_SNO
	TLookLink                         LookLink
	DwShaderMapOverride               DT_UINT
	Unk_fabd80a                       bcQuat
	PtEmitter                         DT_POLYMORPHIC_VARIABLEARRAY[*EmitterDataBase]
	PathParticleColor                 DT_VARIABLEARRAY[*InterpolationPath_RGBAColor]
	PathParticleColorIntensity        DT_VARIABLEARRAY[*InterpolationPath_float]
	PathParticleAlpha                 DT_VARIABLEARRAY[*InterpolationPath_float]
	PathParticleAlphaAux              DT_VARIABLEARRAY[*InterpolationPath_float]
	PathParticleDistortionFactor      DT_VARIABLEARRAY[*InterpolationPath_float]
	Unk_68b6b45                       DT_VARIABLEARRAY[*InterpolationPath_float]
	PathParticleScale                 DT_VARIABLEARRAY[*InterpolationPath_float]
	Unk_b92bb9a                       DT_VARIABLEARRAY[*VectorPath]
	PathAngularPosition               DT_VARIABLEARRAY[*InterpolationPath_float]
	PathAngularVelocity               DT_VARIABLEARRAY[*InterpolationPath_float]
	PathOrientationVelocity           DT_VARIABLEARRAY[*InterpolationPath_float]
	PathOrientationVelocity2          DT_VARIABLEARRAY[*InterpolationPath_float]
	PathOrientationPosition           DT_VARIABLEARRAY[*InterpolationPath_float]
	PathOrientationPosition2          DT_VARIABLEARRAY[*InterpolationPath_float]
	PathOrientationAxis               DT_VARIABLEARRAY[*VectorPath]
	PathOrientationAxis2              DT_VARIABLEARRAY[*VectorPath]
	Unk_a8c5217                       DT_VARIABLEARRAY[*InterpolationPath_float]
	PathMotionCylinderRadialPos       DT_VARIABLEARRAY[*InterpolationPath_float]
	PathMotionCylinderRadialVel       DT_VARIABLEARRAY[*InterpolationPath_float]
	PathMotionCylinderAngleVel        DT_VARIABLEARRAY[*InterpolationPath_float]
	PathMotionCylinderAxis            DT_VARIABLEARRAY[*VectorPath]
	PathMotionSphereRadialPos         DT_VARIABLEARRAY[*InterpolationPath_float]
	PathMotionSphereRadialVel         DT_VARIABLEARRAY[*InterpolationPath_float]
	PathMotionWorldPos                DT_VARIABLEARRAY[*VectorPath]
	PathMotionWorldVel                DT_VARIABLEARRAY[*VectorPath]
	PathMotionWorldAcc                DT_VARIABLEARRAY[*VectorPath]
	PathMotionRelativeCartesianPos    DT_VARIABLEARRAY[*VectorPath]
	PathMotionRelativeCartesianVel    DT_VARIABLEARRAY[*VectorPath]
	PathMotionRelativeCartesianAcc    DT_VARIABLEARRAY[*VectorPath]
	PathMotionAttractorVel            DT_VARIABLEARRAY[*InterpolationPath_float]
	PathMotionAttractorPos            DT_VARIABLEARRAY[*InterpolationPath_float]
	PathMotionAttractorOri            DT_VARIABLEARRAY[*InterpolationPath_float]
	Unk_afccc6                        DT_VARIABLEARRAY[*VectorPath]
	Unk_8dc0a2c                       DT_VARIABLEARRAY[*VectorPath]
	NFacing                           DT_ENUM
	EAlignment                        DT_ENUM
	WdBoundingRadius                  DT_FLOAT
	Unk_a79a409                       DT_FLOAT
	Unk_daaa964                       DT_FLOAT
	DwMinSize                         DT_UINT
	DwMaxSize                         DT_UINT
	Unk_3e0459a                       DT_FLOAT
	Unk_a0877a9                       DT_FLOAT
	Unk_63d7722                       DT_FLOAT
	SnoVectorField                    DT_SNO
	VecVectorFieldDim                 DT_VECTOR3D
	EVectorFieldAddressMode           DT_ENUM
	FlVectorFieldScrollSpeed          DT_FLOAT
	ArrFlowIdenticalVectorField       DT_VARIABLEARRAY[*InterpolationPath_float]
	Unk_cddc4fd                       DT_VARIABLEARRAY[*VectorPath]
	PathVectorFieldRotation           DT_VARIABLEARRAY[*VectorPath]
	Unk_da1d404                       DT_FLOAT
	Unk_5a7f188                       DT_FLOAT
}

func (t *ParticleDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.EType, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwFlags, r, &Options{Flags: 8912896}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.DwFlagsEx, r, &Options{Flags: 8912896}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwFlagsEx2, r, &Options{Flags: 8912896}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.TSystemDuration, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.TOutroDuration, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.TPrepumpDuration, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.ERenderDistance, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.Unk_d59152e, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.TSystemDurationScalar, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.PathSystemScale, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.PathSystemCount, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.PathSystemBurst, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.PathSystemAlpha, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+144, &t.PathSystemAlphaAux, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+160, &t.PathParticleDuration, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+176, &t.PathInitialScale, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+192, &t.PathInitialSourceRelativeSpread, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+208, &t.PathInitialSourceRelativeVelocity, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+224, &t.PathInitialWorldRelativeVelocity, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+240, &t.PathInitialAngularVelocity, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+256, &t.PathSystemSpawnRate, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+272, &t.PathSystemSpeedSpawnRate, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+288, &t.PathSystemSpeedDurationFactor, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+304, &t.PathSystemSpeedFraction, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+320, &t.PathNoiseFrequency, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+336, &t.PathNoiseSmoothness, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+352, &t.PathNoiseAmplitude, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+368, &t.PathNoiseAmplitudeRange, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+384, &t.PathCameraOffset, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+400, &t.SnoMaterial, r, &Options{
		Flags: 8388608,
		Group: 57,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+404, &t.SnoHoudini, r, &Options{
		Flags: 8388608,
		Group: 101,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+408, &t.SnoPhysics, r, &Options{
		Flags: 8388608,
		Group: 28,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+412, &t.SnoSpawnOnCollision, r, &Options{
		Flags: 8388608,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+416, &t.FlNormalBias, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+420, &t.FlWindFactor, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+424, &t.FlExplosionFactor, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+428, &t.FlExplosionFriction, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+432, &t.FlMass, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+436, &t.DwMaxSystems, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+440, &t.Unk_12ce589, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+444, &t.FlClutterZOffset, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+448, &t.SnoActor, r, &Options{
		Flags: 8388608,
		Group: 1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+452, &t.TLookLink, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+456, &t.DwShaderMapOverride, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+460, &t.Unk_fabd80a, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+480, &t.PtEmitter, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+504, &t.PathParticleColor, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+520, &t.PathParticleColorIntensity, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+536, &t.PathParticleAlpha, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+552, &t.PathParticleAlphaAux, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+568, &t.PathParticleDistortionFactor, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+584, &t.Unk_68b6b45, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+600, &t.PathParticleScale, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+616, &t.Unk_b92bb9a, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+632, &t.PathAngularPosition, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+648, &t.PathAngularVelocity, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+664, &t.PathOrientationVelocity, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+680, &t.PathOrientationVelocity2, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+696, &t.PathOrientationPosition, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+712, &t.PathOrientationPosition2, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+728, &t.PathOrientationAxis, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+744, &t.PathOrientationAxis2, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+760, &t.Unk_a8c5217, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+776, &t.PathMotionCylinderRadialPos, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+792, &t.PathMotionCylinderRadialVel, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+808, &t.PathMotionCylinderAngleVel, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+824, &t.PathMotionCylinderAxis, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+840, &t.PathMotionSphereRadialPos, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+856, &t.PathMotionSphereRadialVel, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+872, &t.PathMotionWorldPos, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+888, &t.PathMotionWorldVel, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+904, &t.PathMotionWorldAcc, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+920, &t.PathMotionRelativeCartesianPos, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+936, &t.PathMotionRelativeCartesianVel, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+952, &t.PathMotionRelativeCartesianAcc, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+968, &t.PathMotionAttractorVel, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+984, &t.PathMotionAttractorPos, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1000, &t.PathMotionAttractorOri, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1016, &t.Unk_afccc6, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1032, &t.Unk_8dc0a2c, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1048, &t.NFacing, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1052, &t.EAlignment, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1056, &t.WdBoundingRadius, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1060, &t.Unk_a79a409, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1064, &t.Unk_daaa964, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1068, &t.DwMinSize, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1072, &t.DwMaxSize, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1076, &t.Unk_3e0459a, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1080, &t.Unk_a0877a9, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1084, &t.Unk_63d7722, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1088, &t.SnoVectorField, r, &Options{
		Flags: 8388608,
		Group: 88,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1092, &t.VecVectorFieldDim, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1104, &t.EVectorFieldAddressMode, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1108, &t.FlVectorFieldScrollSpeed, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1112, &t.ArrFlowIdenticalVectorField, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1128, &t.Unk_cddc4fd, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1144, &t.PathVectorFieldRotation, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1160, &t.Unk_da1d404, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1164, &t.Unk_5a7f188, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if _, err := r.Seek(p+1168, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ParticleDefinition) Walk(cb WalkCallback, d ...any) {
	cb.Do("EType", &t.EType, d...)
	cb.Do("DwFlags", &t.DwFlags, d...)
	cb.Do("DwFlagsEx", &t.DwFlagsEx, d...)
	cb.Do("DwFlagsEx2", &t.DwFlagsEx2, d...)
	cb.Do("TSystemDuration", &t.TSystemDuration, d...)
	cb.Do("TOutroDuration", &t.TOutroDuration, d...)
	cb.Do("TPrepumpDuration", &t.TPrepumpDuration, d...)
	cb.Do("ERenderDistance", &t.ERenderDistance, d...)
	cb.Do("Unk_d59152e", &t.Unk_d59152e, d...)
	cb.Do("TSystemDurationScalar", &t.TSystemDurationScalar, d...)
	cb.Do("PathSystemScale", &t.PathSystemScale, d...)
	cb.Do("PathSystemCount", &t.PathSystemCount, d...)
	cb.Do("PathSystemBurst", &t.PathSystemBurst, d...)
	cb.Do("PathSystemAlpha", &t.PathSystemAlpha, d...)
	cb.Do("PathSystemAlphaAux", &t.PathSystemAlphaAux, d...)
	cb.Do("PathParticleDuration", &t.PathParticleDuration, d...)
	cb.Do("PathInitialScale", &t.PathInitialScale, d...)
	cb.Do("PathInitialSourceRelativeSpread", &t.PathInitialSourceRelativeSpread, d...)
	cb.Do("PathInitialSourceRelativeVelocity", &t.PathInitialSourceRelativeVelocity, d...)
	cb.Do("PathInitialWorldRelativeVelocity", &t.PathInitialWorldRelativeVelocity, d...)
	cb.Do("PathInitialAngularVelocity", &t.PathInitialAngularVelocity, d...)
	cb.Do("PathSystemSpawnRate", &t.PathSystemSpawnRate, d...)
	cb.Do("PathSystemSpeedSpawnRate", &t.PathSystemSpeedSpawnRate, d...)
	cb.Do("PathSystemSpeedDurationFactor", &t.PathSystemSpeedDurationFactor, d...)
	cb.Do("PathSystemSpeedFraction", &t.PathSystemSpeedFraction, d...)
	cb.Do("PathNoiseFrequency", &t.PathNoiseFrequency, d...)
	cb.Do("PathNoiseSmoothness", &t.PathNoiseSmoothness, d...)
	cb.Do("PathNoiseAmplitude", &t.PathNoiseAmplitude, d...)
	cb.Do("PathNoiseAmplitudeRange", &t.PathNoiseAmplitudeRange, d...)
	cb.Do("PathCameraOffset", &t.PathCameraOffset, d...)
	cb.Do("SnoMaterial", &t.SnoMaterial, d...)
	cb.Do("SnoHoudini", &t.SnoHoudini, d...)
	cb.Do("SnoPhysics", &t.SnoPhysics, d...)
	cb.Do("SnoSpawnOnCollision", &t.SnoSpawnOnCollision, d...)
	cb.Do("FlNormalBias", &t.FlNormalBias, d...)
	cb.Do("FlWindFactor", &t.FlWindFactor, d...)
	cb.Do("FlExplosionFactor", &t.FlExplosionFactor, d...)
	cb.Do("FlExplosionFriction", &t.FlExplosionFriction, d...)
	cb.Do("FlMass", &t.FlMass, d...)
	cb.Do("DwMaxSystems", &t.DwMaxSystems, d...)
	cb.Do("Unk_12ce589", &t.Unk_12ce589, d...)
	cb.Do("FlClutterZOffset", &t.FlClutterZOffset, d...)
	cb.Do("SnoActor", &t.SnoActor, d...)
	cb.Do("TLookLink", &t.TLookLink, d...)
	cb.Do("DwShaderMapOverride", &t.DwShaderMapOverride, d...)
	cb.Do("Unk_fabd80a", &t.Unk_fabd80a, d...)
	cb.Do("PtEmitter", &t.PtEmitter, d...)
	cb.Do("PathParticleColor", &t.PathParticleColor, d...)
	cb.Do("PathParticleColorIntensity", &t.PathParticleColorIntensity, d...)
	cb.Do("PathParticleAlpha", &t.PathParticleAlpha, d...)
	cb.Do("PathParticleAlphaAux", &t.PathParticleAlphaAux, d...)
	cb.Do("PathParticleDistortionFactor", &t.PathParticleDistortionFactor, d...)
	cb.Do("Unk_68b6b45", &t.Unk_68b6b45, d...)
	cb.Do("PathParticleScale", &t.PathParticleScale, d...)
	cb.Do("Unk_b92bb9a", &t.Unk_b92bb9a, d...)
	cb.Do("PathAngularPosition", &t.PathAngularPosition, d...)
	cb.Do("PathAngularVelocity", &t.PathAngularVelocity, d...)
	cb.Do("PathOrientationVelocity", &t.PathOrientationVelocity, d...)
	cb.Do("PathOrientationVelocity2", &t.PathOrientationVelocity2, d...)
	cb.Do("PathOrientationPosition", &t.PathOrientationPosition, d...)
	cb.Do("PathOrientationPosition2", &t.PathOrientationPosition2, d...)
	cb.Do("PathOrientationAxis", &t.PathOrientationAxis, d...)
	cb.Do("PathOrientationAxis2", &t.PathOrientationAxis2, d...)
	cb.Do("Unk_a8c5217", &t.Unk_a8c5217, d...)
	cb.Do("PathMotionCylinderRadialPos", &t.PathMotionCylinderRadialPos, d...)
	cb.Do("PathMotionCylinderRadialVel", &t.PathMotionCylinderRadialVel, d...)
	cb.Do("PathMotionCylinderAngleVel", &t.PathMotionCylinderAngleVel, d...)
	cb.Do("PathMotionCylinderAxis", &t.PathMotionCylinderAxis, d...)
	cb.Do("PathMotionSphereRadialPos", &t.PathMotionSphereRadialPos, d...)
	cb.Do("PathMotionSphereRadialVel", &t.PathMotionSphereRadialVel, d...)
	cb.Do("PathMotionWorldPos", &t.PathMotionWorldPos, d...)
	cb.Do("PathMotionWorldVel", &t.PathMotionWorldVel, d...)
	cb.Do("PathMotionWorldAcc", &t.PathMotionWorldAcc, d...)
	cb.Do("PathMotionRelativeCartesianPos", &t.PathMotionRelativeCartesianPos, d...)
	cb.Do("PathMotionRelativeCartesianVel", &t.PathMotionRelativeCartesianVel, d...)
	cb.Do("PathMotionRelativeCartesianAcc", &t.PathMotionRelativeCartesianAcc, d...)
	cb.Do("PathMotionAttractorVel", &t.PathMotionAttractorVel, d...)
	cb.Do("PathMotionAttractorPos", &t.PathMotionAttractorPos, d...)
	cb.Do("PathMotionAttractorOri", &t.PathMotionAttractorOri, d...)
	cb.Do("Unk_afccc6", &t.Unk_afccc6, d...)
	cb.Do("Unk_8dc0a2c", &t.Unk_8dc0a2c, d...)
	cb.Do("NFacing", &t.NFacing, d...)
	cb.Do("EAlignment", &t.EAlignment, d...)
	cb.Do("WdBoundingRadius", &t.WdBoundingRadius, d...)
	cb.Do("Unk_a79a409", &t.Unk_a79a409, d...)
	cb.Do("Unk_daaa964", &t.Unk_daaa964, d...)
	cb.Do("DwMinSize", &t.DwMinSize, d...)
	cb.Do("DwMaxSize", &t.DwMaxSize, d...)
	cb.Do("Unk_3e0459a", &t.Unk_3e0459a, d...)
	cb.Do("Unk_a0877a9", &t.Unk_a0877a9, d...)
	cb.Do("Unk_63d7722", &t.Unk_63d7722, d...)
	cb.Do("SnoVectorField", &t.SnoVectorField, d...)
	cb.Do("VecVectorFieldDim", &t.VecVectorFieldDim, d...)
	cb.Do("EVectorFieldAddressMode", &t.EVectorFieldAddressMode, d...)
	cb.Do("FlVectorFieldScrollSpeed", &t.FlVectorFieldScrollSpeed, d...)
	cb.Do("ArrFlowIdenticalVectorField", &t.ArrFlowIdenticalVectorField, d...)
	cb.Do("Unk_cddc4fd", &t.Unk_cddc4fd, d...)
	cb.Do("PathVectorFieldRotation", &t.PathVectorFieldRotation, d...)
	cb.Do("Unk_da1d404", &t.Unk_da1d404, d...)
	cb.Do("Unk_5a7f188", &t.Unk_5a7f188, d...)
}

type dmClothFaceOldMirror struct {
	Normal    DT_VECTOR4D
	Area      DT_FLOAT
	I1        DT_WORD
	I2        DT_WORD
	I3        DT_WORD
	Breakable DT_WORD
	Padding   DT_FIXEDARRAY[*DT_WORD]
}

func (t *dmClothFaceOldMirror) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Normal, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Area, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.I1, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+22, &t.I2, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.I3, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+26, &t.Breakable, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.Padding, r, &Options{ArrayLength: 2}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *dmClothFaceOldMirror) Walk(cb WalkCallback, d ...any) {
	cb.Do("Normal", &t.Normal, d...)
	cb.Do("Area", &t.Area, d...)
	cb.Do("I1", &t.I1, d...)
	cb.Do("I2", &t.I2, d...)
	cb.Do("I3", &t.I3, d...)
	cb.Do("Breakable", &t.Breakable, d...)
	cb.Do("Padding", &t.Padding, d...)
}

type TriggerEventSetWeaponVisibility struct {
	// Inherits TriggerEvent
	// Inherits PolymorphicBase
	DwType          DT_UINT
	DwPad           DT_UINT
	TConditions     TriggerConditions
	FGenerated      DT_INT
	Unk_6cba752     DT_INT
	DwParentActorID DT_UINT
	Unk_279aa5a     DT_INT
	DwActorID       DT_UINT
	BHideMainHand   DT_INT
	BHideOffhand    DT_INT
	BHideSheathed   DT_INT
}

func (t *TriggerEventSetWeaponVisibility) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.FGenerated, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_6cba752, r, &Options{Flags: 16}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.DwParentActorID, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.Unk_279aa5a, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.DwActorID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.BHideMainHand, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.BHideOffhand, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.BHideSheathed, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+104, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TriggerEventSetWeaponVisibility) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("TConditions", &t.TConditions, d...)
	cb.Do("FGenerated", &t.FGenerated, d...)
	cb.Do("Unk_6cba752", &t.Unk_6cba752, d...)
	cb.Do("DwParentActorID", &t.DwParentActorID, d...)
	cb.Do("Unk_279aa5a", &t.Unk_279aa5a, d...)
	cb.Do("DwActorID", &t.DwActorID, d...)
	cb.Do("BHideMainHand", &t.BHideMainHand, d...)
	cb.Do("BHideOffhand", &t.BHideOffhand, d...)
	cb.Do("BHideSheathed", &t.BHideSheathed, d...)
}

type SonyConsoleAwardDefinition struct {
	// Inherits ConsoleAwardDefinition
	// Inherits PolymorphicBase
	DwType          DT_UINT
	UProfileAwardId DT_UINT
	DwPad           DT_UINT
}

func (t *SonyConsoleAwardDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.UProfileAwardId, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *SonyConsoleAwardDefinition) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("UProfileAwardId", &t.UProfileAwardId, d...)
	cb.Do("DwPad", &t.DwPad, d...)
}

type LocalEventSpawnerDataMessage struct {
	THeader              RequiredMessageHeader
	TLocalEventQuests    DT_FIXEDARRAY[*DT_SNO]
	TLocalEventLocations DT_FIXEDARRAY[*DT_VECTOR3D]
	BLocalEventSpawned   DT_FIXEDARRAY[*DT_INT]
	SnoWorld             DT_SNO
}

func (t *LocalEventSpawnerDataMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TLocalEventQuests, r, &Options{
		ArrayLength: 16,
		Flags:       9,
		Group:       31,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.TLocalEventLocations, r, &Options{
		ArrayLength: 16,
		Flags:       8,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+280, &t.BLocalEventSpawned, r, &Options{
		ArrayLength: 16,
		Flags:       8,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+348, &t.SnoWorld, r, &Options{
		Flags: 1,
		Group: 48,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+352, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *LocalEventSpawnerDataMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("TLocalEventQuests", &t.TLocalEventQuests, d...)
	cb.Do("TLocalEventLocations", &t.TLocalEventLocations, d...)
	cb.Do("BLocalEventSpawned", &t.BLocalEventSpawned, d...)
	cb.Do("SnoWorld", &t.SnoWorld, d...)
}

type StoryboardValueNodeCollection_float struct {
	ArNodes     DT_VARIABLEARRAY[*StoryboardValueNode_float]
	Unk_36cc429 DT_VARIABLEARRAY[*DT_INT]
}

func (t *StoryboardValueNodeCollection_float) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.ArNodes, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_36cc429, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *StoryboardValueNodeCollection_float) Walk(cb WalkCallback, d ...any) {
	cb.Do("ArNodes", &t.ArNodes, d...)
	cb.Do("Unk_36cc429", &t.Unk_36cc429, d...)
}

type AnimPreplayData struct {
	DwAnimPrePlayDataFlags  DT_UINT
	DwServerTimeAnimStarted DT_UINT
	DwSyncedSeed            DT_UINT
	FlPowerAnimSpeed        DT_OPTIONAL[*DT_FLOAT]
}

func (t *AnimPreplayData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.DwAnimPrePlayDataFlags, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.DwServerTimeAnimStarted, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwSyncedSeed, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.FlPowerAnimSpeed, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+20, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *AnimPreplayData) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwAnimPrePlayDataFlags", &t.DwAnimPrePlayDataFlags, d...)
	cb.Do("DwServerTimeAnimStarted", &t.DwServerTimeAnimStarted, d...)
	cb.Do("DwSyncedSeed", &t.DwSyncedSeed, d...)
	cb.Do("FlPowerAnimSpeed", &t.FlPowerAnimSpeed, d...)
}

type ConversationSpeakerSwitchNode struct {
	// Inherits ConversationScopeNode
	// Inherits ConversationTreeNode
	// Inherits PolymorphicBase
	DwType         DT_UINT
	DwPad          DT_UINT
	DwNodeID       DT_UINT
	DwNextNodeID   DT_UINT
	DwParentNodeID DT_UINT
	PtNextNode     DT_INT64
	DwFlags        DT_UINT
	SzComment      DT_CSTRING[*DT_BYTE]
	ArChildNodes   DT_POLYMORPHIC_VARIABLEARRAY[*DT_INT64]
	SnoCondition   DT_SNO
	Unk_d8bf9e4    DT_INT
}

func (t *ConversationSpeakerSwitchNode) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.DwNodeID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwNextNodeID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.DwParentNodeID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.PtNextNode, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.DwFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.SzComment, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.ArChildNodes, r, &Options{Flags: 262145}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.SnoCondition, r, &Options{
		Flags: 1,
		Group: 51,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.Unk_d8bf9e4, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+96, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ConversationSpeakerSwitchNode) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("DwNodeID", &t.DwNodeID, d...)
	cb.Do("DwNextNodeID", &t.DwNextNodeID, d...)
	cb.Do("DwParentNodeID", &t.DwParentNodeID, d...)
	cb.Do("PtNextNode", &t.PtNextNode, d...)
	cb.Do("DwFlags", &t.DwFlags, d...)
	cb.Do("SzComment", &t.SzComment, d...)
	cb.Do("ArChildNodes", &t.ArChildNodes, d...)
	cb.Do("SnoCondition", &t.SnoCondition, d...)
	cb.Do("Unk_d8bf9e4", &t.Unk_d8bf9e4, d...)
}

type Hardpoint struct {
	TInfo                    HardpointInfo
	NBoneIndex               DT_INT
	BIgnoreParentOrientation DT_INT
	Transform                PRTransform
}

func (t *Hardpoint) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.TInfo, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.NBoneIndex, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.BIgnoreParentOrientation, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Transform, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+44, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Hardpoint) Walk(cb WalkCallback, d ...any) {
	cb.Do("TInfo", &t.TInfo, d...)
	cb.Do("NBoneIndex", &t.NBoneIndex, d...)
	cb.Do("BIgnoreParentOrientation", &t.BIgnoreParentOrientation, d...)
	cb.Do("Transform", &t.Transform, d...)
}

type StoryboardValueNodeCollection_bcVec2 struct {
	ArNodes     DT_VARIABLEARRAY[*StoryboardValueNode_bcVec2]
	Unk_36cc429 DT_VARIABLEARRAY[*DT_INT]
}

func (t *StoryboardValueNodeCollection_bcVec2) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.ArNodes, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_36cc429, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *StoryboardValueNodeCollection_bcVec2) Walk(cb WalkCallback, d ...any) {
	cb.Do("ArNodes", &t.ArNodes, d...)
	cb.Do("Unk_36cc429", &t.Unk_36cc429, d...)
}

type UIRadioButtonGroupStyleOptionalFieldMapDefaults struct {
	BWrapSelection DT_INT
	Unk_a27d70b    DT_INT
	Unk_f110353    DT_INT
	Unk_72a545b    DT_INT
	Unk_3f72ed9    DT_INT
	Unk_707e4bc    DT_INT
	Unk_a321618    DT_CSTRING[*DT_BYTE]
	Unk_74f3f9     DT_CSTRING[*DT_BYTE]
}

func (t *UIRadioButtonGroupStyleOptionalFieldMapDefaults) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.BWrapSelection, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.Unk_a27d70b, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.Unk_f110353, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.Unk_72a545b, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_3f72ed9, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.Unk_707e4bc, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_a321618, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.Unk_74f3f9, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+56, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *UIRadioButtonGroupStyleOptionalFieldMapDefaults) Walk(cb WalkCallback, d ...any) {
	cb.Do("BWrapSelection", &t.BWrapSelection, d...)
	cb.Do("Unk_a27d70b", &t.Unk_a27d70b, d...)
	cb.Do("Unk_f110353", &t.Unk_f110353, d...)
	cb.Do("Unk_72a545b", &t.Unk_72a545b, d...)
	cb.Do("Unk_3f72ed9", &t.Unk_3f72ed9, d...)
	cb.Do("Unk_707e4bc", &t.Unk_707e4bc, d...)
	cb.Do("Unk_a321618", &t.Unk_a321618, d...)
	cb.Do("Unk_74f3f9", &t.Unk_74f3f9, d...)
}

type LineSeg2D struct {
	Wr       Ray2D
	WdLength DT_FLOAT
}

func (t *LineSeg2D) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Wr, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.WdLength, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+20, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *LineSeg2D) Walk(cb WalkCallback, d ...any) {
	cb.Do("Wr", &t.Wr, d...)
	cb.Do("WdLength", &t.WdLength, d...)
}

type LineSeg3D struct {
	Wr       Ray3D
	WdLength DT_FLOAT
}

func (t *LineSeg3D) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Wr, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.WdLength, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+28, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *LineSeg3D) Walk(cb WalkCallback, d ...any) {
	cb.Do("Wr", &t.Wr, d...)
	cb.Do("WdLength", &t.WdLength, d...)
}

type Matrix3x3 struct {
	_11 DT_FLOAT
	_12 DT_FLOAT
	_13 DT_FLOAT
	_21 DT_FLOAT
	_22 DT_FLOAT
	_23 DT_FLOAT
	_31 DT_FLOAT
	_32 DT_FLOAT
	_33 DT_FLOAT
}

func (t *Matrix3x3) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t._11, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t._12, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t._13, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t._21, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t._22, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t._23, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t._31, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t._32, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t._33, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+36, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Matrix3x3) Walk(cb WalkCallback, d ...any) {
	cb.Do("_11", &t._11, d...)
	cb.Do("_12", &t._12, d...)
	cb.Do("_13", &t._13, d...)
	cb.Do("_21", &t._21, d...)
	cb.Do("_22", &t._22, d...)
	cb.Do("_23", &t._23, d...)
	cb.Do("_31", &t._31, d...)
	cb.Do("_32", &t._32, d...)
	cb.Do("_33", &t._33, d...)
}

type Matrix4x4 struct {
	_11 DT_FLOAT
	_12 DT_FLOAT
	_13 DT_FLOAT
	_14 DT_FLOAT
	_21 DT_FLOAT
	_22 DT_FLOAT
	_23 DT_FLOAT
	_24 DT_FLOAT
	_31 DT_FLOAT
	_32 DT_FLOAT
	_33 DT_FLOAT
	_34 DT_FLOAT
	_41 DT_FLOAT
	_42 DT_FLOAT
	_43 DT_FLOAT
	_44 DT_FLOAT
}

func (t *Matrix4x4) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t._11, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t._12, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t._13, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t._14, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t._21, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t._22, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t._23, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t._24, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t._31, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t._32, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t._33, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t._34, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t._41, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t._42, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t._43, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+60, &t._44, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+64, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Matrix4x4) Walk(cb WalkCallback, d ...any) {
	cb.Do("_11", &t._11, d...)
	cb.Do("_12", &t._12, d...)
	cb.Do("_13", &t._13, d...)
	cb.Do("_14", &t._14, d...)
	cb.Do("_21", &t._21, d...)
	cb.Do("_22", &t._22, d...)
	cb.Do("_23", &t._23, d...)
	cb.Do("_24", &t._24, d...)
	cb.Do("_31", &t._31, d...)
	cb.Do("_32", &t._32, d...)
	cb.Do("_33", &t._33, d...)
	cb.Do("_34", &t._34, d...)
	cb.Do("_41", &t._41, d...)
	cb.Do("_42", &t._42, d...)
	cb.Do("_43", &t._43, d...)
	cb.Do("_44", &t._44, d...)
}

type PeriodicBuffCallback struct {
	// Inherits BuffCallbackBase
	// Inherits PolymorphicBase
	DwType                DT_UINT
	DwPad                 DT_UINT
	SnoTriggerEffectGroup DT_SNO
	ArConditions          DT_POLYMORPHIC_VARIABLEARRAY[*DT_INT64]
	TInterval             DT_STRING_FORMULA
	TIntervalDelta        DT_STRING_FORMULA
	BTriggersImmediately  DT_INT
}

func (t *PeriodicBuffCallback) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoTriggerEffectGroup, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ArConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.TInterval, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.TIntervalDelta, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.BTriggersImmediately, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+120, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PeriodicBuffCallback) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("SnoTriggerEffectGroup", &t.SnoTriggerEffectGroup, d...)
	cb.Do("ArConditions", &t.ArConditions, d...)
	cb.Do("TInterval", &t.TInterval, d...)
	cb.Do("TIntervalDelta", &t.TIntervalDelta, d...)
	cb.Do("BTriggersImmediately", &t.BTriggersImmediately, d...)
}

type CollisionCapsuleToAppearance struct {
	TCapsule         CollisionCapsule
	NAppearanceIndex DT_INT
}

func (t *CollisionCapsuleToAppearance) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.TCapsule, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.NAppearanceIndex, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+68, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *CollisionCapsuleToAppearance) Walk(cb WalkCallback, d ...any) {
	cb.Do("TCapsule", &t.TCapsule, d...)
	cb.Do("NAppearanceIndex", &t.NAppearanceIndex, d...)
}

type RandomNumberGenerator struct {
	DwSeed  DT_UINT
	DwCarry DT_UINT
}

func (t *RandomNumberGenerator) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.DwSeed, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.DwCarry, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *RandomNumberGenerator) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwSeed", &t.DwSeed, d...)
	cb.Do("DwCarry", &t.DwCarry, d...)
}

type Type_81807f39 struct {
	// Inherits TriggerEventRangedDuration
	// Inherits TriggerEvent
	// Inherits PolymorphicBase
	DwType           DT_UINT
	TConditions      TriggerConditions
	FGenerated       DT_INT
	Unk_6cba752      DT_INT
	DwParentActorID  DT_UINT
	TDuration        DT_FLOAT
	DwTriggerFlags   DT_UINT
	DwTriggerFlagsEx DT_UINT
	TCleanup         TriggerCleanup
	Unk_49e9257      DT_INT
	Unk_5490979      DT_INT
	DwPad            DT_UINT
	Unk_7903775      DT_INT
	Unk_2c69731      DT_FLOAT
	AEndFOV          DT_FLOAT
	EBlendEasing     DT_ENUM
}

func (t *Type_81807f39) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.FGenerated, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_6cba752, r, &Options{Flags: 16}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.DwParentActorID, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.TDuration, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.DwTriggerFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.DwTriggerFlagsEx, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.TCleanup, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+116, &t.Unk_49e9257, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.Unk_5490979, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+124, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.Unk_7903775, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+132, &t.Unk_2c69731, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+136, &t.AEndFOV, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+140, &t.EBlendEasing, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+144, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_81807f39) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("TConditions", &t.TConditions, d...)
	cb.Do("FGenerated", &t.FGenerated, d...)
	cb.Do("Unk_6cba752", &t.Unk_6cba752, d...)
	cb.Do("DwParentActorID", &t.DwParentActorID, d...)
	cb.Do("TDuration", &t.TDuration, d...)
	cb.Do("DwTriggerFlags", &t.DwTriggerFlags, d...)
	cb.Do("DwTriggerFlagsEx", &t.DwTriggerFlagsEx, d...)
	cb.Do("TCleanup", &t.TCleanup, d...)
	cb.Do("Unk_49e9257", &t.Unk_49e9257, d...)
	cb.Do("Unk_5490979", &t.Unk_5490979, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("Unk_7903775", &t.Unk_7903775, d...)
	cb.Do("Unk_2c69731", &t.Unk_2c69731, d...)
	cb.Do("AEndFOV", &t.AEndFOV, d...)
	cb.Do("EBlendEasing", &t.EBlendEasing, d...)
}

type ANNDataMessage struct {
	THeader RequiredMessageHeader
	Ann     DT_ACD_NETWORK_NAME
}

func (t *ANNDataMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Ann, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ANNDataMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("Ann", &t.Ann, d...)
}

type RunTimeMaterialScalarValueEntry struct {
	TValue RunTimeMaterialValue_float
}

func (t *RunTimeMaterialScalarValueEntry) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.TValue, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+12, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *RunTimeMaterialScalarValueEntry) Walk(cb WalkCallback, d ...any) {
	cb.Do("TValue", &t.TValue, d...)
}

type CrowdControlEffects struct {
	SnoEffectGroup      DT_SNO
	DwShaderMapOverride DT_UINT
	SzLookSwitch        DT_UINT
}

func (t *CrowdControlEffects) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoEffectGroup, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.DwShaderMapOverride, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.SzLookSwitch, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+12, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *CrowdControlEffects) Walk(cb WalkCallback, d ...any) {
	cb.Do("SnoEffectGroup", &t.SnoEffectGroup, d...)
	cb.Do("DwShaderMapOverride", &t.DwShaderMapOverride, d...)
	cb.Do("SzLookSwitch", &t.SzLookSwitch, d...)
}

type RNGStateData struct {
	DwSeed  DT_UINT
	DwCarry DT_UINT
}

func (t *RNGStateData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.DwSeed, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.DwCarry, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *RNGStateData) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwSeed", &t.DwSeed, d...)
	cb.Do("DwCarry", &t.DwCarry, d...)
}

type ScriptEventParamPlayerAlly struct {
	// Inherits ScriptEventParamBase
	// Inherits PolymorphicBase
	DwType        DT_UINT
	EParamType    DT_ENUM
	DwPad         DT_UINT
	BIsPlayerAlly DT_INT
}

func (t *ScriptEventParamPlayerAlly) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.EParamType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.BIsPlayerAlly, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ScriptEventParamPlayerAlly) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("EParamType", &t.EParamType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("BIsPlayerAlly", &t.BIsPlayerAlly, d...)
}

type PowerBuffIdentifier struct {
	SnoPower     DT_SNO
	DwBuffDataID DT_UINT
}

func (t *PowerBuffIdentifier) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoPower, r, &Options{
		Flags: 513,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.DwBuffDataID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PowerBuffIdentifier) Walk(cb WalkCallback, d ...any) {
	cb.Do("SnoPower", &t.SnoPower, d...)
	cb.Do("DwBuffDataID", &t.DwBuffDataID, d...)
}

type WeatherStateParamsOptionalFieldMapDefaults struct {
	FIsFogged                            DT_INT
	PathFogColor                         InterpolationPath_RGBAColor
	PathFrontFogColor                    InterpolationPath_RGBAColor
	PathFogIntensitySunFactor            InterpolationPath_float
	PathFogIntensityBias                 InterpolationPath_float
	PathFogStart                         InterpolationPath_float
	PathFrontFogThickness                InterpolationPath_float
	PathFogMaxOpacity                    InterpolationPath_float
	PathFogExponent                      InterpolationPath_float
	Unk_b2aba89                          InterpolationPath_float
	Unk_72030bc                          InterpolationPath_float
	Unk_7204f87                          InterpolationPath_float
	Unk_32d918a                          InterpolationPath_float
	PathHeightFogStart                   InterpolationPath_float
	PathDirectionalFogColor              InterpolationPath_RGBAColor
	PathDirectionalFogIntensitySunFactor InterpolationPath_float
	PathDirectionalFogIntensityBias      InterpolationPath_float
	PathDirectionalFogExponent           InterpolationPath_float
	Unk_a8a3bbf                          DT_INT
	PathGroundFogFogColor                InterpolationPath_RGBAColor
	PathGroundFogHeight                  InterpolationPath_float
	PathGroundFogDensityScale            InterpolationPath_float
	PathGroundFogCascadeShadowOffset     InterpolationPath_float
	PathGroundFogScatterCoeff            InterpolationPath_float
	PathGroundFogAbsorptionCoeff         InterpolationPath_float
	FlGroundFogLightSample               DT_FLOAT
	Unk_2ba647c                          DT_FLOAT
	Unk_babc18b                          InterpolationPath_float
	PathWind                             VectorPath
}

func (t *WeatherStateParamsOptionalFieldMapDefaults) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.FIsFogged, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.PathFogColor, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.PathFrontFogColor, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.PathFogIntensitySunFactor, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+176, &t.PathFogIntensityBias, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+232, &t.PathFogStart, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+288, &t.PathFrontFogThickness, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+344, &t.PathFogMaxOpacity, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+400, &t.PathFogExponent, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+456, &t.Unk_b2aba89, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+512, &t.Unk_72030bc, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+568, &t.Unk_7204f87, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+624, &t.Unk_32d918a, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+680, &t.PathHeightFogStart, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+736, &t.PathDirectionalFogColor, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+792, &t.PathDirectionalFogIntensitySunFactor, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+848, &t.PathDirectionalFogIntensityBias, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+904, &t.PathDirectionalFogExponent, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+960, &t.Unk_a8a3bbf, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+968, &t.PathGroundFogFogColor, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1024, &t.PathGroundFogHeight, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1080, &t.PathGroundFogDensityScale, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1136, &t.PathGroundFogCascadeShadowOffset, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1192, &t.PathGroundFogScatterCoeff, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1248, &t.PathGroundFogAbsorptionCoeff, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1304, &t.FlGroundFogLightSample, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1308, &t.Unk_2ba647c, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1312, &t.Unk_babc18b, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1368, &t.PathWind, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+1424, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *WeatherStateParamsOptionalFieldMapDefaults) Walk(cb WalkCallback, d ...any) {
	cb.Do("FIsFogged", &t.FIsFogged, d...)
	cb.Do("PathFogColor", &t.PathFogColor, d...)
	cb.Do("PathFrontFogColor", &t.PathFrontFogColor, d...)
	cb.Do("PathFogIntensitySunFactor", &t.PathFogIntensitySunFactor, d...)
	cb.Do("PathFogIntensityBias", &t.PathFogIntensityBias, d...)
	cb.Do("PathFogStart", &t.PathFogStart, d...)
	cb.Do("PathFrontFogThickness", &t.PathFrontFogThickness, d...)
	cb.Do("PathFogMaxOpacity", &t.PathFogMaxOpacity, d...)
	cb.Do("PathFogExponent", &t.PathFogExponent, d...)
	cb.Do("Unk_b2aba89", &t.Unk_b2aba89, d...)
	cb.Do("Unk_72030bc", &t.Unk_72030bc, d...)
	cb.Do("Unk_7204f87", &t.Unk_7204f87, d...)
	cb.Do("Unk_32d918a", &t.Unk_32d918a, d...)
	cb.Do("PathHeightFogStart", &t.PathHeightFogStart, d...)
	cb.Do("PathDirectionalFogColor", &t.PathDirectionalFogColor, d...)
	cb.Do("PathDirectionalFogIntensitySunFactor", &t.PathDirectionalFogIntensitySunFactor, d...)
	cb.Do("PathDirectionalFogIntensityBias", &t.PathDirectionalFogIntensityBias, d...)
	cb.Do("PathDirectionalFogExponent", &t.PathDirectionalFogExponent, d...)
	cb.Do("Unk_a8a3bbf", &t.Unk_a8a3bbf, d...)
	cb.Do("PathGroundFogFogColor", &t.PathGroundFogFogColor, d...)
	cb.Do("PathGroundFogHeight", &t.PathGroundFogHeight, d...)
	cb.Do("PathGroundFogDensityScale", &t.PathGroundFogDensityScale, d...)
	cb.Do("PathGroundFogCascadeShadowOffset", &t.PathGroundFogCascadeShadowOffset, d...)
	cb.Do("PathGroundFogScatterCoeff", &t.PathGroundFogScatterCoeff, d...)
	cb.Do("PathGroundFogAbsorptionCoeff", &t.PathGroundFogAbsorptionCoeff, d...)
	cb.Do("FlGroundFogLightSample", &t.FlGroundFogLightSample, d...)
	cb.Do("Unk_2ba647c", &t.Unk_2ba647c, d...)
	cb.Do("Unk_babc18b", &t.Unk_babc18b, d...)
	cb.Do("PathWind", &t.PathWind, d...)
}

type BlizzconSubcondition struct {
	// Inherits Subcondition
	// Inherits PolymorphicBase
	DwType  DT_UINT
	BNegate DT_INT
	DwPad   DT_UINT
}

func (t *BlizzconSubcondition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BNegate, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *BlizzconSubcondition) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("BNegate", &t.BNegate, d...)
	cb.Do("DwPad", &t.DwPad, d...)
}

type ParticleLifeEvent struct {
	DwParticleIndex DT_WORD
	DwType          DT_WORD
	FlSystemTime    DT_FLOAT
}

func (t *ParticleLifeEvent) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.DwParticleIndex, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2, &t.DwType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.FlSystemTime, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ParticleLifeEvent) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwParticleIndex", &t.DwParticleIndex, d...)
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("FlSystemTime", &t.FlSystemTime, d...)
}

type PowerConditionIsInjured struct {
	// Inherits PowerConditionBase
	// Inherits PolymorphicBase
	DwType   DT_UINT
	BInverse DT_INT
	DwPad    DT_UINT
	ESubject DT_ENUM
}

func (t *PowerConditionIsInjured) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BInverse, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ESubject, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PowerConditionIsInjured) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("BInverse", &t.BInverse, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("ESubject", &t.ESubject, d...)
}

type QuestItemCountSubcondition struct {
	// Inherits NumericComparisonSubcondition
	// Inherits Subcondition
	// Inherits PolymorphicBase
	DwType        DT_UINT
	BNegate       DT_INT
	EComparisonOp DT_ENUM
	DwPad         DT_UINT
	SnoItem       DT_SNO
	NItemCount    DT_INT
	Unk_f0998ad   DT_INT
}

func (t *QuestItemCountSubcondition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BNegate, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.EComparisonOp, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.SnoItem, r, &Options{
		Flags: 513,
		Group: 73,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.NItemCount, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.Unk_f0998ad, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *QuestItemCountSubcondition) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("BNegate", &t.BNegate, d...)
	cb.Do("EComparisonOp", &t.EComparisonOp, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("SnoItem", &t.SnoItem, d...)
	cb.Do("NItemCount", &t.NItemCount, d...)
	cb.Do("Unk_f0998ad", &t.Unk_f0998ad, d...)
}

type PowerConditionDamageHasFortified struct {
	// Inherits PowerConditionBase
	// Inherits PolymorphicBase
	DwType   DT_UINT
	BInverse DT_INT
	DwPad    DT_UINT
}

func (t *PowerConditionDamageHasFortified) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BInverse, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PowerConditionDamageHasFortified) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("BInverse", &t.BInverse, d...)
	cb.Do("DwPad", &t.DwPad, d...)
}

type Type_835c1731 struct {
	Coeff DT_FIXEDARRAY[*DT_VECTOR4D]
}

func (t *Type_835c1731) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Coeff, r, &Options{
		ArrayLength: 3,
		Flags:       1,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_835c1731) Walk(cb WalkCallback, d ...any) {
	cb.Do("Coeff", &t.Coeff, d...)
}

type UIHotbarButtonStyleOptionalFieldMapDefaults struct {
	BRound      DT_INT
	Unk_a9f149e DT_INT
}

func (t *UIHotbarButtonStyleOptionalFieldMapDefaults) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.BRound, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.Unk_a9f149e, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *UIHotbarButtonStyleOptionalFieldMapDefaults) Walk(cb WalkCallback, d ...any) {
	cb.Do("BRound", &t.BRound, d...)
	cb.Do("Unk_a9f149e", &t.Unk_a9f149e, d...)
}

type InitiateGroupTransferMessage struct {
	THeader RequiredMessageHeader
}

func (t *InitiateGroupTransferMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *InitiateGroupTransferMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
}

type AppearanceDefinition struct {
	TStructure              Structure
	DwFlags                 DT_UINT
	PtAppearanceLooks       DT_VARIABLEARRAY[*AppearanceLook]
	PtAppearanceMaterials   DT_VARIABLEARRAY[*AppearanceMaterial]
	SnoFusedPrefab          DT_SNO
	ArLookVariantMap        DT_VARIABLEARRAY[*LookVariantMap]
	DwLookVariant           DT_UINT
	TFoliageSettings        FoliageSettings
	PtSpeedTreeWind         DT_POLYMORPHIC_VARIABLEARRAY[*SpeedTreeWindBase]
	ArLayersVertexAO        DT_VARIABLEARRAY[*LayerVertexAO]
	FlLODDistanceMultiplier DT_FLOAT
	FlDeformationScale      DT_FLOAT
}

func (t *AppearanceDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.TStructure, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+152, &t.DwFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+160, &t.PtAppearanceLooks, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+176, &t.PtAppearanceMaterials, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+192, &t.SnoFusedPrefab, r, &Options{
		Flags: 1,
		Group: 24,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+200, &t.ArLookVariantMap, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+216, &t.DwLookVariant, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+220, &t.TFoliageSettings, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+264, &t.PtSpeedTreeWind, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+288, &t.ArLayersVertexAO, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+304, &t.FlLODDistanceMultiplier, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+308, &t.FlDeformationScale, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+312, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *AppearanceDefinition) Walk(cb WalkCallback, d ...any) {
	cb.Do("TStructure", &t.TStructure, d...)
	cb.Do("DwFlags", &t.DwFlags, d...)
	cb.Do("PtAppearanceLooks", &t.PtAppearanceLooks, d...)
	cb.Do("PtAppearanceMaterials", &t.PtAppearanceMaterials, d...)
	cb.Do("SnoFusedPrefab", &t.SnoFusedPrefab, d...)
	cb.Do("ArLookVariantMap", &t.ArLookVariantMap, d...)
	cb.Do("DwLookVariant", &t.DwLookVariant, d...)
	cb.Do("TFoliageSettings", &t.TFoliageSettings, d...)
	cb.Do("PtSpeedTreeWind", &t.PtSpeedTreeWind, d...)
	cb.Do("ArLayersVertexAO", &t.ArLayersVertexAO, d...)
	cb.Do("FlLODDistanceMultiplier", &t.FlLODDistanceMultiplier, d...)
	cb.Do("FlDeformationScale", &t.FlDeformationScale, d...)
}

type WwiseExternalSource struct {
	DwSourceCookie DT_UINT
}

func (t *WwiseExternalSource) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.DwSourceCookie, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+4, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *WwiseExternalSource) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwSourceCookie", &t.DwSourceCookie, d...)
}

type Type_841ba26f struct {
	PathRadius      InterpolationPath_float
	PathHeight      InterpolationPath_float
	PathBoxExtents  VectorPath
	EType           DT_ENUM
	SzSubObjectName DT_CHARARRAY
}

func (t *Type_841ba26f) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.PathRadius, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.PathHeight, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.PathBoxExtents, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+168, &t.EType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+172, &t.SzSubObjectName, r, &Options{
		ArrayLength: 128,
		Flags:       1,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+304, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_841ba26f) Walk(cb WalkCallback, d ...any) {
	cb.Do("PathRadius", &t.PathRadius, d...)
	cb.Do("PathHeight", &t.PathHeight, d...)
	cb.Do("PathBoxExtents", &t.PathBoxExtents, d...)
	cb.Do("EType", &t.EType, d...)
	cb.Do("SzSubObjectName", &t.SzSubObjectName, d...)
}

type TriggerEventChangeLookDuration struct {
	// Inherits TriggerEventRangedDuration
	// Inherits TriggerEvent
	// Inherits PolymorphicBase
	DwType           DT_UINT
	TConditions      TriggerConditions
	FGenerated       DT_INT
	Unk_6cba752      DT_INT
	DwParentActorID  DT_UINT
	TDuration        DT_FLOAT
	DwTriggerFlags   DT_UINT
	DwTriggerFlagsEx DT_UINT
	TCleanup         TriggerCleanup
	Unk_49e9257      DT_INT
	Unk_5490979      DT_INT
	DwPad            DT_UINT
	DwActorID        DT_UINT
	SnoAppearance    DT_SNO
	TLookLink        LookLink
	Unk_279aa5a      DT_INT
}

func (t *TriggerEventChangeLookDuration) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.FGenerated, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_6cba752, r, &Options{Flags: 16}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.DwParentActorID, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.TDuration, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.DwTriggerFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.DwTriggerFlagsEx, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.TCleanup, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+116, &t.Unk_49e9257, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.Unk_5490979, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+124, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.DwActorID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+132, &t.SnoAppearance, r, &Options{
		Flags: 513,
		Group: 9,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+136, &t.TLookLink, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+140, &t.Unk_279aa5a, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+144, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TriggerEventChangeLookDuration) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("TConditions", &t.TConditions, d...)
	cb.Do("FGenerated", &t.FGenerated, d...)
	cb.Do("Unk_6cba752", &t.Unk_6cba752, d...)
	cb.Do("DwParentActorID", &t.DwParentActorID, d...)
	cb.Do("TDuration", &t.TDuration, d...)
	cb.Do("DwTriggerFlags", &t.DwTriggerFlags, d...)
	cb.Do("DwTriggerFlagsEx", &t.DwTriggerFlagsEx, d...)
	cb.Do("TCleanup", &t.TCleanup, d...)
	cb.Do("Unk_49e9257", &t.Unk_49e9257, d...)
	cb.Do("Unk_5490979", &t.Unk_5490979, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("DwActorID", &t.DwActorID, d...)
	cb.Do("SnoAppearance", &t.SnoAppearance, d...)
	cb.Do("TLookLink", &t.TLookLink, d...)
	cb.Do("Unk_279aa5a", &t.Unk_279aa5a, d...)
}

type LocalPlayerNetEvent struct {
	USig           DT_UINT
	EEvent         DT_ENUM
	UAccountId     DT_UINT
	UGameAccountId DT_UINT
}

func (t *LocalPlayerNetEvent) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.USig, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.EEvent, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.UAccountId, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.UGameAccountId, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *LocalPlayerNetEvent) Walk(cb WalkCallback, d ...any) {
	cb.Do("USig", &t.USig, d...)
	cb.Do("EEvent", &t.EEvent, d...)
	cb.Do("UAccountId", &t.UAccountId, d...)
	cb.Do("UGameAccountId", &t.UGameAccountId, d...)
}

type DRLGTileDebugInfo struct {
	SnoScene                     DT_SNO
	IdSScene                     DT_SHARED_SERVER_DATA_ID
	VWorldPos                    DT_VECTOR3D
	TAABB                        AABB
	TDRLGCreationInfo            DRLGSceneCreationInfo
	SnoLevelArea                 DT_SNO
	SnoLevelAreaDungeonAlternate DT_SNO
	Unk_989f2d7                  DT_ENUM
	ArLabels                     DT_FIXEDARRAY[*DT_GBID]
	ArElevations                 DT_FIXEDARRAY[*DT_INT]
	NElevationsCount             DT_INT
}

func (t *DRLGTileDebugInfo) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoScene, r, &Options{
		Flags: 1,
		Group: 33,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.IdSScene, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.VWorldPos, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.TAABB, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.TDRLGCreationInfo, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.SnoLevelArea, r, &Options{
		Flags: 1,
		Group: 22,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.SnoLevelAreaDungeonAlternate, r, &Options{
		Flags: 1,
		Group: 22,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.Unk_989f2d7, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.ArLabels, r, &Options{
		ArrayLength: 4,
		Flags:       9,
		Group:       4,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+104, &t.ArElevations, r, &Options{
		ArrayLength: 2,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.NElevationsCount, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+116, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *DRLGTileDebugInfo) Walk(cb WalkCallback, d ...any) {
	cb.Do("SnoScene", &t.SnoScene, d...)
	cb.Do("IdSScene", &t.IdSScene, d...)
	cb.Do("VWorldPos", &t.VWorldPos, d...)
	cb.Do("TAABB", &t.TAABB, d...)
	cb.Do("TDRLGCreationInfo", &t.TDRLGCreationInfo, d...)
	cb.Do("SnoLevelArea", &t.SnoLevelArea, d...)
	cb.Do("SnoLevelAreaDungeonAlternate", &t.SnoLevelAreaDungeonAlternate, d...)
	cb.Do("Unk_989f2d7", &t.Unk_989f2d7, d...)
	cb.Do("ArLabels", &t.ArLabels, d...)
	cb.Do("ArElevations", &t.ArElevations, d...)
	cb.Do("NElevationsCount", &t.NElevationsCount, d...)
}

type ConvexHull struct {
	NVertexCount   DT_INT
	PtVertices     DT_VARIABLEARRAY[*DT_VECTOR3D]
	NTriangleCount DT_INT
	PtTriangles    DT_VARIABLEARRAY[*IndexedTriangle]
	NPlaneCount    DT_INT
	PtPlanes       DT_VARIABLEARRAY[*Plane]
	MInertiaTensor Matrix3x3
	WvCenterOfMass DT_VECTOR3D
	FlArea         DT_FLOAT
	FlVolume       DT_FLOAT
}

func (t *ConvexHull) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.NVertexCount, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.PtVertices, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.NTriangleCount, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.PtTriangles, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.NPlaneCount, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.PtPlanes, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.MInertiaTensor, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+108, &t.WvCenterOfMass, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.FlArea, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+124, &t.FlVolume, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+128, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ConvexHull) Walk(cb WalkCallback, d ...any) {
	cb.Do("NVertexCount", &t.NVertexCount, d...)
	cb.Do("PtVertices", &t.PtVertices, d...)
	cb.Do("NTriangleCount", &t.NTriangleCount, d...)
	cb.Do("PtTriangles", &t.PtTriangles, d...)
	cb.Do("NPlaneCount", &t.NPlaneCount, d...)
	cb.Do("PtPlanes", &t.PtPlanes, d...)
	cb.Do("MInertiaTensor", &t.MInertiaTensor, d...)
	cb.Do("WvCenterOfMass", &t.WvCenterOfMass, d...)
	cb.Do("FlArea", &t.FlArea, d...)
	cb.Do("FlVolume", &t.FlVolume, d...)
}

type ActorWeaponData struct {
	EWeaponHitsound    DT_ENUM
	SnoExplosionSno    DT_SNO
	SnoProjectileSno   DT_SNO
	SnoWeaponEffectSno DT_SNO
}

func (t *ActorWeaponData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.EWeaponHitsound, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.SnoExplosionSno, r, &Options{
		Flags: 1,
		Group: 1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.SnoProjectileSno, r, &Options{
		Flags: 1,
		Group: 1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.SnoWeaponEffectSno, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ActorWeaponData) Walk(cb WalkCallback, d ...any) {
	cb.Do("EWeaponHitsound", &t.EWeaponHitsound, d...)
	cb.Do("SnoExplosionSno", &t.SnoExplosionSno, d...)
	cb.Do("SnoProjectileSno", &t.SnoProjectileSno, d...)
	cb.Do("SnoWeaponEffectSno", &t.SnoWeaponEffectSno, d...)
}

type ConditionalMaterialOverride struct {
	SnoCondition                   DT_SNO
	ArLookVariantMaterialOverrides DT_VARIABLEARRAY[*LookVariantMaterialOverride]
}

func (t *ConditionalMaterialOverride) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoCondition, r, &Options{
		Flags: 513,
		Group: 51,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.ArLookVariantMaterialOverrides, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ConditionalMaterialOverride) Walk(cb WalkCallback, d ...any) {
	cb.Do("SnoCondition", &t.SnoCondition, d...)
	cb.Do("ArLookVariantMaterialOverrides", &t.ArLookVariantMaterialOverrides, d...)
}

type BasicGizmoData struct {
	// Inherits ActorGizmoData
	// Inherits PolymorphicBase
	DwType                           DT_UINT
	DwPad                            DT_UINT
	FDisableNonFriendlyOperation     DT_INT
	FWalkToCenter                    DT_INT
	FGizmoStartsDisabled             DT_INT
	FUseStringListName               DT_INT
	FForceMinimapIcon                DT_INT
	FlOperationRadius                DT_FLOAT
	Unk_d0b1df5                      DT_FLOAT
	FlGizmoUseTime                   DT_FLOAT
	SnoChannelingEffect              DT_SNO
	Unk_2767229                      DT_INT
	FGizmoShowProgressBar            DT_INT
	Unk_6d9ebe1                      DT_INT
	Unk_5456245                      DT_INT
	Unk_af5815a                      DT_INT
	SnoOnClickEffect                 DT_SNO
	SnoPickedUpEffect                DT_SNO
	SnoDropOnGroundEffect            DT_SNO
	TConditionData                   GizmoConditionData
	SnoPowerOperator                 DT_SNO
	SnoPowerOperate                  DT_SNO
	SnoPowerOperatorActive           DT_SNO
	SnoPowerOperateActive            DT_SNO
	Unk_359810e                      DT_INT
	NCooldown                        DT_UINT
	Unk_9c8478e                      DT_UINT
	Unk_d45ed2d                      DT_INT
	Unk_f6b20b7                      DT_INT
	Unk_54513b8                      DT_INT
	Unk_fd1f378                      DT_UINT
	HGizmoOperateFlavorTextMsgLabel  DT_UINT
	HGizmoOperateDescriptionMsgLabel DT_UINT
	FlGizmoOperateOffset             DT_FLOAT
	Unk_ab58cd3                      DT_ENUM
	Unk_91a3966                      DT_UINT
	HGizmoChannelingLabel            DT_UINT
	Unk_4be4371                      DT_INT
}

func (t *BasicGizmoData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.FDisableNonFriendlyOperation, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.FWalkToCenter, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.FGizmoStartsDisabled, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.FUseStringListName, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.FForceMinimapIcon, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.FlOperationRadius, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.Unk_d0b1df5, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.FlGizmoUseTime, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.SnoChannelingEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.Unk_2767229, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.FGizmoShowProgressBar, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+60, &t.Unk_6d9ebe1, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.Unk_5456245, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.Unk_af5815a, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.SnoOnClickEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.SnoPickedUpEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.SnoDropOnGroundEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.TConditionData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.SnoPowerOperator, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.SnoPowerOperate, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.SnoPowerOperatorActive, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+100, &t.SnoPowerOperateActive, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+104, &t.Unk_359810e, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+108, &t.NCooldown, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.Unk_9c8478e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+116, &t.Unk_d45ed2d, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.Unk_f6b20b7, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+124, &t.Unk_54513b8, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.Unk_fd1f378, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+132, &t.HGizmoOperateFlavorTextMsgLabel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+136, &t.HGizmoOperateDescriptionMsgLabel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+140, &t.FlGizmoOperateOffset, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+144, &t.Unk_ab58cd3, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+148, &t.Unk_91a3966, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+152, &t.HGizmoChannelingLabel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+156, &t.Unk_4be4371, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+160, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *BasicGizmoData) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("FDisableNonFriendlyOperation", &t.FDisableNonFriendlyOperation, d...)
	cb.Do("FWalkToCenter", &t.FWalkToCenter, d...)
	cb.Do("FGizmoStartsDisabled", &t.FGizmoStartsDisabled, d...)
	cb.Do("FUseStringListName", &t.FUseStringListName, d...)
	cb.Do("FForceMinimapIcon", &t.FForceMinimapIcon, d...)
	cb.Do("FlOperationRadius", &t.FlOperationRadius, d...)
	cb.Do("Unk_d0b1df5", &t.Unk_d0b1df5, d...)
	cb.Do("FlGizmoUseTime", &t.FlGizmoUseTime, d...)
	cb.Do("SnoChannelingEffect", &t.SnoChannelingEffect, d...)
	cb.Do("Unk_2767229", &t.Unk_2767229, d...)
	cb.Do("FGizmoShowProgressBar", &t.FGizmoShowProgressBar, d...)
	cb.Do("Unk_6d9ebe1", &t.Unk_6d9ebe1, d...)
	cb.Do("Unk_5456245", &t.Unk_5456245, d...)
	cb.Do("Unk_af5815a", &t.Unk_af5815a, d...)
	cb.Do("SnoOnClickEffect", &t.SnoOnClickEffect, d...)
	cb.Do("SnoPickedUpEffect", &t.SnoPickedUpEffect, d...)
	cb.Do("SnoDropOnGroundEffect", &t.SnoDropOnGroundEffect, d...)
	cb.Do("TConditionData", &t.TConditionData, d...)
	cb.Do("SnoPowerOperator", &t.SnoPowerOperator, d...)
	cb.Do("SnoPowerOperate", &t.SnoPowerOperate, d...)
	cb.Do("SnoPowerOperatorActive", &t.SnoPowerOperatorActive, d...)
	cb.Do("SnoPowerOperateActive", &t.SnoPowerOperateActive, d...)
	cb.Do("Unk_359810e", &t.Unk_359810e, d...)
	cb.Do("NCooldown", &t.NCooldown, d...)
	cb.Do("Unk_9c8478e", &t.Unk_9c8478e, d...)
	cb.Do("Unk_d45ed2d", &t.Unk_d45ed2d, d...)
	cb.Do("Unk_f6b20b7", &t.Unk_f6b20b7, d...)
	cb.Do("Unk_54513b8", &t.Unk_54513b8, d...)
	cb.Do("Unk_fd1f378", &t.Unk_fd1f378, d...)
	cb.Do("HGizmoOperateFlavorTextMsgLabel", &t.HGizmoOperateFlavorTextMsgLabel, d...)
	cb.Do("HGizmoOperateDescriptionMsgLabel", &t.HGizmoOperateDescriptionMsgLabel, d...)
	cb.Do("FlGizmoOperateOffset", &t.FlGizmoOperateOffset, d...)
	cb.Do("Unk_ab58cd3", &t.Unk_ab58cd3, d...)
	cb.Do("Unk_91a3966", &t.Unk_91a3966, d...)
	cb.Do("HGizmoChannelingLabel", &t.HGizmoChannelingLabel, d...)
	cb.Do("Unk_4be4371", &t.Unk_4be4371, d...)
}

type LabelGBID struct {
	THeader GBIDHeader
	NIndex  DT_INT
}

func (t *LabelGBID) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+260, &t.NIndex, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+264, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *LabelGBID) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("NIndex", &t.NIndex, d...)
}

type FoleyMaterialTagInfo struct {
	SzTag                DT_UINT
	SnoDefaultSoundTable DT_SNO
}

func (t *FoleyMaterialTagInfo) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SzTag, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.SnoDefaultSoundTable, r, &Options{
		Flags: 1,
		Group: 79,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *FoleyMaterialTagInfo) Walk(cb WalkCallback, d ...any) {
	cb.Do("SzTag", &t.SzTag, d...)
	cb.Do("SnoDefaultSoundTable", &t.SnoDefaultSoundTable, d...)
}

type LabelRule struct {
	SzRuleName   DT_CHARARRAY
	NNumToChoose DT_INT
	ArEntries    DT_VARIABLEARRAY[*LabelEntry]
}

func (t *LabelRule) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SzRuleName, r, &Options{
		ArrayLength: 128,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.NNumToChoose, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+136, &t.ArEntries, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+152, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *LabelRule) Walk(cb WalkCallback, d ...any) {
	cb.Do("SzRuleName", &t.SzRuleName, d...)
	cb.Do("NNumToChoose", &t.NNumToChoose, d...)
	cb.Do("ArEntries", &t.ArEntries, d...)
}

type PowerConditionIsInCombat struct {
	// Inherits PowerConditionBase
	// Inherits PolymorphicBase
	DwType   DT_UINT
	BInverse DT_INT
	DwPad    DT_UINT
	ESubject DT_ENUM
}

func (t *PowerConditionIsInCombat) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BInverse, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ESubject, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PowerConditionIsInCombat) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("BInverse", &t.BInverse, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("ESubject", &t.ESubject, d...)
}

type InventoryRequestQuickMoveMessage struct {
	THeader   RequiredMessageHeader
	AnnItem   DT_ACD_NETWORK_NAME
	AnnOwner  DT_ACD_NETWORK_NAME
	ESlot     DT_ENUM
	NSlotMinY DT_INT
	NSlotMaxY DT_INT
}

func (t *InventoryRequestQuickMoveMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.AnnItem, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.AnnOwner, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.ESlot, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.NSlotMinY, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.NSlotMaxY, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+44, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *InventoryRequestQuickMoveMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("AnnItem", &t.AnnItem, d...)
	cb.Do("AnnOwner", &t.AnnOwner, d...)
	cb.Do("ESlot", &t.ESlot, d...)
	cb.Do("NSlotMinY", &t.NSlotMinY, d...)
	cb.Do("NSlotMaxY", &t.NSlotMaxY, d...)
}

type Type_857c89cd struct {
	// Inherits TriggerEvent
	// Inherits PolymorphicBase
	DwType          DT_UINT
	DwPad           DT_UINT
	TConditions     TriggerConditions
	FGenerated      DT_INT
	Unk_6cba752     DT_INT
	DwParentActorID DT_UINT
	BHide           DT_INT
}

func (t *Type_857c89cd) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.FGenerated, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_6cba752, r, &Options{Flags: 16}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.DwParentActorID, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.BHide, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+88, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_857c89cd) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("TConditions", &t.TConditions, d...)
	cb.Do("FGenerated", &t.FGenerated, d...)
	cb.Do("Unk_6cba752", &t.Unk_6cba752, d...)
	cb.Do("DwParentActorID", &t.DwParentActorID, d...)
	cb.Do("BHide", &t.BHide, d...)
}

type WwiseInitSoundBank struct {
	// Inherits WwiseSoundBankContentBase
	// Inherits PolymorphicBase
	DwType           DT_UINT
	DwPad            DT_UINT
	PtInitBank       DT_VARIABLEARRAY[*DT_BYTE]
	PtGameParameters DT_VARIABLEARRAY[*WwiseGameParameter]
	PtStateValues    DT_VARIABLEARRAY[*WwiseSwitchValue]
	PtAudioBusses    DT_VARIABLEARRAY[*WwiseAudioBus]
	Unk_b0f69e7      DT_VARIABLEARRAY[*Type_e1291b50]
}

func (t *WwiseInitSoundBank) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.PtInitBank, r, &Options{Flags: 2097152}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.PtGameParameters, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.PtStateValues, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.PtAudioBusses, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.Unk_b0f69e7, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+96, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *WwiseInitSoundBank) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("PtInitBank", &t.PtInitBank, d...)
	cb.Do("PtGameParameters", &t.PtGameParameters, d...)
	cb.Do("PtStateValues", &t.PtStateValues, d...)
	cb.Do("PtAudioBusses", &t.PtAudioBusses, d...)
	cb.Do("Unk_b0f69e7", &t.Unk_b0f69e7, d...)
}

type WardrobeGizmoData struct {
	// Inherits NamedGizmoData
	// Inherits ActorGizmoData
	// Inherits PolymorphicBase
	DwType                           DT_UINT
	DwPad                            DT_UINT
	FDisableNonFriendlyOperation     DT_INT
	FWalkToCenter                    DT_INT
	FGizmoStartsDisabled             DT_INT
	FUseStringListName               DT_INT
	FForceMinimapIcon                DT_INT
	FlOperationRadius                DT_FLOAT
	Unk_d0b1df5                      DT_FLOAT
	FlGizmoUseTime                   DT_FLOAT
	SnoChannelingEffect              DT_SNO
	Unk_2767229                      DT_INT
	FGizmoShowProgressBar            DT_INT
	Unk_6d9ebe1                      DT_INT
	Unk_5456245                      DT_INT
	Unk_af5815a                      DT_INT
	SnoOnClickEffect                 DT_SNO
	SnoPickedUpEffect                DT_SNO
	SnoDropOnGroundEffect            DT_SNO
	TConditionData                   GizmoConditionData
	SnoPowerOperator                 DT_SNO
	SnoPowerOperate                  DT_SNO
	SnoPowerOperatorActive           DT_SNO
	SnoPowerOperateActive            DT_SNO
	Unk_359810e                      DT_INT
	NCooldown                        DT_UINT
	Unk_9c8478e                      DT_UINT
	Unk_d45ed2d                      DT_INT
	Unk_f6b20b7                      DT_INT
	Unk_54513b8                      DT_INT
	Unk_fd1f378                      DT_UINT
	HGizmoOperateFlavorTextMsgLabel  DT_UINT
	HGizmoOperateDescriptionMsgLabel DT_UINT
	FlGizmoOperateOffset             DT_FLOAT
	Unk_ab58cd3                      DT_ENUM
	Unk_91a3966                      DT_UINT
	HGizmoChannelingLabel            DT_UINT
	Unk_4be4371                      DT_INT
	EDefaultMode                     DT_ENUM
}

func (t *WardrobeGizmoData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.FDisableNonFriendlyOperation, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.FWalkToCenter, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.FGizmoStartsDisabled, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.FUseStringListName, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.FForceMinimapIcon, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.FlOperationRadius, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.Unk_d0b1df5, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.FlGizmoUseTime, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.SnoChannelingEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.Unk_2767229, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.FGizmoShowProgressBar, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+60, &t.Unk_6d9ebe1, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.Unk_5456245, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.Unk_af5815a, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.SnoOnClickEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.SnoPickedUpEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.SnoDropOnGroundEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.TConditionData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.SnoPowerOperator, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.SnoPowerOperate, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.SnoPowerOperatorActive, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+100, &t.SnoPowerOperateActive, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+104, &t.Unk_359810e, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+108, &t.NCooldown, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.Unk_9c8478e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+116, &t.Unk_d45ed2d, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.Unk_f6b20b7, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+124, &t.Unk_54513b8, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.Unk_fd1f378, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+132, &t.HGizmoOperateFlavorTextMsgLabel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+136, &t.HGizmoOperateDescriptionMsgLabel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+140, &t.FlGizmoOperateOffset, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+144, &t.Unk_ab58cd3, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+148, &t.Unk_91a3966, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+152, &t.HGizmoChannelingLabel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+156, &t.Unk_4be4371, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+160, &t.EDefaultMode, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+168, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *WardrobeGizmoData) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("FDisableNonFriendlyOperation", &t.FDisableNonFriendlyOperation, d...)
	cb.Do("FWalkToCenter", &t.FWalkToCenter, d...)
	cb.Do("FGizmoStartsDisabled", &t.FGizmoStartsDisabled, d...)
	cb.Do("FUseStringListName", &t.FUseStringListName, d...)
	cb.Do("FForceMinimapIcon", &t.FForceMinimapIcon, d...)
	cb.Do("FlOperationRadius", &t.FlOperationRadius, d...)
	cb.Do("Unk_d0b1df5", &t.Unk_d0b1df5, d...)
	cb.Do("FlGizmoUseTime", &t.FlGizmoUseTime, d...)
	cb.Do("SnoChannelingEffect", &t.SnoChannelingEffect, d...)
	cb.Do("Unk_2767229", &t.Unk_2767229, d...)
	cb.Do("FGizmoShowProgressBar", &t.FGizmoShowProgressBar, d...)
	cb.Do("Unk_6d9ebe1", &t.Unk_6d9ebe1, d...)
	cb.Do("Unk_5456245", &t.Unk_5456245, d...)
	cb.Do("Unk_af5815a", &t.Unk_af5815a, d...)
	cb.Do("SnoOnClickEffect", &t.SnoOnClickEffect, d...)
	cb.Do("SnoPickedUpEffect", &t.SnoPickedUpEffect, d...)
	cb.Do("SnoDropOnGroundEffect", &t.SnoDropOnGroundEffect, d...)
	cb.Do("TConditionData", &t.TConditionData, d...)
	cb.Do("SnoPowerOperator", &t.SnoPowerOperator, d...)
	cb.Do("SnoPowerOperate", &t.SnoPowerOperate, d...)
	cb.Do("SnoPowerOperatorActive", &t.SnoPowerOperatorActive, d...)
	cb.Do("SnoPowerOperateActive", &t.SnoPowerOperateActive, d...)
	cb.Do("Unk_359810e", &t.Unk_359810e, d...)
	cb.Do("NCooldown", &t.NCooldown, d...)
	cb.Do("Unk_9c8478e", &t.Unk_9c8478e, d...)
	cb.Do("Unk_d45ed2d", &t.Unk_d45ed2d, d...)
	cb.Do("Unk_f6b20b7", &t.Unk_f6b20b7, d...)
	cb.Do("Unk_54513b8", &t.Unk_54513b8, d...)
	cb.Do("Unk_fd1f378", &t.Unk_fd1f378, d...)
	cb.Do("HGizmoOperateFlavorTextMsgLabel", &t.HGizmoOperateFlavorTextMsgLabel, d...)
	cb.Do("HGizmoOperateDescriptionMsgLabel", &t.HGizmoOperateDescriptionMsgLabel, d...)
	cb.Do("FlGizmoOperateOffset", &t.FlGizmoOperateOffset, d...)
	cb.Do("Unk_ab58cd3", &t.Unk_ab58cd3, d...)
	cb.Do("Unk_91a3966", &t.Unk_91a3966, d...)
	cb.Do("HGizmoChannelingLabel", &t.HGizmoChannelingLabel, d...)
	cb.Do("Unk_4be4371", &t.Unk_4be4371, d...)
	cb.Do("EDefaultMode", &t.EDefaultMode, d...)
}

type GlobalRoadGraph struct {
	SnoWorld   DT_SNO
	ArSegments DT_VARIABLEARRAY[*GlobalRoadSegment]
	AabbBounds AABB
	DwRows     DT_UINT
	DwColumns  DT_UINT
	ArGrid     DT_VARIABLEARRAY[*GlobalRoadGraphCell]
}

func (t *GlobalRoadGraph) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoWorld, r, &Options{
		Flags: 513,
		Group: 48,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.ArSegments, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.AabbBounds, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.DwRows, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.DwColumns, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.ArGrid, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+72, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *GlobalRoadGraph) Walk(cb WalkCallback, d ...any) {
	cb.Do("SnoWorld", &t.SnoWorld, d...)
	cb.Do("ArSegments", &t.ArSegments, d...)
	cb.Do("AabbBounds", &t.AabbBounds, d...)
	cb.Do("DwRows", &t.DwRows, d...)
	cb.Do("DwColumns", &t.DwColumns, d...)
	cb.Do("ArGrid", &t.ArGrid, d...)
}

type TerritoryRegionBoundary struct {
	SnoTerritory DT_SNO
	ArPoints     DT_VARIABLEARRAY[*DT_VECTOR2D]
}

func (t *TerritoryRegionBoundary) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoTerritory, r, &Options{
		Flags: 1,
		Group: 92,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.ArPoints, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TerritoryRegionBoundary) Walk(cb WalkCallback, d ...any) {
	cb.Do("SnoTerritory", &t.SnoTerritory, d...)
	cb.Do("ArPoints", &t.ArPoints, d...)
}

type WorldSetRemainingReviveCountMessage struct {
	THeader               RequiredMessageHeader
	IdSWorld              DT_SHARED_SERVER_DATA_ID
	NRemainingReviveCount DT_INT
}

func (t *WorldSetRemainingReviveCountMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.IdSWorld, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.NRemainingReviveCount, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+28, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *WorldSetRemainingReviveCountMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("IdSWorld", &t.IdSWorld, d...)
	cb.Do("NRemainingReviveCount", &t.NRemainingReviveCount, d...)
}

type TalentRankAssignedMessage struct {
	THeader               RequiredMessageHeader
	DwPlayerGameAccountId DT_UINT
	SnoPower              DT_SNO
	DwRank                DT_UINT
}

func (t *TalentRankAssignedMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.DwPlayerGameAccountId, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.SnoPower, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.DwRank, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+28, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TalentRankAssignedMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("DwPlayerGameAccountId", &t.DwPlayerGameAccountId, d...)
	cb.Do("SnoPower", &t.SnoPower, d...)
	cb.Do("DwRank", &t.DwRank, d...)
}

type OnHitEffectTriggeredBuffCallback struct {
	// Inherits BuffCallbackBase
	// Inherits PolymorphicBase
	DwType                DT_UINT
	DwPad                 DT_UINT
	SnoTriggerEffectGroup DT_SNO
	ArConditions          DT_POLYMORPHIC_VARIABLEARRAY[*DT_INT64]
}

func (t *OnHitEffectTriggeredBuffCallback) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoTriggerEffectGroup, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ArConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *OnHitEffectTriggeredBuffCallback) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("SnoTriggerEffectGroup", &t.SnoTriggerEffectGroup, d...)
	cb.Do("ArConditions", &t.ArConditions, d...)
}

type Type_8636d92f struct {
	TTexture SerialDataInfo
}

func (t *Type_8636d92f) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.TTexture, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_8636d92f) Walk(cb WalkCallback, d ...any) {
	cb.Do("TTexture", &t.TTexture, d...)
}

type SpeakerActorOverride struct {
	SnoActor DT_SNO
}

func (t *SpeakerActorOverride) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoActor, r, &Options{
		Flags: 1,
		Group: 1,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+4, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *SpeakerActorOverride) Walk(cb WalkCallback, d ...any) {
	cb.Do("SnoActor", &t.SnoActor, d...)
}

type PowerConditionHasItemEquipped struct {
	// Inherits PowerConditionBase
	// Inherits PolymorphicBase
	DwType   DT_UINT
	BInverse DT_INT
	DwPad    DT_UINT
	ESubject DT_ENUM
	SnoItem  DT_SNO
}

func (t *PowerConditionHasItemEquipped) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BInverse, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ESubject, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.SnoItem, r, &Options{
		Flags: 513,
		Group: 73,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PowerConditionHasItemEquipped) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("BInverse", &t.BInverse, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("ESubject", &t.ESubject, d...)
	cb.Do("SnoItem", &t.SnoItem, d...)
}

type SchedulerGlobalUniqueCategory_Table struct {
	// Inherits GameBalanceTable
	// Inherits PolymorphicBase
	DwType   DT_UINT
	DwPad    DT_UINT
	TEntries DT_VARIABLEARRAY[*SchedulerGlobalUniqueCategory]
}

func (t *SchedulerGlobalUniqueCategory_Table) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TEntries, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *SchedulerGlobalUniqueCategory_Table) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("TEntries", &t.TEntries, d...)
}

type PlayerIndexMessage struct {
	THeader               RequiredMessageHeader
	DwPlayerGameAccountId DT_UINT
}

func (t *PlayerIndexMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.DwPlayerGameAccountId, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+20, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PlayerIndexMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("DwPlayerGameAccountId", &t.DwPlayerGameAccountId, d...)
}

type DRLGNodeLink struct {
	DwDestNodeId DT_UINT
}

func (t *DRLGNodeLink) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.DwDestNodeId, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+4, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *DRLGNodeLink) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwDestNodeId", &t.DwDestNodeId, d...)
}

type Type_87385a6d struct {
	SzTarget DT_CSTRING[*DT_BYTE]
	ArTracks DT_POLYMORPHIC_VARIABLEARRAY[*DT_INT64]
}

func (t *Type_87385a6d) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SzTarget, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.ArTracks, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+40, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_87385a6d) Walk(cb WalkCallback, d ...any) {
	cb.Do("SzTarget", &t.SzTarget, d...)
	cb.Do("ArTracks", &t.ArTracks, d...)
}

type AssignArsenalSkillSlotMessage struct {
	THeader  RequiredMessageHeader
	SnoPower DT_SNO
	NSlot    DT_INT
}

func (t *AssignArsenalSkillSlotMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoPower, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.NSlot, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *AssignArsenalSkillSlotMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("SnoPower", &t.SnoPower, d...)
	cb.Do("NSlot", &t.NSlot, d...)
}

type DesignerVariablePayload struct {
	NPayloadValue DT_INT
	NResetValue   DT_INT
}

func (t *DesignerVariablePayload) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.NPayloadValue, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.NResetValue, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *DesignerVariablePayload) Walk(cb WalkCallback, d ...any) {
	cb.Do("NPayloadValue", &t.NPayloadValue, d...)
	cb.Do("NResetValue", &t.NResetValue, d...)
}

type ItemTypeDefinition struct {
	DwFlags          DT_UINT
	EPackSlot        DT_ENUM
	ArBodySlots      DT_VARIABLEARRAY[*DT_ENUM]
	ArItemLabels     DT_VARIABLEARRAY[*DT_ENUM]
	EWeaponClass     DT_ENUM
	SzWeaponPrefix   DT_CSTRING[*DT_BYTE]
	Unk_18ee4ac      DT_ENUM
	Unk_b2500f1      DT_FLOAT
	Unk_4811bbe      DT_FLOAT
	Unk_cc5ef53      DT_FLOAT
	Unk_9981e08      DT_INT
	Unk_9e2e500      DT_INT
	Unk_69d0449      DT_INT
	Unk_f03343a      DT_INT
	Unk_9d54616      DT_INT
	Unk_b5a1c2b      DT_INT
	NEnchantmentCost DT_INT
	FUsableByClass   DT_FIXEDARRAY[*DT_INT]
	DwItemLabelMask  DT_FIXEDARRAY[*DT_UINT]
	Unk_60c6aca      DT_VARIABLEARRAY[*Type_a5df0191]
	Unk_4ec8d93      DT_SNO
	Unk_f4b6cde      Type_56ff7d6a
}

func (t *ItemTypeDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.EPackSlot, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.ArBodySlots, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.ArItemLabels, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.EWeaponClass, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.SzWeaponPrefix, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_18ee4ac, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.Unk_b2500f1, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.Unk_4811bbe, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.Unk_cc5ef53, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.Unk_9981e08, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.Unk_9e2e500, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.Unk_69d0449, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+100, &t.Unk_f03343a, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+104, &t.Unk_9d54616, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+108, &t.Unk_b5a1c2b, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.NEnchantmentCost, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+116, &t.FUsableByClass, r, &Options{
		ArrayLength: 5,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+136, &t.DwItemLabelMask, r, &Options{ArrayLength: 2}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+144, &t.Unk_60c6aca, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+160, &t.Unk_4ec8d93, r, &Options{
		Flags: 1,
		Group: 27,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+168, &t.Unk_f4b6cde, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+184, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ItemTypeDefinition) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwFlags", &t.DwFlags, d...)
	cb.Do("EPackSlot", &t.EPackSlot, d...)
	cb.Do("ArBodySlots", &t.ArBodySlots, d...)
	cb.Do("ArItemLabels", &t.ArItemLabels, d...)
	cb.Do("EWeaponClass", &t.EWeaponClass, d...)
	cb.Do("SzWeaponPrefix", &t.SzWeaponPrefix, d...)
	cb.Do("Unk_18ee4ac", &t.Unk_18ee4ac, d...)
	cb.Do("Unk_b2500f1", &t.Unk_b2500f1, d...)
	cb.Do("Unk_4811bbe", &t.Unk_4811bbe, d...)
	cb.Do("Unk_cc5ef53", &t.Unk_cc5ef53, d...)
	cb.Do("Unk_9981e08", &t.Unk_9981e08, d...)
	cb.Do("Unk_9e2e500", &t.Unk_9e2e500, d...)
	cb.Do("Unk_69d0449", &t.Unk_69d0449, d...)
	cb.Do("Unk_f03343a", &t.Unk_f03343a, d...)
	cb.Do("Unk_9d54616", &t.Unk_9d54616, d...)
	cb.Do("Unk_b5a1c2b", &t.Unk_b5a1c2b, d...)
	cb.Do("NEnchantmentCost", &t.NEnchantmentCost, d...)
	cb.Do("FUsableByClass", &t.FUsableByClass, d...)
	cb.Do("DwItemLabelMask", &t.DwItemLabelMask, d...)
	cb.Do("Unk_60c6aca", &t.Unk_60c6aca, d...)
	cb.Do("Unk_4ec8d93", &t.Unk_4ec8d93, d...)
	cb.Do("Unk_f4b6cde", &t.Unk_f4b6cde, d...)
}

type PlayerHasUnlockedSpiritBondSubcondition struct {
	// Inherits Subcondition
	// Inherits PolymorphicBase
	DwType  DT_UINT
	BNegate DT_INT
	DwPad   DT_UINT
}

func (t *PlayerHasUnlockedSpiritBondSubcondition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BNegate, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PlayerHasUnlockedSpiritBondSubcondition) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("BNegate", &t.BNegate, d...)
	cb.Do("DwPad", &t.DwPad, d...)
}

type FloatDataMessage struct {
	THeader RequiredMessageHeader
	FlData  DT_FLOAT
}

func (t *FloatDataMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.FlData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+20, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *FloatDataMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("FlData", &t.FlData, d...)
}

type ACDChangeGBHandleMessage struct {
	THeader RequiredMessageHeader
	Ann     DT_ACD_NETWORK_NAME
	HGB     GBHandle
}

func (t *ACDChangeGBHandleMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Ann, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.HGB, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ACDChangeGBHandleMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("Ann", &t.Ann, d...)
	cb.Do("HGB", &t.HGB, d...)
}

type MailRetrieveMessage struct {
	THeader RequiredMessageHeader
	IdMail  Type_f5ac91bb
}

func (t *MailRetrieveMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.IdMail, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *MailRetrieveMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("IdMail", &t.IdMail, d...)
}

type SceneData struct {
	PtCollisionHeightFields DT_VARIABLEARRAY[*CollisionHeightField]
	Unk_b3a0ae7             DT_INT
	PtSurfaceOctree         DT_VARIABLEARRAY[*Octree]
	PtSurfaceGrid           DT_VARIABLEARRAY[*SurfaceGrid]
	PtFoliageGrid           DT_VARIABLEARRAY[*FoliageGrid]
}

func (t *SceneData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.PtCollisionHeightFields, r, &Options{Flags: 2097152}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_b3a0ae7, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.PtSurfaceOctree, r, &Options{Flags: 2097152}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.PtSurfaceGrid, r, &Options{Flags: 2097152}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.PtFoliageGrid, r, &Options{Flags: 2097152}); err != nil {
		return err
	}
	if _, err := r.Seek(p+72, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *SceneData) Walk(cb WalkCallback, d ...any) {
	cb.Do("PtCollisionHeightFields", &t.PtCollisionHeightFields, d...)
	cb.Do("Unk_b3a0ae7", &t.Unk_b3a0ae7, d...)
	cb.Do("PtSurfaceOctree", &t.PtSurfaceOctree, d...)
	cb.Do("PtSurfaceGrid", &t.PtSurfaceGrid, d...)
	cb.Do("PtFoliageGrid", &t.PtFoliageGrid, d...)
}

type LevelScalingData struct {
	NLevelScalingMin             DT_INT
	NLevelScalingMatchUntilLevel DT_INT
	NLevelScalingDelta           DT_INT
	NLevelScalingMax             DT_INT
}

func (t *LevelScalingData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.NLevelScalingMin, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.NLevelScalingMatchUntilLevel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.NLevelScalingDelta, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.NLevelScalingMax, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *LevelScalingData) Walk(cb WalkCallback, d ...any) {
	cb.Do("NLevelScalingMin", &t.NLevelScalingMin, d...)
	cb.Do("NLevelScalingMatchUntilLevel", &t.NLevelScalingMatchUntilLevel, d...)
	cb.Do("NLevelScalingDelta", &t.NLevelScalingDelta, d...)
	cb.Do("NLevelScalingMax", &t.NLevelScalingMax, d...)
}

type MailRetrieveResponseMessage struct {
	THeader RequiredMessageHeader
	IdMail  Type_f5ac91bb
	IdErr   DT_INT
}

func (t *MailRetrieveResponseMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.IdMail, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.IdErr, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+40, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *MailRetrieveResponseMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("IdMail", &t.IdMail, d...)
	cb.Do("IdErr", &t.IdErr, d...)
}

type ActorGroupData struct {
	THeader GBIDHeader
}

func (t *ActorGroupData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+260, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ActorGroupData) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
}

type TimeSinceEventSubcondition struct {
	// Inherits NumericComparisonSubcondition
	// Inherits Subcondition
	// Inherits PolymorphicBase
	DwType           DT_UINT
	BNegate          DT_INT
	EComparisonOp    DT_ENUM
	DwPad            DT_UINT
	ETimeEvent       DT_ENUM
	FlValue          DT_FLOAT
	EActorToEvaluate DT_ENUM
}

func (t *TimeSinceEventSubcondition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BNegate, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.EComparisonOp, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.ETimeEvent, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.FlValue, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.EActorToEvaluate, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TimeSinceEventSubcondition) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("BNegate", &t.BNegate, d...)
	cb.Do("EComparisonOp", &t.EComparisonOp, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("ETimeEvent", &t.ETimeEvent, d...)
	cb.Do("FlValue", &t.FlValue, d...)
	cb.Do("EActorToEvaluate", &t.EActorToEvaluate, d...)
}

type LoreMessage struct {
	THeader RequiredMessageHeader
	SnoLore DT_SNO
}

func (t *LoreMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoLore, r, &Options{
		Flags: 1,
		Group: 59,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+20, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *LoreMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("SnoLore", &t.SnoLore, d...)
}

type Type_88c1160d struct {
	EIndices DT_FIXEDARRAY[*DT_ENUM]
}

func (t *Type_88c1160d) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.EIndices, r, &Options{
		ArrayLength: 8,
		Flags:       1,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_88c1160d) Walk(cb WalkCallback, d ...any) {
	cb.Do("EIndices", &t.EIndices, d...)
}

type ActiveSkillSavedData struct {
	SnoSkill DT_SNO
}

func (t *ActiveSkillSavedData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoSkill, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ActiveSkillSavedData) Walk(cb WalkCallback, d ...any) {
	cb.Do("SnoSkill", &t.SnoSkill, d...)
}

type RoadTypeProperties struct {
	RgbaDebugColor        DT_RGBACOLOR
	SnoTexPattern         DT_SNO
	RgbaColor             DT_RGBACOLOR
	Unk_1626611           DT_FLOAT
	Unk_daf4312           DT_FLOAT
	FlTextureRepeatLength DT_FLOAT
	Unk_9c8a384           DT_RGBACOLOR
	Unk_b6065b            DT_FLOAT
	Unk_e41f4ef           DT_FLOAT
}

func (t *RoadTypeProperties) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.RgbaDebugColor, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.SnoTexPattern, r, &Options{
		Flags: 1,
		Group: 44,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.RgbaColor, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.Unk_1626611, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_daf4312, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.FlTextureRepeatLength, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_9c8a384, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.Unk_b6065b, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.Unk_e41f4ef, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+36, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *RoadTypeProperties) Walk(cb WalkCallback, d ...any) {
	cb.Do("RgbaDebugColor", &t.RgbaDebugColor, d...)
	cb.Do("SnoTexPattern", &t.SnoTexPattern, d...)
	cb.Do("RgbaColor", &t.RgbaColor, d...)
	cb.Do("Unk_1626611", &t.Unk_1626611, d...)
	cb.Do("Unk_daf4312", &t.Unk_daf4312, d...)
	cb.Do("FlTextureRepeatLength", &t.FlTextureRepeatLength, d...)
	cb.Do("Unk_9c8a384", &t.Unk_9c8a384, d...)
	cb.Do("Unk_b6065b", &t.Unk_b6065b, d...)
	cb.Do("Unk_e41f4ef", &t.Unk_e41f4ef, d...)
}

type PowerCallbackBase struct {
	// Inherits PolymorphicBase
	DwType                DT_UINT
	DwPad                 DT_UINT
	SnoTriggerEffectGroup DT_SNO
	BCouldHaveRagdolled   DT_INT
}

func (t *PowerCallbackBase) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoTriggerEffectGroup, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.BCouldHaveRagdolled, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PowerCallbackBase) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("SnoTriggerEffectGroup", &t.SnoTriggerEffectGroup, d...)
	cb.Do("BCouldHaveRagdolled", &t.BCouldHaveRagdolled, d...)
}

type ProcChanceBuffCallbackBase struct {
	// Inherits BuffCallbackBase
	// Inherits PolymorphicBase
	DwType                DT_UINT
	DwPad                 DT_UINT
	SnoTriggerEffectGroup DT_SNO
	ArConditions          DT_POLYMORPHIC_VARIABLEARRAY[*DT_INT64]
	BAlwaysProcs          DT_INT
	DwPadding             DT_UINT
	TProcChance           DT_STRING_FORMULA
}

func (t *ProcChanceBuffCallbackBase) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoTriggerEffectGroup, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ArConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.BAlwaysProcs, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.DwPadding, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.TProcChance, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+88, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ProcChanceBuffCallbackBase) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("SnoTriggerEffectGroup", &t.SnoTriggerEffectGroup, d...)
	cb.Do("ArConditions", &t.ArConditions, d...)
	cb.Do("BAlwaysProcs", &t.BAlwaysProcs, d...)
	cb.Do("DwPadding", &t.DwPadding, d...)
	cb.Do("TProcChance", &t.TProcChance, d...)
}

type GameTestingMonsterSamplingStartMessage struct {
	THeader      RequiredMessageHeader
	SzMarkerName DT_CHARARRAY
	SzGroupType  DT_CHARARRAY
	SnoWorld     DT_SNO
	SnoMonster   DT_SNO
	SnoAffix     DT_SNO
	UCount       DT_UINT
}

func (t *GameTestingMonsterSamplingStartMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SzMarkerName, r, &Options{
		ArrayLength: 64,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.SzGroupType, r, &Options{
		ArrayLength: 16,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.SnoWorld, r, &Options{
		Flags: 1,
		Group: 48,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+100, &t.SnoMonster, r, &Options{
		Flags: 1,
		Group: 1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+104, &t.SnoAffix, r, &Options{
		Flags: 1,
		Group: 107,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+108, &t.UCount, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+112, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *GameTestingMonsterSamplingStartMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("SzMarkerName", &t.SzMarkerName, d...)
	cb.Do("SzGroupType", &t.SzGroupType, d...)
	cb.Do("SnoWorld", &t.SnoWorld, d...)
	cb.Do("SnoMonster", &t.SnoMonster, d...)
	cb.Do("SnoAffix", &t.SnoAffix, d...)
	cb.Do("UCount", &t.UCount, d...)
}

type ScriptEventParamGameTime struct {
	// Inherits ScriptEventParamBase
	// Inherits PolymorphicBase
	DwType            DT_UINT
	EParamType        DT_ENUM
	DwPad             DT_UINT
	EFilterInequality DT_ENUM
	FlTime            DT_FLOAT
}

func (t *ScriptEventParamGameTime) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.EParamType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.EFilterInequality, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.FlTime, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ScriptEventParamGameTime) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("EParamType", &t.EParamType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("EFilterInequality", &t.EFilterInequality, d...)
	cb.Do("FlTime", &t.FlTime, d...)
}

type Int64DataMessage struct {
	THeader RequiredMessageHeader
	NData   DT_INT64
}

func (t *Int64DataMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.NData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Int64DataMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("NData", &t.NData, d...)
}

type ForcedArmorPactCount struct {
	GbidArmorPactType DT_GBID
	NCount            DT_INT
}

func (t *ForcedArmorPactCount) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.GbidArmorPactType, r, &Options{
		Flags: 1,
		Group: 68,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.NCount, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ForcedArmorPactCount) Walk(cb WalkCallback, d ...any) {
	cb.Do("GbidArmorPactType", &t.GbidArmorPactType, d...)
	cb.Do("NCount", &t.NCount, d...)
}

type UIItemTagStyle struct {
	// Inherits UIButtonStyle
	// Inherits UITextStyle
	// Inherits UIWindowStyle
	// Inherits UIControlStyle
	// Inherits PolymorphicBase
	DwType                      DT_UINT
	DwPad                       DT_UINT
	HParentStyle                UIControlHandle
	Unk_441f783                 DT_INT64
	M_eHasModifiedPowerTagMap   DT_TAGMAP[*DT_ENUM]
	TConsoleInput               UIControlConsoleInput
	Unk_b4f614c                 DT_TAGMAP[*DT_ENUM]
	TFont                       UIControlFont
	PtUIControlTagMapIconLabels DT_TAGMAP[*DT_ENUM]
	TIcon                       UIControlIcon
	TClickSounds                UIControlClickSounds
	Unk_10f81f0                 DT_TAGMAP[*DT_ENUM]
}

func (t *UIItemTagStyle) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.HParentStyle, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_441f783, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.M_eHasModifiedPowerTagMap, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.TConsoleInput, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.Unk_b4f614c, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.TFont, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.PtUIControlTagMapIconLabels, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.TIcon, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.TClickSounds, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+144, &t.Unk_10f81f0, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+160, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *UIItemTagStyle) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("HParentStyle", &t.HParentStyle, d...)
	cb.Do("Unk_441f783", &t.Unk_441f783, d...)
	cb.Do("M_eHasModifiedPowerTagMap", &t.M_eHasModifiedPowerTagMap, d...)
	cb.Do("TConsoleInput", &t.TConsoleInput, d...)
	cb.Do("Unk_b4f614c", &t.Unk_b4f614c, d...)
	cb.Do("TFont", &t.TFont, d...)
	cb.Do("PtUIControlTagMapIconLabels", &t.PtUIControlTagMapIconLabels, d...)
	cb.Do("TIcon", &t.TIcon, d...)
	cb.Do("TClickSounds", &t.TClickSounds, d...)
	cb.Do("Unk_10f81f0", &t.Unk_10f81f0, d...)
}

type AnimPayloadData struct {
	PtBoneNames         DT_VARIABLEARRAY[*BoneName]
	Unk_a9ead38         DT_VARIABLEARRAY[*DT_FLOAT]
	Unk_8c9e18f         DT_VARIABLEARRAY[*DT_FLOAT]
	PwvNonlinearOffset  DT_VARIABLEARRAY[*DT_VECTOR3D]
	Unk_5cd81c8         DT_VARIABLEARRAY[*DT_VECTOR3D]
	Unk_fa7ecfb         DT_VARIABLEARRAY[*DT_VECTOR3D]
	Unk_28a8e7b         DT_VARIABLEARRAY[*DT_FLOAT]
	Unk_772730e         DT_VARIABLEARRAY[*DT_FLOAT]
	Unk_7c60205         DT_VARIABLEARRAY[*DT_FLOAT]
	PtDepthOfField      DT_VARIABLEARRAY[*AnimDepthOfField]
	PtTranslationCurves DT_VARIABLEARRAY[*TranslationCurve]
	PtRotationCurves    DT_VARIABLEARRAY[*RotationCurve]
	PtScaleCurves       DT_VARIABLEARRAY[*ScaleCurve]
}

func (t *AnimPayloadData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.PtBoneNames, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_a9ead38, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.Unk_8c9e18f, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.PwvNonlinearOffset, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.Unk_5cd81c8, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.Unk_fa7ecfb, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.Unk_28a8e7b, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.Unk_772730e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.Unk_7c60205, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+144, &t.PtDepthOfField, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+160, &t.PtTranslationCurves, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+176, &t.PtRotationCurves, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+192, &t.PtScaleCurves, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+208, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *AnimPayloadData) Walk(cb WalkCallback, d ...any) {
	cb.Do("PtBoneNames", &t.PtBoneNames, d...)
	cb.Do("Unk_a9ead38", &t.Unk_a9ead38, d...)
	cb.Do("Unk_8c9e18f", &t.Unk_8c9e18f, d...)
	cb.Do("PwvNonlinearOffset", &t.PwvNonlinearOffset, d...)
	cb.Do("Unk_5cd81c8", &t.Unk_5cd81c8, d...)
	cb.Do("Unk_fa7ecfb", &t.Unk_fa7ecfb, d...)
	cb.Do("Unk_28a8e7b", &t.Unk_28a8e7b, d...)
	cb.Do("Unk_772730e", &t.Unk_772730e, d...)
	cb.Do("Unk_7c60205", &t.Unk_7c60205, d...)
	cb.Do("PtDepthOfField", &t.PtDepthOfField, d...)
	cb.Do("PtTranslationCurves", &t.PtTranslationCurves, d...)
	cb.Do("PtRotationCurves", &t.PtRotationCurves, d...)
	cb.Do("PtScaleCurves", &t.PtScaleCurves, d...)
}

type ActorAIData struct {
	PtAIBroadcasts        DT_VARIABLEARRAY[*AIBroadcast]
	GbidAIPropType        DT_GBID
	Unk_af0baa5           DT_INT
	ArAIPropPowerPairings DT_VARIABLEARRAY[*AIPropPowerPairing]
}

func (t *ActorAIData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.PtAIBroadcasts, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.GbidAIPropType, r, &Options{
		Flags: 1,
		Group: 21,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.Unk_af0baa5, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ArAIPropPowerPairings, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+40, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ActorAIData) Walk(cb WalkCallback, d ...any) {
	cb.Do("PtAIBroadcasts", &t.PtAIBroadcasts, d...)
	cb.Do("GbidAIPropType", &t.GbidAIPropType, d...)
	cb.Do("Unk_af0baa5", &t.Unk_af0baa5, d...)
	cb.Do("ArAIPropPowerPairings", &t.ArAIPropPowerPairings, d...)
}

type UIAutoScrollingTextStyleOptionalFieldMapDefaults struct {
	FlScrollerInitialDelay DT_FLOAT
	FlScrollerEndDelay     DT_FLOAT
	FlScrollerRate         DT_FLOAT
	BScrollerHorizontal    DT_INT
	BScrollerRepeat        DT_INT
}

func (t *UIAutoScrollingTextStyleOptionalFieldMapDefaults) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.FlScrollerInitialDelay, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.FlScrollerEndDelay, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.FlScrollerRate, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.BScrollerHorizontal, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BScrollerRepeat, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+20, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *UIAutoScrollingTextStyleOptionalFieldMapDefaults) Walk(cb WalkCallback, d ...any) {
	cb.Do("FlScrollerInitialDelay", &t.FlScrollerInitialDelay, d...)
	cb.Do("FlScrollerEndDelay", &t.FlScrollerEndDelay, d...)
	cb.Do("FlScrollerRate", &t.FlScrollerRate, d...)
	cb.Do("BScrollerHorizontal", &t.BScrollerHorizontal, d...)
	cb.Do("BScrollerRepeat", &t.BScrollerRepeat, d...)
}

type Type_8a12bdb7 struct {
	Unk_19301ba DT_UINT
	Unk_36c0ef4 DT_UINT
}

func (t *Type_8a12bdb7) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Unk_19301ba, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.Unk_36c0ef4, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_8a12bdb7) Walk(cb WalkCallback, d ...any) {
	cb.Do("Unk_19301ba", &t.Unk_19301ba, d...)
	cb.Do("Unk_36c0ef4", &t.Unk_36c0ef4, d...)
}

type PostFXParams struct {
	FlFilterOffset DT_FIXEDARRAY[*DT_FLOAT]
	FlFilterCoeff  DT_FIXEDARRAY[*DT_FLOAT]
}

func (t *PostFXParams) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.FlFilterOffset, r, &Options{
		ArrayLength: 4,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.FlFilterCoeff, r, &Options{
		ArrayLength: 4,
		Flags:       1,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PostFXParams) Walk(cb WalkCallback, d ...any) {
	cb.Do("FlFilterOffset", &t.FlFilterOffset, d...)
	cb.Do("FlFilterCoeff", &t.FlFilterCoeff, d...)
}

type LevelAreaTagsEntry struct {
	THeader GBIDHeader
}

func (t *LevelAreaTagsEntry) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+260, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *LevelAreaTagsEntry) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
}

type UIListBoxStyle struct {
	// Inherits UIWindowStyle
	// Inherits UIControlStyle
	// Inherits PolymorphicBase
	DwType                    DT_UINT
	DwPad                     DT_UINT
	HParentStyle              UIControlHandle
	Unk_441f783               DT_INT64
	M_eHasModifiedPowerTagMap DT_TAGMAP[*DT_ENUM]
	TConsoleInput             UIControlConsoleInput
	Unk_b4f614c               DT_TAGMAP[*DT_ENUM]
	TClickSounds              UIControlClickSounds
	TFont                     UIControlFont
	Unk_59693f9               DT_TAGMAP[*DT_ENUM]
}

func (t *UIListBoxStyle) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.HParentStyle, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_441f783, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.M_eHasModifiedPowerTagMap, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.TConsoleInput, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.Unk_b4f614c, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.TClickSounds, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.TFont, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.Unk_59693f9, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+128, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *UIListBoxStyle) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("HParentStyle", &t.HParentStyle, d...)
	cb.Do("Unk_441f783", &t.Unk_441f783, d...)
	cb.Do("M_eHasModifiedPowerTagMap", &t.M_eHasModifiedPowerTagMap, d...)
	cb.Do("TConsoleInput", &t.TConsoleInput, d...)
	cb.Do("Unk_b4f614c", &t.Unk_b4f614c, d...)
	cb.Do("TClickSounds", &t.TClickSounds, d...)
	cb.Do("TFont", &t.TFont, d...)
	cb.Do("Unk_59693f9", &t.Unk_59693f9, d...)
}

type PlayerClassSubcondition struct {
	// Inherits Subcondition
	// Inherits PolymorphicBase
	DwType       DT_UINT
	BNegate      DT_INT
	DwPad        DT_UINT
	FPlayerClass DT_FIXEDARRAY[*DT_INT]
}

func (t *PlayerClassSubcondition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BNegate, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.FPlayerClass, r, &Options{
		ArrayLength: 5,
		Flags:       1,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PlayerClassSubcondition) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("BNegate", &t.BNegate, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("FPlayerClass", &t.FPlayerClass, d...)
}

type OnGizmoOperatedBuffCallback struct {
	// Inherits BuffCallbackBase
	// Inherits PolymorphicBase
	DwType                DT_UINT
	DwPad                 DT_UINT
	SnoTriggerEffectGroup DT_SNO
	ArConditions          DT_POLYMORPHIC_VARIABLEARRAY[*DT_INT64]
}

func (t *OnGizmoOperatedBuffCallback) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoTriggerEffectGroup, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ArConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *OnGizmoOperatedBuffCallback) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("SnoTriggerEffectGroup", &t.SnoTriggerEffectGroup, d...)
	cb.Do("ArConditions", &t.ArConditions, d...)
}

type Blessings_Table struct {
	// Inherits GameBalanceTable
	// Inherits PolymorphicBase
	DwType   DT_UINT
	DwPad    DT_UINT
	TEntries DT_VARIABLEARRAY[*Blessings]
}

func (t *Blessings_Table) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TEntries, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Blessings_Table) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("TEntries", &t.TEntries, d...)
}

type PowerConditionDamageHasVulnerable struct {
	// Inherits PowerConditionBase
	// Inherits PolymorphicBase
	DwType   DT_UINT
	BInverse DT_INT
	DwPad    DT_UINT
}

func (t *PowerConditionDamageHasVulnerable) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BInverse, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PowerConditionDamageHasVulnerable) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("BInverse", &t.BInverse, d...)
	cb.Do("DwPad", &t.DwPad, d...)
}

type dmHeightSampleMirror struct {
	Height      DT_FLOAT
	Material    DT_WORD
	GameFlags   DT_BYTE
	Unk_38adf8e DT_BYTE
}

func (t *dmHeightSampleMirror) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Height, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.Material, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+6, &t.GameFlags, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+7, &t.Unk_38adf8e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *dmHeightSampleMirror) Walk(cb WalkCallback, d ...any) {
	cb.Do("Height", &t.Height, d...)
	cb.Do("Material", &t.Material, d...)
	cb.Do("GameFlags", &t.GameFlags, d...)
	cb.Do("Unk_38adf8e", &t.Unk_38adf8e, d...)
}

type AIBroadcast struct {
	SnoAIState   DT_SNO
	FlRadius     DT_FLOAT
	SnoCondition DT_SNO
}

func (t *AIBroadcast) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoAIState, r, &Options{
		Flags: 1,
		Group: 4,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.FlRadius, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.SnoCondition, r, &Options{
		Flags: 1,
		Group: 51,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+12, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *AIBroadcast) Walk(cb WalkCallback, d ...any) {
	cb.Do("SnoAIState", &t.SnoAIState, d...)
	cb.Do("FlRadius", &t.FlRadius, d...)
	cb.Do("SnoCondition", &t.SnoCondition, d...)
}

type InstanceGroupInstance struct {
	Transform   PRSTransform
	AabbBounds  AABB
	Unk_d094b9a DT_ENUM
	Unk_334eb2d DT_INT
	DwFlags     DT_UINT
}

func (t *InstanceGroupInstance) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Transform, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.AabbBounds, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.Unk_d094b9a, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.Unk_334eb2d, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.DwFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if _, err := r.Seek(p+76, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *InstanceGroupInstance) Walk(cb WalkCallback, d ...any) {
	cb.Do("Transform", &t.Transform, d...)
	cb.Do("AabbBounds", &t.AabbBounds, d...)
	cb.Do("Unk_d094b9a", &t.Unk_d094b9a, d...)
	cb.Do("Unk_334eb2d", &t.Unk_334eb2d, d...)
	cb.Do("DwFlags", &t.DwFlags, d...)
}

type UnassignSkillMessage struct {
	THeader      RequiredMessageHeader
	NSlot        DT_INT
	NEnchantSlot DT_INT
	BIsEnchant   DT_INT
}

func (t *UnassignSkillMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.NSlot, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.NEnchantSlot, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.BIsEnchant, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+28, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *UnassignSkillMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("NSlot", &t.NSlot, d...)
	cb.Do("NEnchantSlot", &t.NEnchantSlot, d...)
	cb.Do("BIsEnchant", &t.BIsEnchant, d...)
}

type VoiceActorEntry_Table struct {
	// Inherits GameBalanceTable
	// Inherits PolymorphicBase
	DwType   DT_UINT
	DwPad    DT_UINT
	TEntries DT_VARIABLEARRAY[*VoiceActorEntry]
}

func (t *VoiceActorEntry_Table) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TEntries, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *VoiceActorEntry_Table) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("TEntries", &t.TEntries, d...)
}

type ReputationDefinition struct {
	DwFlags               DT_UINT
	DwMaxValue            DT_UINT
	ArReputationLevelList DT_VARIABLEARRAY[*ReputationLevel]
	Unk_3b1b5ee           UIImageHandleReference
	HTierBanner           UIImageHandleReference
}

func (t *ReputationDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwMaxValue, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.ArReputationLevelList, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.Unk_3b1b5ee, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.HTierBanner, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+40, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ReputationDefinition) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwFlags", &t.DwFlags, d...)
	cb.Do("DwMaxValue", &t.DwMaxValue, d...)
	cb.Do("ArReputationLevelList", &t.ArReputationLevelList, d...)
	cb.Do("Unk_3b1b5ee", &t.Unk_3b1b5ee, d...)
	cb.Do("HTierBanner", &t.HTierBanner, d...)
}

type IntDataMessage struct {
	THeader RequiredMessageHeader
	NData   DT_INT
}

func (t *IntDataMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.NData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+20, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *IntDataMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("NData", &t.NData, d...)
}

type RunTimeMaterialVectorValueEntry struct {
	TValue RunTimeMaterialValue_bcVec4
}

func (t *RunTimeMaterialVectorValueEntry) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.TValue, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *RunTimeMaterialVectorValueEntry) Walk(cb WalkCallback, d ...any) {
	cb.Do("TValue", &t.TValue, d...)
}

type GroupTransferQueryMessage struct {
	THeader        RequiredMessageHeader
	Unk_ad293f5    DT_UINT
	EQueryType     DT_ENUM
	SnoDestination DT_SNO
}

func (t *GroupTransferQueryMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_ad293f5, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.EQueryType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SnoDestination, r, &Options{
		Flags: 1,
		Group: 48,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+28, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *GroupTransferQueryMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("Unk_ad293f5", &t.Unk_ad293f5, d...)
	cb.Do("EQueryType", &t.EQueryType, d...)
	cb.Do("SnoDestination", &t.SnoDestination, d...)
}

type PowerConditionHasSkillTag struct {
	// Inherits PowerConditionBase
	// Inherits PolymorphicBase
	DwType      DT_UINT
	BInverse    DT_INT
	DwPad       DT_UINT
	ArSkillTags DT_VARIABLEARRAY[*DT_GBID]
	Unk_56385e4 DT_INT
}

func (t *PowerConditionHasSkillTag) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BInverse, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ArSkillTags, r, &Options{
		Flags: 1,
		Group: 56,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.Unk_56385e4, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PowerConditionHasSkillTag) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("BInverse", &t.BInverse, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("ArSkillTags", &t.ArSkillTags, d...)
	cb.Do("Unk_56385e4", &t.Unk_56385e4, d...)
}

type SkillEnchantSavedData struct {
	SnoSkill DT_SNO
}

func (t *SkillEnchantSavedData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoSkill, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+4, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *SkillEnchantSavedData) Walk(cb WalkCallback, d ...any) {
	cb.Do("SnoSkill", &t.SnoSkill, d...)
}

type Type_8c33d728 struct {
	SnoItem DT_SNO
	SnoDye  DT_SNO
}

func (t *Type_8c33d728) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoItem, r, &Options{
		Flags: 513,
		Group: 73,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.SnoDye, r, &Options{
		Flags: 513,
		Group: 122,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_8c33d728) Walk(cb WalkCallback, d ...any) {
	cb.Do("SnoItem", &t.SnoItem, d...)
	cb.Do("SnoDye", &t.SnoDye, d...)
}

type CampaignArc struct {
	DwID          DT_UINT
	DwFlags       DT_UINT
	SnoReward     DT_SNO
	ArQuestChains DT_VARIABLEARRAY[*CampaignChain]
	Unk_1cc41e6   DT_VARIABLEARRAY[*Type_eda64360]
	Unk_7c3761f   DT_VARIABLEARRAY[*Type_94666cb9]
	DwArcID       DT_UINT
	Unk_8705b44   DT_UINT
}

func (t *CampaignArc) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.DwID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.DwFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.SnoReward, r, &Options{
		Flags: 513,
		Group: 52,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.ArQuestChains, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.Unk_1cc41e6, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.Unk_7c3761f, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.DwArcID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.Unk_8705b44, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+72, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *CampaignArc) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwID", &t.DwID, d...)
	cb.Do("DwFlags", &t.DwFlags, d...)
	cb.Do("SnoReward", &t.SnoReward, d...)
	cb.Do("ArQuestChains", &t.ArQuestChains, d...)
	cb.Do("Unk_1cc41e6", &t.Unk_1cc41e6, d...)
	cb.Do("Unk_7c3761f", &t.Unk_7c3761f, d...)
	cb.Do("DwArcID", &t.DwArcID, d...)
	cb.Do("Unk_8705b44", &t.Unk_8705b44, d...)
}

type ReputationSubcondition struct {
	// Inherits NumericComparisonSubcondition
	// Inherits Subcondition
	// Inherits PolymorphicBase
	DwType        DT_UINT
	BNegate       DT_INT
	EComparisonOp DT_ENUM
	DwPad         DT_UINT
	TPair         ReputationValuePair
}

func (t *ReputationSubcondition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BNegate, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.EComparisonOp, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.TPair, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+40, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ReputationSubcondition) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("BNegate", &t.BNegate, d...)
	cb.Do("EComparisonOp", &t.EComparisonOp, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("TPair", &t.TPair, d...)
}

type TriggerEventShowWarpUI struct {
	// Inherits TriggerEvent
	// Inherits PolymorphicBase
	DwType          DT_UINT
	DwPad           DT_UINT
	TConditions     TriggerConditions
	FGenerated      DT_INT
	Unk_6cba752     DT_INT
	DwParentActorID DT_UINT
	SnoUI           DT_SNO
}

func (t *TriggerEventShowWarpUI) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.FGenerated, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_6cba752, r, &Options{Flags: 16}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.DwParentActorID, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.SnoUI, r, &Options{
		Flags: 1,
		Group: 46,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+88, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TriggerEventShowWarpUI) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("TConditions", &t.TConditions, d...)
	cb.Do("FGenerated", &t.FGenerated, d...)
	cb.Do("Unk_6cba752", &t.Unk_6cba752, d...)
	cb.Do("DwParentActorID", &t.DwParentActorID, d...)
	cb.Do("SnoUI", &t.SnoUI, d...)
}

type GameTestingSmokeSamplingStartMessage struct {
	THeader      RequiredMessageHeader
	SnoSubzone   DT_SNO
	UPlayerCount DT_UINT
}

func (t *GameTestingSmokeSamplingStartMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoSubzone, r, &Options{
		Flags: 1,
		Group: 80,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.UPlayerCount, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *GameTestingSmokeSamplingStartMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("SnoSubzone", &t.SnoSubzone, d...)
	cb.Do("UPlayerCount", &t.UPlayerCount, d...)
}

type ACDChangeActorMessage struct {
	THeader  RequiredMessageHeader
	Ann      DT_ACD_NETWORK_NAME
	SnoActor DT_SNO
}

func (t *ACDChangeActorMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Ann, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SnoActor, r, &Options{
		Flags: 1,
		Group: 1,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+28, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ACDChangeActorMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("Ann", &t.Ann, d...)
	cb.Do("SnoActor", &t.SnoActor, d...)
}

type dmClothBendingConstraintOldMirror struct {
	InvMass DT_VECTOR4D
	Params  DT_VECTOR4D
	Scale   DT_VECTOR4D
	I1      DT_WORD
	I2      DT_WORD
	I3      DT_WORD
	I4      DT_WORD
	Padding DT_FIXEDARRAY[*DT_WORD]
}

func (t *dmClothBendingConstraintOldMirror) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.InvMass, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Params, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.Scale, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.I1, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+50, &t.I2, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.I3, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+54, &t.I4, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.Padding, r, &Options{ArrayLength: 4}); err != nil {
		return err
	}
	if _, err := r.Seek(p+64, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *dmClothBendingConstraintOldMirror) Walk(cb WalkCallback, d ...any) {
	cb.Do("InvMass", &t.InvMass, d...)
	cb.Do("Params", &t.Params, d...)
	cb.Do("Scale", &t.Scale, d...)
	cb.Do("I1", &t.I1, d...)
	cb.Do("I2", &t.I2, d...)
	cb.Do("I3", &t.I3, d...)
	cb.Do("I4", &t.I4, d...)
	cb.Do("Padding", &t.Padding, d...)
}

type CollectAchievementItemRewardsRequest struct {
	THeader        RequiredRequestMessageHeader
	SnoAchievement DT_SNO
}

func (t *CollectAchievementItemRewardsRequest) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.SnoAchievement, r, &Options{
		Flags: 1,
		Group: 99,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *CollectAchievementItemRewardsRequest) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("SnoAchievement", &t.SnoAchievement, d...)
}

type Type_8d0e9d57 struct{}

func (t *Type_8d0e9d57) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if _, err := r.Seek(p+1, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_8d0e9d57) Walk(cb WalkCallback, d ...any) {}

type LevelScalingDefinition struct {
	NLevel                           DT_INT
	FlHPScalar                       DT_FLOAT
	FlXPScalar                       DT_FLOAT
	Unk_9592c2b                      DT_FLOAT
	NAffixItemEquipPower             DT_INT
	NItemPowerDelta                  DT_INT
	NBaseItemPower                   DT_INT
	Unk_bb1a59a                      DT_INT
	Unk_bb1a49c                      DT_INT
	Unk_639d625                      DT_INT
	Unk_639d527                      DT_INT
	FlMonsterNonPhysicalDamageScalar DT_FLOAT
	Unk_d970377                      DT_FIXEDARRAY[*DT_FLOAT]
	Unk_f48a6a1                      DT_FIXEDARRAY[*DT_FLOAT]
	Unk_16d37a5                      DT_FIXEDARRAY[*DT_FLOAT]
	Unk_a2ccfe                       DT_FIXEDARRAY[*DT_FLOAT]
	Unk_5addb48                      DT_FIXEDARRAY[*DT_FLOAT]
	Unk_21af36c                      DT_FIXEDARRAY[*DT_FLOAT]
	Unk_4148916                      DT_FIXEDARRAY[*DT_FLOAT]
	Unk_6c4f6a5                      DT_FLOAT
	Unk_ca0e50c                      DT_FLOAT
	FlPvPDamageScalar                DT_FLOAT
	FlClassBaseDamageScalar          DT_FIXEDARRAY[*DT_FLOAT]
}

func (t *LevelScalingDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.NLevel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.FlHPScalar, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.FlXPScalar, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.Unk_9592c2b, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.NAffixItemEquipPower, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.NItemPowerDelta, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.NBaseItemPower, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.Unk_bb1a59a, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.Unk_bb1a49c, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.Unk_639d625, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.Unk_639d527, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.FlMonsterNonPhysicalDamageScalar, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.Unk_d970377, r, &Options{
		ArrayLength: 2,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.Unk_f48a6a1, r, &Options{
		ArrayLength: 2,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.Unk_16d37a5, r, &Options{
		ArrayLength: 2,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_a2ccfe, r, &Options{
		ArrayLength: 2,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.Unk_5addb48, r, &Options{
		ArrayLength: 2,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.Unk_21af36c, r, &Options{
		ArrayLength: 2,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.Unk_4148916, r, &Options{
		ArrayLength: 2,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+104, &t.Unk_6c4f6a5, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+108, &t.Unk_ca0e50c, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.FlPvPDamageScalar, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+116, &t.FlClassBaseDamageScalar, r, &Options{
		ArrayLength: 5,
		Flags:       1,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+136, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *LevelScalingDefinition) Walk(cb WalkCallback, d ...any) {
	cb.Do("NLevel", &t.NLevel, d...)
	cb.Do("FlHPScalar", &t.FlHPScalar, d...)
	cb.Do("FlXPScalar", &t.FlXPScalar, d...)
	cb.Do("Unk_9592c2b", &t.Unk_9592c2b, d...)
	cb.Do("NAffixItemEquipPower", &t.NAffixItemEquipPower, d...)
	cb.Do("NItemPowerDelta", &t.NItemPowerDelta, d...)
	cb.Do("NBaseItemPower", &t.NBaseItemPower, d...)
	cb.Do("Unk_bb1a59a", &t.Unk_bb1a59a, d...)
	cb.Do("Unk_bb1a49c", &t.Unk_bb1a49c, d...)
	cb.Do("Unk_639d625", &t.Unk_639d625, d...)
	cb.Do("Unk_639d527", &t.Unk_639d527, d...)
	cb.Do("FlMonsterNonPhysicalDamageScalar", &t.FlMonsterNonPhysicalDamageScalar, d...)
	cb.Do("Unk_d970377", &t.Unk_d970377, d...)
	cb.Do("Unk_f48a6a1", &t.Unk_f48a6a1, d...)
	cb.Do("Unk_16d37a5", &t.Unk_16d37a5, d...)
	cb.Do("Unk_a2ccfe", &t.Unk_a2ccfe, d...)
	cb.Do("Unk_5addb48", &t.Unk_5addb48, d...)
	cb.Do("Unk_21af36c", &t.Unk_21af36c, d...)
	cb.Do("Unk_4148916", &t.Unk_4148916, d...)
	cb.Do("Unk_6c4f6a5", &t.Unk_6c4f6a5, d...)
	cb.Do("Unk_ca0e50c", &t.Unk_ca0e50c, d...)
	cb.Do("FlPvPDamageScalar", &t.FlPvPDamageScalar, d...)
	cb.Do("FlClassBaseDamageScalar", &t.FlClassBaseDamageScalar, d...)
}

type GlobalCustomizationData struct {
	// Inherits GlobalBase
	// Inherits PolymorphicBase
	DwType                  DT_UINT
	DwPad                   DT_UINT
	ArInitialDyes           DT_VARIABLEARRAY[*DT_SNO]
	ArFaceChoices           DT_VARIABLEARRAY[*DT_SNO]
	ArHairStyleChoices      DT_VARIABLEARRAY[*DT_SNO]
	ArFacialHairChoices     DT_VARIABLEARRAY[*DT_SNO]
	ArHairColorChoices      DT_VARIABLEARRAY[*DT_SNO]
	ArMarkingShapeChoices   DT_VARIABLEARRAY[*DT_SNO]
	ArMarkingColorChoices   DT_VARIABLEARRAY[*DT_SNO]
	ArJewelryChoices        DT_VARIABLEARRAY[*DT_SNO]
	ArEyeColorChoices       DT_VARIABLEARRAY[*DT_SNO]
	ArMakeupChoices         DT_VARIABLEARRAY[*DT_SNO]
	SnoFallbackFace         DT_SNO
	SnoFallbackHairStyle    DT_SNO
	SnoFallbackHairColor    DT_SNO
	SnoFallbackEyeColor     DT_SNO
	SnoFallbackMarkingColor DT_SNO
	NLastAllocatedRewardId  DT_UINT
}

func (t *GlobalCustomizationData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.ArInitialDyes, r, &Options{
		Flags: 1,
		Group: 122,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.ArFaceChoices, r, &Options{
		Flags: 1,
		Group: 140,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.ArHairStyleChoices, r, &Options{
		Flags: 1,
		Group: 138,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.ArFacialHairChoices, r, &Options{
		Flags: 1,
		Group: 139,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.ArHairColorChoices, r, &Options{
		Flags: 1,
		Group: 134,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.ArMarkingShapeChoices, r, &Options{
		Flags: 1,
		Group: 115,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.ArMarkingColorChoices, r, &Options{
		Flags: 1,
		Group: 133,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.ArJewelryChoices, r, &Options{
		Flags: 1,
		Group: 119,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+144, &t.ArEyeColorChoices, r, &Options{
		Flags: 1,
		Group: 131,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+160, &t.ArMakeupChoices, r, &Options{
		Flags: 1,
		Group: 132,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+176, &t.SnoFallbackFace, r, &Options{
		Flags: 1,
		Group: 140,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+180, &t.SnoFallbackHairStyle, r, &Options{
		Flags: 1,
		Group: 138,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+184, &t.SnoFallbackHairColor, r, &Options{
		Flags: 1,
		Group: 134,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+188, &t.SnoFallbackEyeColor, r, &Options{
		Flags: 1,
		Group: 131,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+192, &t.SnoFallbackMarkingColor, r, &Options{
		Flags: 1,
		Group: 133,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+196, &t.NLastAllocatedRewardId, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+200, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *GlobalCustomizationData) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("ArInitialDyes", &t.ArInitialDyes, d...)
	cb.Do("ArFaceChoices", &t.ArFaceChoices, d...)
	cb.Do("ArHairStyleChoices", &t.ArHairStyleChoices, d...)
	cb.Do("ArFacialHairChoices", &t.ArFacialHairChoices, d...)
	cb.Do("ArHairColorChoices", &t.ArHairColorChoices, d...)
	cb.Do("ArMarkingShapeChoices", &t.ArMarkingShapeChoices, d...)
	cb.Do("ArMarkingColorChoices", &t.ArMarkingColorChoices, d...)
	cb.Do("ArJewelryChoices", &t.ArJewelryChoices, d...)
	cb.Do("ArEyeColorChoices", &t.ArEyeColorChoices, d...)
	cb.Do("ArMakeupChoices", &t.ArMakeupChoices, d...)
	cb.Do("SnoFallbackFace", &t.SnoFallbackFace, d...)
	cb.Do("SnoFallbackHairStyle", &t.SnoFallbackHairStyle, d...)
	cb.Do("SnoFallbackHairColor", &t.SnoFallbackHairColor, d...)
	cb.Do("SnoFallbackEyeColor", &t.SnoFallbackEyeColor, d...)
	cb.Do("SnoFallbackMarkingColor", &t.SnoFallbackMarkingColor, d...)
	cb.Do("NLastAllocatedRewardId", &t.NLastAllocatedRewardId, d...)
}

type PlayAnimationMessageSpec struct {
	DwDuration         DT_UINT
	BForever           DT_INT
	SnoAnim            DT_SNO
	SnoPowerAnimKey    DT_SNO
	EWeaponClass       DT_INT
	NPermutationIndex  DT_INT
	FlAnimSpeedScale   DT_FLOAT
	HFluidObjectsImage DT_OPTIONAL[*DT_UINT]
}

func (t *PlayAnimationMessageSpec) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.DwDuration, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.BForever, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.SnoAnim, r, &Options{
		Flags: 1,
		Group: 6,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.SnoPowerAnimKey, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.EWeaponClass, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.NPermutationIndex, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.FlAnimSpeedScale, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.HFluidObjectsImage, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+36, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PlayAnimationMessageSpec) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwDuration", &t.DwDuration, d...)
	cb.Do("BForever", &t.BForever, d...)
	cb.Do("SnoAnim", &t.SnoAnim, d...)
	cb.Do("SnoPowerAnimKey", &t.SnoPowerAnimKey, d...)
	cb.Do("EWeaponClass", &t.EWeaponClass, d...)
	cb.Do("NPermutationIndex", &t.NPermutationIndex, d...)
	cb.Do("FlAnimSpeedScale", &t.FlAnimSpeedScale, d...)
	cb.Do("HFluidObjectsImage", &t.HFluidObjectsImage, d...)
}

type TriggerProximityData struct {
	PtProxData                   DT_POLYMORPHIC_VARIABLEARRAY[*ProximityDataBase]
	Unk_d871dde                  DT_RANGE[*DT_FLOAT]
	FProximityDetectorPulse      DT_INT
	FProximityDetectorEffect     DT_INT
	FProximityDetectorOneShot    DT_INT
	FProximityDetectorPlayerOnly DT_INT
	Unk_4a90632                  DT_INT
	ETriggerBehavior             DT_ENUM
	SnoQuest                     DT_SNO
	SnoConversation              DT_SNO
}

func (t *TriggerProximityData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.PtProxData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_d871dde, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.FProximityDetectorPulse, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.FProximityDetectorEffect, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.FProximityDetectorOneShot, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.FProximityDetectorPlayerOnly, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.Unk_4a90632, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.ETriggerBehavior, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.SnoQuest, r, &Options{
		Flags: 1,
		Group: 31,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+60, &t.SnoConversation, r, &Options{
		Flags: 1,
		Group: 12,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+64, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TriggerProximityData) Walk(cb WalkCallback, d ...any) {
	cb.Do("PtProxData", &t.PtProxData, d...)
	cb.Do("Unk_d871dde", &t.Unk_d871dde, d...)
	cb.Do("FProximityDetectorPulse", &t.FProximityDetectorPulse, d...)
	cb.Do("FProximityDetectorEffect", &t.FProximityDetectorEffect, d...)
	cb.Do("FProximityDetectorOneShot", &t.FProximityDetectorOneShot, d...)
	cb.Do("FProximityDetectorPlayerOnly", &t.FProximityDetectorPlayerOnly, d...)
	cb.Do("Unk_4a90632", &t.Unk_4a90632, d...)
	cb.Do("ETriggerBehavior", &t.ETriggerBehavior, d...)
	cb.Do("SnoQuest", &t.SnoQuest, d...)
	cb.Do("SnoConversation", &t.SnoConversation, d...)
}

type PetType_Table struct {
	// Inherits GameBalanceTable
	// Inherits PolymorphicBase
	DwType   DT_UINT
	DwPad    DT_UINT
	TEntries DT_VARIABLEARRAY[*PetType]
}

func (t *PetType_Table) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TEntries, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PetType_Table) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("TEntries", &t.TEntries, d...)
}

type TriggerEventShowCaptionUI struct {
	// Inherits TriggerEvent
	// Inherits PolymorphicBase
	DwType          DT_UINT
	DwPad           DT_UINT
	TConditions     TriggerConditions
	FGenerated      DT_INT
	Unk_6cba752     DT_INT
	DwParentActorID DT_UINT
	SnoUI           DT_SNO
	Unk_6316fe8     DT_TAGMAP[*DT_ENUM]
}

func (t *TriggerEventShowCaptionUI) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.FGenerated, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_6cba752, r, &Options{Flags: 16}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.DwParentActorID, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.SnoUI, r, &Options{
		Flags: 1,
		Group: 46,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.Unk_6316fe8, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+104, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TriggerEventShowCaptionUI) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("TConditions", &t.TConditions, d...)
	cb.Do("FGenerated", &t.FGenerated, d...)
	cb.Do("Unk_6cba752", &t.Unk_6cba752, d...)
	cb.Do("DwParentActorID", &t.DwParentActorID, d...)
	cb.Do("SnoUI", &t.SnoUI, d...)
	cb.Do("Unk_6316fe8", &t.Unk_6316fe8, d...)
}

type MaterialBoolValueDefinition struct {
	// Inherits DefaultMaterialValueDefinition
	// Inherits PolymorphicBase
	DwType DT_UINT
	DwPad  DT_UINT
	VValue DT_VECTOR4D
}

func (t *MaterialBoolValueDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.VValue, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *MaterialBoolValueDefinition) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("VValue", &t.VValue, d...)
}

type AttributeFormulaEntry_Table struct {
	// Inherits GameBalanceTable
	// Inherits PolymorphicBase
	DwType   DT_UINT
	DwPad    DT_UINT
	TEntries DT_VARIABLEARRAY[*AttributeFormulaEntry]
}

func (t *AttributeFormulaEntry_Table) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TEntries, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *AttributeFormulaEntry_Table) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("TEntries", &t.TEntries, d...)
}

type GameFoundForTransferMessage struct {
	THeader     RequiredMessageHeader
	IsDungeon   DT_INT
	Unk_70b9617 DT_INT
}

func (t *GameFoundForTransferMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.IsDungeon, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.Unk_70b9617, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *GameFoundForTransferMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("IsDungeon", &t.IsDungeon, d...)
	cb.Do("Unk_70b9617", &t.Unk_70b9617, d...)
}

type PlayerDWordDataMessage struct {
	THeader               RequiredMessageHeader
	DwData                DT_UINT
	DwPlayerGameAccountId DT_UINT
}

func (t *PlayerDWordDataMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.DwData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPlayerGameAccountId, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PlayerDWordDataMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("DwData", &t.DwData, d...)
	cb.Do("DwPlayerGameAccountId", &t.DwPlayerGameAccountId, d...)
}

type WindowPieces struct {
	// Inherits WindowPiecesBase
	// Inherits PolymorphicBase
	DwType       DT_UINT
	DwPad        DT_UINT
	FlImageScale DT_FLOAT
	NPadding     DT_UINT
	HBkgrnd      DT_UINT
	HBorder      DT_UINT
	HCorner      DT_UINT
}

func (t *WindowPieces) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.FlImageScale, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.NPadding, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.HBkgrnd, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.HBorder, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.HCorner, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+40, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *WindowPieces) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("FlImageScale", &t.FlImageScale, d...)
	cb.Do("NPadding", &t.NPadding, d...)
	cb.Do("HBkgrnd", &t.HBkgrnd, d...)
	cb.Do("HBorder", &t.HBorder, d...)
	cb.Do("HCorner", &t.HCorner, d...)
}

type ConsoleEvent struct{}

func (t *ConsoleEvent) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if _, err := r.Seek(p+1, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ConsoleEvent) Walk(cb WalkCallback, d ...any) {}

type PlayerHealthSubcondition struct {
	// Inherits NumericComparisonSubcondition
	// Inherits Subcondition
	// Inherits PolymorphicBase
	DwType        DT_UINT
	BNegate       DT_INT
	EComparisonOp DT_ENUM
	DwPad         DT_UINT
	Unk_6ea5eed   DT_FLOAT
}

func (t *PlayerHealthSubcondition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BNegate, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.EComparisonOp, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.Unk_6ea5eed, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+40, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PlayerHealthSubcondition) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("BNegate", &t.BNegate, d...)
	cb.Do("EComparisonOp", &t.EComparisonOp, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("Unk_6ea5eed", &t.Unk_6ea5eed, d...)
}

type GameTestingWorldEventSamplingStartMessage struct {
	THeader      RequiredMessageHeader
	SzMarkerName DT_CHARARRAY
	SnoSubzone   DT_SNO
	SnoQuest     DT_SNO
}

func (t *GameTestingWorldEventSamplingStartMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SzMarkerName, r, &Options{
		ArrayLength: 64,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.SnoSubzone, r, &Options{
		Flags: 1,
		Group: 80,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.SnoQuest, r, &Options{
		Flags: 1,
		Group: 31,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+88, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *GameTestingWorldEventSamplingStartMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("SzMarkerName", &t.SzMarkerName, d...)
	cb.Do("SnoSubzone", &t.SnoSubzone, d...)
	cb.Do("SnoQuest", &t.SnoQuest, d...)
}

type BloodSealUnlockMessage struct {
	THeader      RequiredMessageHeader
	SnoBloodSeal DT_SNO
}

func (t *BloodSealUnlockMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoBloodSeal, r, &Options{
		Flags: 1,
		Group: 142,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+20, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *BloodSealUnlockMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("SnoBloodSeal", &t.SnoBloodSeal, d...)
}

type LookLink struct {
	DwLookHash DT_UINT
}

func (t *LookLink) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.DwLookHash, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+4, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *LookLink) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwLookHash", &t.DwLookHash, d...)
}

type MarkerAudioVolumeData struct {
	// Inherits MarkerDataBase
	// Inherits PolymorphicBase
	DwType            DT_UINT
	DwPad             DT_UINT
	SnoContext        DT_SNO
	EAudioVolumeShape DT_ENUM
	Unk_d415903       DT_SNO
}

func (t *MarkerAudioVolumeData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoContext, r, &Options{
		Flags: 1,
		Group: 93,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.EAudioVolumeShape, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_d415903, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *MarkerAudioVolumeData) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("SnoContext", &t.SnoContext, d...)
	cb.Do("EAudioVolumeShape", &t.EAudioVolumeShape, d...)
	cb.Do("Unk_d415903", &t.Unk_d415903, d...)
}

type MarkerDoorGizmoData struct {
	FDoorOpen     DT_INT
	Unk_ec10912   DT_INT
	DwPrefixValue DT_INT
}

func (t *MarkerDoorGizmoData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.FDoorOpen, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.Unk_ec10912, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwPrefixValue, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+12, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *MarkerDoorGizmoData) Walk(cb WalkCallback, d ...any) {
	cb.Do("FDoorOpen", &t.FDoorOpen, d...)
	cb.Do("Unk_ec10912", &t.Unk_ec10912, d...)
	cb.Do("DwPrefixValue", &t.DwPrefixValue, d...)
}

type PlayerIsMaxLevelSubcondition struct {
	// Inherits Subcondition
	// Inherits PolymorphicBase
	DwType  DT_UINT
	BNegate DT_INT
	DwPad   DT_UINT
}

func (t *PlayerIsMaxLevelSubcondition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BNegate, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PlayerIsMaxLevelSubcondition) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("BNegate", &t.BNegate, d...)
	cb.Do("DwPad", &t.DwPad, d...)
}

type FlippyMessage struct {
	THeader            RequiredMessageHeader
	AnnLauncher        DT_ACD_NETWORK_NAME
	SnoFlippyParticle  DT_SNO
	SnoActorLoot       DT_SNO
	Unk_fd0f61c        DT_SNO
	WpSource           DT_VECTOR3D
	WpDest             DT_VECTOR3D
	FNoFlippySound     DT_INT
	EEffectItemQuality DT_ENUM
}

func (t *FlippyMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.AnnLauncher, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SnoFlippyParticle, r, &Options{
		Flags: 1,
		Group: 27,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.SnoActorLoot, r, &Options{
		Flags: 1,
		Group: 1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.Unk_fd0f61c, r, &Options{
		Flags: 1,
		Group: 1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.WpSource, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.WpDest, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+60, &t.FNoFlippySound, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.EEffectItemQuality, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+68, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *FlippyMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("AnnLauncher", &t.AnnLauncher, d...)
	cb.Do("SnoFlippyParticle", &t.SnoFlippyParticle, d...)
	cb.Do("SnoActorLoot", &t.SnoActorLoot, d...)
	cb.Do("Unk_fd0f61c", &t.Unk_fd0f61c, d...)
	cb.Do("WpSource", &t.WpSource, d...)
	cb.Do("WpDest", &t.WpDest, d...)
	cb.Do("FNoFlippySound", &t.FNoFlippySound, d...)
	cb.Do("EEffectItemQuality", &t.EEffectItemQuality, d...)
}

type NullProximityData struct {
	// Inherits ProximityDataBase
	// Inherits PolymorphicBase
	DwType DT_UINT
	DwPad  DT_UINT
}

func (t *NullProximityData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *NullProximityData) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
}

type VertexDensitySettings struct {
	NVertexDensityMax DT_FLOAT
}

func (t *VertexDensitySettings) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.NVertexDensityMax, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+4, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *VertexDensitySettings) Walk(cb WalkCallback, d ...any) {
	cb.Do("NVertexDensityMax", &t.NVertexDensityMax, d...)
}

type GBIDDataMessage struct {
	THeader  RequiredMessageHeader
	GbidData DT_GBID
}

func (t *GBIDDataMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.GbidData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+20, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *GBIDDataMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("GbidData", &t.GbidData, d...)
}

type DecalTemplate struct {
	SzName   DT_CSTRING[*DT_BYTE]
	SnoDecal DT_SNO
}

func (t *DecalTemplate) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SzName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoDecal, r, &Options{
		Flags: 1,
		Group: 27,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *DecalTemplate) Walk(cb WalkCallback, d ...any) {
	cb.Do("SzName", &t.SzName, d...)
	cb.Do("SnoDecal", &t.SnoDecal, d...)
}

type PlayerHasFollowerSubcondition struct {
	// Inherits NumericComparisonSubcondition
	// Inherits Subcondition
	// Inherits PolymorphicBase
	DwType        DT_UINT
	BNegate       DT_INT
	EComparisonOp DT_ENUM
	DwPad         DT_UINT
	NNumFollowers DT_INT
}

func (t *PlayerHasFollowerSubcondition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BNegate, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.EComparisonOp, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.NNumFollowers, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+40, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PlayerHasFollowerSubcondition) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("BNegate", &t.BNegate, d...)
	cb.Do("EComparisonOp", &t.EComparisonOp, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("NNumFollowers", &t.NNumFollowers, d...)
}

type InterpolationNode_uint32 struct {
	TValueMin DT_UINT
	TValueMax DT_UINT
	TTime     DT_FLOAT
}

func (t *InterpolationNode_uint32) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.TValueMin, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.TValueMax, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.TTime, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+12, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *InterpolationNode_uint32) Walk(cb WalkCallback, d ...any) {
	cb.Do("TValueMin", &t.TValueMin, d...)
	cb.Do("TValueMax", &t.TValueMax, d...)
	cb.Do("TTime", &t.TTime, d...)
}

type PlayNonPositionalSoundMessage struct {
	THeader  RequiredMessageHeader
	SnoSound DT_SNO
}

func (t *PlayNonPositionalSoundMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoSound, r, &Options{
		Flags: 1,
		Group: 40,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+20, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PlayNonPositionalSoundMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("SnoSound", &t.SnoSound, d...)
}

type Type_904ab211 struct {
	// Inherits PowerConditionBase
	// Inherits PolymorphicBase
	DwType         DT_UINT
	BInverse       DT_INT
	DwPad          DT_UINT
	SzVariableName DT_UINT
	FlValue        DT_FLOAT
}

func (t *Type_904ab211) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BInverse, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SzVariableName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.FlValue, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_904ab211) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("BInverse", &t.BInverse, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("SzVariableName", &t.SzVariableName, d...)
	cb.Do("FlValue", &t.FlValue, d...)
}

type ActorGroup struct {
	UHash  DT_UINT
	SzName DT_CHARARRAY
}

func (t *ActorGroup) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.UHash, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.SzName, r, &Options{
		ArrayLength: 64,
		Flags:       1,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+68, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ActorGroup) Walk(cb WalkCallback, d ...any) {
	cb.Do("UHash", &t.UHash, d...)
	cb.Do("SzName", &t.SzName, d...)
}

type AnimTreeDefinition struct {
	DwMachineTime DT_UINT
	DwFlags       DT_UINT
	PtLeaf        DT_VARIABLEARRAY[*AnimTreeLeaf]
	PtNode        DT_VARIABLEARRAY[*AnimTreeNode]
	PtSyncGroup   DT_VARIABLEARRAY[*DT_INT]
	PtSyncGroups  DT_VARIABLEARRAY[*AnimSyncGroup]
	DwRootNode    DT_UINT
	DwNextID      DT_UINT
	Unk_a7fd7f7   DT_ENUM
}

func (t *AnimTreeDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwMachineTime, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwFlags, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.PtLeaf, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.PtNode, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.PtSyncGroup, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.PtSyncGroups, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.DwRootNode, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.DwNextID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.Unk_a7fd7f7, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+96, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *AnimTreeDefinition) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwMachineTime", &t.DwMachineTime, d...)
	cb.Do("DwFlags", &t.DwFlags, d...)
	cb.Do("PtLeaf", &t.PtLeaf, d...)
	cb.Do("PtNode", &t.PtNode, d...)
	cb.Do("PtSyncGroup", &t.PtSyncGroup, d...)
	cb.Do("PtSyncGroups", &t.PtSyncGroups, d...)
	cb.Do("DwRootNode", &t.DwRootNode, d...)
	cb.Do("DwNextID", &t.DwNextID, d...)
	cb.Do("Unk_a7fd7f7", &t.Unk_a7fd7f7, d...)
}

type SavedTransmog struct {
	BUnlocked       DT_INT
	ArTransmogSlots DT_FIXEDARRAY[*TransmogSlot]
}

func (t *SavedTransmog) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.BUnlocked, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.ArTransmogSlots, r, &Options{
		ArrayLength: 15,
		Flags:       8,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+248, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *SavedTransmog) Walk(cb WalkCallback, d ...any) {
	cb.Do("BUnlocked", &t.BUnlocked, d...)
	cb.Do("ArTransmogSlots", &t.ArTransmogSlots, d...)
}

type FadeGroupParentInfo struct {
	NFadeGroupParent    DT_INT
	ArFadeGroupChildren DT_VARIABLEARRAY[*DT_INT]
}

func (t *FadeGroupParentInfo) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.NFadeGroupParent, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.ArFadeGroupChildren, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *FadeGroupParentInfo) Walk(cb WalkCallback, d ...any) {
	cb.Do("NFadeGroupParent", &t.NFadeGroupParent, d...)
	cb.Do("ArFadeGroupChildren", &t.ArFadeGroupChildren, d...)
}

type OnRetreatCompleteCallback struct {
	// Inherits BuffCallbackBase
	// Inherits PolymorphicBase
	DwType                DT_UINT
	DwPad                 DT_UINT
	SnoTriggerEffectGroup DT_SNO
	ArConditions          DT_POLYMORPHIC_VARIABLEARRAY[*DT_INT64]
}

func (t *OnRetreatCompleteCallback) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoTriggerEffectGroup, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ArConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *OnRetreatCompleteCallback) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("SnoTriggerEffectGroup", &t.SnoTriggerEffectGroup, d...)
	cb.Do("ArConditions", &t.ArConditions, d...)
}

type PowerConditionOnChance struct {
	// Inherits PowerConditionBase
	// Inherits PolymorphicBase
	DwType   DT_UINT
	BInverse DT_INT
	DwPad    DT_UINT
	TChance  DT_STRING_FORMULA
	ESubject DT_ENUM
}

func (t *PowerConditionOnChance) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BInverse, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.TChance, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.ESubject, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+64, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PowerConditionOnChance) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("BInverse", &t.BInverse, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("TChance", &t.TChance, d...)
	cb.Do("ESubject", &t.ESubject, d...)
}

type EnchantAffixChoice struct {
	SnoAffix DT_SNO
	DwSeed   DT_UINT
}

func (t *EnchantAffixChoice) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoAffix, r, &Options{
		Flags: 1,
		Group: 104,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.DwSeed, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *EnchantAffixChoice) Walk(cb WalkCallback, d ...any) {
	cb.Do("SnoAffix", &t.SnoAffix, d...)
	cb.Do("DwSeed", &t.DwSeed, d...)
}

type NPCComponentEntry struct {
	BAny              DT_INT
	PtValidComponents DT_VARIABLEARRAY[*ValidComponent]
}

func (t *NPCComponentEntry) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.BAny, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.PtValidComponents, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *NPCComponentEntry) Walk(cb WalkCallback, d ...any) {
	cb.Do("BAny", &t.BAny, d...)
	cb.Do("PtValidComponents", &t.PtValidComponents, d...)
}

type PetDetachMessage struct {
	THeader             RequiredMessageHeader
	AnnPet              DT_ACD_NETWORK_NAME
	BDisplayChatMessage DT_INT
	Unk_70bf7e7         DT_UINT
}

func (t *PetDetachMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.AnnPet, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.BDisplayChatMessage, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.Unk_70bf7e7, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PetDetachMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("AnnPet", &t.AnnPet, d...)
	cb.Do("BDisplayChatMessage", &t.BDisplayChatMessage, d...)
	cb.Do("Unk_70bf7e7", &t.Unk_70bf7e7, d...)
}

type NPCComponentGroup struct {
	SName        DT_UINT
	ArComponents DT_FIXEDARRAY[*DT_UINT]
	TColorSet    NPCColorSet
}

func (t *NPCComponentGroup) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.ArComponents, r, &Options{
		ArrayLength: 4,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.TColorSet, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+44, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *NPCComponentGroup) Walk(cb WalkCallback, d ...any) {
	cb.Do("SName", &t.SName, d...)
	cb.Do("ArComponents", &t.ArComponents, d...)
	cb.Do("TColorSet", &t.TColorSet, d...)
}

type EncounterDefinition struct {
	SnoSymbol DT_SNO
}

func (t *EncounterDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.SnoSymbol, r, &Options{
		Flags: 513,
		Group: 1,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+12, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *EncounterDefinition) Walk(cb WalkCallback, d ...any) {
	cb.Do("SnoSymbol", &t.SnoSymbol, d...)
}

type UITreeFolderStyleOptionalFieldMapDefaults struct {
	NTreeFolderIndent  DT_INT
	NTreeFolderSpacing DT_INT
}

func (t *UITreeFolderStyleOptionalFieldMapDefaults) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.NTreeFolderIndent, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.NTreeFolderSpacing, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *UITreeFolderStyleOptionalFieldMapDefaults) Walk(cb WalkCallback, d ...any) {
	cb.Do("NTreeFolderIndent", &t.NTreeFolderIndent, d...)
	cb.Do("NTreeFolderSpacing", &t.NTreeFolderSpacing, d...)
}

type DungeonSpawningPoolEntry struct {
	THeader GBIDHeader
}

func (t *DungeonSpawningPoolEntry) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+260, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *DungeonSpawningPoolEntry) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
}

type ReverbDefinition struct {
	TAuxBus          WwiseName
	FlAuxBusGain     DT_FLOAT
	PtStateValues    DT_VARIABLEARRAY[*WwiseSwitchValue]
	PtSwitchValues   DT_VARIABLEARRAY[*WwiseSwitchValue]
	PtGameParameters DT_VARIABLEARRAY[*WwiseGameParameter]
}

func (t *ReverbDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.TAuxBus, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.FlAuxBusGain, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.PtStateValues, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.PtSwitchValues, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.PtGameParameters, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+64, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ReverbDefinition) Walk(cb WalkCallback, d ...any) {
	cb.Do("TAuxBus", &t.TAuxBus, d...)
	cb.Do("FlAuxBusGain", &t.FlAuxBusGain, d...)
	cb.Do("PtStateValues", &t.PtStateValues, d...)
	cb.Do("PtSwitchValues", &t.PtSwitchValues, d...)
	cb.Do("PtGameParameters", &t.PtGameParameters, d...)
}

type ParagonGlyphExperience_Table struct {
	// Inherits GameBalanceTable
	// Inherits PolymorphicBase
	DwType   DT_UINT
	DwPad    DT_UINT
	TEntries DT_VARIABLEARRAY[*ParagonGlyphExperience]
}

func (t *ParagonGlyphExperience_Table) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TEntries, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ParagonGlyphExperience_Table) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("TEntries", &t.TEntries, d...)
}

type PlayerCompletedRepeatableQuestEntry struct {
	SnoQuest        DT_SNO
	NLastOccurrence DT_INT
}

func (t *PlayerCompletedRepeatableQuestEntry) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoQuest, r, &Options{
		Flags: 1,
		Group: 31,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.NLastOccurrence, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PlayerCompletedRepeatableQuestEntry) Walk(cb WalkCallback, d ...any) {
	cb.Do("SnoQuest", &t.SnoQuest, d...)
	cb.Do("NLastOccurrence", &t.NLastOccurrence, d...)
}

type OctreeCube struct {
	WpOrigin DT_VECTOR3D
	WdSize   DT_FLOAT
}

func (t *OctreeCube) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.WpOrigin, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.WdSize, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *OctreeCube) Walk(cb WalkCallback, d ...any) {
	cb.Do("WpOrigin", &t.WpOrigin, d...)
	cb.Do("WdSize", &t.WdSize, d...)
}

type OctreeLeaf struct {
	NPrimitiveIndex DT_INT
	NPrimitiveCount DT_INT
}

func (t *OctreeLeaf) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.NPrimitiveIndex, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.NPrimitiveCount, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *OctreeLeaf) Walk(cb WalkCallback, d ...any) {
	cb.Do("NPrimitiveIndex", &t.NPrimitiveIndex, d...)
	cb.Do("NPrimitiveCount", &t.NPrimitiveCount, d...)
}

type OctreeNode struct {
	PdwChildren DT_FIXEDARRAY[*DT_UINT]
}

func (t *OctreeNode) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.PdwChildren, r, &Options{
		ArrayLength: 8,
		Flags:       1,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *OctreeNode) Walk(cb WalkCallback, d ...any) {
	cb.Do("PdwChildren", &t.PdwChildren, d...)
}

type ClothParamsOverride struct {
	Unk_a16bcb3           DT_INT
	Unk_65f3f66           DT_INT
	Unk_1fdb6b1           DT_INT
	Unk_f1d6a7c           DT_INT
	Unk_7a4300b           DT_INT
	Unk_41b76dd           DT_INT
	Unk_602c192           DT_FLOAT
	FlActorTrackingFactor DT_FLOAT
	FlBoneTrackingFactor  DT_FLOAT
	Unk_b5ff484           DT_FLOAT
	Unk_b8886b            DT_FLOAT
}

func (t *ClothParamsOverride) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Unk_a16bcb3, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.Unk_65f3f66, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.Unk_1fdb6b1, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.Unk_f1d6a7c, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_7a4300b, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.Unk_41b76dd, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_602c192, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.FlActorTrackingFactor, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.FlBoneTrackingFactor, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.Unk_b5ff484, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.Unk_b8886b, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+44, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ClothParamsOverride) Walk(cb WalkCallback, d ...any) {
	cb.Do("Unk_a16bcb3", &t.Unk_a16bcb3, d...)
	cb.Do("Unk_65f3f66", &t.Unk_65f3f66, d...)
	cb.Do("Unk_1fdb6b1", &t.Unk_1fdb6b1, d...)
	cb.Do("Unk_f1d6a7c", &t.Unk_f1d6a7c, d...)
	cb.Do("Unk_7a4300b", &t.Unk_7a4300b, d...)
	cb.Do("Unk_41b76dd", &t.Unk_41b76dd, d...)
	cb.Do("Unk_602c192", &t.Unk_602c192, d...)
	cb.Do("FlActorTrackingFactor", &t.FlActorTrackingFactor, d...)
	cb.Do("FlBoneTrackingFactor", &t.FlBoneTrackingFactor, d...)
	cb.Do("Unk_b5ff484", &t.Unk_b5ff484, d...)
	cb.Do("Unk_b8886b", &t.Unk_b8886b, d...)
}

type GlobalIntensityLevels struct {
	// Inherits GlobalBase
	// Inherits PolymorphicBase
	DwType   DT_UINT
	DwPad    DT_UINT
	ArParams DT_VARIABLEARRAY[*IntensityParam]
}

func (t *GlobalIntensityLevels) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.ArParams, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *GlobalIntensityLevels) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("ArParams", &t.ArParams, d...)
}

type PersistentEventUpdateMessage struct {
	THeader                RequiredMessageHeader
	SnoWorld               DT_SNO
	SnoSubzone             DT_SNO
	SnoQuest               DT_SNO
	WpLocation             DT_VECTOR3D
	SnoMarkerSet           DT_SNO
	NMarkerID              DT_INT
	DwStartTime            DT_INT64
	DwEndTime              DT_INT64
	DwInstanceID           DT_UINT
	GbidSubzoneModifierTag DT_GBID
}

func (t *PersistentEventUpdateMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoWorld, r, &Options{
		Flags: 1,
		Group: 48,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.SnoSubzone, r, &Options{
		Flags: 1,
		Group: 80,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SnoQuest, r, &Options{
		Flags: 1,
		Group: 31,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.WpLocation, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.SnoMarkerSet, r, &Options{
		Flags: 1,
		Group: 24,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.NMarkerID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.DwStartTime, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.DwEndTime, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.DwInstanceID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.GbidSubzoneModifierTag, r, &Options{
		Flags: 1,
		Group: 60,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+72, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PersistentEventUpdateMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("SnoWorld", &t.SnoWorld, d...)
	cb.Do("SnoSubzone", &t.SnoSubzone, d...)
	cb.Do("SnoQuest", &t.SnoQuest, d...)
	cb.Do("WpLocation", &t.WpLocation, d...)
	cb.Do("SnoMarkerSet", &t.SnoMarkerSet, d...)
	cb.Do("NMarkerID", &t.NMarkerID, d...)
	cb.Do("DwStartTime", &t.DwStartTime, d...)
	cb.Do("DwEndTime", &t.DwEndTime, d...)
	cb.Do("DwInstanceID", &t.DwInstanceID, d...)
	cb.Do("GbidSubzoneModifierTag", &t.GbidSubzoneModifierTag, d...)
}

type BroadcastTextMessage struct {
	THeader RequiredMessageHeader
	SzMsg   DT_CHARARRAY
}

func (t *BroadcastTextMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SzMsg, r, &Options{
		ArrayLength: 1024,
		Flags:       1,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+1040, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *BroadcastTextMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("SzMsg", &t.SzMsg, d...)
}

type Type_94666cb9 struct {
	DwID         DT_UINT
	SnoCondition DT_SNO
}

func (t *Type_94666cb9) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.DwID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.SnoCondition, r, &Options{
		Flags: 513,
		Group: 51,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_94666cb9) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwID", &t.DwID, d...)
	cb.Do("SnoCondition", &t.SnoCondition, d...)
}

type FavorLevel struct {
	DwDeltaFavor DT_INT64
}

func (t *FavorLevel) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.DwDeltaFavor, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *FavorLevel) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwDeltaFavor", &t.DwDeltaFavor, d...)
}

type MarkingShapeDefinition struct {
	EClassRestriction  DT_ENUM
	FlEmissiveStrength DT_FLOAT
	HIconImage         DT_UINT
	SnoMaskFace        DT_SNO
	SnoMaskBody        DT_SNO
	SnoDefaultColor    DT_SNO
}

func (t *MarkingShapeDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.EClassRestriction, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.FlEmissiveStrength, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.HIconImage, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.SnoMaskFace, r, &Options{
		Flags: 1,
		Group: 44,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SnoMaskBody, r, &Options{
		Flags: 1,
		Group: 44,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.SnoDefaultColor, r, &Options{
		Flags: 1,
		Group: 133,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *MarkingShapeDefinition) Walk(cb WalkCallback, d ...any) {
	cb.Do("EClassRestriction", &t.EClassRestriction, d...)
	cb.Do("FlEmissiveStrength", &t.FlEmissiveStrength, d...)
	cb.Do("HIconImage", &t.HIconImage, d...)
	cb.Do("SnoMaskFace", &t.SnoMaskFace, d...)
	cb.Do("SnoMaskBody", &t.SnoMaskBody, d...)
	cb.Do("SnoDefaultColor", &t.SnoDefaultColor, d...)
}

type MaxKeyedDungeonCompletedSubcondition struct {
	// Inherits Subcondition
	// Inherits PolymorphicBase
	DwType  DT_UINT
	BNegate DT_INT
	DwPad   DT_UINT
	NValue  DT_INT
}

func (t *MaxKeyedDungeonCompletedSubcondition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BNegate, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.NValue, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *MaxKeyedDungeonCompletedSubcondition) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("BNegate", &t.BNegate, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("NValue", &t.NValue, d...)
}

type DRLGSceneCreationInfo struct {
	NBatchId      DT_INT
	DwTilePosHash DT_UINT
	ETileType     DT_ENUM
	DwNodeId      DT_UINT
	DwGroupId     DT_UINT
	DwFlags       DT_UINT
}

func (t *DRLGSceneCreationInfo) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.NBatchId, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.DwTilePosHash, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.ETileType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwNodeId, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.DwGroupId, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwFlags, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *DRLGSceneCreationInfo) Walk(cb WalkCallback, d ...any) {
	cb.Do("NBatchId", &t.NBatchId, d...)
	cb.Do("DwTilePosHash", &t.DwTilePosHash, d...)
	cb.Do("ETileType", &t.ETileType, d...)
	cb.Do("DwNodeId", &t.DwNodeId, d...)
	cb.Do("DwGroupId", &t.DwGroupId, d...)
	cb.Do("DwFlags", &t.DwFlags, d...)
}

type ActorAIDisperseTierData struct {
	FlDist       DT_FLOAT
	NSlots       DT_INT
	Unk_13fdbf   DT_INT
	SLayer       DT_UINT
	Unk_8680393  DT_INT
	Unk_8337d1e  DT_INT
	Unk_395f1b4  DT_INT
	TValidWindow DT_RANGE[*DT_FLOAT]
	Unk_6ec4d4   DT_INT
	Unk_1281fc2  DT_FLOAT
	Unk_6fb4c8e  DT_FLOAT
	Unk_2392c67  DT_FLOAT
}

func (t *ActorAIDisperseTierData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.FlDist, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.NSlots, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.Unk_13fdbf, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.SLayer, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_8680393, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.Unk_8337d1e, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_395f1b4, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.TValidWindow, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.Unk_6ec4d4, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.Unk_1281fc2, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.Unk_6fb4c8e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.Unk_2392c67, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+52, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ActorAIDisperseTierData) Walk(cb WalkCallback, d ...any) {
	cb.Do("FlDist", &t.FlDist, d...)
	cb.Do("NSlots", &t.NSlots, d...)
	cb.Do("Unk_13fdbf", &t.Unk_13fdbf, d...)
	cb.Do("SLayer", &t.SLayer, d...)
	cb.Do("Unk_8680393", &t.Unk_8680393, d...)
	cb.Do("Unk_8337d1e", &t.Unk_8337d1e, d...)
	cb.Do("Unk_395f1b4", &t.Unk_395f1b4, d...)
	cb.Do("TValidWindow", &t.TValidWindow, d...)
	cb.Do("Unk_6ec4d4", &t.Unk_6ec4d4, d...)
	cb.Do("Unk_1281fc2", &t.Unk_1281fc2, d...)
	cb.Do("Unk_6fb4c8e", &t.Unk_6fb4c8e, d...)
	cb.Do("Unk_2392c67", &t.Unk_2392c67, d...)
}

type Type_954deb71 struct {
	// Inherits BuffCallbackBase
	// Inherits PolymorphicBase
	DwType                DT_UINT
	DwPad                 DT_UINT
	SnoTriggerEffectGroup DT_SNO
	ArConditions          DT_POLYMORPHIC_VARIABLEARRAY[*DT_INT64]
}

func (t *Type_954deb71) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoTriggerEffectGroup, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ArConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_954deb71) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("SnoTriggerEffectGroup", &t.SnoTriggerEffectGroup, d...)
	cb.Do("ArConditions", &t.ArConditions, d...)
}

type PlayerClassCoreStatBenefitEntry struct {
	EContributingCoreStat DT_ENUM
	FlContributionScalar  DT_FLOAT
	EBenefitCondition     DT_ENUM
	Unk_aae71b4           DT_UINT
}

func (t *PlayerClassCoreStatBenefitEntry) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.EContributingCoreStat, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.FlContributionScalar, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.EBenefitCondition, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.Unk_aae71b4, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PlayerClassCoreStatBenefitEntry) Walk(cb WalkCallback, d ...any) {
	cb.Do("EContributingCoreStat", &t.EContributingCoreStat, d...)
	cb.Do("FlContributionScalar", &t.FlContributionScalar, d...)
	cb.Do("EBenefitCondition", &t.EBenefitCondition, d...)
	cb.Do("Unk_aae71b4", &t.Unk_aae71b4, d...)
}

type QuestCallbackSubcondition struct {
	// Inherits QuestSubconditionBase
	// Inherits Subcondition
	// Inherits PolymorphicBase
	DwType       DT_UINT
	BNegate      DT_INT
	SnoQuest     DT_SNO
	DwPad        DT_UINT
	NStepUID     DT_INT
	NCallbackUID DT_UINT
	EComp        DT_ENUM
	NCount       DT_UINT
}

func (t *QuestCallbackSubcondition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BNegate, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SnoQuest, r, &Options{
		Flags: 513,
		Group: 31,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.NStepUID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.NCallbackUID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.EComp, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.NCount, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *QuestCallbackSubcondition) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("BNegate", &t.BNegate, d...)
	cb.Do("SnoQuest", &t.SnoQuest, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("NStepUID", &t.NStepUID, d...)
	cb.Do("NCallbackUID", &t.NCallbackUID, d...)
	cb.Do("EComp", &t.EComp, d...)
	cb.Do("NCount", &t.NCount, d...)
}

type SceneChunk struct {
	Snoname    DT_SNO
	Transform  PRTransform
	TSceneSpec SceneSpecification
}

func (t *SceneChunk) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Snoname, r, &Options{
		Flags: 1,
		Group: 33,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.Transform, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.TSceneSpec, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+88, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *SceneChunk) Walk(cb WalkCallback, d ...any) {
	cb.Do("Snoname", &t.Snoname, d...)
	cb.Do("Transform", &t.Transform, d...)
	cb.Do("TSceneSpec", &t.TSceneSpec, d...)
}

type SceneDefinition struct {
	DwFlags            DT_UINT
	AabbBounds         AABB
	AabbLayerBounds    AABB
	FlGridSize         DT_FLOAT
	ArLayers           DT_VARIABLEARRAY[*DT_SNO]
	TLookLink          LookLink
	ArFadeGroupParents DT_VARIABLEARRAY[*FadeGroupParentInfo]
	SnoAppearance      DT_SNO
	SnoAudioContext    DT_SNO
	FlTileX            DT_FLOAT
	FlTileY            DT_FLOAT
	PtAIPathData       DT_VARIABLEARRAY[*AIPathData]
	TLevelAreaGrid     PaintedSceneGrid
	EDRLGTileType      DT_ENUM
	TAudioContextGrid  PaintedSceneGrid
	TFogMask           FogMask
}

func (t *SceneDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.AabbBounds, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.AabbLayerBounds, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+60, &t.FlGridSize, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.ArLayers, r, &Options{
		Flags: 1,
		Group: 24,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.TLookLink, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.ArFadeGroupParents, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+104, &t.SnoAppearance, r, &Options{
		Flags: 1,
		Group: 9,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+108, &t.SnoAudioContext, r, &Options{
		Flags: 1,
		Group: 93,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.FlTileX, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+116, &t.FlTileY, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.PtAIPathData, r, &Options{Flags: 2097152}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+136, &t.TLevelAreaGrid, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+176, &t.EDRLGTileType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+184, &t.TAudioContextGrid, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+224, &t.TFogMask, r, &Options{Flags: 2097152}); err != nil {
		return err
	}
	if _, err := r.Seek(p+248, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *SceneDefinition) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwFlags", &t.DwFlags, d...)
	cb.Do("AabbBounds", &t.AabbBounds, d...)
	cb.Do("AabbLayerBounds", &t.AabbLayerBounds, d...)
	cb.Do("FlGridSize", &t.FlGridSize, d...)
	cb.Do("ArLayers", &t.ArLayers, d...)
	cb.Do("TLookLink", &t.TLookLink, d...)
	cb.Do("ArFadeGroupParents", &t.ArFadeGroupParents, d...)
	cb.Do("SnoAppearance", &t.SnoAppearance, d...)
	cb.Do("SnoAudioContext", &t.SnoAudioContext, d...)
	cb.Do("FlTileX", &t.FlTileX, d...)
	cb.Do("FlTileY", &t.FlTileY, d...)
	cb.Do("PtAIPathData", &t.PtAIPathData, d...)
	cb.Do("TLevelAreaGrid", &t.TLevelAreaGrid, d...)
	cb.Do("EDRLGTileType", &t.EDRLGTileType, d...)
	cb.Do("TAudioContextGrid", &t.TAudioContextGrid, d...)
	cb.Do("TFogMask", &t.TFogMask, d...)
}

type OperateWorldTierSelectMessage struct {
	THeader  RequiredMessageHeader
	AnnGizmo DT_ACD_NETWORK_NAME
	BSuccess DT_INT
}

func (t *OperateWorldTierSelectMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.AnnGizmo, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.BSuccess, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+28, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *OperateWorldTierSelectMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("AnnGizmo", &t.AnnGizmo, d...)
	cb.Do("BSuccess", &t.BSuccess, d...)
}

type HealthPotionData struct {
	DwID                DT_UINT
	NRequiredLevel      DT_INT
	Unk_96f5779         DT_FLOAT
	Unk_fe56814         DT_FLOAT
	Unk_5cc36f7         DT_FLOAT
	Unk_9a29462         DT_FLOAT
	SnoPotionItem       DT_SNO
	HIconImageActive    DT_UINT
	HIconImageInactive  DT_UINT
	HIconImageChecked   DT_UINT
	HIconImageMouseOver DT_UINT
	HIconImagePushed    DT_UINT
}

func (t *HealthPotionData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.DwID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.NRequiredLevel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.Unk_96f5779, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.Unk_fe56814, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_5cc36f7, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.Unk_9a29462, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SnoPotionItem, r, &Options{
		Flags: 1,
		Group: 73,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.HIconImageActive, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.HIconImageInactive, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.HIconImageChecked, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.HIconImageMouseOver, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.HIconImagePushed, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *HealthPotionData) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwID", &t.DwID, d...)
	cb.Do("NRequiredLevel", &t.NRequiredLevel, d...)
	cb.Do("Unk_96f5779", &t.Unk_96f5779, d...)
	cb.Do("Unk_fe56814", &t.Unk_fe56814, d...)
	cb.Do("Unk_5cc36f7", &t.Unk_5cc36f7, d...)
	cb.Do("Unk_9a29462", &t.Unk_9a29462, d...)
	cb.Do("SnoPotionItem", &t.SnoPotionItem, d...)
	cb.Do("HIconImageActive", &t.HIconImageActive, d...)
	cb.Do("HIconImageInactive", &t.HIconImageInactive, d...)
	cb.Do("HIconImageChecked", &t.HIconImageChecked, d...)
	cb.Do("HIconImageMouseOver", &t.HIconImageMouseOver, d...)
	cb.Do("HIconImagePushed", &t.HIconImagePushed, d...)
}

type MailDeleteResponseMessage struct {
	THeader RequiredMessageHeader
	IdMail  Type_f5ac91bb
	IdErr   DT_INT
}

func (t *MailDeleteResponseMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.IdMail, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.IdErr, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+40, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *MailDeleteResponseMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("IdMail", &t.IdMail, d...)
	cb.Do("IdErr", &t.IdErr, d...)
}

type TrickleMessage struct {
	THeader                       RequiredMessageHeader
	Ann                           DT_ACD_NETWORK_NAME
	SnoActor                      DT_SNO
	TPlace                        SharedServerWorldPlace
	Unk_70bf7e7                   DT_OPTIONAL[*DT_UINT]
	SnoLevelArea                  DT_SNO
	FlHealthPercent               DT_OPTIONAL[*DT_FLOAT]
	Unk_c8448e5                   DT_OPTIONAL[*DT_FLOAT]
	SnoPortalDestWorld            DT_OPTIONAL[*DT_SNO]
	SnoPortalDestLevelArea        DT_OPTIONAL[*DT_SNO]
	SnoItem                       DT_OPTIONAL[*DT_SNO]
	ETeam                         DT_OPTIONAL[*DT_ENUM]
	EConversationIcon             DT_OPTIONAL[*DT_ENUM]
	SnoConversationIconQuest      DT_OPTIONAL[*DT_SNO]
	SnoGizmoStartingQuest         DT_OPTIONAL[*DT_SNO]
	SnoPhasingVisibilityCondition DT_OPTIONAL[*DT_SNO]
	ETrickleInfoType              DT_ENUM
	DwTrickleFlags                DT_UINT
	DwHeadstoneCorpseReviveTime   DT_OPTIONAL[*DT_INT]
	HMinimapIconImage             DT_OPTIONAL[*DT_UINT]
	HMinimapStringLabel           DT_OPTIONAL[*DT_UINT]
	SnoStringList                 DT_OPTIONAL[*DT_SNO]
	FMaxDisplayRangeSq            DT_OPTIONAL[*DT_FLOAT]
	NAction                       DT_OPTIONAL[*DT_INT]
	UEngagedWithRareTime          DT_OPTIONAL[*DT_UINT]
	BInCombat                     DT_OPTIONAL[*DT_INT]
	Unk_c9c5de                    DT_OPTIONAL[*DT_UINT]
}

func (t *TrickleMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Ann, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SnoActor, r, &Options{
		Flags: 1,
		Group: 1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.TPlace, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.Unk_70bf7e7, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.SnoLevelArea, r, &Options{
		Flags: 1,
		Group: 22,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+60, &t.FlHealthPercent, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.Unk_c8448e5, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.SnoPortalDestWorld, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.SnoPortalDestLevelArea, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.SnoItem, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+100, &t.ETeam, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+108, &t.EConversationIcon, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+116, &t.SnoConversationIconQuest, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+124, &t.SnoGizmoStartingQuest, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+132, &t.SnoPhasingVisibilityCondition, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+140, &t.ETrickleInfoType, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+144, &t.DwTrickleFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+148, &t.DwHeadstoneCorpseReviveTime, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+156, &t.HMinimapIconImage, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+164, &t.HMinimapStringLabel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+172, &t.SnoStringList, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+180, &t.FMaxDisplayRangeSq, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+188, &t.NAction, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+196, &t.UEngagedWithRareTime, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+204, &t.BInCombat, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+212, &t.Unk_c9c5de, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+220, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TrickleMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("Ann", &t.Ann, d...)
	cb.Do("SnoActor", &t.SnoActor, d...)
	cb.Do("TPlace", &t.TPlace, d...)
	cb.Do("Unk_70bf7e7", &t.Unk_70bf7e7, d...)
	cb.Do("SnoLevelArea", &t.SnoLevelArea, d...)
	cb.Do("FlHealthPercent", &t.FlHealthPercent, d...)
	cb.Do("Unk_c8448e5", &t.Unk_c8448e5, d...)
	cb.Do("SnoPortalDestWorld", &t.SnoPortalDestWorld, d...)
	cb.Do("SnoPortalDestLevelArea", &t.SnoPortalDestLevelArea, d...)
	cb.Do("SnoItem", &t.SnoItem, d...)
	cb.Do("ETeam", &t.ETeam, d...)
	cb.Do("EConversationIcon", &t.EConversationIcon, d...)
	cb.Do("SnoConversationIconQuest", &t.SnoConversationIconQuest, d...)
	cb.Do("SnoGizmoStartingQuest", &t.SnoGizmoStartingQuest, d...)
	cb.Do("SnoPhasingVisibilityCondition", &t.SnoPhasingVisibilityCondition, d...)
	cb.Do("ETrickleInfoType", &t.ETrickleInfoType, d...)
	cb.Do("DwTrickleFlags", &t.DwTrickleFlags, d...)
	cb.Do("DwHeadstoneCorpseReviveTime", &t.DwHeadstoneCorpseReviveTime, d...)
	cb.Do("HMinimapIconImage", &t.HMinimapIconImage, d...)
	cb.Do("HMinimapStringLabel", &t.HMinimapStringLabel, d...)
	cb.Do("SnoStringList", &t.SnoStringList, d...)
	cb.Do("FMaxDisplayRangeSq", &t.FMaxDisplayRangeSq, d...)
	cb.Do("NAction", &t.NAction, d...)
	cb.Do("UEngagedWithRareTime", &t.UEngagedWithRareTime, d...)
	cb.Do("BInCombat", &t.BInCombat, d...)
	cb.Do("Unk_c9c5de", &t.Unk_c9c5de, d...)
}

type InterpolationPathHeader struct {
	TLoopPointStart       DT_FLOAT
	TLoopPointEnd         DT_FLOAT
	NDistributionFunction DT_ENUM
	Unk_2312508           DT_ENUM
	ArInterpScalar        DT_VARIABLEARRAY[*InterpolationScalar]
	DwFlags               DT_UINT
}

func (t *InterpolationPathHeader) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.TLoopPointStart, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.TLoopPointEnd, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.NDistributionFunction, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.Unk_2312508, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.ArInterpScalar, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.DwFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if _, err := r.Seek(p+40, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *InterpolationPathHeader) Walk(cb WalkCallback, d ...any) {
	cb.Do("TLoopPointStart", &t.TLoopPointStart, d...)
	cb.Do("TLoopPointEnd", &t.TLoopPointEnd, d...)
	cb.Do("NDistributionFunction", &t.NDistributionFunction, d...)
	cb.Do("Unk_2312508", &t.Unk_2312508, d...)
	cb.Do("ArInterpScalar", &t.ArInterpScalar, d...)
	cb.Do("DwFlags", &t.DwFlags, d...)
}

type TransmogEnableMessage struct {
	THeader RequiredMessageHeader
	ESlot   DT_ENUM
	BEnable DT_INT
}

func (t *TransmogEnableMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.ESlot, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.BEnable, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TransmogEnableMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("ESlot", &t.ESlot, d...)
	cb.Do("BEnable", &t.BEnable, d...)
}

type WallPiece struct {
	SnonameObject       DT_SNO_NAME
	SzLookName          DT_UINT
	DwShaderMapOverride DT_UINT
	Unk_189be9b         DT_INT
	Unk_94a2b91         DT_INT
	Unk_d094b9a         DT_ENUM
	FlWeight            DT_FLOAT
	FlFootprint         DT_FLOAT
	EFadeMethod         DT_ENUM
	Unk_da5b372         DT_INT
	Unk_8dea4d9         DT_INT
	NFadeGroup          DT_INT
}

func (t *WallPiece) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnonameObject, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.SzLookName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwShaderMapOverride, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_189be9b, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.Unk_94a2b91, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_d094b9a, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.FlWeight, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.FlFootprint, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.EFadeMethod, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.Unk_da5b372, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.Unk_8dea4d9, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.NFadeGroup, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+52, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *WallPiece) Walk(cb WalkCallback, d ...any) {
	cb.Do("SnonameObject", &t.SnonameObject, d...)
	cb.Do("SzLookName", &t.SzLookName, d...)
	cb.Do("DwShaderMapOverride", &t.DwShaderMapOverride, d...)
	cb.Do("Unk_189be9b", &t.Unk_189be9b, d...)
	cb.Do("Unk_94a2b91", &t.Unk_94a2b91, d...)
	cb.Do("Unk_d094b9a", &t.Unk_d094b9a, d...)
	cb.Do("FlWeight", &t.FlWeight, d...)
	cb.Do("FlFootprint", &t.FlFootprint, d...)
	cb.Do("EFadeMethod", &t.EFadeMethod, d...)
	cb.Do("Unk_da5b372", &t.Unk_da5b372, d...)
	cb.Do("Unk_8dea4d9", &t.Unk_8dea4d9, d...)
	cb.Do("NFadeGroup", &t.NFadeGroup, d...)
}

type RevealSceneMessage struct {
	THeader               RequiredMessageHeader
	IdSWorld              DT_SHARED_SERVER_DATA_ID
	TSceneSpec            SceneCommonSpecification
	IdSScene              DT_SHARED_SERVER_DATA_ID
	SnoScene              DT_SNO
	SnoExclusiveMarkerSet DT_SNO
	Transform             PRTransform
	ArAppliedLabels       DT_FIXEDARRAY[*DT_GBID]
	ArDRLGTiles           DT_FIXEDARRAY[*Type_b3c2ea5e]
	ArDRLGElevations      DT_FIXEDARRAY[*DT_INT]
	DwSceneFlags          DT_UINT
}

func (t *RevealSceneMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.IdSWorld, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.TSceneSpec, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+332, &t.IdSScene, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+340, &t.SnoScene, r, &Options{
		Flags: 1,
		Group: 33,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+344, &t.SnoExclusiveMarkerSet, r, &Options{
		Flags: 1,
		Group: 24,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+348, &t.Transform, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+376, &t.ArAppliedLabels, r, &Options{
		ArrayLength: 256,
		Flags:       9,
		Group:       4,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1404, &t.ArDRLGTiles, r, &Options{
		ArrayLength: 32,
		Flags:       8,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1664, &t.ArDRLGElevations, r, &Options{
		ArrayLength: 4,
		Flags:       8,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1684, &t.DwSceneFlags, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+1688, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *RevealSceneMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("IdSWorld", &t.IdSWorld, d...)
	cb.Do("TSceneSpec", &t.TSceneSpec, d...)
	cb.Do("IdSScene", &t.IdSScene, d...)
	cb.Do("SnoScene", &t.SnoScene, d...)
	cb.Do("SnoExclusiveMarkerSet", &t.SnoExclusiveMarkerSet, d...)
	cb.Do("Transform", &t.Transform, d...)
	cb.Do("ArAppliedLabels", &t.ArAppliedLabels, d...)
	cb.Do("ArDRLGTiles", &t.ArDRLGTiles, d...)
	cb.Do("ArDRLGElevations", &t.ArDRLGElevations, d...)
	cb.Do("DwSceneFlags", &t.DwSceneFlags, d...)
}

type ExperienceLevel_Table struct {
	// Inherits GameBalanceTable
	// Inherits PolymorphicBase
	DwType   DT_UINT
	DwPad    DT_UINT
	TEntries DT_VARIABLEARRAY[*ExperienceLevel]
}

func (t *ExperienceLevel_Table) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TEntries, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ExperienceLevel_Table) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("TEntries", &t.TEntries, d...)
}

type OnAIUpdatePowerCallback struct {
	// Inherits PowerCallbackBase
	// Inherits PolymorphicBase
	DwType                DT_UINT
	DwPad                 DT_UINT
	SnoTriggerEffectGroup DT_SNO
	BCouldHaveRagdolled   DT_INT
}

func (t *OnAIUpdatePowerCallback) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoTriggerEffectGroup, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.BCouldHaveRagdolled, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *OnAIUpdatePowerCallback) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("SnoTriggerEffectGroup", &t.SnoTriggerEffectGroup, d...)
	cb.Do("BCouldHaveRagdolled", &t.BCouldHaveRagdolled, d...)
}

type ScriptEventParamOwnerParty struct {
	// Inherits ScriptEventParamBase
	// Inherits PolymorphicBase
	DwType     DT_UINT
	EParamType DT_ENUM
	DwPad      DT_UINT
}

func (t *ScriptEventParamOwnerParty) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.EParamType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ScriptEventParamOwnerParty) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("EParamType", &t.EParamType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
}

type MonsterSubcondition struct {
	// Inherits Subcondition
	// Inherits PolymorphicBase
	DwType           DT_UINT
	BNegate          DT_INT
	DwPad            DT_UINT
	SnoMonsterActor  DT_SNO
	EActorToEvaluate DT_ENUM
}

func (t *MonsterSubcondition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BNegate, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SnoMonsterActor, r, &Options{
		Flags: 513,
		Group: 1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.EActorToEvaluate, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *MonsterSubcondition) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("BNegate", &t.BNegate, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("SnoMonsterActor", &t.SnoMonsterActor, d...)
	cb.Do("EActorToEvaluate", &t.EActorToEvaluate, d...)
}

type FaceDefinition struct {
	FUsableByClass   DT_FIXEDARRAY[*DT_INT]
	DwSubObjectStyle DT_UINT
}

func (t *FaceDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.FUsableByClass, r, &Options{
		ArrayLength: 5,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.DwSubObjectStyle, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *FaceDefinition) Walk(cb WalkCallback, d ...any) {
	cb.Do("FUsableByClass", &t.FUsableByClass, d...)
	cb.Do("DwSubObjectStyle", &t.DwSubObjectStyle, d...)
}

type UIControlFontOptionalFieldMapDefaults struct {
	SnoFont    DT_SNO
	DwFontSize DT_INT
}

func (t *UIControlFontOptionalFieldMapDefaults) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoFont, r, &Options{
		Flags: 1,
		Group: 19,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.DwFontSize, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *UIControlFontOptionalFieldMapDefaults) Walk(cb WalkCallback, d ...any) {
	cb.Do("SnoFont", &t.SnoFont, d...)
	cb.Do("DwFontSize", &t.DwFontSize, d...)
}

type InterpolationNode_RGBAColor struct {
	TValueMin DT_RGBACOLOR
	TValueMax DT_RGBACOLOR
	TTime     DT_FLOAT
}

func (t *InterpolationNode_RGBAColor) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.TValueMin, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.TValueMax, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.TTime, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+12, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *InterpolationNode_RGBAColor) Walk(cb WalkCallback, d ...any) {
	cb.Do("TValueMin", &t.TValueMin, d...)
	cb.Do("TValueMax", &t.TValueMax, d...)
	cb.Do("TTime", &t.TTime, d...)
}

type ActorMovementPowerData struct {
	Unk_b1f0f4e                     DT_STRING_FORMULA
	AFacingAngleThreshold           DT_FLOAT
	FlFacingDistanceThreshold       DT_FLOAT
	EMoveRateOverride               DT_ENUM
	FlSpeedMultiplier               DT_FLOAT
	BIgnorePathfinding              DT_INT
	Unk_81f023c                     DT_INT
	BDisableDynamicAvoidance        DT_INT
	Unk_9d8eaf7                     DT_INT
	BOnlyStopFromStaticCollision    DT_INT
	Unk_b804e2d                     DT_ENUM
	Unk_9369802                     DT_FLOAT
	SnoAnimKeyOverride              DT_SNO
	GbidDynamicMovementDataOverride DT_GBID
	TPowerStartDistance             DT_STRING_FORMULA
}

func (t *ActorMovementPowerData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Unk_b1f0f4e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.AFacingAngleThreshold, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.FlFacingDistanceThreshold, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.EMoveRateOverride, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.FlSpeedMultiplier, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.BIgnorePathfinding, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.Unk_81f023c, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.BDisableDynamicAvoidance, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+60, &t.Unk_9d8eaf7, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.BOnlyStopFromStaticCollision, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.Unk_b804e2d, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_9369802, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.SnoAnimKeyOverride, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.GbidDynamicMovementDataOverride, r, &Options{
		Flags: 1,
		Group: 34,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.TPowerStartDistance, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+120, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ActorMovementPowerData) Walk(cb WalkCallback, d ...any) {
	cb.Do("Unk_b1f0f4e", &t.Unk_b1f0f4e, d...)
	cb.Do("AFacingAngleThreshold", &t.AFacingAngleThreshold, d...)
	cb.Do("FlFacingDistanceThreshold", &t.FlFacingDistanceThreshold, d...)
	cb.Do("EMoveRateOverride", &t.EMoveRateOverride, d...)
	cb.Do("FlSpeedMultiplier", &t.FlSpeedMultiplier, d...)
	cb.Do("BIgnorePathfinding", &t.BIgnorePathfinding, d...)
	cb.Do("Unk_81f023c", &t.Unk_81f023c, d...)
	cb.Do("BDisableDynamicAvoidance", &t.BDisableDynamicAvoidance, d...)
	cb.Do("Unk_9d8eaf7", &t.Unk_9d8eaf7, d...)
	cb.Do("BOnlyStopFromStaticCollision", &t.BOnlyStopFromStaticCollision, d...)
	cb.Do("Unk_b804e2d", &t.Unk_b804e2d, d...)
	cb.Do("Unk_9369802", &t.Unk_9369802, d...)
	cb.Do("SnoAnimKeyOverride", &t.SnoAnimKeyOverride, d...)
	cb.Do("GbidDynamicMovementDataOverride", &t.GbidDynamicMovementDataOverride, d...)
	cb.Do("TPowerStartDistance", &t.TPowerStartDistance, d...)
}

type IKFrames struct {
	EIKLimb     DT_ENUM
	ArIKWindows DT_VARIABLEARRAY[*IKWindow]
	Unk_f745539 DT_VARIABLEARRAY[*IKWindow]
}

func (t *IKFrames) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.EIKLimb, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.ArIKWindows, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_f745539, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+40, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *IKFrames) Walk(cb WalkCallback, d ...any) {
	cb.Do("EIKLimb", &t.EIKLimb, d...)
	cb.Do("ArIKWindows", &t.ArIKWindows, d...)
	cb.Do("Unk_f745539", &t.Unk_f745539, d...)
}

type MonsterRaritySubcondition struct {
	// Inherits Subcondition
	// Inherits PolymorphicBase
	DwType           DT_UINT
	BNegate          DT_INT
	DwPad            DT_UINT
	ERarity          DT_ENUM
	EActorToEvaluate DT_ENUM
}

func (t *MonsterRaritySubcondition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BNegate, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ERarity, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.EActorToEvaluate, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *MonsterRaritySubcondition) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("BNegate", &t.BNegate, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("ERarity", &t.ERarity, d...)
	cb.Do("EActorToEvaluate", &t.EActorToEvaluate, d...)
}

type DemonScrollRewardChoicePickedMessage struct {
	THeader              RequiredMessageHeader
	SnoScroll            DT_SNO
	NSelectedRewardIndex DT_INT
}

func (t *DemonScrollRewardChoicePickedMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoScroll, r, &Options{
		Flags: 1,
		Group: 95,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.NSelectedRewardIndex, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *DemonScrollRewardChoicePickedMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("SnoScroll", &t.SnoScroll, d...)
	cb.Do("NSelectedRewardIndex", &t.NSelectedRewardIndex, d...)
}

type GlobalSnoTemplatesData struct {
	// Inherits GlobalBase
	// Inherits PolymorphicBase
	DwType                         DT_UINT
	DwPad                          DT_UINT
	TNpcGenerationData             NpcGenerationData
	ArNpcTemplates                 DT_VARIABLEARRAY[*NpcTemplate]
	ArNpcArchetypeTemplates        DT_VARIABLEARRAY[*NpcArchetypeTemplate]
	ArNpcLookTemplates             DT_VARIABLEARRAY[*NpcLookTemplate]
	ArNpcPortrayalTypes            DT_VARIABLEARRAY[*NpcPortrayalType]
	ArNpcFollowerArchetypes        DT_VARIABLEARRAY[*NpcFollowerArchetype]
	ArDecalTemplates               DT_VARIABLEARRAY[*DecalTemplate]
	ArDoorTemplates                DT_VARIABLEARRAY[*GizmoTemplate]
	ArChestTemplates               DT_VARIABLEARRAY[*GizmoTemplate]
	ArSwitchTemplates              DT_VARIABLEARRAY[*GizmoTemplate]
	ArSignTemplates                DT_VARIABLEARRAY[*GizmoTemplate]
	ArQuestChestTemplates          DT_VARIABLEARRAY[*GizmoTemplate]
	ArQuestSwitchTemplates         DT_VARIABLEARRAY[*GizmoTemplate]
	ArChargeableTemplates          DT_VARIABLEARRAY[*GizmoTemplate]
	ArShrineTemplates              DT_VARIABLEARRAY[*GizmoTemplate]
	ArCarryableTemplates           DT_VARIABLEARRAY[*GizmoTemplate]
	ArCarryableReceptacleTemplates DT_VARIABLEARRAY[*GizmoTemplate]
	ArArmorTemplates               DT_VARIABLEARRAY[*StoreProductTemplate]
	Unk_31a18c6                    DT_VARIABLEARRAY[*StoreProductTemplate]
	ArEmblemTemplates              DT_VARIABLEARRAY[*StoreProductTemplate]
	ArEmoteTemplates               DT_VARIABLEARRAY[*StoreProductTemplate]
	ArHeadstoneTemplates           DT_VARIABLEARRAY[*StoreProductTemplate]
	ArMarkingTemplates             DT_VARIABLEARRAY[*StoreProductTemplate]
	ArMountArmorTemplates          DT_VARIABLEARRAY[*StoreProductTemplate]
	ArMountsTemplates              DT_VARIABLEARRAY[*StoreProductTemplate]
	ArMountTrophyTemplates         DT_VARIABLEARRAY[*StoreProductTemplate]
	ArWeaponTemplates              DT_VARIABLEARRAY[*StoreProductTemplate]
	ArDeathTemplates               DT_VARIABLEARRAY[*DeathTemplate]
	ArDeathLookTemplates           DT_VARIABLEARRAY[*DeathLookTemplate]
	ArDeathMaterialTemplates       DT_VARIABLEARRAY[*DeathMaterialTemplate]
}

func (t *GlobalSnoTemplatesData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TNpcGenerationData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.ArNpcTemplates, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.ArNpcArchetypeTemplates, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.ArNpcLookTemplates, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+144, &t.ArNpcPortrayalTypes, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+160, &t.ArNpcFollowerArchetypes, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+176, &t.ArDecalTemplates, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+192, &t.ArDoorTemplates, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+208, &t.ArChestTemplates, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+224, &t.ArSwitchTemplates, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+240, &t.ArSignTemplates, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+256, &t.ArQuestChestTemplates, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+272, &t.ArQuestSwitchTemplates, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+288, &t.ArChargeableTemplates, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+304, &t.ArShrineTemplates, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+320, &t.ArCarryableTemplates, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+336, &t.ArCarryableReceptacleTemplates, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+352, &t.ArArmorTemplates, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+368, &t.Unk_31a18c6, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+384, &t.ArEmblemTemplates, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+400, &t.ArEmoteTemplates, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+416, &t.ArHeadstoneTemplates, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+432, &t.ArMarkingTemplates, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+448, &t.ArMountArmorTemplates, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+464, &t.ArMountsTemplates, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+480, &t.ArMountTrophyTemplates, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+496, &t.ArWeaponTemplates, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+512, &t.ArDeathTemplates, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+528, &t.ArDeathLookTemplates, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+544, &t.ArDeathMaterialTemplates, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+560, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *GlobalSnoTemplatesData) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("TNpcGenerationData", &t.TNpcGenerationData, d...)
	cb.Do("ArNpcTemplates", &t.ArNpcTemplates, d...)
	cb.Do("ArNpcArchetypeTemplates", &t.ArNpcArchetypeTemplates, d...)
	cb.Do("ArNpcLookTemplates", &t.ArNpcLookTemplates, d...)
	cb.Do("ArNpcPortrayalTypes", &t.ArNpcPortrayalTypes, d...)
	cb.Do("ArNpcFollowerArchetypes", &t.ArNpcFollowerArchetypes, d...)
	cb.Do("ArDecalTemplates", &t.ArDecalTemplates, d...)
	cb.Do("ArDoorTemplates", &t.ArDoorTemplates, d...)
	cb.Do("ArChestTemplates", &t.ArChestTemplates, d...)
	cb.Do("ArSwitchTemplates", &t.ArSwitchTemplates, d...)
	cb.Do("ArSignTemplates", &t.ArSignTemplates, d...)
	cb.Do("ArQuestChestTemplates", &t.ArQuestChestTemplates, d...)
	cb.Do("ArQuestSwitchTemplates", &t.ArQuestSwitchTemplates, d...)
	cb.Do("ArChargeableTemplates", &t.ArChargeableTemplates, d...)
	cb.Do("ArShrineTemplates", &t.ArShrineTemplates, d...)
	cb.Do("ArCarryableTemplates", &t.ArCarryableTemplates, d...)
	cb.Do("ArCarryableReceptacleTemplates", &t.ArCarryableReceptacleTemplates, d...)
	cb.Do("ArArmorTemplates", &t.ArArmorTemplates, d...)
	cb.Do("Unk_31a18c6", &t.Unk_31a18c6, d...)
	cb.Do("ArEmblemTemplates", &t.ArEmblemTemplates, d...)
	cb.Do("ArEmoteTemplates", &t.ArEmoteTemplates, d...)
	cb.Do("ArHeadstoneTemplates", &t.ArHeadstoneTemplates, d...)
	cb.Do("ArMarkingTemplates", &t.ArMarkingTemplates, d...)
	cb.Do("ArMountArmorTemplates", &t.ArMountArmorTemplates, d...)
	cb.Do("ArMountsTemplates", &t.ArMountsTemplates, d...)
	cb.Do("ArMountTrophyTemplates", &t.ArMountTrophyTemplates, d...)
	cb.Do("ArWeaponTemplates", &t.ArWeaponTemplates, d...)
	cb.Do("ArDeathTemplates", &t.ArDeathTemplates, d...)
	cb.Do("ArDeathLookTemplates", &t.ArDeathLookTemplates, d...)
	cb.Do("ArDeathMaterialTemplates", &t.ArDeathMaterialTemplates, d...)
}

type PS4ConsoleAwardDefinition struct {
	// Inherits SonyConsoleAwardDefinition
	// Inherits ConsoleAwardDefinition
	// Inherits PolymorphicBase
	DwType          DT_UINT
	UProfileAwardId DT_UINT
	DwPad           DT_UINT
}

func (t *PS4ConsoleAwardDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.UProfileAwardId, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PS4ConsoleAwardDefinition) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("UProfileAwardId", &t.UProfileAwardId, d...)
	cb.Do("DwPad", &t.DwPad, d...)
}

type ActivityDefinition struct {
	TMetadata      ActivityMetadata
	TLinks         ActivityLinks
	Snoname        DT_SNO_NAME
	DwInvalidArcID DT_UINT
	DwArcID        DT_UINT
}

func (t *ActivityDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.TMetadata, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TLinks, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.Snoname, r, &Options{Flags: 513}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.DwInvalidArcID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.DwArcID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ActivityDefinition) Walk(cb WalkCallback, d ...any) {
	cb.Do("TMetadata", &t.TMetadata, d...)
	cb.Do("TLinks", &t.TLinks, d...)
	cb.Do("Snoname", &t.Snoname, d...)
	cb.Do("DwInvalidArcID", &t.DwInvalidArcID, d...)
	cb.Do("DwArcID", &t.DwArcID, d...)
}

type AngularAxisParams struct {
	Unk_9b43ddf DT_FLOAT
	Unk_a4ff40  DT_FLOAT
	AMaxSpeed   DT_FLOAT
}

func (t *AngularAxisParams) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Unk_9b43ddf, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.Unk_a4ff40, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.AMaxSpeed, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+12, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *AngularAxisParams) Walk(cb WalkCallback, d ...any) {
	cb.Do("Unk_9b43ddf", &t.Unk_9b43ddf, d...)
	cb.Do("Unk_a4ff40", &t.Unk_a4ff40, d...)
	cb.Do("AMaxSpeed", &t.AMaxSpeed, d...)
}

type ActivateDungeonKeyMessage struct {
	THeader RequiredMessageHeader
	AnnKey  DT_ACD_NETWORK_NAME
}

func (t *ActivateDungeonKeyMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.AnnKey, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ActivateDungeonKeyMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("AnnKey", &t.AnnKey, d...)
}

type PowerConditionHasBuff struct {
	// Inherits PowerConditionBase
	// Inherits PolymorphicBase
	DwType       DT_UINT
	BInverse     DT_INT
	DwPad        DT_UINT
	ESubject     DT_ENUM
	SnoPower     DT_SNO
	DwBuffDataID DT_UINT
}

func (t *PowerConditionHasBuff) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BInverse, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ESubject, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.SnoPower, r, &Options{
		Flags: 513,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.DwBuffDataID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+40, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PowerConditionHasBuff) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("BInverse", &t.BInverse, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("ESubject", &t.ESubject, d...)
	cb.Do("SnoPower", &t.SnoPower, d...)
	cb.Do("DwBuffDataID", &t.DwBuffDataID, d...)
}

type SkillTreeBonusRequirement struct {
	EStat   DT_ENUM
	NAmount DT_INT
}

func (t *SkillTreeBonusRequirement) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.EStat, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.NAmount, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *SkillTreeBonusRequirement) Walk(cb WalkCallback, d ...any) {
	cb.Do("EStat", &t.EStat, d...)
	cb.Do("NAmount", &t.NAmount, d...)
}

type UIControlClickSounds struct {
	Unk_eae7586 DT_TAGMAP[*DT_ENUM]
}

func (t *UIControlClickSounds) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Unk_eae7586, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *UIControlClickSounds) Walk(cb WalkCallback, d ...any) {
	cb.Do("Unk_eae7586", &t.Unk_eae7586, d...)
}

type MalignantColor struct {
	THeader         GBIDHeader
	HColorName      DT_UINT
	ArMalignantTags DT_FIXEDARRAY[*DT_GBID]
	ESalvageType    DT_ENUM
	Unk_413bde5     DT_SNO
	TSocketIcon     UIImageHandleReference
}

func (t *MalignantColor) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+260, &t.HColorName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+264, &t.ArMalignantTags, r, &Options{
		ArrayLength: 3,
		Flags:       1,
		Group:       66,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+276, &t.ESalvageType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+280, &t.Unk_413bde5, r, &Options{
		Flags: 1,
		Group: 1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+284, &t.TSocketIcon, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+288, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *MalignantColor) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("HColorName", &t.HColorName, d...)
	cb.Do("ArMalignantTags", &t.ArMalignantTags, d...)
	cb.Do("ESalvageType", &t.ESalvageType, d...)
	cb.Do("Unk_413bde5", &t.Unk_413bde5, d...)
	cb.Do("TSocketIcon", &t.TSocketIcon, d...)
}

type VisualInventoryMessage struct {
	THeader    RequiredMessageHeader
	Ann        DT_ACD_NETWORK_NAME
	TEquipment VisualEquipment
}

func (t *VisualInventoryMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Ann, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.TEquipment, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+144, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *VisualInventoryMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("Ann", &t.Ann, d...)
	cb.Do("TEquipment", &t.TEquipment, d...)
}

type UIRActorStyle struct {
	// Inherits UIWindowStyle
	// Inherits UIControlStyle
	// Inherits PolymorphicBase
	DwType                    DT_UINT
	DwPad                     DT_UINT
	HParentStyle              UIControlHandle
	Unk_441f783               DT_INT64
	M_eHasModifiedPowerTagMap DT_TAGMAP[*DT_ENUM]
	TConsoleInput             UIControlConsoleInput
	Unk_b4f614c               DT_TAGMAP[*DT_ENUM]
	Unk_ff11bff               DT_TAGMAP[*DT_ENUM]
}

func (t *UIRActorStyle) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.HParentStyle, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_441f783, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.M_eHasModifiedPowerTagMap, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.TConsoleInput, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.Unk_b4f614c, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.Unk_ff11bff, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+96, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *UIRActorStyle) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("HParentStyle", &t.HParentStyle, d...)
	cb.Do("Unk_441f783", &t.Unk_441f783, d...)
	cb.Do("M_eHasModifiedPowerTagMap", &t.M_eHasModifiedPowerTagMap, d...)
	cb.Do("TConsoleInput", &t.TConsoleInput, d...)
	cb.Do("Unk_b4f614c", &t.Unk_b4f614c, d...)
	cb.Do("Unk_ff11bff", &t.Unk_ff11bff, d...)
}

type AppBone struct {
	DwBoneHash DT_UINT
}

func (t *AppBone) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.DwBoneHash, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+4, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *AppBone) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwBoneHash", &t.DwBoneHash, d...)
}

type ZoneProgressClaimRewardsMessage struct {
	THeader      RequiredMessageHeader
	EZone        DT_ENUM
	NRewardIndex DT_INT
}

func (t *ZoneProgressClaimRewardsMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.EZone, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.NRewardIndex, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ZoneProgressClaimRewardsMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("EZone", &t.EZone, d...)
	cb.Do("NRewardIndex", &t.NRewardIndex, d...)
}

type RecipeDefinition struct {
	TSpecificItem                ItemSpecifierData
	NPotionTier                  DT_INT
	TSigilTierRange              DT_RANGE[*DT_INT]
	SnoItem                      DT_SNO
	SnoDungeon                   DT_SNO
	ECrafterType                 DT_ENUM
	ERecipeType                  DT_ENUM
	DwFlags                      DT_UINT
	NItemPowerBonus              DT_INT
	NCost                        DT_UINT
	GbidCostScalingFormula       DT_GBID
	GbidIngredientScalingFormula DT_GBID
	ArIngredients                DT_VARIABLEARRAY[*RecipeIngredient]
	Unk_c05e260                  DT_VARIABLEARRAY[*Type_78541b1a]
	ArArmorPactsToAdd            DT_VARIABLEARRAY[*ForcedArmorPactCount]
	ArArmorPactsToRemove         DT_VARIABLEARRAY[*ForcedArmorPactCount]
	ArReputationRewards          DT_VARIABLEARRAY[*ReputationValuePair]
	Unk_f4b6cde                  Type_56ff7d6a
}

func (t *RecipeDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.TSpecificItem, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.NPotionTier, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.TSigilTierRange, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.SnoItem, r, &Options{
		Flags: 1,
		Group: 73,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+60, &t.SnoDungeon, r, &Options{
		Flags: 1,
		Group: 48,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.ECrafterType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.ERecipeType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.DwFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.NItemPowerBonus, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.NCost, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.GbidCostScalingFormula, r, &Options{
		Flags: 1,
		Group: 22,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.GbidIngredientScalingFormula, r, &Options{
		Flags: 1,
		Group: 22,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.ArIngredients, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.Unk_c05e260, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.ArArmorPactsToAdd, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+144, &t.ArArmorPactsToRemove, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+160, &t.ArReputationRewards, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+176, &t.Unk_f4b6cde, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+192, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *RecipeDefinition) Walk(cb WalkCallback, d ...any) {
	cb.Do("TSpecificItem", &t.TSpecificItem, d...)
	cb.Do("NPotionTier", &t.NPotionTier, d...)
	cb.Do("TSigilTierRange", &t.TSigilTierRange, d...)
	cb.Do("SnoItem", &t.SnoItem, d...)
	cb.Do("SnoDungeon", &t.SnoDungeon, d...)
	cb.Do("ECrafterType", &t.ECrafterType, d...)
	cb.Do("ERecipeType", &t.ERecipeType, d...)
	cb.Do("DwFlags", &t.DwFlags, d...)
	cb.Do("NItemPowerBonus", &t.NItemPowerBonus, d...)
	cb.Do("NCost", &t.NCost, d...)
	cb.Do("GbidCostScalingFormula", &t.GbidCostScalingFormula, d...)
	cb.Do("GbidIngredientScalingFormula", &t.GbidIngredientScalingFormula, d...)
	cb.Do("ArIngredients", &t.ArIngredients, d...)
	cb.Do("Unk_c05e260", &t.Unk_c05e260, d...)
	cb.Do("ArArmorPactsToAdd", &t.ArArmorPactsToAdd, d...)
	cb.Do("ArArmorPactsToRemove", &t.ArArmorPactsToRemove, d...)
	cb.Do("ArReputationRewards", &t.ArReputationRewards, d...)
	cb.Do("Unk_f4b6cde", &t.Unk_f4b6cde, d...)
}

type UIScrollbarStyleOptionalFieldMapDefaults struct {
	EScrollbarStyle                  DT_ENUM
	BScrollbarVertical               DT_INT
	Unk_5360c2                       DT_INT
	SzScrollbarOnChange              DT_CSTRING[*DT_BYTE]
	SnoScrollbarMouseOverSound       DT_SNO
	SnoScrollbarClickSound           DT_SNO
	EScrollbarVisibility             DT_ENUM
	FlScrollbarBlendSpeed            DT_FLOAT
	FlScrollbarBlendTime             DT_FLOAT
	EBlendEasing                     DT_ENUM
	FlScrollbarControllerSpeedFactor DT_FLOAT
	Unk_aea1165                      DT_INT
	FlMouseWheelScaleFactor          DT_FLOAT
}

func (t *UIScrollbarStyleOptionalFieldMapDefaults) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.EScrollbarStyle, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.BScrollbarVertical, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.Unk_5360c2, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SzScrollbarOnChange, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.SnoScrollbarMouseOverSound, r, &Options{
		Flags: 1,
		Group: 40,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.SnoScrollbarClickSound, r, &Options{
		Flags: 1,
		Group: 40,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.EScrollbarVisibility, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.FlScrollbarBlendSpeed, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.FlScrollbarBlendTime, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.EBlendEasing, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.FlScrollbarControllerSpeedFactor, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+60, &t.Unk_aea1165, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.FlMouseWheelScaleFactor, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+72, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *UIScrollbarStyleOptionalFieldMapDefaults) Walk(cb WalkCallback, d ...any) {
	cb.Do("EScrollbarStyle", &t.EScrollbarStyle, d...)
	cb.Do("BScrollbarVertical", &t.BScrollbarVertical, d...)
	cb.Do("Unk_5360c2", &t.Unk_5360c2, d...)
	cb.Do("SzScrollbarOnChange", &t.SzScrollbarOnChange, d...)
	cb.Do("SnoScrollbarMouseOverSound", &t.SnoScrollbarMouseOverSound, d...)
	cb.Do("SnoScrollbarClickSound", &t.SnoScrollbarClickSound, d...)
	cb.Do("EScrollbarVisibility", &t.EScrollbarVisibility, d...)
	cb.Do("FlScrollbarBlendSpeed", &t.FlScrollbarBlendSpeed, d...)
	cb.Do("FlScrollbarBlendTime", &t.FlScrollbarBlendTime, d...)
	cb.Do("EBlendEasing", &t.EBlendEasing, d...)
	cb.Do("FlScrollbarControllerSpeedFactor", &t.FlScrollbarControllerSpeedFactor, d...)
	cb.Do("Unk_aea1165", &t.Unk_aea1165, d...)
	cb.Do("FlMouseWheelScaleFactor", &t.FlMouseWheelScaleFactor, d...)
}

type ACDTranslateDetPathSpiralMessage struct {
	THeader     RequiredMessageHeader
	Ann         DT_ACD_NETWORK_NAME
	EDPath      DT_ENUM
	VStartPos   DT_VECTOR3D
	VTargetPos  DT_VECTOR3D
	UMoveFlags  DT_UINT
	FlVar0      DT_FLOAT
	FlVar1      DT_FLOAT
	TSinData    DPathSinData
	FlSpeedMult DT_FLOAT
}

func (t *ACDTranslateDetPathSpiralMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Ann, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.EDPath, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.VStartPos, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.VTargetPos, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.UMoveFlags, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.FlVar0, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+60, &t.FlVar1, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.TSinData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.FlSpeedMult, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+100, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ACDTranslateDetPathSpiralMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("Ann", &t.Ann, d...)
	cb.Do("EDPath", &t.EDPath, d...)
	cb.Do("VStartPos", &t.VStartPos, d...)
	cb.Do("VTargetPos", &t.VTargetPos, d...)
	cb.Do("UMoveFlags", &t.UMoveFlags, d...)
	cb.Do("FlVar0", &t.FlVar0, d...)
	cb.Do("FlVar1", &t.FlVar1, d...)
	cb.Do("TSinData", &t.TSinData, d...)
	cb.Do("FlSpeedMult", &t.FlSpeedMult, d...)
}

type Type_9934af2e struct {
	Unk_fbd632           DT_INT
	Unk_dba8ed           DT_FLOAT
	Unk_9a547e8          DT_FLOAT
	Unk_729492a          DT_FLOAT
	Unk_5d592f           DT_FLOAT
	Unk_fa1f9f           DT_RGBACOLOR
	RgbaInvalidAlbedo    DT_RGBACOLOR
	Unk_8569aab          DT_RGBACOLOR
	Unk_b634a56          DT_FLOAT
	Unk_504f06f          DT_FLOAT
	M_flCursorTops       DT_FLOAT
	Unk_b4b9b18          DT_RGBACOLOR
	RgbaInvalidMetalness DT_RGBACOLOR
}

func (t *Type_9934af2e) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Unk_fbd632, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.Unk_dba8ed, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.Unk_9a547e8, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.Unk_729492a, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_5d592f, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.Unk_fa1f9f, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.RgbaInvalidAlbedo, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.Unk_8569aab, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.Unk_b634a56, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.Unk_504f06f, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.M_flCursorTops, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.Unk_b4b9b18, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.RgbaInvalidMetalness, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+52, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_9934af2e) Walk(cb WalkCallback, d ...any) {
	cb.Do("Unk_fbd632", &t.Unk_fbd632, d...)
	cb.Do("Unk_dba8ed", &t.Unk_dba8ed, d...)
	cb.Do("Unk_9a547e8", &t.Unk_9a547e8, d...)
	cb.Do("Unk_729492a", &t.Unk_729492a, d...)
	cb.Do("Unk_5d592f", &t.Unk_5d592f, d...)
	cb.Do("Unk_fa1f9f", &t.Unk_fa1f9f, d...)
	cb.Do("RgbaInvalidAlbedo", &t.RgbaInvalidAlbedo, d...)
	cb.Do("Unk_8569aab", &t.Unk_8569aab, d...)
	cb.Do("Unk_b634a56", &t.Unk_b634a56, d...)
	cb.Do("Unk_504f06f", &t.Unk_504f06f, d...)
	cb.Do("M_flCursorTops", &t.M_flCursorTops, d...)
	cb.Do("Unk_b4b9b18", &t.Unk_b4b9b18, d...)
	cb.Do("RgbaInvalidMetalness", &t.RgbaInvalidMetalness, d...)
}

type NPCLegFootstepTypeOverride struct {
	TComponentId  DT_UINT
	EFootstepType DT_ENUM
}

func (t *NPCLegFootstepTypeOverride) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.TComponentId, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.EFootstepType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *NPCLegFootstepTypeOverride) Walk(cb WalkCallback, d ...any) {
	cb.Do("TComponentId", &t.TComponentId, d...)
	cb.Do("EFootstepType", &t.EFootstepType, d...)
}

type Environment struct {
	TPostFXParams        PostFXParams
	SnoSkyboxActor       DT_SNO
	SnoAudioContext      DT_SNO
	SnoWeather           DT_SNO
	SnoSkylightTex       DT_SNO
	QSkylightTexRotation bcQuat
	SnoOceanMaterial     DT_SNO
	SnoGroundFogMaterial DT_SNO
	FlFarPlaneCap        DT_FLOAT
	SnoOceanAmbient      DT_SNO
	SnoCoastlineAmbient  DT_SNO
	SnoRiverAmbient      DT_SNO
	SnoStreamAmbient     DT_SNO
	SnoCliffEdgeAmbient  DT_SNO
	Unk_f4f9d6f          DT_INT
	Unk_55eead1          DT_FLOAT
	Unk_a7ebd97          DT_INT
}

func (t *Environment) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.TPostFXParams, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.SnoSkyboxActor, r, &Options{
		Flags: 1,
		Group: 1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.SnoAudioContext, r, &Options{
		Flags: 1,
		Group: 93,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.SnoWeather, r, &Options{
		Flags: 1,
		Group: 47,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.SnoSkylightTex, r, &Options{
		Flags: 1,
		Group: 44,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.QSkylightTexRotation, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.SnoOceanMaterial, r, &Options{
		Flags: 1,
		Group: 57,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.SnoGroundFogMaterial, r, &Options{
		Flags: 1,
		Group: 57,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.FlFarPlaneCap, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.SnoOceanAmbient, r, &Options{
		Flags: 1,
		Group: 5,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.SnoCoastlineAmbient, r, &Options{
		Flags: 1,
		Group: 5,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.SnoRiverAmbient, r, &Options{
		Flags: 1,
		Group: 5,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.SnoStreamAmbient, r, &Options{
		Flags: 1,
		Group: 5,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.SnoCliffEdgeAmbient, r, &Options{
		Flags: 1,
		Group: 5,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.Unk_f4f9d6f, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+100, &t.Unk_55eead1, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+104, &t.Unk_a7ebd97, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+108, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Environment) Walk(cb WalkCallback, d ...any) {
	cb.Do("TPostFXParams", &t.TPostFXParams, d...)
	cb.Do("SnoSkyboxActor", &t.SnoSkyboxActor, d...)
	cb.Do("SnoAudioContext", &t.SnoAudioContext, d...)
	cb.Do("SnoWeather", &t.SnoWeather, d...)
	cb.Do("SnoSkylightTex", &t.SnoSkylightTex, d...)
	cb.Do("QSkylightTexRotation", &t.QSkylightTexRotation, d...)
	cb.Do("SnoOceanMaterial", &t.SnoOceanMaterial, d...)
	cb.Do("SnoGroundFogMaterial", &t.SnoGroundFogMaterial, d...)
	cb.Do("FlFarPlaneCap", &t.FlFarPlaneCap, d...)
	cb.Do("SnoOceanAmbient", &t.SnoOceanAmbient, d...)
	cb.Do("SnoCoastlineAmbient", &t.SnoCoastlineAmbient, d...)
	cb.Do("SnoRiverAmbient", &t.SnoRiverAmbient, d...)
	cb.Do("SnoStreamAmbient", &t.SnoStreamAmbient, d...)
	cb.Do("SnoCliffEdgeAmbient", &t.SnoCliffEdgeAmbient, d...)
	cb.Do("Unk_f4f9d6f", &t.Unk_f4f9d6f, d...)
	cb.Do("Unk_55eead1", &t.Unk_55eead1, d...)
	cb.Do("Unk_a7ebd97", &t.Unk_a7ebd97, d...)
}

type ConversationLineSetNode struct {
	// Inherits ConversationScopeNode
	// Inherits ConversationTreeNode
	// Inherits PolymorphicBase
	DwType               DT_UINT
	DwPad                DT_UINT
	DwNodeID             DT_UINT
	DwNextNodeID         DT_UINT
	DwParentNodeID       DT_UINT
	PtNextNode           DT_INT64
	DwFlags              DT_UINT
	SzComment            DT_CSTRING[*DT_BYTE]
	ArChildNodes         DT_POLYMORPHIC_VARIABLEARRAY[*DT_INT64]
	SnoCondition         DT_SNO
	Unk_d8bf9e4          DT_INT
	SnoSpeaker           DT_SNO
	FIsSkipPoint         DT_INT
	Unk_ecabee0          DT_INT
	Unk_2e54e3c          DT_INT
	SnonameAnim          DT_SNO_NAME
	FlDurationAdjustment DT_FLOAT
	ArListenerReactions  DT_VARIABLEARRAY[*ListenerReaction]
	Unk_aae0113          DT_VARIABLEARRAY[*DT_SNO]
	Unk_f95422b          DT_VARIABLEARRAY[*DT_SNO]
	Unk_8cbb06b          DT_SNO_NAME
	SnonameFullVO        DT_SNO_NAME
	Unk_b882e13          DT_INT
	Unk_748463e          DT_INT
	Unk_76d4bd           DT_INT
}

func (t *ConversationLineSetNode) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.DwNodeID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwNextNodeID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.DwParentNodeID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.PtNextNode, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.DwFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.SzComment, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.ArChildNodes, r, &Options{Flags: 262145}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.SnoCondition, r, &Options{
		Flags: 1,
		Group: 51,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.Unk_d8bf9e4, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.SnoSpeaker, r, &Options{
		Flags: 1,
		Group: 72,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+100, &t.FIsSkipPoint, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+104, &t.Unk_ecabee0, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+108, &t.Unk_2e54e3c, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.SnonameAnim, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.FlDurationAdjustment, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.ArListenerReactions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+144, &t.Unk_aae0113, r, &Options{
		Flags: 1,
		Group: 72,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+160, &t.Unk_f95422b, r, &Options{
		Flags: 1,
		Group: 72,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+176, &t.Unk_8cbb06b, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+184, &t.SnonameFullVO, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+192, &t.Unk_b882e13, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+196, &t.Unk_748463e, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+200, &t.Unk_76d4bd, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+208, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ConversationLineSetNode) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("DwNodeID", &t.DwNodeID, d...)
	cb.Do("DwNextNodeID", &t.DwNextNodeID, d...)
	cb.Do("DwParentNodeID", &t.DwParentNodeID, d...)
	cb.Do("PtNextNode", &t.PtNextNode, d...)
	cb.Do("DwFlags", &t.DwFlags, d...)
	cb.Do("SzComment", &t.SzComment, d...)
	cb.Do("ArChildNodes", &t.ArChildNodes, d...)
	cb.Do("SnoCondition", &t.SnoCondition, d...)
	cb.Do("Unk_d8bf9e4", &t.Unk_d8bf9e4, d...)
	cb.Do("SnoSpeaker", &t.SnoSpeaker, d...)
	cb.Do("FIsSkipPoint", &t.FIsSkipPoint, d...)
	cb.Do("Unk_ecabee0", &t.Unk_ecabee0, d...)
	cb.Do("Unk_2e54e3c", &t.Unk_2e54e3c, d...)
	cb.Do("SnonameAnim", &t.SnonameAnim, d...)
	cb.Do("FlDurationAdjustment", &t.FlDurationAdjustment, d...)
	cb.Do("ArListenerReactions", &t.ArListenerReactions, d...)
	cb.Do("Unk_aae0113", &t.Unk_aae0113, d...)
	cb.Do("Unk_f95422b", &t.Unk_f95422b, d...)
	cb.Do("Unk_8cbb06b", &t.Unk_8cbb06b, d...)
	cb.Do("SnonameFullVO", &t.SnonameFullVO, d...)
	cb.Do("Unk_b882e13", &t.Unk_b882e13, d...)
	cb.Do("Unk_748463e", &t.Unk_748463e, d...)
	cb.Do("Unk_76d4bd", &t.Unk_76d4bd, d...)
}

type Type_998a6b26 struct {
	THeader  RequiredMessageHeader
	Ann      DT_ACD_NETWORK_NAME
	FlRadius DT_FLOAT
}

func (t *Type_998a6b26) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Ann, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.FlRadius, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+28, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_998a6b26) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("Ann", &t.Ann, d...)
	cb.Do("FlRadius", &t.FlRadius, d...)
}

type UIHotkeyStyle struct {
	// Inherits UIControlStyle
	// Inherits PolymorphicBase
	DwType                    DT_UINT
	DwPad                     DT_UINT
	HParentStyle              UIControlHandle
	Unk_441f783               DT_INT64
	M_eHasModifiedPowerTagMap DT_TAGMAP[*DT_ENUM]
	Unk_4688828               DT_TAGMAP[*DT_ENUM]
}

func (t *UIHotkeyStyle) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.HParentStyle, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_441f783, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.M_eHasModifiedPowerTagMap, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.Unk_4688828, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+64, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *UIHotkeyStyle) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("HParentStyle", &t.HParentStyle, d...)
	cb.Do("Unk_441f783", &t.Unk_441f783, d...)
	cb.Do("M_eHasModifiedPowerTagMap", &t.M_eHasModifiedPowerTagMap, d...)
	cb.Do("Unk_4688828", &t.Unk_4688828, d...)
}

type PowerScriptParam struct {
	EType DT_ENUM
}

func (t *PowerScriptParam) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.EType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+4, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PowerScriptParam) Walk(cb WalkCallback, d ...any) {
	cb.Do("EType", &t.EType, d...)
}

type KnownListUpdateQuestACDObjectives struct {
	THeader              RequiredMessageHeader
	Ann                  DT_ACD_NETWORK_NAME
	ArQuestACDObjectives DT_FIXEDARRAY[*QuestACDObjective]
}

func (t *KnownListUpdateQuestACDObjectives) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Ann, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ArQuestACDObjectives, r, &Options{
		ArrayLength: 4,
		Flags:       1,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+88, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *KnownListUpdateQuestACDObjectives) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("Ann", &t.Ann, d...)
	cb.Do("ArQuestACDObjectives", &t.ArQuestACDObjectives, d...)
}

type DisplayGameTextMessage struct {
	THeader         RequiredMessageHeader
	SzMsg           DT_CHARARRAY
	FlTimeUntilFade DT_OPTIONAL[*DT_FLOAT]
	NParam1         DT_OPTIONAL[*DT_INT]
	NParam2         DT_OPTIONAL[*DT_INT]
	FIsWarning      DT_OPTIONAL[*DT_INT]
}

func (t *DisplayGameTextMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SzMsg, r, &Options{
		ArrayLength: 1024,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1040, &t.FlTimeUntilFade, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1048, &t.NParam1, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1056, &t.NParam2, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1064, &t.FIsWarning, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+1072, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *DisplayGameTextMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("SzMsg", &t.SzMsg, d...)
	cb.Do("FlTimeUntilFade", &t.FlTimeUntilFade, d...)
	cb.Do("NParam1", &t.NParam1, d...)
	cb.Do("NParam2", &t.NParam2, d...)
	cb.Do("FIsWarning", &t.FIsWarning, d...)
}

type DungeonAffixFamilyEntry_Table struct {
	// Inherits GameBalanceTable
	// Inherits PolymorphicBase
	DwType   DT_UINT
	DwPad    DT_UINT
	TEntries DT_VARIABLEARRAY[*DungeonAffixFamilyEntry]
}

func (t *DungeonAffixFamilyEntry_Table) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TEntries, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *DungeonAffixFamilyEntry_Table) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("TEntries", &t.TEntries, d...)
}

type OnOtherBuffRemovedCallback struct {
	// Inherits BuffCallbackBase
	// Inherits PolymorphicBase
	DwType                DT_UINT
	DwPad                 DT_UINT
	SnoTriggerEffectGroup DT_SNO
	ArConditions          DT_POLYMORPHIC_VARIABLEARRAY[*DT_INT64]
	Unk_880879b           DT_VARIABLEARRAY[*PowerBuffIdentifier]
}

func (t *OnOtherBuffRemovedCallback) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoTriggerEffectGroup, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ArConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.Unk_880879b, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+64, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *OnOtherBuffRemovedCallback) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("SnoTriggerEffectGroup", &t.SnoTriggerEffectGroup, d...)
	cb.Do("ArConditions", &t.ArConditions, d...)
	cb.Do("Unk_880879b", &t.Unk_880879b, d...)
}

type PowerLimitedActorType_Table struct {
	// Inherits GameBalanceTable
	// Inherits PolymorphicBase
	DwType   DT_UINT
	DwPad    DT_UINT
	TEntries DT_VARIABLEARRAY[*PowerLimitedActorType]
}

func (t *PowerLimitedActorType_Table) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TEntries, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PowerLimitedActorType_Table) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("TEntries", &t.TEntries, d...)
}

type SkillTreeSkillRankMod struct {
	GbidRankReward      DT_GBID
	DwRequiredSkillRank DT_UINT
}

func (t *SkillTreeSkillRankMod) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.GbidRankReward, r, &Options{
		Flags: 1,
		Group: 43,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.DwRequiredSkillRank, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *SkillTreeSkillRankMod) Walk(cb WalkCallback, d ...any) {
	cb.Do("GbidRankReward", &t.GbidRankReward, d...)
	cb.Do("DwRequiredSkillRank", &t.DwRequiredSkillRank, d...)
}

type PRTransform struct {
	Q  bcQuat
	Wp DT_VECTOR3D
}

func (t *PRTransform) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Q, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Wp, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+28, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PRTransform) Walk(cb WalkCallback, d ...any) {
	cb.Do("Q", &t.Q, d...)
	cb.Do("Wp", &t.Wp, d...)
}

type AVParams struct {
	TPitch                  AngularAxisParams
	TYaw                    AngularAxisParams
	TRoll                   AngularAxisParams
	TTurret                 AngularAxisParams
	TFOV                    AngularAxisParams
	TMovementSpeed          LinearAxisParams
	TElevationMovementSpeed LinearAxisParams
	Unk_6399d3e             DT_FLOAT
	FlScrollSensitivity     DT_FLOAT
	FlRotateSensitivity     DT_FLOAT
	FlZoomSensitivity       DT_FLOAT
	FlOrbitSensitivity      DT_FLOAT
	FlTrackSensitivity      DT_FLOAT
	FlRollSensitivity       DT_FLOAT
	BInvertPan              DT_INT
	BInvertCameraY          DT_INT
}

func (t *AVParams) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.TPitch, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.TYaw, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.TRoll, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.TTurret, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.TFOV, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+60, &t.TMovementSpeed, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.TElevationMovementSpeed, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.Unk_6399d3e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.FlScrollSensitivity, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.FlRotateSensitivity, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.FlZoomSensitivity, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+100, &t.FlOrbitSensitivity, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+104, &t.FlTrackSensitivity, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+108, &t.FlRollSensitivity, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.BInvertPan, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+116, &t.BInvertCameraY, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+120, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *AVParams) Walk(cb WalkCallback, d ...any) {
	cb.Do("TPitch", &t.TPitch, d...)
	cb.Do("TYaw", &t.TYaw, d...)
	cb.Do("TRoll", &t.TRoll, d...)
	cb.Do("TTurret", &t.TTurret, d...)
	cb.Do("TFOV", &t.TFOV, d...)
	cb.Do("TMovementSpeed", &t.TMovementSpeed, d...)
	cb.Do("TElevationMovementSpeed", &t.TElevationMovementSpeed, d...)
	cb.Do("Unk_6399d3e", &t.Unk_6399d3e, d...)
	cb.Do("FlScrollSensitivity", &t.FlScrollSensitivity, d...)
	cb.Do("FlRotateSensitivity", &t.FlRotateSensitivity, d...)
	cb.Do("FlZoomSensitivity", &t.FlZoomSensitivity, d...)
	cb.Do("FlOrbitSensitivity", &t.FlOrbitSensitivity, d...)
	cb.Do("FlTrackSensitivity", &t.FlTrackSensitivity, d...)
	cb.Do("FlRollSensitivity", &t.FlRollSensitivity, d...)
	cb.Do("BInvertPan", &t.BInvertPan, d...)
	cb.Do("BInvertCameraY", &t.BInvertCameraY, d...)
}

type VectorPath struct {
	TPathData InterpolationPath_bcVec3
}

func (t *VectorPath) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.TPathData, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+56, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *VectorPath) Walk(cb WalkCallback, d ...any) {
	cb.Do("TPathData", &t.TPathData, d...)
}

type HirelingSavedData struct {
	THireling            DT_FIXEDARRAY[*HirelingInfo]
	EActiveHireling      DT_ENUM
	DwAvailableHirelings DT_UINT
}

func (t *HirelingSavedData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THireling, r, &Options{
		ArrayLength: 3,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.EActiveHireling, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+100, &t.DwAvailableHirelings, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+104, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *HirelingSavedData) Walk(cb WalkCallback, d ...any) {
	cb.Do("THireling", &t.THireling, d...)
	cb.Do("EActiveHireling", &t.EActiveHireling, d...)
	cb.Do("DwAvailableHirelings", &t.DwAvailableHirelings, d...)
}

type IncludePath struct {
	SzPath DT_CSTRING[*DT_BYTE]
}

func (t *IncludePath) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SzPath, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *IncludePath) Walk(cb WalkCallback, d ...any) {
	cb.Do("SzPath", &t.SzPath, d...)
}

type DyeDefinition struct {
	Unk_1290fc4    DT_INT
	ArColorSamples DT_FIXEDARRAY[*DT_RGBACOLORVALUE]
	FlRoughness    DT_FIXEDARRAY[*DT_FLOAT]
	Unk_f04c7fb    DT_FIXEDARRAY[*DT_RGBACOLOR]
}

func (t *DyeDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.Unk_1290fc4, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.ArColorSamples, r, &Options{ArrayLength: 24}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+396, &t.FlRoughness, r, &Options{
		ArrayLength: 8,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+428, &t.Unk_f04c7fb, r, &Options{
		ArrayLength: 4,
		Flags:       1,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+444, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *DyeDefinition) Walk(cb WalkCallback, d ...any) {
	cb.Do("Unk_1290fc4", &t.Unk_1290fc4, d...)
	cb.Do("ArColorSamples", &t.ArColorSamples, d...)
	cb.Do("FlRoughness", &t.FlRoughness, d...)
	cb.Do("Unk_f04c7fb", &t.Unk_f04c7fb, d...)
}

type NPCInteractOptionsMessage struct {
	THeader         RequiredMessageHeader
	AnnTalkingTo    DT_ACD_NETWORK_NAME
	TNPCInteraction DT_FIXEDARRAY[*NPCInteraction]
	EPreferredMenu  DT_ENUM
}

func (t *NPCInteractOptionsMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.AnnTalkingTo, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.TNPCInteraction, r, &Options{
		ArrayLength: 30,
		Flags:       8,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+748, &t.EPreferredMenu, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+752, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *NPCInteractOptionsMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("AnnTalkingTo", &t.AnnTalkingTo, d...)
	cb.Do("TNPCInteraction", &t.TNPCInteraction, d...)
	cb.Do("EPreferredMenu", &t.EPreferredMenu, d...)
}

type RopeEffectMessageACDToACD struct {
	THeader           RequiredMessageHeader
	SnoRope           DT_SNO
	AnnFrom           DT_ACD_NETWORK_NAME
	EPositionFrom     DT_ENUM
	AnnTo             DT_ACD_NETWORK_NAME
	AnnOrigin         DT_ACD_NETWORK_NAME
	EPositionTo       DT_ENUM
	BIgnoreOwnerAlpha DT_INT
}

func (t *RopeEffectMessageACDToACD) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoRope, r, &Options{
		Flags: 1,
		Group: 32,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.AnnFrom, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.EPositionFrom, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.AnnTo, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.AnnOrigin, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.EPositionTo, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.BIgnoreOwnerAlpha, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+56, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *RopeEffectMessageACDToACD) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("SnoRope", &t.SnoRope, d...)
	cb.Do("AnnFrom", &t.AnnFrom, d...)
	cb.Do("EPositionFrom", &t.EPositionFrom, d...)
	cb.Do("AnnTo", &t.AnnTo, d...)
	cb.Do("AnnOrigin", &t.AnnOrigin, d...)
	cb.Do("EPositionTo", &t.EPositionTo, d...)
	cb.Do("BIgnoreOwnerAlpha", &t.BIgnoreOwnerAlpha, d...)
}

type Type_9b106a7f struct {
	TComponentId      DT_UINT
	ArTorsoComponents DT_VARIABLEARRAY[*DT_UINT]
	ArLegComponents   DT_VARIABLEARRAY[*DT_UINT]
	ArHelmComponents  DT_VARIABLEARRAY[*DT_UINT]
}

func (t *Type_9b106a7f) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.TComponentId, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.ArTorsoComponents, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ArLegComponents, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.ArHelmComponents, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+56, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_9b106a7f) Walk(cb WalkCallback, d ...any) {
	cb.Do("TComponentId", &t.TComponentId, d...)
	cb.Do("ArTorsoComponents", &t.ArTorsoComponents, d...)
	cb.Do("ArLegComponents", &t.ArLegComponents, d...)
	cb.Do("ArHelmComponents", &t.ArHelmComponents, d...)
}

type PowerConditionIsMonsterRarity struct {
	// Inherits PowerConditionBase
	// Inherits PolymorphicBase
	DwType            DT_UINT
	BInverse          DT_INT
	DwPad             DT_UINT
	ESubject          DT_ENUM
	ArMonsterRarities DT_VARIABLEARRAY[*DT_ENUM]
}

func (t *PowerConditionIsMonsterRarity) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BInverse, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ESubject, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.ArMonsterRarities, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PowerConditionIsMonsterRarity) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("BInverse", &t.BInverse, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("ESubject", &t.ESubject, d...)
	cb.Do("ArMonsterRarities", &t.ArMonsterRarities, d...)
}

type DynamicPortalInfo struct {
	SzName  DT_UINT
	TInfo   PortalInfo
	DwValue DT_UINT
}

func (t *DynamicPortalInfo) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SzName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.TInfo, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+220, &t.DwValue, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+224, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *DynamicPortalInfo) Walk(cb WalkCallback, d ...any) {
	cb.Do("SzName", &t.SzName, d...)
	cb.Do("TInfo", &t.TInfo, d...)
	cb.Do("DwValue", &t.DwValue, d...)
}

type TriggerEventFadeMonsters struct {
	// Inherits TriggerEventRangedDuration
	// Inherits TriggerEvent
	// Inherits PolymorphicBase
	DwType           DT_UINT
	TConditions      TriggerConditions
	FGenerated       DT_INT
	Unk_6cba752      DT_INT
	DwParentActorID  DT_UINT
	TDuration        DT_FLOAT
	DwTriggerFlags   DT_UINT
	DwTriggerFlagsEx DT_UINT
	TCleanup         TriggerCleanup
	Unk_49e9257      DT_INT
	Unk_5490979      DT_INT
	DwPad            DT_UINT
	Unk_e04001f      DT_INT
}

func (t *TriggerEventFadeMonsters) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.FGenerated, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_6cba752, r, &Options{Flags: 16}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.DwParentActorID, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.TDuration, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.DwTriggerFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.DwTriggerFlagsEx, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.TCleanup, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+116, &t.Unk_49e9257, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.Unk_5490979, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+124, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.Unk_e04001f, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+136, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TriggerEventFadeMonsters) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("TConditions", &t.TConditions, d...)
	cb.Do("FGenerated", &t.FGenerated, d...)
	cb.Do("Unk_6cba752", &t.Unk_6cba752, d...)
	cb.Do("DwParentActorID", &t.DwParentActorID, d...)
	cb.Do("TDuration", &t.TDuration, d...)
	cb.Do("DwTriggerFlags", &t.DwTriggerFlags, d...)
	cb.Do("DwTriggerFlagsEx", &t.DwTriggerFlagsEx, d...)
	cb.Do("TCleanup", &t.TCleanup, d...)
	cb.Do("Unk_49e9257", &t.Unk_49e9257, d...)
	cb.Do("Unk_5490979", &t.Unk_5490979, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("Unk_e04001f", &t.Unk_e04001f, d...)
}

type RewardDefinition struct {
	UID              DT_UINT
	TType            DT_ENUM
	UFlags           DT_UINT
	TCurrency        DT_ENUM
	UQuantity        DT_UINT
	SnoItem          DT_SNO
	SnoPlayerTitle   DT_SNO
	SnoStoreProduct  DT_SNO
	SnoTrackedReward DT_SNO
	SnoEmblem        DT_SNO
}

func (t *RewardDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.UID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.TType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.UFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.TCurrency, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.UQuantity, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.SnoItem, r, &Options{
		Flags: 1,
		Group: 73,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SnoPlayerTitle, r, &Options{
		Flags: 1,
		Group: 120,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.SnoStoreProduct, r, &Options{
		Flags: 1,
		Group: 110,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.SnoTrackedReward, r, &Options{
		Flags: 1,
		Group: 126,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.SnoEmblem, r, &Options{
		Flags: 1,
		Group: 121,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+40, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *RewardDefinition) Walk(cb WalkCallback, d ...any) {
	cb.Do("UID", &t.UID, d...)
	cb.Do("TType", &t.TType, d...)
	cb.Do("UFlags", &t.UFlags, d...)
	cb.Do("TCurrency", &t.TCurrency, d...)
	cb.Do("UQuantity", &t.UQuantity, d...)
	cb.Do("SnoItem", &t.SnoItem, d...)
	cb.Do("SnoPlayerTitle", &t.SnoPlayerTitle, d...)
	cb.Do("SnoStoreProduct", &t.SnoStoreProduct, d...)
	cb.Do("SnoTrackedReward", &t.SnoTrackedReward, d...)
	cb.Do("SnoEmblem", &t.SnoEmblem, d...)
}

type SimpleCommandFrameMessage struct {
	THeader RequiredCommandFrameMessageHeader
}

func (t *SimpleCommandFrameMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+20, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *SimpleCommandFrameMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
}

type UIDateTimeStyle struct {
	// Inherits UITextStyle
	// Inherits UIWindowStyle
	// Inherits UIControlStyle
	// Inherits PolymorphicBase
	DwType                      DT_UINT
	DwPad                       DT_UINT
	HParentStyle                UIControlHandle
	Unk_441f783                 DT_INT64
	M_eHasModifiedPowerTagMap   DT_TAGMAP[*DT_ENUM]
	TConsoleInput               UIControlConsoleInput
	Unk_b4f614c                 DT_TAGMAP[*DT_ENUM]
	TFont                       UIControlFont
	PtUIControlTagMapIconLabels DT_TAGMAP[*DT_ENUM]
	EDateTimeType               DT_ENUM
	TDefaultSettings            UIDateTimeSettings
	TSeasonSettings             UIDateTimeSettings
}

func (t *UIDateTimeStyle) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.HParentStyle, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_441f783, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.M_eHasModifiedPowerTagMap, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.TConsoleInput, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.Unk_b4f614c, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.TFont, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.PtUIControlTagMapIconLabels, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.EDateTimeType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.TDefaultSettings, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+144, &t.TSeasonSettings, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+168, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *UIDateTimeStyle) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("HParentStyle", &t.HParentStyle, d...)
	cb.Do("Unk_441f783", &t.Unk_441f783, d...)
	cb.Do("M_eHasModifiedPowerTagMap", &t.M_eHasModifiedPowerTagMap, d...)
	cb.Do("TConsoleInput", &t.TConsoleInput, d...)
	cb.Do("Unk_b4f614c", &t.Unk_b4f614c, d...)
	cb.Do("TFont", &t.TFont, d...)
	cb.Do("PtUIControlTagMapIconLabels", &t.PtUIControlTagMapIconLabels, d...)
	cb.Do("EDateTimeType", &t.EDateTimeType, d...)
	cb.Do("TDefaultSettings", &t.TDefaultSettings, d...)
	cb.Do("TSeasonSettings", &t.TSeasonSettings, d...)
}

type NPCColorSet struct {
	ArEquipmentDyes DT_FIXEDARRAY[*DT_SNO]
	NHairColor      DT_INT
	NSkinColor      DT_INT
}

func (t *NPCColorSet) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.ArEquipmentDyes, r, &Options{
		ArrayLength: 4,
		Flags:       1,
		Group:       122,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.NHairColor, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.NSkinColor, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *NPCColorSet) Walk(cb WalkCallback, d ...any) {
	cb.Do("ArEquipmentDyes", &t.ArEquipmentDyes, d...)
	cb.Do("NHairColor", &t.NHairColor, d...)
	cb.Do("NSkinColor", &t.NSkinColor, d...)
}

type PowerResourceCost struct {
	EType            DT_ENUM
	TMinRequired     DT_STRING_FORMULA
	TInitialCost     DT_STRING_FORMULA
	TChannellingCost DT_STRING_FORMULA
}

func (t *PowerResourceCost) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.EType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.TMinRequired, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.TInitialCost, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.TChannellingCost, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+104, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PowerResourceCost) Walk(cb WalkCallback, d ...any) {
	cb.Do("EType", &t.EType, d...)
	cb.Do("TMinRequired", &t.TMinRequired, d...)
	cb.Do("TInitialCost", &t.TInitialCost, d...)
	cb.Do("TChannellingCost", &t.TChannellingCost, d...)
}

type ACDLookAtMessage struct {
	THeader   RequiredMessageHeader
	AnnSrc    DT_ACD_NETWORK_NAME
	AnnTarget DT_ACD_NETWORK_NAME
}

func (t *ACDLookAtMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.AnnSrc, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.AnnTarget, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ACDLookAtMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("AnnSrc", &t.AnnSrc, d...)
	cb.Do("AnnTarget", &t.AnnTarget, d...)
}

type ActorFaceHelper struct {
	TContent AppearanceAndMaterialContent
}

func (t *ActorFaceHelper) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.TContent, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ActorFaceHelper) Walk(cb WalkCallback, d ...any) {
	cb.Do("TContent", &t.TContent, d...)
}

type MailReadMessage struct {
	THeader RequiredMessageHeader
	IdMail  Type_f5ac91bb
}

func (t *MailReadMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.IdMail, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *MailReadMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("IdMail", &t.IdMail, d...)
}

type NameSuffixPairing struct{}

func (t *NameSuffixPairing) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if _, err := r.Seek(p+1, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *NameSuffixPairing) Walk(cb WalkCallback, d ...any) {}

type FloatingAmountMessage struct {
	THeader RequiredMessageHeader
	WpPlace SharedServerWorldPlace
	UAmount DT_INT64
	EType   DT_ENUM
}

func (t *FloatingAmountMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.WpPlace, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.UAmount, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.EType, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+56, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *FloatingAmountMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("WpPlace", &t.WpPlace, d...)
	cb.Do("UAmount", &t.UAmount, d...)
	cb.Do("EType", &t.EType, d...)
}

type SpeedTreeWind struct {
	// Inherits SpeedTreeWindBase
	// Inherits PolymorphicBase
	DwType  DT_UINT
	DwPad   DT_UINT
	TParams SpeedTreeWindParams
}

func (t *SpeedTreeWind) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TParams, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+1376, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *SpeedTreeWind) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("TParams", &t.TParams, d...)
}

type SkillDeclaration struct {
	SnoPower  DT_SNO
	NLevelMod DT_INT
}

func (t *SkillDeclaration) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoPower, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.NLevelMod, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *SkillDeclaration) Walk(cb WalkCallback, d ...any) {
	cb.Do("SnoPower", &t.SnoPower, d...)
	cb.Do("NLevelMod", &t.NLevelMod, d...)
}

type PrefetchActorMessage struct {
	THeader     RequiredMessageHeader
	NEntryCount DT_UINT
	NBatchIndex DT_OPTIONAL[*DT_UINT]
	NBatchTotal DT_OPTIONAL[*DT_UINT]
	AtEntries   DT_FIXEDARRAY[*PrefetchActorMessageEntry]
}

func (t *PrefetchActorMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.NEntryCount, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.NBatchIndex, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.NBatchTotal, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.AtEntries, r, &Options{
		ArrayLength: 15,
		Flags:       1,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+19656, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PrefetchActorMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("NEntryCount", &t.NEntryCount, d...)
	cb.Do("NBatchIndex", &t.NBatchIndex, d...)
	cb.Do("NBatchTotal", &t.NBatchTotal, d...)
	cb.Do("AtEntries", &t.AtEntries, d...)
}

type SerializeData struct {
	DwOffset       DT_INT
	DwSizeAndFlags DT_INT
}

func (t *SerializeData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.DwOffset, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.DwSizeAndFlags, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *SerializeData) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwOffset", &t.DwOffset, d...)
	cb.Do("DwSizeAndFlags", &t.DwSizeAndFlags, d...)
}

type IntDataResponse struct {
	THeader RequiredResponseMessageHeader
	NData   DT_INT
}

func (t *IntDataResponse) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.NData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+28, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *IntDataResponse) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("NData", &t.NData, d...)
}

type GlobalEmblems struct {
	// Inherits GlobalBase
	// Inherits PolymorphicBase
	DwType           DT_UINT
	DwPad            DT_UINT
	ArInitialEmblems DT_VARIABLEARRAY[*DT_SNO]
}

func (t *GlobalEmblems) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.ArInitialEmblems, r, &Options{
		Flags: 1,
		Group: 121,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *GlobalEmblems) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("ArInitialEmblems", &t.ArInitialEmblems, d...)
}

type QuestSideQuestAbandonedMessage struct {
	THeader               RequiredMessageHeader
	DwPlayerGameAccountId DT_UINT
	SnoQuest              DT_SNO
}

func (t *QuestSideQuestAbandonedMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.DwPlayerGameAccountId, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.SnoQuest, r, &Options{
		Flags: 1,
		Group: 31,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *QuestSideQuestAbandonedMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("DwPlayerGameAccountId", &t.DwPlayerGameAccountId, d...)
	cb.Do("SnoQuest", &t.SnoQuest, d...)
}

type DebugEventLogMetaData struct {
	THeader       RequiredMessageHeader
	EMetaDataType DT_INT
	NIntData      DT_INT
	FlFloatData   DT_FLOAT
	Ann           DT_ACD_NETWORK_NAME
	WpStartData   SharedServerWorldPlace
	WpEndData     SharedServerWorldPlace
	Bounds        DT_VECTOR3D
	RgbaColor     DT_RGBACOLOR
	Unk_8273480   DT_UINT
}

func (t *DebugEventLogMetaData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.EMetaDataType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.NIntData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.FlFloatData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.Ann, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.WpStartData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.WpEndData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.Bounds, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.RgbaColor, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.Unk_8273480, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+96, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *DebugEventLogMetaData) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("EMetaDataType", &t.EMetaDataType, d...)
	cb.Do("NIntData", &t.NIntData, d...)
	cb.Do("FlFloatData", &t.FlFloatData, d...)
	cb.Do("Ann", &t.Ann, d...)
	cb.Do("WpStartData", &t.WpStartData, d...)
	cb.Do("WpEndData", &t.WpEndData, d...)
	cb.Do("Bounds", &t.Bounds, d...)
	cb.Do("RgbaColor", &t.RgbaColor, d...)
	cb.Do("Unk_8273480", &t.Unk_8273480, d...)
}

type FootstepTableEntry struct {
	// Inherits PolymorphicBase
	DwType      DT_UINT
	DwPad       DT_UINT
	SnoSurface  DT_SNO
	Unk_96ed25b DT_UINT
}

func (t *FootstepTableEntry) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoSurface, r, &Options{
		Flags: 1,
		Group: 43,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.Unk_96ed25b, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *FootstepTableEntry) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("SnoSurface", &t.SnoSurface, d...)
	cb.Do("Unk_96ed25b", &t.Unk_96ed25b, d...)
}

type TriggerEventFadePlayers struct {
	// Inherits TriggerEventRangedDuration
	// Inherits TriggerEvent
	// Inherits PolymorphicBase
	DwType           DT_UINT
	TConditions      TriggerConditions
	FGenerated       DT_INT
	Unk_6cba752      DT_INT
	DwParentActorID  DT_UINT
	TDuration        DT_FLOAT
	DwTriggerFlags   DT_UINT
	DwTriggerFlagsEx DT_UINT
	TCleanup         TriggerCleanup
	Unk_49e9257      DT_INT
	Unk_5490979      DT_INT
	DwPad            DT_UINT
}

func (t *TriggerEventFadePlayers) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.FGenerated, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_6cba752, r, &Options{Flags: 16}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.DwParentActorID, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.TDuration, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.DwTriggerFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.DwTriggerFlagsEx, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.TCleanup, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+116, &t.Unk_49e9257, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.Unk_5490979, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+124, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+128, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TriggerEventFadePlayers) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("TConditions", &t.TConditions, d...)
	cb.Do("FGenerated", &t.FGenerated, d...)
	cb.Do("Unk_6cba752", &t.Unk_6cba752, d...)
	cb.Do("DwParentActorID", &t.DwParentActorID, d...)
	cb.Do("TDuration", &t.TDuration, d...)
	cb.Do("DwTriggerFlags", &t.DwTriggerFlags, d...)
	cb.Do("DwTriggerFlagsEx", &t.DwTriggerFlagsEx, d...)
	cb.Do("TCleanup", &t.TCleanup, d...)
	cb.Do("Unk_49e9257", &t.Unk_49e9257, d...)
	cb.Do("Unk_5490979", &t.Unk_5490979, d...)
	cb.Do("DwPad", &t.DwPad, d...)
}

type MarkerDecalData struct {
	// Inherits MarkerDataBase
	// Inherits PolymorphicBase
	DwType                  DT_UINT
	DwPad                   DT_UINT
	DwMarkerDecalFlags      DT_UINT
	FlAngleThreshold        DT_FLOAT
	Unk_18f0908             DT_INT
	BDieOverride            DT_INT
	PtRunTimeMaterialValues DT_VARIABLEARRAY[*RunTimeMaterialValues]
}

func (t *MarkerDecalData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.DwMarkerDecalFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.FlAngleThreshold, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_18f0908, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.BDieOverride, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.PtRunTimeMaterialValues, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *MarkerDecalData) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("DwMarkerDecalFlags", &t.DwMarkerDecalFlags, d...)
	cb.Do("FlAngleThreshold", &t.FlAngleThreshold, d...)
	cb.Do("Unk_18f0908", &t.Unk_18f0908, d...)
	cb.Do("BDieOverride", &t.BDieOverride, d...)
	cb.Do("PtRunTimeMaterialValues", &t.PtRunTimeMaterialValues, d...)
}

type TriggerEventSetWeaponVisibilityDuration struct {
	// Inherits TriggerEventRangedDuration
	// Inherits TriggerEvent
	// Inherits PolymorphicBase
	DwType           DT_UINT
	TConditions      TriggerConditions
	FGenerated       DT_INT
	Unk_6cba752      DT_INT
	DwParentActorID  DT_UINT
	TDuration        DT_FLOAT
	DwTriggerFlags   DT_UINT
	DwTriggerFlagsEx DT_UINT
	TCleanup         TriggerCleanup
	Unk_49e9257      DT_INT
	Unk_5490979      DT_INT
	DwPad            DT_UINT
	Unk_279aa5a      DT_INT
	DwActorID        DT_UINT
	BHideMainHand    DT_INT
	BHideOffhand     DT_INT
	BHideSheathed    DT_INT
}

func (t *TriggerEventSetWeaponVisibilityDuration) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.FGenerated, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_6cba752, r, &Options{Flags: 16}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.DwParentActorID, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.TDuration, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.DwTriggerFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.DwTriggerFlagsEx, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.TCleanup, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+116, &t.Unk_49e9257, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.Unk_5490979, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+124, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.Unk_279aa5a, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+132, &t.DwActorID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+136, &t.BHideMainHand, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+140, &t.BHideOffhand, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+144, &t.BHideSheathed, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+152, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TriggerEventSetWeaponVisibilityDuration) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("TConditions", &t.TConditions, d...)
	cb.Do("FGenerated", &t.FGenerated, d...)
	cb.Do("Unk_6cba752", &t.Unk_6cba752, d...)
	cb.Do("DwParentActorID", &t.DwParentActorID, d...)
	cb.Do("TDuration", &t.TDuration, d...)
	cb.Do("DwTriggerFlags", &t.DwTriggerFlags, d...)
	cb.Do("DwTriggerFlagsEx", &t.DwTriggerFlagsEx, d...)
	cb.Do("TCleanup", &t.TCleanup, d...)
	cb.Do("Unk_49e9257", &t.Unk_49e9257, d...)
	cb.Do("Unk_5490979", &t.Unk_5490979, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("Unk_279aa5a", &t.Unk_279aa5a, d...)
	cb.Do("DwActorID", &t.DwActorID, d...)
	cb.Do("BHideMainHand", &t.BHideMainHand, d...)
	cb.Do("BHideOffhand", &t.BHideOffhand, d...)
	cb.Do("BHideSheathed", &t.BHideSheathed, d...)
}

type NPCInteraction struct {
	EType    DT_ENUM
	EIcon    DT_ENUM
	DwData   DT_UINT
	DwFlags  DT_UINT
	DwOwners DT_UINT
	SnoQuest DT_SNO
}

func (t *NPCInteraction) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.EType, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.EIcon, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.DwOwners, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.SnoQuest, r, &Options{
		Flags: 1,
		Group: 31,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *NPCInteraction) Walk(cb WalkCallback, d ...any) {
	cb.Do("EType", &t.EType, d...)
	cb.Do("EIcon", &t.EIcon, d...)
	cb.Do("DwData", &t.DwData, d...)
	cb.Do("DwFlags", &t.DwFlags, d...)
	cb.Do("DwOwners", &t.DwOwners, d...)
	cb.Do("SnoQuest", &t.SnoQuest, d...)
}

type MarkerPathToAOOffset struct {
	DwMarkerPathID DT_UINT
	NAOOffset      DT_INT
	NDamageState   DT_INT
}

func (t *MarkerPathToAOOffset) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.DwMarkerPathID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.NAOOffset, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.NDamageState, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+12, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *MarkerPathToAOOffset) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwMarkerPathID", &t.DwMarkerPathID, d...)
	cb.Do("NAOOffset", &t.NAOOffset, d...)
	cb.Do("NDamageState", &t.NDamageState, d...)
}

type AnimSweptBone struct {
	SzBoneName   DT_UINT
	PtOffsetList DT_VARIABLEARRAY[*PRTransform]
}

func (t *AnimSweptBone) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SzBoneName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.PtOffsetList, r, &Options{Flags: 2097152}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *AnimSweptBone) Walk(cb WalkCallback, d ...any) {
	cb.Do("SzBoneName", &t.SzBoneName, d...)
	cb.Do("PtOffsetList", &t.PtOffsetList, d...)
}

type OnHitWithCCBuffCallback struct {
	// Inherits BuffCallbackBase
	// Inherits PolymorphicBase
	DwType                DT_UINT
	DwPad                 DT_UINT
	SnoTriggerEffectGroup DT_SNO
	ArConditions          DT_POLYMORPHIC_VARIABLEARRAY[*DT_INT64]
	Unk_7f4b6d5           DT_INT
	Unk_a639294           DT_INT
	DwCCTypes             DT_UINT
}

func (t *OnHitWithCCBuffCallback) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoTriggerEffectGroup, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ArConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.Unk_7f4b6d5, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.Unk_a639294, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.DwCCTypes, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if _, err := r.Seek(p+64, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *OnHitWithCCBuffCallback) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("SnoTriggerEffectGroup", &t.SnoTriggerEffectGroup, d...)
	cb.Do("ArConditions", &t.ArConditions, d...)
	cb.Do("Unk_7f4b6d5", &t.Unk_7f4b6d5, d...)
	cb.Do("Unk_a639294", &t.Unk_a639294, d...)
	cb.Do("DwCCTypes", &t.DwCCTypes, d...)
}

type GizmoConditionData struct {
	SnoGizmoCondition DT_SNO
}

func (t *GizmoConditionData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoGizmoCondition, r, &Options{
		Flags: 1,
		Group: 51,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+4, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *GizmoConditionData) Walk(cb WalkCallback, d ...any) {
	cb.Do("SnoGizmoCondition", &t.SnoGizmoCondition, d...)
}

type FacialHairDefinition struct {
	FUsableByClass DT_FIXEDARRAY[*DT_INT]
	Unk_259d5a4    DT_SNO
	Unk_259d59d    DT_SNO
	Unk_2ab2122    DT_INT
}

func (t *FacialHairDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.FUsableByClass, r, &Options{
		ArrayLength: 5,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.Unk_259d5a4, r, &Options{
		Flags: 513,
		Group: 57,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.Unk_259d59d, r, &Options{
		Flags: 513,
		Group: 57,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.Unk_2ab2122, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+40, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *FacialHairDefinition) Walk(cb WalkCallback, d ...any) {
	cb.Do("FUsableByClass", &t.FUsableByClass, d...)
	cb.Do("Unk_259d5a4", &t.Unk_259d5a4, d...)
	cb.Do("Unk_259d59d", &t.Unk_259d59d, d...)
	cb.Do("Unk_2ab2122", &t.Unk_2ab2122, d...)
}

type ClothData struct {
	ClothDataMirror     dmClothDataMirror
	PtBindVertices      DT_VARIABLEARRAY[*DT_VECTOR4D]
	PtBindNormals       DT_VARIABLEARRAY[*DT_VECTOR4D]
	Unk_f3049dd         DT_VARIABLEARRAY[*DT_FLOAT]
	PtBlendWeights      DT_VARIABLEARRAY[*DT_FLOAT]
	Unk_6b5f617         DT_VARIABLEARRAY[*DT_FLOAT]
	PtDeltaFrames       DT_VARIABLEARRAY[*dmMtxMirror]
	PtLevels            DT_VARIABLEARRAY[*DT_WORD]
	PtAttachmentLengths DT_VARIABLEARRAY[*DT_FLOAT]
	PtParentIndices     DT_VARIABLEARRAY[*DT_WORD]
	PtKinematicRoots    DT_VARIABLEARRAY[*DT_WORD]
	PtTangentIndices    DT_VARIABLEARRAY[*DT_WORD]
	PtWeights           DT_VARIABLEARRAY[*DT_VECTOR4D]
	PtDriverInfluences  DT_VARIABLEARRAY[*DT_WORD]
	PtFollowerIndices   DT_VARIABLEARRAY[*DT_WORD]
	PtTriangles         DT_VARIABLEARRAY[*DT_WORD]
	PtConstraintIndices DT_VARIABLEARRAY[*DT_WORD]
	PtConstraintLengths DT_VARIABLEARRAY[*DT_FLOAT]
	Unk_8ecbb2b         DT_VARIABLEARRAY[*DT_WORD]
	Unk_9f71907         DT_VARIABLEARRAY[*DT_FLOAT]
	PtWarpClusters      DT_VARIABLEARRAY[*dmConstraintClusterMirror]
	PtWeftClusters      DT_VARIABLEARRAY[*dmConstraintClusterMirror]
	PtShearClusters     DT_VARIABLEARRAY[*dmConstraintClusterMirror]
	PtBendClusters      DT_VARIABLEARRAY[*dmConstraintClusterMirror]
	PtCapsuleDefs       DT_VARIABLEARRAY[*dmClothCapsuleDefMirror]
	PtPlaneDefs         DT_VARIABLEARRAY[*dmClothPlaneDefMirror]
	PtDriverBindPose    DT_VARIABLEARRAY[*dmFrameMirror]
	PtDriverMap         DT_VARIABLEARRAY[*DT_WORD]
}

func (t *ClothData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.ClothDataMirror, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+288, &t.PtBindVertices, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+304, &t.PtBindNormals, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+320, &t.Unk_f3049dd, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+336, &t.PtBlendWeights, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+352, &t.Unk_6b5f617, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+368, &t.PtDeltaFrames, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+384, &t.PtLevels, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+400, &t.PtAttachmentLengths, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+416, &t.PtParentIndices, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+432, &t.PtKinematicRoots, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+448, &t.PtTangentIndices, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+464, &t.PtWeights, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+480, &t.PtDriverInfluences, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+496, &t.PtFollowerIndices, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+512, &t.PtTriangles, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+528, &t.PtConstraintIndices, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+544, &t.PtConstraintLengths, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+560, &t.Unk_8ecbb2b, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+576, &t.Unk_9f71907, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+592, &t.PtWarpClusters, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+608, &t.PtWeftClusters, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+624, &t.PtShearClusters, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+640, &t.PtBendClusters, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+656, &t.PtCapsuleDefs, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+672, &t.PtPlaneDefs, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+688, &t.PtDriverBindPose, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+704, &t.PtDriverMap, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+720, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ClothData) Walk(cb WalkCallback, d ...any) {
	cb.Do("ClothDataMirror", &t.ClothDataMirror, d...)
	cb.Do("PtBindVertices", &t.PtBindVertices, d...)
	cb.Do("PtBindNormals", &t.PtBindNormals, d...)
	cb.Do("Unk_f3049dd", &t.Unk_f3049dd, d...)
	cb.Do("PtBlendWeights", &t.PtBlendWeights, d...)
	cb.Do("Unk_6b5f617", &t.Unk_6b5f617, d...)
	cb.Do("PtDeltaFrames", &t.PtDeltaFrames, d...)
	cb.Do("PtLevels", &t.PtLevels, d...)
	cb.Do("PtAttachmentLengths", &t.PtAttachmentLengths, d...)
	cb.Do("PtParentIndices", &t.PtParentIndices, d...)
	cb.Do("PtKinematicRoots", &t.PtKinematicRoots, d...)
	cb.Do("PtTangentIndices", &t.PtTangentIndices, d...)
	cb.Do("PtWeights", &t.PtWeights, d...)
	cb.Do("PtDriverInfluences", &t.PtDriverInfluences, d...)
	cb.Do("PtFollowerIndices", &t.PtFollowerIndices, d...)
	cb.Do("PtTriangles", &t.PtTriangles, d...)
	cb.Do("PtConstraintIndices", &t.PtConstraintIndices, d...)
	cb.Do("PtConstraintLengths", &t.PtConstraintLengths, d...)
	cb.Do("Unk_8ecbb2b", &t.Unk_8ecbb2b, d...)
	cb.Do("Unk_9f71907", &t.Unk_9f71907, d...)
	cb.Do("PtWarpClusters", &t.PtWarpClusters, d...)
	cb.Do("PtWeftClusters", &t.PtWeftClusters, d...)
	cb.Do("PtShearClusters", &t.PtShearClusters, d...)
	cb.Do("PtBendClusters", &t.PtBendClusters, d...)
	cb.Do("PtCapsuleDefs", &t.PtCapsuleDefs, d...)
	cb.Do("PtPlaneDefs", &t.PtPlaneDefs, d...)
	cb.Do("PtDriverBindPose", &t.PtDriverBindPose, d...)
	cb.Do("PtDriverMap", &t.PtDriverMap, d...)
}

type PlayerLevelMessage struct {
	THeader               RequiredMessageHeader
	DwPlayerGameAccountId DT_UINT
	NNewLevel             DT_INT
	DwNewSkillPoints      DT_UINT
	NNewParagonPoints     DT_INT
}

func (t *PlayerLevelMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.DwPlayerGameAccountId, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.NNewLevel, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.DwNewSkillPoints, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.NNewParagonPoints, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PlayerLevelMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("DwPlayerGameAccountId", &t.DwPlayerGameAccountId, d...)
	cb.Do("NNewLevel", &t.NNewLevel, d...)
	cb.Do("DwNewSkillPoints", &t.DwNewSkillPoints, d...)
	cb.Do("NNewParagonPoints", &t.NNewParagonPoints, d...)
}

type ActorSoundTableData struct {
	SzMonsterCategory             DT_UINT
	Unk_6190c70                   DT_INT
	Unk_fc3dcfc                   DT_INT
	SnoRunSoundTable              DT_SNO
	SnoWalkSoundTable             DT_SNO
	SnoSlideSoundTable            DT_SNO
	SnoLandSoundTable             DT_SNO
	SnoNPCBarefootRunSoundTable   DT_SNO
	SnoNPCBarefootWalkSoundTable  DT_SNO
	SnoNPCBarefootSlideSoundTable DT_SNO
	SnoNPCBarefootLandSoundTable  DT_SNO
	SnoNPCClothRunSoundTable      DT_SNO
	SnoNPCClothWalkSoundTable     DT_SNO
	SnoNPCClothSlideSoundTable    DT_SNO
	SnoNPCClothLandSoundTable     DT_SNO
	SnoNPCLeatherRunSoundTable    DT_SNO
	SnoNPCLeatherWalkSoundTable   DT_SNO
	SnoNPCLeatherSlideSoundTable  DT_SNO
	SnoNPCLeatherLandSoundTable   DT_SNO
	SnoVoiceSoundTable            DT_SNO
	ArFoleyOverrides              DT_VARIABLEARRAY[*ActorFoleySoundOverride]
}

func (t *ActorSoundTableData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SzMonsterCategory, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.Unk_6190c70, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.Unk_fc3dcfc, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.SnoRunSoundTable, r, &Options{
		Flags: 1,
		Group: 79,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoWalkSoundTable, r, &Options{
		Flags: 1,
		Group: 79,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.SnoSlideSoundTable, r, &Options{
		Flags: 1,
		Group: 79,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SnoLandSoundTable, r, &Options{
		Flags: 1,
		Group: 79,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.SnoNPCBarefootRunSoundTable, r, &Options{
		Flags: 1,
		Group: 79,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.SnoNPCBarefootWalkSoundTable, r, &Options{
		Flags: 1,
		Group: 79,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.SnoNPCBarefootSlideSoundTable, r, &Options{
		Flags: 1,
		Group: 79,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.SnoNPCBarefootLandSoundTable, r, &Options{
		Flags: 1,
		Group: 79,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.SnoNPCClothRunSoundTable, r, &Options{
		Flags: 1,
		Group: 79,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.SnoNPCClothWalkSoundTable, r, &Options{
		Flags: 1,
		Group: 79,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.SnoNPCClothSlideSoundTable, r, &Options{
		Flags: 1,
		Group: 79,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.SnoNPCClothLandSoundTable, r, &Options{
		Flags: 1,
		Group: 79,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+60, &t.SnoNPCLeatherRunSoundTable, r, &Options{
		Flags: 1,
		Group: 79,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.SnoNPCLeatherWalkSoundTable, r, &Options{
		Flags: 1,
		Group: 79,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.SnoNPCLeatherSlideSoundTable, r, &Options{
		Flags: 1,
		Group: 79,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.SnoNPCLeatherLandSoundTable, r, &Options{
		Flags: 1,
		Group: 79,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.SnoVoiceSoundTable, r, &Options{
		Flags: 1,
		Group: 79,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.ArFoleyOverrides, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+96, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ActorSoundTableData) Walk(cb WalkCallback, d ...any) {
	cb.Do("SzMonsterCategory", &t.SzMonsterCategory, d...)
	cb.Do("Unk_6190c70", &t.Unk_6190c70, d...)
	cb.Do("Unk_fc3dcfc", &t.Unk_fc3dcfc, d...)
	cb.Do("SnoRunSoundTable", &t.SnoRunSoundTable, d...)
	cb.Do("SnoWalkSoundTable", &t.SnoWalkSoundTable, d...)
	cb.Do("SnoSlideSoundTable", &t.SnoSlideSoundTable, d...)
	cb.Do("SnoLandSoundTable", &t.SnoLandSoundTable, d...)
	cb.Do("SnoNPCBarefootRunSoundTable", &t.SnoNPCBarefootRunSoundTable, d...)
	cb.Do("SnoNPCBarefootWalkSoundTable", &t.SnoNPCBarefootWalkSoundTable, d...)
	cb.Do("SnoNPCBarefootSlideSoundTable", &t.SnoNPCBarefootSlideSoundTable, d...)
	cb.Do("SnoNPCBarefootLandSoundTable", &t.SnoNPCBarefootLandSoundTable, d...)
	cb.Do("SnoNPCClothRunSoundTable", &t.SnoNPCClothRunSoundTable, d...)
	cb.Do("SnoNPCClothWalkSoundTable", &t.SnoNPCClothWalkSoundTable, d...)
	cb.Do("SnoNPCClothSlideSoundTable", &t.SnoNPCClothSlideSoundTable, d...)
	cb.Do("SnoNPCClothLandSoundTable", &t.SnoNPCClothLandSoundTable, d...)
	cb.Do("SnoNPCLeatherRunSoundTable", &t.SnoNPCLeatherRunSoundTable, d...)
	cb.Do("SnoNPCLeatherWalkSoundTable", &t.SnoNPCLeatherWalkSoundTable, d...)
	cb.Do("SnoNPCLeatherSlideSoundTable", &t.SnoNPCLeatherSlideSoundTable, d...)
	cb.Do("SnoNPCLeatherLandSoundTable", &t.SnoNPCLeatherLandSoundTable, d...)
	cb.Do("SnoVoiceSoundTable", &t.SnoVoiceSoundTable, d...)
	cb.Do("ArFoleyOverrides", &t.ArFoleyOverrides, d...)
}

type VictimMessage struct {
	THeader              RequiredMessageHeader
	Unk_7dbf108          DT_UINT
	NKillerLevel         DT_INT
	Unk_e37feff          DT_UINT
	EKillerMonsterRarity DT_ENUM
	SnoKillerActor       DT_SNO
	BUseAlternateName    DT_INT
	EKillerTeam          DT_ENUM
	PKillerRareNameGBIDs DT_FIXEDARRAY[*DT_GBID]
	SnoPowerDmgSource    DT_SNO
}

func (t *VictimMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_7dbf108, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.NKillerLevel, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_e37feff, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.EKillerMonsterRarity, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.SnoKillerActor, r, &Options{
		Flags: 1,
		Group: 1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.BUseAlternateName, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.EKillerTeam, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.PKillerRareNameGBIDs, r, &Options{
		ArrayLength: 2,
		Flags:       1,
		Group:       7,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.SnoPowerDmgSource, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+56, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *VictimMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("Unk_7dbf108", &t.Unk_7dbf108, d...)
	cb.Do("NKillerLevel", &t.NKillerLevel, d...)
	cb.Do("Unk_e37feff", &t.Unk_e37feff, d...)
	cb.Do("EKillerMonsterRarity", &t.EKillerMonsterRarity, d...)
	cb.Do("SnoKillerActor", &t.SnoKillerActor, d...)
	cb.Do("BUseAlternateName", &t.BUseAlternateName, d...)
	cb.Do("EKillerTeam", &t.EKillerTeam, d...)
	cb.Do("PKillerRareNameGBIDs", &t.PKillerRareNameGBIDs, d...)
	cb.Do("SnoPowerDmgSource", &t.SnoPowerDmgSource, d...)
}

type PortedToPlayerMessage struct {
	THeader     RequiredMessageHeader
	Unk_a51c96a DT_UINT
	Unk_2a8dda3 DT_UINT
}

func (t *PortedToPlayerMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_a51c96a, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.Unk_2a8dda3, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PortedToPlayerMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("Unk_a51c96a", &t.Unk_a51c96a, d...)
	cb.Do("Unk_2a8dda3", &t.Unk_2a8dda3, d...)
}

type BaseACDInfo struct {
	SnoQuest     DT_SNO
	SnoMarkerSet DT_SNO
}

func (t *BaseACDInfo) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoQuest, r, &Options{
		Flags: 1,
		Group: 31,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.SnoMarkerSet, r, &Options{
		Flags: 1,
		Group: 24,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *BaseACDInfo) Walk(cb WalkCallback, d ...any) {
	cb.Do("SnoQuest", &t.SnoQuest, d...)
	cb.Do("SnoMarkerSet", &t.SnoMarkerSet, d...)
}

type WorldStateFullUpdateMessage struct {
	THeader   RequiredMessageHeader
	ArUpdates DT_FIXEDARRAY[*WorldStateUpdateData]
}

func (t *WorldStateFullUpdateMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.ArUpdates, r, &Options{
		ArrayLength: 64,
		Flags:       8,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+532, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *WorldStateFullUpdateMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("ArUpdates", &t.ArUpdates, d...)
}

type MonsterTagTuningData struct {
	DwWeight      DT_UINT
	FlDamageBonus DT_FLOAT
	FlHealthBonus DT_FLOAT
}

func (t *MonsterTagTuningData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.DwWeight, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.FlDamageBonus, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.FlHealthBonus, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+12, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *MonsterTagTuningData) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwWeight", &t.DwWeight, d...)
	cb.Do("FlDamageBonus", &t.FlDamageBonus, d...)
	cb.Do("FlHealthBonus", &t.FlHealthBonus, d...)
}

type JewelryDefinition struct {
	EClassRestriction DT_ENUM
	DwSubObjectStyle  DT_UINT
	Unk_59b49ef       DT_INT
	HIconImage        DT_UINT
}

func (t *JewelryDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.EClassRestriction, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwSubObjectStyle, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_59b49ef, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.HIconImage, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *JewelryDefinition) Walk(cb WalkCallback, d ...any) {
	cb.Do("EClassRestriction", &t.EClassRestriction, d...)
	cb.Do("DwSubObjectStyle", &t.DwSubObjectStyle, d...)
	cb.Do("Unk_59b49ef", &t.Unk_59b49ef, d...)
	cb.Do("HIconImage", &t.HIconImage, d...)
}

type TerritoryDefinition struct {
	Color DT_RGBACOLOR
}

func (t *TerritoryDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.Color, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+12, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TerritoryDefinition) Walk(cb WalkCallback, d ...any) {
	cb.Do("Color", &t.Color, d...)
}

type TriggerEventSpawnObject struct {
	// Inherits TriggerEvent
	// Inherits PolymorphicBase
	DwType                    DT_UINT
	DwPad                     DT_UINT
	TConditions               TriggerConditions
	FGenerated                DT_INT
	Unk_6cba752               DT_INT
	DwParentActorID           DT_UINT
	DwID                      DT_UINT
	Snoname                   DT_SNO_NAME
	THardpointLinks           DT_FIXEDARRAY[*HardpointLink]
	DwTriggerFlags            DT_UINT
	DwTriggerFlagsEx          DT_UINT
	FRandomLook               DT_INT
	TLookLink                 LookLink
	FOverrideActorVariant     DT_INT
	EVariantTypeOverride      DT_ENUM
	DwSegmentsStep            DT_UINT
	DwShaderMapOverride       DT_UINT
	FlScale                   DT_FLOAT
	DwSeed                    DT_UINT
	SzSpawnLocatorName        DT_UINT
	VecScalar                 DT_VECTOR2D
	Transform                 PRTransform
	TEffectGroupHardpointLink HardpointLink
	Unk_c7fa18a               DT_RANGE[*DT_FLOAT]
	SnoPowerEffectParam       DT_SNO
	DwSpawnedActorLife        DT_FLOAT
	TNPCComponentInstanceData NPCComponentInstanceData
	PtLightInstanceData       DT_VARIABLEARRAY[*LightInstanceData]
}

func (t *TriggerEventSpawnObject) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.FGenerated, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_6cba752, r, &Options{Flags: 16}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.DwParentActorID, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.DwID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.Snoname, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.THardpointLinks, r, &Options{
		ArrayLength: 2,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+108, &t.DwTriggerFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.DwTriggerFlagsEx, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+116, &t.FRandomLook, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.TLookLink, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+124, &t.FOverrideActorVariant, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.EVariantTypeOverride, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+132, &t.DwSegmentsStep, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+136, &t.DwShaderMapOverride, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+140, &t.FlScale, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+144, &t.DwSeed, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+148, &t.SzSpawnLocatorName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+152, &t.VecScalar, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+160, &t.Transform, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+188, &t.TEffectGroupHardpointLink, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+196, &t.Unk_c7fa18a, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+204, &t.SnoPowerEffectParam, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+208, &t.DwSpawnedActorLife, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+212, &t.TNPCComponentInstanceData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+256, &t.PtLightInstanceData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+272, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TriggerEventSpawnObject) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("TConditions", &t.TConditions, d...)
	cb.Do("FGenerated", &t.FGenerated, d...)
	cb.Do("Unk_6cba752", &t.Unk_6cba752, d...)
	cb.Do("DwParentActorID", &t.DwParentActorID, d...)
	cb.Do("DwID", &t.DwID, d...)
	cb.Do("Snoname", &t.Snoname, d...)
	cb.Do("THardpointLinks", &t.THardpointLinks, d...)
	cb.Do("DwTriggerFlags", &t.DwTriggerFlags, d...)
	cb.Do("DwTriggerFlagsEx", &t.DwTriggerFlagsEx, d...)
	cb.Do("FRandomLook", &t.FRandomLook, d...)
	cb.Do("TLookLink", &t.TLookLink, d...)
	cb.Do("FOverrideActorVariant", &t.FOverrideActorVariant, d...)
	cb.Do("EVariantTypeOverride", &t.EVariantTypeOverride, d...)
	cb.Do("DwSegmentsStep", &t.DwSegmentsStep, d...)
	cb.Do("DwShaderMapOverride", &t.DwShaderMapOverride, d...)
	cb.Do("FlScale", &t.FlScale, d...)
	cb.Do("DwSeed", &t.DwSeed, d...)
	cb.Do("SzSpawnLocatorName", &t.SzSpawnLocatorName, d...)
	cb.Do("VecScalar", &t.VecScalar, d...)
	cb.Do("Transform", &t.Transform, d...)
	cb.Do("TEffectGroupHardpointLink", &t.TEffectGroupHardpointLink, d...)
	cb.Do("Unk_c7fa18a", &t.Unk_c7fa18a, d...)
	cb.Do("SnoPowerEffectParam", &t.SnoPowerEffectParam, d...)
	cb.Do("DwSpawnedActorLife", &t.DwSpawnedActorLife, d...)
	cb.Do("TNPCComponentInstanceData", &t.TNPCComponentInstanceData, d...)
	cb.Do("PtLightInstanceData", &t.PtLightInstanceData, d...)
}

type LookVariantOverride struct {
	TBaseLook     LookLink
	TOverrideLook LookLink
}

func (t *LookVariantOverride) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.TBaseLook, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.TOverrideLook, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *LookVariantOverride) Walk(cb WalkCallback, d ...any) {
	cb.Do("TBaseLook", &t.TBaseLook, d...)
	cb.Do("TOverrideLook", &t.TOverrideLook, d...)
}

type PowerConditionIsActorUnstoppable struct {
	// Inherits PowerConditionBase
	// Inherits PolymorphicBase
	DwType   DT_UINT
	BInverse DT_INT
	DwPad    DT_UINT
	ESubject DT_ENUM
}

func (t *PowerConditionIsActorUnstoppable) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BInverse, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ESubject, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PowerConditionIsActorUnstoppable) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("BInverse", &t.BInverse, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("ESubject", &t.ESubject, d...)
}

type Type_a1889860 struct {
	SnoPowerFrom DT_SNO
	Unk_857b0b4  DT_FLOAT
}

func (t *Type_a1889860) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoPowerFrom, r, &Options{
		Flags: 513,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.Unk_857b0b4, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_a1889860) Walk(cb WalkCallback, d ...any) {
	cb.Do("SnoPowerFrom", &t.SnoPowerFrom, d...)
	cb.Do("Unk_857b0b4", &t.Unk_857b0b4, d...)
}

type MountClearMessage struct {
	THeader     RequiredMessageHeader
	Unk_70bf7e7 DT_UINT
}

func (t *MountClearMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_70bf7e7, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+20, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *MountClearMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("Unk_70bf7e7", &t.Unk_70bf7e7, d...)
}

type TriggerEventCameraChangeTarget struct {
	// Inherits TriggerEventRangedDuration
	// Inherits TriggerEvent
	// Inherits PolymorphicBase
	DwType               DT_UINT
	TConditions          TriggerConditions
	FGenerated           DT_INT
	Unk_6cba752          DT_INT
	DwParentActorID      DT_UINT
	TDuration            DT_FLOAT
	DwTriggerFlags       DT_UINT
	DwTriggerFlagsEx     DT_UINT
	TCleanup             TriggerCleanup
	Unk_49e9257          DT_INT
	Unk_5490979          DT_INT
	DwPad                DT_UINT
	ETargetType          DT_ENUM
	SzTargetLocatorName  DT_UINT
	THardpointLinkTarget HardpointLink
	DwTargetID           DT_UINT
	VecTargetOffset      DT_VECTOR3D
	EMicrophoneMode      DT_ENUM
	VecMicrophoneOffset  DT_VECTOR3D
	EBlendEasing         DT_ENUM
}

func (t *TriggerEventCameraChangeTarget) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.FGenerated, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_6cba752, r, &Options{Flags: 16}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.DwParentActorID, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.TDuration, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.DwTriggerFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.DwTriggerFlagsEx, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.TCleanup, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+116, &t.Unk_49e9257, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.Unk_5490979, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+124, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.ETargetType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+132, &t.SzTargetLocatorName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+136, &t.THardpointLinkTarget, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+144, &t.DwTargetID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+148, &t.VecTargetOffset, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+160, &t.EMicrophoneMode, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+164, &t.VecMicrophoneOffset, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+176, &t.EBlendEasing, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+184, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TriggerEventCameraChangeTarget) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("TConditions", &t.TConditions, d...)
	cb.Do("FGenerated", &t.FGenerated, d...)
	cb.Do("Unk_6cba752", &t.Unk_6cba752, d...)
	cb.Do("DwParentActorID", &t.DwParentActorID, d...)
	cb.Do("TDuration", &t.TDuration, d...)
	cb.Do("DwTriggerFlags", &t.DwTriggerFlags, d...)
	cb.Do("DwTriggerFlagsEx", &t.DwTriggerFlagsEx, d...)
	cb.Do("TCleanup", &t.TCleanup, d...)
	cb.Do("Unk_49e9257", &t.Unk_49e9257, d...)
	cb.Do("Unk_5490979", &t.Unk_5490979, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("ETargetType", &t.ETargetType, d...)
	cb.Do("SzTargetLocatorName", &t.SzTargetLocatorName, d...)
	cb.Do("THardpointLinkTarget", &t.THardpointLinkTarget, d...)
	cb.Do("DwTargetID", &t.DwTargetID, d...)
	cb.Do("VecTargetOffset", &t.VecTargetOffset, d...)
	cb.Do("EMicrophoneMode", &t.EMicrophoneMode, d...)
	cb.Do("VecMicrophoneOffset", &t.VecMicrophoneOffset, d...)
	cb.Do("EBlendEasing", &t.EBlendEasing, d...)
}

type SNOBlocklistDataChanged struct {
	THeader           RequiredMessageHeader
	TBlockedSnos      DT_FIXEDARRAY[*DT_SNO_NAME]
	TBlockedSnosFlags DT_FIXEDARRAY[*DT_UINT]
}

func (t *SNOBlocklistDataChanged) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TBlockedSnos, r, &Options{
		ArrayLength: 64,
		Flags:       8,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+532, &t.TBlockedSnosFlags, r, &Options{
		ArrayLength: 64,
		Flags:       8,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+792, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *SNOBlocklistDataChanged) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("TBlockedSnos", &t.TBlockedSnos, d...)
	cb.Do("TBlockedSnosFlags", &t.TBlockedSnosFlags, d...)
}

type PowerConditionIsTrackedActor struct {
	// Inherits PowerConditionBase
	// Inherits PolymorphicBase
	DwType   DT_UINT
	BInverse DT_INT
	DwPad    DT_UINT
	ESubject DT_ENUM
}

func (t *PowerConditionIsTrackedActor) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BInverse, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ESubject, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PowerConditionIsTrackedActor) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("BInverse", &t.BInverse, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("ESubject", &t.ESubject, d...)
}

type ZoneProgressRewardPerTierData struct {
	TFirstReward    ZoneProgressRewardData
	TSecondReward   ZoneProgressRewardData
	NStaticXPAmount DT_INT
	Unk_1d991f5     DT_UINT
	NXPTier         DT_INT
	Unk_3592260     DT_INT
}

func (t *ZoneProgressRewardPerTierData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.TFirstReward, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.TSecondReward, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.NStaticXPAmount, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.Unk_1d991f5, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.NXPTier, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.Unk_3592260, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+56, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ZoneProgressRewardPerTierData) Walk(cb WalkCallback, d ...any) {
	cb.Do("TFirstReward", &t.TFirstReward, d...)
	cb.Do("TSecondReward", &t.TSecondReward, d...)
	cb.Do("NStaticXPAmount", &t.NStaticXPAmount, d...)
	cb.Do("Unk_1d991f5", &t.Unk_1d991f5, d...)
	cb.Do("NXPTier", &t.NXPTier, d...)
	cb.Do("Unk_3592260", &t.Unk_3592260, d...)
}

type StarsSettings struct {
	ShrineData DT_TAGMAP[*DT_ENUM]
}

func (t *StarsSettings) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.ShrineData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *StarsSettings) Walk(cb WalkCallback, d ...any) {
	cb.Do("ShrineData", &t.ShrineData, d...)
}

type LoudnessParams struct{}

func (t *LoudnessParams) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if _, err := r.Seek(p+1, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *LoudnessParams) Walk(cb WalkCallback, d ...any) {}

type TriggerEventEnableRagdollAnimationOverride struct {
	// Inherits TriggerEvent
	// Inherits PolymorphicBase
	DwType          DT_UINT
	DwPad           DT_UINT
	TConditions     TriggerConditions
	FGenerated      DT_INT
	Unk_6cba752     DT_INT
	DwParentActorID DT_UINT
}

func (t *TriggerEventEnableRagdollAnimationOverride) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.FGenerated, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_6cba752, r, &Options{Flags: 16}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.DwParentActorID, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+80, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TriggerEventEnableRagdollAnimationOverride) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("TConditions", &t.TConditions, d...)
	cb.Do("FGenerated", &t.FGenerated, d...)
	cb.Do("Unk_6cba752", &t.Unk_6cba752, d...)
	cb.Do("DwParentActorID", &t.DwParentActorID, d...)
}

type DesignerVariable_Table struct {
	// Inherits GameBalanceTable
	// Inherits PolymorphicBase
	DwType   DT_UINT
	DwPad    DT_UINT
	TEntries DT_VARIABLEARRAY[*DesignerVariable]
}

func (t *DesignerVariable_Table) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TEntries, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *DesignerVariable_Table) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("TEntries", &t.TEntries, d...)
}

type StartPowerMessage struct {
	THeader            RequiredCommandFrameMessageHeader
	SnoPower           DT_SNO
	SnoTriggeringPower DT_OPTIONAL[*DT_SNO]
	TAnimPreplayData   DT_OPTIONAL[*AnimPreplayData]
	AStartFacing       DT_OPTIONAL[*DT_FLOAT]
	AnnTargetName      DT_OPTIONAL[*DT_ACD_NETWORK_NAME]
	WpTarget           DT_OPTIONAL[*SharedServerWorldPlace]
	WpTargetOffset     DT_OPTIONAL[*DT_VECTOR3D]
}

func (t *StartPowerMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.SnoPower, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SnoTriggeringPower, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.TAnimPreplayData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.AStartFacing, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.AnnTargetName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.WpTarget, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+100, &t.WpTargetOffset, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+116, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *StartPowerMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("SnoPower", &t.SnoPower, d...)
	cb.Do("SnoTriggeringPower", &t.SnoTriggeringPower, d...)
	cb.Do("TAnimPreplayData", &t.TAnimPreplayData, d...)
	cb.Do("AStartFacing", &t.AStartFacing, d...)
	cb.Do("AnnTargetName", &t.AnnTargetName, d...)
	cb.Do("WpTarget", &t.WpTarget, d...)
	cb.Do("WpTargetOffset", &t.WpTargetOffset, d...)
}

type PowerConditionParagonGlyphAffixIsActive struct {
	// Inherits PowerConditionBase
	// Inherits PolymorphicBase
	DwType               DT_UINT
	BInverse             DT_INT
	DwPad                DT_UINT
	ESubject             DT_ENUM
	SnoParagonGlyphAffix DT_SNO
}

func (t *PowerConditionParagonGlyphAffixIsActive) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BInverse, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ESubject, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.SnoParagonGlyphAffix, r, &Options{
		Flags: 513,
		Group: 112,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PowerConditionParagonGlyphAffixIsActive) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("BInverse", &t.BInverse, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("ESubject", &t.ESubject, d...)
	cb.Do("SnoParagonGlyphAffix", &t.SnoParagonGlyphAffix, d...)
}

type Type_a2b0fc96 struct {
	SzVariableName             DT_CHARARRAY
	FMarkerLevelOverride       DT_INT
	EVariableType              DT_ENUM
	TMarkerHandle              MarkerHandle
	GbidActorGroup             DT_GBID
	GbidPrefabScopedActorGroup DT_GBID
	SzLinkedGroupName          DT_CHARARRAY
	SnoReference               DT_SNO_NAME
	Unk_86254e0                DT_ENUM
	Unk_a33b274                DT_INT
}

func (t *Type_a2b0fc96) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SzVariableName, r, &Options{
		ArrayLength: 64,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.FMarkerLevelOverride, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.EVariableType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.TMarkerHandle, r, &Options{Flags: 513}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.GbidActorGroup, r, &Options{
		Flags: 1,
		Group: 24,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.GbidPrefabScopedActorGroup, r, &Options{
		Flags: 1,
		Group: 51,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.SzLinkedGroupName, r, &Options{
		ArrayLength: 64,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+152, &t.SnoReference, r, &Options{Flags: 513}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+160, &t.Unk_86254e0, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+164, &t.Unk_a33b274, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+168, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_a2b0fc96) Walk(cb WalkCallback, d ...any) {
	cb.Do("SzVariableName", &t.SzVariableName, d...)
	cb.Do("FMarkerLevelOverride", &t.FMarkerLevelOverride, d...)
	cb.Do("EVariableType", &t.EVariableType, d...)
	cb.Do("TMarkerHandle", &t.TMarkerHandle, d...)
	cb.Do("GbidActorGroup", &t.GbidActorGroup, d...)
	cb.Do("GbidPrefabScopedActorGroup", &t.GbidPrefabScopedActorGroup, d...)
	cb.Do("SzLinkedGroupName", &t.SzLinkedGroupName, d...)
	cb.Do("SnoReference", &t.SnoReference, d...)
	cb.Do("Unk_86254e0", &t.Unk_86254e0, d...)
	cb.Do("Unk_a33b274", &t.Unk_a33b274, d...)
}

type ParagonGlyphIntoSocketMessage struct {
	THeader     RequiredMessageHeader
	SnoGlyph    DT_SNO
	DwNodeIndex DT_UINT
}

func (t *ParagonGlyphIntoSocketMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoGlyph, r, &Options{
		Flags: 1,
		Group: 111,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwNodeIndex, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ParagonGlyphIntoSocketMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("SnoGlyph", &t.SnoGlyph, d...)
	cb.Do("DwNodeIndex", &t.DwNodeIndex, d...)
}

type PlayerClassRogueData struct {
	ArRogueSpecData DT_FIXEDARRAY[*RogueSpecializationGlobalData]
	Unk_239d877     DT_FLOAT
}

func (t *PlayerClassRogueData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.ArRogueSpecData, r, &Options{
		ArrayLength: 3,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.Unk_239d877, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+52, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PlayerClassRogueData) Walk(cb WalkCallback, d ...any) {
	cb.Do("ArRogueSpecData", &t.ArRogueSpecData, d...)
	cb.Do("Unk_239d877", &t.Unk_239d877, d...)
}

type ReputationGainedMessage struct {
	THeader       RequiredMessageHeader
	SnoReputation DT_SNO
	DwAmount      DT_UINT
}

func (t *ReputationGainedMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoReputation, r, &Options{
		Flags: 1,
		Group: 105,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwAmount, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ReputationGainedMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("SnoReputation", &t.SnoReputation, d...)
	cb.Do("DwAmount", &t.DwAmount, d...)
}

type Circle struct {
	WpCenter DT_VECTOR2D
	WdRadius DT_FLOAT
}

func (t *Circle) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.WpCenter, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.WdRadius, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+12, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Circle) Walk(cb WalkCallback, d ...any) {
	cb.Do("WpCenter", &t.WpCenter, d...)
	cb.Do("WdRadius", &t.WdRadius, d...)
}

type RotationKey struct {
	NFrame DT_INT
	Q16    Quaternion16
}

func (t *RotationKey) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.NFrame, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.Q16, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+12, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *RotationKey) Walk(cb WalkCallback, d ...any) {
	cb.Do("NFrame", &t.NFrame, d...)
	cb.Do("Q16", &t.Q16, d...)
}

type ACDTranslateAckMessage struct {
	THeader   RequiredMessageHeader
	UAckValue DT_UINT
}

func (t *ACDTranslateAckMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.UAckValue, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+20, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ACDTranslateAckMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("UAckValue", &t.UAckValue, d...)
}

type NPCACDInfo struct {
	Unk_4fa6b4f  DT_FIXEDARRAY[*DT_UINT]
	ComponentSet DT_SNO
}

func (t *NPCACDInfo) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Unk_4fa6b4f, r, &Options{
		ArrayLength: 4,
		Flags:       8,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.ComponentSet, r, &Options{
		Flags: 1,
		Group: 2,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *NPCACDInfo) Walk(cb WalkCallback, d ...any) {
	cb.Do("Unk_4fa6b4f", &t.Unk_4fa6b4f, d...)
	cb.Do("ComponentSet", &t.ComponentSet, d...)
}

type PowerConditionHasFortifiedHealth struct {
	// Inherits PowerConditionBase
	// Inherits PolymorphicBase
	DwType   DT_UINT
	BInverse DT_INT
	DwPad    DT_UINT
	ESubject DT_ENUM
}

func (t *PowerConditionHasFortifiedHealth) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BInverse, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ESubject, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PowerConditionHasFortifiedHealth) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("BInverse", &t.BInverse, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("ESubject", &t.ESubject, d...)
}

type PowerConditionIsCrowdControlled struct {
	// Inherits PowerConditionBase
	// Inherits PolymorphicBase
	DwType              DT_UINT
	BInverse            DT_INT
	DwPad               DT_UINT
	ESubject            DT_ENUM
	DwCrowdControlTypes DT_UINT
}

func (t *PowerConditionIsCrowdControlled) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BInverse, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ESubject, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.DwCrowdControlTypes, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PowerConditionIsCrowdControlled) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("BInverse", &t.BInverse, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("ESubject", &t.ESubject, d...)
	cb.Do("DwCrowdControlTypes", &t.DwCrowdControlTypes, d...)
}

type ConsoleCommandResultsMessage struct {
	THeader   RequiredMessageHeader
	UsMessage DT_CHARARRAY
}

func (t *ConsoleCommandResultsMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.UsMessage, r, &Options{
		ArrayLength: 1024,
		Flags:       1,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+1040, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ConsoleCommandResultsMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("UsMessage", &t.UsMessage, d...)
}

type BlendTimeOverrideEntry struct {
	SnoPowerTo          DT_SNO
	FlBlendTimeOverride DT_FLOAT
}

func (t *BlendTimeOverrideEntry) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoPowerTo, r, &Options{
		Flags: 513,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.FlBlendTimeOverride, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *BlendTimeOverrideEntry) Walk(cb WalkCallback, d ...any) {
	cb.Do("SnoPowerTo", &t.SnoPowerTo, d...)
	cb.Do("FlBlendTimeOverride", &t.FlBlendTimeOverride, d...)
}

type PlayerVariableIsSetSubcondition struct {
	// Inherits Subcondition
	// Inherits PolymorphicBase
	DwType               DT_UINT
	BNegate              DT_INT
	DwPad                DT_UINT
	GbidDesignerVariable DT_GBID
}

func (t *PlayerVariableIsSetSubcondition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BNegate, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.GbidDesignerVariable, r, &Options{
		Flags: 1,
		Group: 45,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PlayerVariableIsSetSubcondition) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("BNegate", &t.BNegate, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("GbidDesignerVariable", &t.GbidDesignerVariable, d...)
}

type ConversationSample struct {
	SzLabel       DT_UINT
	SnoSpeaker    DT_SNO
	FlDuration    DT_FLOAT
	ESampleSource DT_ENUM
	Unk_1d3e4c1   Type_bac3964d
}

func (t *ConversationSample) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SzLabel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.SnoSpeaker, r, &Options{
		Flags: 1,
		Group: 72,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.FlDuration, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.ESampleSource, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_1d3e4c1, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ConversationSample) Walk(cb WalkCallback, d ...any) {
	cb.Do("SzLabel", &t.SzLabel, d...)
	cb.Do("SnoSpeaker", &t.SnoSpeaker, d...)
	cb.Do("FlDuration", &t.FlDuration, d...)
	cb.Do("ESampleSource", &t.ESampleSource, d...)
	cb.Do("Unk_1d3e4c1", &t.Unk_1d3e4c1, d...)
}

type Anim2DFrame struct {
	HImage    DT_UINT
	RgbaColor DT_RGBACOLOR
}

func (t *Anim2DFrame) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.HImage, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.RgbaColor, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Anim2DFrame) Walk(cb WalkCallback, d ...any) {
	cb.Do("HImage", &t.HImage, d...)
	cb.Do("RgbaColor", &t.RgbaColor, d...)
}

type ActorCollisionFlags struct {
	UDynamicFlagsNoOverlap DT_UINT
	UDynamicMyFlags        DT_UINT
}

func (t *ActorCollisionFlags) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.UDynamicFlagsNoOverlap, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.UDynamicMyFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ActorCollisionFlags) Walk(cb WalkCallback, d ...any) {
	cb.Do("UDynamicFlagsNoOverlap", &t.UDynamicFlagsNoOverlap, d...)
	cb.Do("UDynamicMyFlags", &t.UDynamicMyFlags, d...)
}

type PlayerAnimSetOverride struct {
	SnoPlayerActor     DT_SNO
	SnoAnimSetOverride DT_SNO
}

func (t *PlayerAnimSetOverride) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoPlayerActor, r, &Options{
		Flags: 513,
		Group: 1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.SnoAnimSetOverride, r, &Options{
		Flags: 513,
		Group: 8,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PlayerAnimSetOverride) Walk(cb WalkCallback, d ...any) {
	cb.Do("SnoPlayerActor", &t.SnoPlayerActor, d...)
	cb.Do("SnoAnimSetOverride", &t.SnoAnimSetOverride, d...)
}

type ZoneProgressRewardData struct {
	ERewardType       DT_ENUM
	SnoItemReward     DT_SNO
	SnoTrackedReward  DT_SNO
	NGoldTier         DT_INT
	NStaticGoldAmount DT_INT
}

func (t *ZoneProgressRewardData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.ERewardType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.SnoItemReward, r, &Options{
		Flags: 1,
		Group: 73,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.SnoTrackedReward, r, &Options{
		Flags: 1,
		Group: 126,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.NGoldTier, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.NStaticGoldAmount, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+20, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ZoneProgressRewardData) Walk(cb WalkCallback, d ...any) {
	cb.Do("ERewardType", &t.ERewardType, d...)
	cb.Do("SnoItemReward", &t.SnoItemReward, d...)
	cb.Do("SnoTrackedReward", &t.SnoTrackedReward, d...)
	cb.Do("NGoldTier", &t.NGoldTier, d...)
	cb.Do("NStaticGoldAmount", &t.NStaticGoldAmount, d...)
}

type ShaderMapOverride struct {
	SzOverrideName DT_UINT
	NSortPriority  DT_INT
	Unk_d39db42    DT_INT
	DwValue        DT_UINT
	Unk_fae6fda    DT_TAGMAP[*DT_ENUM]
}

func (t *ShaderMapOverride) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SzOverrideName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.NSortPriority, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.Unk_d39db42, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwValue, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_fae6fda, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ShaderMapOverride) Walk(cb WalkCallback, d ...any) {
	cb.Do("SzOverrideName", &t.SzOverrideName, d...)
	cb.Do("NSortPriority", &t.NSortPriority, d...)
	cb.Do("Unk_d39db42", &t.Unk_d39db42, d...)
	cb.Do("DwValue", &t.DwValue, d...)
	cb.Do("Unk_fae6fda", &t.Unk_fae6fda, d...)
}

type ACDBuffSyncedData struct {
	SnoPower          DT_SNO
	DwDataID          DT_UINT
	SzName            DT_CHARARRAY
	AnnACDSource      DT_OPTIONAL[*DT_ACD_NETWORK_NAME]
	Unk_5806b77       DT_OPTIONAL[*DT_UINT]
	SnoEffectGroup    DT_OPTIONAL[*DT_SNO]
	SnoDOTEffectGroup DT_OPTIONAL[*DT_SNO]
	Unk_7fdd0e4       DT_OPTIONAL[*DT_UINT]
	DwStartTick       DT_OPTIONAL[*DT_UINT]
	DwDuration        DT_OPTIONAL[*DT_UINT]
	NUINumber         DT_OPTIONAL[*DT_INT]
}

func (t *ACDBuffSyncedData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoPower, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.DwDataID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.SzName, r, &Options{
		ArrayLength: 32,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.AnnACDSource, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.Unk_5806b77, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+60, &t.SnoEffectGroup, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.SnoDOTEffectGroup, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.Unk_7fdd0e4, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.DwStartTick, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.DwDuration, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+100, &t.NUINumber, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+108, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ACDBuffSyncedData) Walk(cb WalkCallback, d ...any) {
	cb.Do("SnoPower", &t.SnoPower, d...)
	cb.Do("DwDataID", &t.DwDataID, d...)
	cb.Do("SzName", &t.SzName, d...)
	cb.Do("AnnACDSource", &t.AnnACDSource, d...)
	cb.Do("Unk_5806b77", &t.Unk_5806b77, d...)
	cb.Do("SnoEffectGroup", &t.SnoEffectGroup, d...)
	cb.Do("SnoDOTEffectGroup", &t.SnoDOTEffectGroup, d...)
	cb.Do("Unk_7fdd0e4", &t.Unk_7fdd0e4, d...)
	cb.Do("DwStartTick", &t.DwStartTick, d...)
	cb.Do("DwDuration", &t.DwDuration, d...)
	cb.Do("NUINumber", &t.NUINumber, d...)
}

type PvPInfoResponse struct {
	THeader     RequiredMessageHeader
	Unk_606dae5 DT_UINT
	Bonus       DT_CHARARRAY
}

func (t *PvPInfoResponse) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_606dae5, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.Bonus, r, &Options{
		ArrayLength: 32,
		Flags:       1,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+52, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PvPInfoResponse) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("Unk_606dae5", &t.Unk_606dae5, d...)
	cb.Do("Bonus", &t.Bonus, d...)
}

type PowerConditionIsDamageType struct {
	// Inherits PowerConditionBase
	// Inherits PolymorphicBase
	DwType      DT_UINT
	BInverse    DT_INT
	DwPad       DT_UINT
	EDamageType DT_ENUM
}

func (t *PowerConditionIsDamageType) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BInverse, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.EDamageType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PowerConditionIsDamageType) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("BInverse", &t.BInverse, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("EDamageType", &t.EDamageType, d...)
}

type GenericBlobMessage struct {
	THeader   RequiredMessageHeader
	UBlobSize DT_WORD
}

func (t *GenericBlobMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.UBlobSize, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+20, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *GenericBlobMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("UBlobSize", &t.UBlobSize, d...)
}

type PlayerEnterKnownMessage struct {
	THeader               RequiredMessageHeader
	DwPlayerGameAccountId DT_UINT
	Ann                   DT_ACD_NETWORK_NAME
}

func (t *PlayerEnterKnownMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.DwPlayerGameAccountId, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.Ann, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+28, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PlayerEnterKnownMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("DwPlayerGameAccountId", &t.DwPlayerGameAccountId, d...)
	cb.Do("Ann", &t.Ann, d...)
}

type Type_a5a3cb02 struct {
	ArPlatforms DT_FIXEDARRAY[*DT_UINT]
}

func (t *Type_a5a3cb02) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.ArPlatforms, r, &Options{
		ArrayLength: 8,
		Flags:       1,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_a5a3cb02) Walk(cb WalkCallback, d ...any) {
	cb.Do("ArPlatforms", &t.ArPlatforms, d...)
}

type MarkerActorData struct {
	// Inherits MarkerDataBase
	// Inherits PolymorphicBase
	DwType                  DT_UINT
	DwPad                   DT_UINT
	SzLookName              DT_UINT
	DwShaderMapOverride     DT_UINT
	DwMarkerActorFlags      DT_UINT
	EFadeMethod             DT_ENUM
	NFadeGroup              DT_INT
	Unk_d094b9a             DT_ENUM
	Unk_529dc44             DT_ENUM
	EActorType              DT_ENUM
	EGizmoType              DT_ENUM
	Unk_940ff8e             DT_ENUM
	PtServerData            DT_VARIABLEARRAY[*MarkerServerData]
	PtMonsterActorData      DT_VARIABLEARRAY[*MarkerMonsterActorData]
	PtActorGizmoData        DT_VARIABLEARRAY[*MarkerActorGizmoData]
	PtNPCActorData          DT_VARIABLEARRAY[*MarkerNPCActorData]
	ArBakedBoneTransforms   DT_VARIABLEARRAY[*MarkerBoneTransform]
	ECullingLevelOverride   DT_ENUM
	PtRunTimeMaterialValues DT_VARIABLEARRAY[*RunTimeMaterialValues]
}

func (t *MarkerActorData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SzLookName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwShaderMapOverride, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.DwMarkerActorFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.EFadeMethod, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.NFadeGroup, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.Unk_d094b9a, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.Unk_529dc44, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.EActorType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.EGizmoType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.Unk_940ff8e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.PtServerData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.PtMonsterActorData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.PtActorGizmoData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+104, &t.PtNPCActorData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.ArBakedBoneTransforms, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+136, &t.ECullingLevelOverride, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+144, &t.PtRunTimeMaterialValues, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+160, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *MarkerActorData) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("SzLookName", &t.SzLookName, d...)
	cb.Do("DwShaderMapOverride", &t.DwShaderMapOverride, d...)
	cb.Do("DwMarkerActorFlags", &t.DwMarkerActorFlags, d...)
	cb.Do("EFadeMethod", &t.EFadeMethod, d...)
	cb.Do("NFadeGroup", &t.NFadeGroup, d...)
	cb.Do("Unk_d094b9a", &t.Unk_d094b9a, d...)
	cb.Do("Unk_529dc44", &t.Unk_529dc44, d...)
	cb.Do("EActorType", &t.EActorType, d...)
	cb.Do("EGizmoType", &t.EGizmoType, d...)
	cb.Do("Unk_940ff8e", &t.Unk_940ff8e, d...)
	cb.Do("PtServerData", &t.PtServerData, d...)
	cb.Do("PtMonsterActorData", &t.PtMonsterActorData, d...)
	cb.Do("PtActorGizmoData", &t.PtActorGizmoData, d...)
	cb.Do("PtNPCActorData", &t.PtNPCActorData, d...)
	cb.Do("ArBakedBoneTransforms", &t.ArBakedBoneTransforms, d...)
	cb.Do("ECullingLevelOverride", &t.ECullingLevelOverride, d...)
	cb.Do("PtRunTimeMaterialValues", &t.PtRunTimeMaterialValues, d...)
}

type SpeedTreeWindBase struct {
	// Inherits PolymorphicBase
	DwType DT_UINT
	DwPad  DT_UINT
}

func (t *SpeedTreeWindBase) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *SpeedTreeWindBase) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
}

type dmClothDistanceConstraintOldMirror struct {
	Params  DT_VECTOR4D
	Scale   DT_VECTOR4D
	I1      DT_WORD
	I2      DT_WORD
	Padding DT_FIXEDARRAY[*DT_WORD]
}

func (t *dmClothDistanceConstraintOldMirror) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Params, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Scale, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.I1, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+34, &t.I2, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.Padding, r, &Options{ArrayLength: 6}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *dmClothDistanceConstraintOldMirror) Walk(cb WalkCallback, d ...any) {
	cb.Do("Params", &t.Params, d...)
	cb.Do("Scale", &t.Scale, d...)
	cb.Do("I1", &t.I1, d...)
	cb.Do("I2", &t.I2, d...)
	cb.Do("Padding", &t.Padding, d...)
}

type Type_a5df0191 struct {
	EAttribute DT_ENUM
	FlBonus    DT_FLOAT
}

func (t *Type_a5df0191) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.EAttribute, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.FlBonus, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_a5df0191) Walk(cb WalkCallback, d ...any) {
	cb.Do("EAttribute", &t.EAttribute, d...)
	cb.Do("FlBonus", &t.FlBonus, d...)
}

type RepairResultsMessage struct {
	THeader RequiredMessageHeader
}

func (t *RepairResultsMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *RepairResultsMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
}

type RemovedBuffCallback struct {
	// Inherits BuffCallbackBase
	// Inherits PolymorphicBase
	DwType                DT_UINT
	DwPad                 DT_UINT
	SnoTriggerEffectGroup DT_SNO
	ArConditions          DT_POLYMORPHIC_VARIABLEARRAY[*DT_INT64]
	Unk_224db6f           DT_ENUM
	DwRemovalReasons      DT_UINT
}

func (t *RemovedBuffCallback) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoTriggerEffectGroup, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ArConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.Unk_224db6f, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.DwRemovalReasons, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if _, err := r.Seek(p+56, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *RemovedBuffCallback) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("SnoTriggerEffectGroup", &t.SnoTriggerEffectGroup, d...)
	cb.Do("ArConditions", &t.ArConditions, d...)
	cb.Do("Unk_224db6f", &t.Unk_224db6f, d...)
	cb.Do("DwRemovalReasons", &t.DwRemovalReasons, d...)
}

type GroupRegionEntry_Table struct {
	// Inherits GameBalanceTable
	// Inherits PolymorphicBase
	DwType   DT_UINT
	DwPad    DT_UINT
	TEntries DT_VARIABLEARRAY[*GroupRegionEntry]
}

func (t *GroupRegionEntry_Table) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TEntries, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *GroupRegionEntry_Table) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("TEntries", &t.TEntries, d...)
}

type TriggerEventDetachObject struct {
	// Inherits TriggerEvent
	// Inherits PolymorphicBase
	DwType           DT_UINT
	DwPad            DT_UINT
	TConditions      TriggerConditions
	FGenerated       DT_INT
	Unk_6cba752      DT_INT
	DwParentActorID  DT_UINT
	FDetachFromOwner DT_INT
	DwActorID        DT_UINT
	DwID             DT_UINT
	FEnableRagdoll   DT_INT
	TRagdollParams   EnableRagdollParams
}

func (t *TriggerEventDetachObject) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.FGenerated, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_6cba752, r, &Options{Flags: 16}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.DwParentActorID, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.FDetachFromOwner, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.DwActorID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.DwID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.FEnableRagdoll, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.TRagdollParams, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+112, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TriggerEventDetachObject) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("TConditions", &t.TConditions, d...)
	cb.Do("FGenerated", &t.FGenerated, d...)
	cb.Do("Unk_6cba752", &t.Unk_6cba752, d...)
	cb.Do("DwParentActorID", &t.DwParentActorID, d...)
	cb.Do("FDetachFromOwner", &t.FDetachFromOwner, d...)
	cb.Do("DwActorID", &t.DwActorID, d...)
	cb.Do("DwID", &t.DwID, d...)
	cb.Do("FEnableRagdoll", &t.FEnableRagdoll, d...)
	cb.Do("TRagdollParams", &t.TRagdollParams, d...)
}

type KeyedDungeonTierEntry_Table struct {
	// Inherits GameBalanceTable
	// Inherits PolymorphicBase
	DwType   DT_UINT
	DwPad    DT_UINT
	TEntries DT_VARIABLEARRAY[*KeyedDungeonTierEntry]
}

func (t *KeyedDungeonTierEntry_Table) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TEntries, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *KeyedDungeonTierEntry_Table) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("TEntries", &t.TEntries, d...)
}

type PlayerClassSorcererData struct {
	NUnlockQuestLevel    DT_INT
	SnoUnlockQuest       DT_SNO
	NDefaultEnchantSlots DT_UINT
	ArEnchantSlotUnlocks DT_VARIABLEARRAY[*SorcererEnchantSlotUnlockData]
}

func (t *PlayerClassSorcererData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.NUnlockQuestLevel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.SnoUnlockQuest, r, &Options{
		Flags: 1,
		Group: 31,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.NDefaultEnchantSlots, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.ArEnchantSlotUnlocks, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PlayerClassSorcererData) Walk(cb WalkCallback, d ...any) {
	cb.Do("NUnlockQuestLevel", &t.NUnlockQuestLevel, d...)
	cb.Do("SnoUnlockQuest", &t.SnoUnlockQuest, d...)
	cb.Do("NDefaultEnchantSlots", &t.NDefaultEnchantSlots, d...)
	cb.Do("ArEnchantSlotUnlocks", &t.ArEnchantSlotUnlocks, d...)
}

type ClassInfoDataArray struct {
	Unk_db96ab2 DT_INT
	HClassTitle DT_UINT
	HOverview   DT_UINT
	HResource   DT_UINT
	ArPlayStyle DT_VARIABLEARRAY[*ClassInfoPlayStyle]
}

func (t *ClassInfoDataArray) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Unk_db96ab2, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.HClassTitle, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.HOverview, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.HResource, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.ArPlayStyle, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ClassInfoDataArray) Walk(cb WalkCallback, d ...any) {
	cb.Do("Unk_db96ab2", &t.Unk_db96ab2, d...)
	cb.Do("HClassTitle", &t.HClassTitle, d...)
	cb.Do("HOverview", &t.HOverview, d...)
	cb.Do("HResource", &t.HResource, d...)
	cb.Do("ArPlayStyle", &t.ArPlayStyle, d...)
}

type GBIDHeader struct {
	SzName DT_CHARARRAY
	Gbid   DT_GBID
}

func (t *GBIDHeader) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SzName, r, &Options{
		ArrayLength: 256,
		Flags:       5,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+256, &t.Gbid, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+260, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *GBIDHeader) Walk(cb WalkCallback, d ...any) {
	cb.Do("SzName", &t.SzName, d...)
	cb.Do("Gbid", &t.Gbid, d...)
}

type HotbarButtonData struct {
	M_PowerSno DT_SNO
	M_ItemSno  DT_SNO
	M_annItem  DT_ACD_NETWORK_NAME
}

func (t *HotbarButtonData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.M_PowerSno, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.M_ItemSno, r, &Options{
		Flags: 1,
		Group: 73,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.M_annItem, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *HotbarButtonData) Walk(cb WalkCallback, d ...any) {
	cb.Do("M_PowerSno", &t.M_PowerSno, d...)
	cb.Do("M_ItemSno", &t.M_ItemSno, d...)
	cb.Do("M_annItem", &t.M_annItem, d...)
}

type StoryboardActivationNodeCollection struct {
	ArNodes     DT_VARIABLEARRAY[*StoryboardActivationNode]
	Unk_36cc429 DT_VARIABLEARRAY[*DT_INT]
}

func (t *StoryboardActivationNodeCollection) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.ArNodes, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_36cc429, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *StoryboardActivationNodeCollection) Walk(cb WalkCallback, d ...any) {
	cb.Do("ArNodes", &t.ArNodes, d...)
	cb.Do("Unk_36cc429", &t.Unk_36cc429, d...)
}

type Type_a81996c3 struct {
	// Inherits GlobalMarkerActorData
	// Inherits PolymorphicBase
	DwType                 DT_UINT
	DwPad                  DT_UINT
	SnoSubzone             DT_SNO
	SnoLevelArea           DT_SNO
	HMinimapIcon           DT_UINT
	Unk_a94748a            DT_UINT
	Unk_a0b181c            DT_UINT
	SnoVisibilityCondition DT_SNO
	FMinimapRespectsFoW    DT_INT
}

func (t *Type_a81996c3) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoSubzone, r, &Options{
		Flags: 513,
		Group: 80,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.SnoLevelArea, r, &Options{
		Flags: 513,
		Group: 22,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.HMinimapIcon, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.Unk_a94748a, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.Unk_a0b181c, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.SnoVisibilityCondition, r, &Options{
		Flags: 513,
		Group: 51,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.FMinimapRespectsFoW, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_a81996c3) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("SnoSubzone", &t.SnoSubzone, d...)
	cb.Do("SnoLevelArea", &t.SnoLevelArea, d...)
	cb.Do("HMinimapIcon", &t.HMinimapIcon, d...)
	cb.Do("Unk_a94748a", &t.Unk_a94748a, d...)
	cb.Do("Unk_a0b181c", &t.Unk_a0b181c, d...)
	cb.Do("SnoVisibilityCondition", &t.SnoVisibilityCondition, d...)
	cb.Do("FMinimapRespectsFoW", &t.FMinimapRespectsFoW, d...)
}

type StoryboardDefinition struct {
	TRootTracks     Type_36030d2d
	ArChildControls DT_VARIABLEARRAY[*Type_87385a6d]
	ArGenericTracks DT_POLYMORPHIC_VARIABLEARRAY[*DT_INT64]
}

func (t *StoryboardDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.TRootTracks, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.ArChildControls, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.ArGenericTracks, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+72, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *StoryboardDefinition) Walk(cb WalkCallback, d ...any) {
	cb.Do("TRootTracks", &t.TRootTracks, d...)
	cb.Do("ArChildControls", &t.ArChildControls, d...)
	cb.Do("ArGenericTracks", &t.ArGenericTracks, d...)
}

type ScriptEventParamFloatRangeInside struct {
	// Inherits ScriptEventParamBase
	// Inherits PolymorphicBase
	DwType     DT_UINT
	EParamType DT_ENUM
	DwPad      DT_UINT
	FlRange    DT_FLOAT
}

func (t *ScriptEventParamFloatRangeInside) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.EParamType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.FlRange, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ScriptEventParamFloatRangeInside) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("EParamType", &t.EParamType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("FlRange", &t.FlRange, d...)
}

type UITutorialStyle struct {
	// Inherits UIWindowStyle
	// Inherits UIControlStyle
	// Inherits PolymorphicBase
	DwType                    DT_UINT
	DwPad                     DT_UINT
	HParentStyle              UIControlHandle
	Unk_441f783               DT_INT64
	M_eHasModifiedPowerTagMap DT_TAGMAP[*DT_ENUM]
	TConsoleInput             UIControlConsoleInput
	Unk_b4f614c               DT_TAGMAP[*DT_ENUM]
}

func (t *UITutorialStyle) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.HParentStyle, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_441f783, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.M_eHasModifiedPowerTagMap, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.TConsoleInput, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.Unk_b4f614c, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+80, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *UITutorialStyle) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("HParentStyle", &t.HParentStyle, d...)
	cb.Do("Unk_441f783", &t.Unk_441f783, d...)
	cb.Do("M_eHasModifiedPowerTagMap", &t.M_eHasModifiedPowerTagMap, d...)
	cb.Do("TConsoleInput", &t.TConsoleInput, d...)
	cb.Do("Unk_b4f614c", &t.Unk_b4f614c, d...)
}

type CurrencyItem struct {
	SnoItem    DT_SNO
	UMinAmount DT_INT64
}

func (t *CurrencyItem) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoItem, r, &Options{
		Flags: 1,
		Group: 73,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.UMinAmount, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *CurrencyItem) Walk(cb WalkCallback, d ...any) {
	cb.Do("SnoItem", &t.SnoItem, d...)
	cb.Do("UMinAmount", &t.UMinAmount, d...)
}

type UIKeyMappingButtonStyle struct {
	// Inherits UIButtonStyle
	// Inherits UITextStyle
	// Inherits UIWindowStyle
	// Inherits UIControlStyle
	// Inherits PolymorphicBase
	DwType                      DT_UINT
	DwPad                       DT_UINT
	HParentStyle                UIControlHandle
	Unk_441f783                 DT_INT64
	M_eHasModifiedPowerTagMap   DT_TAGMAP[*DT_ENUM]
	TConsoleInput               UIControlConsoleInput
	Unk_b4f614c                 DT_TAGMAP[*DT_ENUM]
	TFont                       UIControlFont
	PtUIControlTagMapIconLabels DT_TAGMAP[*DT_ENUM]
	TIcon                       UIControlIcon
	TClickSounds                UIControlClickSounds
	Unk_10f81f0                 DT_TAGMAP[*DT_ENUM]
	Unk_94ea125                 DT_TAGMAP[*DT_ENUM]
}

func (t *UIKeyMappingButtonStyle) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.HParentStyle, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_441f783, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.M_eHasModifiedPowerTagMap, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.TConsoleInput, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.Unk_b4f614c, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.TFont, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.PtUIControlTagMapIconLabels, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.TIcon, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.TClickSounds, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+144, &t.Unk_10f81f0, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+160, &t.Unk_94ea125, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+176, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *UIKeyMappingButtonStyle) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("HParentStyle", &t.HParentStyle, d...)
	cb.Do("Unk_441f783", &t.Unk_441f783, d...)
	cb.Do("M_eHasModifiedPowerTagMap", &t.M_eHasModifiedPowerTagMap, d...)
	cb.Do("TConsoleInput", &t.TConsoleInput, d...)
	cb.Do("Unk_b4f614c", &t.Unk_b4f614c, d...)
	cb.Do("TFont", &t.TFont, d...)
	cb.Do("PtUIControlTagMapIconLabels", &t.PtUIControlTagMapIconLabels, d...)
	cb.Do("TIcon", &t.TIcon, d...)
	cb.Do("TClickSounds", &t.TClickSounds, d...)
	cb.Do("Unk_10f81f0", &t.Unk_10f81f0, d...)
	cb.Do("Unk_94ea125", &t.Unk_94ea125, d...)
}

type MarkerNoSpawnVolumeData struct {
	// Inherits MarkerDataBase
	// Inherits PolymorphicBase
	DwType              DT_UINT
	DwPad               DT_UINT
	ENoSpawnVolumeShape DT_ENUM
	Unk_29b00b2         DT_VARIABLEARRAY[*DT_GBID]
	Unk_158fc1a         DT_INT
	Unk_b823428         DT_FIXEDARRAY[*DT_INT]
}

func (t *MarkerNoSpawnVolumeData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.ENoSpawnVolumeShape, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_29b00b2, r, &Options{
		Flags: 1,
		Group: 20,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.Unk_158fc1a, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.Unk_b823428, r, &Options{
		ArrayLength: 4,
		Flags:       1,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+64, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *MarkerNoSpawnVolumeData) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("ENoSpawnVolumeShape", &t.ENoSpawnVolumeShape, d...)
	cb.Do("Unk_29b00b2", &t.Unk_29b00b2, d...)
	cb.Do("Unk_158fc1a", &t.Unk_158fc1a, d...)
	cb.Do("Unk_b823428", &t.Unk_b823428, d...)
}

type CrafterTabDefinition struct {
	ETabType         DT_ENUM
	Unk_c94355b      DT_VARIABLEARRAY[*DT_SNO]
	Unk_203acd1      DT_INT
	HTabTemplate     UIControlHandle
	HPanelTemplate   UIControlHandle
	Unk_cceadf3      DT_CSTRING[*DT_BYTE]
	SzRecipeListName DT_CSTRING[*DT_BYTE]
	HTabIcon         UIImageHandleReference
	Unk_6ecfa2f      DT_INT
	Unk_d09107a      DT_INT
	ERecipeEntryType DT_ENUM
	Unk_227d610      DT_INT
	SnoReputation    DT_SNO
}

func (t *CrafterTabDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.ETabType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_c94355b, r, &Options{
		Flags: 1,
		Group: 98,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.Unk_203acd1, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.HTabTemplate, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.HPanelTemplate, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.Unk_cceadf3, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.SzRecipeListName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.HTabIcon, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.Unk_6ecfa2f, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.Unk_d09107a, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+100, &t.ERecipeEntryType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+104, &t.Unk_227d610, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+108, &t.SnoReputation, r, &Options{
		Flags: 1,
		Group: 105,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+112, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *CrafterTabDefinition) Walk(cb WalkCallback, d ...any) {
	cb.Do("ETabType", &t.ETabType, d...)
	cb.Do("Unk_c94355b", &t.Unk_c94355b, d...)
	cb.Do("Unk_203acd1", &t.Unk_203acd1, d...)
	cb.Do("HTabTemplate", &t.HTabTemplate, d...)
	cb.Do("HPanelTemplate", &t.HPanelTemplate, d...)
	cb.Do("Unk_cceadf3", &t.Unk_cceadf3, d...)
	cb.Do("SzRecipeListName", &t.SzRecipeListName, d...)
	cb.Do("HTabIcon", &t.HTabIcon, d...)
	cb.Do("Unk_6ecfa2f", &t.Unk_6ecfa2f, d...)
	cb.Do("Unk_d09107a", &t.Unk_d09107a, d...)
	cb.Do("ERecipeEntryType", &t.ERecipeEntryType, d...)
	cb.Do("Unk_227d610", &t.Unk_227d610, d...)
	cb.Do("SnoReputation", &t.SnoReputation, d...)
}

type AnimTreeNodeBase struct {
	// Inherits PolymorphicBase
	DwType               DT_UINT
	DwPad                DT_UINT
	DwID                 DT_UINT
	ENodeType            DT_ENUM
	EAnimLayer           DT_ENUM
	PtChildren           DT_VARIABLEARRAY[*AnimTreeNodeChild]
	EBlendParam          DT_ENUM
	ESecondaryBlendParam DT_ENUM
	Pt2DBlendTriangles   DT_VARIABLEARRAY[*AnimTreeBlendTriangle]
	TMinBlend            DT_VECTOR2D
	TMaxBlend            DT_VECTOR2D
	TBlendIn             BlendSettings
	TBlendOut            BlendSettings
	NDefaultChildIndex   DT_INT
	NSyncGroupIndex      DT_INT
}

func (t *AnimTreeNodeBase) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.DwID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.ENodeType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.EAnimLayer, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.PtChildren, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.EBlendParam, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.ESecondaryBlendParam, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.Pt2DBlendTriangles, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.TMinBlend, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.TMaxBlend, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.TBlendIn, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.TBlendOut, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+104, &t.NDefaultChildIndex, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+108, &t.NSyncGroupIndex, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+112, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *AnimTreeNodeBase) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("DwID", &t.DwID, d...)
	cb.Do("ENodeType", &t.ENodeType, d...)
	cb.Do("EAnimLayer", &t.EAnimLayer, d...)
	cb.Do("PtChildren", &t.PtChildren, d...)
	cb.Do("EBlendParam", &t.EBlendParam, d...)
	cb.Do("ESecondaryBlendParam", &t.ESecondaryBlendParam, d...)
	cb.Do("Pt2DBlendTriangles", &t.Pt2DBlendTriangles, d...)
	cb.Do("TMinBlend", &t.TMinBlend, d...)
	cb.Do("TMaxBlend", &t.TMaxBlend, d...)
	cb.Do("TBlendIn", &t.TBlendIn, d...)
	cb.Do("TBlendOut", &t.TBlendOut, d...)
	cb.Do("NDefaultChildIndex", &t.NDefaultChildIndex, d...)
	cb.Do("NSyncGroupIndex", &t.NSyncGroupIndex, d...)
}

type SkillTreeNodeMessage struct {
	THeader     RequiredMessageHeader
	DwNodeIndex DT_UINT
}

func (t *SkillTreeNodeMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.DwNodeIndex, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+20, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *SkillTreeNodeMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("DwNodeIndex", &t.DwNodeIndex, d...)
}

type ActorPreloadHelper struct {
	SnoActor       DT_SNO
	TCustomization ActorCustomizationHelper
	TSlot          SerialDataInfo
}

func (t *ActorPreloadHelper) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoActor, r, &Options{
		Flags: 1,
		Group: 1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.TCustomization, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+60, &t.TSlot, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+68, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ActorPreloadHelper) Walk(cb WalkCallback, d ...any) {
	cb.Do("SnoActor", &t.SnoActor, d...)
	cb.Do("TCustomization", &t.TCustomization, d...)
	cb.Do("TSlot", &t.TSlot, d...)
}

type TriggerEventRestoreCamera struct {
	// Inherits TriggerEvent
	// Inherits PolymorphicBase
	DwType          DT_UINT
	DwPad           DT_UINT
	TConditions     TriggerConditions
	FGenerated      DT_INT
	Unk_6cba752     DT_INT
	DwParentActorID DT_UINT
}

func (t *TriggerEventRestoreCamera) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.FGenerated, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_6cba752, r, &Options{Flags: 16}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.DwParentActorID, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+80, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TriggerEventRestoreCamera) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("TConditions", &t.TConditions, d...)
	cb.Do("FGenerated", &t.FGenerated, d...)
	cb.Do("Unk_6cba752", &t.Unk_6cba752, d...)
	cb.Do("DwParentActorID", &t.DwParentActorID, d...)
}

type RunTimeMaterialValue_float struct {
	SnoMaterialValue DT_SNO
	Value            DT_FLOAT
	Unk_2362b28      DT_INT
}

func (t *RunTimeMaterialValue_float) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoMaterialValue, r, &Options{Group: 81}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.Value, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.Unk_2362b28, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+12, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *RunTimeMaterialValue_float) Walk(cb WalkCallback, d ...any) {
	cb.Do("SnoMaterialValue", &t.SnoMaterialValue, d...)
	cb.Do("Value", &t.Value, d...)
	cb.Do("Unk_2362b28", &t.Unk_2362b28, d...)
}

type MonsterFootstepTableEntry struct {
	// Inherits FootstepTableEntry
	// Inherits PolymorphicBase
	DwType                DT_UINT
	DwPad                 DT_UINT
	SnoSurface            DT_SNO
	Unk_96ed25b           DT_UINT
	SnoFootstepEffect     DT_SNO
	SnoFootstepWalkEffect DT_SNO
}

func (t *MonsterFootstepTableEntry) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoSurface, r, &Options{
		Flags: 1,
		Group: 43,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.Unk_96ed25b, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SnoFootstepEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.SnoFootstepWalkEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *MonsterFootstepTableEntry) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("SnoSurface", &t.SnoSurface, d...)
	cb.Do("Unk_96ed25b", &t.Unk_96ed25b, d...)
	cb.Do("SnoFootstepEffect", &t.SnoFootstepEffect, d...)
	cb.Do("SnoFootstepWalkEffect", &t.SnoFootstepWalkEffect, d...)
}

type UIScrollbarStyle struct {
	// Inherits UIWindowStyle
	// Inherits UIControlStyle
	// Inherits PolymorphicBase
	DwType                    DT_UINT
	DwPad                     DT_UINT
	HParentStyle              UIControlHandle
	Unk_441f783               DT_INT64
	M_eHasModifiedPowerTagMap DT_TAGMAP[*DT_ENUM]
	TConsoleInput             UIControlConsoleInput
	Unk_b4f614c               DT_TAGMAP[*DT_ENUM]
	Unk_171f018               DT_TAGMAP[*DT_ENUM]
}

func (t *UIScrollbarStyle) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.HParentStyle, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_441f783, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.M_eHasModifiedPowerTagMap, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.TConsoleInput, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.Unk_b4f614c, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.Unk_171f018, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+96, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *UIScrollbarStyle) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("HParentStyle", &t.HParentStyle, d...)
	cb.Do("Unk_441f783", &t.Unk_441f783, d...)
	cb.Do("M_eHasModifiedPowerTagMap", &t.M_eHasModifiedPowerTagMap, d...)
	cb.Do("TConsoleInput", &t.TConsoleInput, d...)
	cb.Do("Unk_b4f614c", &t.Unk_b4f614c, d...)
	cb.Do("Unk_171f018", &t.Unk_171f018, d...)
}

type QuestACDObjective struct {
	IdQuestID     DT_ENUM
	SnoQuest      DT_SNO
	DwPhaseUID    DT_UINT
	DwCallbackUID DT_UINT
}

func (t *QuestACDObjective) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.IdQuestID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.SnoQuest, r, &Options{
		Flags: 1,
		Group: 31,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwPhaseUID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwCallbackUID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *QuestACDObjective) Walk(cb WalkCallback, d ...any) {
	cb.Do("IdQuestID", &t.IdQuestID, d...)
	cb.Do("SnoQuest", &t.SnoQuest, d...)
	cb.Do("DwPhaseUID", &t.DwPhaseUID, d...)
	cb.Do("DwCallbackUID", &t.DwCallbackUID, d...)
}

type ValidComponent struct {
	TComponent DT_UINT
}

func (t *ValidComponent) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.TComponent, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+4, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ValidComponent) Walk(cb WalkCallback, d ...any) {
	cb.Do("TComponent", &t.TComponent, d...)
}

type WwiseChildFile struct{}

func (t *WwiseChildFile) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if _, err := r.Seek(p+1, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *WwiseChildFile) Walk(cb WalkCallback, d ...any) {}

type BlankBannerData struct {
	SzData DT_CSTRING[*DT_BYTE]
}

func (t *BlankBannerData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SzData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *BlankBannerData) Walk(cb WalkCallback, d ...any) {
	cb.Do("SzData", &t.SzData, d...)
}

type EffectGroupKeyData struct {
	// Inherits PolymorphicBase
	DwType     DT_UINT
	DwPad      DT_UINT
	ArKeyItems DT_VARIABLEARRAY[*EffectGroupKey]
}

func (t *EffectGroupKeyData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.ArKeyItems, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *EffectGroupKeyData) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("ArKeyItems", &t.ArKeyItems, d...)
}

type PreApplyBuffCallback struct {
	// Inherits BuffCallbackBase
	// Inherits PolymorphicBase
	DwType                DT_UINT
	DwPad                 DT_UINT
	SnoTriggerEffectGroup DT_SNO
	ArConditions          DT_POLYMORPHIC_VARIABLEARRAY[*DT_INT64]
}

func (t *PreApplyBuffCallback) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoTriggerEffectGroup, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ArConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PreApplyBuffCallback) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("SnoTriggerEffectGroup", &t.SnoTriggerEffectGroup, d...)
	cb.Do("ArConditions", &t.ArConditions, d...)
}

type LayerInstanceChunk struct {
	TVertexAO   MarkerInstanceGroupsAO
	Unk_2f217b0 DT_INT
}

func (t *LayerInstanceChunk) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.TVertexAO, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_2f217b0, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *LayerInstanceChunk) Walk(cb WalkCallback, d ...any) {
	cb.Do("TVertexAO", &t.TVertexAO, d...)
	cb.Do("Unk_2f217b0", &t.Unk_2f217b0, d...)
}

type ReputationValuePair struct {
	SnoReputation DT_SNO
	NValue        DT_INT
}

func (t *ReputationValuePair) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoReputation, r, &Options{
		Flags: 1,
		Group: 105,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.NValue, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ReputationValuePair) Walk(cb WalkCallback, d ...any) {
	cb.Do("SnoReputation", &t.SnoReputation, d...)
	cb.Do("NValue", &t.NValue, d...)
}

type Type_ab308a2d struct {
	Unk_c25213f DT_ENUM
	Unk_535e0f9 DT_ENUM
	Unk_db8c17d DT_ENUM
	Unk_a4ba053 DT_ENUM
	Unk_1659de  DT_ENUM
	Unk_382b348 DT_ENUM
}

func (t *Type_ab308a2d) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Unk_c25213f, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.Unk_535e0f9, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.Unk_db8c17d, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.Unk_a4ba053, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_1659de, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.Unk_382b348, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_ab308a2d) Walk(cb WalkCallback, d ...any) {
	cb.Do("Unk_c25213f", &t.Unk_c25213f, d...)
	cb.Do("Unk_535e0f9", &t.Unk_535e0f9, d...)
	cb.Do("Unk_db8c17d", &t.Unk_db8c17d, d...)
	cb.Do("Unk_a4ba053", &t.Unk_a4ba053, d...)
	cb.Do("Unk_1659de", &t.Unk_1659de, d...)
	cb.Do("Unk_382b348", &t.Unk_382b348, d...)
}

type OnEndPowerCallback struct {
	// Inherits PowerCallbackBase
	// Inherits PolymorphicBase
	DwType                DT_UINT
	DwPad                 DT_UINT
	SnoTriggerEffectGroup DT_SNO
	BCouldHaveRagdolled   DT_INT
}

func (t *OnEndPowerCallback) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoTriggerEffectGroup, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.BCouldHaveRagdolled, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *OnEndPowerCallback) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("SnoTriggerEffectGroup", &t.SnoTriggerEffectGroup, d...)
	cb.Do("BCouldHaveRagdolled", &t.BCouldHaveRagdolled, d...)
}

type ItemSalvageLevel_Table struct {
	// Inherits GameBalanceTable
	// Inherits PolymorphicBase
	DwType   DT_UINT
	DwPad    DT_UINT
	TEntries DT_VARIABLEARRAY[*ItemSalvageLevel]
}

func (t *ItemSalvageLevel_Table) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TEntries, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ItemSalvageLevel_Table) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("TEntries", &t.TEntries, d...)
}

type UIRActorStyleOptionalFieldMapDefaults struct {
	SnoActor           DT_SNO
	SnoObserver        DT_SNO
	ERenderContext     DT_ENUM
	BRotationEnabled   DT_INT
	BStaticActor       DT_INT
	BFullScreenElement DT_INT
}

func (t *UIRActorStyleOptionalFieldMapDefaults) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoActor, r, &Options{
		Flags: 1,
		Group: 1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.SnoObserver, r, &Options{
		Flags: 1,
		Group: 26,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.ERenderContext, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.BRotationEnabled, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BStaticActor, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.BFullScreenElement, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *UIRActorStyleOptionalFieldMapDefaults) Walk(cb WalkCallback, d ...any) {
	cb.Do("SnoActor", &t.SnoActor, d...)
	cb.Do("SnoObserver", &t.SnoObserver, d...)
	cb.Do("ERenderContext", &t.ERenderContext, d...)
	cb.Do("BRotationEnabled", &t.BRotationEnabled, d...)
	cb.Do("BStaticActor", &t.BStaticActor, d...)
	cb.Do("BFullScreenElement", &t.BFullScreenElement, d...)
}

type ActorCritterData struct {
	FScaredOfPlayers            DT_INT
	FlSpeedWander               DT_FLOAT
	FlSpeedRun                  DT_FLOAT
	TWanderDelayRange           DT_RANGE[*DT_FLOAT]
	FlWanderTooLongTime         DT_FLOAT
	TWanderRadiusRange          DT_RANGE[*DT_FLOAT]
	FlScaredRadius              DT_FLOAT
	TScaredTimeRange            DT_RANGE[*DT_FLOAT]
	FCanBeSquished              DT_INT
	TScaredRunAwayDistanceRange DT_RANGE[*DT_FLOAT]
	FRunAnimWhenScared          DT_INT
	FlLethalExplosionMagnitude  DT_FLOAT
}

func (t *ActorCritterData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.FScaredOfPlayers, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.FlSpeedWander, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.FlSpeedRun, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.TWanderDelayRange, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.FlWanderTooLongTime, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.TWanderRadiusRange, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.FlScaredRadius, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.TScaredTimeRange, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.FCanBeSquished, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.TScaredRunAwayDistanceRange, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.FRunAnimWhenScared, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+60, &t.FlLethalExplosionMagnitude, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+64, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ActorCritterData) Walk(cb WalkCallback, d ...any) {
	cb.Do("FScaredOfPlayers", &t.FScaredOfPlayers, d...)
	cb.Do("FlSpeedWander", &t.FlSpeedWander, d...)
	cb.Do("FlSpeedRun", &t.FlSpeedRun, d...)
	cb.Do("TWanderDelayRange", &t.TWanderDelayRange, d...)
	cb.Do("FlWanderTooLongTime", &t.FlWanderTooLongTime, d...)
	cb.Do("TWanderRadiusRange", &t.TWanderRadiusRange, d...)
	cb.Do("FlScaredRadius", &t.FlScaredRadius, d...)
	cb.Do("TScaredTimeRange", &t.TScaredTimeRange, d...)
	cb.Do("FCanBeSquished", &t.FCanBeSquished, d...)
	cb.Do("TScaredRunAwayDistanceRange", &t.TScaredRunAwayDistanceRange, d...)
	cb.Do("FRunAnimWhenScared", &t.FRunAnimWhenScared, d...)
	cb.Do("FlLethalExplosionMagnitude", &t.FlLethalExplosionMagnitude, d...)
}

type QuestCallbackRegion struct {
	EType              DT_ENUM
	VPolygonPoints     DT_VARIABLEARRAY[*DT_VECTOR2D]
	VCenterPos         DT_VECTOR2D
	FlRadius           DT_FLOAT
	BValid             DT_INT
	BManuallySpecified DT_INT
}

func (t *QuestCallbackRegion) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.EType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.VPolygonPoints, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.VCenterPos, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.FlRadius, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.BValid, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.BManuallySpecified, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *QuestCallbackRegion) Walk(cb WalkCallback, d ...any) {
	cb.Do("EType", &t.EType, d...)
	cb.Do("VPolygonPoints", &t.VPolygonPoints, d...)
	cb.Do("VCenterPos", &t.VCenterPos, d...)
	cb.Do("FlRadius", &t.FlRadius, d...)
	cb.Do("BValid", &t.BValid, d...)
	cb.Do("BManuallySpecified", &t.BManuallySpecified, d...)
}

type Type_abec9f65 struct {
	Unk_cb247f0 DT_INT
	Unk_511d1b4 DT_INT
}

func (t *Type_abec9f65) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Unk_cb247f0, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.Unk_511d1b4, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_abec9f65) Walk(cb WalkCallback, d ...any) {
	cb.Do("Unk_cb247f0", &t.Unk_cb247f0, d...)
	cb.Do("Unk_511d1b4", &t.Unk_511d1b4, d...)
}

type NPCItems struct {
	SnoMainHand DT_SNO
	SnoOffHand  DT_SNO
}

func (t *NPCItems) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoMainHand, r, &Options{
		Flags: 1,
		Group: 73,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.SnoOffHand, r, &Options{
		Flags: 1,
		Group: 73,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *NPCItems) Walk(cb WalkCallback, d ...any) {
	cb.Do("SnoMainHand", &t.SnoMainHand, d...)
	cb.Do("SnoOffHand", &t.SnoOffHand, d...)
}

type UITemplateStyleOverride struct {
	Unk_bbb329e DT_CSTRING[*DT_BYTE]
	TStyle      DT_POLYMORPHIC_VARIABLEARRAY[*UIControlStyle]
}

func (t *UITemplateStyleOverride) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Unk_bbb329e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TStyle, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+40, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *UITemplateStyleOverride) Walk(cb WalkCallback, d ...any) {
	cb.Do("Unk_bbb329e", &t.Unk_bbb329e, d...)
	cb.Do("TStyle", &t.TStyle, d...)
}

type dmClothDataOldMirror struct {
	M_aVertices               DT_INT64
	M_aFaces                  DT_INT64
	M_aDistanceConstraints    DT_INT64
	M_aBendingConstraints     DT_INT64
	M_aVertexMap              DT_INT64
	M_aCapsules               DT_INT64
	M_aPlanes                 DT_INT64
	M_aFollowerIndices        DT_INT64
	M_aAnchorMap              DT_INT64
	M_name                    DT_FIXEDARRAY[*DT_BYTE]
	M_vertexCount             DT_INT
	M_faceCount               DT_INT
	M_stapleCount             DT_INT
	M_distanceConstraintCount DT_INT
	M_bendingConstraintCount  DT_INT
	M_islandCount             DT_INT
	Unk_5f25c6                DT_INT
	M_boneCount               DT_INT
	M_anchorCount             DT_INT
	M_capsuleCount            DT_INT
	M_planeCount              DT_INT
	M_area                    DT_FLOAT
}

func (t *dmClothDataOldMirror) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.M_aVertices, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.M_aFaces, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.M_aDistanceConstraints, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.M_aBendingConstraints, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.M_aVertexMap, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.M_aCapsules, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.M_aPlanes, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.M_aFollowerIndices, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.M_aAnchorMap, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.M_name, r, &Options{ArrayLength: 32}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+104, &t.M_vertexCount, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+108, &t.M_faceCount, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.M_stapleCount, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+116, &t.M_distanceConstraintCount, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.M_bendingConstraintCount, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+124, &t.M_islandCount, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.Unk_5f25c6, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+132, &t.M_boneCount, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+136, &t.M_anchorCount, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+140, &t.M_capsuleCount, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+144, &t.M_planeCount, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+148, &t.M_area, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+152, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *dmClothDataOldMirror) Walk(cb WalkCallback, d ...any) {
	cb.Do("M_aVertices", &t.M_aVertices, d...)
	cb.Do("M_aFaces", &t.M_aFaces, d...)
	cb.Do("M_aDistanceConstraints", &t.M_aDistanceConstraints, d...)
	cb.Do("M_aBendingConstraints", &t.M_aBendingConstraints, d...)
	cb.Do("M_aVertexMap", &t.M_aVertexMap, d...)
	cb.Do("M_aCapsules", &t.M_aCapsules, d...)
	cb.Do("M_aPlanes", &t.M_aPlanes, d...)
	cb.Do("M_aFollowerIndices", &t.M_aFollowerIndices, d...)
	cb.Do("M_aAnchorMap", &t.M_aAnchorMap, d...)
	cb.Do("M_name", &t.M_name, d...)
	cb.Do("M_vertexCount", &t.M_vertexCount, d...)
	cb.Do("M_faceCount", &t.M_faceCount, d...)
	cb.Do("M_stapleCount", &t.M_stapleCount, d...)
	cb.Do("M_distanceConstraintCount", &t.M_distanceConstraintCount, d...)
	cb.Do("M_bendingConstraintCount", &t.M_bendingConstraintCount, d...)
	cb.Do("M_islandCount", &t.M_islandCount, d...)
	cb.Do("Unk_5f25c6", &t.Unk_5f25c6, d...)
	cb.Do("M_boneCount", &t.M_boneCount, d...)
	cb.Do("M_anchorCount", &t.M_anchorCount, d...)
	cb.Do("M_capsuleCount", &t.M_capsuleCount, d...)
	cb.Do("M_planeCount", &t.M_planeCount, d...)
	cb.Do("M_area", &t.M_area, d...)
}

type UIRadioButtonGroupStyle struct {
	// Inherits UIControlStyle
	// Inherits PolymorphicBase
	DwType                    DT_UINT
	DwPad                     DT_UINT
	HParentStyle              UIControlHandle
	Unk_441f783               DT_INT64
	M_eHasModifiedPowerTagMap DT_TAGMAP[*DT_ENUM]
	Unk_c8d49ac               DT_TAGMAP[*DT_ENUM]
}

func (t *UIRadioButtonGroupStyle) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.HParentStyle, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_441f783, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.M_eHasModifiedPowerTagMap, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.Unk_c8d49ac, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+64, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *UIRadioButtonGroupStyle) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("HParentStyle", &t.HParentStyle, d...)
	cb.Do("Unk_441f783", &t.Unk_441f783, d...)
	cb.Do("M_eHasModifiedPowerTagMap", &t.M_eHasModifiedPowerTagMap, d...)
	cb.Do("Unk_c8d49ac", &t.Unk_c8d49ac, d...)
}

type GameTestingBuybackItem struct {
	THeader      RequiredMessageHeader
	DwItemAmount DT_INT64
}

func (t *GameTestingBuybackItem) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.DwItemAmount, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *GameTestingBuybackItem) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("DwItemAmount", &t.DwItemAmount, d...)
}

type MaterialBoolValue struct {
	Value DT_INT
}

func (t *MaterialBoolValue) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Value, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+4, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *MaterialBoolValue) Walk(cb WalkCallback, d ...any) {
	cb.Do("Value", &t.Value, d...)
}

type TriggerEventSetHelmVisibility struct {
	// Inherits TriggerEvent
	// Inherits PolymorphicBase
	DwType          DT_UINT
	DwPad           DT_UINT
	TConditions     TriggerConditions
	FGenerated      DT_INT
	Unk_6cba752     DT_INT
	DwParentActorID DT_UINT
	Unk_279aa5a     DT_INT
	DwActorID       DT_UINT
	BHideHelm       DT_INT
}

func (t *TriggerEventSetHelmVisibility) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.FGenerated, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_6cba752, r, &Options{Flags: 16}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.DwParentActorID, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.Unk_279aa5a, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.DwActorID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.BHideHelm, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+96, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TriggerEventSetHelmVisibility) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("TConditions", &t.TConditions, d...)
	cb.Do("FGenerated", &t.FGenerated, d...)
	cb.Do("Unk_6cba752", &t.Unk_6cba752, d...)
	cb.Do("DwParentActorID", &t.DwParentActorID, d...)
	cb.Do("Unk_279aa5a", &t.Unk_279aa5a, d...)
	cb.Do("DwActorID", &t.DwActorID, d...)
	cb.Do("BHideHelm", &t.BHideHelm, d...)
}

type SubzoneModifierTagsEntry_Table struct {
	// Inherits GameBalanceTable
	// Inherits PolymorphicBase
	DwType   DT_UINT
	DwPad    DT_UINT
	TEntries DT_VARIABLEARRAY[*SubzoneModifierTagsEntry]
}

func (t *SubzoneModifierTagsEntry_Table) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TEntries, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *SubzoneModifierTagsEntry_Table) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("TEntries", &t.TEntries, d...)
}

type GameVariableValueSubcondition struct {
	// Inherits NumericComparisonSubcondition
	// Inherits Subcondition
	// Inherits PolymorphicBase
	DwType               DT_UINT
	BNegate              DT_INT
	EComparisonOp        DT_ENUM
	DwPad                DT_UINT
	GbidDesignerVariable DT_GBID
	NValue               DT_INT
}

func (t *GameVariableValueSubcondition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BNegate, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.EComparisonOp, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.GbidDesignerVariable, r, &Options{
		Flags: 1,
		Group: 45,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.NValue, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+40, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *GameVariableValueSubcondition) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("BNegate", &t.BNegate, d...)
	cb.Do("EComparisonOp", &t.EComparisonOp, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("GbidDesignerVariable", &t.GbidDesignerVariable, d...)
	cb.Do("NValue", &t.NValue, d...)
}

type dmClothTuningMirror struct {
	VGravity              DT_VECTOR3D
	FlGravityPadding      DT_FLOAT
	Unk_cc27d12           DT_VECTOR3D
	Unk_92fd45            DT_FLOAT
	PtInvTransform        DT_VECTOR4D
	BoneIndex             DT_WORD
	NIterations           DT_INT
	FlActorTrackingFactor DT_FLOAT
	FlBoneTrackingFactor  DT_FLOAT
	FlStretchingStiffness DT_FLOAT
	FlHorizontalStiffness DT_FLOAT
	FlShearStiffness      DT_FLOAT
	FlBendingStiffness    DT_FLOAT
	FlExplosionFactor     DT_FLOAT
	FlImpulseCap          DT_FLOAT
	FlImpulseFactor       DT_FLOAT
	FlWindFactor          DT_FLOAT
	FlDragFactor          DT_FLOAT
	FlLiftFactor          DT_FLOAT
	FlDampingFactor       DT_FLOAT
	FlSkinOffset          DT_FLOAT
	FlSkinExponent        DT_FLOAT
	FlSkinStiffness       DT_FLOAT
	FlAttachmentStiffness DT_FLOAT
	FlTypePassabilityCap  DT_FLOAT
	Unk_b5ff484           DT_FLOAT
	FlBlendDampingRatio   DT_FLOAT
	Unk_602c192           DT_FLOAT
	FlDensity             DT_FLOAT
	FlFrictionScale       DT_FLOAT
	FFlatten              DT_INT
	FUseShapeCollision    DT_INT
	FIsStatic             DT_INT
	Unk_cb063a7           DT_INT
	Unk_73a63cf           DT_INT
	ESolverOverride       DT_ENUM
	EBendModel            DT_ENUM
	FlStructurePadding1   DT_FLOAT
	FlStructurePadding2   DT_FLOAT
}

func (t *dmClothTuningMirror) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.VGravity, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.FlGravityPadding, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_cc27d12, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.Unk_92fd45, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.PtInvTransform, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.BoneIndex, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.NIterations, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.FlActorTrackingFactor, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+60, &t.FlBoneTrackingFactor, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.FlStretchingStiffness, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.FlHorizontalStiffness, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.FlShearStiffness, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.FlBendingStiffness, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.FlExplosionFactor, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.FlImpulseCap, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.FlImpulseFactor, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.FlWindFactor, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.FlDragFactor, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+100, &t.FlLiftFactor, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+104, &t.FlDampingFactor, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+108, &t.FlSkinOffset, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.FlSkinExponent, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+116, &t.FlSkinStiffness, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.FlAttachmentStiffness, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+124, &t.FlTypePassabilityCap, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.Unk_b5ff484, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+132, &t.FlBlendDampingRatio, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+136, &t.Unk_602c192, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+140, &t.FlDensity, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+144, &t.FlFrictionScale, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+148, &t.FFlatten, r, &Options{Flags: 8388624}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+152, &t.FUseShapeCollision, r, &Options{Flags: 8388624}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+156, &t.FIsStatic, r, &Options{Flags: 8388624}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+160, &t.Unk_cb063a7, r, &Options{Flags: 8388624}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+164, &t.Unk_73a63cf, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+168, &t.ESolverOverride, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+172, &t.EBendModel, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+176, &t.FlStructurePadding1, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+180, &t.FlStructurePadding2, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+184, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *dmClothTuningMirror) Walk(cb WalkCallback, d ...any) {
	cb.Do("VGravity", &t.VGravity, d...)
	cb.Do("FlGravityPadding", &t.FlGravityPadding, d...)
	cb.Do("Unk_cc27d12", &t.Unk_cc27d12, d...)
	cb.Do("Unk_92fd45", &t.Unk_92fd45, d...)
	cb.Do("PtInvTransform", &t.PtInvTransform, d...)
	cb.Do("BoneIndex", &t.BoneIndex, d...)
	cb.Do("NIterations", &t.NIterations, d...)
	cb.Do("FlActorTrackingFactor", &t.FlActorTrackingFactor, d...)
	cb.Do("FlBoneTrackingFactor", &t.FlBoneTrackingFactor, d...)
	cb.Do("FlStretchingStiffness", &t.FlStretchingStiffness, d...)
	cb.Do("FlHorizontalStiffness", &t.FlHorizontalStiffness, d...)
	cb.Do("FlShearStiffness", &t.FlShearStiffness, d...)
	cb.Do("FlBendingStiffness", &t.FlBendingStiffness, d...)
	cb.Do("FlExplosionFactor", &t.FlExplosionFactor, d...)
	cb.Do("FlImpulseCap", &t.FlImpulseCap, d...)
	cb.Do("FlImpulseFactor", &t.FlImpulseFactor, d...)
	cb.Do("FlWindFactor", &t.FlWindFactor, d...)
	cb.Do("FlDragFactor", &t.FlDragFactor, d...)
	cb.Do("FlLiftFactor", &t.FlLiftFactor, d...)
	cb.Do("FlDampingFactor", &t.FlDampingFactor, d...)
	cb.Do("FlSkinOffset", &t.FlSkinOffset, d...)
	cb.Do("FlSkinExponent", &t.FlSkinExponent, d...)
	cb.Do("FlSkinStiffness", &t.FlSkinStiffness, d...)
	cb.Do("FlAttachmentStiffness", &t.FlAttachmentStiffness, d...)
	cb.Do("FlTypePassabilityCap", &t.FlTypePassabilityCap, d...)
	cb.Do("Unk_b5ff484", &t.Unk_b5ff484, d...)
	cb.Do("FlBlendDampingRatio", &t.FlBlendDampingRatio, d...)
	cb.Do("Unk_602c192", &t.Unk_602c192, d...)
	cb.Do("FlDensity", &t.FlDensity, d...)
	cb.Do("FlFrictionScale", &t.FlFrictionScale, d...)
	cb.Do("FFlatten", &t.FFlatten, d...)
	cb.Do("FUseShapeCollision", &t.FUseShapeCollision, d...)
	cb.Do("FIsStatic", &t.FIsStatic, d...)
	cb.Do("Unk_cb063a7", &t.Unk_cb063a7, d...)
	cb.Do("Unk_73a63cf", &t.Unk_73a63cf, d...)
	cb.Do("ESolverOverride", &t.ESolverOverride, d...)
	cb.Do("EBendModel", &t.EBendModel, d...)
	cb.Do("FlStructurePadding1", &t.FlStructurePadding1, d...)
	cb.Do("FlStructurePadding2", &t.FlStructurePadding2, d...)
}

type GeoSet struct {
	PtSubObjects  DT_VARIABLEARRAY[*SubObject]
	Unk_9d1d596   DT_VARIABLEARRAY[*DT_INT]
	Unk_79283f    DT_INT
	Unk_af1153d   DT_INT
	FlLODDistance DT_FLOAT
}

func (t *GeoSet) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.PtSubObjects, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_9d1d596, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.Unk_79283f, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.Unk_af1153d, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.FlLODDistance, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *GeoSet) Walk(cb WalkCallback, d ...any) {
	cb.Do("PtSubObjects", &t.PtSubObjects, d...)
	cb.Do("Unk_9d1d596", &t.Unk_9d1d596, d...)
	cb.Do("Unk_79283f", &t.Unk_79283f, d...)
	cb.Do("Unk_af1153d", &t.Unk_af1153d, d...)
	cb.Do("FlLODDistance", &t.FlLODDistance, d...)
}

type RequiredResponseMessageHeader struct {
	THeader RequiredMessageHeader
	UToken  DT_UINT
	EError  DT_ENUM
}

func (t *RequiredResponseMessageHeader) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.UToken, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.EError, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *RequiredResponseMessageHeader) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("UToken", &t.UToken, d...)
	cb.Do("EError", &t.EError, d...)
}

type Type_ad4d33a9 struct {
	NWidth      DT_INT
	NHeight     DT_INT
	NDepth      DT_INT
	FlGridSize  DT_FLOAT
	WpOrigin    DT_VECTOR3D
	Unk_aa0958e DT_VARIABLEARRAY[*DT_WORD]
	Unk_aa09583 DT_VARIABLEARRAY[*DT_WORD]
	Unk_aa0957e DT_VARIABLEARRAY[*DT_WORD]
	Unk_dd3cf4b DT_VARIABLEARRAY[*DT_WORD]
	Unk_dd3cf40 DT_VARIABLEARRAY[*DT_WORD]
	Unk_dd3cf3b DT_VARIABLEARRAY[*DT_WORD]
}

func (t *Type_ad4d33a9) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.NWidth, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.NHeight, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.NDepth, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.FlGridSize, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.WpOrigin, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.Unk_aa0958e, r, &Options{Flags: 2097153}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.Unk_aa09583, r, &Options{Flags: 2097153}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.Unk_aa0957e, r, &Options{Flags: 2097153}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.Unk_dd3cf4b, r, &Options{Flags: 2097153}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.Unk_dd3cf40, r, &Options{Flags: 2097153}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.Unk_dd3cf3b, r, &Options{Flags: 2097153}); err != nil {
		return err
	}
	if _, err := r.Seek(p+128, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_ad4d33a9) Walk(cb WalkCallback, d ...any) {
	cb.Do("NWidth", &t.NWidth, d...)
	cb.Do("NHeight", &t.NHeight, d...)
	cb.Do("NDepth", &t.NDepth, d...)
	cb.Do("FlGridSize", &t.FlGridSize, d...)
	cb.Do("WpOrigin", &t.WpOrigin, d...)
	cb.Do("Unk_aa0958e", &t.Unk_aa0958e, d...)
	cb.Do("Unk_aa09583", &t.Unk_aa09583, d...)
	cb.Do("Unk_aa0957e", &t.Unk_aa0957e, d...)
	cb.Do("Unk_dd3cf4b", &t.Unk_dd3cf4b, d...)
	cb.Do("Unk_dd3cf40", &t.Unk_dd3cf40, d...)
	cb.Do("Unk_dd3cf3b", &t.Unk_dd3cf3b, d...)
}

type MountACDInfo struct {
	SnoMountPower DT_SNO
	SnoItems      DT_FIXEDARRAY[*DT_SNO]
}

func (t *MountACDInfo) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoMountPower, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.SnoItems, r, &Options{
		ArrayLength: 2,
		Flags:       9,
		Group:       73,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *MountACDInfo) Walk(cb WalkCallback, d ...any) {
	cb.Do("SnoMountPower", &t.SnoMountPower, d...)
	cb.Do("SnoItems", &t.SnoItems, d...)
}

type PlayerTradeMessage struct {
	THeader        RequiredMessageHeader
	UGameAccountId DT_OPTIONAL[*DT_UINT]
	UTradeId       DT_OPTIONAL[*DT_UINT]
	AnnItem        DT_OPTIONAL[*DT_ACD_NETWORK_NAME]
	Currency       DT_OPTIONAL[*Currency]
	Quantity       DT_OPTIONAL[*DT_INT64]
}

func (t *PlayerTradeMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.UGameAccountId, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.UTradeId, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.AnnItem, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.Currency, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Quantity, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+88, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PlayerTradeMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("UGameAccountId", &t.UGameAccountId, d...)
	cb.Do("UTradeId", &t.UTradeId, d...)
	cb.Do("AnnItem", &t.AnnItem, d...)
	cb.Do("Currency", &t.Currency, d...)
	cb.Do("Quantity", &t.Quantity, d...)
}

type DesignerVariableChanged struct {
	THeader              RequiredMessageHeader
	GbidDesignerVariable DT_GBID
	TPayload             DesignerVariablePayload
}

func (t *DesignerVariableChanged) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.GbidDesignerVariable, r, &Options{
		Flags: 1,
		Group: 45,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.TPayload, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+28, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *DesignerVariableChanged) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("GbidDesignerVariable", &t.GbidDesignerVariable, d...)
	cb.Do("TPayload", &t.TPayload, d...)
}

type GameTestingSellItem struct {
	THeader      RequiredMessageHeader
	DwItemAmount DT_INT64
}

func (t *GameTestingSellItem) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.DwItemAmount, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *GameTestingSellItem) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("DwItemAmount", &t.DwItemAmount, d...)
}

type StoryboardUIControlSetPositionTrack struct {
	// Inherits StoryboardUIControlSetValueTrack_bcVec2
	DwType          DT_UINT
	TNodeCollection StoryboardValueNodeCollection_bcVec2
	Unk_77ed19a     DT_ENUM
	DwPad           DT_UINT
}

func (t *StoryboardUIControlSetPositionTrack) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TNodeCollection, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.Unk_77ed19a, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+56, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *StoryboardUIControlSetPositionTrack) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("TNodeCollection", &t.TNodeCollection, d...)
	cb.Do("Unk_77ed19a", &t.Unk_77ed19a, d...)
	cb.Do("DwPad", &t.DwPad, d...)
}

type SetIdleAnimationMessage struct {
	THeader         RequiredMessageHeader
	Ann             DT_ACD_NETWORK_NAME
	SnoPowerAnimKey DT_SNO
	Unk_fefc30f     DT_OPTIONAL[*DT_INT]
}

func (t *SetIdleAnimationMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Ann, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SnoPowerAnimKey, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.Unk_fefc30f, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+36, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *SetIdleAnimationMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("Ann", &t.Ann, d...)
	cb.Do("SnoPowerAnimKey", &t.SnoPowerAnimKey, d...)
	cb.Do("Unk_fefc30f", &t.Unk_fefc30f, d...)
}

type TriggerEventShowPoIUI struct {
	// Inherits TriggerEvent
	// Inherits PolymorphicBase
	DwType          DT_UINT
	DwPad           DT_UINT
	TConditions     TriggerConditions
	FGenerated      DT_INT
	Unk_6cba752     DT_INT
	DwParentActorID DT_UINT
	HPoILabel       StringLabelHandleEx
	SnoPOICamera    DT_SNO
}

func (t *TriggerEventShowPoIUI) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.FGenerated, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_6cba752, r, &Options{Flags: 16}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.DwParentActorID, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.HPoILabel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.SnoPOICamera, r, &Options{
		Flags: 1,
		Group: 46,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+96, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TriggerEventShowPoIUI) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("TConditions", &t.TConditions, d...)
	cb.Do("FGenerated", &t.FGenerated, d...)
	cb.Do("Unk_6cba752", &t.Unk_6cba752, d...)
	cb.Do("DwParentActorID", &t.DwParentActorID, d...)
	cb.Do("HPoILabel", &t.HPoILabel, d...)
	cb.Do("SnoPOICamera", &t.SnoPOICamera, d...)
}

type AmbientSoundDefinition struct {
	SnoBackground           DT_SNO
	FlBackgroundInnerRadius DT_FLOAT
	Unk_2a836d6             DT_INT
	TRandomSounds           DT_VARIABLEARRAY[*RandomAmbientSoundParams]
	TDynamicGameParameter   DynamicGameParameter
	TDynamicAudioState      DynamicAudioState
}

func (t *AmbientSoundDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.SnoBackground, r, &Options{
		Flags: 1,
		Group: 40,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.FlBackgroundInnerRadius, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_2a836d6, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.TRandomSounds, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.TDynamicGameParameter, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.TDynamicAudioState, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+80, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *AmbientSoundDefinition) Walk(cb WalkCallback, d ...any) {
	cb.Do("SnoBackground", &t.SnoBackground, d...)
	cb.Do("FlBackgroundInnerRadius", &t.FlBackgroundInnerRadius, d...)
	cb.Do("Unk_2a836d6", &t.Unk_2a836d6, d...)
	cb.Do("TRandomSounds", &t.TRandomSounds, d...)
	cb.Do("TDynamicGameParameter", &t.TDynamicGameParameter, d...)
	cb.Do("TDynamicAudioState", &t.TDynamicAudioState, d...)
}

type HeroDetailsArray struct {
	ArEntries DT_VARIABLEARRAY[*HeroDetailsEntry]
}

func (t *HeroDetailsArray) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.ArEntries, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *HeroDetailsArray) Walk(cb WalkCallback, d ...any) {
	cb.Do("ArEntries", &t.ArEntries, d...)
}

type ScriptMessageMap struct {
	EEventType        DT_ENUM
	DwListenerFlags   DT_UINT
	SnoCondition      DT_SNO
	Unk_c3ba01d       DT_INT
	FlCooldownSeconds DT_FLOAT
	ArEventFilters    DT_VARIABLEARRAY[*ScriptMessageMapFilter]
	Unk_492729e       DT_POLYMORPHIC_VARIABLEARRAY[*DT_INT64]
	DwEventEntryHash  DT_UINT
}

func (t *ScriptMessageMap) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.EEventType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.DwListenerFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.SnoCondition, r, &Options{
		Flags: 1,
		Group: 51,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.Unk_c3ba01d, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.FlCooldownSeconds, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ArEventFilters, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.Unk_492729e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.DwEventEntryHash, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+72, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ScriptMessageMap) Walk(cb WalkCallback, d ...any) {
	cb.Do("EEventType", &t.EEventType, d...)
	cb.Do("DwListenerFlags", &t.DwListenerFlags, d...)
	cb.Do("SnoCondition", &t.SnoCondition, d...)
	cb.Do("Unk_c3ba01d", &t.Unk_c3ba01d, d...)
	cb.Do("FlCooldownSeconds", &t.FlCooldownSeconds, d...)
	cb.Do("ArEventFilters", &t.ArEventFilters, d...)
	cb.Do("Unk_492729e", &t.Unk_492729e, d...)
	cb.Do("DwEventEntryHash", &t.DwEventEntryHash, d...)
}

type Type_aef2f516 struct {
	NFrameStart           DT_INT
	NFrameEnd             DT_INT
	FlBlendInTime         DT_FLOAT
	FlBlendOutTime        DT_FLOAT
	BUseTargetActor       DT_INT
	Unk_737a63            DT_INT
	Unk_e3bef92           DT_UINT
	VHardpointLocalOffset DT_VECTOR3D
	FlZoom                DT_FLOAT
}

func (t *Type_aef2f516) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.NFrameStart, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.NFrameEnd, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.FlBlendInTime, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.FlBlendOutTime, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BUseTargetActor, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.Unk_737a63, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_e3bef92, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.VHardpointLocalOffset, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.FlZoom, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+44, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_aef2f516) Walk(cb WalkCallback, d ...any) {
	cb.Do("NFrameStart", &t.NFrameStart, d...)
	cb.Do("NFrameEnd", &t.NFrameEnd, d...)
	cb.Do("FlBlendInTime", &t.FlBlendInTime, d...)
	cb.Do("FlBlendOutTime", &t.FlBlendOutTime, d...)
	cb.Do("BUseTargetActor", &t.BUseTargetActor, d...)
	cb.Do("Unk_737a63", &t.Unk_737a63, d...)
	cb.Do("Unk_e3bef92", &t.Unk_e3bef92, d...)
	cb.Do("VHardpointLocalOffset", &t.VHardpointLocalOffset, d...)
	cb.Do("FlZoom", &t.FlZoom, d...)
}

type HeroDetailsEntry struct {
	DwID        DT_UINT
	ECurrency   DT_ENUM
	BShowLimit  DT_INT
	ArValues    DT_VARIABLEARRAY[*HeroDetailsValue]
	Unk_6ae314e DT_INT
	BIsCoreStat DT_INT
	Unk_40ddaae DT_FIXEDARRAY[*DT_INT]
}

func (t *HeroDetailsEntry) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.DwID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.ECurrency, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.BShowLimit, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.ArValues, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.Unk_6ae314e, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.BIsCoreStat, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.Unk_40ddaae, r, &Options{
		ArrayLength: 5,
		Flags:       1,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+64, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *HeroDetailsEntry) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwID", &t.DwID, d...)
	cb.Do("ECurrency", &t.ECurrency, d...)
	cb.Do("BShowLimit", &t.BShowLimit, d...)
	cb.Do("ArValues", &t.ArValues, d...)
	cb.Do("Unk_6ae314e", &t.Unk_6ae314e, d...)
	cb.Do("BIsCoreStat", &t.BIsCoreStat, d...)
	cb.Do("Unk_40ddaae", &t.Unk_40ddaae, d...)
}

type WorldStateSubcondition struct {
	// Inherits NumericComparisonSubcondition
	// Inherits Subcondition
	// Inherits PolymorphicBase
	DwType        DT_UINT
	BNegate       DT_INT
	EComparisonOp DT_ENUM
	DwPad         DT_UINT
	SnoWorldState DT_SNO
	NValue        DT_INT
}

func (t *WorldStateSubcondition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BNegate, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.EComparisonOp, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.SnoWorldState, r, &Options{
		Flags: 513,
		Group: 86,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.NValue, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+40, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *WorldStateSubcondition) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("BNegate", &t.BNegate, d...)
	cb.Do("EComparisonOp", &t.EComparisonOp, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("SnoWorldState", &t.SnoWorldState, d...)
	cb.Do("NValue", &t.NValue, d...)
}

type PowerConditionHasDot struct {
	// Inherits PowerConditionBase
	// Inherits PolymorphicBase
	DwType      DT_UINT
	BInverse    DT_INT
	DwPad       DT_UINT
	ESubject    DT_ENUM
	EDamageType DT_ENUM
	Unk_9d0a7aa DT_INT
}

func (t *PowerConditionHasDot) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BInverse, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ESubject, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.EDamageType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.Unk_9d0a7aa, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+40, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PowerConditionHasDot) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("BInverse", &t.BInverse, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("ESubject", &t.ESubject, d...)
	cb.Do("EDamageType", &t.EDamageType, d...)
	cb.Do("Unk_9d0a7aa", &t.Unk_9d0a7aa, d...)
}

type PowerConditionHasICD struct {
	// Inherits PowerConditionBase
	// Inherits PolymorphicBase
	DwType                    DT_UINT
	BInverse                  DT_INT
	DwPad                     DT_UINT
	ESubject                  DT_ENUM
	SnoPower                  DT_SNO
	ActorPreloadPowerCooldown DT_UINT
}

func (t *PowerConditionHasICD) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BInverse, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ESubject, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.SnoPower, r, &Options{
		Flags: 513,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.ActorPreloadPowerCooldown, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+40, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PowerConditionHasICD) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("BInverse", &t.BInverse, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("ESubject", &t.ESubject, d...)
	cb.Do("SnoPower", &t.SnoPower, d...)
	cb.Do("ActorPreloadPowerCooldown", &t.ActorPreloadPowerCooldown, d...)
}

type MaterialValueDefinition struct{}

func (t *MaterialValueDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *MaterialValueDefinition) Walk(cb WalkCallback, d ...any) {}

type UIDrawHookStyleOptionalFieldMapDefaults struct {
	SzDrawHook DT_CSTRING[*DT_BYTE]
}

func (t *UIDrawHookStyleOptionalFieldMapDefaults) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SzDrawHook, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *UIDrawHookStyleOptionalFieldMapDefaults) Walk(cb WalkCallback, d ...any) {
	cb.Do("SzDrawHook", &t.SzDrawHook, d...)
}

type SkyColorSettingsOptionalFieldMapDefaults struct {
	FlHaze               DT_FLOAT
	Unk_b61e136          DT_FLOAT
	Unk_6fc9e50          DT_RGBACOLOR
	Unk_3a37ef6          DT_RGBACOLOR
	Unk_bbf28fc          DT_INT
	FlSunDiskAltitude    DT_FLOAT
	FlSunDiskAzimuth     DT_FLOAT
	FlSunIntensityFactor DT_FLOAT
	Unk_cb0e626          DT_FLOAT
	Unk_cb0e528          DT_FLOAT
	Unk_467a561          DT_FLOAT
	Unk_d4fb023          DT_FLOAT
}

func (t *SkyColorSettingsOptionalFieldMapDefaults) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.FlHaze, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.Unk_b61e136, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.Unk_6fc9e50, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.Unk_3a37ef6, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_bbf28fc, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.FlSunDiskAltitude, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.FlSunDiskAzimuth, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.FlSunIntensityFactor, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.Unk_cb0e626, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.Unk_cb0e528, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.Unk_467a561, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.Unk_d4fb023, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *SkyColorSettingsOptionalFieldMapDefaults) Walk(cb WalkCallback, d ...any) {
	cb.Do("FlHaze", &t.FlHaze, d...)
	cb.Do("Unk_b61e136", &t.Unk_b61e136, d...)
	cb.Do("Unk_6fc9e50", &t.Unk_6fc9e50, d...)
	cb.Do("Unk_3a37ef6", &t.Unk_3a37ef6, d...)
	cb.Do("Unk_bbf28fc", &t.Unk_bbf28fc, d...)
	cb.Do("FlSunDiskAltitude", &t.FlSunDiskAltitude, d...)
	cb.Do("FlSunDiskAzimuth", &t.FlSunDiskAzimuth, d...)
	cb.Do("FlSunIntensityFactor", &t.FlSunIntensityFactor, d...)
	cb.Do("Unk_cb0e626", &t.Unk_cb0e626, d...)
	cb.Do("Unk_cb0e528", &t.Unk_cb0e528, d...)
	cb.Do("Unk_467a561", &t.Unk_467a561, d...)
	cb.Do("Unk_d4fb023", &t.Unk_d4fb023, d...)
}

type Type_af6f9d33 struct {
	// Inherits PowerCallbackBase
	// Inherits PolymorphicBase
	DwType                DT_UINT
	DwPad                 DT_UINT
	SnoTriggerEffectGroup DT_SNO
	BCouldHaveRagdolled   DT_INT
}

func (t *Type_af6f9d33) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoTriggerEffectGroup, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.BCouldHaveRagdolled, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_af6f9d33) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("SnoTriggerEffectGroup", &t.SnoTriggerEffectGroup, d...)
	cb.Do("BCouldHaveRagdolled", &t.BCouldHaveRagdolled, d...)
}

type Type_af88dbb5 struct {
	// Inherits PowerCallbackBase
	// Inherits PolymorphicBase
	DwType                DT_UINT
	DwPad                 DT_UINT
	SnoTriggerEffectGroup DT_SNO
	BCouldHaveRagdolled   DT_INT
}

func (t *Type_af88dbb5) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoTriggerEffectGroup, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.BCouldHaveRagdolled, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_af88dbb5) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("SnoTriggerEffectGroup", &t.SnoTriggerEffectGroup, d...)
	cb.Do("BCouldHaveRagdolled", &t.BCouldHaveRagdolled, d...)
}

type IKBone struct {
	NBoneIndex DT_INT
}

func (t *IKBone) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.NBoneIndex, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+4, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *IKBone) Walk(cb WalkCallback, d ...any) {
	cb.Do("NBoneIndex", &t.NBoneIndex, d...)
}

type IKData struct {
	Unk_77f305a          DT_FLOAT
	Unk_31b7df8          DT_FLOAT
	ArIKLimbs            DT_POLYMORPHIC_VARIABLEARRAY[*DT_INT64]
	THipAdjust           IKHip
	TRopeTraversalAdjust IKRopeTraversal
}

func (t *IKData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Unk_77f305a, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.Unk_31b7df8, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.ArIKLimbs, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.THipAdjust, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.TRopeTraversalAdjust, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+64, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *IKData) Walk(cb WalkCallback, d ...any) {
	cb.Do("Unk_77f305a", &t.Unk_77f305a, d...)
	cb.Do("Unk_31b7df8", &t.Unk_31b7df8, d...)
	cb.Do("ArIKLimbs", &t.ArIKLimbs, d...)
	cb.Do("THipAdjust", &t.THipAdjust, d...)
	cb.Do("TRopeTraversalAdjust", &t.TRopeTraversalAdjust, d...)
}

type ACDTranslateFacingMessage struct {
	THeader     RequiredMessageHeader
	Ann         DT_ACD_NETWORK_NAME
	ADesiredYaw DT_FLOAT
	BSnapFacing DT_INT
}

func (t *ACDTranslateFacingMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Ann, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ADesiredYaw, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.BSnapFacing, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ACDTranslateFacingMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("Ann", &t.Ann, d...)
	cb.Do("ADesiredYaw", &t.ADesiredYaw, d...)
	cb.Do("BSnapFacing", &t.BSnapFacing, d...)
}

type MalignantMonsterTierSubcondition struct {
	// Inherits Subcondition
	// Inherits PolymorphicBase
	DwType           DT_UINT
	BNegate          DT_INT
	DwPad            DT_UINT
	EMalignantTier   DT_ENUM
	EActorToEvaluate DT_ENUM
}

func (t *MalignantMonsterTierSubcondition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BNegate, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.EMalignantTier, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.EActorToEvaluate, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *MalignantMonsterTierSubcondition) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("BNegate", &t.BNegate, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("EMalignantTier", &t.EMalignantTier, d...)
	cb.Do("EActorToEvaluate", &t.EActorToEvaluate, d...)
}

type MarkerLink struct {
	NMarkerID    DT_INT
	NMarkerIndex DT_INT
}

func (t *MarkerLink) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.NMarkerID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.NMarkerIndex, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *MarkerLink) Walk(cb WalkCallback, d ...any) {
	cb.Do("NMarkerID", &t.NMarkerID, d...)
	cb.Do("NMarkerIndex", &t.NMarkerIndex, d...)
}

type HeroDetailsValue struct {
	TFormula            DT_STRING_FORMULA
	Unk_d55170          DT_UINT
	Unk_62967bd         DT_INT
	Unk_9554429         DT_INT
	Unk_395cf3a         DT_ENUM
	Unk_5bb9f8          DT_INT
	TThresholdAttribute AttributeSpecifier
	RgbaThresholdColor  DT_RGBACOLOR
}

func (t *HeroDetailsValue) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.TFormula, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.Unk_d55170, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.Unk_62967bd, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.Unk_9554429, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.Unk_395cf3a, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.Unk_5bb9f8, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.TThresholdAttribute, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+136, &t.RgbaThresholdColor, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+144, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *HeroDetailsValue) Walk(cb WalkCallback, d ...any) {
	cb.Do("TFormula", &t.TFormula, d...)
	cb.Do("Unk_d55170", &t.Unk_d55170, d...)
	cb.Do("Unk_62967bd", &t.Unk_62967bd, d...)
	cb.Do("Unk_9554429", &t.Unk_9554429, d...)
	cb.Do("Unk_395cf3a", &t.Unk_395cf3a, d...)
	cb.Do("Unk_5bb9f8", &t.Unk_5bb9f8, d...)
	cb.Do("TThresholdAttribute", &t.TThresholdAttribute, d...)
	cb.Do("RgbaThresholdColor", &t.RgbaThresholdColor, d...)
}

type PowerConditionHasDamage struct {
	// Inherits PowerConditionBase
	// Inherits PolymorphicBase
	DwType      DT_UINT
	BInverse    DT_INT
	DwPad       DT_UINT
	Unk_ac4acc0 DT_INT
}

func (t *PowerConditionHasDamage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BInverse, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_ac4acc0, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PowerConditionHasDamage) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("BInverse", &t.BInverse, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("Unk_ac4acc0", &t.Unk_ac4acc0, d...)
}

type PowerConditionIsAutoCast struct {
	// Inherits PowerConditionBase
	// Inherits PolymorphicBase
	DwType   DT_UINT
	BInverse DT_INT
	DwPad    DT_UINT
}

func (t *PowerConditionIsAutoCast) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BInverse, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PowerConditionIsAutoCast) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("BInverse", &t.BInverse, d...)
	cb.Do("DwPad", &t.DwPad, d...)
}

type EyeColorDefinition struct {
	RgbaUIDisplayColor       DT_RGBACOLOR
	NSortOrder               DT_INT
	FUsableByClass           DT_FIXEDARRAY[*DT_INT]
	RgbaIrisInner            DT_RGBACOLOR
	RgbaIrisOuter            DT_RGBACOLOR
	FlIrisBrightness         DT_FLOAT
	FlIrisRotation           DT_FLOAT
	FlIrisRoughness          DT_FLOAT
	FlIrisShadowIntensity    DT_FLOAT
	FlIrisEmissiveStrength   DT_FLOAT
	FlLimbusBlur             DT_FLOAT
	FlLimbusBrightness       DT_FLOAT
	FlLimbusThickness        DT_FLOAT
	FlPupilSize              DT_FLOAT
	FlScleraRednessAmount    DT_FLOAT
	FlScleraRednessRotation  DT_FLOAT
	FlScleraBrightness       DT_FLOAT
	FlScleraRoughness        DT_FLOAT
	FlScleraEmissiveStrength DT_FLOAT
	SnoEmissiveMask          DT_SNO
}

func (t *EyeColorDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.RgbaUIDisplayColor, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.NSortOrder, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.FUsableByClass, r, &Options{
		ArrayLength: 5,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.RgbaIrisInner, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.RgbaIrisOuter, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.FlIrisBrightness, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.FlIrisRotation, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.FlIrisRoughness, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.FlIrisShadowIntensity, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+60, &t.FlIrisEmissiveStrength, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.FlLimbusBlur, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.FlLimbusBrightness, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.FlLimbusThickness, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.FlPupilSize, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.FlScleraRednessAmount, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.FlScleraRednessRotation, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.FlScleraBrightness, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.FlScleraRoughness, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.FlScleraEmissiveStrength, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+100, &t.SnoEmissiveMask, r, &Options{
		Flags: 1,
		Group: 44,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+104, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *EyeColorDefinition) Walk(cb WalkCallback, d ...any) {
	cb.Do("RgbaUIDisplayColor", &t.RgbaUIDisplayColor, d...)
	cb.Do("NSortOrder", &t.NSortOrder, d...)
	cb.Do("FUsableByClass", &t.FUsableByClass, d...)
	cb.Do("RgbaIrisInner", &t.RgbaIrisInner, d...)
	cb.Do("RgbaIrisOuter", &t.RgbaIrisOuter, d...)
	cb.Do("FlIrisBrightness", &t.FlIrisBrightness, d...)
	cb.Do("FlIrisRotation", &t.FlIrisRotation, d...)
	cb.Do("FlIrisRoughness", &t.FlIrisRoughness, d...)
	cb.Do("FlIrisShadowIntensity", &t.FlIrisShadowIntensity, d...)
	cb.Do("FlIrisEmissiveStrength", &t.FlIrisEmissiveStrength, d...)
	cb.Do("FlLimbusBlur", &t.FlLimbusBlur, d...)
	cb.Do("FlLimbusBrightness", &t.FlLimbusBrightness, d...)
	cb.Do("FlLimbusThickness", &t.FlLimbusThickness, d...)
	cb.Do("FlPupilSize", &t.FlPupilSize, d...)
	cb.Do("FlScleraRednessAmount", &t.FlScleraRednessAmount, d...)
	cb.Do("FlScleraRednessRotation", &t.FlScleraRednessRotation, d...)
	cb.Do("FlScleraBrightness", &t.FlScleraBrightness, d...)
	cb.Do("FlScleraRoughness", &t.FlScleraRoughness, d...)
	cb.Do("FlScleraEmissiveStrength", &t.FlScleraEmissiveStrength, d...)
	cb.Do("SnoEmissiveMask", &t.SnoEmissiveMask, d...)
}

type DungeonAffixRange struct {
	TTierRange DT_RANGE[*DT_INT]
}

func (t *DungeonAffixRange) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.TTierRange, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *DungeonAffixRange) Walk(cb WalkCallback, d ...any) {
	cb.Do("TTierRange", &t.TTierRange, d...)
}

type PlayerKickTimerMessage struct {
	THeader              RequiredMessageHeader
	DwLastKickAttempt    DT_UINT
	DwLastSuccessfulKick DT_UINT
}

func (t *PlayerKickTimerMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.DwLastKickAttempt, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwLastSuccessfulKick, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PlayerKickTimerMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("DwLastKickAttempt", &t.DwLastKickAttempt, d...)
	cb.Do("DwLastSuccessfulKick", &t.DwLastSuccessfulKick, d...)
}

type UIControlConsoleInputOptionalFieldMapDefaults struct {
	SzOnL1                 DT_CSTRING[*DT_BYTE]
	SzOnL2                 DT_CSTRING[*DT_BYTE]
	SzOnL3                 DT_CSTRING[*DT_BYTE]
	SzOnR1                 DT_CSTRING[*DT_BYTE]
	SzOnR2                 DT_CSTRING[*DT_BYTE]
	SzOnR3                 DT_CSTRING[*DT_BYTE]
	SzOnButton1            DT_CSTRING[*DT_BYTE]
	SzOnButton2            DT_CSTRING[*DT_BYTE]
	SzOnButton3            DT_CSTRING[*DT_BYTE]
	SzOnButton4            DT_CSTRING[*DT_BYTE]
	SzOnDPadUp             DT_CSTRING[*DT_BYTE]
	SzOnDPadRight          DT_CSTRING[*DT_BYTE]
	SzOnDPadLeft           DT_CSTRING[*DT_BYTE]
	SzOnDPadDown           DT_CSTRING[*DT_BYTE]
	SzOnBack               DT_CSTRING[*DT_BYTE]
	SzOnStart              DT_CSTRING[*DT_BYTE]
	SzOnTouchPadButton     DT_CSTRING[*DT_BYTE]
	SzOnOptionsButton      DT_CSTRING[*DT_BYTE]
	SzOnL1Held             DT_CSTRING[*DT_BYTE]
	SzOnL2Held             DT_CSTRING[*DT_BYTE]
	SzOnL3Held             DT_CSTRING[*DT_BYTE]
	SzOnR1Held             DT_CSTRING[*DT_BYTE]
	SzOnR2Held             DT_CSTRING[*DT_BYTE]
	SzOnR3Held             DT_CSTRING[*DT_BYTE]
	SzOnButton1Held        DT_CSTRING[*DT_BYTE]
	SzOnButton2Held        DT_CSTRING[*DT_BYTE]
	SzOnButton3Held        DT_CSTRING[*DT_BYTE]
	SzOnButton4Held        DT_CSTRING[*DT_BYTE]
	SzOnDPadUpHeld         DT_CSTRING[*DT_BYTE]
	SzOnDPadRightHeld      DT_CSTRING[*DT_BYTE]
	SzOnDPadLeftHeld       DT_CSTRING[*DT_BYTE]
	SzOnDPadDownHeld       DT_CSTRING[*DT_BYTE]
	SzOnBackHeld           DT_CSTRING[*DT_BYTE]
	SzOnStartHeld          DT_CSTRING[*DT_BYTE]
	SzOnTouchPadButtonHeld DT_CSTRING[*DT_BYTE]
	SzOnOptionsButtonHeld  DT_CSTRING[*DT_BYTE]
	Unk_9a1cd2f            DT_INT
	Unk_c7baf30            DT_INT
	Unk_f559131            DT_INT
	Unk_e2699f5            DT_INT
	Unk_1007bf6            DT_INT
	Unk_3da5df7            DT_INT
	Unk_b3c98bf            DT_INT
	Unk_e167ac0            DT_INT
	Unk_f05cc1             DT_INT
	Unk_3ca3ec2            DT_INT
	Unk_6edded0            DT_INT
	Unk_be404a9            DT_INT
	Unk_9877a36            DT_INT
	Unk_f32fde3            DT_INT
	Unk_b338683            DT_INT
	Unk_e016b80            DT_INT
	Unk_3087066            DT_INT
	Unk_3a9209a            DT_INT
	SzLStickHandler        DT_CSTRING[*DT_BYTE]
	SzRStickPredicate      DT_CSTRING[*DT_BYTE]
	SzRStickHandler        DT_CSTRING[*DT_BYTE]
	SzRStickLeftHandler    DT_CSTRING[*DT_BYTE]
	SzRStickRightHandler   DT_CSTRING[*DT_BYTE]
	SzRStickUpHandler      DT_CSTRING[*DT_BYTE]
	SzRStickDownHandler    DT_CSTRING[*DT_BYTE]
}

func (t *UIControlConsoleInputOptionalFieldMapDefaults) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SzOnL1, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SzOnL2, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.SzOnL3, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.SzOnR1, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.SzOnR2, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.SzOnR3, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.SzOnButton1, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.SzOnButton2, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.SzOnButton3, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+144, &t.SzOnButton4, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+160, &t.SzOnDPadUp, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+176, &t.SzOnDPadRight, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+192, &t.SzOnDPadLeft, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+208, &t.SzOnDPadDown, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+224, &t.SzOnBack, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+240, &t.SzOnStart, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+256, &t.SzOnTouchPadButton, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+272, &t.SzOnOptionsButton, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+288, &t.SzOnL1Held, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+304, &t.SzOnL2Held, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+320, &t.SzOnL3Held, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+336, &t.SzOnR1Held, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+352, &t.SzOnR2Held, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+368, &t.SzOnR3Held, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+384, &t.SzOnButton1Held, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+400, &t.SzOnButton2Held, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+416, &t.SzOnButton3Held, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+432, &t.SzOnButton4Held, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+448, &t.SzOnDPadUpHeld, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+464, &t.SzOnDPadRightHeld, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+480, &t.SzOnDPadLeftHeld, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+496, &t.SzOnDPadDownHeld, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+512, &t.SzOnBackHeld, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+528, &t.SzOnStartHeld, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+544, &t.SzOnTouchPadButtonHeld, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+560, &t.SzOnOptionsButtonHeld, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+576, &t.Unk_9a1cd2f, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+580, &t.Unk_c7baf30, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+584, &t.Unk_f559131, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+588, &t.Unk_e2699f5, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+592, &t.Unk_1007bf6, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+596, &t.Unk_3da5df7, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+600, &t.Unk_b3c98bf, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+604, &t.Unk_e167ac0, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+608, &t.Unk_f05cc1, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+612, &t.Unk_3ca3ec2, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+616, &t.Unk_6edded0, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+620, &t.Unk_be404a9, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+624, &t.Unk_9877a36, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+628, &t.Unk_f32fde3, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+632, &t.Unk_b338683, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+636, &t.Unk_e016b80, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+640, &t.Unk_3087066, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+644, &t.Unk_3a9209a, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+648, &t.SzLStickHandler, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+664, &t.SzRStickPredicate, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+680, &t.SzRStickHandler, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+696, &t.SzRStickLeftHandler, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+712, &t.SzRStickRightHandler, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+728, &t.SzRStickUpHandler, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+744, &t.SzRStickDownHandler, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+760, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *UIControlConsoleInputOptionalFieldMapDefaults) Walk(cb WalkCallback, d ...any) {
	cb.Do("SzOnL1", &t.SzOnL1, d...)
	cb.Do("SzOnL2", &t.SzOnL2, d...)
	cb.Do("SzOnL3", &t.SzOnL3, d...)
	cb.Do("SzOnR1", &t.SzOnR1, d...)
	cb.Do("SzOnR2", &t.SzOnR2, d...)
	cb.Do("SzOnR3", &t.SzOnR3, d...)
	cb.Do("SzOnButton1", &t.SzOnButton1, d...)
	cb.Do("SzOnButton2", &t.SzOnButton2, d...)
	cb.Do("SzOnButton3", &t.SzOnButton3, d...)
	cb.Do("SzOnButton4", &t.SzOnButton4, d...)
	cb.Do("SzOnDPadUp", &t.SzOnDPadUp, d...)
	cb.Do("SzOnDPadRight", &t.SzOnDPadRight, d...)
	cb.Do("SzOnDPadLeft", &t.SzOnDPadLeft, d...)
	cb.Do("SzOnDPadDown", &t.SzOnDPadDown, d...)
	cb.Do("SzOnBack", &t.SzOnBack, d...)
	cb.Do("SzOnStart", &t.SzOnStart, d...)
	cb.Do("SzOnTouchPadButton", &t.SzOnTouchPadButton, d...)
	cb.Do("SzOnOptionsButton", &t.SzOnOptionsButton, d...)
	cb.Do("SzOnL1Held", &t.SzOnL1Held, d...)
	cb.Do("SzOnL2Held", &t.SzOnL2Held, d...)
	cb.Do("SzOnL3Held", &t.SzOnL3Held, d...)
	cb.Do("SzOnR1Held", &t.SzOnR1Held, d...)
	cb.Do("SzOnR2Held", &t.SzOnR2Held, d...)
	cb.Do("SzOnR3Held", &t.SzOnR3Held, d...)
	cb.Do("SzOnButton1Held", &t.SzOnButton1Held, d...)
	cb.Do("SzOnButton2Held", &t.SzOnButton2Held, d...)
	cb.Do("SzOnButton3Held", &t.SzOnButton3Held, d...)
	cb.Do("SzOnButton4Held", &t.SzOnButton4Held, d...)
	cb.Do("SzOnDPadUpHeld", &t.SzOnDPadUpHeld, d...)
	cb.Do("SzOnDPadRightHeld", &t.SzOnDPadRightHeld, d...)
	cb.Do("SzOnDPadLeftHeld", &t.SzOnDPadLeftHeld, d...)
	cb.Do("SzOnDPadDownHeld", &t.SzOnDPadDownHeld, d...)
	cb.Do("SzOnBackHeld", &t.SzOnBackHeld, d...)
	cb.Do("SzOnStartHeld", &t.SzOnStartHeld, d...)
	cb.Do("SzOnTouchPadButtonHeld", &t.SzOnTouchPadButtonHeld, d...)
	cb.Do("SzOnOptionsButtonHeld", &t.SzOnOptionsButtonHeld, d...)
	cb.Do("Unk_9a1cd2f", &t.Unk_9a1cd2f, d...)
	cb.Do("Unk_c7baf30", &t.Unk_c7baf30, d...)
	cb.Do("Unk_f559131", &t.Unk_f559131, d...)
	cb.Do("Unk_e2699f5", &t.Unk_e2699f5, d...)
	cb.Do("Unk_1007bf6", &t.Unk_1007bf6, d...)
	cb.Do("Unk_3da5df7", &t.Unk_3da5df7, d...)
	cb.Do("Unk_b3c98bf", &t.Unk_b3c98bf, d...)
	cb.Do("Unk_e167ac0", &t.Unk_e167ac0, d...)
	cb.Do("Unk_f05cc1", &t.Unk_f05cc1, d...)
	cb.Do("Unk_3ca3ec2", &t.Unk_3ca3ec2, d...)
	cb.Do("Unk_6edded0", &t.Unk_6edded0, d...)
	cb.Do("Unk_be404a9", &t.Unk_be404a9, d...)
	cb.Do("Unk_9877a36", &t.Unk_9877a36, d...)
	cb.Do("Unk_f32fde3", &t.Unk_f32fde3, d...)
	cb.Do("Unk_b338683", &t.Unk_b338683, d...)
	cb.Do("Unk_e016b80", &t.Unk_e016b80, d...)
	cb.Do("Unk_3087066", &t.Unk_3087066, d...)
	cb.Do("Unk_3a9209a", &t.Unk_3a9209a, d...)
	cb.Do("SzLStickHandler", &t.SzLStickHandler, d...)
	cb.Do("SzRStickPredicate", &t.SzRStickPredicate, d...)
	cb.Do("SzRStickHandler", &t.SzRStickHandler, d...)
	cb.Do("SzRStickLeftHandler", &t.SzRStickLeftHandler, d...)
	cb.Do("SzRStickRightHandler", &t.SzRStickRightHandler, d...)
	cb.Do("SzRStickUpHandler", &t.SzRStickUpHandler, d...)
	cb.Do("SzRStickDownHandler", &t.SzRStickDownHandler, d...)
}

type UIColorPickerStyle struct {
	// Inherits UIWindowStyle
	// Inherits UIControlStyle
	// Inherits PolymorphicBase
	DwType                    DT_UINT
	DwPad                     DT_UINT
	HParentStyle              UIControlHandle
	Unk_441f783               DT_INT64
	M_eHasModifiedPowerTagMap DT_TAGMAP[*DT_ENUM]
	TConsoleInput             UIControlConsoleInput
	Unk_b4f614c               DT_TAGMAP[*DT_ENUM]
	Unk_6f50cd1               DT_TAGMAP[*DT_ENUM]
}

func (t *UIColorPickerStyle) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.HParentStyle, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_441f783, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.M_eHasModifiedPowerTagMap, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.TConsoleInput, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.Unk_b4f614c, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.Unk_6f50cd1, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+96, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *UIColorPickerStyle) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("HParentStyle", &t.HParentStyle, d...)
	cb.Do("Unk_441f783", &t.Unk_441f783, d...)
	cb.Do("M_eHasModifiedPowerTagMap", &t.M_eHasModifiedPowerTagMap, d...)
	cb.Do("TConsoleInput", &t.TConsoleInput, d...)
	cb.Do("Unk_b4f614c", &t.Unk_b4f614c, d...)
	cb.Do("Unk_6f50cd1", &t.Unk_6f50cd1, d...)
}

type StoryboardUIControlSetTextColorTrack struct {
	// Inherits StoryboardUIControlSetValueTrack_RGBAColor
	DwType          DT_UINT
	TNodeCollection StoryboardValueNodeCollection_RGBAColor
	Unk_77ed19a     DT_ENUM
	DwPad           DT_UINT
}

func (t *StoryboardUIControlSetTextColorTrack) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TNodeCollection, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.Unk_77ed19a, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+56, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *StoryboardUIControlSetTextColorTrack) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("TNodeCollection", &t.TNodeCollection, d...)
	cb.Do("Unk_77ed19a", &t.Unk_77ed19a, d...)
	cb.Do("DwPad", &t.DwPad, d...)
}

type RequiredCommandFrameMessageHeader struct {
	THeader       RequiredMessageHeader
	UCommandFrame DT_UINT
}

func (t *RequiredCommandFrameMessageHeader) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.UCommandFrame, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+20, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *RequiredCommandFrameMessageHeader) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("UCommandFrame", &t.UCommandFrame, d...)
}

type WeaponExpertiseRanks_Table struct {
	// Inherits GameBalanceTable
	// Inherits PolymorphicBase
	DwType   DT_UINT
	DwPad    DT_UINT
	TEntries DT_VARIABLEARRAY[*WeaponExpertiseRanks]
}

func (t *WeaponExpertiseRanks_Table) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TEntries, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *WeaponExpertiseRanks_Table) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("TEntries", &t.TEntries, d...)
}

type InventoryChangeSkillAvailabilityMessage struct {
	THeader                RequiredMessageHeader
	Unk_b4ca56             DT_ENUM
	ECrafterLevelCondition DT_ENUM
	SnoPowerAdded          DT_SNO
	SnoPowerRemoved        DT_SNO
}

func (t *InventoryChangeSkillAvailabilityMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_b4ca56, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.ECrafterLevelCondition, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SnoPowerAdded, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.SnoPowerRemoved, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *InventoryChangeSkillAvailabilityMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("Unk_b4ca56", &t.Unk_b4ca56, d...)
	cb.Do("ECrafterLevelCondition", &t.ECrafterLevelCondition, d...)
	cb.Do("SnoPowerAdded", &t.SnoPowerAdded, d...)
	cb.Do("SnoPowerRemoved", &t.SnoPowerRemoved, d...)
}

type QuestFollower struct {
	SnoActor       DT_SNO
	TSpawnBehavior QuestFollowerSpawnBehavior
	ArPhases       DT_VARIABLEARRAY[*QuestFollowerPhaseInfo]
}

func (t *QuestFollower) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoActor, r, &Options{
		Flags: 1,
		Group: 1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.TSpawnBehavior, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.ArPhases, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *QuestFollower) Walk(cb WalkCallback, d ...any) {
	cb.Do("SnoActor", &t.SnoActor, d...)
	cb.Do("TSpawnBehavior", &t.TSpawnBehavior, d...)
	cb.Do("ArPhases", &t.ArPhases, d...)
}

type RotationCurve struct {
	PtKeysComp DT_VARIABLEARRAY[*DT_BYTE]
}

func (t *RotationCurve) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.PtKeysComp, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *RotationCurve) Walk(cb WalkCallback, d ...any) {
	cb.Do("PtKeysComp", &t.PtKeysComp, d...)
}

type QuestPhasePreloadHelper struct {
	TSNONames SerialDataInfo
}

func (t *QuestPhasePreloadHelper) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.TSNONames, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *QuestPhasePreloadHelper) Walk(cb WalkCallback, d ...any) {
	cb.Do("TSNONames", &t.TSNONames, d...)
}

type BountyData struct {
	SnoQuest         DT_SNO
	SnoWorldState    DT_SNO
	NValue           DT_INT
	EBountyType      DT_ENUM
	SnoBountySubzone DT_SNO
}

func (t *BountyData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoQuest, r, &Options{
		Flags: 1,
		Group: 31,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.SnoWorldState, r, &Options{
		Flags: 1,
		Group: 86,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.NValue, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.EBountyType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoBountySubzone, r, &Options{
		Flags: 1,
		Group: 80,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+20, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *BountyData) Walk(cb WalkCallback, d ...any) {
	cb.Do("SnoQuest", &t.SnoQuest, d...)
	cb.Do("SnoWorldState", &t.SnoWorldState, d...)
	cb.Do("NValue", &t.NValue, d...)
	cb.Do("EBountyType", &t.EBountyType, d...)
	cb.Do("SnoBountySubzone", &t.SnoBountySubzone, d...)
}

type MarkerRecipeEventGizmoData struct {
	SnoRecipe DT_SNO
}

func (t *MarkerRecipeEventGizmoData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoRecipe, r, &Options{
		Flags: 1,
		Group: 49,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+4, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *MarkerRecipeEventGizmoData) Walk(cb WalkCallback, d ...any) {
	cb.Do("SnoRecipe", &t.SnoRecipe, d...)
}

type CarryableGizmoData struct {
	// Inherits NamedGizmoData
	// Inherits ActorGizmoData
	// Inherits PolymorphicBase
	DwType                           DT_UINT
	DwPad                            DT_UINT
	FDisableNonFriendlyOperation     DT_INT
	FWalkToCenter                    DT_INT
	FGizmoStartsDisabled             DT_INT
	FUseStringListName               DT_INT
	FForceMinimapIcon                DT_INT
	FlOperationRadius                DT_FLOAT
	Unk_d0b1df5                      DT_FLOAT
	FlGizmoUseTime                   DT_FLOAT
	SnoChannelingEffect              DT_SNO
	Unk_2767229                      DT_INT
	FGizmoShowProgressBar            DT_INT
	Unk_6d9ebe1                      DT_INT
	Unk_5456245                      DT_INT
	Unk_af5815a                      DT_INT
	SnoOnClickEffect                 DT_SNO
	SnoPickedUpEffect                DT_SNO
	SnoDropOnGroundEffect            DT_SNO
	TConditionData                   GizmoConditionData
	SnoPowerOperator                 DT_SNO
	SnoPowerOperate                  DT_SNO
	SnoPowerOperatorActive           DT_SNO
	SnoPowerOperateActive            DT_SNO
	Unk_359810e                      DT_INT
	NCooldown                        DT_UINT
	Unk_9c8478e                      DT_UINT
	Unk_d45ed2d                      DT_INT
	Unk_f6b20b7                      DT_INT
	Unk_54513b8                      DT_INT
	Unk_fd1f378                      DT_UINT
	HGizmoOperateFlavorTextMsgLabel  DT_UINT
	HGizmoOperateDescriptionMsgLabel DT_UINT
	FlGizmoOperateOffset             DT_FLOAT
	Unk_ab58cd3                      DT_ENUM
	Unk_91a3966                      DT_UINT
	HGizmoChannelingLabel            DT_UINT
	Unk_4be4371                      DT_INT
	SnoCarryablePower                DT_SNO
	Unk_aa86ba7                      DT_INT
	FAttachCarryableToPlayer         DT_INT
	THardpointLink                   HardpointLink
}

func (t *CarryableGizmoData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.FDisableNonFriendlyOperation, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.FWalkToCenter, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.FGizmoStartsDisabled, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.FUseStringListName, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.FForceMinimapIcon, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.FlOperationRadius, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.Unk_d0b1df5, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.FlGizmoUseTime, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.SnoChannelingEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.Unk_2767229, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.FGizmoShowProgressBar, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+60, &t.Unk_6d9ebe1, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.Unk_5456245, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.Unk_af5815a, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.SnoOnClickEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.SnoPickedUpEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.SnoDropOnGroundEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.TConditionData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.SnoPowerOperator, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.SnoPowerOperate, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.SnoPowerOperatorActive, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+100, &t.SnoPowerOperateActive, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+104, &t.Unk_359810e, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+108, &t.NCooldown, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.Unk_9c8478e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+116, &t.Unk_d45ed2d, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.Unk_f6b20b7, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+124, &t.Unk_54513b8, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.Unk_fd1f378, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+132, &t.HGizmoOperateFlavorTextMsgLabel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+136, &t.HGizmoOperateDescriptionMsgLabel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+140, &t.FlGizmoOperateOffset, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+144, &t.Unk_ab58cd3, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+148, &t.Unk_91a3966, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+152, &t.HGizmoChannelingLabel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+156, &t.Unk_4be4371, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+160, &t.SnoCarryablePower, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+164, &t.Unk_aa86ba7, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+168, &t.FAttachCarryableToPlayer, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+172, &t.THardpointLink, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+184, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *CarryableGizmoData) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("FDisableNonFriendlyOperation", &t.FDisableNonFriendlyOperation, d...)
	cb.Do("FWalkToCenter", &t.FWalkToCenter, d...)
	cb.Do("FGizmoStartsDisabled", &t.FGizmoStartsDisabled, d...)
	cb.Do("FUseStringListName", &t.FUseStringListName, d...)
	cb.Do("FForceMinimapIcon", &t.FForceMinimapIcon, d...)
	cb.Do("FlOperationRadius", &t.FlOperationRadius, d...)
	cb.Do("Unk_d0b1df5", &t.Unk_d0b1df5, d...)
	cb.Do("FlGizmoUseTime", &t.FlGizmoUseTime, d...)
	cb.Do("SnoChannelingEffect", &t.SnoChannelingEffect, d...)
	cb.Do("Unk_2767229", &t.Unk_2767229, d...)
	cb.Do("FGizmoShowProgressBar", &t.FGizmoShowProgressBar, d...)
	cb.Do("Unk_6d9ebe1", &t.Unk_6d9ebe1, d...)
	cb.Do("Unk_5456245", &t.Unk_5456245, d...)
	cb.Do("Unk_af5815a", &t.Unk_af5815a, d...)
	cb.Do("SnoOnClickEffect", &t.SnoOnClickEffect, d...)
	cb.Do("SnoPickedUpEffect", &t.SnoPickedUpEffect, d...)
	cb.Do("SnoDropOnGroundEffect", &t.SnoDropOnGroundEffect, d...)
	cb.Do("TConditionData", &t.TConditionData, d...)
	cb.Do("SnoPowerOperator", &t.SnoPowerOperator, d...)
	cb.Do("SnoPowerOperate", &t.SnoPowerOperate, d...)
	cb.Do("SnoPowerOperatorActive", &t.SnoPowerOperatorActive, d...)
	cb.Do("SnoPowerOperateActive", &t.SnoPowerOperateActive, d...)
	cb.Do("Unk_359810e", &t.Unk_359810e, d...)
	cb.Do("NCooldown", &t.NCooldown, d...)
	cb.Do("Unk_9c8478e", &t.Unk_9c8478e, d...)
	cb.Do("Unk_d45ed2d", &t.Unk_d45ed2d, d...)
	cb.Do("Unk_f6b20b7", &t.Unk_f6b20b7, d...)
	cb.Do("Unk_54513b8", &t.Unk_54513b8, d...)
	cb.Do("Unk_fd1f378", &t.Unk_fd1f378, d...)
	cb.Do("HGizmoOperateFlavorTextMsgLabel", &t.HGizmoOperateFlavorTextMsgLabel, d...)
	cb.Do("HGizmoOperateDescriptionMsgLabel", &t.HGizmoOperateDescriptionMsgLabel, d...)
	cb.Do("FlGizmoOperateOffset", &t.FlGizmoOperateOffset, d...)
	cb.Do("Unk_ab58cd3", &t.Unk_ab58cd3, d...)
	cb.Do("Unk_91a3966", &t.Unk_91a3966, d...)
	cb.Do("HGizmoChannelingLabel", &t.HGizmoChannelingLabel, d...)
	cb.Do("Unk_4be4371", &t.Unk_4be4371, d...)
	cb.Do("SnoCarryablePower", &t.SnoCarryablePower, d...)
	cb.Do("Unk_aa86ba7", &t.Unk_aa86ba7, d...)
	cb.Do("FAttachCarryableToPlayer", &t.FAttachCarryableToPlayer, d...)
	cb.Do("THardpointLink", &t.THardpointLink, d...)
}

type StoryboardUIControlSetRotationTrack struct {
	// Inherits StoryboardUIControlSetValueTrack_float
	DwType          DT_UINT
	TNodeCollection StoryboardValueNodeCollection_float
	Unk_77ed19a     DT_ENUM
	DwPad           DT_UINT
}

func (t *StoryboardUIControlSetRotationTrack) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TNodeCollection, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.Unk_77ed19a, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+56, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *StoryboardUIControlSetRotationTrack) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("TNodeCollection", &t.TNodeCollection, d...)
	cb.Do("Unk_77ed19a", &t.Unk_77ed19a, d...)
	cb.Do("DwPad", &t.DwPad, d...)
}

type ZoneProgressPerZoneData struct {
	ArCamps          DT_VARIABLEARRAY[*DT_SNO]
	ArDungeons       DT_VARIABLEARRAY[*DT_SNO]
	GbidHiddenCaches DT_VARIABLEARRAY[*DT_GBID]
	ArSideQuests     DT_VARIABLEARRAY[*DT_SNO]
	ArWaypoints      DT_VARIABLEARRAY[*DT_SNO]
	ArFogOfWar       DT_VARIABLEARRAY[*DT_SNO]
	ArRewardData     DT_FIXEDARRAY[*ZoneProgressRewardPerTierData]
}

func (t *ZoneProgressPerZoneData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.ArCamps, r, &Options{
		Flags: 1,
		Group: 31,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.ArDungeons, r, &Options{
		Flags: 1,
		Group: 48,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.GbidHiddenCaches, r, &Options{
		Flags: 1,
		Group: 28,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.ArSideQuests, r, &Options{
		Flags: 1,
		Group: 31,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.ArWaypoints, r, &Options{
		Flags: 1,
		Group: 22,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.ArFogOfWar, r, &Options{
		Flags: 1,
		Group: 123,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.ArRewardData, r, &Options{
		ArrayLength: 5,
		Flags:       1,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+376, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ZoneProgressPerZoneData) Walk(cb WalkCallback, d ...any) {
	cb.Do("ArCamps", &t.ArCamps, d...)
	cb.Do("ArDungeons", &t.ArDungeons, d...)
	cb.Do("GbidHiddenCaches", &t.GbidHiddenCaches, d...)
	cb.Do("ArSideQuests", &t.ArSideQuests, d...)
	cb.Do("ArWaypoints", &t.ArWaypoints, d...)
	cb.Do("ArFogOfWar", &t.ArFogOfWar, d...)
	cb.Do("ArRewardData", &t.ArRewardData, d...)
}

type MarkerAxeMapIconData struct {
	// Inherits MarkerDataBase
	// Inherits PolymorphicBase
	DwType DT_UINT
	DwPad  DT_UINT
}

func (t *MarkerAxeMapIconData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *MarkerAxeMapIconData) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
}

type OffHandItemLabelSubcondition struct {
	// Inherits Subcondition
	// Inherits PolymorphicBase
	DwType     DT_UINT
	BNegate    DT_INT
	DwPad      DT_UINT
	NItemLabel DT_ENUM
}

func (t *OffHandItemLabelSubcondition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BNegate, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.NItemLabel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *OffHandItemLabelSubcondition) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("BNegate", &t.BNegate, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("NItemLabel", &t.NItemLabel, d...)
}

type ConstraintLink struct {
	DwHash DT_UINT
}

func (t *ConstraintLink) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.DwHash, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+4, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ConstraintLink) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwHash", &t.DwHash, d...)
}

type MapRevealSceneMessage struct {
	THeader      RequiredMessageHeader
	SnoScene     DT_SNO
	Aabb         AABB
	IdSWorld     DT_SHARED_SERVER_DATA_ID
	BRevealed    DT_INT
	Unk_8a2f554  DT_BYTE
	BExterior    DT_INT
	Unk_6646a2   DT_FIXEDARRAY[*DT_SNO]
	SnoLevelArea DT_OPTIONAL[*DT_SNO]
}

func (t *MapRevealSceneMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoScene, r, &Options{
		Flags: 1,
		Group: 33,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.Aabb, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.IdSWorld, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.BRevealed, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.Unk_8a2f554, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+60, &t.BExterior, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.Unk_6646a2, r, &Options{
		ArrayLength: 4,
		Flags:       9,
		Group:       22,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.SnoLevelArea, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+92, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *MapRevealSceneMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("SnoScene", &t.SnoScene, d...)
	cb.Do("Aabb", &t.Aabb, d...)
	cb.Do("IdSWorld", &t.IdSWorld, d...)
	cb.Do("BRevealed", &t.BRevealed, d...)
	cb.Do("Unk_8a2f554", &t.Unk_8a2f554, d...)
	cb.Do("BExterior", &t.BExterior, d...)
	cb.Do("Unk_6646a2", &t.Unk_6646a2, d...)
	cb.Do("SnoLevelArea", &t.SnoLevelArea, d...)
}

type QuestChainStep struct {
	DwID     DT_UINT
	SnoQuest DT_SNO
}

func (t *QuestChainStep) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.DwID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.SnoQuest, r, &Options{
		Flags: 1,
		Group: 31,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *QuestChainStep) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwID", &t.DwID, d...)
	cb.Do("SnoQuest", &t.SnoQuest, d...)
}

type SummonActorEntry struct {
	DwWeight       DT_UINT
	SnoSummonActor DT_SNO
	TSummonRange   DT_RANGE[*DT_UINT]
	Unk_100c8cd    DT_UINT
	SnoCondition   DT_SNO
}

func (t *SummonActorEntry) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.DwWeight, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.SnoSummonActor, r, &Options{
		Flags: 513,
		Group: 1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.TSummonRange, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_100c8cd, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.SnoCondition, r, &Options{
		Flags: 1,
		Group: 51,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *SummonActorEntry) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwWeight", &t.DwWeight, d...)
	cb.Do("SnoSummonActor", &t.SnoSummonActor, d...)
	cb.Do("TSummonRange", &t.TSummonRange, d...)
	cb.Do("Unk_100c8cd", &t.Unk_100c8cd, d...)
	cb.Do("SnoCondition", &t.SnoCondition, d...)
}

type InvLoc struct {
	AnnOwner DT_ACD_NETWORK_NAME
	ESlot    DT_ENUM
	NSlotX   DT_INT
	NSlotY   DT_INT
}

func (t *InvLoc) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.AnnOwner, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.ESlot, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.NSlotX, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.NSlotY, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+20, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *InvLoc) Walk(cb WalkCallback, d ...any) {
	cb.Do("AnnOwner", &t.AnnOwner, d...)
	cb.Do("ESlot", &t.ESlot, d...)
	cb.Do("NSlotX", &t.NSlotX, d...)
	cb.Do("NSlotY", &t.NSlotY, d...)
}

type InventoryRequestMoveMessage struct {
	THeader   RequiredMessageHeader
	AnnItem   DT_ACD_NETWORK_NAME
	TLocation InvLoc
}

func (t *InventoryRequestMoveMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.AnnItem, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.TLocation, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+44, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *InventoryRequestMoveMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("AnnItem", &t.AnnItem, d...)
	cb.Do("TLocation", &t.TLocation, d...)
}

type UIDateTimeSettings struct {
	Unk_a8652e7 DT_INT64
	Unk_e037d99 DT_ENUM
	Unk_cc3458a DT_ENUM
	EStyle      DT_ENUM
}

func (t *UIDateTimeSettings) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Unk_a8652e7, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.Unk_e037d99, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.Unk_cc3458a, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.EStyle, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *UIDateTimeSettings) Walk(cb WalkCallback, d ...any) {
	cb.Do("Unk_a8652e7", &t.Unk_a8652e7, d...)
	cb.Do("Unk_e037d99", &t.Unk_e037d99, d...)
	cb.Do("Unk_cc3458a", &t.Unk_cc3458a, d...)
	cb.Do("EStyle", &t.EStyle, d...)
}

type ShaderPermutation struct {
	Unk_e3331b5 DT_VARIABLEARRAY[*DT_ENUM]
	Unk_a2b58a8 DT_VARIABLEARRAY[*DT_ENUM]
	TPrograms   DT_FIXEDARRAY[*ShaderPermShaderProgram]
}

func (t *ShaderPermutation) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Unk_e3331b5, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_a2b58a8, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.TPrograms, r, &Options{ArrayLength: 5}); err != nil {
		return err
	}
	if _, err := r.Seek(p+552, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ShaderPermutation) Walk(cb WalkCallback, d ...any) {
	cb.Do("Unk_e3331b5", &t.Unk_e3331b5, d...)
	cb.Do("Unk_a2b58a8", &t.Unk_a2b58a8, d...)
	cb.Do("TPrograms", &t.TPrograms, d...)
}

type BossDoorInstanceData struct {
	SnoNonParticipatingEffectGroup DT_SNO
	SnoParticipatingEffectGroup    DT_SNO
}

func (t *BossDoorInstanceData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoNonParticipatingEffectGroup, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.SnoParticipatingEffectGroup, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *BossDoorInstanceData) Walk(cb WalkCallback, d ...any) {
	cb.Do("SnoNonParticipatingEffectGroup", &t.SnoNonParticipatingEffectGroup, d...)
	cb.Do("SnoParticipatingEffectGroup", &t.SnoParticipatingEffectGroup, d...)
}

type AnimTreeOverride struct {
	PtNodeOverrides DT_VARIABLEARRAY[*AnimTreeNodeOverrideWrapper]
}

func (t *AnimTreeOverride) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.PtNodeOverrides, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *AnimTreeOverride) Walk(cb WalkCallback, d ...any) {
	cb.Do("PtNodeOverrides", &t.PtNodeOverrides, d...)
}

type DesignerWorldFeatureFlagSubcondition struct {
	// Inherits Subcondition
	// Inherits PolymorphicBase
	DwType          DT_UINT
	BNegate         DT_INT
	DwPad           DT_UINT
	GbidFeatureFlag DT_GBID
}

func (t *DesignerWorldFeatureFlagSubcondition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BNegate, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.GbidFeatureFlag, r, &Options{
		Flags: 1,
		Group: 74,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *DesignerWorldFeatureFlagSubcondition) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("BNegate", &t.BNegate, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("GbidFeatureFlag", &t.GbidFeatureFlag, d...)
}

type LevelAreaTagSubcondition struct {
	// Inherits Subcondition
	// Inherits PolymorphicBase
	DwType                   DT_UINT
	BNegate                  DT_INT
	DwPad                    DT_UINT
	GbidRequiredLevelAreaTag DT_GBID
}

func (t *LevelAreaTagSubcondition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BNegate, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.GbidRequiredLevelAreaTag, r, &Options{
		Flags: 1,
		Group: 55,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *LevelAreaTagSubcondition) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("BNegate", &t.BNegate, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("GbidRequiredLevelAreaTag", &t.GbidRequiredLevelAreaTag, d...)
}

type BountyDataMessage struct {
	THeader       RequiredMessageHeader
	SnoBounty     DT_SNO
	SnoRewardItem DT_SNO
	DwEndTime     DT_INT64
}

func (t *BountyDataMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoBounty, r, &Options{
		Flags: 1,
		Group: 31,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.SnoRewardItem, r, &Options{
		Flags: 1,
		Group: 73,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.DwEndTime, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *BountyDataMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("SnoBounty", &t.SnoBounty, d...)
	cb.Do("SnoRewardItem", &t.SnoRewardItem, d...)
	cb.Do("DwEndTime", &t.DwEndTime, d...)
}

type Type_b3c2ea5e struct {
	DwTilePosHash DT_UINT
	ETileType     DT_ENUM
}

func (t *Type_b3c2ea5e) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.DwTilePosHash, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.ETileType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_b3c2ea5e) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwTilePosHash", &t.DwTilePosHash, d...)
	cb.Do("ETileType", &t.ETileType, d...)
}

type AxialCylinder struct {
	WpBase   DT_VECTOR3D
	WdHeight DT_FLOAT
	WdRadius DT_FLOAT
}

func (t *AxialCylinder) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.WpBase, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.WdHeight, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.WdRadius, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+20, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *AxialCylinder) Walk(cb WalkCallback, d ...any) {
	cb.Do("WpBase", &t.WpBase, d...)
	cb.Do("WdHeight", &t.WdHeight, d...)
	cb.Do("WdRadius", &t.WdRadius, d...)
}

type Type_b3d7f019 struct {
	THeader    RequiredMessageHeader
	WpLocation DT_VECTOR3D
}

func (t *Type_b3d7f019) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.WpLocation, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+28, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_b3d7f019) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("WpLocation", &t.WpLocation, d...)
}

type TriggerEventObjectMoveToLocator struct {
	// Inherits TriggerEventRangedDuration
	// Inherits TriggerEvent
	// Inherits PolymorphicBase
	DwType                     DT_UINT
	TConditions                TriggerConditions
	FGenerated                 DT_INT
	Unk_6cba752                DT_INT
	DwParentActorID            DT_UINT
	TDuration                  DT_FLOAT
	DwTriggerFlags             DT_UINT
	DwTriggerFlagsEx           DT_UINT
	TCleanup                   TriggerCleanup
	Unk_49e9257                DT_INT
	Unk_5490979                DT_INT
	DwPad                      DT_UINT
	DwObjectID                 DT_UINT
	SzLocatorName              DT_UINT
	EOrientationMode           DT_ENUM
	ELookAtTargetType          DT_ENUM
	Unk_6101673                DT_UINT
	THardpointLinkLookAtTarget HardpointLink
	DwLookAtTargetID           DT_UINT
	EBlendEasing               DT_ENUM
	EMoveRate                  DT_ENUM
	EDynamicMovementSpeed      DT_ENUM
	FUseDynamicMovement        DT_INT
	Unk_23237e1                DT_INT
	Unk_f1b6afc                DT_FLOAT
}

func (t *TriggerEventObjectMoveToLocator) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.FGenerated, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_6cba752, r, &Options{Flags: 16}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.DwParentActorID, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.TDuration, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.DwTriggerFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.DwTriggerFlagsEx, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.TCleanup, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+116, &t.Unk_49e9257, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.Unk_5490979, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+124, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.DwObjectID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+132, &t.SzLocatorName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+136, &t.EOrientationMode, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+140, &t.ELookAtTargetType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+144, &t.Unk_6101673, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+148, &t.THardpointLinkLookAtTarget, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+156, &t.DwLookAtTargetID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+160, &t.EBlendEasing, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+164, &t.EMoveRate, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+168, &t.EDynamicMovementSpeed, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+172, &t.FUseDynamicMovement, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+176, &t.Unk_23237e1, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+180, &t.Unk_f1b6afc, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+184, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TriggerEventObjectMoveToLocator) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("TConditions", &t.TConditions, d...)
	cb.Do("FGenerated", &t.FGenerated, d...)
	cb.Do("Unk_6cba752", &t.Unk_6cba752, d...)
	cb.Do("DwParentActorID", &t.DwParentActorID, d...)
	cb.Do("TDuration", &t.TDuration, d...)
	cb.Do("DwTriggerFlags", &t.DwTriggerFlags, d...)
	cb.Do("DwTriggerFlagsEx", &t.DwTriggerFlagsEx, d...)
	cb.Do("TCleanup", &t.TCleanup, d...)
	cb.Do("Unk_49e9257", &t.Unk_49e9257, d...)
	cb.Do("Unk_5490979", &t.Unk_5490979, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("DwObjectID", &t.DwObjectID, d...)
	cb.Do("SzLocatorName", &t.SzLocatorName, d...)
	cb.Do("EOrientationMode", &t.EOrientationMode, d...)
	cb.Do("ELookAtTargetType", &t.ELookAtTargetType, d...)
	cb.Do("Unk_6101673", &t.Unk_6101673, d...)
	cb.Do("THardpointLinkLookAtTarget", &t.THardpointLinkLookAtTarget, d...)
	cb.Do("DwLookAtTargetID", &t.DwLookAtTargetID, d...)
	cb.Do("EBlendEasing", &t.EBlendEasing, d...)
	cb.Do("EMoveRate", &t.EMoveRate, d...)
	cb.Do("EDynamicMovementSpeed", &t.EDynamicMovementSpeed, d...)
	cb.Do("FUseDynamicMovement", &t.FUseDynamicMovement, d...)
	cb.Do("Unk_23237e1", &t.Unk_23237e1, d...)
	cb.Do("Unk_f1b6afc", &t.Unk_f1b6afc, d...)
}

type Type_b3f69894 struct {
	Unk_d93e026 DT_FLOAT
	Unk_a346cdd DT_INT
}

func (t *Type_b3f69894) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Unk_d93e026, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.Unk_a346cdd, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_b3f69894) Walk(cb WalkCallback, d ...any) {
	cb.Do("Unk_d93e026", &t.Unk_d93e026, d...)
	cb.Do("Unk_a346cdd", &t.Unk_a346cdd, d...)
}

type Type_b3ff0077 struct {
	// Inherits TriggerEvent
	// Inherits PolymorphicBase
	DwType            DT_UINT
	DwPad             DT_UINT
	TConditions       TriggerConditions
	FGenerated        DT_INT
	Unk_6cba752       DT_INT
	DwParentActorID   DT_UINT
	BOverridePosition DT_INT
	VecPosition       DT_VECTOR2D
	SzText            DT_CSTRING[*DT_BYTE]
}

func (t *Type_b3ff0077) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.FGenerated, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_6cba752, r, &Options{Flags: 16}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.DwParentActorID, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.BOverridePosition, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.VecPosition, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.SzText, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+112, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_b3ff0077) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("TConditions", &t.TConditions, d...)
	cb.Do("FGenerated", &t.FGenerated, d...)
	cb.Do("Unk_6cba752", &t.Unk_6cba752, d...)
	cb.Do("DwParentActorID", &t.DwParentActorID, d...)
	cb.Do("BOverridePosition", &t.BOverridePosition, d...)
	cb.Do("VecPosition", &t.VecPosition, d...)
	cb.Do("SzText", &t.SzText, d...)
}

type PlayerSetCameraDefaultsMessage struct {
	THeader RequiredMessageHeader
}

func (t *PlayerSetCameraDefaultsMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PlayerSetCameraDefaultsMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
}

type ParagonBoardDefinition struct {
	NWidth    DT_UINT
	ArEntries DT_VARIABLEARRAY[*DT_SNO]
}

func (t *ParagonBoardDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.NWidth, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.ArEntries, r, &Options{
		Flags: 1,
		Group: 106,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ParagonBoardDefinition) Walk(cb WalkCallback, d ...any) {
	cb.Do("NWidth", &t.NWidth, d...)
	cb.Do("ArEntries", &t.ArEntries, d...)
}

type PreloadHelper struct {
	ArActorPreloadHelpers                     DT_VARIABLEARRAY[*ActorPreloadHelper]
	ArItemPreloadHelpers                      DT_VARIABLEARRAY[*ItemPreloadHelper]
	ArActorVariantPreloadHelpers              DT_VARIABLEARRAY[*ActorVariantPreloadHelper]
	ArSummonedActorPreloadHelpers             DT_VARIABLEARRAY[*SummonedActorsPreloadHelper]
	ArSceneSubzoneMarkerSetPreloadHelpers     DT_VARIABLEARRAY[*SceneSubzoneMarkerSetPreloadHelper]
	ArActorSlotHelpers                        DT_VARIABLEARRAY[*ActorSlotHelper]
	ArActorFaceHelpers                        DT_VARIABLEARRAY[*ActorFaceHelper]
	Unk_71df495                               DT_VARIABLEARRAY[*Type_8636d92f]
	ArAppearanceAndMaterialContents           DT_VARIABLEARRAY[*AppearanceAndMaterialContent]
	ArTextureContents                         DT_VARIABLEARRAY[*TextureContent]
	ArEffectGroupPreloadHelpers               DT_VARIABLEARRAY[*EffectGroupPreloadHelper]
	ArEffectGroupActorVariants                DT_VARIABLEARRAY[*EffectGroupActorVariant]
	ArActorAnimSetPreloadHelpers              DT_VARIABLEARRAY[*ActorAnimSetPreloadHelper]
	ArAnimSetAnimPreloadHelpers               DT_VARIABLEARRAY[*AnimSetAnimPreloadHelper]
	Unk_1d69326                               DT_VARIABLEARRAY[*Type_d4235100]
	ArQuestPreloadHelpers                     DT_VARIABLEARRAY[*QuestPreloadHelper]
	ArQuestPhasePreloadHelpers                DT_VARIABLEARRAY[*QuestPhasePreloadHelper]
	ArNPCComponentSetPreloadHelpers           DT_VARIABLEARRAY[*NPCComponentSetPreloadHelper]
	ArNPCComponentSlotComponentPreloadHelpers DT_VARIABLEARRAY[*NPCComponentSlotComponentPreloadHelper]
	ArFoleyOverridePreloadHelpers             DT_VARIABLEARRAY[*FoleyOverridePreloadHelper]
	Unk_fe23aab                               DT_VARIABLEARRAY[*Type_34923ee5]
	Unk_ddc0c8b                               DT_VARIABLEARRAY[*DT_BYTE]
	ArSNOs                                    DT_VARIABLEARRAY[*DT_SNO]
	ArSNONames                                DT_VARIABLEARRAY[*DT_SNO_NAME]
}

func (t *PreloadHelper) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.ArActorPreloadHelpers, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.ArItemPreloadHelpers, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.ArActorVariantPreloadHelpers, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.ArSummonedActorPreloadHelpers, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.ArSceneSubzoneMarkerSetPreloadHelpers, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.ArActorSlotHelpers, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.ArActorFaceHelpers, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.Unk_71df495, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.ArAppearanceAndMaterialContents, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+144, &t.ArTextureContents, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+160, &t.ArEffectGroupPreloadHelpers, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+176, &t.ArEffectGroupActorVariants, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+192, &t.ArActorAnimSetPreloadHelpers, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+208, &t.ArAnimSetAnimPreloadHelpers, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+224, &t.Unk_1d69326, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+240, &t.ArQuestPreloadHelpers, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+256, &t.ArQuestPhasePreloadHelpers, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+272, &t.ArNPCComponentSetPreloadHelpers, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+288, &t.ArNPCComponentSlotComponentPreloadHelpers, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+304, &t.ArFoleyOverridePreloadHelpers, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+320, &t.Unk_fe23aab, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+336, &t.Unk_ddc0c8b, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+352, &t.ArSNOs, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+368, &t.ArSNONames, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+384, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PreloadHelper) Walk(cb WalkCallback, d ...any) {
	cb.Do("ArActorPreloadHelpers", &t.ArActorPreloadHelpers, d...)
	cb.Do("ArItemPreloadHelpers", &t.ArItemPreloadHelpers, d...)
	cb.Do("ArActorVariantPreloadHelpers", &t.ArActorVariantPreloadHelpers, d...)
	cb.Do("ArSummonedActorPreloadHelpers", &t.ArSummonedActorPreloadHelpers, d...)
	cb.Do("ArSceneSubzoneMarkerSetPreloadHelpers", &t.ArSceneSubzoneMarkerSetPreloadHelpers, d...)
	cb.Do("ArActorSlotHelpers", &t.ArActorSlotHelpers, d...)
	cb.Do("ArActorFaceHelpers", &t.ArActorFaceHelpers, d...)
	cb.Do("Unk_71df495", &t.Unk_71df495, d...)
	cb.Do("ArAppearanceAndMaterialContents", &t.ArAppearanceAndMaterialContents, d...)
	cb.Do("ArTextureContents", &t.ArTextureContents, d...)
	cb.Do("ArEffectGroupPreloadHelpers", &t.ArEffectGroupPreloadHelpers, d...)
	cb.Do("ArEffectGroupActorVariants", &t.ArEffectGroupActorVariants, d...)
	cb.Do("ArActorAnimSetPreloadHelpers", &t.ArActorAnimSetPreloadHelpers, d...)
	cb.Do("ArAnimSetAnimPreloadHelpers", &t.ArAnimSetAnimPreloadHelpers, d...)
	cb.Do("Unk_1d69326", &t.Unk_1d69326, d...)
	cb.Do("ArQuestPreloadHelpers", &t.ArQuestPreloadHelpers, d...)
	cb.Do("ArQuestPhasePreloadHelpers", &t.ArQuestPhasePreloadHelpers, d...)
	cb.Do("ArNPCComponentSetPreloadHelpers", &t.ArNPCComponentSetPreloadHelpers, d...)
	cb.Do("ArNPCComponentSlotComponentPreloadHelpers", &t.ArNPCComponentSlotComponentPreloadHelpers, d...)
	cb.Do("ArFoleyOverridePreloadHelpers", &t.ArFoleyOverridePreloadHelpers, d...)
	cb.Do("Unk_fe23aab", &t.Unk_fe23aab, d...)
	cb.Do("Unk_ddc0c8b", &t.Unk_ddc0c8b, d...)
	cb.Do("ArSNOs", &t.ArSNOs, d...)
	cb.Do("ArSNONames", &t.ArSNONames, d...)
}

type SeasonalDungeonState struct {
	SnoCondition     DT_SNO
	GbidDungeonState DT_GBID
}

func (t *SeasonalDungeonState) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoCondition, r, &Options{
		Flags: 1,
		Group: 51,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.GbidDungeonState, r, &Options{
		Flags: 1,
		Group: 31,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *SeasonalDungeonState) Walk(cb WalkCallback, d ...any) {
	cb.Do("SnoCondition", &t.SnoCondition, d...)
	cb.Do("GbidDungeonState", &t.GbidDungeonState, d...)
}

type SerialDataInfo struct {
	DwOffset DT_UINT
	DwCount  DT_UINT
}

func (t *SerialDataInfo) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.DwOffset, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.DwCount, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *SerialDataInfo) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwOffset", &t.DwOffset, d...)
	cb.Do("DwCount", &t.DwCount, d...)
}

type PresetNPCComponent struct {
	Component DT_CSTRING[*DT_BYTE]
	SnoDye    DT_SNO
}

func (t *PresetNPCComponent) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Component, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoDye, r, &Options{
		Flags: 513,
		Group: 122,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PresetNPCComponent) Walk(cb WalkCallback, d ...any) {
	cb.Do("Component", &t.Component, d...)
	cb.Do("SnoDye", &t.SnoDye, d...)
}

type TransmogSaveSnapshotMessage struct {
	THeader        RequiredMessageHeader
	NSnapshotIndex DT_INT
	ArTransmogs    DT_FIXEDARRAY[*TransmogSlotData]
}

func (t *TransmogSaveSnapshotMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.NSnapshotIndex, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.ArTransmogs, r, &Options{
		ArrayLength: 16,
		Flags:       8,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+280, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TransmogSaveSnapshotMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("NSnapshotIndex", &t.NSnapshotIndex, d...)
	cb.Do("ArTransmogs", &t.ArTransmogs, d...)
}

type UIRechargeTimerStyle struct {
	// Inherits UITimerStyle
	// Inherits UIWindowStyle
	// Inherits UIControlStyle
	// Inherits PolymorphicBase
	DwType                    DT_UINT
	DwPad                     DT_UINT
	HParentStyle              UIControlHandle
	Unk_441f783               DT_INT64
	M_eHasModifiedPowerTagMap DT_TAGMAP[*DT_ENUM]
	TConsoleInput             UIControlConsoleInput
	Unk_b4f614c               DT_TAGMAP[*DT_ENUM]
}

func (t *UIRechargeTimerStyle) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.HParentStyle, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_441f783, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.M_eHasModifiedPowerTagMap, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.TConsoleInput, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.Unk_b4f614c, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+80, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *UIRechargeTimerStyle) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("HParentStyle", &t.HParentStyle, d...)
	cb.Do("Unk_441f783", &t.Unk_441f783, d...)
	cb.Do("M_eHasModifiedPowerTagMap", &t.M_eHasModifiedPowerTagMap, d...)
	cb.Do("TConsoleInput", &t.TConsoleInput, d...)
	cb.Do("Unk_b4f614c", &t.Unk_b4f614c, d...)
}

type PowerBuffSaveAttribute struct {
	EAttribute  DT_ENUM
	NParam      DT_INT
	Unk_5439402 DT_INT
}

func (t *PowerBuffSaveAttribute) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.EAttribute, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.NParam, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.Unk_5439402, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+12, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PowerBuffSaveAttribute) Walk(cb WalkCallback, d ...any) {
	cb.Do("EAttribute", &t.EAttribute, d...)
	cb.Do("NParam", &t.NParam, d...)
	cb.Do("Unk_5439402", &t.Unk_5439402, d...)
}

type ItemImageHandleReference struct {
	HImageHandle DT_UINT
}

func (t *ItemImageHandleReference) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.HImageHandle, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+4, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ItemImageHandleReference) Walk(cb WalkCallback, d ...any) {
	cb.Do("HImageHandle", &t.HImageHandle, d...)
}

type SpeedTreeWind8Params struct {
	FStrengthResponse  DT_FLOAT
	FDirectionResponse DT_FLOAT
	FGustFrequency     DT_FLOAT
	FGustStrengthMin   DT_FLOAT
	FGustStrengthMax   DT_FLOAT
	FGustDurationMin   DT_FLOAT
	FGustDurationMax   DT_FLOAT
	FGustRiseScalar    DT_FLOAT
	FGustFallScalar    DT_FLOAT
	FGlobalHeight      DT_FLOAT
	Unk_34cfdfe        DT_FLOAT
	FFullRipple        DT_FLOAT
	VBoundingBoxMin    DT_VECTOR3D
	VBoundingBoxMax    DT_VECTOR3D
	FRefreshSecondary  DT_FLOAT
	Unk_fbebc6e        DT_FLOAT
	Unk_6009911        DT_FLOAT
	Unk_19eb4fb        DT_FLOAT
	SShared            SpeedTree8BranchWindLevel
	SBranch            SpeedTree8BranchWindLevel
	SRipple            SpeedTree8RippleGroup
	FIsGrass           DT_FLOAT
}

func (t *SpeedTreeWind8Params) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.FStrengthResponse, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.FDirectionResponse, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.FGustFrequency, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.FGustStrengthMin, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.FGustStrengthMax, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.FGustDurationMin, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.FGustDurationMax, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.FGustRiseScalar, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.FGustFallScalar, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.FGlobalHeight, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.Unk_34cfdfe, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.FFullRipple, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.VBoundingBoxMin, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+60, &t.VBoundingBoxMax, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.FRefreshSecondary, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.Unk_fbebc6e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.Unk_6009911, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.Unk_19eb4fb, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.SShared, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+412, &t.SBranch, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+736, &t.SRipple, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+980, &t.FIsGrass, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+984, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *SpeedTreeWind8Params) Walk(cb WalkCallback, d ...any) {
	cb.Do("FStrengthResponse", &t.FStrengthResponse, d...)
	cb.Do("FDirectionResponse", &t.FDirectionResponse, d...)
	cb.Do("FGustFrequency", &t.FGustFrequency, d...)
	cb.Do("FGustStrengthMin", &t.FGustStrengthMin, d...)
	cb.Do("FGustStrengthMax", &t.FGustStrengthMax, d...)
	cb.Do("FGustDurationMin", &t.FGustDurationMin, d...)
	cb.Do("FGustDurationMax", &t.FGustDurationMax, d...)
	cb.Do("FGustRiseScalar", &t.FGustRiseScalar, d...)
	cb.Do("FGustFallScalar", &t.FGustFallScalar, d...)
	cb.Do("FGlobalHeight", &t.FGlobalHeight, d...)
	cb.Do("Unk_34cfdfe", &t.Unk_34cfdfe, d...)
	cb.Do("FFullRipple", &t.FFullRipple, d...)
	cb.Do("VBoundingBoxMin", &t.VBoundingBoxMin, d...)
	cb.Do("VBoundingBoxMax", &t.VBoundingBoxMax, d...)
	cb.Do("FRefreshSecondary", &t.FRefreshSecondary, d...)
	cb.Do("Unk_fbebc6e", &t.Unk_fbebc6e, d...)
	cb.Do("Unk_6009911", &t.Unk_6009911, d...)
	cb.Do("Unk_19eb4fb", &t.Unk_19eb4fb, d...)
	cb.Do("SShared", &t.SShared, d...)
	cb.Do("SBranch", &t.SBranch, d...)
	cb.Do("SRipple", &t.SRipple, d...)
	cb.Do("FIsGrass", &t.FIsGrass, d...)
}

type PRUSTransform struct {
	Q       bcQuat
	Wp      DT_VECTOR3D
	FlScale DT_FLOAT
}

func (t *PRUSTransform) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Q, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Wp, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.FlScale, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PRUSTransform) Walk(cb WalkCallback, d ...any) {
	cb.Do("Q", &t.Q, d...)
	cb.Do("Wp", &t.Wp, d...)
	cb.Do("FlScale", &t.FlScale, d...)
}

type XboxConsoleAwardDefinition struct {
	// Inherits ConsoleAwardDefinition
	// Inherits PolymorphicBase
	DwType          DT_UINT
	UProfileAwardId DT_UINT
	DwPad           DT_UINT
}

func (t *XboxConsoleAwardDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.UProfileAwardId, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *XboxConsoleAwardDefinition) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("UProfileAwardId", &t.UProfileAwardId, d...)
	cb.Do("DwPad", &t.DwPad, d...)
}

type EventCurrencyData struct {
	ECurrencyType DT_ENUM
	Unk_3a60581   DT_FLOAT
	Unk_e116de3   DT_INT
	Unk_11c2d38   DT_INT
}

func (t *EventCurrencyData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.ECurrencyType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.Unk_3a60581, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.Unk_e116de3, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.Unk_11c2d38, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *EventCurrencyData) Walk(cb WalkCallback, d ...any) {
	cb.Do("ECurrencyType", &t.ECurrencyType, d...)
	cb.Do("Unk_3a60581", &t.Unk_3a60581, d...)
	cb.Do("Unk_e116de3", &t.Unk_e116de3, d...)
	cb.Do("Unk_11c2d38", &t.Unk_11c2d38, d...)
}

type PortedToWaypointMessage struct {
	THeader               RequiredMessageHeader
	DwPlayerGameAccountId DT_UINT
	SnoLevelArea          DT_SNO
}

func (t *PortedToWaypointMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.DwPlayerGameAccountId, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.SnoLevelArea, r, &Options{
		Flags: 1,
		Group: 22,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PortedToWaypointMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("DwPlayerGameAccountId", &t.DwPlayerGameAccountId, d...)
	cb.Do("SnoLevelArea", &t.SnoLevelArea, d...)
}

type MaterialValue_RGBAColor struct {
	Value        DT_RGBACOLOR
	FUsesGraph   DT_INT
	PathValGraph InterpolationPath_RGBAColor
}

func (t *MaterialValue_RGBAColor) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Value, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.FUsesGraph, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.PathValGraph, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+64, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *MaterialValue_RGBAColor) Walk(cb WalkCallback, d ...any) {
	cb.Do("Value", &t.Value, d...)
	cb.Do("FUsesGraph", &t.FUsesGraph, d...)
	cb.Do("PathValGraph", &t.PathValGraph, d...)
}

type UICheckBoxStyleOptionalFieldMapDefaults struct {
	ECheckboxStyle                  DT_ENUM
	HImageFrameCheckedNormal        UIImageHandleReference
	HImageFrameCheckedMouseOver     UIImageHandleReference
	HImageFrameCheckedDisabled      UIImageHandleReference
	HImageFrameUncheckedNormal      UIImageHandleReference
	HImageFrameUncheckedMouseOver   UIImageHandleReference
	HImageFrameUncheckedDisabled    UIImageHandleReference
	SnoTiledStyleCheckedNormal      DT_SNO
	SnoTiledStyleCheckedMouseOver   DT_SNO
	SnoTiledStyleCheckedDisabled    DT_SNO
	SnoTiledStyleUncheckedNormal    DT_SNO
	SnoTiledStyleUncheckedMouseOver DT_SNO
	SnoTiledStyleUncheckedDisabled  DT_SNO
}

func (t *UICheckBoxStyleOptionalFieldMapDefaults) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.ECheckboxStyle, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.HImageFrameCheckedNormal, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.HImageFrameCheckedMouseOver, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.HImageFrameCheckedDisabled, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.HImageFrameUncheckedNormal, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.HImageFrameUncheckedMouseOver, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.HImageFrameUncheckedDisabled, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.SnoTiledStyleCheckedNormal, r, &Options{
		Flags: 1,
		Group: 103,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.SnoTiledStyleCheckedMouseOver, r, &Options{
		Flags: 1,
		Group: 103,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.SnoTiledStyleCheckedDisabled, r, &Options{
		Flags: 1,
		Group: 103,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.SnoTiledStyleUncheckedNormal, r, &Options{
		Flags: 1,
		Group: 103,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.SnoTiledStyleUncheckedMouseOver, r, &Options{
		Flags: 1,
		Group: 103,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.SnoTiledStyleUncheckedDisabled, r, &Options{
		Flags: 1,
		Group: 103,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+52, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *UICheckBoxStyleOptionalFieldMapDefaults) Walk(cb WalkCallback, d ...any) {
	cb.Do("ECheckboxStyle", &t.ECheckboxStyle, d...)
	cb.Do("HImageFrameCheckedNormal", &t.HImageFrameCheckedNormal, d...)
	cb.Do("HImageFrameCheckedMouseOver", &t.HImageFrameCheckedMouseOver, d...)
	cb.Do("HImageFrameCheckedDisabled", &t.HImageFrameCheckedDisabled, d...)
	cb.Do("HImageFrameUncheckedNormal", &t.HImageFrameUncheckedNormal, d...)
	cb.Do("HImageFrameUncheckedMouseOver", &t.HImageFrameUncheckedMouseOver, d...)
	cb.Do("HImageFrameUncheckedDisabled", &t.HImageFrameUncheckedDisabled, d...)
	cb.Do("SnoTiledStyleCheckedNormal", &t.SnoTiledStyleCheckedNormal, d...)
	cb.Do("SnoTiledStyleCheckedMouseOver", &t.SnoTiledStyleCheckedMouseOver, d...)
	cb.Do("SnoTiledStyleCheckedDisabled", &t.SnoTiledStyleCheckedDisabled, d...)
	cb.Do("SnoTiledStyleUncheckedNormal", &t.SnoTiledStyleUncheckedNormal, d...)
	cb.Do("SnoTiledStyleUncheckedMouseOver", &t.SnoTiledStyleUncheckedMouseOver, d...)
	cb.Do("SnoTiledStyleUncheckedDisabled", &t.SnoTiledStyleUncheckedDisabled, d...)
}

type RainSoundSurfaceSet struct {
	SnoAmbient         DT_SNO
	EPlacementStrategy DT_ENUM
	FlSpacing          DT_FLOAT
	ArSurfaces         DT_VARIABLEARRAY[*DT_SNO]
}

func (t *RainSoundSurfaceSet) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoAmbient, r, &Options{
		Flags: 1,
		Group: 5,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.EPlacementStrategy, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.FlSpacing, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.ArSurfaces, r, &Options{
		Flags: 1,
		Group: 43,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *RainSoundSurfaceSet) Walk(cb WalkCallback, d ...any) {
	cb.Do("SnoAmbient", &t.SnoAmbient, d...)
	cb.Do("EPlacementStrategy", &t.EPlacementStrategy, d...)
	cb.Do("FlSpacing", &t.FlSpacing, d...)
	cb.Do("ArSurfaces", &t.ArSurfaces, d...)
}

type MarkerServerData struct {
	ArActorGroups                 DT_VARIABLEARRAY[*DT_GBID]
	SnoPhasingVisibilityCondition DT_SNO
}

func (t *MarkerServerData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.ArActorGroups, r, &Options{
		Flags: 1,
		Group: 24,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoPhasingVisibilityCondition, r, &Options{
		Flags: 1,
		Group: 51,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *MarkerServerData) Walk(cb WalkCallback, d ...any) {
	cb.Do("ArActorGroups", &t.ArActorGroups, d...)
	cb.Do("SnoPhasingVisibilityCondition", &t.SnoPhasingVisibilityCondition, d...)
}

type DebugDrawPrimMessage struct {
	THeader          RequiredMessageHeader
	UID              DT_UINT
	EType            DT_ENUM
	IdSWorld         DT_SHARED_SERVER_DATA_ID
	VecPos           DT_FIXEDARRAY[*DT_VECTOR3D]
	FlLength         DT_FLOAT
	FlRadius         DT_FLOAT
	FlHeight         DT_FLOAT
	ULifetimeInTicks DT_UINT
	RgbaColor        DT_RGBACOLOR
	SzText           DT_CHARARRAY
	Unk_7fff437      DT_INT
	BNoZ             DT_INT
}

func (t *DebugDrawPrimMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.UID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.EType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.IdSWorld, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.VecPos, r, &Options{
		ArrayLength: 8,
		Flags:       8,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+132, &t.FlLength, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+136, &t.FlRadius, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+140, &t.FlHeight, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+144, &t.ULifetimeInTicks, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+148, &t.RgbaColor, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+152, &t.SzText, r, &Options{
		ArrayLength: 128,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+280, &t.Unk_7fff437, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+284, &t.BNoZ, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+288, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *DebugDrawPrimMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("UID", &t.UID, d...)
	cb.Do("EType", &t.EType, d...)
	cb.Do("IdSWorld", &t.IdSWorld, d...)
	cb.Do("VecPos", &t.VecPos, d...)
	cb.Do("FlLength", &t.FlLength, d...)
	cb.Do("FlRadius", &t.FlRadius, d...)
	cb.Do("FlHeight", &t.FlHeight, d...)
	cb.Do("ULifetimeInTicks", &t.ULifetimeInTicks, d...)
	cb.Do("RgbaColor", &t.RgbaColor, d...)
	cb.Do("SzText", &t.SzText, d...)
	cb.Do("Unk_7fff437", &t.Unk_7fff437, d...)
	cb.Do("BNoZ", &t.BNoZ, d...)
}

type EmitterSphericalCapData struct {
	// Inherits EmitterDataBase
	// Inherits PolymorphicBase
	DwType     DT_UINT
	DwPad      DT_UINT
	EFacing    DT_ENUM
	ACone      DT_FLOAT
	PathRadius InterpolationPath_float
}

func (t *EmitterSphericalCapData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.EFacing, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.ACone, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.PathRadius, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+80, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *EmitterSphericalCapData) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("EFacing", &t.EFacing, d...)
	cb.Do("ACone", &t.ACone, d...)
	cb.Do("PathRadius", &t.PathRadius, d...)
}

type HirelingRequestLearnSkillMessage struct {
	THeader  RequiredMessageHeader
	Ann      DT_ACD_NETWORK_NAME
	SnoSkill DT_SNO
}

func (t *HirelingRequestLearnSkillMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Ann, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SnoSkill, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+28, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *HirelingRequestLearnSkillMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("Ann", &t.Ann, d...)
	cb.Do("SnoSkill", &t.SnoSkill, d...)
}

type Type_b662d181 struct {
	THeader    RequiredMessageHeader
	SnoSubzone DT_SNO
}

func (t *Type_b662d181) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoSubzone, r, &Options{
		Flags: 1,
		Group: 80,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+20, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_b662d181) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("SnoSubzone", &t.SnoSubzone, d...)
}

type UIControlHandle struct {
	SnoUI         DT_SNO
	SzControlName DT_UINT
}

func (t *UIControlHandle) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoUI, r, &Options{
		Flags: 1,
		Group: 42,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.SzControlName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *UIControlHandle) Walk(cb WalkCallback, d ...any) {
	cb.Do("SnoUI", &t.SnoUI, d...)
	cb.Do("SzControlName", &t.SzControlName, d...)
}

type TexAnimFrameByFrameCurve struct {
	// Inherits TexAnim
	// Inherits PolymorphicBase
	DwType             DT_UINT
	DwPad              DT_UINT
	FlUScale           DT_FLOAT
	FlVScale           DT_FLOAT
	TFrameAnim         FrameAnim
	PathFramesOverTime InterpolationPath_int32
	TDuration          DT_RANGE[*DT_FLOAT]
	FScaleUVsToFrame   DT_INT
}

func (t *TexAnimFrameByFrameCurve) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.FlUScale, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.FlVScale, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.TFrameAnim, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.PathFramesOverTime, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.TDuration, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.FScaleUVsToFrame, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+136, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TexAnimFrameByFrameCurve) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("FlUScale", &t.FlUScale, d...)
	cb.Do("FlVScale", &t.FlVScale, d...)
	cb.Do("TFrameAnim", &t.TFrameAnim, d...)
	cb.Do("PathFramesOverTime", &t.PathFramesOverTime, d...)
	cb.Do("TDuration", &t.TDuration, d...)
	cb.Do("FScaleUVsToFrame", &t.FScaleUVsToFrame, d...)
}

type CollisionSettings struct {
	SnoCollision     DT_SNO
	TCustomCollFlags ActorCollisionFlags
	Unk_a882afd      DT_INT
	Unk_54403ff      DT_INT
}

func (t *CollisionSettings) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoCollision, r, &Options{
		Flags: 1,
		Group: 127,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.TCustomCollFlags, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.Unk_a882afd, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_54403ff, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+20, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *CollisionSettings) Walk(cb WalkCallback, d ...any) {
	cb.Do("SnoCollision", &t.SnoCollision, d...)
	cb.Do("TCustomCollFlags", &t.TCustomCollFlags, d...)
	cb.Do("Unk_a882afd", &t.Unk_a882afd, d...)
	cb.Do("Unk_54403ff", &t.Unk_54403ff, d...)
}

type QuestCallback struct {
	Unk_b185921                                DT_ENUM
	EProgressBarSource                         DT_ENUM
	DwUID                                      DT_UINT
	DwFlags                                    DT_UINT
	NNeeded                                    DT_UINT
	TScriptMessageMap                          ScriptMessageMap
	DwLinesSeconds                             DT_INT
	Unk_47705e2                                DT_INT
	EIndicatorType                             DT_ENUM
	Unk_9c1ea4f                                DT_UINT
	SnoWorld                                   DT_SNO
	SnoObjectiveDiscoveredConversationOverride DT_SNO
	FDebugDisable                              DT_INT
	TRegionDefault                             QuestCallbackRegion
	ArRegionOverrides                          DT_VARIABLEARRAY[*QuestCallbackRegion]
	NValidRegionOverrides                      DT_INT
	ArLevelAreas                               DT_VARIABLEARRAY[*DT_SNO]
	ArSubzones                                 DT_VARIABLEARRAY[*DT_SNO]
	Unk_c181024                                DT_SNO
	ArSnonameTokens                            DT_VARIABLEARRAY[*DT_SNO_NAME]
	TReputationObjective                       ReputationValuePair
}

func (t *QuestCallback) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Unk_b185921, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.EProgressBarSource, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwUID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.NNeeded, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.TScriptMessageMap, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.DwLinesSeconds, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+100, &t.Unk_47705e2, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+104, &t.EIndicatorType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+108, &t.Unk_9c1ea4f, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.SnoWorld, r, &Options{
		Flags: 513,
		Group: 48,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+116, &t.SnoObjectiveDiscoveredConversationOverride, r, &Options{
		Flags: 1,
		Group: 12,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.FDebugDisable, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.TRegionDefault, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+176, &t.ArRegionOverrides, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+192, &t.NValidRegionOverrides, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+200, &t.ArLevelAreas, r, &Options{
		Flags: 513,
		Group: 22,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+216, &t.ArSubzones, r, &Options{
		Flags: 513,
		Group: 80,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+232, &t.Unk_c181024, r, &Options{
		Flags: 1,
		Group: 51,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+240, &t.ArSnonameTokens, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+256, &t.TReputationObjective, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+264, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *QuestCallback) Walk(cb WalkCallback, d ...any) {
	cb.Do("Unk_b185921", &t.Unk_b185921, d...)
	cb.Do("EProgressBarSource", &t.EProgressBarSource, d...)
	cb.Do("DwUID", &t.DwUID, d...)
	cb.Do("DwFlags", &t.DwFlags, d...)
	cb.Do("NNeeded", &t.NNeeded, d...)
	cb.Do("TScriptMessageMap", &t.TScriptMessageMap, d...)
	cb.Do("DwLinesSeconds", &t.DwLinesSeconds, d...)
	cb.Do("Unk_47705e2", &t.Unk_47705e2, d...)
	cb.Do("EIndicatorType", &t.EIndicatorType, d...)
	cb.Do("Unk_9c1ea4f", &t.Unk_9c1ea4f, d...)
	cb.Do("SnoWorld", &t.SnoWorld, d...)
	cb.Do("SnoObjectiveDiscoveredConversationOverride", &t.SnoObjectiveDiscoveredConversationOverride, d...)
	cb.Do("FDebugDisable", &t.FDebugDisable, d...)
	cb.Do("TRegionDefault", &t.TRegionDefault, d...)
	cb.Do("ArRegionOverrides", &t.ArRegionOverrides, d...)
	cb.Do("NValidRegionOverrides", &t.NValidRegionOverrides, d...)
	cb.Do("ArLevelAreas", &t.ArLevelAreas, d...)
	cb.Do("ArSubzones", &t.ArSubzones, d...)
	cb.Do("Unk_c181024", &t.Unk_c181024, d...)
	cb.Do("ArSnonameTokens", &t.ArSnonameTokens, d...)
	cb.Do("TReputationObjective", &t.TReputationObjective, d...)
}

type PowerBuffAttributeModifier struct {
	EAttribute  DT_ENUM
	TValue      DT_STRING_FORMULA
	NParam      DT_INT
	Unk_dffdf28 DT_STRING_FORMULA
}

func (t *PowerBuffAttributeModifier) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.EAttribute, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.TValue, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.NParam, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.Unk_dffdf28, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+80, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PowerBuffAttributeModifier) Walk(cb WalkCallback, d ...any) {
	cb.Do("EAttribute", &t.EAttribute, d...)
	cb.Do("TValue", &t.TValue, d...)
	cb.Do("NParam", &t.NParam, d...)
	cb.Do("Unk_dffdf28", &t.Unk_dffdf28, d...)
}

type PowerConditionIsChannelled struct {
	// Inherits PowerConditionBase
	// Inherits PolymorphicBase
	DwType   DT_UINT
	BInverse DT_INT
	DwPad    DT_UINT
}

func (t *PowerConditionIsChannelled) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BInverse, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PowerConditionIsChannelled) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("BInverse", &t.BInverse, d...)
	cb.Do("DwPad", &t.DwPad, d...)
}

type ReputationLevelSubcondition struct {
	// Inherits NumericComparisonSubcondition
	// Inherits Subcondition
	// Inherits PolymorphicBase
	DwType        DT_UINT
	BNegate       DT_INT
	EComparisonOp DT_ENUM
	DwPad         DT_UINT
	TPair         ReputationValuePair
}

func (t *ReputationLevelSubcondition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BNegate, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.EComparisonOp, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.TPair, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+40, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ReputationLevelSubcondition) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("BNegate", &t.BNegate, d...)
	cb.Do("EComparisonOp", &t.EComparisonOp, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("TPair", &t.TPair, d...)
}

type QuestKillAllMonstersUpdatedMessage struct {
	THeader          RequiredMessageHeader
	IdQuest          DT_ENUM
	NMonstersSpawned DT_INT
	NMonstersKilled  DT_INT
	Unk_736a201      DT_INT
}

func (t *QuestKillAllMonstersUpdatedMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.IdQuest, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.NMonstersSpawned, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.NMonstersKilled, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.Unk_736a201, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *QuestKillAllMonstersUpdatedMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("IdQuest", &t.IdQuest, d...)
	cb.Do("NMonstersSpawned", &t.NMonstersSpawned, d...)
	cb.Do("NMonstersKilled", &t.NMonstersKilled, d...)
	cb.Do("Unk_736a201", &t.Unk_736a201, d...)
}

type Transmog struct {
	SnoItem DT_SNO
	SnoDye  DT_SNO
}

func (t *Transmog) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoItem, r, &Options{
		Flags: 1,
		Group: 73,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.SnoDye, r, &Options{
		Flags: 1,
		Group: 122,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Transmog) Walk(cb WalkCallback, d ...any) {
	cb.Do("SnoItem", &t.SnoItem, d...)
	cb.Do("SnoDye", &t.SnoDye, d...)
}

type RareItemNameMessage struct {
	THeader       RequiredMessageHeader
	Ann           DT_ACD_NETWORK_NAME
	TRareItemName RareItemName
}

func (t *RareItemNameMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Ann, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.TRareItemName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+40, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *RareItemNameMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("Ann", &t.Ann, d...)
	cb.Do("TRareItemName", &t.TRareItemName, d...)
}

type ChairGizmoData struct {
	// Inherits NamedGizmoData
	// Inherits ActorGizmoData
	// Inherits PolymorphicBase
	DwType                           DT_UINT
	DwPad                            DT_UINT
	FDisableNonFriendlyOperation     DT_INT
	FWalkToCenter                    DT_INT
	FGizmoStartsDisabled             DT_INT
	FUseStringListName               DT_INT
	FForceMinimapIcon                DT_INT
	FlOperationRadius                DT_FLOAT
	Unk_d0b1df5                      DT_FLOAT
	FlGizmoUseTime                   DT_FLOAT
	SnoChannelingEffect              DT_SNO
	Unk_2767229                      DT_INT
	FGizmoShowProgressBar            DT_INT
	Unk_6d9ebe1                      DT_INT
	Unk_5456245                      DT_INT
	Unk_af5815a                      DT_INT
	SnoOnClickEffect                 DT_SNO
	SnoPickedUpEffect                DT_SNO
	SnoDropOnGroundEffect            DT_SNO
	TConditionData                   GizmoConditionData
	SnoPowerOperator                 DT_SNO
	SnoPowerOperate                  DT_SNO
	SnoPowerOperatorActive           DT_SNO
	SnoPowerOperateActive            DT_SNO
	Unk_359810e                      DT_INT
	NCooldown                        DT_UINT
	Unk_9c8478e                      DT_UINT
	Unk_d45ed2d                      DT_INT
	Unk_f6b20b7                      DT_INT
	Unk_54513b8                      DT_INT
	Unk_fd1f378                      DT_UINT
	HGizmoOperateFlavorTextMsgLabel  DT_UINT
	HGizmoOperateDescriptionMsgLabel DT_UINT
	FlGizmoOperateOffset             DT_FLOAT
	Unk_ab58cd3                      DT_ENUM
	Unk_91a3966                      DT_UINT
	HGizmoChannelingLabel            DT_UINT
	Unk_4be4371                      DT_INT
}

func (t *ChairGizmoData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.FDisableNonFriendlyOperation, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.FWalkToCenter, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.FGizmoStartsDisabled, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.FUseStringListName, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.FForceMinimapIcon, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.FlOperationRadius, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.Unk_d0b1df5, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.FlGizmoUseTime, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.SnoChannelingEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.Unk_2767229, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.FGizmoShowProgressBar, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+60, &t.Unk_6d9ebe1, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.Unk_5456245, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.Unk_af5815a, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.SnoOnClickEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.SnoPickedUpEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.SnoDropOnGroundEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.TConditionData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.SnoPowerOperator, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.SnoPowerOperate, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.SnoPowerOperatorActive, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+100, &t.SnoPowerOperateActive, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+104, &t.Unk_359810e, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+108, &t.NCooldown, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.Unk_9c8478e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+116, &t.Unk_d45ed2d, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.Unk_f6b20b7, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+124, &t.Unk_54513b8, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.Unk_fd1f378, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+132, &t.HGizmoOperateFlavorTextMsgLabel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+136, &t.HGizmoOperateDescriptionMsgLabel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+140, &t.FlGizmoOperateOffset, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+144, &t.Unk_ab58cd3, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+148, &t.Unk_91a3966, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+152, &t.HGizmoChannelingLabel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+156, &t.Unk_4be4371, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+160, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ChairGizmoData) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("FDisableNonFriendlyOperation", &t.FDisableNonFriendlyOperation, d...)
	cb.Do("FWalkToCenter", &t.FWalkToCenter, d...)
	cb.Do("FGizmoStartsDisabled", &t.FGizmoStartsDisabled, d...)
	cb.Do("FUseStringListName", &t.FUseStringListName, d...)
	cb.Do("FForceMinimapIcon", &t.FForceMinimapIcon, d...)
	cb.Do("FlOperationRadius", &t.FlOperationRadius, d...)
	cb.Do("Unk_d0b1df5", &t.Unk_d0b1df5, d...)
	cb.Do("FlGizmoUseTime", &t.FlGizmoUseTime, d...)
	cb.Do("SnoChannelingEffect", &t.SnoChannelingEffect, d...)
	cb.Do("Unk_2767229", &t.Unk_2767229, d...)
	cb.Do("FGizmoShowProgressBar", &t.FGizmoShowProgressBar, d...)
	cb.Do("Unk_6d9ebe1", &t.Unk_6d9ebe1, d...)
	cb.Do("Unk_5456245", &t.Unk_5456245, d...)
	cb.Do("Unk_af5815a", &t.Unk_af5815a, d...)
	cb.Do("SnoOnClickEffect", &t.SnoOnClickEffect, d...)
	cb.Do("SnoPickedUpEffect", &t.SnoPickedUpEffect, d...)
	cb.Do("SnoDropOnGroundEffect", &t.SnoDropOnGroundEffect, d...)
	cb.Do("TConditionData", &t.TConditionData, d...)
	cb.Do("SnoPowerOperator", &t.SnoPowerOperator, d...)
	cb.Do("SnoPowerOperate", &t.SnoPowerOperate, d...)
	cb.Do("SnoPowerOperatorActive", &t.SnoPowerOperatorActive, d...)
	cb.Do("SnoPowerOperateActive", &t.SnoPowerOperateActive, d...)
	cb.Do("Unk_359810e", &t.Unk_359810e, d...)
	cb.Do("NCooldown", &t.NCooldown, d...)
	cb.Do("Unk_9c8478e", &t.Unk_9c8478e, d...)
	cb.Do("Unk_d45ed2d", &t.Unk_d45ed2d, d...)
	cb.Do("Unk_f6b20b7", &t.Unk_f6b20b7, d...)
	cb.Do("Unk_54513b8", &t.Unk_54513b8, d...)
	cb.Do("Unk_fd1f378", &t.Unk_fd1f378, d...)
	cb.Do("HGizmoOperateFlavorTextMsgLabel", &t.HGizmoOperateFlavorTextMsgLabel, d...)
	cb.Do("HGizmoOperateDescriptionMsgLabel", &t.HGizmoOperateDescriptionMsgLabel, d...)
	cb.Do("FlGizmoOperateOffset", &t.FlGizmoOperateOffset, d...)
	cb.Do("Unk_ab58cd3", &t.Unk_ab58cd3, d...)
	cb.Do("Unk_91a3966", &t.Unk_91a3966, d...)
	cb.Do("HGizmoChannelingLabel", &t.HGizmoChannelingLabel, d...)
	cb.Do("Unk_4be4371", &t.Unk_4be4371, d...)
}

type ScriptEventParamPrimaryGroup struct {
	// Inherits ScriptEventParamBase
	// Inherits PolymorphicBase
	DwType        DT_UINT
	EParamType    DT_ENUM
	DwPad         DT_UINT
	TPrimaryGroup ActorGroup
}

func (t *ScriptEventParamPrimaryGroup) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.EParamType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.TPrimaryGroup, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+96, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ScriptEventParamPrimaryGroup) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("EParamType", &t.EParamType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("TPrimaryGroup", &t.TPrimaryGroup, d...)
}

type dmClothPlaneOldMirror struct {
	M_transform1 dmTransformMirror
	M_transform2 dmTransformMirror
	M_localFrame dmTransformMirror
	M_normal     DT_VECTOR4D
	M_stiffness  DT_FLOAT
	M_friction   DT_FLOAT
	M_boneIndex  DT_WORD
	M_padding    DT_FIXEDARRAY[*DT_WORD]
}

func (t *dmClothPlaneOldMirror) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.M_transform1, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.M_transform2, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.M_localFrame, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.M_normal, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.M_stiffness, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+116, &t.M_friction, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.M_boneIndex, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+122, &t.M_padding, r, &Options{ArrayLength: 3}); err != nil {
		return err
	}
	if _, err := r.Seek(p+128, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *dmClothPlaneOldMirror) Walk(cb WalkCallback, d ...any) {
	cb.Do("M_transform1", &t.M_transform1, d...)
	cb.Do("M_transform2", &t.M_transform2, d...)
	cb.Do("M_localFrame", &t.M_localFrame, d...)
	cb.Do("M_normal", &t.M_normal, d...)
	cb.Do("M_stiffness", &t.M_stiffness, d...)
	cb.Do("M_friction", &t.M_friction, d...)
	cb.Do("M_boneIndex", &t.M_boneIndex, d...)
	cb.Do("M_padding", &t.M_padding, d...)
}

type DebugDataRequestOptionalParam struct {
	SzParamName  DT_CHARARRAY
	SzParamValue DT_CHARARRAY
}

func (t *DebugDataRequestOptionalParam) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SzParamName, r, &Options{
		ArrayLength: 80,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.SzParamValue, r, &Options{
		ArrayLength: 80,
		Flags:       1,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+160, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *DebugDataRequestOptionalParam) Walk(cb WalkCallback, d ...any) {
	cb.Do("SzParamName", &t.SzParamName, d...)
	cb.Do("SzParamValue", &t.SzParamValue, d...)
}

type LocalEventDataMessage struct {
	THeader           RequiredMessageHeader
	DwInstanceID      DT_UINT
	SnoQuest          DT_SNO
	SnoWorld          DT_SNO
	SnoSubzone        DT_SNO
	WpLocation        DT_VECTOR3D
	TTrackingData     LocalEventTrackingData
	BStartImmediately DT_INT
	BPhaseIsHidden    DT_INT
}

func (t *LocalEventDataMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.DwInstanceID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.SnoQuest, r, &Options{
		Flags: 1,
		Group: 31,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SnoWorld, r, &Options{
		Flags: 1,
		Group: 48,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.SnoSubzone, r, &Options{
		Flags: 1,
		Group: 80,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.WpLocation, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.TTrackingData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.BStartImmediately, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+60, &t.BPhaseIsHidden, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+64, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *LocalEventDataMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("DwInstanceID", &t.DwInstanceID, d...)
	cb.Do("SnoQuest", &t.SnoQuest, d...)
	cb.Do("SnoWorld", &t.SnoWorld, d...)
	cb.Do("SnoSubzone", &t.SnoSubzone, d...)
	cb.Do("WpLocation", &t.WpLocation, d...)
	cb.Do("TTrackingData", &t.TTrackingData, d...)
	cb.Do("BStartImmediately", &t.BStartImmediately, d...)
	cb.Do("BPhaseIsHidden", &t.BPhaseIsHidden, d...)
}

type ConfirmDungeonKeyUseMessage struct {
	THeader                 RequiredMessageHeader
	AnnKey                  DT_ACD_NETWORK_NAME
	SnoExistingKeyedDungeon DT_SNO
}

func (t *ConfirmDungeonKeyUseMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.AnnKey, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SnoExistingKeyedDungeon, r, &Options{
		Flags: 1,
		Group: 48,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+28, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ConfirmDungeonKeyUseMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("AnnKey", &t.AnnKey, d...)
	cb.Do("SnoExistingKeyedDungeon", &t.SnoExistingKeyedDungeon, d...)
}

type DebugTrackedCheckpointRequestMessage struct {
	THeader  RequiredMessageHeader
	AnnActor DT_ACD_NETWORK_NAME
	BEnabled DT_INT
}

func (t *DebugTrackedCheckpointRequestMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.AnnActor, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.BEnabled, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+28, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *DebugTrackedCheckpointRequestMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("AnnActor", &t.AnnActor, d...)
	cb.Do("BEnabled", &t.BEnabled, d...)
}

type ActorDefinition struct {
	EType                      DT_ENUM
	DwFlags                    DT_UINT
	DwFlagsEx                  DT_UINT
	SnoAppearance              DT_SNO
	ArCustomizationAppearances DT_VARIABLEARRAY[*DT_SNO]
	ArAnimSets                 DT_VARIABLEARRAY[*DT_SNO]
	ArStoreAnimSets            DT_VARIABLEARRAY[*DT_SNO]
	SnoAnimTree                DT_SNO
	TAnimTreeOverride          AnimTreeOverride
	EVariantType               DT_ENUM
	TDefaultLook               LookLink
	DwDefaultShaderMapOverride DT_UINT
	TScaleRange                DT_RANGE[*DT_FLOAT]
	TScaleLimit                DT_RANGE[*DT_FLOAT]
	WcylBounds                 AxialCylinder
	AabbBounds                 AABB
	WsBounds                   Sphere
	AabbAppearanceBoundingBox  AABB
	WpLocationPowerSrc         DT_VECTOR3D
	EPickStyle                 DT_ENUM
	FlAttachmentScaleFactor    DT_FLOAT
	EDefaultTeam               DT_ENUM
	ECullingLevel              DT_ENUM
	FlFadeCorpseTimeUntilFade  DT_FLOAT
	FlFadeCorpseTime           DT_FLOAT
	AAbsoluteOrientation       DT_FLOAT
	FlHitFlashPower            DT_FLOAT
	FlHitFlashMultiplier       DT_FLOAT
	FlOverlayPower             DT_FLOAT
	ETopology                  DT_ENUM
	PtMsgTriggeredEvents       DT_VARIABLEARRAY[*MsgTriggeredEvent]
	PtPhysData                 DT_VARIABLEARRAY[*ActorPhysicsData]
	PtCollData                 DT_VARIABLEARRAY[*ActorCollisionData]
	EActorGizmoType            DT_ENUM
	Unk_8fbba9b                DT_ENUM
	PtGizmoData                DT_POLYMORPHIC_VARIABLEARRAY[*ActorGizmoData]
	PtMonsterData              DT_VARIABLEARRAY[*ActorMonsterData]
	PtCritterData              DT_VARIABLEARRAY[*ActorCritterData]
	PtPlayerData               DT_VARIABLEARRAY[*ActorPlayerData]
	PtItemData                 DT_VARIABLEARRAY[*ActorItemData]
	PtCombatData               DT_VARIABLEARRAY[*ActorCombatData]
	PtDeathData                DT_VARIABLEARRAY[*ActorDeathData]
	PtEffectData               DT_VARIABLEARRAY[*ActorEffectData]
	PtProjData                 DT_VARIABLEARRAY[*ActorProjectileData]
	PtPropData                 DT_VARIABLEARRAY[*ActorPropData]
	PtMovingData               DT_VARIABLEARRAY[*ActorMovingData]
	PtBrainData                DT_VARIABLEARRAY[*ActorBrainData]
	PtServerData               DT_VARIABLEARRAY[*ActorServerData]
	PtUIData                   DT_VARIABLEARRAY[*ActorUIData]
	PtAIData                   DT_VARIABLEARRAY[*ActorAIData]
	PtVOData                   DT_VARIABLEARRAY[*ActorVOData]
	PtNPCData                  DT_VARIABLEARRAY[*ActorNPCData]
	PtSoundTableData           DT_VARIABLEARRAY[*ActorSoundTableData]
	PtMountData                DT_VARIABLEARRAY[*ActorMountData]
	PtPostprocessed            DT_INT64
	SnoPrefabAttachment        DT_SNO
	Unk_d2b5e35                DT_FLOAT
	SzPrefabLookOverride       DT_UINT
	DwPrefabShaderMapOverride  DT_UINT
	ArRTPCOverrides            DT_VARIABLEARRAY[*Type_4174a154]
}

func (t *ActorDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.EType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.DwFlagsEx, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.SnoAppearance, r, &Options{
		Flags: 257,
		Group: 9,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ArCustomizationAppearances, r, &Options{
		Flags: 1,
		Group: 9,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.ArAnimSets, r, &Options{
		Flags: 1,
		Group: 8,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.ArStoreAnimSets, r, &Options{
		Flags: 1,
		Group: 8,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.SnoAnimTree, r, &Options{
		Flags: 1,
		Group: 67,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.TAnimTreeOverride, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.EVariantType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+100, &t.TDefaultLook, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+104, &t.DwDefaultShaderMapOverride, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+108, &t.TScaleRange, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+116, &t.TScaleLimit, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+124, &t.WcylBounds, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+144, &t.AabbBounds, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+168, &t.WsBounds, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+184, &t.AabbAppearanceBoundingBox, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+208, &t.WpLocationPowerSrc, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+220, &t.EPickStyle, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+224, &t.FlAttachmentScaleFactor, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+228, &t.EDefaultTeam, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+232, &t.ECullingLevel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+236, &t.FlFadeCorpseTimeUntilFade, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+240, &t.FlFadeCorpseTime, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+244, &t.AAbsoluteOrientation, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+248, &t.FlHitFlashPower, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+252, &t.FlHitFlashMultiplier, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+256, &t.FlOverlayPower, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+260, &t.ETopology, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+264, &t.PtMsgTriggeredEvents, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+280, &t.PtPhysData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+296, &t.PtCollData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+312, &t.EActorGizmoType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+316, &t.Unk_8fbba9b, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+320, &t.PtGizmoData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+344, &t.PtMonsterData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+360, &t.PtCritterData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+376, &t.PtPlayerData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+392, &t.PtItemData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+408, &t.PtCombatData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+424, &t.PtDeathData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+440, &t.PtEffectData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+456, &t.PtProjData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+472, &t.PtPropData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+488, &t.PtMovingData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+504, &t.PtBrainData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+520, &t.PtServerData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+536, &t.PtUIData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+552, &t.PtAIData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+568, &t.PtVOData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+584, &t.PtNPCData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+600, &t.PtSoundTableData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+616, &t.PtMountData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+632, &t.PtPostprocessed, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+640, &t.SnoPrefabAttachment, r, &Options{
		Flags: 1,
		Group: 24,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+644, &t.Unk_d2b5e35, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+648, &t.SzPrefabLookOverride, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+652, &t.DwPrefabShaderMapOverride, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+656, &t.ArRTPCOverrides, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+672, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ActorDefinition) Walk(cb WalkCallback, d ...any) {
	cb.Do("EType", &t.EType, d...)
	cb.Do("DwFlags", &t.DwFlags, d...)
	cb.Do("DwFlagsEx", &t.DwFlagsEx, d...)
	cb.Do("SnoAppearance", &t.SnoAppearance, d...)
	cb.Do("ArCustomizationAppearances", &t.ArCustomizationAppearances, d...)
	cb.Do("ArAnimSets", &t.ArAnimSets, d...)
	cb.Do("ArStoreAnimSets", &t.ArStoreAnimSets, d...)
	cb.Do("SnoAnimTree", &t.SnoAnimTree, d...)
	cb.Do("TAnimTreeOverride", &t.TAnimTreeOverride, d...)
	cb.Do("EVariantType", &t.EVariantType, d...)
	cb.Do("TDefaultLook", &t.TDefaultLook, d...)
	cb.Do("DwDefaultShaderMapOverride", &t.DwDefaultShaderMapOverride, d...)
	cb.Do("TScaleRange", &t.TScaleRange, d...)
	cb.Do("TScaleLimit", &t.TScaleLimit, d...)
	cb.Do("WcylBounds", &t.WcylBounds, d...)
	cb.Do("AabbBounds", &t.AabbBounds, d...)
	cb.Do("WsBounds", &t.WsBounds, d...)
	cb.Do("AabbAppearanceBoundingBox", &t.AabbAppearanceBoundingBox, d...)
	cb.Do("WpLocationPowerSrc", &t.WpLocationPowerSrc, d...)
	cb.Do("EPickStyle", &t.EPickStyle, d...)
	cb.Do("FlAttachmentScaleFactor", &t.FlAttachmentScaleFactor, d...)
	cb.Do("EDefaultTeam", &t.EDefaultTeam, d...)
	cb.Do("ECullingLevel", &t.ECullingLevel, d...)
	cb.Do("FlFadeCorpseTimeUntilFade", &t.FlFadeCorpseTimeUntilFade, d...)
	cb.Do("FlFadeCorpseTime", &t.FlFadeCorpseTime, d...)
	cb.Do("AAbsoluteOrientation", &t.AAbsoluteOrientation, d...)
	cb.Do("FlHitFlashPower", &t.FlHitFlashPower, d...)
	cb.Do("FlHitFlashMultiplier", &t.FlHitFlashMultiplier, d...)
	cb.Do("FlOverlayPower", &t.FlOverlayPower, d...)
	cb.Do("ETopology", &t.ETopology, d...)
	cb.Do("PtMsgTriggeredEvents", &t.PtMsgTriggeredEvents, d...)
	cb.Do("PtPhysData", &t.PtPhysData, d...)
	cb.Do("PtCollData", &t.PtCollData, d...)
	cb.Do("EActorGizmoType", &t.EActorGizmoType, d...)
	cb.Do("Unk_8fbba9b", &t.Unk_8fbba9b, d...)
	cb.Do("PtGizmoData", &t.PtGizmoData, d...)
	cb.Do("PtMonsterData", &t.PtMonsterData, d...)
	cb.Do("PtCritterData", &t.PtCritterData, d...)
	cb.Do("PtPlayerData", &t.PtPlayerData, d...)
	cb.Do("PtItemData", &t.PtItemData, d...)
	cb.Do("PtCombatData", &t.PtCombatData, d...)
	cb.Do("PtDeathData", &t.PtDeathData, d...)
	cb.Do("PtEffectData", &t.PtEffectData, d...)
	cb.Do("PtProjData", &t.PtProjData, d...)
	cb.Do("PtPropData", &t.PtPropData, d...)
	cb.Do("PtMovingData", &t.PtMovingData, d...)
	cb.Do("PtBrainData", &t.PtBrainData, d...)
	cb.Do("PtServerData", &t.PtServerData, d...)
	cb.Do("PtUIData", &t.PtUIData, d...)
	cb.Do("PtAIData", &t.PtAIData, d...)
	cb.Do("PtVOData", &t.PtVOData, d...)
	cb.Do("PtNPCData", &t.PtNPCData, d...)
	cb.Do("PtSoundTableData", &t.PtSoundTableData, d...)
	cb.Do("PtMountData", &t.PtMountData, d...)
	cb.Do("PtPostprocessed", &t.PtPostprocessed, d...)
	cb.Do("SnoPrefabAttachment", &t.SnoPrefabAttachment, d...)
	cb.Do("Unk_d2b5e35", &t.Unk_d2b5e35, d...)
	cb.Do("SzPrefabLookOverride", &t.SzPrefabLookOverride, d...)
	cb.Do("DwPrefabShaderMapOverride", &t.DwPrefabShaderMapOverride, d...)
	cb.Do("ArRTPCOverrides", &t.ArRTPCOverrides, d...)
}

type OnUnequipPowerCallback struct {
	// Inherits PowerCallbackBase
	// Inherits PolymorphicBase
	DwType                DT_UINT
	DwPad                 DT_UINT
	SnoTriggerEffectGroup DT_SNO
	BCouldHaveRagdolled   DT_INT
	Unk_259dc59           DT_INT
	Unk_90599e6           DT_INT
}

func (t *OnUnequipPowerCallback) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoTriggerEffectGroup, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.BCouldHaveRagdolled, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_259dc59, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.Unk_90599e6, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *OnUnequipPowerCallback) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("SnoTriggerEffectGroup", &t.SnoTriggerEffectGroup, d...)
	cb.Do("BCouldHaveRagdolled", &t.BCouldHaveRagdolled, d...)
	cb.Do("Unk_259dc59", &t.Unk_259dc59, d...)
	cb.Do("Unk_90599e6", &t.Unk_90599e6, d...)
}

type UIControlConsoleInput struct {
	Unk_8536b47 DT_TAGMAP[*DT_ENUM]
}

func (t *UIControlConsoleInput) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Unk_8536b47, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *UIControlConsoleInput) Walk(cb WalkCallback, d ...any) {
	cb.Do("Unk_8536b47", &t.Unk_8536b47, d...)
}

type UIBrowserWindowStyle struct {
	// Inherits UIWindowStyle
	// Inherits UIControlStyle
	// Inherits PolymorphicBase
	DwType                    DT_UINT
	DwPad                     DT_UINT
	HParentStyle              UIControlHandle
	Unk_441f783               DT_INT64
	M_eHasModifiedPowerTagMap DT_TAGMAP[*DT_ENUM]
	TConsoleInput             UIControlConsoleInput
	Unk_b4f614c               DT_TAGMAP[*DT_ENUM]
}

func (t *UIBrowserWindowStyle) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.HParentStyle, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_441f783, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.M_eHasModifiedPowerTagMap, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.TConsoleInput, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.Unk_b4f614c, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+80, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *UIBrowserWindowStyle) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("HParentStyle", &t.HParentStyle, d...)
	cb.Do("Unk_441f783", &t.Unk_441f783, d...)
	cb.Do("M_eHasModifiedPowerTagMap", &t.M_eHasModifiedPowerTagMap, d...)
	cb.Do("TConsoleInput", &t.TConsoleInput, d...)
	cb.Do("Unk_b4f614c", &t.Unk_b4f614c, d...)
}

type LightInstanceData struct {
	EType                   DT_ENUM
	EMobility               DT_ENUM
	DwFlags                 DT_UINT
	Unk_c96f544             DT_UINT
	Unk_cf4734d             DT_ENUM
	Unk_56127ed             DT_ENUM
	TMatTexProjected        MaterialTexture
	TStateA                 LightStateParams
	TFlickerAmount          DT_RANGE[*DT_FLOAT]
	TFlickerDelay           DT_RANGE[*DT_FLOAT]
	Unk_b2d1b35             DT_FLOAT
	Unk_da73b5e             DT_RANGE[*DT_FLOAT]
	FlShadowZBias           DT_FLOAT
	FlShadowZSlopeScaleBias DT_FLOAT
	Unk_6b1c15              DT_FLOAT
	FlShadowNearPlane       DT_FLOAT
	FlShadowFadeStartRatio  DT_FLOAT
	FlShadowFadeEndRatio    DT_FLOAT
	NSystemDuration         DT_FLOAT
	FlOutroDuration         DT_FLOAT
	TSystemDurationScalar   InterpolationScalar
}

func (t *LightInstanceData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.EType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.EMobility, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.Unk_c96f544, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_cf4734d, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.Unk_56127ed, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.TMatTexProjected, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.TStateA, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+800, &t.TFlickerAmount, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+808, &t.TFlickerDelay, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+816, &t.Unk_b2d1b35, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+820, &t.Unk_da73b5e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+828, &t.FlShadowZBias, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+832, &t.FlShadowZSlopeScaleBias, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+836, &t.Unk_6b1c15, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+840, &t.FlShadowNearPlane, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+844, &t.FlShadowFadeStartRatio, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+848, &t.FlShadowFadeEndRatio, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+852, &t.NSystemDuration, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+856, &t.FlOutroDuration, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+860, &t.TSystemDurationScalar, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+896, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *LightInstanceData) Walk(cb WalkCallback, d ...any) {
	cb.Do("EType", &t.EType, d...)
	cb.Do("EMobility", &t.EMobility, d...)
	cb.Do("DwFlags", &t.DwFlags, d...)
	cb.Do("Unk_c96f544", &t.Unk_c96f544, d...)
	cb.Do("Unk_cf4734d", &t.Unk_cf4734d, d...)
	cb.Do("Unk_56127ed", &t.Unk_56127ed, d...)
	cb.Do("TMatTexProjected", &t.TMatTexProjected, d...)
	cb.Do("TStateA", &t.TStateA, d...)
	cb.Do("TFlickerAmount", &t.TFlickerAmount, d...)
	cb.Do("TFlickerDelay", &t.TFlickerDelay, d...)
	cb.Do("Unk_b2d1b35", &t.Unk_b2d1b35, d...)
	cb.Do("Unk_da73b5e", &t.Unk_da73b5e, d...)
	cb.Do("FlShadowZBias", &t.FlShadowZBias, d...)
	cb.Do("FlShadowZSlopeScaleBias", &t.FlShadowZSlopeScaleBias, d...)
	cb.Do("Unk_6b1c15", &t.Unk_6b1c15, d...)
	cb.Do("FlShadowNearPlane", &t.FlShadowNearPlane, d...)
	cb.Do("FlShadowFadeStartRatio", &t.FlShadowFadeStartRatio, d...)
	cb.Do("FlShadowFadeEndRatio", &t.FlShadowFadeEndRatio, d...)
	cb.Do("NSystemDuration", &t.NSystemDuration, d...)
	cb.Do("FlOutroDuration", &t.FlOutroDuration, d...)
	cb.Do("TSystemDurationScalar", &t.TSystemDurationScalar, d...)
}

type CommonPortalGizmoData struct {
	SnoOperatePowerAnimKey DT_SNO
	FPortalIsElevator      DT_INT
	SnoWarpOutActor        DT_SNO
	SnoWarpInPower         DT_SNO
	EWorldToChoose         DT_ENUM
	SnoSpecifiedWorld      DT_SNO
	SnoPortalDestLevelArea DT_SNO
	DwEntranceNameToFind   DT_STARTLOC_NAME
}

func (t *CommonPortalGizmoData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoOperatePowerAnimKey, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.FPortalIsElevator, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.SnoWarpOutActor, r, &Options{
		Flags: 1,
		Group: 1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.SnoWarpInPower, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.EWorldToChoose, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.SnoSpecifiedWorld, r, &Options{
		Flags: 513,
		Group: 48,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SnoPortalDestLevelArea, r, &Options{
		Flags: 513,
		Group: 22,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.DwEntranceNameToFind, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *CommonPortalGizmoData) Walk(cb WalkCallback, d ...any) {
	cb.Do("SnoOperatePowerAnimKey", &t.SnoOperatePowerAnimKey, d...)
	cb.Do("FPortalIsElevator", &t.FPortalIsElevator, d...)
	cb.Do("SnoWarpOutActor", &t.SnoWarpOutActor, d...)
	cb.Do("SnoWarpInPower", &t.SnoWarpInPower, d...)
	cb.Do("EWorldToChoose", &t.EWorldToChoose, d...)
	cb.Do("SnoSpecifiedWorld", &t.SnoSpecifiedWorld, d...)
	cb.Do("SnoPortalDestLevelArea", &t.SnoPortalDestLevelArea, d...)
	cb.Do("DwEntranceNameToFind", &t.DwEntranceNameToFind, d...)
}

type PreloadACDDataMessage struct {
	THeader         RequiredMessageHeader
	Ann             DT_ACD_NETWORK_NAME
	SnoActor        DT_SNO
	Unk_f1e8af8     DT_FIXEDARRAY[*DT_SNO_NAME]
	Unk_144680      DT_INT
	TBaseACDInfo    DT_OPTIONAL[*BaseACDInfo]
	TPlayerACDInfo  DT_OPTIONAL[*PlayerACDInfo]
	TMountACDInfo   DT_OPTIONAL[*MountACDInfo]
	TMonsterACDInfo DT_OPTIONAL[*MonsterACDInfo]
	TNPCACDInfo     DT_OPTIONAL[*NPCACDInfo]
}

func (t *PreloadACDDataMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Ann, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SnoActor, r, &Options{
		Flags: 1,
		Group: 1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.Unk_f1e8af8, r, &Options{
		ArrayLength: 32,
		Flags:       8,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+288, &t.Unk_144680, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+292, &t.TBaseACDInfo, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+304, &t.TPlayerACDInfo, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1192, &t.TMountACDInfo, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1212, &t.TMonsterACDInfo, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1272, &t.TNPCACDInfo, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+1300, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PreloadACDDataMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("Ann", &t.Ann, d...)
	cb.Do("SnoActor", &t.SnoActor, d...)
	cb.Do("Unk_f1e8af8", &t.Unk_f1e8af8, d...)
	cb.Do("Unk_144680", &t.Unk_144680, d...)
	cb.Do("TBaseACDInfo", &t.TBaseACDInfo, d...)
	cb.Do("TPlayerACDInfo", &t.TPlayerACDInfo, d...)
	cb.Do("TMountACDInfo", &t.TMountACDInfo, d...)
	cb.Do("TMonsterACDInfo", &t.TMonsterACDInfo, d...)
	cb.Do("TNPCACDInfo", &t.TNPCACDInfo, d...)
}

type dmMtxMirror struct {
	Rx DT_VECTOR4D
	Ry DT_VECTOR4D
	Rz DT_VECTOR4D
	P  DT_VECTOR4D
}

func (t *dmMtxMirror) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Rx, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Ry, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.Rz, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.P, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+64, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *dmMtxMirror) Walk(cb WalkCallback, d ...any) {
	cb.Do("Rx", &t.Rx, d...)
	cb.Do("Ry", &t.Ry, d...)
	cb.Do("Rz", &t.Rz, d...)
	cb.Do("P", &t.P, d...)
}

type ActorUIData struct {
	HPortraitImage               DT_UINT
	Unk_e3dc66d                  DT_INT
	Unk_a94748a                  DT_UINT
	Unk_a0b181c                  DT_UINT
	HMinimapIcon                 DT_UINT
	Unk_9c6abb8                  DT_UINT
	HMinimapIconGizmoUsed        DT_UINT
	FMinimapActiveByDefault      DT_INT
	FMinimapRespectsFoW          DT_INT
	FMinimapRespectsRevealRadius DT_INT
	Unk_c26b08b                  DT_INT
	Unk_fab46e5                  DT_FLOAT
	FlMinimapMaxVisRange         DT_FLOAT
	FlMinimapDiscoveryRadius     DT_FLOAT
	Unk_c6ec070                  ConditionWrapper
}

func (t *ActorUIData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.HPortraitImage, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.Unk_e3dc66d, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.Unk_a94748a, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.Unk_a0b181c, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.HMinimapIcon, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.Unk_9c6abb8, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.HMinimapIconGizmoUsed, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.FMinimapActiveByDefault, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.FMinimapRespectsFoW, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.FMinimapRespectsRevealRadius, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.Unk_c26b08b, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.Unk_fab46e5, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.FlMinimapMaxVisRange, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.FlMinimapDiscoveryRadius, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.Unk_c6ec070, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+88, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ActorUIData) Walk(cb WalkCallback, d ...any) {
	cb.Do("HPortraitImage", &t.HPortraitImage, d...)
	cb.Do("Unk_e3dc66d", &t.Unk_e3dc66d, d...)
	cb.Do("Unk_a94748a", &t.Unk_a94748a, d...)
	cb.Do("Unk_a0b181c", &t.Unk_a0b181c, d...)
	cb.Do("HMinimapIcon", &t.HMinimapIcon, d...)
	cb.Do("Unk_9c6abb8", &t.Unk_9c6abb8, d...)
	cb.Do("HMinimapIconGizmoUsed", &t.HMinimapIconGizmoUsed, d...)
	cb.Do("FMinimapActiveByDefault", &t.FMinimapActiveByDefault, d...)
	cb.Do("FMinimapRespectsFoW", &t.FMinimapRespectsFoW, d...)
	cb.Do("FMinimapRespectsRevealRadius", &t.FMinimapRespectsRevealRadius, d...)
	cb.Do("Unk_c26b08b", &t.Unk_c26b08b, d...)
	cb.Do("Unk_fab46e5", &t.Unk_fab46e5, d...)
	cb.Do("FlMinimapMaxVisRange", &t.FlMinimapMaxVisRange, d...)
	cb.Do("FlMinimapDiscoveryRadius", &t.FlMinimapDiscoveryRadius, d...)
	cb.Do("Unk_c6ec070", &t.Unk_c6ec070, d...)
}

type OnDodgeBuffCallback struct {
	// Inherits BuffCallbackBase
	// Inherits PolymorphicBase
	DwType                DT_UINT
	DwPad                 DT_UINT
	SnoTriggerEffectGroup DT_SNO
	ArConditions          DT_POLYMORPHIC_VARIABLEARRAY[*DT_INT64]
}

func (t *OnDodgeBuffCallback) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoTriggerEffectGroup, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ArConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *OnDodgeBuffCallback) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("SnoTriggerEffectGroup", &t.SnoTriggerEffectGroup, d...)
	cb.Do("ArConditions", &t.ArConditions, d...)
}

type GetInventoryLocationMessage struct {
	THeader RequiredRequestMessageHeader
	TItemId Type_f5ac91bb
}

func (t *GetInventoryLocationMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.TItemId, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+40, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *GetInventoryLocationMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("TItemId", &t.TItemId, d...)
}

type AnimTreeNodeChild struct {
	TBlendCase          AnimTreeBlendCase
	TSecondaryBlendCase AnimTreeBlendCase
	TCondition          ConditionWrapper
	DwChildIndex        DT_UINT
}

func (t *AnimTreeNodeChild) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.TBlendCase, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.TSecondaryBlendCase, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.TCondition, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.DwChildIndex, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+64, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *AnimTreeNodeChild) Walk(cb WalkCallback, d ...any) {
	cb.Do("TBlendCase", &t.TBlendCase, d...)
	cb.Do("TSecondaryBlendCase", &t.TSecondaryBlendCase, d...)
	cb.Do("TCondition", &t.TCondition, d...)
	cb.Do("DwChildIndex", &t.DwChildIndex, d...)
}

type dmMeshNodeMirror struct {
	NLowerX         DT_FLOAT
	NLowerY         DT_FLOAT
	NLowerZ         DT_FLOAT
	NUpperX         DT_FLOAT
	NUpperY         DT_FLOAT
	NUpperZ         DT_FLOAT
	NIndex          DT_INT
	DwIncludeMask   DT_WORD
	DwAxis          DT_BYTE
	DwTriangleCount DT_BYTE
}

func (t *dmMeshNodeMirror) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.NLowerX, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.NLowerY, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.NLowerZ, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.NUpperX, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.NUpperY, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.NUpperZ, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.NIndex, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.DwIncludeMask, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+30, &t.DwAxis, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+31, &t.DwTriangleCount, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *dmMeshNodeMirror) Walk(cb WalkCallback, d ...any) {
	cb.Do("NLowerX", &t.NLowerX, d...)
	cb.Do("NLowerY", &t.NLowerY, d...)
	cb.Do("NLowerZ", &t.NLowerZ, d...)
	cb.Do("NUpperX", &t.NUpperX, d...)
	cb.Do("NUpperY", &t.NUpperY, d...)
	cb.Do("NUpperZ", &t.NUpperZ, d...)
	cb.Do("NIndex", &t.NIndex, d...)
	cb.Do("DwIncludeMask", &t.DwIncludeMask, d...)
	cb.Do("DwAxis", &t.DwAxis, d...)
	cb.Do("DwTriangleCount", &t.DwTriangleCount, d...)
}

type ChestGizmoData struct {
	// Inherits NamedGizmoData
	// Inherits ActorGizmoData
	// Inherits PolymorphicBase
	DwType                            DT_UINT
	FDisableNonFriendlyOperation      DT_INT
	FWalkToCenter                     DT_INT
	FGizmoStartsDisabled              DT_INT
	FUseStringListName                DT_INT
	FForceMinimapIcon                 DT_INT
	FlOperationRadius                 DT_FLOAT
	Unk_d0b1df5                       DT_FLOAT
	FlGizmoUseTime                    DT_FLOAT
	SnoChannelingEffect               DT_SNO
	Unk_2767229                       DT_INT
	FGizmoShowProgressBar             DT_INT
	Unk_6d9ebe1                       DT_INT
	Unk_5456245                       DT_INT
	Unk_af5815a                       DT_INT
	SnoOnClickEffect                  DT_SNO
	SnoPickedUpEffect                 DT_SNO
	SnoDropOnGroundEffect             DT_SNO
	TConditionData                    GizmoConditionData
	SnoPowerOperator                  DT_SNO
	SnoPowerOperate                   DT_SNO
	SnoPowerOperatorActive            DT_SNO
	SnoPowerOperateActive             DT_SNO
	Unk_359810e                       DT_INT
	NCooldown                         DT_UINT
	Unk_9c8478e                       DT_UINT
	Unk_d45ed2d                       DT_INT
	Unk_f6b20b7                       DT_INT
	Unk_54513b8                       DT_INT
	Unk_fd1f378                       DT_UINT
	HGizmoOperateFlavorTextMsgLabel   DT_UINT
	HGizmoOperateDescriptionMsgLabel  DT_UINT
	FlGizmoOperateOffset              DT_FLOAT
	Unk_ab58cd3                       DT_ENUM
	Unk_91a3966                       DT_UINT
	HGizmoChannelingLabel             DT_UINT
	Unk_4be4371                       DT_INT
	SnoTreasureClass                  DT_SNO
	TLockData                         LockingGizmoData
	FChestRemovesCollisionOnOperation DT_INT
	FChestOperatesOnProximity         DT_INT
	FChestLight                       DT_INT
	Unk_51b0c11                       DT_INT
	Unk_6b4a81d                       DT_FLOAT
	DwPad                             DT_UINT
}

func (t *ChestGizmoData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.FDisableNonFriendlyOperation, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.FWalkToCenter, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.FGizmoStartsDisabled, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.FUseStringListName, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.FForceMinimapIcon, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.FlOperationRadius, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.Unk_d0b1df5, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.FlGizmoUseTime, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.SnoChannelingEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.Unk_2767229, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.FGizmoShowProgressBar, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+60, &t.Unk_6d9ebe1, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.Unk_5456245, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.Unk_af5815a, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.SnoOnClickEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.SnoPickedUpEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.SnoDropOnGroundEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.TConditionData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.SnoPowerOperator, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.SnoPowerOperate, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.SnoPowerOperatorActive, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+100, &t.SnoPowerOperateActive, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+104, &t.Unk_359810e, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+108, &t.NCooldown, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.Unk_9c8478e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+116, &t.Unk_d45ed2d, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.Unk_f6b20b7, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+124, &t.Unk_54513b8, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.Unk_fd1f378, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+132, &t.HGizmoOperateFlavorTextMsgLabel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+136, &t.HGizmoOperateDescriptionMsgLabel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+140, &t.FlGizmoOperateOffset, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+144, &t.Unk_ab58cd3, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+148, &t.Unk_91a3966, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+152, &t.HGizmoChannelingLabel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+156, &t.Unk_4be4371, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+160, &t.SnoTreasureClass, r, &Options{
		Flags: 1,
		Group: 52,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+164, &t.TLockData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+200, &t.FChestRemovesCollisionOnOperation, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+204, &t.FChestOperatesOnProximity, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+208, &t.FChestLight, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+212, &t.Unk_51b0c11, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+216, &t.Unk_6b4a81d, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+220, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+224, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ChestGizmoData) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("FDisableNonFriendlyOperation", &t.FDisableNonFriendlyOperation, d...)
	cb.Do("FWalkToCenter", &t.FWalkToCenter, d...)
	cb.Do("FGizmoStartsDisabled", &t.FGizmoStartsDisabled, d...)
	cb.Do("FUseStringListName", &t.FUseStringListName, d...)
	cb.Do("FForceMinimapIcon", &t.FForceMinimapIcon, d...)
	cb.Do("FlOperationRadius", &t.FlOperationRadius, d...)
	cb.Do("Unk_d0b1df5", &t.Unk_d0b1df5, d...)
	cb.Do("FlGizmoUseTime", &t.FlGizmoUseTime, d...)
	cb.Do("SnoChannelingEffect", &t.SnoChannelingEffect, d...)
	cb.Do("Unk_2767229", &t.Unk_2767229, d...)
	cb.Do("FGizmoShowProgressBar", &t.FGizmoShowProgressBar, d...)
	cb.Do("Unk_6d9ebe1", &t.Unk_6d9ebe1, d...)
	cb.Do("Unk_5456245", &t.Unk_5456245, d...)
	cb.Do("Unk_af5815a", &t.Unk_af5815a, d...)
	cb.Do("SnoOnClickEffect", &t.SnoOnClickEffect, d...)
	cb.Do("SnoPickedUpEffect", &t.SnoPickedUpEffect, d...)
	cb.Do("SnoDropOnGroundEffect", &t.SnoDropOnGroundEffect, d...)
	cb.Do("TConditionData", &t.TConditionData, d...)
	cb.Do("SnoPowerOperator", &t.SnoPowerOperator, d...)
	cb.Do("SnoPowerOperate", &t.SnoPowerOperate, d...)
	cb.Do("SnoPowerOperatorActive", &t.SnoPowerOperatorActive, d...)
	cb.Do("SnoPowerOperateActive", &t.SnoPowerOperateActive, d...)
	cb.Do("Unk_359810e", &t.Unk_359810e, d...)
	cb.Do("NCooldown", &t.NCooldown, d...)
	cb.Do("Unk_9c8478e", &t.Unk_9c8478e, d...)
	cb.Do("Unk_d45ed2d", &t.Unk_d45ed2d, d...)
	cb.Do("Unk_f6b20b7", &t.Unk_f6b20b7, d...)
	cb.Do("Unk_54513b8", &t.Unk_54513b8, d...)
	cb.Do("Unk_fd1f378", &t.Unk_fd1f378, d...)
	cb.Do("HGizmoOperateFlavorTextMsgLabel", &t.HGizmoOperateFlavorTextMsgLabel, d...)
	cb.Do("HGizmoOperateDescriptionMsgLabel", &t.HGizmoOperateDescriptionMsgLabel, d...)
	cb.Do("FlGizmoOperateOffset", &t.FlGizmoOperateOffset, d...)
	cb.Do("Unk_ab58cd3", &t.Unk_ab58cd3, d...)
	cb.Do("Unk_91a3966", &t.Unk_91a3966, d...)
	cb.Do("HGizmoChannelingLabel", &t.HGizmoChannelingLabel, d...)
	cb.Do("Unk_4be4371", &t.Unk_4be4371, d...)
	cb.Do("SnoTreasureClass", &t.SnoTreasureClass, d...)
	cb.Do("TLockData", &t.TLockData, d...)
	cb.Do("FChestRemovesCollisionOnOperation", &t.FChestRemovesCollisionOnOperation, d...)
	cb.Do("FChestOperatesOnProximity", &t.FChestOperatesOnProximity, d...)
	cb.Do("FChestLight", &t.FChestLight, d...)
	cb.Do("Unk_51b0c11", &t.Unk_51b0c11, d...)
	cb.Do("Unk_6b4a81d", &t.Unk_6b4a81d, d...)
	cb.Do("DwPad", &t.DwPad, d...)
}

type Line3D struct {
	Wp DT_VECTOR3D
	Wv DT_VECTOR3D
}

func (t *Line3D) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Wp, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.Wv, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Line3D) Walk(cb WalkCallback, d ...any) {
	cb.Do("Wp", &t.Wp, d...)
	cb.Do("Wv", &t.Wv, d...)
}

type WwiseConversationSoundBank struct {
	// Inherits WwiseSoundBankContentBase
	// Inherits PolymorphicBase
	DwType                DT_UINT
	DwPad                 DT_UINT
	PtConversationSamples DT_VARIABLEARRAY[*ConversationSample]
}

func (t *WwiseConversationSoundBank) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.PtConversationSamples, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *WwiseConversationSoundBank) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("PtConversationSamples", &t.PtConversationSamples, d...)
}

type ItemQualitySubcondition struct {
	// Inherits NumericComparisonSubcondition
	// Inherits Subcondition
	// Inherits PolymorphicBase
	DwType            DT_UINT
	BNegate           DT_INT
	EComparisonOp     DT_ENUM
	DwPad             DT_UINT
	EItemQualityLevel DT_ENUM
}

func (t *ItemQualitySubcondition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BNegate, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.EComparisonOp, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.EItemQualityLevel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+40, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ItemQualitySubcondition) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("BNegate", &t.BNegate, d...)
	cb.Do("EComparisonOp", &t.EComparisonOp, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("EItemQualityLevel", &t.EItemQualityLevel, d...)
}

type KillCountMessage struct {
	THeader               RequiredMessageHeader
	DwPlayerGameAccountId DT_UINT
	NPlayerKills          DT_INT
	NDeaths               DT_INT
	NAssists              DT_INT
}

func (t *KillCountMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.DwPlayerGameAccountId, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.NPlayerKills, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.NDeaths, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.NAssists, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *KillCountMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("DwPlayerGameAccountId", &t.DwPlayerGameAccountId, d...)
	cb.Do("NPlayerKills", &t.NPlayerKills, d...)
	cb.Do("NDeaths", &t.NDeaths, d...)
	cb.Do("NAssists", &t.NAssists, d...)
}

type MaterialDefinition struct {
	DwFlags                 DT_UINT
	TUberMaterial           UberMaterial
	ArDecalLookVariantMap   DT_VARIABLEARRAY[*DecalLookVariantMap]
	SnoSurface              DT_SNO
	SnoBiomes               DT_FIXEDARRAY[*DT_SNO]
	TParametricClutterIndex ParametricClutterIndex
	Unk_93ea20a             DT_FLOAT
	PathPlaybackMultiplier  InterpolationPath_float
	PathPlaybackController  InterpolationPath_float
	Unk_ce6fe3b             DT_UINT
	Unk_245935              DT_ENUM
	Unk_6d58226             DT_ENUM
	FlDuration              DT_FLOAT
	TOutroDuration          DT_FLOAT
	Unk_a08119e             DT_FLOAT
	Unk_5b1ce37             DT_FLOAT
	FlStiffness             DT_FLOAT
	FlGravityMagnitude      DT_FLOAT
	TEquipParamPermutation  Type_88c1160d
}

func (t *MaterialDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwFlags, r, &Options{Flags: 8912896}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TUberMaterial, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.ArDecalLookVariantMap, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.SnoSurface, r, &Options{
		Flags: 8388608,
		Group: 43,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.SnoBiomes, r, &Options{
		ArrayLength: 4,
		Flags:       1,
		Group:       77,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.TParametricClutterIndex, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+136, &t.Unk_93ea20a, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+144, &t.PathPlaybackMultiplier, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+200, &t.PathPlaybackController, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+256, &t.Unk_ce6fe3b, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+260, &t.Unk_245935, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+264, &t.Unk_6d58226, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+268, &t.FlDuration, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+272, &t.TOutroDuration, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+276, &t.Unk_a08119e, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+280, &t.Unk_5b1ce37, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+284, &t.FlStiffness, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+288, &t.FlGravityMagnitude, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+292, &t.TEquipParamPermutation, r, &Options{Flags: 8388608}); err != nil {
		return err
	}
	if _, err := r.Seek(p+328, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *MaterialDefinition) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwFlags", &t.DwFlags, d...)
	cb.Do("TUberMaterial", &t.TUberMaterial, d...)
	cb.Do("ArDecalLookVariantMap", &t.ArDecalLookVariantMap, d...)
	cb.Do("SnoSurface", &t.SnoSurface, d...)
	cb.Do("SnoBiomes", &t.SnoBiomes, d...)
	cb.Do("TParametricClutterIndex", &t.TParametricClutterIndex, d...)
	cb.Do("Unk_93ea20a", &t.Unk_93ea20a, d...)
	cb.Do("PathPlaybackMultiplier", &t.PathPlaybackMultiplier, d...)
	cb.Do("PathPlaybackController", &t.PathPlaybackController, d...)
	cb.Do("Unk_ce6fe3b", &t.Unk_ce6fe3b, d...)
	cb.Do("Unk_245935", &t.Unk_245935, d...)
	cb.Do("Unk_6d58226", &t.Unk_6d58226, d...)
	cb.Do("FlDuration", &t.FlDuration, d...)
	cb.Do("TOutroDuration", &t.TOutroDuration, d...)
	cb.Do("Unk_a08119e", &t.Unk_a08119e, d...)
	cb.Do("Unk_5b1ce37", &t.Unk_5b1ce37, d...)
	cb.Do("FlStiffness", &t.FlStiffness, d...)
	cb.Do("FlGravityMagnitude", &t.FlGravityMagnitude, d...)
	cb.Do("TEquipParamPermutation", &t.TEquipParamPermutation, d...)
}

type BannerIcon struct {
	SzName      DT_UINT
	HLabel      StringLabelHandleEx
	SnoTexture  DT_SNO
	Unk_cd49a50 DT_FLOAT
	HIcon       UIImageHandleReference
}

func (t *BannerIcon) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SzName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.HLabel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.SnoTexture, r, &Options{
		Flags: 1,
		Group: 44,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_cd49a50, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.HIcon, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *BannerIcon) Walk(cb WalkCallback, d ...any) {
	cb.Do("SzName", &t.SzName, d...)
	cb.Do("HLabel", &t.HLabel, d...)
	cb.Do("SnoTexture", &t.SnoTexture, d...)
	cb.Do("Unk_cd49a50", &t.Unk_cd49a50, d...)
	cb.Do("HIcon", &t.HIcon, d...)
}

type BannerTrim struct {
	SzName          DT_UINT
	HLabel          StringLabelHandleEx
	SnoNormal       DT_SNO
	SnoAlbedo       DT_SNO
	SnoMask         DT_SNO
	SnoEmissiveMask DT_SNO
	FlMetalness     DT_FLOAT
	FlRoughness     DT_FLOAT
	HIcon           UIImageHandleReference
}

func (t *BannerTrim) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SzName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.HLabel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.SnoNormal, r, &Options{
		Flags: 1,
		Group: 44,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoAlbedo, r, &Options{
		Flags: 1,
		Group: 44,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.SnoMask, r, &Options{
		Flags: 1,
		Group: 44,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SnoEmissiveMask, r, &Options{
		Flags: 1,
		Group: 44,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.FlMetalness, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.FlRoughness, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.HIcon, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+40, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *BannerTrim) Walk(cb WalkCallback, d ...any) {
	cb.Do("SzName", &t.SzName, d...)
	cb.Do("HLabel", &t.HLabel, d...)
	cb.Do("SnoNormal", &t.SnoNormal, d...)
	cb.Do("SnoAlbedo", &t.SnoAlbedo, d...)
	cb.Do("SnoMask", &t.SnoMask, d...)
	cb.Do("SnoEmissiveMask", &t.SnoEmissiveMask, d...)
	cb.Do("FlMetalness", &t.FlMetalness, d...)
	cb.Do("FlRoughness", &t.FlRoughness, d...)
	cb.Do("HIcon", &t.HIcon, d...)
}

type UIScrollBoxStyleOptionalFieldMapDefaults struct {
	EScrollbarAlignment              DT_ENUM
	EScrollbarVisibility             DT_ENUM
	FlScrollbarWidth                 DT_FLOAT
	Unk_5443ce9                      DT_INT
	FlScrollbarMouseWheelScaleFactor DT_FLOAT
	FlScrollbarBlendSpeed            DT_FLOAT
	FlScrollbarBlendTime             DT_FLOAT
	EBlendEasing                     DT_ENUM
	Unk_ebbdec9                      DT_FLOAT
	Unk_438d70b                      DT_FLOAT
	NScrollbarPageIncrement          DT_INT
	Unk_1f6fa9                       DT_ENUM
	Unk_f28083a                      DT_INT
}

func (t *UIScrollBoxStyleOptionalFieldMapDefaults) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.EScrollbarAlignment, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.EScrollbarVisibility, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.FlScrollbarWidth, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.Unk_5443ce9, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.FlScrollbarMouseWheelScaleFactor, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.FlScrollbarBlendSpeed, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.FlScrollbarBlendTime, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.EBlendEasing, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.Unk_ebbdec9, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.Unk_438d70b, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.NScrollbarPageIncrement, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.Unk_1f6fa9, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.Unk_f28083a, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+52, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *UIScrollBoxStyleOptionalFieldMapDefaults) Walk(cb WalkCallback, d ...any) {
	cb.Do("EScrollbarAlignment", &t.EScrollbarAlignment, d...)
	cb.Do("EScrollbarVisibility", &t.EScrollbarVisibility, d...)
	cb.Do("FlScrollbarWidth", &t.FlScrollbarWidth, d...)
	cb.Do("Unk_5443ce9", &t.Unk_5443ce9, d...)
	cb.Do("FlScrollbarMouseWheelScaleFactor", &t.FlScrollbarMouseWheelScaleFactor, d...)
	cb.Do("FlScrollbarBlendSpeed", &t.FlScrollbarBlendSpeed, d...)
	cb.Do("FlScrollbarBlendTime", &t.FlScrollbarBlendTime, d...)
	cb.Do("EBlendEasing", &t.EBlendEasing, d...)
	cb.Do("Unk_ebbdec9", &t.Unk_ebbdec9, d...)
	cb.Do("Unk_438d70b", &t.Unk_438d70b, d...)
	cb.Do("NScrollbarPageIncrement", &t.NScrollbarPageIncrement, d...)
	cb.Do("Unk_1f6fa9", &t.Unk_1f6fa9, d...)
	cb.Do("Unk_f28083a", &t.Unk_f28083a, d...)
}

type PowerPhaseBase struct {
	// Inherits PolymorphicBase
	DwType       DT_UINT
	DwPad        DT_UINT
	TPhaseName   DT_UINT
	ArPhaseJumps DT_POLYMORPHIC_VARIABLEARRAY[*DT_INT64]
	Unk_d0d932b  DT_INT
	Unk_9a8200e  DT_INT
}

func (t *PowerPhaseBase) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TPhaseName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ArPhaseJumps, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.Unk_d0d932b, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.Unk_9a8200e, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+56, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PowerPhaseBase) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("TPhaseName", &t.TPhaseName, d...)
	cb.Do("ArPhaseJumps", &t.ArPhaseJumps, d...)
	cb.Do("Unk_d0d932b", &t.Unk_d0d932b, d...)
	cb.Do("Unk_9a8200e", &t.Unk_9a8200e, d...)
}

type PowerPhaseLoop struct {
	// Inherits PowerPhaseBase
	// Inherits PolymorphicBase
	DwType       DT_UINT
	DwPad        DT_UINT
	TPhaseName   DT_UINT
	ArPhaseJumps DT_POLYMORPHIC_VARIABLEARRAY[*DT_INT64]
	Unk_d0d932b  DT_INT
	Unk_9a8200e  DT_INT
}

func (t *PowerPhaseLoop) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TPhaseName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ArPhaseJumps, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.Unk_d0d932b, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.Unk_9a8200e, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+56, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PowerPhaseLoop) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("TPhaseName", &t.TPhaseName, d...)
	cb.Do("ArPhaseJumps", &t.ArPhaseJumps, d...)
	cb.Do("Unk_d0d932b", &t.Unk_d0d932b, d...)
	cb.Do("Unk_9a8200e", &t.Unk_9a8200e, d...)
}

type ScalarFunctionFormula struct {
	SzName         DT_UINT
	TFormula       DT_STRING_FORMULA
	FlDefaultValue DT_FLOAT
	Unk_c0f4112    DT_INT
	BIsGlobal      DT_INT
}

func (t *ScalarFunctionFormula) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SzName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.TFormula, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.FlDefaultValue, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.Unk_c0f4112, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.BIsGlobal, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+56, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ScalarFunctionFormula) Walk(cb WalkCallback, d ...any) {
	cb.Do("SzName", &t.SzName, d...)
	cb.Do("TFormula", &t.TFormula, d...)
	cb.Do("FlDefaultValue", &t.FlDefaultValue, d...)
	cb.Do("Unk_c0f4112", &t.Unk_c0f4112, d...)
	cb.Do("BIsGlobal", &t.BIsGlobal, d...)
}

type PowerConditionHasHealth struct {
	// Inherits PowerConditionBase
	// Inherits PolymorphicBase
	DwType          DT_UINT
	BInverse        DT_INT
	DwPad           DT_UINT
	ESubject        DT_ENUM
	FlHealthPercent DT_FLOAT
}

func (t *PowerConditionHasHealth) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BInverse, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ESubject, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.FlHealthPercent, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PowerConditionHasHealth) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("BInverse", &t.BInverse, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("ESubject", &t.ESubject, d...)
	cb.Do("FlHealthPercent", &t.FlHealthPercent, d...)
}

type ItemDefinition struct {
	SnoActor                         DT_SNO
	SnoItemType                      DT_SNO
	EMagicType                       DT_ENUM
	DwFlags                          DT_UINT
	PtInitialDyes                    DT_VARIABLEARRAY[*DT_SNO]
	EComponentStyleType              DT_ENUM
	DwComponentStyle                 DT_UINT
	SnoLore                          DT_SNO
	NMaxStackSize                    DT_INT
	NBaseCostCurrency                DT_INT
	Unk_11efbc0                      DT_INT
	ECurrencyType                    DT_ENUM
	Unk_8d06437                      DT_INT
	Unk_def75bc                      DT_INT
	NDropMinLevel                    DT_INT
	NDropMaxLevel                    DT_INT
	NVendorDropMinLevel              DT_INT
	NVendorDropMaxLevel              DT_INT
	EDropMinWorldTier                DT_ENUM
	NExplicitRequiredLevel           DT_INT
	EPreferredZone                   DT_ENUM
	SnoBaseItem                      DT_SNO
	SnoRandomItemTreasureClass       DT_SNO
	SnoSalvageTreasureClassNormal    DT_SNO
	SnoSalvageTreasureClassMagic     DT_SNO
	SnoSalvageTreasureClassRare      DT_SNO
	SnoSalvageTreasureClassLegendary DT_SNO
	SnoSalvageTreasureClassUnique    DT_SNO
	SnoSalvageTreasureClassSetItem   DT_SNO
	SnoRareNamePrefixStringList      DT_SNO
	SnoRareNameSuffixStringList      DT_SNO
	SnoSetItemBonus                  DT_SNO
	SnoPower                         DT_SNO
	NTomeLevel                       DT_INT
	NFixedIPowerLevel                DT_INT
	EForcedItemQualityModifier       DT_ENUM
	Unk_8789165                      DT_INT
	Unk_6a20140                      DT_INT
	PtAttributes                     DT_VARIABLEARRAY[*AttributeSpecifier]
	Unk_f48ee7e                      DT_INT
	ArInherentAffixes                DT_VARIABLEARRAY[*DT_SNO]
	ArForcedAffixes                  DT_VARIABLEARRAY[*DT_SNO]
	Unk_e6191d6                      DT_VARIABLEARRAY[*DT_GBID]
	Unk_192312c                      DT_VARIABLEARRAY[*DT_GBID]
	FUsableByClass                   DT_FIXEDARRAY[*DT_INT]
	PtSocketedEffects                DT_VARIABLEARRAY[*SocketedEffects]
	SnoRunePower                     DT_SNO
	GbidMalignantColor               DT_GBID
	GbidForcedSocketColor            DT_GBID
	SnoRecipe                        DT_SNO
	SnoDemonScroll                   DT_SNO
	SnoMount                         DT_SNO
	SnoMountPowerOverride            DT_SNO
	SnoFootstepOverride              DT_SNO
	SnoParagonGlyph                  DT_SNO
	SnoPassivePowerContainer         DT_SNO
	ArForcedArmorPacts               DT_VARIABLEARRAY[*ForcedArmorPactCount]
	ArDisallowedAffixFamilies        DT_VARIABLEARRAY[*DT_GBID]
	ArReputation                     DT_VARIABLEARRAY[*ReputationValuePair]
	TInvImages                       DT_FIXEDARRAY[*InventoryImages]
	Unk_75d565b                      DT_UINT
	FMustKeepInInventory             DT_INT
	FBottomless                      DT_INT
	EItemUseType                     DT_ENUM
	SnoPowerUpPower                  DT_SNO
	SnoItemUseLevelAreaRequirement   DT_SNO
	Unk_f772ea                       DT_UINT
	Unk_f4b6cde                      Type_56ff7d6a
	BSeasonItem                      DT_INT
	SzItemUseCursor                  DT_CSTRING[*DT_BYTE]
	SnoItemUseActivationSound        DT_SNO
	SnoItemUseCraftSound             DT_SNO
	Unk_d1d6a7f                      StringLabelHandleEx
	Unk_d085fd9                      DT_INT
	Unk_b30b3df                      UIImageHandleReference
	Unk_cbbccc1                      DT_FLOAT
	Unk_9b60982                      DT_FLOAT
	EDisplayedQualityLevel           DT_ENUM
	NCustomDropWeight                DT_INT
	SnoPowerPassive                  DT_SNO
	EGemType                         DT_ENUM
	SnoPotionPower                   DT_SNO
	BIsTransmog                      DT_INT
}

func (t *ItemDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.SnoActor, r, &Options{
		Flags: 257,
		Group: 1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.SnoItemType, r, &Options{
		Flags: 257,
		Group: 98,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.EMagicType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.PtInitialDyes, r, &Options{
		Flags: 1,
		Group: 122,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.EComponentStyleType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.DwComponentStyle, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.SnoLore, r, &Options{
		Flags: 1,
		Group: 59,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.NMaxStackSize, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.NBaseCostCurrency, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+60, &t.Unk_11efbc0, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.ECurrencyType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.Unk_8d06437, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_def75bc, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.NDropMinLevel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.NDropMaxLevel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.NVendorDropMinLevel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.NVendorDropMaxLevel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.EDropMinWorldTier, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.NExplicitRequiredLevel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+100, &t.EPreferredZone, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+104, &t.SnoBaseItem, r, &Options{
		Flags: 1,
		Group: 73,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+108, &t.SnoRandomItemTreasureClass, r, &Options{
		Flags: 1,
		Group: 52,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.SnoSalvageTreasureClassNormal, r, &Options{
		Flags: 1,
		Group: 52,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+116, &t.SnoSalvageTreasureClassMagic, r, &Options{
		Flags: 1,
		Group: 52,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.SnoSalvageTreasureClassRare, r, &Options{
		Flags: 1,
		Group: 52,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+124, &t.SnoSalvageTreasureClassLegendary, r, &Options{
		Flags: 1,
		Group: 52,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.SnoSalvageTreasureClassUnique, r, &Options{
		Flags: 1,
		Group: 52,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+132, &t.SnoSalvageTreasureClassSetItem, r, &Options{
		Flags: 1,
		Group: 52,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+136, &t.SnoRareNamePrefixStringList, r, &Options{
		Flags: 1,
		Group: 42,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+140, &t.SnoRareNameSuffixStringList, r, &Options{
		Flags: 1,
		Group: 42,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+144, &t.SnoSetItemBonus, r, &Options{
		Flags: 1,
		Group: 109,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+148, &t.SnoPower, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+152, &t.NTomeLevel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+156, &t.NFixedIPowerLevel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+160, &t.EForcedItemQualityModifier, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+164, &t.Unk_8789165, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+168, &t.Unk_6a20140, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+176, &t.PtAttributes, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+192, &t.Unk_f48ee7e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+200, &t.ArInherentAffixes, r, &Options{
		Flags: 1,
		Group: 104,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+216, &t.ArForcedAffixes, r, &Options{
		Flags: 1,
		Group: 104,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+232, &t.Unk_e6191d6, r, &Options{
		Flags: 1,
		Group: 18,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+248, &t.Unk_192312c, r, &Options{
		Flags: 1,
		Group: 18,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+264, &t.FUsableByClass, r, &Options{
		ArrayLength: 5,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+288, &t.PtSocketedEffects, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+304, &t.SnoRunePower, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+308, &t.GbidMalignantColor, r, &Options{
		Flags: 1,
		Group: 63,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+312, &t.GbidForcedSocketColor, r, &Options{
		Flags: 1,
		Group: 63,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+316, &t.SnoRecipe, r, &Options{
		Flags: 1,
		Group: 49,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+320, &t.SnoDemonScroll, r, &Options{
		Flags: 1,
		Group: 95,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+324, &t.SnoMount, r, &Options{
		Flags: 1,
		Group: 1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+328, &t.SnoMountPowerOverride, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+332, &t.SnoFootstepOverride, r, &Options{
		Flags: 1,
		Group: 149,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+336, &t.SnoParagonGlyph, r, &Options{
		Flags: 1,
		Group: 111,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+340, &t.SnoPassivePowerContainer, r, &Options{
		Flags: 1,
		Group: 142,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+344, &t.ArForcedArmorPacts, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+360, &t.ArDisallowedAffixFamilies, r, &Options{
		Flags: 1,
		Group: 18,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+376, &t.ArReputation, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+392, &t.TInvImages, r, &Options{
		ArrayLength: 5,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+432, &t.Unk_75d565b, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+436, &t.FMustKeepInInventory, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+440, &t.FBottomless, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+444, &t.EItemUseType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+448, &t.SnoPowerUpPower, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+452, &t.SnoItemUseLevelAreaRequirement, r, &Options{
		Flags: 513,
		Group: 22,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+456, &t.Unk_f772ea, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+464, &t.Unk_f4b6cde, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+480, &t.BSeasonItem, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+488, &t.SzItemUseCursor, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+504, &t.SnoItemUseActivationSound, r, &Options{
		Flags: 1,
		Group: 40,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+508, &t.SnoItemUseCraftSound, r, &Options{
		Flags: 1,
		Group: 40,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+512, &t.Unk_d1d6a7f, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+520, &t.Unk_d085fd9, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+524, &t.Unk_b30b3df, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+528, &t.Unk_cbbccc1, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+532, &t.Unk_9b60982, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+536, &t.EDisplayedQualityLevel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+540, &t.NCustomDropWeight, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+544, &t.SnoPowerPassive, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+548, &t.EGemType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+552, &t.SnoPotionPower, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+556, &t.BIsTransmog, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+560, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ItemDefinition) Walk(cb WalkCallback, d ...any) {
	cb.Do("SnoActor", &t.SnoActor, d...)
	cb.Do("SnoItemType", &t.SnoItemType, d...)
	cb.Do("EMagicType", &t.EMagicType, d...)
	cb.Do("DwFlags", &t.DwFlags, d...)
	cb.Do("PtInitialDyes", &t.PtInitialDyes, d...)
	cb.Do("EComponentStyleType", &t.EComponentStyleType, d...)
	cb.Do("DwComponentStyle", &t.DwComponentStyle, d...)
	cb.Do("SnoLore", &t.SnoLore, d...)
	cb.Do("NMaxStackSize", &t.NMaxStackSize, d...)
	cb.Do("NBaseCostCurrency", &t.NBaseCostCurrency, d...)
	cb.Do("Unk_11efbc0", &t.Unk_11efbc0, d...)
	cb.Do("ECurrencyType", &t.ECurrencyType, d...)
	cb.Do("Unk_8d06437", &t.Unk_8d06437, d...)
	cb.Do("Unk_def75bc", &t.Unk_def75bc, d...)
	cb.Do("NDropMinLevel", &t.NDropMinLevel, d...)
	cb.Do("NDropMaxLevel", &t.NDropMaxLevel, d...)
	cb.Do("NVendorDropMinLevel", &t.NVendorDropMinLevel, d...)
	cb.Do("NVendorDropMaxLevel", &t.NVendorDropMaxLevel, d...)
	cb.Do("EDropMinWorldTier", &t.EDropMinWorldTier, d...)
	cb.Do("NExplicitRequiredLevel", &t.NExplicitRequiredLevel, d...)
	cb.Do("EPreferredZone", &t.EPreferredZone, d...)
	cb.Do("SnoBaseItem", &t.SnoBaseItem, d...)
	cb.Do("SnoRandomItemTreasureClass", &t.SnoRandomItemTreasureClass, d...)
	cb.Do("SnoSalvageTreasureClassNormal", &t.SnoSalvageTreasureClassNormal, d...)
	cb.Do("SnoSalvageTreasureClassMagic", &t.SnoSalvageTreasureClassMagic, d...)
	cb.Do("SnoSalvageTreasureClassRare", &t.SnoSalvageTreasureClassRare, d...)
	cb.Do("SnoSalvageTreasureClassLegendary", &t.SnoSalvageTreasureClassLegendary, d...)
	cb.Do("SnoSalvageTreasureClassUnique", &t.SnoSalvageTreasureClassUnique, d...)
	cb.Do("SnoSalvageTreasureClassSetItem", &t.SnoSalvageTreasureClassSetItem, d...)
	cb.Do("SnoRareNamePrefixStringList", &t.SnoRareNamePrefixStringList, d...)
	cb.Do("SnoRareNameSuffixStringList", &t.SnoRareNameSuffixStringList, d...)
	cb.Do("SnoSetItemBonus", &t.SnoSetItemBonus, d...)
	cb.Do("SnoPower", &t.SnoPower, d...)
	cb.Do("NTomeLevel", &t.NTomeLevel, d...)
	cb.Do("NFixedIPowerLevel", &t.NFixedIPowerLevel, d...)
	cb.Do("EForcedItemQualityModifier", &t.EForcedItemQualityModifier, d...)
	cb.Do("Unk_8789165", &t.Unk_8789165, d...)
	cb.Do("Unk_6a20140", &t.Unk_6a20140, d...)
	cb.Do("PtAttributes", &t.PtAttributes, d...)
	cb.Do("Unk_f48ee7e", &t.Unk_f48ee7e, d...)
	cb.Do("ArInherentAffixes", &t.ArInherentAffixes, d...)
	cb.Do("ArForcedAffixes", &t.ArForcedAffixes, d...)
	cb.Do("Unk_e6191d6", &t.Unk_e6191d6, d...)
	cb.Do("Unk_192312c", &t.Unk_192312c, d...)
	cb.Do("FUsableByClass", &t.FUsableByClass, d...)
	cb.Do("PtSocketedEffects", &t.PtSocketedEffects, d...)
	cb.Do("SnoRunePower", &t.SnoRunePower, d...)
	cb.Do("GbidMalignantColor", &t.GbidMalignantColor, d...)
	cb.Do("GbidForcedSocketColor", &t.GbidForcedSocketColor, d...)
	cb.Do("SnoRecipe", &t.SnoRecipe, d...)
	cb.Do("SnoDemonScroll", &t.SnoDemonScroll, d...)
	cb.Do("SnoMount", &t.SnoMount, d...)
	cb.Do("SnoMountPowerOverride", &t.SnoMountPowerOverride, d...)
	cb.Do("SnoFootstepOverride", &t.SnoFootstepOverride, d...)
	cb.Do("SnoParagonGlyph", &t.SnoParagonGlyph, d...)
	cb.Do("SnoPassivePowerContainer", &t.SnoPassivePowerContainer, d...)
	cb.Do("ArForcedArmorPacts", &t.ArForcedArmorPacts, d...)
	cb.Do("ArDisallowedAffixFamilies", &t.ArDisallowedAffixFamilies, d...)
	cb.Do("ArReputation", &t.ArReputation, d...)
	cb.Do("TInvImages", &t.TInvImages, d...)
	cb.Do("Unk_75d565b", &t.Unk_75d565b, d...)
	cb.Do("FMustKeepInInventory", &t.FMustKeepInInventory, d...)
	cb.Do("FBottomless", &t.FBottomless, d...)
	cb.Do("EItemUseType", &t.EItemUseType, d...)
	cb.Do("SnoPowerUpPower", &t.SnoPowerUpPower, d...)
	cb.Do("SnoItemUseLevelAreaRequirement", &t.SnoItemUseLevelAreaRequirement, d...)
	cb.Do("Unk_f772ea", &t.Unk_f772ea, d...)
	cb.Do("Unk_f4b6cde", &t.Unk_f4b6cde, d...)
	cb.Do("BSeasonItem", &t.BSeasonItem, d...)
	cb.Do("SzItemUseCursor", &t.SzItemUseCursor, d...)
	cb.Do("SnoItemUseActivationSound", &t.SnoItemUseActivationSound, d...)
	cb.Do("SnoItemUseCraftSound", &t.SnoItemUseCraftSound, d...)
	cb.Do("Unk_d1d6a7f", &t.Unk_d1d6a7f, d...)
	cb.Do("Unk_d085fd9", &t.Unk_d085fd9, d...)
	cb.Do("Unk_b30b3df", &t.Unk_b30b3df, d...)
	cb.Do("Unk_cbbccc1", &t.Unk_cbbccc1, d...)
	cb.Do("Unk_9b60982", &t.Unk_9b60982, d...)
	cb.Do("EDisplayedQualityLevel", &t.EDisplayedQualityLevel, d...)
	cb.Do("NCustomDropWeight", &t.NCustomDropWeight, d...)
	cb.Do("SnoPowerPassive", &t.SnoPowerPassive, d...)
	cb.Do("EGemType", &t.EGemType, d...)
	cb.Do("SnoPotionPower", &t.SnoPotionPower, d...)
	cb.Do("BIsTransmog", &t.BIsTransmog, d...)
}

type IRect2D struct {
	Left   DT_INT
	Top    DT_INT
	Right  DT_INT
	Bottom DT_INT
}

func (t *IRect2D) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Left, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.Top, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.Right, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.Bottom, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *IRect2D) Walk(cb WalkCallback, d ...any) {
	cb.Do("Left", &t.Left, d...)
	cb.Do("Top", &t.Top, d...)
	cb.Do("Right", &t.Right, d...)
	cb.Do("Bottom", &t.Bottom, d...)
}

type SkillTreeReward struct {
	THeader          GBIDHeader
	EType            DT_ENUM
	SnoPower         DT_SNO
	SzPowerMod       DT_UINT
	DwMaxTalentRanks DT_UINT
}

func (t *SkillTreeReward) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+260, &t.EType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+264, &t.SnoPower, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+268, &t.SzPowerMod, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+272, &t.DwMaxTalentRanks, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+276, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *SkillTreeReward) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("EType", &t.EType, d...)
	cb.Do("SnoPower", &t.SnoPower, d...)
	cb.Do("SzPowerMod", &t.SzPowerMod, d...)
	cb.Do("DwMaxTalentRanks", &t.DwMaxTalentRanks, d...)
}

type Type_ba2327fc struct {
	SnoWorld DT_SNO
	ArQuests DT_VARIABLEARRAY[*DT_SNO]
}

func (t *Type_ba2327fc) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoWorld, r, &Options{
		Flags: 513,
		Group: 48,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.ArQuests, r, &Options{
		Flags: 513,
		Group: 31,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_ba2327fc) Walk(cb WalkCallback, d ...any) {
	cb.Do("SnoWorld", &t.SnoWorld, d...)
	cb.Do("ArQuests", &t.ArQuests, d...)
}

type UIDialogDefinition struct {
	TUIRoot    UIControlTemplate
	TTemplates DT_VARIABLEARRAY[*UIControlTemplate]
	PtStyles   DT_VARIABLEARRAY[*UIStyleResource]
}

func (t *UIDialogDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.TUIRoot, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.TTemplates, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.PtStyles, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+112, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *UIDialogDefinition) Walk(cb WalkCallback, d ...any) {
	cb.Do("TUIRoot", &t.TUIRoot, d...)
	cb.Do("TTemplates", &t.TTemplates, d...)
	cb.Do("PtStyles", &t.PtStyles, d...)
}

type BossEncounterStateMessage struct {
	THeader                   RequiredRequestMessageHeader
	SnoBossEncounterLevelArea DT_SNO
	EState                    DT_ENUM
	Unk_57adc31               DT_FIXEDARRAY[*DT_ACD_NETWORK_NAME]
}

func (t *BossEncounterStateMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.SnoBossEncounterLevelArea, r, &Options{
		Flags: 1,
		Group: 22,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.EState, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.Unk_57adc31, r, &Options{
		ArrayLength: 4,
		Flags:       8,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+64, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *BossEncounterStateMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("SnoBossEncounterLevelArea", &t.SnoBossEncounterLevelArea, d...)
	cb.Do("EState", &t.EState, d...)
	cb.Do("Unk_57adc31", &t.Unk_57adc31, d...)
}

type MarkerPrefabData struct {
	// Inherits MarkerDataBase
	// Inherits PolymorphicBase
	DwType                 DT_UINT
	DwPad                  DT_UINT
	ArPrefabCustomizations DT_VARIABLEARRAY[*PrefabCustomization]
}

func (t *MarkerPrefabData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.ArPrefabCustomizations, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *MarkerPrefabData) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("ArPrefabCustomizations", &t.ArPrefabCustomizations, d...)
}

type TriggerEventCameraChangeDepthOfField struct {
	// Inherits TriggerEventRangedDuration
	// Inherits TriggerEvent
	// Inherits PolymorphicBase
	DwType               DT_UINT
	TConditions          TriggerConditions
	FGenerated           DT_INT
	Unk_6cba752          DT_INT
	DwParentActorID      DT_UINT
	TDuration            DT_FLOAT
	DwTriggerFlags       DT_UINT
	DwTriggerFlagsEx     DT_UINT
	TCleanup             TriggerCleanup
	Unk_49e9257          DT_INT
	Unk_5490979          DT_INT
	DwPad                DT_UINT
	Unk_7902ee3          DT_INT
	FlBeginFocalDistance DT_FLOAT
	FlBeginFStop         DT_FLOAT
	Unk_fbca868          DT_FLOAT
	FlBeginFocalRegion   DT_FLOAT
	Unk_f75b7db          DT_FLOAT
	FlEndFocalDistance   DT_FLOAT
	FlEndFStop           DT_FLOAT
	Unk_aa07da           DT_FLOAT
	FlEndFocalRegion     DT_FLOAT
	Unk_b9bf10d          DT_FLOAT
	EBlendEasing         DT_ENUM
}

func (t *TriggerEventCameraChangeDepthOfField) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.FGenerated, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_6cba752, r, &Options{Flags: 16}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.DwParentActorID, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.TDuration, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.DwTriggerFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.DwTriggerFlagsEx, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.TCleanup, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+116, &t.Unk_49e9257, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.Unk_5490979, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+124, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.Unk_7902ee3, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+132, &t.FlBeginFocalDistance, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+136, &t.FlBeginFStop, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+140, &t.Unk_fbca868, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+144, &t.FlBeginFocalRegion, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+148, &t.Unk_f75b7db, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+152, &t.FlEndFocalDistance, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+156, &t.FlEndFStop, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+160, &t.Unk_aa07da, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+164, &t.FlEndFocalRegion, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+168, &t.Unk_b9bf10d, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+172, &t.EBlendEasing, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+176, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TriggerEventCameraChangeDepthOfField) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("TConditions", &t.TConditions, d...)
	cb.Do("FGenerated", &t.FGenerated, d...)
	cb.Do("Unk_6cba752", &t.Unk_6cba752, d...)
	cb.Do("DwParentActorID", &t.DwParentActorID, d...)
	cb.Do("TDuration", &t.TDuration, d...)
	cb.Do("DwTriggerFlags", &t.DwTriggerFlags, d...)
	cb.Do("DwTriggerFlagsEx", &t.DwTriggerFlagsEx, d...)
	cb.Do("TCleanup", &t.TCleanup, d...)
	cb.Do("Unk_49e9257", &t.Unk_49e9257, d...)
	cb.Do("Unk_5490979", &t.Unk_5490979, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("Unk_7902ee3", &t.Unk_7902ee3, d...)
	cb.Do("FlBeginFocalDistance", &t.FlBeginFocalDistance, d...)
	cb.Do("FlBeginFStop", &t.FlBeginFStop, d...)
	cb.Do("Unk_fbca868", &t.Unk_fbca868, d...)
	cb.Do("FlBeginFocalRegion", &t.FlBeginFocalRegion, d...)
	cb.Do("Unk_f75b7db", &t.Unk_f75b7db, d...)
	cb.Do("FlEndFocalDistance", &t.FlEndFocalDistance, d...)
	cb.Do("FlEndFStop", &t.FlEndFStop, d...)
	cb.Do("Unk_aa07da", &t.Unk_aa07da, d...)
	cb.Do("FlEndFocalRegion", &t.FlEndFocalRegion, d...)
	cb.Do("Unk_b9bf10d", &t.Unk_b9bf10d, d...)
	cb.Do("EBlendEasing", &t.EBlendEasing, d...)
}

type TriggerEventSetLightingLabelOverride struct {
	// Inherits TriggerEvent
	// Inherits PolymorphicBase
	DwType            DT_UINT
	DwPad             DT_UINT
	TConditions       TriggerConditions
	FGenerated        DT_INT
	Unk_6cba752       DT_INT
	DwParentActorID   DT_UINT
	GbidLabelOverride DT_GBID
}

func (t *TriggerEventSetLightingLabelOverride) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.FGenerated, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_6cba752, r, &Options{Flags: 16}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.DwParentActorID, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.GbidLabelOverride, r, &Options{
		Flags: 1,
		Group: 4,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+88, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TriggerEventSetLightingLabelOverride) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("TConditions", &t.TConditions, d...)
	cb.Do("FGenerated", &t.FGenerated, d...)
	cb.Do("Unk_6cba752", &t.Unk_6cba752, d...)
	cb.Do("DwParentActorID", &t.DwParentActorID, d...)
	cb.Do("GbidLabelOverride", &t.GbidLabelOverride, d...)
}

type GetInventoryLocationResponseMessage struct {
	THeader          RequiredResponseMessageHeader
	TInvLocationData InventoryLocationMessageData
	AnnItem          DT_ACD_NETWORK_NAME
}

func (t *GetInventoryLocationResponseMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.TInvLocationData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.AnnItem, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+52, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *GetInventoryLocationResponseMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("TInvLocationData", &t.TInvLocationData, d...)
	cb.Do("AnnItem", &t.AnnItem, d...)
}

type Marker struct {
	DwHash          DT_UINT
	NID             DT_INT
	EType           DT_ENUM
	Transform       PRTransform
	Snoname         DT_SNO_NAME
	DwMarkerFlags   DT_UINT
	DwMarkerFlagsEx DT_UINT
	VecScale        DT_VECTOR3D
	PtBase          DT_POLYMORPHIC_VARIABLEARRAY[*MarkerDataBase]
	PtGroupData     DT_VARIABLEARRAY[*MarkerGroupData]
	PtMarkerLinks   DT_VARIABLEARRAY[*MarkerLink]
	Unk_c339f69     DT_INT
	DwSeed          DT_UINT
	TPrefabData     PrefabData
}

func (t *Marker) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.DwHash, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.NID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.EType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.Transform, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.Snoname, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.DwMarkerFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.DwMarkerFlagsEx, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.VecScale, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.PtBase, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.PtGroupData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.PtMarkerLinks, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.Unk_c339f69, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+132, &t.DwSeed, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+136, &t.TPrefabData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+184, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Marker) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwHash", &t.DwHash, d...)
	cb.Do("NID", &t.NID, d...)
	cb.Do("EType", &t.EType, d...)
	cb.Do("Transform", &t.Transform, d...)
	cb.Do("Snoname", &t.Snoname, d...)
	cb.Do("DwMarkerFlags", &t.DwMarkerFlags, d...)
	cb.Do("DwMarkerFlagsEx", &t.DwMarkerFlagsEx, d...)
	cb.Do("VecScale", &t.VecScale, d...)
	cb.Do("PtBase", &t.PtBase, d...)
	cb.Do("PtGroupData", &t.PtGroupData, d...)
	cb.Do("PtMarkerLinks", &t.PtMarkerLinks, d...)
	cb.Do("Unk_c339f69", &t.Unk_c339f69, d...)
	cb.Do("DwSeed", &t.DwSeed, d...)
	cb.Do("TPrefabData", &t.TPrefabData, d...)
}

type Type_bac3964d struct {
	ArKeys DT_VARIABLEARRAY[*Type_666e5231]
}

func (t *Type_bac3964d) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.ArKeys, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_bac3964d) Walk(cb WalkCallback, d ...any) {
	cb.Do("ArKeys", &t.ArKeys, d...)
}

type DamageTakenBuffCallback struct {
	// Inherits BuffCallbackBase
	// Inherits PolymorphicBase
	DwType                DT_UINT
	DwPad                 DT_UINT
	SnoTriggerEffectGroup DT_SNO
	ArConditions          DT_POLYMORPHIC_VARIABLEARRAY[*DT_INT64]
	NPriority             DT_INT
}

func (t *DamageTakenBuffCallback) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoTriggerEffectGroup, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ArConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.NPriority, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+56, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *DamageTakenBuffCallback) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("SnoTriggerEffectGroup", &t.SnoTriggerEffectGroup, d...)
	cb.Do("ArConditions", &t.ArConditions, d...)
	cb.Do("NPriority", &t.NPriority, d...)
}

type QuestSubconditionBase struct {
	// Inherits Subcondition
	// Inherits PolymorphicBase
	DwType   DT_UINT
	BNegate  DT_INT
	SnoQuest DT_SNO
	DwPad    DT_UINT
}

func (t *QuestSubconditionBase) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BNegate, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SnoQuest, r, &Options{
		Flags: 513,
		Group: 31,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *QuestSubconditionBase) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("BNegate", &t.BNegate, d...)
	cb.Do("SnoQuest", &t.SnoQuest, d...)
	cb.Do("DwPad", &t.DwPad, d...)
}

type MonsterFamilyArchetype struct {
	SzArchetypeName                 DT_UINT
	SnoAIAwareness                  DT_SNO
	TAwareness                      MonsterAwarenessInfo
	Unk_301c43c                     DT_UINT
	DwFlags                         DT_UINT
	Unk_b291cd3                     DT_INT
	FOverrideExperienceScalar       DT_INT
	FlExperienceScalar              DT_FLOAT
	FlHPScalar                      DT_FLOAT
	FlDamageScalar                  DT_FLOAT
	TDamageRange                    DT_RANGE[*DT_FLOAT]
	Unk_100de70                     DT_INT
	FlProjectileAccuracy            DT_FLOAT
	Unk_c9d3011                     DT_FLOAT
	FlMaxDamageShield               DT_FLOAT
	EDefaultMovementStyle           DT_ENUM
	EDefaultFacingStyle             DT_ENUM
	EDefaultMoveRate                DT_ENUM
	FlSpeedWalking                  DT_FLOAT
	FlSpeedRunning                  DT_FLOAT
	FlSpeedSprinting                DT_FLOAT
	FlSpeedStrafing                 DT_FLOAT
	TSpeedVarianceRange             DT_RANGE[*DT_FLOAT]
	FlAcceleration                  DT_FLOAT
	FlCombatAcceleration            DT_FLOAT
	GbidDefaultDynamicMovementData  DT_GBID
	GbidInCombatDynamicMovementData DT_GBID
	TFacingData                     ActorFacingData
	SnoSummonPower                  DT_SNO
	Unk_f73b6d9                     DT_SNO
	Unk_c2cc767                     DT_SNO
	SnoStaggerPower                 DT_SNO
	FlBossStaggerThreshold          DT_FLOAT
	FlBossStaggerDecayRate          DT_FLOAT
	FlBossStaggeredTime             DT_FLOAT
	FlAdditionalPlayerThreshold     DT_FLOAT
	FlAdditionalPlayerDecayRate     DT_FLOAT
	Unk_9831607                     DT_VARIABLEARRAY[*DT_FLOAT]
	SnoBossObserver                 DT_SNO
	Unk_1627b04                     DT_FLOAT
	Unk_121fc92                     DT_FLOAT
	Unk_5428a5e                     DT_FLOAT
	Unk_3b9132c                     DT_FLOAT
	Unk_c0cc954                     DT_FLOAT
	Unk_d5178b2                     DT_FLOAT
	Unk_e08f0df                     DT_FLOAT
	Unk_c86d0b9                     DT_INT
	Unk_d544bbb                     DT_FLOAT
	ETiltType                       DT_ENUM
	ETiltTypeOnDeath                DT_ENUM
	Unk_2401865                     DT_FLOAT
	Unk_94abb4e                     DT_FLOAT
	Unk_f50871                      DT_FLOAT
	Unk_aca81bc                     DT_FLOAT
	Unk_38d1c6b                     DT_INT
	Unk_63732a6                     DT_INT
	Unk_904bb00                     DT_INT
	Unk_28c7e7c                     DT_INT
	SnoDisallowedAffixes            DT_VARIABLEARRAY[*DT_SNO]
	SnoAICoordinator                DT_SNO
}

func (t *MonsterFamilyArchetype) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SzArchetypeName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.SnoAIAwareness, r, &Options{
		Flags: 1,
		Group: 125,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.TAwareness, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.Unk_301c43c, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.DwFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.Unk_b291cd3, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.FOverrideExperienceScalar, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.FlExperienceScalar, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.FlHPScalar, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+60, &t.FlDamageScalar, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.TDamageRange, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_100de70, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.FlProjectileAccuracy, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.Unk_c9d3011, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.FlMaxDamageShield, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.EDefaultMovementStyle, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.EDefaultFacingStyle, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.EDefaultMoveRate, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+100, &t.FlSpeedWalking, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+104, &t.FlSpeedRunning, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+108, &t.FlSpeedSprinting, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.FlSpeedStrafing, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+116, &t.TSpeedVarianceRange, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+124, &t.FlAcceleration, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.FlCombatAcceleration, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+132, &t.GbidDefaultDynamicMovementData, r, &Options{
		Flags: 1,
		Group: 34,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+136, &t.GbidInCombatDynamicMovementData, r, &Options{
		Flags: 1,
		Group: 34,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+140, &t.TFacingData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+152, &t.SnoSummonPower, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+156, &t.Unk_f73b6d9, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+160, &t.Unk_c2cc767, r, &Options{
		Flags: 513,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+164, &t.SnoStaggerPower, r, &Options{
		Flags: 513,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+168, &t.FlBossStaggerThreshold, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+172, &t.FlBossStaggerDecayRate, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+176, &t.FlBossStaggeredTime, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+180, &t.FlAdditionalPlayerThreshold, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+184, &t.FlAdditionalPlayerDecayRate, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+192, &t.Unk_9831607, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+208, &t.SnoBossObserver, r, &Options{
		Flags: 513,
		Group: 26,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+212, &t.Unk_1627b04, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+216, &t.Unk_121fc92, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+220, &t.Unk_5428a5e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+224, &t.Unk_3b9132c, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+228, &t.Unk_c0cc954, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+232, &t.Unk_d5178b2, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+236, &t.Unk_e08f0df, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+240, &t.Unk_c86d0b9, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+244, &t.Unk_d544bbb, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+248, &t.ETiltType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+252, &t.ETiltTypeOnDeath, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+256, &t.Unk_2401865, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+260, &t.Unk_94abb4e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+264, &t.Unk_f50871, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+268, &t.Unk_aca81bc, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+272, &t.Unk_38d1c6b, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+276, &t.Unk_63732a6, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+280, &t.Unk_904bb00, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+284, &t.Unk_28c7e7c, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+288, &t.SnoDisallowedAffixes, r, &Options{
		Flags: 513,
		Group: 107,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+304, &t.SnoAICoordinator, r, &Options{
		Flags: 1,
		Group: 144,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+312, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *MonsterFamilyArchetype) Walk(cb WalkCallback, d ...any) {
	cb.Do("SzArchetypeName", &t.SzArchetypeName, d...)
	cb.Do("SnoAIAwareness", &t.SnoAIAwareness, d...)
	cb.Do("TAwareness", &t.TAwareness, d...)
	cb.Do("Unk_301c43c", &t.Unk_301c43c, d...)
	cb.Do("DwFlags", &t.DwFlags, d...)
	cb.Do("Unk_b291cd3", &t.Unk_b291cd3, d...)
	cb.Do("FOverrideExperienceScalar", &t.FOverrideExperienceScalar, d...)
	cb.Do("FlExperienceScalar", &t.FlExperienceScalar, d...)
	cb.Do("FlHPScalar", &t.FlHPScalar, d...)
	cb.Do("FlDamageScalar", &t.FlDamageScalar, d...)
	cb.Do("TDamageRange", &t.TDamageRange, d...)
	cb.Do("Unk_100de70", &t.Unk_100de70, d...)
	cb.Do("FlProjectileAccuracy", &t.FlProjectileAccuracy, d...)
	cb.Do("Unk_c9d3011", &t.Unk_c9d3011, d...)
	cb.Do("FlMaxDamageShield", &t.FlMaxDamageShield, d...)
	cb.Do("EDefaultMovementStyle", &t.EDefaultMovementStyle, d...)
	cb.Do("EDefaultFacingStyle", &t.EDefaultFacingStyle, d...)
	cb.Do("EDefaultMoveRate", &t.EDefaultMoveRate, d...)
	cb.Do("FlSpeedWalking", &t.FlSpeedWalking, d...)
	cb.Do("FlSpeedRunning", &t.FlSpeedRunning, d...)
	cb.Do("FlSpeedSprinting", &t.FlSpeedSprinting, d...)
	cb.Do("FlSpeedStrafing", &t.FlSpeedStrafing, d...)
	cb.Do("TSpeedVarianceRange", &t.TSpeedVarianceRange, d...)
	cb.Do("FlAcceleration", &t.FlAcceleration, d...)
	cb.Do("FlCombatAcceleration", &t.FlCombatAcceleration, d...)
	cb.Do("GbidDefaultDynamicMovementData", &t.GbidDefaultDynamicMovementData, d...)
	cb.Do("GbidInCombatDynamicMovementData", &t.GbidInCombatDynamicMovementData, d...)
	cb.Do("TFacingData", &t.TFacingData, d...)
	cb.Do("SnoSummonPower", &t.SnoSummonPower, d...)
	cb.Do("Unk_f73b6d9", &t.Unk_f73b6d9, d...)
	cb.Do("Unk_c2cc767", &t.Unk_c2cc767, d...)
	cb.Do("SnoStaggerPower", &t.SnoStaggerPower, d...)
	cb.Do("FlBossStaggerThreshold", &t.FlBossStaggerThreshold, d...)
	cb.Do("FlBossStaggerDecayRate", &t.FlBossStaggerDecayRate, d...)
	cb.Do("FlBossStaggeredTime", &t.FlBossStaggeredTime, d...)
	cb.Do("FlAdditionalPlayerThreshold", &t.FlAdditionalPlayerThreshold, d...)
	cb.Do("FlAdditionalPlayerDecayRate", &t.FlAdditionalPlayerDecayRate, d...)
	cb.Do("Unk_9831607", &t.Unk_9831607, d...)
	cb.Do("SnoBossObserver", &t.SnoBossObserver, d...)
	cb.Do("Unk_1627b04", &t.Unk_1627b04, d...)
	cb.Do("Unk_121fc92", &t.Unk_121fc92, d...)
	cb.Do("Unk_5428a5e", &t.Unk_5428a5e, d...)
	cb.Do("Unk_3b9132c", &t.Unk_3b9132c, d...)
	cb.Do("Unk_c0cc954", &t.Unk_c0cc954, d...)
	cb.Do("Unk_d5178b2", &t.Unk_d5178b2, d...)
	cb.Do("Unk_e08f0df", &t.Unk_e08f0df, d...)
	cb.Do("Unk_c86d0b9", &t.Unk_c86d0b9, d...)
	cb.Do("Unk_d544bbb", &t.Unk_d544bbb, d...)
	cb.Do("ETiltType", &t.ETiltType, d...)
	cb.Do("ETiltTypeOnDeath", &t.ETiltTypeOnDeath, d...)
	cb.Do("Unk_2401865", &t.Unk_2401865, d...)
	cb.Do("Unk_94abb4e", &t.Unk_94abb4e, d...)
	cb.Do("Unk_f50871", &t.Unk_f50871, d...)
	cb.Do("Unk_aca81bc", &t.Unk_aca81bc, d...)
	cb.Do("Unk_38d1c6b", &t.Unk_38d1c6b, d...)
	cb.Do("Unk_63732a6", &t.Unk_63732a6, d...)
	cb.Do("Unk_904bb00", &t.Unk_904bb00, d...)
	cb.Do("Unk_28c7e7c", &t.Unk_28c7e7c, d...)
	cb.Do("SnoDisallowedAffixes", &t.SnoDisallowedAffixes, d...)
	cb.Do("SnoAICoordinator", &t.SnoAICoordinator, d...)
}

type AppearanceLook struct {
	SzLookName DT_UINT
}

func (t *AppearanceLook) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SzLookName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+4, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *AppearanceLook) Walk(cb WalkCallback, d ...any) {
	cb.Do("SzLookName", &t.SzLookName, d...)
}

type CarryableReceptacleGizmoData struct {
	// Inherits NamedGizmoData
	// Inherits ActorGizmoData
	// Inherits PolymorphicBase
	DwType                           DT_UINT
	DwPad                            DT_UINT
	FDisableNonFriendlyOperation     DT_INT
	FWalkToCenter                    DT_INT
	FGizmoStartsDisabled             DT_INT
	FUseStringListName               DT_INT
	FForceMinimapIcon                DT_INT
	FlOperationRadius                DT_FLOAT
	Unk_d0b1df5                      DT_FLOAT
	FlGizmoUseTime                   DT_FLOAT
	SnoChannelingEffect              DT_SNO
	Unk_2767229                      DT_INT
	FGizmoShowProgressBar            DT_INT
	Unk_6d9ebe1                      DT_INT
	Unk_5456245                      DT_INT
	Unk_af5815a                      DT_INT
	SnoOnClickEffect                 DT_SNO
	SnoPickedUpEffect                DT_SNO
	SnoDropOnGroundEffect            DT_SNO
	TConditionData                   GizmoConditionData
	SnoPowerOperator                 DT_SNO
	SnoPowerOperate                  DT_SNO
	SnoPowerOperatorActive           DT_SNO
	SnoPowerOperateActive            DT_SNO
	Unk_359810e                      DT_INT
	NCooldown                        DT_UINT
	Unk_9c8478e                      DT_UINT
	Unk_d45ed2d                      DT_INT
	Unk_f6b20b7                      DT_INT
	Unk_54513b8                      DT_INT
	Unk_fd1f378                      DT_UINT
	HGizmoOperateFlavorTextMsgLabel  DT_UINT
	HGizmoOperateDescriptionMsgLabel DT_UINT
	FlGizmoOperateOffset             DT_FLOAT
	Unk_ab58cd3                      DT_ENUM
	Unk_91a3966                      DT_UINT
	HGizmoChannelingLabel            DT_UINT
	Unk_4be4371                      DT_INT
	ArCarryables                     DT_VARIABLEARRAY[*DT_SNO]
	NMaxCount                        DT_UINT
}

func (t *CarryableReceptacleGizmoData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.FDisableNonFriendlyOperation, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.FWalkToCenter, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.FGizmoStartsDisabled, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.FUseStringListName, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.FForceMinimapIcon, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.FlOperationRadius, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.Unk_d0b1df5, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.FlGizmoUseTime, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.SnoChannelingEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.Unk_2767229, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.FGizmoShowProgressBar, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+60, &t.Unk_6d9ebe1, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.Unk_5456245, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.Unk_af5815a, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.SnoOnClickEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.SnoPickedUpEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.SnoDropOnGroundEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.TConditionData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.SnoPowerOperator, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.SnoPowerOperate, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.SnoPowerOperatorActive, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+100, &t.SnoPowerOperateActive, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+104, &t.Unk_359810e, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+108, &t.NCooldown, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.Unk_9c8478e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+116, &t.Unk_d45ed2d, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.Unk_f6b20b7, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+124, &t.Unk_54513b8, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.Unk_fd1f378, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+132, &t.HGizmoOperateFlavorTextMsgLabel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+136, &t.HGizmoOperateDescriptionMsgLabel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+140, &t.FlGizmoOperateOffset, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+144, &t.Unk_ab58cd3, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+148, &t.Unk_91a3966, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+152, &t.HGizmoChannelingLabel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+156, &t.Unk_4be4371, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+160, &t.ArCarryables, r, &Options{
		Flags: 1,
		Group: 1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+176, &t.NMaxCount, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+184, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *CarryableReceptacleGizmoData) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("FDisableNonFriendlyOperation", &t.FDisableNonFriendlyOperation, d...)
	cb.Do("FWalkToCenter", &t.FWalkToCenter, d...)
	cb.Do("FGizmoStartsDisabled", &t.FGizmoStartsDisabled, d...)
	cb.Do("FUseStringListName", &t.FUseStringListName, d...)
	cb.Do("FForceMinimapIcon", &t.FForceMinimapIcon, d...)
	cb.Do("FlOperationRadius", &t.FlOperationRadius, d...)
	cb.Do("Unk_d0b1df5", &t.Unk_d0b1df5, d...)
	cb.Do("FlGizmoUseTime", &t.FlGizmoUseTime, d...)
	cb.Do("SnoChannelingEffect", &t.SnoChannelingEffect, d...)
	cb.Do("Unk_2767229", &t.Unk_2767229, d...)
	cb.Do("FGizmoShowProgressBar", &t.FGizmoShowProgressBar, d...)
	cb.Do("Unk_6d9ebe1", &t.Unk_6d9ebe1, d...)
	cb.Do("Unk_5456245", &t.Unk_5456245, d...)
	cb.Do("Unk_af5815a", &t.Unk_af5815a, d...)
	cb.Do("SnoOnClickEffect", &t.SnoOnClickEffect, d...)
	cb.Do("SnoPickedUpEffect", &t.SnoPickedUpEffect, d...)
	cb.Do("SnoDropOnGroundEffect", &t.SnoDropOnGroundEffect, d...)
	cb.Do("TConditionData", &t.TConditionData, d...)
	cb.Do("SnoPowerOperator", &t.SnoPowerOperator, d...)
	cb.Do("SnoPowerOperate", &t.SnoPowerOperate, d...)
	cb.Do("SnoPowerOperatorActive", &t.SnoPowerOperatorActive, d...)
	cb.Do("SnoPowerOperateActive", &t.SnoPowerOperateActive, d...)
	cb.Do("Unk_359810e", &t.Unk_359810e, d...)
	cb.Do("NCooldown", &t.NCooldown, d...)
	cb.Do("Unk_9c8478e", &t.Unk_9c8478e, d...)
	cb.Do("Unk_d45ed2d", &t.Unk_d45ed2d, d...)
	cb.Do("Unk_f6b20b7", &t.Unk_f6b20b7, d...)
	cb.Do("Unk_54513b8", &t.Unk_54513b8, d...)
	cb.Do("Unk_fd1f378", &t.Unk_fd1f378, d...)
	cb.Do("HGizmoOperateFlavorTextMsgLabel", &t.HGizmoOperateFlavorTextMsgLabel, d...)
	cb.Do("HGizmoOperateDescriptionMsgLabel", &t.HGizmoOperateDescriptionMsgLabel, d...)
	cb.Do("FlGizmoOperateOffset", &t.FlGizmoOperateOffset, d...)
	cb.Do("Unk_ab58cd3", &t.Unk_ab58cd3, d...)
	cb.Do("Unk_91a3966", &t.Unk_91a3966, d...)
	cb.Do("HGizmoChannelingLabel", &t.HGizmoChannelingLabel, d...)
	cb.Do("Unk_4be4371", &t.Unk_4be4371, d...)
	cb.Do("ArCarryables", &t.ArCarryables, d...)
	cb.Do("NMaxCount", &t.NMaxCount, d...)
}

type ActorVOData struct {
	FVOPlaysOnPlayer    DT_INT
	SnoSpeaker          DT_SNO
	SnoConversationList DT_SNO
	Unk_94efee3         DT_SNO_NAME
}

func (t *ActorVOData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.FVOPlaysOnPlayer, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.SnoSpeaker, r, &Options{
		Flags: 1,
		Group: 72,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.SnoConversationList, r, &Options{
		Flags: 1,
		Group: 13,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.Unk_94efee3, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+20, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ActorVOData) Walk(cb WalkCallback, d ...any) {
	cb.Do("FVOPlaysOnPlayer", &t.FVOPlaysOnPlayer, d...)
	cb.Do("SnoSpeaker", &t.SnoSpeaker, d...)
	cb.Do("SnoConversationList", &t.SnoConversationList, d...)
	cb.Do("Unk_94efee3", &t.Unk_94efee3, d...)
}

type IndexedTriangle struct {
	A DT_INT
	B DT_INT
	C DT_INT
}

func (t *IndexedTriangle) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.A, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.B, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.C, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+12, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *IndexedTriangle) Walk(cb WalkCallback, d ...any) {
	cb.Do("A", &t.A, d...)
	cb.Do("B", &t.B, d...)
	cb.Do("C", &t.C, d...)
}

type Type_bb6f3f3b struct {
	// Inherits PowerCallbackBase
	// Inherits PolymorphicBase
	DwType                DT_UINT
	DwPad                 DT_UINT
	SnoTriggerEffectGroup DT_SNO
	BCouldHaveRagdolled   DT_INT
}

func (t *Type_bb6f3f3b) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoTriggerEffectGroup, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.BCouldHaveRagdolled, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_bb6f3f3b) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("SnoTriggerEffectGroup", &t.SnoTriggerEffectGroup, d...)
	cb.Do("BCouldHaveRagdolled", &t.BCouldHaveRagdolled, d...)
}

type AnimSetOrderTagEntry struct {
	THeader     GBIDHeader
	Unk_b604ea1 DT_INT
}

func (t *AnimSetOrderTagEntry) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+260, &t.Unk_b604ea1, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+264, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *AnimSetOrderTagEntry) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("Unk_b604ea1", &t.Unk_b604ea1, d...)
}

type ActiveSubzoneModifierSubcondition struct {
	// Inherits Subcondition
	// Inherits PolymorphicBase
	DwType                 DT_UINT
	BNegate                DT_INT
	DwPad                  DT_UINT
	GbidSubzoneModifierTag DT_GBID
}

func (t *ActiveSubzoneModifierSubcondition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BNegate, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.GbidSubzoneModifierTag, r, &Options{
		Flags: 1,
		Group: 60,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ActiveSubzoneModifierSubcondition) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("BNegate", &t.BNegate, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("GbidSubzoneModifierTag", &t.GbidSubzoneModifierTag, d...)
}

type PowerConditionIsPowerOwner struct {
	// Inherits PowerConditionBase
	// Inherits PolymorphicBase
	DwType            DT_UINT
	BInverse          DT_INT
	DwPad             DT_UINT
	ESubject          DT_ENUM
	Unk_7bd1297       DT_INT
	BSpecificPetTypes DT_INT
	ArPetTypes        DT_VARIABLEARRAY[*DT_GBID]
}

func (t *PowerConditionIsPowerOwner) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BInverse, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ESubject, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.Unk_7bd1297, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.BSpecificPetTypes, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.ArPetTypes, r, &Options{
		Flags: 1,
		Group: 23,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+56, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PowerConditionIsPowerOwner) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("BInverse", &t.BInverse, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("ESubject", &t.ESubject, d...)
	cb.Do("Unk_7bd1297", &t.Unk_7bd1297, d...)
	cb.Do("BSpecificPetTypes", &t.BSpecificPetTypes, d...)
	cb.Do("ArPetTypes", &t.ArPetTypes, d...)
}

type DestroySceneMessage struct {
	THeader  RequiredMessageHeader
	IdSScene DT_SHARED_SERVER_DATA_ID
}

func (t *DestroySceneMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.IdSScene, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *DestroySceneMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("IdSScene", &t.IdSScene, d...)
}

type RunTimeMaterialValue_bcVec4 struct {
	SnoMaterialValue DT_SNO
	Value            DT_VECTOR4D
	Unk_2362b28      DT_INT
}

func (t *RunTimeMaterialValue_bcVec4) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoMaterialValue, r, &Options{Group: 81}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.Value, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.Unk_2362b28, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *RunTimeMaterialValue_bcVec4) Walk(cb WalkCallback, d ...any) {
	cb.Do("SnoMaterialValue", &t.SnoMaterialValue, d...)
	cb.Do("Value", &t.Value, d...)
	cb.Do("Unk_2362b28", &t.Unk_2362b28, d...)
}

type Currencies struct {
	THeader             GBIDHeader
	ECurrencyType       DT_ENUM
	BIsAutoPickup       DT_INT
	BIsCraftingMat      DT_INT
	SzIconLabel         DT_CSTRING[*DT_BYTE]
	GbidCategory        DT_GBID
	ArItems             DT_VARIABLEARRAY[*CurrencyItem]
	SnoTutorialOnPickup DT_SNO
	Unk_1d5d0dd         DT_SNO
}

func (t *Currencies) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+260, &t.ECurrencyType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+264, &t.BIsAutoPickup, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+268, &t.BIsCraftingMat, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+272, &t.SzIconLabel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+288, &t.GbidCategory, r, &Options{
		Flags: 1,
		Group: 58,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+296, &t.ArItems, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+312, &t.SnoTutorialOnPickup, r, &Options{
		Flags: 1,
		Group: 63,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+316, &t.Unk_1d5d0dd, r, &Options{
		Flags: 1,
		Group: 51,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+320, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Currencies) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("ECurrencyType", &t.ECurrencyType, d...)
	cb.Do("BIsAutoPickup", &t.BIsAutoPickup, d...)
	cb.Do("BIsCraftingMat", &t.BIsCraftingMat, d...)
	cb.Do("SzIconLabel", &t.SzIconLabel, d...)
	cb.Do("GbidCategory", &t.GbidCategory, d...)
	cb.Do("ArItems", &t.ArItems, d...)
	cb.Do("SnoTutorialOnPickup", &t.SnoTutorialOnPickup, d...)
	cb.Do("Unk_1d5d0dd", &t.Unk_1d5d0dd, d...)
}

type WallDeformData struct {
	ArPieces         DT_VARIABLEARRAY[*WallDeformPiece]
	ArStartCapPieces DT_VARIABLEARRAY[*WallDeformPiece]
	ArEndCapPieces   DT_VARIABLEARRAY[*WallDeformPiece]
	Unk_755f012      DT_RANGE[*DT_FLOAT]
	EPieceSelectMode DT_ENUM
}

func (t *WallDeformData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.ArPieces, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.ArStartCapPieces, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.ArEndCapPieces, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.Unk_755f012, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.EPieceSelectMode, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+64, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *WallDeformData) Walk(cb WalkCallback, d ...any) {
	cb.Do("ArPieces", &t.ArPieces, d...)
	cb.Do("ArStartCapPieces", &t.ArStartCapPieces, d...)
	cb.Do("ArEndCapPieces", &t.ArEndCapPieces, d...)
	cb.Do("Unk_755f012", &t.Unk_755f012, d...)
	cb.Do("EPieceSelectMode", &t.EPieceSelectMode, d...)
}

type NSlice struct {
	// Inherits WindowPiecesBase
	// Inherits PolymorphicBase
	DwType       DT_UINT
	DwPad        DT_UINT
	FlImageScale DT_FLOAT
	NPadding     DT_UINT
	HSourceImage DT_UINT
	ESliceStyle  DT_ENUM
	Unk_da48774  DT_VARIABLEARRAY[*DT_UINT]
	Unk_c69f784  DT_VARIABLEARRAY[*DT_UINT]
	FTileCenter  DT_INT
	Unk_d661bef  DT_INT
	Unk_1ec53df  DT_INT
}

func (t *NSlice) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.FlImageScale, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.NPadding, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.HSourceImage, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.ESliceStyle, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.Unk_da48774, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.Unk_c69f784, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.FTileCenter, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.Unk_d661bef, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_1ec53df, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+80, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *NSlice) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("FlImageScale", &t.FlImageScale, d...)
	cb.Do("NPadding", &t.NPadding, d...)
	cb.Do("HSourceImage", &t.HSourceImage, d...)
	cb.Do("ESliceStyle", &t.ESliceStyle, d...)
	cb.Do("Unk_da48774", &t.Unk_da48774, d...)
	cb.Do("Unk_c69f784", &t.Unk_c69f784, d...)
	cb.Do("FTileCenter", &t.FTileCenter, d...)
	cb.Do("Unk_d661bef", &t.Unk_d661bef, d...)
	cb.Do("Unk_1ec53df", &t.Unk_1ec53df, d...)
}

type TriggerEventObjectKeyFrame struct {
	// Inherits TriggerEvent
	// Inherits PolymorphicBase
	DwType          DT_UINT
	DwPad           DT_UINT
	TConditions     TriggerConditions
	FGenerated      DT_INT
	Unk_6cba752     DT_INT
	DwParentActorID DT_UINT
	Unk_85269a4     DT_INT
	DwObjectID      DT_UINT
	ArKeys          DT_POLYMORPHIC_VARIABLEARRAY[*DT_INT64]
	Unk_9717a7e     DT_FLOAT
}

func (t *TriggerEventObjectKeyFrame) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.FGenerated, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_6cba752, r, &Options{Flags: 16}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.DwParentActorID, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.Unk_85269a4, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.DwObjectID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.ArKeys, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.Unk_9717a7e, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+120, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TriggerEventObjectKeyFrame) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("TConditions", &t.TConditions, d...)
	cb.Do("FGenerated", &t.FGenerated, d...)
	cb.Do("Unk_6cba752", &t.Unk_6cba752, d...)
	cb.Do("DwParentActorID", &t.DwParentActorID, d...)
	cb.Do("Unk_85269a4", &t.Unk_85269a4, d...)
	cb.Do("DwObjectID", &t.DwObjectID, d...)
	cb.Do("ArKeys", &t.ArKeys, d...)
	cb.Do("Unk_9717a7e", &t.Unk_9717a7e, d...)
}

type BuffCallbackBase struct {
	// Inherits PolymorphicBase
	DwType                DT_UINT
	DwPad                 DT_UINT
	SnoTriggerEffectGroup DT_SNO
	ArConditions          DT_POLYMORPHIC_VARIABLEARRAY[*DT_INT64]
}

func (t *BuffCallbackBase) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoTriggerEffectGroup, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ArConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *BuffCallbackBase) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("SnoTriggerEffectGroup", &t.SnoTriggerEffectGroup, d...)
	cb.Do("ArConditions", &t.ArConditions, d...)
}

type TransmogMultipleSlotsMessage struct {
	THeader     RequiredMessageHeader
	ArTransmogs DT_FIXEDARRAY[*TransmogSlotData]
}

func (t *TransmogMultipleSlotsMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.ArTransmogs, r, &Options{
		ArrayLength: 16,
		Flags:       8,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+276, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TransmogMultipleSlotsMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("ArTransmogs", &t.ArTransmogs, d...)
}

type PreloadSpawnWorldDataMessage struct {
	THeader       RequiredMessageHeader
	IdSWorld      DT_SHARED_SERVER_DATA_ID
	Unk_f4f03a5   DT_INT
	ArPreloadData DT_FIXEDARRAY[*PreloadSpawnMarkerData]
}

func (t *PreloadSpawnWorldDataMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.IdSWorld, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_f4f03a5, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.ArPreloadData, r, &Options{
		ArrayLength: 75,
		Flags:       8,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+1232, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PreloadSpawnWorldDataMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("IdSWorld", &t.IdSWorld, d...)
	cb.Do("Unk_f4f03a5", &t.Unk_f4f03a5, d...)
	cb.Do("ArPreloadData", &t.ArPreloadData, d...)
}

type QuestFollowerPhaseInfo struct {
	DwPhase                  DT_UINT
	TSpawnBehavior           QuestFollowerSpawnBehavior
	SnoPlayerAttachCondition DT_SNO
	ArLevelAreas             DT_VARIABLEARRAY[*DT_SNO]
}

func (t *QuestFollowerPhaseInfo) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.DwPhase, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.TSpawnBehavior, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.SnoPlayerAttachCondition, r, &Options{
		Flags: 1,
		Group: 51,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.ArLevelAreas, r, &Options{
		Flags: 513,
		Group: 22,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+56, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *QuestFollowerPhaseInfo) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwPhase", &t.DwPhase, d...)
	cb.Do("TSpawnBehavior", &t.TSpawnBehavior, d...)
	cb.Do("SnoPlayerAttachCondition", &t.SnoPlayerAttachCondition, d...)
	cb.Do("ArLevelAreas", &t.ArLevelAreas, d...)
}

type AnimTreeLeaf struct {
	DwID             DT_UINT
	ENodeType        DT_ENUM
	SnoAnim          DT_SNO
	SnoPowerAnimKey  DT_SNO
	FlPoseFrame      DT_FLOAT
	FlPlaySpeed      DT_FLOAT
	NSyncGroupIndex  DT_INT
	BIsDisabled      DT_INT
	Unk_4088987      DT_INT
	EScaleMethod     DT_ENUM
	EUpdateMode      DT_ENUM
	EBoneWeightSet   DT_ENUM
	EAnimLayer       DT_ENUM
	EParentSyncLayer DT_ENUM
}

func (t *AnimTreeLeaf) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.DwID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.ENodeType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.SnoAnim, r, &Options{
		Flags: 1,
		Group: 6,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.SnoPowerAnimKey, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.FlPoseFrame, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.FlPlaySpeed, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.NSyncGroupIndex, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.BIsDisabled, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.Unk_4088987, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.EScaleMethod, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.EUpdateMode, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.EBoneWeightSet, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.EAnimLayer, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.EParentSyncLayer, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+56, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *AnimTreeLeaf) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwID", &t.DwID, d...)
	cb.Do("ENodeType", &t.ENodeType, d...)
	cb.Do("SnoAnim", &t.SnoAnim, d...)
	cb.Do("SnoPowerAnimKey", &t.SnoPowerAnimKey, d...)
	cb.Do("FlPoseFrame", &t.FlPoseFrame, d...)
	cb.Do("FlPlaySpeed", &t.FlPlaySpeed, d...)
	cb.Do("NSyncGroupIndex", &t.NSyncGroupIndex, d...)
	cb.Do("BIsDisabled", &t.BIsDisabled, d...)
	cb.Do("Unk_4088987", &t.Unk_4088987, d...)
	cb.Do("EScaleMethod", &t.EScaleMethod, d...)
	cb.Do("EUpdateMode", &t.EUpdateMode, d...)
	cb.Do("EBoneWeightSet", &t.EBoneWeightSet, d...)
	cb.Do("EAnimLayer", &t.EAnimLayer, d...)
	cb.Do("EParentSyncLayer", &t.EParentSyncLayer, d...)
}

type AnimTreeNode struct {
	// Inherits AnimTreeNodeBase
	// Inherits PolymorphicBase
	DwType               DT_UINT
	DwPad                DT_UINT
	DwID                 DT_UINT
	ENodeType            DT_ENUM
	EAnimLayer           DT_ENUM
	PtChildren           DT_VARIABLEARRAY[*AnimTreeNodeChild]
	EBlendParam          DT_ENUM
	ESecondaryBlendParam DT_ENUM
	Pt2DBlendTriangles   DT_VARIABLEARRAY[*AnimTreeBlendTriangle]
	TMinBlend            DT_VECTOR2D
	TMaxBlend            DT_VECTOR2D
	TBlendIn             BlendSettings
	TBlendOut            BlendSettings
	NDefaultChildIndex   DT_INT
	NSyncGroupIndex      DT_INT
}

func (t *AnimTreeNode) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.DwID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.ENodeType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.EAnimLayer, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.PtChildren, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.EBlendParam, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.ESecondaryBlendParam, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.Pt2DBlendTriangles, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.TMinBlend, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.TMaxBlend, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.TBlendIn, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.TBlendOut, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+104, &t.NDefaultChildIndex, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+108, &t.NSyncGroupIndex, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+112, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *AnimTreeNode) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("DwID", &t.DwID, d...)
	cb.Do("ENodeType", &t.ENodeType, d...)
	cb.Do("EAnimLayer", &t.EAnimLayer, d...)
	cb.Do("PtChildren", &t.PtChildren, d...)
	cb.Do("EBlendParam", &t.EBlendParam, d...)
	cb.Do("ESecondaryBlendParam", &t.ESecondaryBlendParam, d...)
	cb.Do("Pt2DBlendTriangles", &t.Pt2DBlendTriangles, d...)
	cb.Do("TMinBlend", &t.TMinBlend, d...)
	cb.Do("TMaxBlend", &t.TMaxBlend, d...)
	cb.Do("TBlendIn", &t.TBlendIn, d...)
	cb.Do("TBlendOut", &t.TBlendOut, d...)
	cb.Do("NDefaultChildIndex", &t.NDefaultChildIndex, d...)
	cb.Do("NSyncGroupIndex", &t.NSyncGroupIndex, d...)
}

type MaterialEnum struct {
	DwValue    DT_UINT
	SzEnumName DT_CSTRING[*DT_BYTE]
}

func (t *MaterialEnum) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.DwValue, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.SzEnumName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *MaterialEnum) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwValue", &t.DwValue, d...)
	cb.Do("SzEnumName", &t.SzEnumName, d...)
}

type QuestChainSubcondition struct {
	// Inherits Subcondition
	// Inherits PolymorphicBase
	DwType        DT_UINT
	BNegate       DT_INT
	DwPad         DT_UINT
	SnoQuestChain DT_SNO
	EState        DT_ENUM
}

func (t *QuestChainSubcondition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BNegate, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SnoQuestChain, r, &Options{
		Flags: 513,
		Group: 96,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.EState, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *QuestChainSubcondition) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("BNegate", &t.BNegate, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("SnoQuestChain", &t.SnoQuestChain, d...)
	cb.Do("EState", &t.EState, d...)
}

type ScriptMessageMapFilter struct {
	TKey           DT_UINT
	EVariableType  DT_ENUM
	PMessageFilter DT_POLYMORPHIC_VARIABLEARRAY[*ScriptEventParamBase]
}

func (t *ScriptMessageMapFilter) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.TKey, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.EVariableType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.PMessageFilter, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ScriptMessageMapFilter) Walk(cb WalkCallback, d ...any) {
	cb.Do("TKey", &t.TKey, d...)
	cb.Do("EVariableType", &t.EVariableType, d...)
	cb.Do("PMessageFilter", &t.PMessageFilter, d...)
}

type AnimationClothOverride struct {
	SnoAnimation     DT_SNO
	SnoClothOverride DT_SNO
	FlBlendTime      DT_FLOAT
}

func (t *AnimationClothOverride) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoAnimation, r, &Options{
		Flags: 513,
		Group: 6,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.SnoClothOverride, r, &Options{
		Flags: 1,
		Group: 11,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.FlBlendTime, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+12, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *AnimationClothOverride) Walk(cb WalkCallback, d ...any) {
	cb.Do("SnoAnimation", &t.SnoAnimation, d...)
	cb.Do("SnoClothOverride", &t.SnoClothOverride, d...)
	cb.Do("FlBlendTime", &t.FlBlendTime, d...)
}

type SimpleResponse struct {
	THeader RequiredResponseMessageHeader
}

func (t *SimpleResponse) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *SimpleResponse) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
}

type ReputationClaimRewardMessage struct {
	THeader           RequiredMessageHeader
	SnoReputation     DT_SNO
	DwReputationLevel DT_UINT
	DwRewardIndex     DT_UINT
}

func (t *ReputationClaimRewardMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoReputation, r, &Options{
		Flags: 1,
		Group: 105,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwReputationLevel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.DwRewardIndex, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+28, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ReputationClaimRewardMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("SnoReputation", &t.SnoReputation, d...)
	cb.Do("DwReputationLevel", &t.DwReputationLevel, d...)
	cb.Do("DwRewardIndex", &t.DwRewardIndex, d...)
}

type HirelingInfoUpdateMessage struct {
	THeader               RequiredMessageHeader
	EClass                DT_INT
	FDead                 DT_INT
	GbidName              DT_GBID
	DwPlayerGameAccountId DT_UINT
}

func (t *HirelingInfoUpdateMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.EClass, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.FDead, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.GbidName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.DwPlayerGameAccountId, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *HirelingInfoUpdateMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("EClass", &t.EClass, d...)
	cb.Do("FDead", &t.FDead, d...)
	cb.Do("GbidName", &t.GbidName, d...)
	cb.Do("DwPlayerGameAccountId", &t.DwPlayerGameAccountId, d...)
}

type ConversationCannedNode struct {
	// Inherits ConversationTreeNode
	// Inherits PolymorphicBase
	DwType                DT_UINT
	DwPad                 DT_UINT
	DwNodeID              DT_UINT
	DwNextNodeID          DT_UINT
	DwParentNodeID        DT_UINT
	PtNextNode            DT_INT64
	DwFlags               DT_UINT
	SzComment             DT_CSTRING[*DT_BYTE]
	SnoCannedConversation DT_SNO
	DwCannedNodeID        DT_UINT
}

func (t *ConversationCannedNode) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.DwNodeID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwNextNodeID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.DwParentNodeID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.PtNextNode, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.DwFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.SzComment, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.SnoCannedConversation, r, &Options{
		Flags: 1,
		Group: 12,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.DwCannedNodeID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+72, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ConversationCannedNode) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("DwNodeID", &t.DwNodeID, d...)
	cb.Do("DwNextNodeID", &t.DwNextNodeID, d...)
	cb.Do("DwParentNodeID", &t.DwParentNodeID, d...)
	cb.Do("PtNextNode", &t.PtNextNode, d...)
	cb.Do("DwFlags", &t.DwFlags, d...)
	cb.Do("SzComment", &t.SzComment, d...)
	cb.Do("SnoCannedConversation", &t.SnoCannedConversation, d...)
	cb.Do("DwCannedNodeID", &t.DwCannedNodeID, d...)
}

type ActorVisualInventoryData struct {
	FEnableOverride DT_INT
	SnoActor        DT_FIXEDARRAY[*DT_SNO]
	SnoActor2       DT_FIXEDARRAY[*DT_SNO]
}

func (t *ActorVisualInventoryData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.FEnableOverride, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.SnoActor, r, &Options{
		ArrayLength: 10,
		Flags:       1,
		Group:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.SnoActor2, r, &Options{
		ArrayLength: 10,
		Flags:       1,
		Group:       1,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+84, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ActorVisualInventoryData) Walk(cb WalkCallback, d ...any) {
	cb.Do("FEnableOverride", &t.FEnableOverride, d...)
	cb.Do("SnoActor", &t.SnoActor, d...)
	cb.Do("SnoActor2", &t.SnoActor2, d...)
}

type CampDiscoveredSubcondition struct {
	// Inherits Subcondition
	// Inherits PolymorphicBase
	DwType            DT_UINT
	BNegate           DT_INT
	DwPad             DT_UINT
	SnoCampQuestChain DT_SNO
}

func (t *CampDiscoveredSubcondition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BNegate, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SnoCampQuestChain, r, &Options{
		Flags: 1,
		Group: 96,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *CampDiscoveredSubcondition) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("BNegate", &t.BNegate, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("SnoCampQuestChain", &t.SnoCampQuestChain, d...)
}

type LabelGBID_Table struct {
	// Inherits GameBalanceTable
	// Inherits PolymorphicBase
	DwType   DT_UINT
	DwPad    DT_UINT
	TEntries DT_VARIABLEARRAY[*LabelGBID]
}

func (t *LabelGBID_Table) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TEntries, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *LabelGBID_Table) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("TEntries", &t.TEntries, d...)
}

type ByteDataMessage struct {
	THeader RequiredMessageHeader
	BData   DT_BYTE
}

func (t *ByteDataMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+20, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ByteDataMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("BData", &t.BData, d...)
}

type CampaignCallbackSubcondition struct {
	// Inherits QuestSubconditionBase
	// Inherits Subcondition
	// Inherits PolymorphicBase
	DwType       DT_UINT
	BNegate      DT_INT
	SnoQuest     DT_SNO
	DwPad        DT_UINT
	NStepUID     DT_INT
	NCallbackUID DT_UINT
	EComp        DT_ENUM
	NCount       DT_UINT
}

func (t *CampaignCallbackSubcondition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BNegate, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SnoQuest, r, &Options{
		Flags: 513,
		Group: 31,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.NStepUID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.NCallbackUID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.EComp, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.NCount, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *CampaignCallbackSubcondition) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("BNegate", &t.BNegate, d...)
	cb.Do("SnoQuest", &t.SnoQuest, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("NStepUID", &t.NStepUID, d...)
	cb.Do("NCallbackUID", &t.NCallbackUID, d...)
	cb.Do("EComp", &t.EComp, d...)
	cb.Do("NCount", &t.NCount, d...)
}

type UIStoryboard2Style struct {
	// Inherits UIControlStyle
	// Inherits PolymorphicBase
	DwType                    DT_UINT
	DwPad                     DT_UINT
	HParentStyle              UIControlHandle
	Unk_441f783               DT_INT64
	M_eHasModifiedPowerTagMap DT_TAGMAP[*DT_ENUM]
	SnoStoryboard             DT_SNO
	ELoadBehavior             DT_ENUM
	EActivateBehavior         DT_ENUM
	EFinishBehavior           DT_ENUM
	Unk_92765af               DT_TAGMAP[*DT_ENUM]
}

func (t *UIStoryboard2Style) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.HParentStyle, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_441f783, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.M_eHasModifiedPowerTagMap, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.SnoStoryboard, r, &Options{
		Flags: 1,
		Group: 90,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.ELoadBehavior, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.EActivateBehavior, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+60, &t.EFinishBehavior, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.Unk_92765af, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+80, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *UIStoryboard2Style) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("HParentStyle", &t.HParentStyle, d...)
	cb.Do("Unk_441f783", &t.Unk_441f783, d...)
	cb.Do("M_eHasModifiedPowerTagMap", &t.M_eHasModifiedPowerTagMap, d...)
	cb.Do("SnoStoryboard", &t.SnoStoryboard, d...)
	cb.Do("ELoadBehavior", &t.ELoadBehavior, d...)
	cb.Do("EActivateBehavior", &t.EActivateBehavior, d...)
	cb.Do("EFinishBehavior", &t.EFinishBehavior, d...)
	cb.Do("Unk_92765af", &t.Unk_92765af, d...)
}

type AttachCarryableToPlayerMessage struct {
	THeader              RequiredMessageHeader
	AnnPlayer            DT_ACD_NETWORK_NAME
	SnoCarryable         DT_SNO
	DwHardPointPlayer    DT_UINT
	DwHardPointCarryable DT_UINT
}

func (t *AttachCarryableToPlayerMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.AnnPlayer, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SnoCarryable, r, &Options{
		Flags: 1,
		Group: 1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.DwHardPointPlayer, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.DwHardPointCarryable, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+36, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *AttachCarryableToPlayerMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("AnnPlayer", &t.AnnPlayer, d...)
	cb.Do("SnoCarryable", &t.SnoCarryable, d...)
	cb.Do("DwHardPointPlayer", &t.DwHardPointPlayer, d...)
	cb.Do("DwHardPointCarryable", &t.DwHardPointCarryable, d...)
}

type CriteriaEvent struct {
	// Inherits PolymorphicBase
	DwType               DT_UINT
	EId                  DT_ENUM
	ArModifier           DT_VARIABLEARRAY[*CriteriaModifier]
	Snoname              DT_SNO_NAME
	EGizmoType           DT_ENUM
	EIQL                 DT_ENUM
	ESlot                DT_ENUM
	EHealType            DT_ENUM
	ECurrencyType        DT_ENUM
	EZone                DT_ENUM
	UVal                 DT_UINT
	GbidAchievementEvent DT_GBID
	UOperand             DT_INT64
	BUsesOperand         DT_INT
	DwPad                DT_UINT
}

func (t *CriteriaEvent) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.EId, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ArModifier, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.Snoname, r, &Options{Flags: 513}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.EGizmoType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.EIQL, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.ESlot, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+60, &t.EHealType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.ECurrencyType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.EZone, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.UVal, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.GbidAchievementEvent, r, &Options{
		Flags: 1,
		Group: 62,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.UOperand, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.BUsesOperand, r, &Options{Flags: 16}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+96, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *CriteriaEvent) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("EId", &t.EId, d...)
	cb.Do("ArModifier", &t.ArModifier, d...)
	cb.Do("Snoname", &t.Snoname, d...)
	cb.Do("EGizmoType", &t.EGizmoType, d...)
	cb.Do("EIQL", &t.EIQL, d...)
	cb.Do("ESlot", &t.ESlot, d...)
	cb.Do("EHealType", &t.EHealType, d...)
	cb.Do("ECurrencyType", &t.ECurrencyType, d...)
	cb.Do("EZone", &t.EZone, d...)
	cb.Do("UVal", &t.UVal, d...)
	cb.Do("GbidAchievementEvent", &t.GbidAchievementEvent, d...)
	cb.Do("UOperand", &t.UOperand, d...)
	cb.Do("BUsesOperand", &t.BUsesOperand, d...)
	cb.Do("DwPad", &t.DwPad, d...)
}

type IKWindow struct {
	Unk_fa00882 DT_RANGE[*DT_UINT]
}

func (t *IKWindow) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Unk_fa00882, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *IKWindow) Walk(cb WalkCallback, d ...any) {
	cb.Do("Unk_fa00882", &t.Unk_fa00882, d...)
}

type RandomAmbientSoundParams struct {
	SnoSound     DT_SNO
	TRadiusRange DT_RANGE[*DT_FLOAT]
	THeightRange DT_RANGE[*DT_FLOAT]
	TPeriodRange DT_RANGE[*DT_FLOAT]
	ETimeOfDay   DT_ENUM
}

func (t *RandomAmbientSoundParams) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoSound, r, &Options{
		Flags: 1,
		Group: 40,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.TRadiusRange, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.THeightRange, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.TPeriodRange, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.ETimeOfDay, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *RandomAmbientSoundParams) Walk(cb WalkCallback, d ...any) {
	cb.Do("SnoSound", &t.SnoSound, d...)
	cb.Do("TRadiusRange", &t.TRadiusRange, d...)
	cb.Do("THeightRange", &t.THeightRange, d...)
	cb.Do("TPeriodRange", &t.TPeriodRange, d...)
	cb.Do("ETimeOfDay", &t.ETimeOfDay, d...)
}

type ChargeableGizmoData struct {
	// Inherits NamedGizmoData
	// Inherits ActorGizmoData
	// Inherits PolymorphicBase
	DwType                           DT_UINT
	DwPad                            DT_UINT
	FDisableNonFriendlyOperation     DT_INT
	FWalkToCenter                    DT_INT
	FGizmoStartsDisabled             DT_INT
	FUseStringListName               DT_INT
	FForceMinimapIcon                DT_INT
	FlOperationRadius                DT_FLOAT
	Unk_d0b1df5                      DT_FLOAT
	FlGizmoUseTime                   DT_FLOAT
	SnoChannelingEffect              DT_SNO
	Unk_2767229                      DT_INT
	FGizmoShowProgressBar            DT_INT
	Unk_6d9ebe1                      DT_INT
	Unk_5456245                      DT_INT
	Unk_af5815a                      DT_INT
	SnoOnClickEffect                 DT_SNO
	SnoPickedUpEffect                DT_SNO
	SnoDropOnGroundEffect            DT_SNO
	TConditionData                   GizmoConditionData
	SnoPowerOperator                 DT_SNO
	SnoPowerOperate                  DT_SNO
	SnoPowerOperatorActive           DT_SNO
	SnoPowerOperateActive            DT_SNO
	Unk_359810e                      DT_INT
	NCooldown                        DT_UINT
	Unk_9c8478e                      DT_UINT
	Unk_d45ed2d                      DT_INT
	Unk_f6b20b7                      DT_INT
	Unk_54513b8                      DT_INT
	Unk_fd1f378                      DT_UINT
	HGizmoOperateFlavorTextMsgLabel  DT_UINT
	HGizmoOperateDescriptionMsgLabel DT_UINT
	FlGizmoOperateOffset             DT_FLOAT
	Unk_ab58cd3                      DT_ENUM
	Unk_91a3966                      DT_UINT
	HGizmoChannelingLabel            DT_UINT
	Unk_4be4371                      DT_INT
	Unk_3cb2278                      DT_FLOAT
}

func (t *ChargeableGizmoData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.FDisableNonFriendlyOperation, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.FWalkToCenter, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.FGizmoStartsDisabled, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.FUseStringListName, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.FForceMinimapIcon, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.FlOperationRadius, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.Unk_d0b1df5, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.FlGizmoUseTime, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.SnoChannelingEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.Unk_2767229, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.FGizmoShowProgressBar, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+60, &t.Unk_6d9ebe1, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.Unk_5456245, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.Unk_af5815a, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.SnoOnClickEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.SnoPickedUpEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.SnoDropOnGroundEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.TConditionData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.SnoPowerOperator, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.SnoPowerOperate, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.SnoPowerOperatorActive, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+100, &t.SnoPowerOperateActive, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+104, &t.Unk_359810e, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+108, &t.NCooldown, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.Unk_9c8478e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+116, &t.Unk_d45ed2d, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.Unk_f6b20b7, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+124, &t.Unk_54513b8, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.Unk_fd1f378, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+132, &t.HGizmoOperateFlavorTextMsgLabel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+136, &t.HGizmoOperateDescriptionMsgLabel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+140, &t.FlGizmoOperateOffset, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+144, &t.Unk_ab58cd3, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+148, &t.Unk_91a3966, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+152, &t.HGizmoChannelingLabel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+156, &t.Unk_4be4371, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+160, &t.Unk_3cb2278, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+168, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ChargeableGizmoData) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("FDisableNonFriendlyOperation", &t.FDisableNonFriendlyOperation, d...)
	cb.Do("FWalkToCenter", &t.FWalkToCenter, d...)
	cb.Do("FGizmoStartsDisabled", &t.FGizmoStartsDisabled, d...)
	cb.Do("FUseStringListName", &t.FUseStringListName, d...)
	cb.Do("FForceMinimapIcon", &t.FForceMinimapIcon, d...)
	cb.Do("FlOperationRadius", &t.FlOperationRadius, d...)
	cb.Do("Unk_d0b1df5", &t.Unk_d0b1df5, d...)
	cb.Do("FlGizmoUseTime", &t.FlGizmoUseTime, d...)
	cb.Do("SnoChannelingEffect", &t.SnoChannelingEffect, d...)
	cb.Do("Unk_2767229", &t.Unk_2767229, d...)
	cb.Do("FGizmoShowProgressBar", &t.FGizmoShowProgressBar, d...)
	cb.Do("Unk_6d9ebe1", &t.Unk_6d9ebe1, d...)
	cb.Do("Unk_5456245", &t.Unk_5456245, d...)
	cb.Do("Unk_af5815a", &t.Unk_af5815a, d...)
	cb.Do("SnoOnClickEffect", &t.SnoOnClickEffect, d...)
	cb.Do("SnoPickedUpEffect", &t.SnoPickedUpEffect, d...)
	cb.Do("SnoDropOnGroundEffect", &t.SnoDropOnGroundEffect, d...)
	cb.Do("TConditionData", &t.TConditionData, d...)
	cb.Do("SnoPowerOperator", &t.SnoPowerOperator, d...)
	cb.Do("SnoPowerOperate", &t.SnoPowerOperate, d...)
	cb.Do("SnoPowerOperatorActive", &t.SnoPowerOperatorActive, d...)
	cb.Do("SnoPowerOperateActive", &t.SnoPowerOperateActive, d...)
	cb.Do("Unk_359810e", &t.Unk_359810e, d...)
	cb.Do("NCooldown", &t.NCooldown, d...)
	cb.Do("Unk_9c8478e", &t.Unk_9c8478e, d...)
	cb.Do("Unk_d45ed2d", &t.Unk_d45ed2d, d...)
	cb.Do("Unk_f6b20b7", &t.Unk_f6b20b7, d...)
	cb.Do("Unk_54513b8", &t.Unk_54513b8, d...)
	cb.Do("Unk_fd1f378", &t.Unk_fd1f378, d...)
	cb.Do("HGizmoOperateFlavorTextMsgLabel", &t.HGizmoOperateFlavorTextMsgLabel, d...)
	cb.Do("HGizmoOperateDescriptionMsgLabel", &t.HGizmoOperateDescriptionMsgLabel, d...)
	cb.Do("FlGizmoOperateOffset", &t.FlGizmoOperateOffset, d...)
	cb.Do("Unk_ab58cd3", &t.Unk_ab58cd3, d...)
	cb.Do("Unk_91a3966", &t.Unk_91a3966, d...)
	cb.Do("HGizmoChannelingLabel", &t.HGizmoChannelingLabel, d...)
	cb.Do("Unk_4be4371", &t.Unk_4be4371, d...)
	cb.Do("Unk_3cb2278", &t.Unk_3cb2278, d...)
}

type SwitchBehaviorGizmoData struct {
	ESwitchBehavior DT_ENUM
}

func (t *SwitchBehaviorGizmoData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.ESwitchBehavior, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+4, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *SwitchBehaviorGizmoData) Walk(cb WalkCallback, d ...any) {
	cb.Do("ESwitchBehavior", &t.ESwitchBehavior, d...)
}

type ServerSimulationTimeMessage struct {
	THeader     RequiredMessageHeader
	FlStart     DT_FLOAT
	FlDuration  DT_FLOAT
	Unk_e5c87c4 DT_FLOAT
}

func (t *ServerSimulationTimeMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.FlStart, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.FlDuration, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_e5c87c4, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+28, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ServerSimulationTimeMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("FlStart", &t.FlStart, d...)
	cb.Do("FlDuration", &t.FlDuration, d...)
	cb.Do("Unk_e5c87c4", &t.Unk_e5c87c4, d...)
}

type WorldTierChangeMessage struct {
	THeader    RequiredMessageHeader
	EWorldTier DT_INT
}

func (t *WorldTierChangeMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.EWorldTier, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+20, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *WorldTierChangeMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("EWorldTier", &t.EWorldTier, d...)
}

type ZoneMapSecretCondition struct {
	SnoCampaignCondition DT_SNO
	Unk_2cfa560          DT_INT
}

func (t *ZoneMapSecretCondition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoCampaignCondition, r, &Options{
		Flags: 513,
		Group: 51,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.Unk_2cfa560, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ZoneMapSecretCondition) Walk(cb WalkCallback, d ...any) {
	cb.Do("SnoCampaignCondition", &t.SnoCampaignCondition, d...)
	cb.Do("Unk_2cfa560", &t.Unk_2cfa560, d...)
}

type MarkerHeightFieldIBInfo struct {
	NIndexOffset DT_INT
	NIndexCount  DT_INT
}

func (t *MarkerHeightFieldIBInfo) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.NIndexOffset, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.NIndexCount, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *MarkerHeightFieldIBInfo) Walk(cb WalkCallback, d ...any) {
	cb.Do("NIndexOffset", &t.NIndexOffset, d...)
	cb.Do("NIndexCount", &t.NIndexCount, d...)
}

type Octree struct {
	NMaxNodes       DT_INT
	NMaxLeaves      DT_INT
	NMaxPrimitives  DT_INT
	NNodeCount      DT_INT
	NLeafCount      DT_INT
	NPrimitiveCount DT_INT
	TRootCube       OctreeCube
	PtNodes         DT_VARIABLEARRAY[*OctreeNode]
	PtLeaves        DT_VARIABLEARRAY[*OctreeLeaf]
	PtPrimitives    DT_VARIABLEARRAY[*OctreePrimitive]
}

func (t *Octree) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.NMaxNodes, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.NMaxLeaves, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.NMaxPrimitives, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.NNodeCount, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.NLeafCount, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.NPrimitiveCount, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.TRootCube, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.PtNodes, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.PtLeaves, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.PtPrimitives, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+88, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Octree) Walk(cb WalkCallback, d ...any) {
	cb.Do("NMaxNodes", &t.NMaxNodes, d...)
	cb.Do("NMaxLeaves", &t.NMaxLeaves, d...)
	cb.Do("NMaxPrimitives", &t.NMaxPrimitives, d...)
	cb.Do("NNodeCount", &t.NNodeCount, d...)
	cb.Do("NLeafCount", &t.NLeafCount, d...)
	cb.Do("NPrimitiveCount", &t.NPrimitiveCount, d...)
	cb.Do("TRootCube", &t.TRootCube, d...)
	cb.Do("PtNodes", &t.PtNodes, d...)
	cb.Do("PtLeaves", &t.PtLeaves, d...)
	cb.Do("PtPrimitives", &t.PtPrimitives, d...)
}

type AttributeSpecifier struct {
	EAttribute         DT_ENUM
	NParam             DT_INT
	SzAttributeFormula DT_STRING_FORMULA
	GbidFormula        DT_GBID
	Unk_dffdf28        DT_STRING_FORMULA
}

func (t *AttributeSpecifier) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.EAttribute, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.NParam, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.SzAttributeFormula, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.GbidFormula, r, &Options{
		Flags: 1,
		Group: 22,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.Unk_dffdf28, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+80, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *AttributeSpecifier) Walk(cb WalkCallback, d ...any) {
	cb.Do("EAttribute", &t.EAttribute, d...)
	cb.Do("NParam", &t.NParam, d...)
	cb.Do("SzAttributeFormula", &t.SzAttributeFormula, d...)
	cb.Do("GbidFormula", &t.GbidFormula, d...)
	cb.Do("Unk_dffdf28", &t.Unk_dffdf28, d...)
}

type PlayEffectMessage struct {
	THeader            RequiredMessageHeader
	Ann                DT_ACD_NETWORK_NAME
	EEffectType        DT_ENUM
	NEffectParameter   DT_OPTIONAL[*DT_INT]
	OnHitSounds        DT_OPTIONAL[*OnHitSounds]
	AnnPlayer          DT_OPTIONAL[*DT_ACD_NETWORK_NAME]
	AnnAttacker        DT_OPTIONAL[*DT_ACD_NETWORK_NAME]
	FlSpeedScale       DT_OPTIONAL[*DT_FLOAT]
	DwEffectFlags      DT_OPTIONAL[*DT_UINT]
	SnoPowerSource     DT_OPTIONAL[*DT_SNO]
	THardpointOverride DT_OPTIONAL[*HardpointInfo]
}

func (t *PlayEffectMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Ann, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.EEffectType, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.NEffectParameter, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.OnHitSounds, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.AnnPlayer, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.AnnAttacker, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.FlSpeedScale, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.DwEffectFlags, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.SnoPowerSource, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+100, &t.THardpointOverride, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+112, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PlayEffectMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("Ann", &t.Ann, d...)
	cb.Do("EEffectType", &t.EEffectType, d...)
	cb.Do("NEffectParameter", &t.NEffectParameter, d...)
	cb.Do("OnHitSounds", &t.OnHitSounds, d...)
	cb.Do("AnnPlayer", &t.AnnPlayer, d...)
	cb.Do("AnnAttacker", &t.AnnAttacker, d...)
	cb.Do("FlSpeedScale", &t.FlSpeedScale, d...)
	cb.Do("DwEffectFlags", &t.DwEffectFlags, d...)
	cb.Do("SnoPowerSource", &t.SnoPowerSource, d...)
	cb.Do("THardpointOverride", &t.THardpointOverride, d...)
}

type ConversationLineNode struct {
	// Inherits ConversationTreeNode
	// Inherits PolymorphicBase
	DwType                DT_UINT
	DwPad                 DT_UINT
	DwNodeID              DT_UINT
	DwNextNodeID          DT_UINT
	DwParentNodeID        DT_UINT
	PtNextNode            DT_INT64
	DwFlags               DT_UINT
	SzComment             DT_CSTRING[*DT_BYTE]
	SnoSpeaker            DT_SNO
	EGender               DT_ENUM
	EPlayerClass          DT_ENUM
	TDisplayTimes         DT_FIXEDARRAY[*ConvLocaleDisplayTimes]
	SnoSoundOverride      DT_SNO
	FlSoundEffectDuration DT_FLOAT
	Unk_357a6f3           DT_INT
}

func (t *ConversationLineNode) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.DwNodeID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwNextNodeID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.DwParentNodeID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.PtNextNode, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.DwFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.SzComment, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.SnoSpeaker, r, &Options{
		Flags: 1,
		Group: 72,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.EGender, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.EPlayerClass, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.TDisplayTimes, r, &Options{
		ArrayLength: 19,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+836, &t.SnoSoundOverride, r, &Options{
		Flags: 1,
		Group: 40,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+840, &t.FlSoundEffectDuration, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+844, &t.Unk_357a6f3, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+848, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ConversationLineNode) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("DwNodeID", &t.DwNodeID, d...)
	cb.Do("DwNextNodeID", &t.DwNextNodeID, d...)
	cb.Do("DwParentNodeID", &t.DwParentNodeID, d...)
	cb.Do("PtNextNode", &t.PtNextNode, d...)
	cb.Do("DwFlags", &t.DwFlags, d...)
	cb.Do("SzComment", &t.SzComment, d...)
	cb.Do("SnoSpeaker", &t.SnoSpeaker, d...)
	cb.Do("EGender", &t.EGender, d...)
	cb.Do("EPlayerClass", &t.EPlayerClass, d...)
	cb.Do("TDisplayTimes", &t.TDisplayTimes, d...)
	cb.Do("SnoSoundOverride", &t.SnoSoundOverride, d...)
	cb.Do("FlSoundEffectDuration", &t.FlSoundEffectDuration, d...)
	cb.Do("Unk_357a6f3", &t.Unk_357a6f3, d...)
}

type CraftingMatCategory_Table struct {
	// Inherits GameBalanceTable
	// Inherits PolymorphicBase
	DwType   DT_UINT
	DwPad    DT_UINT
	TEntries DT_VARIABLEARRAY[*CraftingMatCategory]
}

func (t *CraftingMatCategory_Table) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TEntries, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *CraftingMatCategory_Table) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("TEntries", &t.TEntries, d...)
}

type PublicGameSubcondition struct {
	// Inherits Subcondition
	// Inherits PolymorphicBase
	DwType  DT_UINT
	BNegate DT_INT
	DwPad   DT_UINT
}

func (t *PublicGameSubcondition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BNegate, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PublicGameSubcondition) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("BNegate", &t.BNegate, d...)
	cb.Do("DwPad", &t.DwPad, d...)
}

type PlayerVariableStringSubcondition struct {
	// Inherits Subcondition
	// Inherits PolymorphicBase
	DwType               DT_UINT
	BNegate              DT_INT
	DwPad                DT_UINT
	GbidDesignerVariable DT_GBID
	SzValue              DT_UINT
}

func (t *PlayerVariableStringSubcondition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BNegate, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.GbidDesignerVariable, r, &Options{
		Flags: 1,
		Group: 45,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.SzValue, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PlayerVariableStringSubcondition) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("BNegate", &t.BNegate, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("GbidDesignerVariable", &t.GbidDesignerVariable, d...)
	cb.Do("SzValue", &t.SzValue, d...)
}

type SpeedTreeBranchWindLevel struct {
	AfDistance           DT_FIXEDARRAY[*DT_FLOAT]
	AfDirectionAdherence DT_FIXEDARRAY[*DT_FLOAT]
	AfWhip               DT_FIXEDARRAY[*DT_FLOAT]
	FTurbulence          DT_FLOAT
	FTwitch              DT_FLOAT
	FTwitchFreqScale     DT_FLOAT
}

func (t *SpeedTreeBranchWindLevel) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.AfDistance, r, &Options{
		ArrayLength: 10,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.AfDirectionAdherence, r, &Options{
		ArrayLength: 10,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.AfWhip, r, &Options{
		ArrayLength: 10,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.FTurbulence, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+124, &t.FTwitch, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.FTwitchFreqScale, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+132, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *SpeedTreeBranchWindLevel) Walk(cb WalkCallback, d ...any) {
	cb.Do("AfDistance", &t.AfDistance, d...)
	cb.Do("AfDirectionAdherence", &t.AfDirectionAdherence, d...)
	cb.Do("AfWhip", &t.AfWhip, d...)
	cb.Do("FTurbulence", &t.FTurbulence, d...)
	cb.Do("FTwitch", &t.FTwitch, d...)
	cb.Do("FTwitchFreqScale", &t.FTwitchFreqScale, d...)
}

type UITreeStyleOptionalFieldMapDefaults struct {
	SzTreeScrollbar DT_CSTRING[*DT_BYTE]
}

func (t *UITreeStyleOptionalFieldMapDefaults) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SzTreeScrollbar, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *UITreeStyleOptionalFieldMapDefaults) Walk(cb WalkCallback, d ...any) {
	cb.Do("SzTreeScrollbar", &t.SzTreeScrollbar, d...)
}

type ActorNPCData struct {
	Unk_370e8c2        DT_INT
	TGeneratedLooks    DT_VARIABLEARRAY[*NPCComponentGroup]
	SnoNPCComponentSet DT_SNO
	PtLoadOuts         DT_VARIABLEARRAY[*NPCItems]
	Unk_4c7112f        DT_INT
	ESheathPreference  DT_ENUM
}

func (t *ActorNPCData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Unk_370e8c2, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.TGeneratedLooks, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SnoNPCComponentSet, r, &Options{
		Flags: 1,
		Group: 2,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.PtLoadOuts, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.Unk_4c7112f, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.ESheathPreference, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+56, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ActorNPCData) Walk(cb WalkCallback, d ...any) {
	cb.Do("Unk_370e8c2", &t.Unk_370e8c2, d...)
	cb.Do("TGeneratedLooks", &t.TGeneratedLooks, d...)
	cb.Do("SnoNPCComponentSet", &t.SnoNPCComponentSet, d...)
	cb.Do("PtLoadOuts", &t.PtLoadOuts, d...)
	cb.Do("Unk_4c7112f", &t.Unk_4c7112f, d...)
	cb.Do("ESheathPreference", &t.ESheathPreference, d...)
}

type QuestTagsEntry_Table struct {
	// Inherits GameBalanceTable
	// Inherits PolymorphicBase
	DwType   DT_UINT
	DwPad    DT_UINT
	TEntries DT_VARIABLEARRAY[*QuestTagsEntry]
}

func (t *QuestTagsEntry_Table) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TEntries, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *QuestTagsEntry_Table) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("TEntries", &t.TEntries, d...)
}

type PlayErrorSoundMessage struct {
	THeader       RequiredMessageHeader
	EWarningSound DT_ENUM
}

func (t *PlayErrorSoundMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.EWarningSound, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+20, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PlayErrorSoundMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("EWarningSound", &t.EWarningSound, d...)
}

type JoinLANGameMessage struct {
	THeader       RequiredMessageHeader
	IdSGame       DT_INT
	IdGameAccount DT_UINT
	SzAccountName DT_CHARARRAY
	EXLocale      DT_ENUM
	FlAspectRatio DT_FLOAT
}

func (t *JoinLANGameMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.IdSGame, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.IdGameAccount, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SzAccountName, r, &Options{
		ArrayLength: 128,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+152, &t.EXLocale, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+156, &t.FlAspectRatio, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+160, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *JoinLANGameMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("IdSGame", &t.IdSGame, d...)
	cb.Do("IdGameAccount", &t.IdGameAccount, d...)
	cb.Do("SzAccountName", &t.SzAccountName, d...)
	cb.Do("EXLocale", &t.EXLocale, d...)
	cb.Do("FlAspectRatio", &t.FlAspectRatio, d...)
}

type BloodSealUpgradeChoicesMessage struct {
	THeader   RequiredMessageHeader
	ArChoices DT_FIXEDARRAY[*DT_SNO]
}

func (t *BloodSealUpgradeChoicesMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.ArChoices, r, &Options{
		ArrayLength: 3,
		Flags:       9,
		Group:       142,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *BloodSealUpgradeChoicesMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("ArChoices", &t.ArChoices, d...)
}

type Type_c0fa945c struct {
	THeader RequiredMessageHeader
	Ann     DT_ACD_NETWORK_NAME
}

func (t *Type_c0fa945c) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Ann, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_c0fa945c) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("Ann", &t.Ann, d...)
}

type UIWrapPanelStyleOptionalFieldMapDefaults struct {
	BWrapPanelReverseOrder DT_INT
	BWrapPanelVertical     DT_INT
	Unk_60998e0            DT_INT
	Unk_92fec32            DT_INT
	TMargins               UIMargins
	NHorizontalSpacing     DT_INT
	NVerticalSpacing       DT_INT
}

func (t *UIWrapPanelStyleOptionalFieldMapDefaults) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.BWrapPanelReverseOrder, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.BWrapPanelVertical, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.Unk_60998e0, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.Unk_92fec32, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TMargins, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.NHorizontalSpacing, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.NVerticalSpacing, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+40, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *UIWrapPanelStyleOptionalFieldMapDefaults) Walk(cb WalkCallback, d ...any) {
	cb.Do("BWrapPanelReverseOrder", &t.BWrapPanelReverseOrder, d...)
	cb.Do("BWrapPanelVertical", &t.BWrapPanelVertical, d...)
	cb.Do("Unk_60998e0", &t.Unk_60998e0, d...)
	cb.Do("Unk_92fec32", &t.Unk_92fec32, d...)
	cb.Do("TMargins", &t.TMargins, d...)
	cb.Do("NHorizontalSpacing", &t.NHorizontalSpacing, d...)
	cb.Do("NVerticalSpacing", &t.NVerticalSpacing, d...)
}

type Type_c1ad591b struct {
	SzName DT_CSTRING[*DT_BYTE]
}

func (t *Type_c1ad591b) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SzName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_c1ad591b) Walk(cb WalkCallback, d ...any) {
	cb.Do("SzName", &t.SzName, d...)
}

type Type_c1c86aca struct {
	// Inherits TriggerEvent
	// Inherits PolymorphicBase
	DwType          DT_UINT
	DwPad           DT_UINT
	TConditions     TriggerConditions
	FGenerated      DT_INT
	Unk_6cba752     DT_INT
	DwParentActorID DT_UINT
	BHide           DT_INT
}

func (t *Type_c1c86aca) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.FGenerated, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_6cba752, r, &Options{Flags: 16}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.DwParentActorID, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.BHide, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+88, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_c1c86aca) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("TConditions", &t.TConditions, d...)
	cb.Do("FGenerated", &t.FGenerated, d...)
	cb.Do("Unk_6cba752", &t.Unk_6cba752, d...)
	cb.Do("DwParentActorID", &t.DwParentActorID, d...)
	cb.Do("BHide", &t.BHide, d...)
}

type NpcArchetypeTemplate struct {
	SzName                  DT_CSTRING[*DT_BYTE]
	SzToolTip               DT_CSTRING[*DT_BYTE]
	SnoTemplateActor        DT_SNO
	SnoMountedAnimTree      DT_SNO
	ArValidAnimSetOrderTags DT_VARIABLEARRAY[*DT_GBID]
	Unk_83f3d3e             DT_INT
	Unk_58f8666             DT_INT
	FHideIdles              DT_INT
	Unk_c62b399             DT_INT
	Unk_fd60c8f             DT_INT
	Unk_8711100             DT_INT
	Unk_d289db4             DT_INT
	Unk_d8df50f             DT_INT
	Unk_d6da84              DT_INT
}

func (t *NpcArchetypeTemplate) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SzName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SzToolTip, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.SnoTemplateActor, r, &Options{
		Flags: 1,
		Group: 1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.SnoMountedAnimTree, r, &Options{
		Flags: 1,
		Group: 67,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.ArValidAnimSetOrderTags, r, &Options{
		Flags: 1,
		Group: 53,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.Unk_83f3d3e, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+60, &t.Unk_58f8666, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.FHideIdles, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.Unk_c62b399, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_fd60c8f, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.Unk_8711100, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.Unk_d289db4, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.Unk_d8df50f, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.Unk_d6da84, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+96, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *NpcArchetypeTemplate) Walk(cb WalkCallback, d ...any) {
	cb.Do("SzName", &t.SzName, d...)
	cb.Do("SzToolTip", &t.SzToolTip, d...)
	cb.Do("SnoTemplateActor", &t.SnoTemplateActor, d...)
	cb.Do("SnoMountedAnimTree", &t.SnoMountedAnimTree, d...)
	cb.Do("ArValidAnimSetOrderTags", &t.ArValidAnimSetOrderTags, d...)
	cb.Do("Unk_83f3d3e", &t.Unk_83f3d3e, d...)
	cb.Do("Unk_58f8666", &t.Unk_58f8666, d...)
	cb.Do("FHideIdles", &t.FHideIdles, d...)
	cb.Do("Unk_c62b399", &t.Unk_c62b399, d...)
	cb.Do("Unk_fd60c8f", &t.Unk_fd60c8f, d...)
	cb.Do("Unk_8711100", &t.Unk_8711100, d...)
	cb.Do("Unk_d289db4", &t.Unk_d289db4, d...)
	cb.Do("Unk_d8df50f", &t.Unk_d8df50f, d...)
	cb.Do("Unk_d6da84", &t.Unk_d6da84, d...)
}

type ItemPreloadHelper struct {
	SnoItem DT_SNO
}

func (t *ItemPreloadHelper) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoItem, r, &Options{
		Flags: 1,
		Group: 73,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+4, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ItemPreloadHelper) Walk(cb WalkCallback, d ...any) {
	cb.Do("SnoItem", &t.SnoItem, d...)
}

type ConversationTreeNode struct {
	// Inherits PolymorphicBase
	DwType         DT_UINT
	DwPad          DT_UINT
	DwNodeID       DT_UINT
	DwNextNodeID   DT_UINT
	DwParentNodeID DT_UINT
	PtNextNode     DT_INT64
	DwFlags        DT_UINT
	SzComment      DT_CSTRING[*DT_BYTE]
}

func (t *ConversationTreeNode) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.DwNodeID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwNextNodeID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.DwParentNodeID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.PtNextNode, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.DwFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.SzComment, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+64, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ConversationTreeNode) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("DwNodeID", &t.DwNodeID, d...)
	cb.Do("DwNextNodeID", &t.DwNextNodeID, d...)
	cb.Do("DwParentNodeID", &t.DwParentNodeID, d...)
	cb.Do("PtNextNode", &t.PtNextNode, d...)
	cb.Do("DwFlags", &t.DwFlags, d...)
	cb.Do("SzComment", &t.SzComment, d...)
}

type dmMeshDataMirror struct {
	ANodes         DT_INT64
	AVertices      DT_INT64
	ATriangles     DT_INT64
	NNodeCount     DT_INT
	NVertexCount   DT_INT
	NTriangleCount DT_INT
	Height         DT_INT
	SurfaceArea    DT_FLOAT
	Padding        DT_INT
}

func (t *dmMeshDataMirror) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.ANodes, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.AVertices, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.ATriangles, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.NNodeCount, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.NVertexCount, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.NTriangleCount, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.Height, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.SurfaceArea, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.Padding, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *dmMeshDataMirror) Walk(cb WalkCallback, d ...any) {
	cb.Do("ANodes", &t.ANodes, d...)
	cb.Do("AVertices", &t.AVertices, d...)
	cb.Do("ATriangles", &t.ATriangles, d...)
	cb.Do("NNodeCount", &t.NNodeCount, d...)
	cb.Do("NVertexCount", &t.NVertexCount, d...)
	cb.Do("NTriangleCount", &t.NTriangleCount, d...)
	cb.Do("Height", &t.Height, d...)
	cb.Do("SurfaceArea", &t.SurfaceArea, d...)
	cb.Do("Padding", &t.Padding, d...)
}

type SpawnGenerator struct{}

func (t *SpawnGenerator) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if _, err := r.Seek(p+1, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *SpawnGenerator) Walk(cb WalkCallback, d ...any) {}

type PlayerClassIsInGameSubcondition struct {
	// Inherits Subcondition
	// Inherits PolymorphicBase
	DwType       DT_UINT
	BNegate      DT_INT
	DwPad        DT_UINT
	FPlayerClass DT_FIXEDARRAY[*DT_INT]
}

func (t *PlayerClassIsInGameSubcondition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BNegate, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.FPlayerClass, r, &Options{
		ArrayLength: 5,
		Flags:       1,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PlayerClassIsInGameSubcondition) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("BNegate", &t.BNegate, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("FPlayerClass", &t.FPlayerClass, d...)
}

type SkillTag struct {
	THeader             GBIDHeader
	DwTypes             DT_UINT
	EPlayerClass        DT_ENUM
	EDamageTypeOverride DT_ENUM
	BIsPrimary          DT_INT
	NDisplayPriority    DT_INT
	ArSkillTreeIcons    DT_FIXEDARRAY[*UIImageHandleReference]
	ArCategoryIcons     DT_FIXEDARRAY[*UIImageHandleReference]
}

func (t *SkillTag) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+260, &t.DwTypes, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+264, &t.EPlayerClass, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+268, &t.EDamageTypeOverride, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+272, &t.BIsPrimary, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+276, &t.NDisplayPriority, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+280, &t.ArSkillTreeIcons, r, &Options{
		ArrayLength: 5,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+300, &t.ArCategoryIcons, r, &Options{
		ArrayLength: 5,
		Flags:       1,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+320, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *SkillTag) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("DwTypes", &t.DwTypes, d...)
	cb.Do("EPlayerClass", &t.EPlayerClass, d...)
	cb.Do("EDamageTypeOverride", &t.EDamageTypeOverride, d...)
	cb.Do("BIsPrimary", &t.BIsPrimary, d...)
	cb.Do("NDisplayPriority", &t.NDisplayPriority, d...)
	cb.Do("ArSkillTreeIcons", &t.ArSkillTreeIcons, d...)
	cb.Do("ArCategoryIcons", &t.ArCategoryIcons, d...)
}

type dmClothVertexOldMirror struct {
	Unk_8078288        DT_VECTOR4D
	Unk_80782b8        DT_VECTOR4D
	V                  DT_VECTOR4D
	Vw                 DT_VECTOR4D
	Unk_fe3c31a        dmMtxMirror
	ClientFrame        dmMtxMirror
	DeltaFrame         dmMtxMirror
	BindNormal         DT_VECTOR4D
	SkinNormal         DT_VECTOR4D
	SkinPoint          DT_VECTOR4D
	Unk_8dcbeec        DT_VECTOR4D
	Unk_36fad31        DT_FLOAT
	InvMass            DT_FLOAT
	AttachmentRadius   DT_FLOAT
	ParentIndex        DT_WORD
	AttachmentDistance DT_WORD
	StapleIndex        DT_WORD
	IslandIndex        DT_WORD
	Unk_87816fd        DT_FLOAT
	TangentIndex       DT_WORD
	Flags              DT_WORD
	AInfluences        DT_FIXEDARRAY[*DT_WORD]
	Padding            DT_FIXEDARRAY[*DT_WORD]
	Weights            DT_VECTOR4D
}

func (t *dmClothVertexOldMirror) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Unk_8078288, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_80782b8, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.V, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.Vw, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.Unk_fe3c31a, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.ClientFrame, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+192, &t.DeltaFrame, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+256, &t.BindNormal, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+272, &t.SkinNormal, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+288, &t.SkinPoint, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+304, &t.Unk_8dcbeec, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+320, &t.Unk_36fad31, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+324, &t.InvMass, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+328, &t.AttachmentRadius, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+332, &t.ParentIndex, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+334, &t.AttachmentDistance, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+336, &t.StapleIndex, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+338, &t.IslandIndex, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+340, &t.Unk_87816fd, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+344, &t.TangentIndex, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+346, &t.Flags, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+348, &t.AInfluences, r, &Options{ArrayLength: 4}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+356, &t.Padding, r, &Options{ArrayLength: 6}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+368, &t.Weights, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+384, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *dmClothVertexOldMirror) Walk(cb WalkCallback, d ...any) {
	cb.Do("Unk_8078288", &t.Unk_8078288, d...)
	cb.Do("Unk_80782b8", &t.Unk_80782b8, d...)
	cb.Do("V", &t.V, d...)
	cb.Do("Vw", &t.Vw, d...)
	cb.Do("Unk_fe3c31a", &t.Unk_fe3c31a, d...)
	cb.Do("ClientFrame", &t.ClientFrame, d...)
	cb.Do("DeltaFrame", &t.DeltaFrame, d...)
	cb.Do("BindNormal", &t.BindNormal, d...)
	cb.Do("SkinNormal", &t.SkinNormal, d...)
	cb.Do("SkinPoint", &t.SkinPoint, d...)
	cb.Do("Unk_8dcbeec", &t.Unk_8dcbeec, d...)
	cb.Do("Unk_36fad31", &t.Unk_36fad31, d...)
	cb.Do("InvMass", &t.InvMass, d...)
	cb.Do("AttachmentRadius", &t.AttachmentRadius, d...)
	cb.Do("ParentIndex", &t.ParentIndex, d...)
	cb.Do("AttachmentDistance", &t.AttachmentDistance, d...)
	cb.Do("StapleIndex", &t.StapleIndex, d...)
	cb.Do("IslandIndex", &t.IslandIndex, d...)
	cb.Do("Unk_87816fd", &t.Unk_87816fd, d...)
	cb.Do("TangentIndex", &t.TangentIndex, d...)
	cb.Do("Flags", &t.Flags, d...)
	cb.Do("AInfluences", &t.AInfluences, d...)
	cb.Do("Padding", &t.Padding, d...)
	cb.Do("Weights", &t.Weights, d...)
}

type TriggerEventScreenFade struct {
	// Inherits TriggerEventRangedDuration
	// Inherits TriggerEvent
	// Inherits PolymorphicBase
	DwType           DT_UINT
	TConditions      TriggerConditions
	FGenerated       DT_INT
	Unk_6cba752      DT_INT
	DwParentActorID  DT_UINT
	TDuration        DT_FLOAT
	DwTriggerFlags   DT_UINT
	DwTriggerFlagsEx DT_UINT
	TCleanup         TriggerCleanup
	Unk_49e9257      DT_INT
	Unk_5490979      DT_INT
	DwPad            DT_UINT
	RgbaFadeColor    DT_RGBACOLOR
}

func (t *TriggerEventScreenFade) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.FGenerated, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_6cba752, r, &Options{Flags: 16}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.DwParentActorID, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.TDuration, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.DwTriggerFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.DwTriggerFlagsEx, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.TCleanup, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+116, &t.Unk_49e9257, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.Unk_5490979, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+124, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.RgbaFadeColor, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+136, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TriggerEventScreenFade) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("TConditions", &t.TConditions, d...)
	cb.Do("FGenerated", &t.FGenerated, d...)
	cb.Do("Unk_6cba752", &t.Unk_6cba752, d...)
	cb.Do("DwParentActorID", &t.DwParentActorID, d...)
	cb.Do("TDuration", &t.TDuration, d...)
	cb.Do("DwTriggerFlags", &t.DwTriggerFlags, d...)
	cb.Do("DwTriggerFlagsEx", &t.DwTriggerFlagsEx, d...)
	cb.Do("TCleanup", &t.TCleanup, d...)
	cb.Do("Unk_49e9257", &t.Unk_49e9257, d...)
	cb.Do("Unk_5490979", &t.Unk_5490979, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("RgbaFadeColor", &t.RgbaFadeColor, d...)
}

type ProjectileImpactEffect struct {
	SnoEffect            DT_SNO
	FlEffectDuration     DT_FLOAT
	Unk_a4ec910          DT_INT
	Unk_52ba359          DT_FLOAT
	FlTargetImpactHeight DT_FLOAT
	FlTargetImpactPitch  DT_FLOAT
}

func (t *ProjectileImpactEffect) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.FlEffectDuration, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.Unk_a4ec910, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.Unk_52ba359, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.FlTargetImpactHeight, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.FlTargetImpactPitch, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ProjectileImpactEffect) Walk(cb WalkCallback, d ...any) {
	cb.Do("SnoEffect", &t.SnoEffect, d...)
	cb.Do("FlEffectDuration", &t.FlEffectDuration, d...)
	cb.Do("Unk_a4ec910", &t.Unk_a4ec910, d...)
	cb.Do("Unk_52ba359", &t.Unk_52ba359, d...)
	cb.Do("FlTargetImpactHeight", &t.FlTargetImpactHeight, d...)
	cb.Do("FlTargetImpactPitch", &t.FlTargetImpactPitch, d...)
}

type FogOfWarImage struct {
	SnoFoW         DT_SNO
	SnoTexture     DT_SNO
	VecWorldOffset DT_VECTOR2D
	VecWorldSize   DT_VECTOR2D
}

func (t *FogOfWarImage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoFoW, r, &Options{
		Flags: 513,
		Group: 123,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.SnoTexture, r, &Options{
		Flags: 1,
		Group: 44,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.VecWorldOffset, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.VecWorldSize, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *FogOfWarImage) Walk(cb WalkCallback, d ...any) {
	cb.Do("SnoFoW", &t.SnoFoW, d...)
	cb.Do("SnoTexture", &t.SnoTexture, d...)
	cb.Do("VecWorldOffset", &t.VecWorldOffset, d...)
	cb.Do("VecWorldSize", &t.VecWorldSize, d...)
}

type StoryboardTimePointNode struct {
	// Inherits PolymorphicBase
	DwType DT_UINT
	FlTime DT_FLOAT
	DwPad  DT_UINT
}

func (t *StoryboardTimePointNode) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.FlTime, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *StoryboardTimePointNode) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("FlTime", &t.FlTime, d...)
	cb.Do("DwPad", &t.DwPad, d...)
}

type UILayoutList struct {
	ArEntries DT_VARIABLEARRAY[*UILayoutEntries]
}

func (t *UILayoutList) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.ArEntries, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *UILayoutList) Walk(cb WalkCallback, d ...any) {
	cb.Do("ArEntries", &t.ArEntries, d...)
}

type LevelAreaTagsEntry_Table struct {
	// Inherits GameBalanceTable
	// Inherits PolymorphicBase
	DwType   DT_UINT
	DwPad    DT_UINT
	TEntries DT_VARIABLEARRAY[*LevelAreaTagsEntry]
}

func (t *LevelAreaTagsEntry_Table) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TEntries, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *LevelAreaTagsEntry_Table) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("TEntries", &t.TEntries, d...)
}

type TriggerEventFade struct {
	// Inherits TriggerEventRangedDuration
	// Inherits TriggerEvent
	// Inherits PolymorphicBase
	DwType           DT_UINT
	TConditions      TriggerConditions
	FGenerated       DT_INT
	Unk_6cba752      DT_INT
	DwParentActorID  DT_UINT
	TDuration        DT_FLOAT
	DwTriggerFlags   DT_UINT
	DwTriggerFlagsEx DT_UINT
	TCleanup         TriggerCleanup
	Unk_49e9257      DT_INT
	Unk_5490979      DT_INT
	DwPad            DT_UINT
	FFadeOwner       DT_INT
	BRollConnection  DT_INT
	DwObjectID       DT_UINT
}

func (t *TriggerEventFade) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.FGenerated, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_6cba752, r, &Options{Flags: 16}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.DwParentActorID, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.TDuration, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.DwTriggerFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.DwTriggerFlagsEx, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.TCleanup, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+116, &t.Unk_49e9257, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.Unk_5490979, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+124, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.FFadeOwner, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+132, &t.BRollConnection, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+136, &t.DwObjectID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+144, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TriggerEventFade) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("TConditions", &t.TConditions, d...)
	cb.Do("FGenerated", &t.FGenerated, d...)
	cb.Do("Unk_6cba752", &t.Unk_6cba752, d...)
	cb.Do("DwParentActorID", &t.DwParentActorID, d...)
	cb.Do("TDuration", &t.TDuration, d...)
	cb.Do("DwTriggerFlags", &t.DwTriggerFlags, d...)
	cb.Do("DwTriggerFlagsEx", &t.DwTriggerFlagsEx, d...)
	cb.Do("TCleanup", &t.TCleanup, d...)
	cb.Do("Unk_49e9257", &t.Unk_49e9257, d...)
	cb.Do("Unk_5490979", &t.Unk_5490979, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("FFadeOwner", &t.FFadeOwner, d...)
	cb.Do("BRollConnection", &t.BRollConnection, d...)
	cb.Do("DwObjectID", &t.DwObjectID, d...)
}

type TriggerEventNull struct {
	// Inherits TriggerEvent
	// Inherits PolymorphicBase
	DwType          DT_UINT
	DwPad           DT_UINT
	TConditions     TriggerConditions
	FGenerated      DT_INT
	Unk_6cba752     DT_INT
	DwParentActorID DT_UINT
}

func (t *TriggerEventNull) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.FGenerated, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_6cba752, r, &Options{Flags: 16}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.DwParentActorID, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+80, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TriggerEventNull) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("TConditions", &t.TConditions, d...)
	cb.Do("FGenerated", &t.FGenerated, d...)
	cb.Do("Unk_6cba752", &t.Unk_6cba752, d...)
	cb.Do("DwParentActorID", &t.DwParentActorID, d...)
}

type DotApplicationVisualsMessage struct {
	THeader                    RequiredMessageHeader
	SnoPower                   DT_SNO
	DwPayloadDataID            DT_UINT
	EDamageType                DT_ENUM
	AnnTarget                  DT_ACD_NETWORK_NAME
	AnnAttacker                DT_ACD_NETWORK_NAME
	Unk_1c7ccc9                DT_FLOAT
	BTargetAlive               DT_INT
	VLocalImpactPos            DT_OPTIONAL[*DT_VECTOR3D]
	VProjectileImpactDirection DT_OPTIONAL[*DT_VECTOR3D]
	FlImpactDirection          DT_OPTIONAL[*DT_FLOAT]
	FlImpactPitch              DT_OPTIONAL[*DT_FLOAT]
}

func (t *DotApplicationVisualsMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoPower, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPayloadDataID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.EDamageType, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.AnnTarget, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.AnnAttacker, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.Unk_1c7ccc9, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.BTargetAlive, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.VLocalImpactPos, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.VProjectileImpactDirection, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.FlImpactDirection, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.FlImpactPitch, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+100, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *DotApplicationVisualsMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("SnoPower", &t.SnoPower, d...)
	cb.Do("DwPayloadDataID", &t.DwPayloadDataID, d...)
	cb.Do("EDamageType", &t.EDamageType, d...)
	cb.Do("AnnTarget", &t.AnnTarget, d...)
	cb.Do("AnnAttacker", &t.AnnAttacker, d...)
	cb.Do("Unk_1c7ccc9", &t.Unk_1c7ccc9, d...)
	cb.Do("BTargetAlive", &t.BTargetAlive, d...)
	cb.Do("VLocalImpactPos", &t.VLocalImpactPos, d...)
	cb.Do("VProjectileImpactDirection", &t.VProjectileImpactDirection, d...)
	cb.Do("FlImpactDirection", &t.FlImpactDirection, d...)
	cb.Do("FlImpactPitch", &t.FlImpactPitch, d...)
}

type BuffExclusiveType struct {
	THeader GBIDHeader
}

func (t *BuffExclusiveType) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+260, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *BuffExclusiveType) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
}

type TryChatMessage struct {
	THeader   RequiredMessageHeader
	UsMessage DT_CHARARRAY
}

func (t *TryChatMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.UsMessage, r, &Options{
		ArrayLength: 1024,
		Flags:       1,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+1040, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TryChatMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("UsMessage", &t.UsMessage, d...)
}

type SubzoneDefinition struct {
	SnoPrimaryWorld                  DT_SNO
	UEntranceGUID                    DT_STARTLOC_NAME
	ArLevelAreas                     DT_VARIABLEARRAY[*DT_SNO]
	EType                            DT_ENUM
	EParentZone                      DT_ENUM
	SnoTerritory                     DT_SNO
	EPvPType                         DT_ENUM
	SnoPvPSourceWorld                DT_SNO
	SnoActorGroups                   DT_SNO
	PtPostprocessed                  DT_INT64
	ArWorldMarkerSets                DT_VARIABLEARRAY[*SubzoneWorldMarkerSetEntry]
	ArSnoSecondaryWorlds             DT_VARIABLEARRAY[*DT_SNO]
	DwFlags                          DT_UINT
	Unk_35fc338                      DT_INT
	ArPublicLevelScalingDataOverride DT_FIXEDARRAY[*LevelScalingData]
	TPrivateLevelScalingDataOverride LevelScalingData
	BHasWorldEvent                   DT_INT
	ArForcedPrefetchData             DT_VARIABLEARRAY[*ForcedPrefetchData]
}

func (t *SubzoneDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.SnoPrimaryWorld, r, &Options{
		Flags: 513,
		Group: 48,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.UEntranceGUID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.ArLevelAreas, r, &Options{
		Flags: 1,
		Group: 22,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.EType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.EParentZone, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.SnoTerritory, r, &Options{
		Flags: 1,
		Group: 92,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.EPvPType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.SnoPvPSourceWorld, r, &Options{
		Flags: 1,
		Group: 48,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.SnoActorGroups, r, &Options{
		Flags: 513,
		Group: 20,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.PtPostprocessed, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.ArWorldMarkerSets, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.ArSnoSecondaryWorlds, r, &Options{
		Flags: 1,
		Group: 48,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.DwFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+100, &t.Unk_35fc338, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+104, &t.ArPublicLevelScalingDataOverride, r, &Options{
		ArrayLength: 4,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+168, &t.TPrivateLevelScalingDataOverride, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+184, &t.BHasWorldEvent, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+192, &t.ArForcedPrefetchData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+208, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *SubzoneDefinition) Walk(cb WalkCallback, d ...any) {
	cb.Do("SnoPrimaryWorld", &t.SnoPrimaryWorld, d...)
	cb.Do("UEntranceGUID", &t.UEntranceGUID, d...)
	cb.Do("ArLevelAreas", &t.ArLevelAreas, d...)
	cb.Do("EType", &t.EType, d...)
	cb.Do("EParentZone", &t.EParentZone, d...)
	cb.Do("SnoTerritory", &t.SnoTerritory, d...)
	cb.Do("EPvPType", &t.EPvPType, d...)
	cb.Do("SnoPvPSourceWorld", &t.SnoPvPSourceWorld, d...)
	cb.Do("SnoActorGroups", &t.SnoActorGroups, d...)
	cb.Do("PtPostprocessed", &t.PtPostprocessed, d...)
	cb.Do("ArWorldMarkerSets", &t.ArWorldMarkerSets, d...)
	cb.Do("ArSnoSecondaryWorlds", &t.ArSnoSecondaryWorlds, d...)
	cb.Do("DwFlags", &t.DwFlags, d...)
	cb.Do("Unk_35fc338", &t.Unk_35fc338, d...)
	cb.Do("ArPublicLevelScalingDataOverride", &t.ArPublicLevelScalingDataOverride, d...)
	cb.Do("TPrivateLevelScalingDataOverride", &t.TPrivateLevelScalingDataOverride, d...)
	cb.Do("BHasWorldEvent", &t.BHasWorldEvent, d...)
	cb.Do("ArForcedPrefetchData", &t.ArForcedPrefetchData, d...)
}

type CapsuleProximityData struct {
	// Inherits ProximityDataBase
	// Inherits PolymorphicBase
	DwType   DT_UINT
	DwPad    DT_UINT
	FlRadius DT_FLOAT
	FlHeight DT_FLOAT
}

func (t *CapsuleProximityData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.FlRadius, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.FlHeight, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *CapsuleProximityData) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("FlRadius", &t.FlRadius, d...)
	cb.Do("FlHeight", &t.FlHeight, d...)
}

type Type_c48e04b1 struct{}

func (t *Type_c48e04b1) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if _, err := r.Seek(p+1, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_c48e04b1) Walk(cb WalkCallback, d ...any) {}

type ConversationRandomSelectionNode struct {
	// Inherits ConversationScopeNode
	// Inherits ConversationTreeNode
	// Inherits PolymorphicBase
	DwType         DT_UINT
	DwPad          DT_UINT
	DwNodeID       DT_UINT
	DwNextNodeID   DT_UINT
	DwParentNodeID DT_UINT
	PtNextNode     DT_INT64
	DwFlags        DT_UINT
	SzComment      DT_CSTRING[*DT_BYTE]
	ArChildNodes   DT_POLYMORPHIC_VARIABLEARRAY[*DT_INT64]
	SnoCondition   DT_SNO
	Unk_d8bf9e4    DT_INT
	DwWeight       DT_UINT
}

func (t *ConversationRandomSelectionNode) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.DwNodeID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwNextNodeID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.DwParentNodeID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.PtNextNode, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.DwFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.SzComment, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.ArChildNodes, r, &Options{Flags: 262145}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.SnoCondition, r, &Options{
		Flags: 1,
		Group: 51,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.Unk_d8bf9e4, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.DwWeight, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+104, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ConversationRandomSelectionNode) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("DwNodeID", &t.DwNodeID, d...)
	cb.Do("DwNextNodeID", &t.DwNextNodeID, d...)
	cb.Do("DwParentNodeID", &t.DwParentNodeID, d...)
	cb.Do("PtNextNode", &t.PtNextNode, d...)
	cb.Do("DwFlags", &t.DwFlags, d...)
	cb.Do("SzComment", &t.SzComment, d...)
	cb.Do("ArChildNodes", &t.ArChildNodes, d...)
	cb.Do("SnoCondition", &t.SnoCondition, d...)
	cb.Do("Unk_d8bf9e4", &t.Unk_d8bf9e4, d...)
	cb.Do("DwWeight", &t.DwWeight, d...)
}

type SubObjectNameInfo struct {
	EType                  DT_ENUM
	DwFlags                DT_UINT
	DwPersona              DT_BYTE
	DwState                DT_BYTE
	DwStyle                DT_UINT
	DwSlotHash             DT_UINT
	DwNPCComponentNameHash DT_UINT
	DwDetailHash           DT_UINT
	Unk_c15f7d2            DT_UINT
	Unk_92fdd14            DT_UINT
	Unk_b0b7d46            DT_UINT
}

func (t *SubObjectNameInfo) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.EType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.DwFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwPersona, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+9, &t.DwState, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwStyle, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.DwSlotHash, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwNPCComponentNameHash, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.DwDetailHash, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.Unk_c15f7d2, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.Unk_92fdd14, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.Unk_b0b7d46, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+40, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *SubObjectNameInfo) Walk(cb WalkCallback, d ...any) {
	cb.Do("EType", &t.EType, d...)
	cb.Do("DwFlags", &t.DwFlags, d...)
	cb.Do("DwPersona", &t.DwPersona, d...)
	cb.Do("DwState", &t.DwState, d...)
	cb.Do("DwStyle", &t.DwStyle, d...)
	cb.Do("DwSlotHash", &t.DwSlotHash, d...)
	cb.Do("DwNPCComponentNameHash", &t.DwNPCComponentNameHash, d...)
	cb.Do("DwDetailHash", &t.DwDetailHash, d...)
	cb.Do("Unk_c15f7d2", &t.Unk_c15f7d2, d...)
	cb.Do("Unk_92fdd14", &t.Unk_92fdd14, d...)
	cb.Do("Unk_b0b7d46", &t.Unk_b0b7d46, d...)
}

type GameTestingExecuteClientCheatMessage struct {
	THeader     RequiredMessageHeader
	SzCheat     DT_CHARARRAY
	Unk_d57d005 DT_INT
}

func (t *GameTestingExecuteClientCheatMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SzCheat, r, &Options{
		ArrayLength: 64,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.Unk_d57d005, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+84, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *GameTestingExecuteClientCheatMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("SzCheat", &t.SzCheat, d...)
	cb.Do("Unk_d57d005", &t.Unk_d57d005, d...)
}

type PowerPetSpawn struct {
	TName    DT_UINT
	GbidType DT_GBID
	TMax     DT_STRING_FORMULA
	THealth  HitpointSpecifier
}

func (t *PowerPetSpawn) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.TName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.GbidType, r, &Options{
		Flags: 1,
		Group: 23,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.TMax, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.THealth, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+112, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PowerPetSpawn) Walk(cb WalkCallback, d ...any) {
	cb.Do("TName", &t.TName, d...)
	cb.Do("GbidType", &t.GbidType, d...)
	cb.Do("TMax", &t.TMax, d...)
	cb.Do("THealth", &t.THealth, d...)
}

type IntensityParam struct {
	EType       DT_ENUM
	Unk_465327d InterpolationPath_float
	ArSubParams DT_VARIABLEARRAY[*IntensitySubParam]
}

func (t *IntensityParam) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.EType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.Unk_465327d, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.ArSubParams, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+80, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *IntensityParam) Walk(cb WalkCallback, d ...any) {
	cb.Do("EType", &t.EType, d...)
	cb.Do("Unk_465327d", &t.Unk_465327d, d...)
	cb.Do("ArSubParams", &t.ArSubParams, d...)
}

type StoreCameraZoomMapping struct {
	BIsDefault  DT_INT
	Unk_b29fdf6 DT_ENUM
}

func (t *StoreCameraZoomMapping) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.BIsDefault, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.Unk_b29fdf6, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *StoreCameraZoomMapping) Walk(cb WalkCallback, d ...any) {
	cb.Do("BIsDefault", &t.BIsDefault, d...)
	cb.Do("Unk_b29fdf6", &t.Unk_b29fdf6, d...)
}

type AIStateDebugSetConditionStateMessage struct {
	THeader             RequiredMessageHeader
	AnnActor            DT_ACD_NETWORK_NAME
	DwCooldownKey       DT_INT64
	NIndex              DT_INT
	BInterruptCondition DT_INT
	BEnabled            DT_INT
}

func (t *AIStateDebugSetConditionStateMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.AnnActor, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.DwCooldownKey, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.NIndex, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.BInterruptCondition, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.BEnabled, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *AIStateDebugSetConditionStateMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("AnnActor", &t.AnnActor, d...)
	cb.Do("DwCooldownKey", &t.DwCooldownKey, d...)
	cb.Do("NIndex", &t.NIndex, d...)
	cb.Do("BInterruptCondition", &t.BInterruptCondition, d...)
	cb.Do("BEnabled", &t.BEnabled, d...)
}

type ActivityLinks struct {
	ArSnoLinkedTask DT_VARIABLEARRAY[*DT_SNO]
}

func (t *ActivityLinks) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.ArSnoLinkedTask, r, &Options{
		Flags: 1,
		Group: 136,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ActivityLinks) Walk(cb WalkCallback, d ...any) {
	cb.Do("ArSnoLinkedTask", &t.ArSnoLinkedTask, d...)
}

type MarkerPortalGizmoData struct {
	EWorldToChoose         DT_ENUM
	SnoSpecifiedWorld      DT_SNO
	DwEntranceNameToFind   DT_STARTLOC_NAME
	SnoPortalDestLevelArea DT_SNO
	DwPortalType           DT_UINT
	Unk_af5815a            DT_INT
}

func (t *MarkerPortalGizmoData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.EWorldToChoose, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.SnoSpecifiedWorld, r, &Options{
		Flags: 513,
		Group: 48,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwEntranceNameToFind, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.SnoPortalDestLevelArea, r, &Options{
		Flags: 513,
		Group: 22,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.DwPortalType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.Unk_af5815a, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *MarkerPortalGizmoData) Walk(cb WalkCallback, d ...any) {
	cb.Do("EWorldToChoose", &t.EWorldToChoose, d...)
	cb.Do("SnoSpecifiedWorld", &t.SnoSpecifiedWorld, d...)
	cb.Do("DwEntranceNameToFind", &t.DwEntranceNameToFind, d...)
	cb.Do("SnoPortalDestLevelArea", &t.SnoPortalDestLevelArea, d...)
	cb.Do("DwPortalType", &t.DwPortalType, d...)
	cb.Do("Unk_af5815a", &t.Unk_af5815a, d...)
}

type ScriptEventParamMarkerHandle struct {
	// Inherits ScriptEventParamBase
	// Inherits PolymorphicBase
	DwType        DT_UINT
	EParamType    DT_ENUM
	DwPad         DT_UINT
	TMarkerHandle MarkerHandle
}

func (t *ScriptEventParamMarkerHandle) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.EParamType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.TMarkerHandle, r, &Options{Flags: 513}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ScriptEventParamMarkerHandle) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("EParamType", &t.EParamType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("TMarkerHandle", &t.TMarkerHandle, d...)
}

type UIEditStyle struct {
	// Inherits UITextStyle
	// Inherits UIWindowStyle
	// Inherits UIControlStyle
	// Inherits PolymorphicBase
	DwType                      DT_UINT
	DwPad                       DT_UINT
	HParentStyle                UIControlHandle
	Unk_441f783                 DT_INT64
	M_eHasModifiedPowerTagMap   DT_TAGMAP[*DT_ENUM]
	TConsoleInput               UIControlConsoleInput
	Unk_b4f614c                 DT_TAGMAP[*DT_ENUM]
	TFont                       UIControlFont
	PtUIControlTagMapIconLabels DT_TAGMAP[*DT_ENUM]
	Unk_172e19a                 DT_TAGMAP[*DT_ENUM]
}

func (t *UIEditStyle) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.HParentStyle, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_441f783, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.M_eHasModifiedPowerTagMap, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.TConsoleInput, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.Unk_b4f614c, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.TFont, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.PtUIControlTagMapIconLabels, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.Unk_172e19a, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+128, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *UIEditStyle) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("HParentStyle", &t.HParentStyle, d...)
	cb.Do("Unk_441f783", &t.Unk_441f783, d...)
	cb.Do("M_eHasModifiedPowerTagMap", &t.M_eHasModifiedPowerTagMap, d...)
	cb.Do("TConsoleInput", &t.TConsoleInput, d...)
	cb.Do("Unk_b4f614c", &t.Unk_b4f614c, d...)
	cb.Do("TFont", &t.TFont, d...)
	cb.Do("PtUIControlTagMapIconLabels", &t.PtUIControlTagMapIconLabels, d...)
	cb.Do("Unk_172e19a", &t.Unk_172e19a, d...)
}

type MarkerGroupData struct {
	TLocalTransform PRTransform
	VecLocalScale   DT_VECTOR3D
}

func (t *MarkerGroupData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.TLocalTransform, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.VecLocalScale, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+40, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *MarkerGroupData) Walk(cb WalkCallback, d ...any) {
	cb.Do("TLocalTransform", &t.TLocalTransform, d...)
	cb.Do("VecLocalScale", &t.VecLocalScale, d...)
}

type SeasonSubcondition struct {
	// Inherits NumericComparisonSubcondition
	// Inherits Subcondition
	// Inherits PolymorphicBase
	DwType        DT_UINT
	BNegate       DT_INT
	EComparisonOp DT_ENUM
	DwPad         DT_UINT
	SnoSeason     DT_SNO
}

func (t *SeasonSubcondition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BNegate, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.EComparisonOp, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.SnoSeason, r, &Options{
		Flags: 513,
		Group: 137,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+40, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *SeasonSubcondition) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("BNegate", &t.BNegate, d...)
	cb.Do("EComparisonOp", &t.EComparisonOp, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("SnoSeason", &t.SnoSeason, d...)
}

type TownPortalReturnDest struct {
	SnoWorld         DT_SNO
	SnoLevelArea     DT_SNO
	UExpireTimestamp DT_INT64
}

func (t *TownPortalReturnDest) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoWorld, r, &Options{
		Flags: 1,
		Group: 31,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.SnoLevelArea, r, &Options{
		Flags: 1,
		Group: 22,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.UExpireTimestamp, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TownPortalReturnDest) Walk(cb WalkCallback, d ...any) {
	cb.Do("SnoWorld", &t.SnoWorld, d...)
	cb.Do("SnoLevelArea", &t.SnoLevelArea, d...)
	cb.Do("UExpireTimestamp", &t.UExpireTimestamp, d...)
}

type PartyVoteReplyMessage struct {
	THeader RequiredMessageHeader
	Vote    DT_INT
}

func (t *PartyVoteReplyMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Vote, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+20, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PartyVoteReplyMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("Vote", &t.Vote, d...)
}

type WindowPiecesBase struct {
	// Inherits PolymorphicBase
	DwType       DT_UINT
	DwPad        DT_UINT
	FlImageScale DT_FLOAT
	NPadding     DT_UINT
}

func (t *WindowPiecesBase) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.FlImageScale, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.NPadding, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *WindowPiecesBase) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("FlImageScale", &t.FlImageScale, d...)
	cb.Do("NPadding", &t.NPadding, d...)
}

type PlayerGenderSubcondition struct {
	// Inherits Subcondition
	// Inherits PolymorphicBase
	DwType  DT_UINT
	BNegate DT_INT
	DwPad   DT_UINT
	EGender DT_ENUM
}

func (t *PlayerGenderSubcondition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BNegate, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.EGender, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PlayerGenderSubcondition) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("BNegate", &t.BNegate, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("EGender", &t.EGender, d...)
}

type PvPBucketLevels struct {
	DwMinLevel    DT_UINT
	DwMaxLevel    DT_UINT
	EWorldTier    DT_ENUM
	DwTargetLevel DT_UINT
}

func (t *PvPBucketLevels) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.DwMinLevel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.DwMaxLevel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.EWorldTier, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwTargetLevel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PvPBucketLevels) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwMinLevel", &t.DwMinLevel, d...)
	cb.Do("DwMaxLevel", &t.DwMaxLevel, d...)
	cb.Do("EWorldTier", &t.EWorldTier, d...)
	cb.Do("DwTargetLevel", &t.DwTargetLevel, d...)
}

type PowerEffectOverrides struct {
	FlPowerEffectSizeOverride      DT_FLOAT
	FlPowerEffectIntensityOverride DT_FLOAT
	FlPowerEffectDurationOverride  DT_FLOAT
	FlPowerEffectLengthOverride    DT_FLOAT
	FlPowerEffectWidthOverride     DT_FLOAT
	FlPowerEffectHeightOverride    DT_FLOAT
}

func (t *PowerEffectOverrides) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.FlPowerEffectSizeOverride, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.FlPowerEffectIntensityOverride, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.FlPowerEffectDurationOverride, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.FlPowerEffectLengthOverride, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.FlPowerEffectWidthOverride, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.FlPowerEffectHeightOverride, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PowerEffectOverrides) Walk(cb WalkCallback, d ...any) {
	cb.Do("FlPowerEffectSizeOverride", &t.FlPowerEffectSizeOverride, d...)
	cb.Do("FlPowerEffectIntensityOverride", &t.FlPowerEffectIntensityOverride, d...)
	cb.Do("FlPowerEffectDurationOverride", &t.FlPowerEffectDurationOverride, d...)
	cb.Do("FlPowerEffectLengthOverride", &t.FlPowerEffectLengthOverride, d...)
	cb.Do("FlPowerEffectWidthOverride", &t.FlPowerEffectWidthOverride, d...)
	cb.Do("FlPowerEffectHeightOverride", &t.FlPowerEffectHeightOverride, d...)
}

type PortalInfo struct {
	SnoIntroEffect        DT_SNO
	SnoLoopIntroEffect    DT_SNO
	SnoLoopEffect         DT_SNO
	SnoLoopOutroEffect    DT_SNO
	SnoLoopSkipEffect     DT_SNO
	FlLoopMinDuration     DT_FLOAT
	Unk_7bc440d           DT_FLOAT
	Unk_86403ef           DT_INT
	Unk_f0eaae5           DT_INT
	Unk_e0a3943           DT_INT
	Unk_9c071e3           DT_INT
	Unk_4bd94b4           DT_INT
	Unk_69b2ec7           DT_INT
	Unk_449111f           DT_INT
	SnoOutroEffect        DT_SNO
	SnoSkippedOutroEffect DT_SNO
	SnoLoopingWorld       DT_SNO
	SzCameraMarkerName    DT_CHARARRAY
	Unk_bdd12d            DT_INT
	Unk_f8d8170           DT_FLOAT
	Unk_188141b           DT_FLOAT
	Unk_66ebec            DT_FLOAT
	Unk_e660d97           DT_FLOAT
}

func (t *PortalInfo) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoIntroEffect, r, &Options{
		Flags: 513,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.SnoLoopIntroEffect, r, &Options{
		Flags: 513,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.SnoLoopEffect, r, &Options{
		Flags: 513,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.SnoLoopOutroEffect, r, &Options{
		Flags: 513,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoLoopSkipEffect, r, &Options{
		Flags: 513,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.FlLoopMinDuration, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_7bc440d, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.Unk_86403ef, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.Unk_f0eaae5, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.Unk_e0a3943, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.Unk_9c071e3, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.Unk_4bd94b4, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.Unk_69b2ec7, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.Unk_449111f, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.SnoOutroEffect, r, &Options{
		Flags: 513,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+60, &t.SnoSkippedOutroEffect, r, &Options{
		Flags: 513,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.SnoLoopingWorld, r, &Options{
		Flags: 513,
		Group: 48,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.SzCameraMarkerName, r, &Options{
		ArrayLength: 128,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+196, &t.Unk_bdd12d, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+200, &t.Unk_f8d8170, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+204, &t.Unk_188141b, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+208, &t.Unk_66ebec, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+212, &t.Unk_e660d97, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+216, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PortalInfo) Walk(cb WalkCallback, d ...any) {
	cb.Do("SnoIntroEffect", &t.SnoIntroEffect, d...)
	cb.Do("SnoLoopIntroEffect", &t.SnoLoopIntroEffect, d...)
	cb.Do("SnoLoopEffect", &t.SnoLoopEffect, d...)
	cb.Do("SnoLoopOutroEffect", &t.SnoLoopOutroEffect, d...)
	cb.Do("SnoLoopSkipEffect", &t.SnoLoopSkipEffect, d...)
	cb.Do("FlLoopMinDuration", &t.FlLoopMinDuration, d...)
	cb.Do("Unk_7bc440d", &t.Unk_7bc440d, d...)
	cb.Do("Unk_86403ef", &t.Unk_86403ef, d...)
	cb.Do("Unk_f0eaae5", &t.Unk_f0eaae5, d...)
	cb.Do("Unk_e0a3943", &t.Unk_e0a3943, d...)
	cb.Do("Unk_9c071e3", &t.Unk_9c071e3, d...)
	cb.Do("Unk_4bd94b4", &t.Unk_4bd94b4, d...)
	cb.Do("Unk_69b2ec7", &t.Unk_69b2ec7, d...)
	cb.Do("Unk_449111f", &t.Unk_449111f, d...)
	cb.Do("SnoOutroEffect", &t.SnoOutroEffect, d...)
	cb.Do("SnoSkippedOutroEffect", &t.SnoSkippedOutroEffect, d...)
	cb.Do("SnoLoopingWorld", &t.SnoLoopingWorld, d...)
	cb.Do("SzCameraMarkerName", &t.SzCameraMarkerName, d...)
	cb.Do("Unk_bdd12d", &t.Unk_bdd12d, d...)
	cb.Do("Unk_f8d8170", &t.Unk_f8d8170, d...)
	cb.Do("Unk_188141b", &t.Unk_188141b, d...)
	cb.Do("Unk_66ebec", &t.Unk_66ebec, d...)
	cb.Do("Unk_e660d97", &t.Unk_e660d97, d...)
}

type RequiredMessageHeader struct {
	EType       DT_ENUM
	Unk_2f5806b DT_INT
	DwSize      DT_OPTIONAL[*DT_WORD]
}

func (t *RequiredMessageHeader) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.EType, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.Unk_2f5806b, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwSize, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *RequiredMessageHeader) Walk(cb WalkCallback, d ...any) {
	cb.Do("EType", &t.EType, d...)
	cb.Do("Unk_2f5806b", &t.Unk_2f5806b, d...)
	cb.Do("DwSize", &t.DwSize, d...)
}

type OnBerserkAppliedCallback struct {
	// Inherits BuffCallbackBase
	// Inherits PolymorphicBase
	DwType                DT_UINT
	DwPad                 DT_UINT
	SnoTriggerEffectGroup DT_SNO
	ArConditions          DT_POLYMORPHIC_VARIABLEARRAY[*DT_INT64]
}

func (t *OnBerserkAppliedCallback) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoTriggerEffectGroup, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ArConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *OnBerserkAppliedCallback) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("SnoTriggerEffectGroup", &t.SnoTriggerEffectGroup, d...)
	cb.Do("ArConditions", &t.ArConditions, d...)
}

type TriggerEventPOISkip struct {
	// Inherits TriggerEventRangedDuration
	// Inherits TriggerEvent
	// Inherits PolymorphicBase
	DwType           DT_UINT
	TConditions      TriggerConditions
	FGenerated       DT_INT
	Unk_6cba752      DT_INT
	DwParentActorID  DT_UINT
	TDuration        DT_FLOAT
	DwTriggerFlags   DT_UINT
	DwTriggerFlagsEx DT_UINT
	TCleanup         TriggerCleanup
	Unk_49e9257      DT_INT
	Unk_5490979      DT_INT
	DwPad            DT_UINT
}

func (t *TriggerEventPOISkip) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.FGenerated, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_6cba752, r, &Options{Flags: 16}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.DwParentActorID, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.TDuration, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.DwTriggerFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.DwTriggerFlagsEx, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.TCleanup, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+116, &t.Unk_49e9257, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.Unk_5490979, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+124, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+128, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TriggerEventPOISkip) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("TConditions", &t.TConditions, d...)
	cb.Do("FGenerated", &t.FGenerated, d...)
	cb.Do("Unk_6cba752", &t.Unk_6cba752, d...)
	cb.Do("DwParentActorID", &t.DwParentActorID, d...)
	cb.Do("TDuration", &t.TDuration, d...)
	cb.Do("DwTriggerFlags", &t.DwTriggerFlags, d...)
	cb.Do("DwTriggerFlagsEx", &t.DwTriggerFlagsEx, d...)
	cb.Do("TCleanup", &t.TCleanup, d...)
	cb.Do("Unk_49e9257", &t.Unk_49e9257, d...)
	cb.Do("Unk_5490979", &t.Unk_5490979, d...)
	cb.Do("DwPad", &t.DwPad, d...)
}

type GlobalMarkerActor struct {
	SnoMarkerSet               DT_SNO
	SzMarkerName               DT_UINT
	DwMarkerPathID             DT_UINT
	SnoActor                   DT_SNO
	EActorType                 DT_ENUM
	EGizmoType                 DT_ENUM
	SnoWorld                   DT_SNO
	TWorldTransform            PRTransform
	SnoCampaignEnableCondition DT_SNO
	SnoLevelArea               DT_SNO
	SnoFogOfWar                DT_SNO
	ArSubzones                 DT_VARIABLEARRAY[*DT_SNO]
	PtData                     DT_POLYMORPHIC_VARIABLEARRAY[*GlobalMarkerActorData]
}

func (t *GlobalMarkerActor) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoMarkerSet, r, &Options{
		Flags: 513,
		Group: 24,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.SzMarkerName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwMarkerPathID, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.SnoActor, r, &Options{
		Flags: 513,
		Group: 1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.EActorType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.EGizmoType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SnoWorld, r, &Options{
		Flags: 513,
		Group: 48,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.TWorldTransform, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.SnoCampaignEnableCondition, r, &Options{
		Flags: 513,
		Group: 51,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+60, &t.SnoLevelArea, r, &Options{
		Flags: 513,
		Group: 22,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.SnoFogOfWar, r, &Options{
		Flags: 513,
		Group: 123,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.ArSubzones, r, &Options{
		Flags: 513,
		Group: 80,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.PtData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+112, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *GlobalMarkerActor) Walk(cb WalkCallback, d ...any) {
	cb.Do("SnoMarkerSet", &t.SnoMarkerSet, d...)
	cb.Do("SzMarkerName", &t.SzMarkerName, d...)
	cb.Do("DwMarkerPathID", &t.DwMarkerPathID, d...)
	cb.Do("SnoActor", &t.SnoActor, d...)
	cb.Do("EActorType", &t.EActorType, d...)
	cb.Do("EGizmoType", &t.EGizmoType, d...)
	cb.Do("SnoWorld", &t.SnoWorld, d...)
	cb.Do("TWorldTransform", &t.TWorldTransform, d...)
	cb.Do("SnoCampaignEnableCondition", &t.SnoCampaignEnableCondition, d...)
	cb.Do("SnoLevelArea", &t.SnoLevelArea, d...)
	cb.Do("SnoFogOfWar", &t.SnoFogOfWar, d...)
	cb.Do("ArSubzones", &t.ArSubzones, d...)
	cb.Do("PtData", &t.PtData, d...)
}

type ConversationDefinition struct {
	EConvType               DT_ENUM
	Unk_1fd072a             DT_SNO
	Unk_951e771             DT_SNO
	SnoConversationFollowup DT_SNO
	FlCooldownTime          DT_FLOAT
	FlCancelDistance        DT_FLOAT
	BFadeAtStart            DT_INT
	BFadeAtEnd              DT_INT
	BJournalVO              DT_INT
	Unk_ac91f5d             DT_INT
	Unk_e1d8535             DT_INT
	BBookendConversation    DT_INT
	BIsInterruptible        DT_INT
	Unk_f4b6cde             Type_56ff7d6a
	DwFlags                 DT_UINT
	ArRootNodes             DT_POLYMORPHIC_VARIABLEARRAY[*DT_INT64]
	SzSetPlayerFlag         DT_CHARARRAY
	DwNextNodeID            DT_UINT
}

func (t *ConversationDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.EConvType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.Unk_1fd072a, r, &Options{
		Flags: 1,
		Group: 31,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_951e771, r, &Options{
		Flags: 1,
		Group: 31,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.SnoConversationFollowup, r, &Options{
		Flags: 1,
		Group: 12,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.FlCooldownTime, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.FlCancelDistance, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.BFadeAtStart, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.BFadeAtEnd, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.BJournalVO, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.Unk_ac91f5d, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.Unk_e1d8535, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.BBookendConversation, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.BIsInterruptible, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.Unk_f4b6cde, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.DwFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.ArRootNodes, r, &Options{Flags: 262145}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.SzSetPlayerFlag, r, &Options{
		ArrayLength: 128,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+240, &t.DwNextNodeID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+248, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ConversationDefinition) Walk(cb WalkCallback, d ...any) {
	cb.Do("EConvType", &t.EConvType, d...)
	cb.Do("Unk_1fd072a", &t.Unk_1fd072a, d...)
	cb.Do("Unk_951e771", &t.Unk_951e771, d...)
	cb.Do("SnoConversationFollowup", &t.SnoConversationFollowup, d...)
	cb.Do("FlCooldownTime", &t.FlCooldownTime, d...)
	cb.Do("FlCancelDistance", &t.FlCancelDistance, d...)
	cb.Do("BFadeAtStart", &t.BFadeAtStart, d...)
	cb.Do("BFadeAtEnd", &t.BFadeAtEnd, d...)
	cb.Do("BJournalVO", &t.BJournalVO, d...)
	cb.Do("Unk_ac91f5d", &t.Unk_ac91f5d, d...)
	cb.Do("Unk_e1d8535", &t.Unk_e1d8535, d...)
	cb.Do("BBookendConversation", &t.BBookendConversation, d...)
	cb.Do("BIsInterruptible", &t.BIsInterruptible, d...)
	cb.Do("Unk_f4b6cde", &t.Unk_f4b6cde, d...)
	cb.Do("DwFlags", &t.DwFlags, d...)
	cb.Do("ArRootNodes", &t.ArRootNodes, d...)
	cb.Do("SzSetPlayerFlag", &t.SzSetPlayerFlag, d...)
	cb.Do("DwNextNodeID", &t.DwNextNodeID, d...)
}

type UIProgressBarStyle struct {
	// Inherits UIWindowStyle
	// Inherits UIControlStyle
	// Inherits PolymorphicBase
	DwType                    DT_UINT
	DwPad                     DT_UINT
	HParentStyle              UIControlHandle
	Unk_441f783               DT_INT64
	M_eHasModifiedPowerTagMap DT_TAGMAP[*DT_ENUM]
	TConsoleInput             UIControlConsoleInput
	Unk_b4f614c               DT_TAGMAP[*DT_ENUM]
	TProgressBarBase          UIProgressBarBase
	Unk_a229fbe               DT_TAGMAP[*DT_ENUM]
}

func (t *UIProgressBarStyle) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.HParentStyle, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_441f783, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.M_eHasModifiedPowerTagMap, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.TConsoleInput, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.Unk_b4f614c, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.TProgressBarBase, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.Unk_a229fbe, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+112, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *UIProgressBarStyle) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("HParentStyle", &t.HParentStyle, d...)
	cb.Do("Unk_441f783", &t.Unk_441f783, d...)
	cb.Do("M_eHasModifiedPowerTagMap", &t.M_eHasModifiedPowerTagMap, d...)
	cb.Do("TConsoleInput", &t.TConsoleInput, d...)
	cb.Do("Unk_b4f614c", &t.Unk_b4f614c, d...)
	cb.Do("TProgressBarBase", &t.TProgressBarBase, d...)
	cb.Do("Unk_a229fbe", &t.Unk_a229fbe, d...)
}

type PayloadOnHitMessage struct {
	THeader                         RequiredMessageHeader
	SnoPower                        DT_SNO
	DwPayloadDataID                 DT_UINT
	EDamageType                     DT_ENUM
	AnnTarget                       DT_ACD_NETWORK_NAME
	AnnAttacker                     DT_ACD_NETWORK_NAME
	BTargetAlive                    DT_INT
	EHitSound                       DT_OPTIONAL[*DT_ENUM]
	ELayeredHitSound                DT_OPTIONAL[*DT_ENUM]
	OnHitSounds                     DT_OPTIONAL[*OnHitSounds]
	VLocalImpactPos                 DT_OPTIONAL[*DT_VECTOR3D]
	VProjectileImpactDirection      DT_OPTIONAL[*DT_VECTOR3D]
	FlImpactDirection               DT_OPTIONAL[*DT_FLOAT]
	FlImpactPitch                   DT_OPTIONAL[*DT_FLOAT]
	SnoItemTypeMainHand             DT_OPTIONAL[*DT_SNO]
	SnoItemTypeOffHand              DT_OPTIONAL[*DT_SNO]
	SnoEffectNormalHitOverride      DT_OPTIONAL[*DT_SNO]
	SnoEffectDirectionalHitOverride DT_OPTIONAL[*DT_SNO]
	Unk_563f3e                      DT_OPTIONAL[*DT_ENUM]
	FlDamageUnscaled                DT_OPTIONAL[*DT_FLOAT]
	DwEffectFlags                   DT_OPTIONAL[*DT_UINT]
}

func (t *PayloadOnHitMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoPower, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPayloadDataID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.EDamageType, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.AnnTarget, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.AnnAttacker, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.BTargetAlive, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.EHitSound, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.ELayeredHitSound, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.OnHitSounds, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.VLocalImpactPos, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.VProjectileImpactDirection, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.FlImpactDirection, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.FlImpactPitch, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.SnoItemTypeMainHand, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+136, &t.SnoItemTypeOffHand, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+144, &t.SnoEffectNormalHitOverride, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+152, &t.SnoEffectDirectionalHitOverride, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+160, &t.Unk_563f3e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+168, &t.FlDamageUnscaled, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+176, &t.DwEffectFlags, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+184, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PayloadOnHitMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("SnoPower", &t.SnoPower, d...)
	cb.Do("DwPayloadDataID", &t.DwPayloadDataID, d...)
	cb.Do("EDamageType", &t.EDamageType, d...)
	cb.Do("AnnTarget", &t.AnnTarget, d...)
	cb.Do("AnnAttacker", &t.AnnAttacker, d...)
	cb.Do("BTargetAlive", &t.BTargetAlive, d...)
	cb.Do("EHitSound", &t.EHitSound, d...)
	cb.Do("ELayeredHitSound", &t.ELayeredHitSound, d...)
	cb.Do("OnHitSounds", &t.OnHitSounds, d...)
	cb.Do("VLocalImpactPos", &t.VLocalImpactPos, d...)
	cb.Do("VProjectileImpactDirection", &t.VProjectileImpactDirection, d...)
	cb.Do("FlImpactDirection", &t.FlImpactDirection, d...)
	cb.Do("FlImpactPitch", &t.FlImpactPitch, d...)
	cb.Do("SnoItemTypeMainHand", &t.SnoItemTypeMainHand, d...)
	cb.Do("SnoItemTypeOffHand", &t.SnoItemTypeOffHand, d...)
	cb.Do("SnoEffectNormalHitOverride", &t.SnoEffectNormalHitOverride, d...)
	cb.Do("SnoEffectDirectionalHitOverride", &t.SnoEffectDirectionalHitOverride, d...)
	cb.Do("Unk_563f3e", &t.Unk_563f3e, d...)
	cb.Do("FlDamageUnscaled", &t.FlDamageUnscaled, d...)
	cb.Do("DwEffectFlags", &t.DwEffectFlags, d...)
}

type Type_c69c1754 struct {
	THeader RequiredMessageHeader
	SzText  DT_CHARARRAY
}

func (t *Type_c69c1754) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SzText, r, &Options{
		ArrayLength: 350,
		Flags:       1,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+368, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_c69c1754) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("SzText", &t.SzText, d...)
}

type Rect2D struct {
	Left   DT_FLOAT
	Top    DT_FLOAT
	Right  DT_FLOAT
	Bottom DT_FLOAT
}

func (t *Rect2D) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Left, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.Top, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.Right, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.Bottom, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Rect2D) Walk(cb WalkCallback, d ...any) {
	cb.Do("Left", &t.Left, d...)
	cb.Do("Top", &t.Top, d...)
	cb.Do("Right", &t.Right, d...)
	cb.Do("Bottom", &t.Bottom, d...)
}

type ScriptedAchievementEvent struct {
	THeader GBIDHeader
}

func (t *ScriptedAchievementEvent) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+260, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ScriptedAchievementEvent) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
}

type NPCServiceData struct {
	EServiceType              DT_ENUM
	EVendorType               DT_ENUM
	ECrafterType              DT_ENUM
	FlPriceMarkup             DT_FLOAT
	ECurrencyType             DT_ENUM
	Unk_299f311               DT_INT
	SnoClassPassiveReputation DT_SNO
	EDruidSpiritType          DT_ENUM
	HSpiritIcon               DT_UINT
	HSpiritBondIcon           DT_UINT
}

func (t *NPCServiceData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.EServiceType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.EVendorType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.ECrafterType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.FlPriceMarkup, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.ECurrencyType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.Unk_299f311, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SnoClassPassiveReputation, r, &Options{
		Flags: 1,
		Group: 105,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.EDruidSpiritType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.HSpiritIcon, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.HSpiritBondIcon, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+40, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *NPCServiceData) Walk(cb WalkCallback, d ...any) {
	cb.Do("EServiceType", &t.EServiceType, d...)
	cb.Do("EVendorType", &t.EVendorType, d...)
	cb.Do("ECrafterType", &t.ECrafterType, d...)
	cb.Do("FlPriceMarkup", &t.FlPriceMarkup, d...)
	cb.Do("ECurrencyType", &t.ECurrencyType, d...)
	cb.Do("Unk_299f311", &t.Unk_299f311, d...)
	cb.Do("SnoClassPassiveReputation", &t.SnoClassPassiveReputation, d...)
	cb.Do("EDruidSpiritType", &t.EDruidSpiritType, d...)
	cb.Do("HSpiritIcon", &t.HSpiritIcon, d...)
	cb.Do("HSpiritBondIcon", &t.HSpiritBondIcon, d...)
}

type ClassInfoPlayStyle struct {
	HIcon        DT_UINT
	HTitle       DT_UINT
	HDescription DT_UINT
}

func (t *ClassInfoPlayStyle) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.HIcon, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.HTitle, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.HDescription, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+12, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ClassInfoPlayStyle) Walk(cb WalkCallback, d ...any) {
	cb.Do("HIcon", &t.HIcon, d...)
	cb.Do("HTitle", &t.HTitle, d...)
	cb.Do("HDescription", &t.HDescription, d...)
}

type UICutsceneStyle struct {
	// Inherits UIWindowStyle
	// Inherits UIControlStyle
	// Inherits PolymorphicBase
	DwType                    DT_UINT
	DwPad                     DT_UINT
	HParentStyle              UIControlHandle
	Unk_441f783               DT_INT64
	M_eHasModifiedPowerTagMap DT_TAGMAP[*DT_ENUM]
	TConsoleInput             UIControlConsoleInput
	Unk_b4f614c               DT_TAGMAP[*DT_ENUM]
}

func (t *UICutsceneStyle) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.HParentStyle, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_441f783, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.M_eHasModifiedPowerTagMap, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.TConsoleInput, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.Unk_b4f614c, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+80, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *UICutsceneStyle) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("HParentStyle", &t.HParentStyle, d...)
	cb.Do("Unk_441f783", &t.Unk_441f783, d...)
	cb.Do("M_eHasModifiedPowerTagMap", &t.M_eHasModifiedPowerTagMap, d...)
	cb.Do("TConsoleInput", &t.TConsoleInput, d...)
	cb.Do("Unk_b4f614c", &t.Unk_b4f614c, d...)
}

type ActorJitterJoint struct {
	SzBoneName       DT_UINT
	FlJitterStrength DT_FLOAT
	FlJitterSpeed    DT_FLOAT
	FlBlendOutTime   DT_FLOAT
	FlDuration       DT_FLOAT
}

func (t *ActorJitterJoint) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SzBoneName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.FlJitterStrength, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.FlJitterSpeed, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.FlBlendOutTime, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.FlDuration, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+20, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ActorJitterJoint) Walk(cb WalkCallback, d ...any) {
	cb.Do("SzBoneName", &t.SzBoneName, d...)
	cb.Do("FlJitterStrength", &t.FlJitterStrength, d...)
	cb.Do("FlJitterSpeed", &t.FlJitterSpeed, d...)
	cb.Do("FlBlendOutTime", &t.FlBlendOutTime, d...)
	cb.Do("FlDuration", &t.FlDuration, d...)
}

type StackPortionMessage struct {
	THeader RequiredMessageHeader
	AnnItem DT_ACD_NETWORK_NAME
	UAmount DT_INT64
}

func (t *StackPortionMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.AnnItem, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.UAmount, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *StackPortionMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("AnnItem", &t.AnnItem, d...)
	cb.Do("UAmount", &t.UAmount, d...)
}

type GameTestingCraftItem struct {
	THeader      RequiredMessageHeader
	NCrafterType DT_INT
}

func (t *GameTestingCraftItem) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.NCrafterType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+20, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *GameTestingCraftItem) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("NCrafterType", &t.NCrafterType, d...)
}

type ACDInventoryPositionMessage struct {
	THeader          RequiredMessageHeader
	Ann              DT_ACD_NETWORK_NAME
	TInvLocationData InventoryLocationMessageData
	TLocType         DT_ENUM
	Unk_9e938b5      DT_OPTIONAL[*DT_INT64]
}

func (t *ACDInventoryPositionMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Ann, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.TInvLocationData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.TLocType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.Unk_9e938b5, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+64, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ACDInventoryPositionMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("Ann", &t.Ann, d...)
	cb.Do("TInvLocationData", &t.TInvLocationData, d...)
	cb.Do("TLocType", &t.TLocType, d...)
	cb.Do("Unk_9e938b5", &t.Unk_9e938b5, d...)
}

type CrafterDefinition struct {
	DwNextID                    DT_UINT
	ECrafterType                DT_ENUM
	Unk_203acd1                 DT_INT
	ArCrafterTabs               DT_VARIABLEARRAY[*CrafterTab]
	SzRootUIName                DT_CSTRING[*DT_BYTE]
	Unk_9ea0bb7                 DT_CSTRING[*DT_BYTE]
	Unk_c2fc45c                 DT_CSTRING[*DT_BYTE]
	SzPanelContainerName        DT_CSTRING[*DT_BYTE]
	SzTabContainerName          DT_CSTRING[*DT_BYTE]
	Unk_393abdd                 DT_CSTRING[*DT_BYTE]
	SzMaterialCostContainerName DT_CSTRING[*DT_BYTE]
	HCrafterIcon                DT_UINT
	ArRecipeTiers               DT_VARIABLEARRAY[*RecipeTier]
	ArImbueRecipes              DT_VARIABLEARRAY[*ImbueRecipe]
	Unk_aa9dad7                 DT_VARIABLEARRAY[*ImbueRecipe]
	ArCrafterLockConditions     DT_VARIABLEARRAY[*ConditionData]
	SnoOnOpenSound              DT_SNO
}

func (t *CrafterDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwNextID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.ECrafterType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_203acd1, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ArCrafterTabs, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.SzRootUIName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.Unk_9ea0bb7, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_c2fc45c, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.SzPanelContainerName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+104, &t.SzTabContainerName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.Unk_393abdd, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+136, &t.SzMaterialCostContainerName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+152, &t.HCrafterIcon, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+160, &t.ArRecipeTiers, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+176, &t.ArImbueRecipes, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+192, &t.Unk_aa9dad7, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+208, &t.ArCrafterLockConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+224, &t.SnoOnOpenSound, r, &Options{
		Flags: 1,
		Group: 40,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+232, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *CrafterDefinition) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwNextID", &t.DwNextID, d...)
	cb.Do("ECrafterType", &t.ECrafterType, d...)
	cb.Do("Unk_203acd1", &t.Unk_203acd1, d...)
	cb.Do("ArCrafterTabs", &t.ArCrafterTabs, d...)
	cb.Do("SzRootUIName", &t.SzRootUIName, d...)
	cb.Do("Unk_9ea0bb7", &t.Unk_9ea0bb7, d...)
	cb.Do("Unk_c2fc45c", &t.Unk_c2fc45c, d...)
	cb.Do("SzPanelContainerName", &t.SzPanelContainerName, d...)
	cb.Do("SzTabContainerName", &t.SzTabContainerName, d...)
	cb.Do("Unk_393abdd", &t.Unk_393abdd, d...)
	cb.Do("SzMaterialCostContainerName", &t.SzMaterialCostContainerName, d...)
	cb.Do("HCrafterIcon", &t.HCrafterIcon, d...)
	cb.Do("ArRecipeTiers", &t.ArRecipeTiers, d...)
	cb.Do("ArImbueRecipes", &t.ArImbueRecipes, d...)
	cb.Do("Unk_aa9dad7", &t.Unk_aa9dad7, d...)
	cb.Do("ArCrafterLockConditions", &t.ArCrafterLockConditions, d...)
	cb.Do("SnoOnOpenSound", &t.SnoOnOpenSound, d...)
}

type RenderParams struct {
	Unk_e80141f                  DT_INT
	ECullMode                    DT_ENUM
	FZBufferWriteEnable          DT_INT
	EZBufferCompareFunc          DT_ENUM
	FlZBias                      DT_FLOAT
	FlZSlopeScaleBias            DT_FLOAT
	TStencilParams               StencilParams
	FAlphaTestEnable             DT_INT
	EAlphaTestCompareFunc        DT_ENUM
	BAlphaTestRefValue           DT_BYTE
	FAlphaMaskEnable             DT_INT
	EFillMode                    DT_ENUM
	FIndependentAlphaBlendEnable DT_INT
	TAlphaBlend                  DT_FIXEDARRAY[*AlphaBlendFactors]
}

func (t *RenderParams) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Unk_e80141f, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.ECullMode, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.FZBufferWriteEnable, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.EZBufferCompareFunc, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.FlZBias, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.FlZSlopeScaleBias, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.TStencilParams, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.FAlphaTestEnable, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.EAlphaTestCompareFunc, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.BAlphaTestRefValue, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.FAlphaMaskEnable, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.EFillMode, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.FIndependentAlphaBlendEnable, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.TAlphaBlend, r, &Options{
		ArrayLength: 6,
		Flags:       1,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+384, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *RenderParams) Walk(cb WalkCallback, d ...any) {
	cb.Do("Unk_e80141f", &t.Unk_e80141f, d...)
	cb.Do("ECullMode", &t.ECullMode, d...)
	cb.Do("FZBufferWriteEnable", &t.FZBufferWriteEnable, d...)
	cb.Do("EZBufferCompareFunc", &t.EZBufferCompareFunc, d...)
	cb.Do("FlZBias", &t.FlZBias, d...)
	cb.Do("FlZSlopeScaleBias", &t.FlZSlopeScaleBias, d...)
	cb.Do("TStencilParams", &t.TStencilParams, d...)
	cb.Do("FAlphaTestEnable", &t.FAlphaTestEnable, d...)
	cb.Do("EAlphaTestCompareFunc", &t.EAlphaTestCompareFunc, d...)
	cb.Do("BAlphaTestRefValue", &t.BAlphaTestRefValue, d...)
	cb.Do("FAlphaMaskEnable", &t.FAlphaMaskEnable, d...)
	cb.Do("EFillMode", &t.EFillMode, d...)
	cb.Do("FIndependentAlphaBlendEnable", &t.FIndependentAlphaBlendEnable, d...)
	cb.Do("TAlphaBlend", &t.TAlphaBlend, d...)
}

type BoneStructure struct {
	PtShapes             DT_VARIABLEARRAY[*CollisionShape]
	PtConstraint         DT_VARIABLEARRAY[*ConstraintParameters]
	DwHash               DT_UINT
	DwFlags              DT_UINT
	NParentIndex         DT_WORD
	NLOD                 DT_WORD
	NTrueBoneLOD         DT_WORD
	Unk_b03b557          DT_WORD
	SnoParticleSystem    DT_SNO
	WsBounds             Sphere
	Transform            PRSTransform
	TransformInv         PRSTransform
	TransformParentRel   PRSTransform
	TransformSkinningInv PRSTransform
}

func (t *BoneStructure) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.PtShapes, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.PtConstraint, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.DwHash, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.DwFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.NParentIndex, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+42, &t.NLOD, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.NTrueBoneLOD, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+46, &t.Unk_b03b557, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.SnoParticleSystem, r, &Options{
		Flags: 1,
		Group: 27,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.WsBounds, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.Transform, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+108, &t.TransformInv, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+148, &t.TransformParentRel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+188, &t.TransformSkinningInv, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+232, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *BoneStructure) Walk(cb WalkCallback, d ...any) {
	cb.Do("PtShapes", &t.PtShapes, d...)
	cb.Do("PtConstraint", &t.PtConstraint, d...)
	cb.Do("DwHash", &t.DwHash, d...)
	cb.Do("DwFlags", &t.DwFlags, d...)
	cb.Do("NParentIndex", &t.NParentIndex, d...)
	cb.Do("NLOD", &t.NLOD, d...)
	cb.Do("NTrueBoneLOD", &t.NTrueBoneLOD, d...)
	cb.Do("Unk_b03b557", &t.Unk_b03b557, d...)
	cb.Do("SnoParticleSystem", &t.SnoParticleSystem, d...)
	cb.Do("WsBounds", &t.WsBounds, d...)
	cb.Do("Transform", &t.Transform, d...)
	cb.Do("TransformInv", &t.TransformInv, d...)
	cb.Do("TransformParentRel", &t.TransformParentRel, d...)
	cb.Do("TransformSkinningInv", &t.TransformSkinningInv, d...)
}

type SeasonDefinition struct {
	SnoStartingSubzone        DT_SNO
	USeasonFeature            DT_UINT
	ArWorldTiers              DT_FIXEDARRAY[*SeasonWorldTierData]
	TMalignantGeneralData     MalignantGeneralData
	Unk_9b70c7c               DT_VARIABLEARRAY[*DT_ENUM]
	Unk_f4e4263               DT_VARIABLEARRAY[*Type_e243df90]
	TFavorTableData           DT_SNO
	TFavorData                DT_GBID
	TBlessingData             SeasonJourneyBlessingData
	ArBlessings               DT_VARIABLEARRAY[*DT_GBID]
	ArAspectAchievements      DT_VARIABLEARRAY[*DT_SNO]
	Unk_b4c7436               DT_VARIABLEARRAY[*DT_INT]
	SnoPremiumPass            DT_SNO
	SnoAcceleratedPass        DT_SNO
	Unk_88877af               DT_SNO
	SnoChapters               DT_SNO
	SnoRewardTrack            DT_SNO
	Unk_8b03de5               DT_FLOAT
	Unk_6bbede7               DT_FLOAT
	Unk_9787190               DT_UINT
	Unk_86b7fa5               DT_UINT
	ArArmorPactTypeWeights    DT_VARIABLEARRAY[*ArmorPactTypeWeight]
	Unk_feddefe               DT_VARIABLEARRAY[*Type_f47ac7d8]
	Unk_1d51527               DT_UINT
	Unk_beb1b2b               DT_UINT
	Unk_eb254d                DT_VARIABLEARRAY[*DT_INT]
	SnoArmorPactDropCondition DT_SNO
	ArSeasonalDungeonStates   DT_VARIABLEARRAY[*SeasonalDungeonState]
	Unk_2a18454               DT_VARIABLEARRAY[*SeasonalDungeonState]
	ArSeasonalDungeonAffixes  DT_VARIABLEARRAY[*DT_SNO]
	HSeasonInfoImage          DT_UINT
	Unk_3708d9d               DT_SNO
	SnoSeasonalTabCondition   DT_SNO
}

func (t *SeasonDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.SnoStartingSubzone, r, &Options{
		Flags: 513,
		Group: 80,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.USeasonFeature, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.ArWorldTiers, r, &Options{
		ArrayLength: 4,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.TMalignantGeneralData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+144, &t.Unk_9b70c7c, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+160, &t.Unk_f4e4263, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+176, &t.TFavorTableData, r, &Options{
		Flags: 1,
		Group: 20,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+180, &t.TFavorData, r, &Options{
		Flags: 1,
		Group: 70,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+184, &t.TBlessingData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+200, &t.ArBlessings, r, &Options{
		Flags: 1,
		Group: 67,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+216, &t.ArAspectAchievements, r, &Options{
		Flags: 1,
		Group: 99,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+232, &t.Unk_b4c7436, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+248, &t.SnoPremiumPass, r, &Options{
		Flags: 1,
		Group: 110,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+252, &t.SnoAcceleratedPass, r, &Options{
		Flags: 1,
		Group: 110,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+256, &t.Unk_88877af, r, &Options{
		Flags: 1,
		Group: 110,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+260, &t.SnoChapters, r, &Options{
		Flags: 1,
		Group: 114,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+264, &t.SnoRewardTrack, r, &Options{
		Flags: 1,
		Group: 114,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+268, &t.Unk_8b03de5, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+272, &t.Unk_6bbede7, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+276, &t.Unk_9787190, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+280, &t.Unk_86b7fa5, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+288, &t.ArArmorPactTypeWeights, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+304, &t.Unk_feddefe, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+320, &t.Unk_1d51527, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+324, &t.Unk_beb1b2b, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+328, &t.Unk_eb254d, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+344, &t.SnoArmorPactDropCondition, r, &Options{
		Flags: 1,
		Group: 51,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+352, &t.ArSeasonalDungeonStates, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+368, &t.Unk_2a18454, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+384, &t.ArSeasonalDungeonAffixes, r, &Options{
		Flags: 1,
		Group: 135,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+400, &t.HSeasonInfoImage, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+404, &t.Unk_3708d9d, r, &Options{
		Flags: 1,
		Group: 63,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+408, &t.SnoSeasonalTabCondition, r, &Options{
		Flags: 1,
		Group: 51,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+416, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *SeasonDefinition) Walk(cb WalkCallback, d ...any) {
	cb.Do("SnoStartingSubzone", &t.SnoStartingSubzone, d...)
	cb.Do("USeasonFeature", &t.USeasonFeature, d...)
	cb.Do("ArWorldTiers", &t.ArWorldTiers, d...)
	cb.Do("TMalignantGeneralData", &t.TMalignantGeneralData, d...)
	cb.Do("Unk_9b70c7c", &t.Unk_9b70c7c, d...)
	cb.Do("Unk_f4e4263", &t.Unk_f4e4263, d...)
	cb.Do("TFavorTableData", &t.TFavorTableData, d...)
	cb.Do("TFavorData", &t.TFavorData, d...)
	cb.Do("TBlessingData", &t.TBlessingData, d...)
	cb.Do("ArBlessings", &t.ArBlessings, d...)
	cb.Do("ArAspectAchievements", &t.ArAspectAchievements, d...)
	cb.Do("Unk_b4c7436", &t.Unk_b4c7436, d...)
	cb.Do("SnoPremiumPass", &t.SnoPremiumPass, d...)
	cb.Do("SnoAcceleratedPass", &t.SnoAcceleratedPass, d...)
	cb.Do("Unk_88877af", &t.Unk_88877af, d...)
	cb.Do("SnoChapters", &t.SnoChapters, d...)
	cb.Do("SnoRewardTrack", &t.SnoRewardTrack, d...)
	cb.Do("Unk_8b03de5", &t.Unk_8b03de5, d...)
	cb.Do("Unk_6bbede7", &t.Unk_6bbede7, d...)
	cb.Do("Unk_9787190", &t.Unk_9787190, d...)
	cb.Do("Unk_86b7fa5", &t.Unk_86b7fa5, d...)
	cb.Do("ArArmorPactTypeWeights", &t.ArArmorPactTypeWeights, d...)
	cb.Do("Unk_feddefe", &t.Unk_feddefe, d...)
	cb.Do("Unk_1d51527", &t.Unk_1d51527, d...)
	cb.Do("Unk_beb1b2b", &t.Unk_beb1b2b, d...)
	cb.Do("Unk_eb254d", &t.Unk_eb254d, d...)
	cb.Do("SnoArmorPactDropCondition", &t.SnoArmorPactDropCondition, d...)
	cb.Do("ArSeasonalDungeonStates", &t.ArSeasonalDungeonStates, d...)
	cb.Do("Unk_2a18454", &t.Unk_2a18454, d...)
	cb.Do("ArSeasonalDungeonAffixes", &t.ArSeasonalDungeonAffixes, d...)
	cb.Do("HSeasonInfoImage", &t.HSeasonInfoImage, d...)
	cb.Do("Unk_3708d9d", &t.Unk_3708d9d, d...)
	cb.Do("SnoSeasonalTabCondition", &t.SnoSeasonalTabCondition, d...)
}

type PlayerFlagSubcondition struct {
	// Inherits Subcondition
	// Inherits PolymorphicBase
	DwType  DT_UINT
	BNegate DT_INT
	DwPad   DT_UINT
	SzLabel DT_CHARARRAY
}

func (t *PlayerFlagSubcondition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BNegate, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SzLabel, r, &Options{
		ArrayLength: 128,
		Flags:       1,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+152, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PlayerFlagSubcondition) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("BNegate", &t.BNegate, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("SzLabel", &t.SzLabel, d...)
}

type TransmogSlotData struct {
	ESlot                 DT_ENUM
	SnoTransmogSourceItem DT_SNO
	SnoDye                DT_SNO
	BRemove               DT_INT
}

func (t *TransmogSlotData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.ESlot, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.SnoTransmogSourceItem, r, &Options{
		Flags: 1,
		Group: 73,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.SnoDye, r, &Options{
		Flags: 1,
		Group: 122,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.BRemove, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TransmogSlotData) Walk(cb WalkCallback, d ...any) {
	cb.Do("ESlot", &t.ESlot, d...)
	cb.Do("SnoTransmogSourceItem", &t.SnoTransmogSourceItem, d...)
	cb.Do("SnoDye", &t.SnoDye, d...)
	cb.Do("BRemove", &t.BRemove, d...)
}

type UIButtonStyle struct {
	// Inherits UITextStyle
	// Inherits UIWindowStyle
	// Inherits UIControlStyle
	// Inherits PolymorphicBase
	DwType                      DT_UINT
	DwPad                       DT_UINT
	HParentStyle                UIControlHandle
	Unk_441f783                 DT_INT64
	M_eHasModifiedPowerTagMap   DT_TAGMAP[*DT_ENUM]
	TConsoleInput               UIControlConsoleInput
	Unk_b4f614c                 DT_TAGMAP[*DT_ENUM]
	TFont                       UIControlFont
	PtUIControlTagMapIconLabels DT_TAGMAP[*DT_ENUM]
	TIcon                       UIControlIcon
	TClickSounds                UIControlClickSounds
	Unk_10f81f0                 DT_TAGMAP[*DT_ENUM]
}

func (t *UIButtonStyle) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.HParentStyle, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_441f783, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.M_eHasModifiedPowerTagMap, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.TConsoleInput, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.Unk_b4f614c, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.TFont, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.PtUIControlTagMapIconLabels, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.TIcon, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.TClickSounds, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+144, &t.Unk_10f81f0, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+160, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *UIButtonStyle) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("HParentStyle", &t.HParentStyle, d...)
	cb.Do("Unk_441f783", &t.Unk_441f783, d...)
	cb.Do("M_eHasModifiedPowerTagMap", &t.M_eHasModifiedPowerTagMap, d...)
	cb.Do("TConsoleInput", &t.TConsoleInput, d...)
	cb.Do("Unk_b4f614c", &t.Unk_b4f614c, d...)
	cb.Do("TFont", &t.TFont, d...)
	cb.Do("PtUIControlTagMapIconLabels", &t.PtUIControlTagMapIconLabels, d...)
	cb.Do("TIcon", &t.TIcon, d...)
	cb.Do("TClickSounds", &t.TClickSounds, d...)
	cb.Do("Unk_10f81f0", &t.Unk_10f81f0, d...)
}

type TriggerEventAttachCamera struct {
	// Inherits TriggerEventRangedDuration
	// Inherits TriggerEvent
	// Inherits PolymorphicBase
	DwType               DT_UINT
	TConditions          TriggerConditions
	FGenerated           DT_INT
	Unk_6cba752          DT_INT
	DwParentActorID      DT_UINT
	TDuration            DT_FLOAT
	DwTriggerFlags       DT_UINT
	DwTriggerFlagsEx     DT_UINT
	TCleanup             TriggerCleanup
	Unk_49e9257          DT_INT
	Unk_5490979          DT_INT
	DwPad                DT_UINT
	EObjectType          DT_ENUM
	THardpointLinkTarget HardpointLink
	DwObjectID           DT_UINT
	THardpointLink       HardpointLink
	Unk_896cea7          DT_INT
	Unk_454a2a1          DT_INT
	EBlendEasing         DT_ENUM
	Unk_10734fd          Type_e97cce1f
}

func (t *TriggerEventAttachCamera) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.FGenerated, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_6cba752, r, &Options{Flags: 16}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.DwParentActorID, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.TDuration, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.DwTriggerFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.DwTriggerFlagsEx, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.TCleanup, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+116, &t.Unk_49e9257, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.Unk_5490979, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+124, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.EObjectType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+132, &t.THardpointLinkTarget, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+140, &t.DwObjectID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+144, &t.THardpointLink, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+152, &t.Unk_896cea7, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+156, &t.Unk_454a2a1, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+160, &t.EBlendEasing, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+164, &t.Unk_10734fd, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+176, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TriggerEventAttachCamera) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("TConditions", &t.TConditions, d...)
	cb.Do("FGenerated", &t.FGenerated, d...)
	cb.Do("Unk_6cba752", &t.Unk_6cba752, d...)
	cb.Do("DwParentActorID", &t.DwParentActorID, d...)
	cb.Do("TDuration", &t.TDuration, d...)
	cb.Do("DwTriggerFlags", &t.DwTriggerFlags, d...)
	cb.Do("DwTriggerFlagsEx", &t.DwTriggerFlagsEx, d...)
	cb.Do("TCleanup", &t.TCleanup, d...)
	cb.Do("Unk_49e9257", &t.Unk_49e9257, d...)
	cb.Do("Unk_5490979", &t.Unk_5490979, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("EObjectType", &t.EObjectType, d...)
	cb.Do("THardpointLinkTarget", &t.THardpointLinkTarget, d...)
	cb.Do("DwObjectID", &t.DwObjectID, d...)
	cb.Do("THardpointLink", &t.THardpointLink, d...)
	cb.Do("Unk_896cea7", &t.Unk_896cea7, d...)
	cb.Do("Unk_454a2a1", &t.Unk_454a2a1, d...)
	cb.Do("EBlendEasing", &t.EBlendEasing, d...)
	cb.Do("Unk_10734fd", &t.Unk_10734fd, d...)
}

type TriggerEventOutroAllObjects struct {
	// Inherits TriggerEvent
	// Inherits PolymorphicBase
	DwType          DT_UINT
	DwPad           DT_UINT
	TConditions     TriggerConditions
	FGenerated      DT_INT
	Unk_6cba752     DT_INT
	DwParentActorID DT_UINT
}

func (t *TriggerEventOutroAllObjects) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.FGenerated, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_6cba752, r, &Options{Flags: 16}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.DwParentActorID, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+80, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TriggerEventOutroAllObjects) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("TConditions", &t.TConditions, d...)
	cb.Do("FGenerated", &t.FGenerated, d...)
	cb.Do("Unk_6cba752", &t.Unk_6cba752, d...)
	cb.Do("DwParentActorID", &t.DwParentActorID, d...)
}

type EffectGroupPositionZKeyData struct {
	// Inherits EffectGroupKeyData
	// Inherits PolymorphicBase
	DwType     DT_UINT
	DwPad      DT_UINT
	ArKeyItems DT_VARIABLEARRAY[*EffectGroupKey]
}

func (t *EffectGroupPositionZKeyData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.ArKeyItems, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *EffectGroupPositionZKeyData) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("ArKeyItems", &t.ArKeyItems, d...)
}

type Type_c8d78ce7 struct {
	NWidth       DT_INT
	NHeight      DT_INT
	NDepth       DT_INT
	DwPitch      DT_UINT
	DwSlicePitch DT_UINT
	FlGridSize   DT_FLOAT
	WpOrigin     DT_VECTOR3D
	Unk_4b236f4  DT_INT64
	Unk_aa0958e  DT_VARIABLEARRAY[*DT_WORD]
	Unk_aa09583  DT_VARIABLEARRAY[*DT_WORD]
	Unk_aa0957e  DT_VARIABLEARRAY[*DT_WORD]
	Unk_dd3cf4b  DT_VARIABLEARRAY[*DT_WORD]
	Unk_dd3cf40  DT_VARIABLEARRAY[*DT_WORD]
	Unk_dd3cf3b  DT_VARIABLEARRAY[*DT_WORD]
}

func (t *Type_c8d78ce7) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.NWidth, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.NHeight, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.NDepth, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPitch, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.DwSlicePitch, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.FlGridSize, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.WpOrigin, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.Unk_4b236f4, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.Unk_aa0958e, r, &Options{Flags: 2097153}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.Unk_aa09583, r, &Options{Flags: 2097153}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.Unk_aa0957e, r, &Options{Flags: 2097153}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.Unk_dd3cf4b, r, &Options{Flags: 2097153}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.Unk_dd3cf40, r, &Options{Flags: 2097153}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.Unk_dd3cf3b, r, &Options{Flags: 2097153}); err != nil {
		return err
	}
	if _, err := r.Seek(p+144, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_c8d78ce7) Walk(cb WalkCallback, d ...any) {
	cb.Do("NWidth", &t.NWidth, d...)
	cb.Do("NHeight", &t.NHeight, d...)
	cb.Do("NDepth", &t.NDepth, d...)
	cb.Do("DwPitch", &t.DwPitch, d...)
	cb.Do("DwSlicePitch", &t.DwSlicePitch, d...)
	cb.Do("FlGridSize", &t.FlGridSize, d...)
	cb.Do("WpOrigin", &t.WpOrigin, d...)
	cb.Do("Unk_4b236f4", &t.Unk_4b236f4, d...)
	cb.Do("Unk_aa0958e", &t.Unk_aa0958e, d...)
	cb.Do("Unk_aa09583", &t.Unk_aa09583, d...)
	cb.Do("Unk_aa0957e", &t.Unk_aa0957e, d...)
	cb.Do("Unk_dd3cf4b", &t.Unk_dd3cf4b, d...)
	cb.Do("Unk_dd3cf40", &t.Unk_dd3cf40, d...)
	cb.Do("Unk_dd3cf3b", &t.Unk_dd3cf3b, d...)
}

type MonsterTagOverrideData struct {
	GbidMonsterTag DT_GBID
	Unk_209e228    DT_INT
}

func (t *MonsterTagOverrideData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.GbidMonsterTag, r, &Options{
		Flags: 1,
		Group: 66,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.Unk_209e228, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *MonsterTagOverrideData) Walk(cb WalkCallback, d ...any) {
	cb.Do("GbidMonsterTag", &t.GbidMonsterTag, d...)
	cb.Do("Unk_209e228", &t.Unk_209e228, d...)
}

type StoreProductDefinition struct {
	EType                         DT_ENUM
	Unk_d0a3165                   DT_VARIABLEARRAY[*DT_SNO]
	Unk_de90ee6                   DT_VARIABLEARRAY[*DT_SNO]
	ArHiddenProducts              DT_VARIABLEARRAY[*DT_SNO]
	ArRequiresOwning              DT_VARIABLEARRAY[*DT_SNO]
	ArRequiresNotOwning           DT_VARIABLEARRAY[*DT_SNO]
	Unk_c7fa9b8                   DT_SNO
	SnoItemTransmog               DT_SNO
	SnoMount                      DT_SNO
	SnoEmote                      DT_SNO
	SnoMarkingShape               DT_SNO
	SnoJewelry                    DT_SNO
	SnoEmblem                     DT_SNO
	SnoHeadstone                  DT_SNO
	SnoTownPortal                 DT_SNO
	BInventoryDeleteItemAfterUses DT_INT
	Unk_54edf70                   DT_INT
	Unk_419cb8c                   DT_ENUM
	SnoAssociatedSeason           DT_SNO
	ArCardArtVariants             DT_VARIABLEARRAY[*CardArt]
	Unk_7b588be                   DT_UINT
	HSplashImage                  DT_UINT
	HConfirmImage                 DT_UINT
	HCategoryIcon                 DT_UINT
	HTileImage                    DT_UINT
	Unk_9a0855f                   DT_INT
	Unk_8c37b97                   DT_UINT
	Unk_54578ff                   DT_INT
	Unk_5ff5733                   DT_INT
	HBundleTypeLabel              DT_UINT
	HCoinImage                    DT_UINT
	HStoreIconOverride            DT_UINT
	Unk_1816ef5                   DT_VECTOR3D
	BUseCustomizedPreview         DT_INT
	TCustomizedPreview            Type_619110a4
	Unk_e5d7f3                    DT_FIXEDARRAY[*DT_INT]
	Unk_35943b2                   DT_INT
	HDetailsDisplayImage          DT_UINT
	EPassType                     DT_ENUM
	NSeasonActive                 DT_UINT
}

func (t *StoreProductDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.EType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_d0a3165, r, &Options{
		Flags: 1,
		Group: 110,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.Unk_de90ee6, r, &Options{
		Flags: 1,
		Group: 110,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.ArHiddenProducts, r, &Options{
		Flags: 1,
		Group: 110,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.ArRequiresOwning, r, &Options{
		Flags: 1,
		Group: 110,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.ArRequiresNotOwning, r, &Options{
		Flags: 1,
		Group: 110,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.Unk_c7fa9b8, r, &Options{
		Flags: 1,
		Group: 110,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+100, &t.SnoItemTransmog, r, &Options{
		Flags: 1,
		Group: 73,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+104, &t.SnoMount, r, &Options{
		Flags: 1,
		Group: 73,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+108, &t.SnoEmote, r, &Options{
		Flags: 1,
		Group: 118,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.SnoMarkingShape, r, &Options{
		Flags: 1,
		Group: 115,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+116, &t.SnoJewelry, r, &Options{
		Flags: 1,
		Group: 119,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.SnoEmblem, r, &Options{
		Flags: 1,
		Group: 121,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+124, &t.SnoHeadstone, r, &Options{
		Flags: 1,
		Group: 1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.SnoTownPortal, r, &Options{
		Flags: 1,
		Group: 146,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+132, &t.BInventoryDeleteItemAfterUses, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+136, &t.Unk_54edf70, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+140, &t.Unk_419cb8c, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+144, &t.SnoAssociatedSeason, r, &Options{
		Flags: 1,
		Group: 137,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+152, &t.ArCardArtVariants, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+168, &t.Unk_7b588be, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+172, &t.HSplashImage, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+176, &t.HConfirmImage, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+180, &t.HCategoryIcon, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+184, &t.HTileImage, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+188, &t.Unk_9a0855f, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+192, &t.Unk_8c37b97, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+196, &t.Unk_54578ff, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+200, &t.Unk_5ff5733, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+204, &t.HBundleTypeLabel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+208, &t.HCoinImage, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+212, &t.HStoreIconOverride, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+216, &t.Unk_1816ef5, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+228, &t.BUseCustomizedPreview, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+232, &t.TCustomizedPreview, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+284, &t.Unk_e5d7f3, r, &Options{
		ArrayLength: 5,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+304, &t.Unk_35943b2, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+308, &t.HDetailsDisplayImage, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+312, &t.EPassType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+316, &t.NSeasonActive, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+320, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *StoreProductDefinition) Walk(cb WalkCallback, d ...any) {
	cb.Do("EType", &t.EType, d...)
	cb.Do("Unk_d0a3165", &t.Unk_d0a3165, d...)
	cb.Do("Unk_de90ee6", &t.Unk_de90ee6, d...)
	cb.Do("ArHiddenProducts", &t.ArHiddenProducts, d...)
	cb.Do("ArRequiresOwning", &t.ArRequiresOwning, d...)
	cb.Do("ArRequiresNotOwning", &t.ArRequiresNotOwning, d...)
	cb.Do("Unk_c7fa9b8", &t.Unk_c7fa9b8, d...)
	cb.Do("SnoItemTransmog", &t.SnoItemTransmog, d...)
	cb.Do("SnoMount", &t.SnoMount, d...)
	cb.Do("SnoEmote", &t.SnoEmote, d...)
	cb.Do("SnoMarkingShape", &t.SnoMarkingShape, d...)
	cb.Do("SnoJewelry", &t.SnoJewelry, d...)
	cb.Do("SnoEmblem", &t.SnoEmblem, d...)
	cb.Do("SnoHeadstone", &t.SnoHeadstone, d...)
	cb.Do("SnoTownPortal", &t.SnoTownPortal, d...)
	cb.Do("BInventoryDeleteItemAfterUses", &t.BInventoryDeleteItemAfterUses, d...)
	cb.Do("Unk_54edf70", &t.Unk_54edf70, d...)
	cb.Do("Unk_419cb8c", &t.Unk_419cb8c, d...)
	cb.Do("SnoAssociatedSeason", &t.SnoAssociatedSeason, d...)
	cb.Do("ArCardArtVariants", &t.ArCardArtVariants, d...)
	cb.Do("Unk_7b588be", &t.Unk_7b588be, d...)
	cb.Do("HSplashImage", &t.HSplashImage, d...)
	cb.Do("HConfirmImage", &t.HConfirmImage, d...)
	cb.Do("HCategoryIcon", &t.HCategoryIcon, d...)
	cb.Do("HTileImage", &t.HTileImage, d...)
	cb.Do("Unk_9a0855f", &t.Unk_9a0855f, d...)
	cb.Do("Unk_8c37b97", &t.Unk_8c37b97, d...)
	cb.Do("Unk_54578ff", &t.Unk_54578ff, d...)
	cb.Do("Unk_5ff5733", &t.Unk_5ff5733, d...)
	cb.Do("HBundleTypeLabel", &t.HBundleTypeLabel, d...)
	cb.Do("HCoinImage", &t.HCoinImage, d...)
	cb.Do("HStoreIconOverride", &t.HStoreIconOverride, d...)
	cb.Do("Unk_1816ef5", &t.Unk_1816ef5, d...)
	cb.Do("BUseCustomizedPreview", &t.BUseCustomizedPreview, d...)
	cb.Do("TCustomizedPreview", &t.TCustomizedPreview, d...)
	cb.Do("Unk_e5d7f3", &t.Unk_e5d7f3, d...)
	cb.Do("Unk_35943b2", &t.Unk_35943b2, d...)
	cb.Do("HDetailsDisplayImage", &t.HDetailsDisplayImage, d...)
	cb.Do("EPassType", &t.EPassType, d...)
	cb.Do("NSeasonActive", &t.NSeasonActive, d...)
}

type AchievementDefinition struct {
	UPointsValue             DT_UINT
	DwNextID                 DT_UINT
	UMinRequiredCriteria     DT_UINT
	SnoSupersedes            DT_SNO
	UFlags                   DT_UINT
	UPlatformFlags           DT_UINT
	ArLinkedAchievements     DT_VARIABLEARRAY[*DT_SNO]
	ArCriteriaList           DT_VARIABLEARRAY[*CriteriaDefinition]
	ArRewardList             DT_VARIABLEARRAY[*RewardDefinition]
	Unk_7235f7c              DT_ENUM
	TPS4AwardDefinitionList  PS4ConsoleAwardDefinition
	TPS5AwardDefinitionList  PS5ConsoleAwardDefinition
	TXboxAwardDefinitionList XboxConsoleAwardDefinition
	TSteamAchievement        SteamAchievementDefinition
	ULevel                   DT_UINT
	UMinLevel                DT_UINT
	UMaxLevel                DT_UINT
	HImage                   DT_UINT
	HSplashImage             DT_UINT
}

func (t *AchievementDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.UPointsValue, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwNextID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.UMinRequiredCriteria, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.SnoSupersedes, r, &Options{
		Flags: 1,
		Group: 99,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.UFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.UPlatformFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.ArLinkedAchievements, r, &Options{
		Flags: 513,
		Group: 99,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.ArCriteriaList, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.ArRewardList, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.Unk_7235f7c, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.TPS4AwardDefinitionList, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.TPS5AwardDefinitionList, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+136, &t.TXboxAwardDefinitionList, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+160, &t.TSteamAchievement, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+176, &t.ULevel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+180, &t.UMinLevel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+184, &t.UMaxLevel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+188, &t.HImage, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+192, &t.HSplashImage, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+200, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *AchievementDefinition) Walk(cb WalkCallback, d ...any) {
	cb.Do("UPointsValue", &t.UPointsValue, d...)
	cb.Do("DwNextID", &t.DwNextID, d...)
	cb.Do("UMinRequiredCriteria", &t.UMinRequiredCriteria, d...)
	cb.Do("SnoSupersedes", &t.SnoSupersedes, d...)
	cb.Do("UFlags", &t.UFlags, d...)
	cb.Do("UPlatformFlags", &t.UPlatformFlags, d...)
	cb.Do("ArLinkedAchievements", &t.ArLinkedAchievements, d...)
	cb.Do("ArCriteriaList", &t.ArCriteriaList, d...)
	cb.Do("ArRewardList", &t.ArRewardList, d...)
	cb.Do("Unk_7235f7c", &t.Unk_7235f7c, d...)
	cb.Do("TPS4AwardDefinitionList", &t.TPS4AwardDefinitionList, d...)
	cb.Do("TPS5AwardDefinitionList", &t.TPS5AwardDefinitionList, d...)
	cb.Do("TXboxAwardDefinitionList", &t.TXboxAwardDefinitionList, d...)
	cb.Do("TSteamAchievement", &t.TSteamAchievement, d...)
	cb.Do("ULevel", &t.ULevel, d...)
	cb.Do("UMinLevel", &t.UMinLevel, d...)
	cb.Do("UMaxLevel", &t.UMaxLevel, d...)
	cb.Do("HImage", &t.HImage, d...)
	cb.Do("HSplashImage", &t.HSplashImage, d...)
}

type UISkillTreeStyle struct {
	// Inherits UIWindowStyle
	// Inherits UIControlStyle
	// Inherits PolymorphicBase
	DwType                    DT_UINT
	DwPad                     DT_UINT
	HParentStyle              UIControlHandle
	Unk_441f783               DT_INT64
	M_eHasModifiedPowerTagMap DT_TAGMAP[*DT_ENUM]
	TConsoleInput             UIControlConsoleInput
	Unk_b4f614c               DT_TAGMAP[*DT_ENUM]
}

func (t *UISkillTreeStyle) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.HParentStyle, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_441f783, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.M_eHasModifiedPowerTagMap, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.TConsoleInput, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.Unk_b4f614c, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+80, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *UISkillTreeStyle) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("HParentStyle", &t.HParentStyle, d...)
	cb.Do("Unk_441f783", &t.Unk_441f783, d...)
	cb.Do("M_eHasModifiedPowerTagMap", &t.M_eHasModifiedPowerTagMap, d...)
	cb.Do("TConsoleInput", &t.TConsoleInput, d...)
	cb.Do("Unk_b4f614c", &t.Unk_b4f614c, d...)
}

type UpdateConvAutoAdvanceMessage struct {
	THeader           RequiredMessageHeader
	SnoConv           DT_SNO
	NLineUID          DT_INT
	DwNextAdvanceTime DT_UINT
}

func (t *UpdateConvAutoAdvanceMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoConv, r, &Options{
		Flags: 1,
		Group: 12,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.NLineUID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.DwNextAdvanceTime, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+28, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *UpdateConvAutoAdvanceMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("SnoConv", &t.SnoConv, d...)
	cb.Do("NLineUID", &t.NLineUID, d...)
	cb.Do("DwNextAdvanceTime", &t.DwNextAdvanceTime, d...)
}

type ParticleSimKeyFrameColor struct {
	FlTime    DT_FLOAT
	RgbaColor DT_RGBACOLOR
}

func (t *ParticleSimKeyFrameColor) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.FlTime, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.RgbaColor, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ParticleSimKeyFrameColor) Walk(cb WalkCallback, d ...any) {
	cb.Do("FlTime", &t.FlTime, d...)
	cb.Do("RgbaColor", &t.RgbaColor, d...)
}

type Sphere struct {
	WpCenter DT_VECTOR3D
	WdRadius DT_FLOAT
}

func (t *Sphere) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.WpCenter, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.WdRadius, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Sphere) Walk(cb WalkCallback, d ...any) {
	cb.Do("WpCenter", &t.WpCenter, d...)
	cb.Do("WdRadius", &t.WdRadius, d...)
}

type QuestReward struct {
	SnoTreasureClass         DT_SNO
	NXPTier                  DT_INT
	NGoldTier                DT_INT
	Unk_3592260              DT_INT
	SnoTrackedReward         DT_SNO
	BOverrideRewardDropLevel DT_INT
	TRewardDropLevelOverride QuestRewardLevelOverride
	ArFakeItemRewards        DT_VARIABLEARRAY[*DT_SNO]
}

func (t *QuestReward) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoTreasureClass, r, &Options{
		Flags: 1,
		Group: 52,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.NXPTier, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.NGoldTier, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.Unk_3592260, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoTrackedReward, r, &Options{
		Flags: 1,
		Group: 126,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.BOverrideRewardDropLevel, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.TRewardDropLevelOverride, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.ArFakeItemRewards, r, &Options{
		Flags: 1,
		Group: 73,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *QuestReward) Walk(cb WalkCallback, d ...any) {
	cb.Do("SnoTreasureClass", &t.SnoTreasureClass, d...)
	cb.Do("NXPTier", &t.NXPTier, d...)
	cb.Do("NGoldTier", &t.NGoldTier, d...)
	cb.Do("Unk_3592260", &t.Unk_3592260, d...)
	cb.Do("SnoTrackedReward", &t.SnoTrackedReward, d...)
	cb.Do("BOverrideRewardDropLevel", &t.BOverrideRewardDropLevel, d...)
	cb.Do("TRewardDropLevelOverride", &t.TRewardDropLevelOverride, d...)
	cb.Do("ArFakeItemRewards", &t.ArFakeItemRewards, d...)
}

type AdvancedBloomSettings struct {
	Unk_184e1e5 DT_TAGMAP[*DT_ENUM]
}

func (t *AdvancedBloomSettings) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Unk_184e1e5, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *AdvancedBloomSettings) Walk(cb WalkCallback, d ...any) {
	cb.Do("Unk_184e1e5", &t.Unk_184e1e5, d...)
}

type RenderPass struct {
	ERenderLayer              DT_ENUM
	EGraphType                DT_ENUM
	TRenderParams             RenderParams
	SnoShaderEffect           DT_SNO
	PtInputLayout             DT_VARIABLEARRAY[*ShaderInputLayout]
	DwFlags                   DT_UINT
	DwDecalWriteFlags         DT_UINT
	Unk_c23801f               DT_ENUM
	PtPostprocessed           DT_INT64
	Unk_295833                DT_VARIABLEARRAY[*DT_UINT]
	PtPerms                   DT_VARIABLEARRAY[*ShaderPermutation]
	TUsedScalarMaterialValues DT_VARIABLEARRAY[*MaterialScalarValuesUsed]
	TUsedVectorMaterialValues DT_VARIABLEARRAY[*MaterialVectorValuesUsed]
	Unk_1484b5a               DT_VARIABLEARRAY[*Type_d7ee8f26]
	TDefaultTextures          DT_VARIABLEARRAY[*DefaultTextureInfo]
	PBBEFormulas              DT_VARIABLEARRAY[*ShaderNodeBBEFormula]
	Unk_282b17c               DT_TAGMAP[*DT_ENUM]
}

func (t *RenderPass) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.ERenderLayer, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.EGraphType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.TRenderParams, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+392, &t.SnoShaderEffect, r, &Options{
		Flags: 1,
		Group: 37,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+400, &t.PtInputLayout, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+416, &t.DwFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+420, &t.DwDecalWriteFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+424, &t.Unk_c23801f, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+432, &t.PtPostprocessed, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+440, &t.Unk_295833, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+456, &t.PtPerms, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+472, &t.TUsedScalarMaterialValues, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+488, &t.TUsedVectorMaterialValues, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+504, &t.Unk_1484b5a, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+520, &t.TDefaultTextures, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+536, &t.PBBEFormulas, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+552, &t.Unk_282b17c, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+568, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *RenderPass) Walk(cb WalkCallback, d ...any) {
	cb.Do("ERenderLayer", &t.ERenderLayer, d...)
	cb.Do("EGraphType", &t.EGraphType, d...)
	cb.Do("TRenderParams", &t.TRenderParams, d...)
	cb.Do("SnoShaderEffect", &t.SnoShaderEffect, d...)
	cb.Do("PtInputLayout", &t.PtInputLayout, d...)
	cb.Do("DwFlags", &t.DwFlags, d...)
	cb.Do("DwDecalWriteFlags", &t.DwDecalWriteFlags, d...)
	cb.Do("Unk_c23801f", &t.Unk_c23801f, d...)
	cb.Do("PtPostprocessed", &t.PtPostprocessed, d...)
	cb.Do("Unk_295833", &t.Unk_295833, d...)
	cb.Do("PtPerms", &t.PtPerms, d...)
	cb.Do("TUsedScalarMaterialValues", &t.TUsedScalarMaterialValues, d...)
	cb.Do("TUsedVectorMaterialValues", &t.TUsedVectorMaterialValues, d...)
	cb.Do("Unk_1484b5a", &t.Unk_1484b5a, d...)
	cb.Do("TDefaultTextures", &t.TDefaultTextures, d...)
	cb.Do("PBBEFormulas", &t.PBBEFormulas, d...)
	cb.Do("Unk_282b17c", &t.Unk_282b17c, d...)
}

type GizmoTemplate struct{}

func (t *GizmoTemplate) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if _, err := r.Seek(p+1, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *GizmoTemplate) Walk(cb WalkCallback, d ...any) {}

type SpawnLocType_Table struct {
	// Inherits GameBalanceTable
	// Inherits PolymorphicBase
	DwType   DT_UINT
	DwPad    DT_UINT
	TEntries DT_VARIABLEARRAY[*SpawnLocType]
}

func (t *SpawnLocType_Table) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TEntries, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *SpawnLocType_Table) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("TEntries", &t.TEntries, d...)
}

type OnPhaseEnteredPowerCallback struct {
	// Inherits PowerCallbackBase
	// Inherits PolymorphicBase
	DwType                DT_UINT
	DwPad                 DT_UINT
	SnoTriggerEffectGroup DT_SNO
	BCouldHaveRagdolled   DT_INT
	TPhaseName            DT_UINT
}

func (t *OnPhaseEnteredPowerCallback) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoTriggerEffectGroup, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.BCouldHaveRagdolled, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.TPhaseName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *OnPhaseEnteredPowerCallback) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("SnoTriggerEffectGroup", &t.SnoTriggerEffectGroup, d...)
	cb.Do("BCouldHaveRagdolled", &t.BCouldHaveRagdolled, d...)
	cb.Do("TPhaseName", &t.TPhaseName, d...)
}

type ParticleSimKeyFrameScale struct {
	FlTime  DT_FLOAT
	FlScale DT_FLOAT
}

func (t *ParticleSimKeyFrameScale) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.FlTime, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.FlScale, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ParticleSimKeyFrameScale) Walk(cb WalkCallback, d ...any) {
	cb.Do("FlTime", &t.FlTime, d...)
	cb.Do("FlScale", &t.FlScale, d...)
}

type ActorLookOverrideChangedMessage struct {
	THeader           RequiredMessageHeader
	Ann               DT_ACD_NETWORK_NAME
	NChange           DT_INT
	NLookOverrideHash DT_UINT
	BOnDeath          DT_INT
	BRenderArmor      DT_INT
}

func (t *ActorLookOverrideChangedMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Ann, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.NChange, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.NLookOverrideHash, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.BOnDeath, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.BRenderArmor, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+40, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ActorLookOverrideChangedMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("Ann", &t.Ann, d...)
	cb.Do("NChange", &t.NChange, d...)
	cb.Do("NLookOverrideHash", &t.NLookOverrideHash, d...)
	cb.Do("BOnDeath", &t.BOnDeath, d...)
	cb.Do("BRenderArmor", &t.BRenderArmor, d...)
}

type AIStateDebugTestSwitchMessage struct {
	THeader     RequiredMessageHeader
	AnnActor    DT_ACD_NETWORK_NAME
	Unk_ff59d1d DT_UINT
}

func (t *AIStateDebugTestSwitchMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.AnnActor, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_ff59d1d, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+28, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *AIStateDebugTestSwitchMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("AnnActor", &t.AnnActor, d...)
	cb.Do("Unk_ff59d1d", &t.Unk_ff59d1d, d...)
}

type DungeonList struct {
	ArDungeons DT_VARIABLEARRAY[*DT_SNO]
}

func (t *DungeonList) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.ArDungeons, r, &Options{
		Flags: 513,
		Group: 48,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *DungeonList) Walk(cb WalkCallback, d ...any) {
	cb.Do("ArDungeons", &t.ArDungeons, d...)
}

type PlayerIsShapeshiftedSubcondition struct {
	// Inherits Subcondition
	// Inherits PolymorphicBase
	DwType  DT_UINT
	BNegate DT_INT
	DwPad   DT_UINT
}

func (t *PlayerIsShapeshiftedSubcondition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BNegate, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PlayerIsShapeshiftedSubcondition) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("BNegate", &t.BNegate, d...)
	cb.Do("DwPad", &t.DwPad, d...)
}

type GlobalAVData struct {
	// Inherits GlobalBase
	// Inherits PolymorphicBase
	DwType                              DT_UINT
	DwPad                               DT_UINT
	WdMicrophoneHeight                  DT_FLOAT
	WdMicrophoneXYOffset                DT_FLOAT
	FlMicrophoneTiltCorrection          DT_FLOAT
	Unk_bcf2fa1                         DT_FLOAT
	FlDopplerFactor                     DT_FLOAT
	FlAttenuationFactor                 DT_FLOAT
	FlFriendlyAttenuationFactor         DT_FLOAT
	FlEnemyAttenuationFactor            DT_FLOAT
	Unk_a24f195                         DT_FLOAT
	TConversationDefaultSounds          ConversationTypeSounds
	Unk_ee2f4d9                         Type_abec9f65
	Unk_aab60e9                         DT_INT
	Unk_5e1713                          DT_INT
	Unk_4889712                         DT_INT
	Unk_14c506c                         DT_FLOAT
	Unk_9109f33                         DT_FLOAT
	Unk_97eca79                         DT_INT
	Unk_9bb9a7b                         DT_FLOAT
	Unk_bff9025                         DT_FLOAT
	Unk_6667f4c                         DT_FLOAT
	Unk_d4f116d                         DT_FLOAT
	Unk_3d2f7b4                         DT_FLOAT
	Unk_d06da3d                         DT_FLOAT
	Unk_1c5bd37                         DT_INT
	Unk_c1c8d33                         DT_FLOAT
	Unk_2d19c28                         DT_FLOAT
	Unk_84bd05e                         DT_FLOAT
	Unk_a674d1f                         DT_FLOAT
	Unk_48115e6                         DT_FLOAT
	Unk_1140ffa                         DT_FLOAT
	FlMultiplayerSmoothing              DT_FLOAT
	Unk_b7979d6                         DT_FLOAT
	FlSpringMinSpeed                    DT_FLOAT
	FlSpringMaxSpeed                    DT_FLOAT
	FlSpringMagnitude                   DT_FLOAT
	FlSpringStiffness                   DT_FLOAT
	FlOrbitSLerpScalar                  DT_FLOAT
	FlOrbitTransitionExponentialScalar  DT_FLOAT
	FlOrbitTransitionDuration           DT_FLOAT
	WvOrbitOffsetCenterForAngleLimiting DT_VECTOR3D
	FlOrbitMaxAngleFromOffsetCenter     DT_FLOAT
	VConsoleCameraShakeScalar           DT_VECTOR3D
	FlZNear                             DT_FLOAT
	Unk_4849eb5                         DT_FLOAT
	Unk_d16853d                         DT_FLOAT
	Unk_efc10ac                         DT_FLOAT
	Unk_67c3614                         DT_FLOAT
	Unk_6236ef1                         DT_FLOAT
	Unk_5d800f3                         DT_FLOAT
	Unk_75c2a63                         DT_FLOAT
	Unk_32ded65                         DT_FLOAT
	Unk_ba7c108                         DT_FLOAT
	Unk_ea151f5                         DT_FLOAT
	Unk_26bea03                         DT_FLOAT
	Unk_26bec71                         DT_FLOAT
	Unk_4d37f57                         DT_FLOAT
	FlHighlightBrightness               DT_FLOAT
	Unk_9773164                         DT_FLOAT
	Unk_8682ecb                         DT_FLOAT
	RgbaPlayer0Color                    DT_RGBACOLOR
	RgbaPlayer1Color                    DT_RGBACOLOR
	RgbaPlayer2Color                    DT_RGBACOLOR
	RgbaPlayer3Color                    DT_RGBACOLOR
	RgbaPlayerLocalSolo                 DT_RGBACOLOR
	Unk_dd6ca58                         DT_RGBACOLOR
	Unk_14e6af7                         DT_RGBACOLOR
	Unk_db836fa                         DT_RGBACOLOR
	Unk_ed20455                         DT_RGBACOLOR
	Unk_a879fd8                         DT_RGBACOLOR
	Unk_614e428                         DT_FLOAT
	FlTranslucencyScale                 DT_FLOAT
	FlTranslucencyThicknessScale        DT_FLOAT
	FlTranslucencyNormalOffset          DT_FLOAT
	Unk_4450d33                         DT_FLOAT
	Unk_52fa93a                         DT_FLOAT
	Unk_f719403                         DT_FLOAT
	Unk_556d46a                         DT_FLOAT
	Unk_25055f1                         DT_FLOAT
	Unk_808753f                         DT_FLOAT
	Unk_c393e43                         DT_FLOAT
	Unk_5149854                         DT_FLOAT
	Unk_83c9b2a                         DT_FLOAT
	Unk_8e6396a                         DT_FLOAT
	Unk_922b1da                         DT_FLOAT
	Unk_b08e030                         DT_FLOAT
	Unk_26ab22f                         DT_FLOAT
	Unk_55f065                          DT_FLOAT
	Unk_c8a3761                         DT_FLOAT
	Unk_e661bd7                         DT_FLOAT
	WpRainVolumeMin                     DT_VECTOR3D
	WpRainVolumeMax                     DT_VECTOR3D
	Unk_7f22f2a                         DT_FLOAT
	Unk_2665f25                         DT_UINT
	Unk_c28b473                         DT_UINT
	Unk_df5ec50                         DT_FLOAT
	Unk_620e28d                         DT_FLOAT
	Unk_f12663d                         DT_FLOAT
	Unk_6bec509                         DT_FLOAT
	Unk_4ae734e                         DT_FLOAT
	FlSnowDecayRate                     DT_FLOAT
	Unk_d3bbd69                         DT_FLOAT
	Unk_5822eea                         DT_VECTOR3D
	Unk_725b405                         DT_FLOAT
	Unk_aebfc2b                         DT_FLOAT
	Unk_cbab47a                         DT_FLOAT
	Unk_d958d9                          DT_FLOAT
	Unk_eacf58c                         DT_FLOAT
	Unk_13a3e3b                         DT_FLOAT
	Unk_cb97e5a                         DT_FLOAT
	Unk_8fb07f8                         DT_FLOAT
	FlFinalLevels                       DT_FLOAT
	Unk_c9de46                          DT_FLOAT
	Unk_b3fd1d8                         DT_FLOAT
	Unk_5594707                         DT_FLOAT
	Unk_ba7e426                         DT_FLOAT
	Unk_836453e                         DT_FLOAT
	Unk_4ee8575                         DT_FLOAT
	SnoDungeonDefaultObserver           DT_SNO
	Unk_884eb16                         DT_FLOAT
	Unk_9b111e3                         DT_FLOAT
	Unk_25a68ac                         DT_FLOAT
	Unk_b5e6750                         DT_FLOAT
	Unk_ec28624                         DT_FLOAT
	Unk_f070975                         DT_FLOAT
	Unk_db6c589                         DT_FLOAT
	Unk_2dc7eb1                         DT_FLOAT
	Unk_b629779                         DT_FLOAT
	Unk_3f0c40a                         DT_FLOAT
	Unk_e02135                          DT_FLOAT
	Unk_40a2406                         DT_FLOAT
	Unk_bc4473                          DT_FLOAT
	Unk_cb3bd6f                         DT_FLOAT
	Unk_e69e500                         DT_FLOAT
	ArAudioMonsterCategories            DT_VARIABLEARRAY[*AudioMonsterCategory]
	ArTraversalSurfaceOptions           DT_FIXEDARRAY[*TraversalSurfaceOptions]
	Unk_efa9723                         DT_INT
	Unk_2140bd4                         DT_INT
	Unk_9e6e6b5                         DT_INT
	Unk_3d0e848                         DT_INT
	Unk_aa1fd73                         DT_INT
	Unk_88029e3                         DT_INT
	Unk_b56464f                         DT_INT
	Unk_7885a5e                         DT_INT
	Unk_2900bd9                         DT_UINT
	Unk_4f6a577                         DT_UINT
	Unk_410fa4f                         DT_UINT
	Unk_575837                          DT_FLOAT
	Unk_93531cf                         DT_FLOAT
	Unk_4ae2208                         DT_FLOAT
	PtVOParameters                      DT_VARIABLEARRAY[*WwiseGameParameter]
	Unk_57dee35                         DT_SNO
	Unk_6d8495e                         DT_FLOAT
	Unk_3f74e62                         DT_VECTOR3D
	Unk_5202085                         DT_FLOAT
	Unk_c322de7                         DT_FLOAT
	Unk_aa0944b                         DT_FLOAT
	TShoreWaveSettings                  ShoreWaveSettings
	Unk_fa3df7c                         DT_FLOAT
	Unk_c9c8405                         Type_9934af2e
	TLuxSettings                        LuxSettings
	TNitSettings                        NitSettings
	TVertexCountSettings                VertexCountSettings
	TVertexDensitySettings              VertexDensitySettings
	TLightingDepthSettings              LightingDepthSettings
	TLightInfluenceSettings             LightInfluenceSettings
	ArFoleyMaterialTags                 DT_VARIABLEARRAY[*FoleyMaterialTagInfo]
	ArConditionalAudioStates            DT_VARIABLEARRAY[*ConditionalAudioState]
	Unk_77afde8                         UIMargins
	Unk_6c7ea27                         UIMargins
	Unk_23d823e                         UIMargins
	Unk_e54f346                         UIMargins
	Unk_a412bc0                         DT_FLOAT
	Unk_e0c0343                         DT_FLOAT
	Unk_9dd7abd                         DT_FLOAT
	Unk_66301bd                         DT_FLOAT
	Unk_f0e8c35                         DT_FLOAT
	Unk_9b5adac                         DT_FLOAT
	Unk_9db4d03                         DT_FLOAT
	Unk_2d039a1                         DT_FLOAT
	Unk_d87185b                         DT_FLOAT
	Unk_f92dd82                         DT_FLOAT
	Unk_1ed9c8a                         DT_FLOAT
	Unk_85d52d8                         DT_FLOAT
	Unk_e02147a                         DT_FLOAT
}

func (t *GlobalAVData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.WdMicrophoneHeight, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.WdMicrophoneXYOffset, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.FlMicrophoneTiltCorrection, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.Unk_bcf2fa1, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.FlDopplerFactor, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.FlAttenuationFactor, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.FlFriendlyAttenuationFactor, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.FlEnemyAttenuationFactor, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.Unk_a24f195, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.TConversationDefaultSounds, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.Unk_ee2f4d9, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.Unk_aab60e9, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.Unk_5e1713, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+100, &t.Unk_4889712, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+104, &t.Unk_14c506c, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+108, &t.Unk_9109f33, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.Unk_97eca79, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+116, &t.Unk_9bb9a7b, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.Unk_bff9025, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+124, &t.Unk_6667f4c, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.Unk_d4f116d, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+132, &t.Unk_3d2f7b4, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+136, &t.Unk_d06da3d, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+140, &t.Unk_1c5bd37, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+144, &t.Unk_c1c8d33, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+148, &t.Unk_2d19c28, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+152, &t.Unk_84bd05e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+156, &t.Unk_a674d1f, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+160, &t.Unk_48115e6, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+164, &t.Unk_1140ffa, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+168, &t.FlMultiplayerSmoothing, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+172, &t.Unk_b7979d6, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+176, &t.FlSpringMinSpeed, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+180, &t.FlSpringMaxSpeed, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+184, &t.FlSpringMagnitude, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+188, &t.FlSpringStiffness, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+192, &t.FlOrbitSLerpScalar, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+196, &t.FlOrbitTransitionExponentialScalar, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+200, &t.FlOrbitTransitionDuration, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+204, &t.WvOrbitOffsetCenterForAngleLimiting, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+216, &t.FlOrbitMaxAngleFromOffsetCenter, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+220, &t.VConsoleCameraShakeScalar, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+232, &t.FlZNear, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+236, &t.Unk_4849eb5, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+240, &t.Unk_d16853d, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+244, &t.Unk_efc10ac, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+248, &t.Unk_67c3614, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+252, &t.Unk_6236ef1, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+256, &t.Unk_5d800f3, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+260, &t.Unk_75c2a63, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+264, &t.Unk_32ded65, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+268, &t.Unk_ba7c108, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+272, &t.Unk_ea151f5, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+276, &t.Unk_26bea03, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+280, &t.Unk_26bec71, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+284, &t.Unk_4d37f57, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+288, &t.FlHighlightBrightness, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+292, &t.Unk_9773164, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+296, &t.Unk_8682ecb, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+300, &t.RgbaPlayer0Color, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+304, &t.RgbaPlayer1Color, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+308, &t.RgbaPlayer2Color, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+312, &t.RgbaPlayer3Color, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+316, &t.RgbaPlayerLocalSolo, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+320, &t.Unk_dd6ca58, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+324, &t.Unk_14e6af7, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+328, &t.Unk_db836fa, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+332, &t.Unk_ed20455, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+336, &t.Unk_a879fd8, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+340, &t.Unk_614e428, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+344, &t.FlTranslucencyScale, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+348, &t.FlTranslucencyThicknessScale, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+352, &t.FlTranslucencyNormalOffset, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+356, &t.Unk_4450d33, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+360, &t.Unk_52fa93a, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+364, &t.Unk_f719403, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+368, &t.Unk_556d46a, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+372, &t.Unk_25055f1, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+376, &t.Unk_808753f, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+380, &t.Unk_c393e43, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+384, &t.Unk_5149854, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+388, &t.Unk_83c9b2a, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+392, &t.Unk_8e6396a, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+396, &t.Unk_922b1da, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+400, &t.Unk_b08e030, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+404, &t.Unk_26ab22f, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+408, &t.Unk_55f065, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+412, &t.Unk_c8a3761, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+416, &t.Unk_e661bd7, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+420, &t.WpRainVolumeMin, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+432, &t.WpRainVolumeMax, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+444, &t.Unk_7f22f2a, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+448, &t.Unk_2665f25, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+452, &t.Unk_c28b473, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+456, &t.Unk_df5ec50, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+460, &t.Unk_620e28d, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+464, &t.Unk_f12663d, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+468, &t.Unk_6bec509, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+472, &t.Unk_4ae734e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+476, &t.FlSnowDecayRate, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+480, &t.Unk_d3bbd69, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+484, &t.Unk_5822eea, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+496, &t.Unk_725b405, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+500, &t.Unk_aebfc2b, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+504, &t.Unk_cbab47a, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+508, &t.Unk_d958d9, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+512, &t.Unk_eacf58c, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+516, &t.Unk_13a3e3b, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+520, &t.Unk_cb97e5a, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+524, &t.Unk_8fb07f8, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+528, &t.FlFinalLevels, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+532, &t.Unk_c9de46, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+536, &t.Unk_b3fd1d8, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+540, &t.Unk_5594707, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+544, &t.Unk_ba7e426, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+548, &t.Unk_836453e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+552, &t.Unk_4ee8575, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+556, &t.SnoDungeonDefaultObserver, r, &Options{
		Flags: 513,
		Group: 26,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+560, &t.Unk_884eb16, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+564, &t.Unk_9b111e3, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+568, &t.Unk_25a68ac, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+572, &t.Unk_b5e6750, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+576, &t.Unk_ec28624, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+580, &t.Unk_f070975, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+584, &t.Unk_db6c589, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+588, &t.Unk_2dc7eb1, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+592, &t.Unk_b629779, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+596, &t.Unk_3f0c40a, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+600, &t.Unk_e02135, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+604, &t.Unk_40a2406, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+608, &t.Unk_bc4473, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+612, &t.Unk_cb3bd6f, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+616, &t.Unk_e69e500, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+624, &t.ArAudioMonsterCategories, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+640, &t.ArTraversalSurfaceOptions, r, &Options{
		ArrayLength: 6,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+736, &t.Unk_efa9723, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+740, &t.Unk_2140bd4, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+744, &t.Unk_9e6e6b5, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+748, &t.Unk_3d0e848, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+752, &t.Unk_aa1fd73, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+756, &t.Unk_88029e3, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+760, &t.Unk_b56464f, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+764, &t.Unk_7885a5e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+768, &t.Unk_2900bd9, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+772, &t.Unk_4f6a577, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+776, &t.Unk_410fa4f, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+780, &t.Unk_575837, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+784, &t.Unk_93531cf, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+788, &t.Unk_4ae2208, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+792, &t.PtVOParameters, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+808, &t.Unk_57dee35, r, &Options{
		Flags: 1,
		Group: 5,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+812, &t.Unk_6d8495e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+816, &t.Unk_3f74e62, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+828, &t.Unk_5202085, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+832, &t.Unk_c322de7, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+836, &t.Unk_aa0944b, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+840, &t.TShoreWaveSettings, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+872, &t.Unk_fa3df7c, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+876, &t.Unk_c9c8405, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+928, &t.TLuxSettings, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+936, &t.TNitSettings, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+972, &t.TVertexCountSettings, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+980, &t.TVertexDensitySettings, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+984, &t.TLightingDepthSettings, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1000, &t.TLightInfluenceSettings, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1008, &t.ArFoleyMaterialTags, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1024, &t.ArConditionalAudioStates, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1040, &t.Unk_77afde8, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1056, &t.Unk_6c7ea27, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1072, &t.Unk_23d823e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1088, &t.Unk_e54f346, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1104, &t.Unk_a412bc0, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1108, &t.Unk_e0c0343, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1112, &t.Unk_9dd7abd, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1116, &t.Unk_66301bd, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1120, &t.Unk_f0e8c35, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1124, &t.Unk_9b5adac, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1128, &t.Unk_9db4d03, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1132, &t.Unk_2d039a1, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1136, &t.Unk_d87185b, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1140, &t.Unk_f92dd82, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1144, &t.Unk_1ed9c8a, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1148, &t.Unk_85d52d8, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1152, &t.Unk_e02147a, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+1160, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *GlobalAVData) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("WdMicrophoneHeight", &t.WdMicrophoneHeight, d...)
	cb.Do("WdMicrophoneXYOffset", &t.WdMicrophoneXYOffset, d...)
	cb.Do("FlMicrophoneTiltCorrection", &t.FlMicrophoneTiltCorrection, d...)
	cb.Do("Unk_bcf2fa1", &t.Unk_bcf2fa1, d...)
	cb.Do("FlDopplerFactor", &t.FlDopplerFactor, d...)
	cb.Do("FlAttenuationFactor", &t.FlAttenuationFactor, d...)
	cb.Do("FlFriendlyAttenuationFactor", &t.FlFriendlyAttenuationFactor, d...)
	cb.Do("FlEnemyAttenuationFactor", &t.FlEnemyAttenuationFactor, d...)
	cb.Do("Unk_a24f195", &t.Unk_a24f195, d...)
	cb.Do("TConversationDefaultSounds", &t.TConversationDefaultSounds, d...)
	cb.Do("Unk_ee2f4d9", &t.Unk_ee2f4d9, d...)
	cb.Do("Unk_aab60e9", &t.Unk_aab60e9, d...)
	cb.Do("Unk_5e1713", &t.Unk_5e1713, d...)
	cb.Do("Unk_4889712", &t.Unk_4889712, d...)
	cb.Do("Unk_14c506c", &t.Unk_14c506c, d...)
	cb.Do("Unk_9109f33", &t.Unk_9109f33, d...)
	cb.Do("Unk_97eca79", &t.Unk_97eca79, d...)
	cb.Do("Unk_9bb9a7b", &t.Unk_9bb9a7b, d...)
	cb.Do("Unk_bff9025", &t.Unk_bff9025, d...)
	cb.Do("Unk_6667f4c", &t.Unk_6667f4c, d...)
	cb.Do("Unk_d4f116d", &t.Unk_d4f116d, d...)
	cb.Do("Unk_3d2f7b4", &t.Unk_3d2f7b4, d...)
	cb.Do("Unk_d06da3d", &t.Unk_d06da3d, d...)
	cb.Do("Unk_1c5bd37", &t.Unk_1c5bd37, d...)
	cb.Do("Unk_c1c8d33", &t.Unk_c1c8d33, d...)
	cb.Do("Unk_2d19c28", &t.Unk_2d19c28, d...)
	cb.Do("Unk_84bd05e", &t.Unk_84bd05e, d...)
	cb.Do("Unk_a674d1f", &t.Unk_a674d1f, d...)
	cb.Do("Unk_48115e6", &t.Unk_48115e6, d...)
	cb.Do("Unk_1140ffa", &t.Unk_1140ffa, d...)
	cb.Do("FlMultiplayerSmoothing", &t.FlMultiplayerSmoothing, d...)
	cb.Do("Unk_b7979d6", &t.Unk_b7979d6, d...)
	cb.Do("FlSpringMinSpeed", &t.FlSpringMinSpeed, d...)
	cb.Do("FlSpringMaxSpeed", &t.FlSpringMaxSpeed, d...)
	cb.Do("FlSpringMagnitude", &t.FlSpringMagnitude, d...)
	cb.Do("FlSpringStiffness", &t.FlSpringStiffness, d...)
	cb.Do("FlOrbitSLerpScalar", &t.FlOrbitSLerpScalar, d...)
	cb.Do("FlOrbitTransitionExponentialScalar", &t.FlOrbitTransitionExponentialScalar, d...)
	cb.Do("FlOrbitTransitionDuration", &t.FlOrbitTransitionDuration, d...)
	cb.Do("WvOrbitOffsetCenterForAngleLimiting", &t.WvOrbitOffsetCenterForAngleLimiting, d...)
	cb.Do("FlOrbitMaxAngleFromOffsetCenter", &t.FlOrbitMaxAngleFromOffsetCenter, d...)
	cb.Do("VConsoleCameraShakeScalar", &t.VConsoleCameraShakeScalar, d...)
	cb.Do("FlZNear", &t.FlZNear, d...)
	cb.Do("Unk_4849eb5", &t.Unk_4849eb5, d...)
	cb.Do("Unk_d16853d", &t.Unk_d16853d, d...)
	cb.Do("Unk_efc10ac", &t.Unk_efc10ac, d...)
	cb.Do("Unk_67c3614", &t.Unk_67c3614, d...)
	cb.Do("Unk_6236ef1", &t.Unk_6236ef1, d...)
	cb.Do("Unk_5d800f3", &t.Unk_5d800f3, d...)
	cb.Do("Unk_75c2a63", &t.Unk_75c2a63, d...)
	cb.Do("Unk_32ded65", &t.Unk_32ded65, d...)
	cb.Do("Unk_ba7c108", &t.Unk_ba7c108, d...)
	cb.Do("Unk_ea151f5", &t.Unk_ea151f5, d...)
	cb.Do("Unk_26bea03", &t.Unk_26bea03, d...)
	cb.Do("Unk_26bec71", &t.Unk_26bec71, d...)
	cb.Do("Unk_4d37f57", &t.Unk_4d37f57, d...)
	cb.Do("FlHighlightBrightness", &t.FlHighlightBrightness, d...)
	cb.Do("Unk_9773164", &t.Unk_9773164, d...)
	cb.Do("Unk_8682ecb", &t.Unk_8682ecb, d...)
	cb.Do("RgbaPlayer0Color", &t.RgbaPlayer0Color, d...)
	cb.Do("RgbaPlayer1Color", &t.RgbaPlayer1Color, d...)
	cb.Do("RgbaPlayer2Color", &t.RgbaPlayer2Color, d...)
	cb.Do("RgbaPlayer3Color", &t.RgbaPlayer3Color, d...)
	cb.Do("RgbaPlayerLocalSolo", &t.RgbaPlayerLocalSolo, d...)
	cb.Do("Unk_dd6ca58", &t.Unk_dd6ca58, d...)
	cb.Do("Unk_14e6af7", &t.Unk_14e6af7, d...)
	cb.Do("Unk_db836fa", &t.Unk_db836fa, d...)
	cb.Do("Unk_ed20455", &t.Unk_ed20455, d...)
	cb.Do("Unk_a879fd8", &t.Unk_a879fd8, d...)
	cb.Do("Unk_614e428", &t.Unk_614e428, d...)
	cb.Do("FlTranslucencyScale", &t.FlTranslucencyScale, d...)
	cb.Do("FlTranslucencyThicknessScale", &t.FlTranslucencyThicknessScale, d...)
	cb.Do("FlTranslucencyNormalOffset", &t.FlTranslucencyNormalOffset, d...)
	cb.Do("Unk_4450d33", &t.Unk_4450d33, d...)
	cb.Do("Unk_52fa93a", &t.Unk_52fa93a, d...)
	cb.Do("Unk_f719403", &t.Unk_f719403, d...)
	cb.Do("Unk_556d46a", &t.Unk_556d46a, d...)
	cb.Do("Unk_25055f1", &t.Unk_25055f1, d...)
	cb.Do("Unk_808753f", &t.Unk_808753f, d...)
	cb.Do("Unk_c393e43", &t.Unk_c393e43, d...)
	cb.Do("Unk_5149854", &t.Unk_5149854, d...)
	cb.Do("Unk_83c9b2a", &t.Unk_83c9b2a, d...)
	cb.Do("Unk_8e6396a", &t.Unk_8e6396a, d...)
	cb.Do("Unk_922b1da", &t.Unk_922b1da, d...)
	cb.Do("Unk_b08e030", &t.Unk_b08e030, d...)
	cb.Do("Unk_26ab22f", &t.Unk_26ab22f, d...)
	cb.Do("Unk_55f065", &t.Unk_55f065, d...)
	cb.Do("Unk_c8a3761", &t.Unk_c8a3761, d...)
	cb.Do("Unk_e661bd7", &t.Unk_e661bd7, d...)
	cb.Do("WpRainVolumeMin", &t.WpRainVolumeMin, d...)
	cb.Do("WpRainVolumeMax", &t.WpRainVolumeMax, d...)
	cb.Do("Unk_7f22f2a", &t.Unk_7f22f2a, d...)
	cb.Do("Unk_2665f25", &t.Unk_2665f25, d...)
	cb.Do("Unk_c28b473", &t.Unk_c28b473, d...)
	cb.Do("Unk_df5ec50", &t.Unk_df5ec50, d...)
	cb.Do("Unk_620e28d", &t.Unk_620e28d, d...)
	cb.Do("Unk_f12663d", &t.Unk_f12663d, d...)
	cb.Do("Unk_6bec509", &t.Unk_6bec509, d...)
	cb.Do("Unk_4ae734e", &t.Unk_4ae734e, d...)
	cb.Do("FlSnowDecayRate", &t.FlSnowDecayRate, d...)
	cb.Do("Unk_d3bbd69", &t.Unk_d3bbd69, d...)
	cb.Do("Unk_5822eea", &t.Unk_5822eea, d...)
	cb.Do("Unk_725b405", &t.Unk_725b405, d...)
	cb.Do("Unk_aebfc2b", &t.Unk_aebfc2b, d...)
	cb.Do("Unk_cbab47a", &t.Unk_cbab47a, d...)
	cb.Do("Unk_d958d9", &t.Unk_d958d9, d...)
	cb.Do("Unk_eacf58c", &t.Unk_eacf58c, d...)
	cb.Do("Unk_13a3e3b", &t.Unk_13a3e3b, d...)
	cb.Do("Unk_cb97e5a", &t.Unk_cb97e5a, d...)
	cb.Do("Unk_8fb07f8", &t.Unk_8fb07f8, d...)
	cb.Do("FlFinalLevels", &t.FlFinalLevels, d...)
	cb.Do("Unk_c9de46", &t.Unk_c9de46, d...)
	cb.Do("Unk_b3fd1d8", &t.Unk_b3fd1d8, d...)
	cb.Do("Unk_5594707", &t.Unk_5594707, d...)
	cb.Do("Unk_ba7e426", &t.Unk_ba7e426, d...)
	cb.Do("Unk_836453e", &t.Unk_836453e, d...)
	cb.Do("Unk_4ee8575", &t.Unk_4ee8575, d...)
	cb.Do("SnoDungeonDefaultObserver", &t.SnoDungeonDefaultObserver, d...)
	cb.Do("Unk_884eb16", &t.Unk_884eb16, d...)
	cb.Do("Unk_9b111e3", &t.Unk_9b111e3, d...)
	cb.Do("Unk_25a68ac", &t.Unk_25a68ac, d...)
	cb.Do("Unk_b5e6750", &t.Unk_b5e6750, d...)
	cb.Do("Unk_ec28624", &t.Unk_ec28624, d...)
	cb.Do("Unk_f070975", &t.Unk_f070975, d...)
	cb.Do("Unk_db6c589", &t.Unk_db6c589, d...)
	cb.Do("Unk_2dc7eb1", &t.Unk_2dc7eb1, d...)
	cb.Do("Unk_b629779", &t.Unk_b629779, d...)
	cb.Do("Unk_3f0c40a", &t.Unk_3f0c40a, d...)
	cb.Do("Unk_e02135", &t.Unk_e02135, d...)
	cb.Do("Unk_40a2406", &t.Unk_40a2406, d...)
	cb.Do("Unk_bc4473", &t.Unk_bc4473, d...)
	cb.Do("Unk_cb3bd6f", &t.Unk_cb3bd6f, d...)
	cb.Do("Unk_e69e500", &t.Unk_e69e500, d...)
	cb.Do("ArAudioMonsterCategories", &t.ArAudioMonsterCategories, d...)
	cb.Do("ArTraversalSurfaceOptions", &t.ArTraversalSurfaceOptions, d...)
	cb.Do("Unk_efa9723", &t.Unk_efa9723, d...)
	cb.Do("Unk_2140bd4", &t.Unk_2140bd4, d...)
	cb.Do("Unk_9e6e6b5", &t.Unk_9e6e6b5, d...)
	cb.Do("Unk_3d0e848", &t.Unk_3d0e848, d...)
	cb.Do("Unk_aa1fd73", &t.Unk_aa1fd73, d...)
	cb.Do("Unk_88029e3", &t.Unk_88029e3, d...)
	cb.Do("Unk_b56464f", &t.Unk_b56464f, d...)
	cb.Do("Unk_7885a5e", &t.Unk_7885a5e, d...)
	cb.Do("Unk_2900bd9", &t.Unk_2900bd9, d...)
	cb.Do("Unk_4f6a577", &t.Unk_4f6a577, d...)
	cb.Do("Unk_410fa4f", &t.Unk_410fa4f, d...)
	cb.Do("Unk_575837", &t.Unk_575837, d...)
	cb.Do("Unk_93531cf", &t.Unk_93531cf, d...)
	cb.Do("Unk_4ae2208", &t.Unk_4ae2208, d...)
	cb.Do("PtVOParameters", &t.PtVOParameters, d...)
	cb.Do("Unk_57dee35", &t.Unk_57dee35, d...)
	cb.Do("Unk_6d8495e", &t.Unk_6d8495e, d...)
	cb.Do("Unk_3f74e62", &t.Unk_3f74e62, d...)
	cb.Do("Unk_5202085", &t.Unk_5202085, d...)
	cb.Do("Unk_c322de7", &t.Unk_c322de7, d...)
	cb.Do("Unk_aa0944b", &t.Unk_aa0944b, d...)
	cb.Do("TShoreWaveSettings", &t.TShoreWaveSettings, d...)
	cb.Do("Unk_fa3df7c", &t.Unk_fa3df7c, d...)
	cb.Do("Unk_c9c8405", &t.Unk_c9c8405, d...)
	cb.Do("TLuxSettings", &t.TLuxSettings, d...)
	cb.Do("TNitSettings", &t.TNitSettings, d...)
	cb.Do("TVertexCountSettings", &t.TVertexCountSettings, d...)
	cb.Do("TVertexDensitySettings", &t.TVertexDensitySettings, d...)
	cb.Do("TLightingDepthSettings", &t.TLightingDepthSettings, d...)
	cb.Do("TLightInfluenceSettings", &t.TLightInfluenceSettings, d...)
	cb.Do("ArFoleyMaterialTags", &t.ArFoleyMaterialTags, d...)
	cb.Do("ArConditionalAudioStates", &t.ArConditionalAudioStates, d...)
	cb.Do("Unk_77afde8", &t.Unk_77afde8, d...)
	cb.Do("Unk_6c7ea27", &t.Unk_6c7ea27, d...)
	cb.Do("Unk_23d823e", &t.Unk_23d823e, d...)
	cb.Do("Unk_e54f346", &t.Unk_e54f346, d...)
	cb.Do("Unk_a412bc0", &t.Unk_a412bc0, d...)
	cb.Do("Unk_e0c0343", &t.Unk_e0c0343, d...)
	cb.Do("Unk_9dd7abd", &t.Unk_9dd7abd, d...)
	cb.Do("Unk_66301bd", &t.Unk_66301bd, d...)
	cb.Do("Unk_f0e8c35", &t.Unk_f0e8c35, d...)
	cb.Do("Unk_9b5adac", &t.Unk_9b5adac, d...)
	cb.Do("Unk_9db4d03", &t.Unk_9db4d03, d...)
	cb.Do("Unk_2d039a1", &t.Unk_2d039a1, d...)
	cb.Do("Unk_d87185b", &t.Unk_d87185b, d...)
	cb.Do("Unk_f92dd82", &t.Unk_f92dd82, d...)
	cb.Do("Unk_1ed9c8a", &t.Unk_1ed9c8a, d...)
	cb.Do("Unk_85d52d8", &t.Unk_85d52d8, d...)
	cb.Do("Unk_e02147a", &t.Unk_e02147a, d...)
}

type AlphaBlendFactors struct {
	FAlphaBlendEnable         DT_INT
	EBlendOp                  DT_ENUM
	ESrcBlendFactor           DT_ENUM
	EDestBlendFactor          DT_ENUM
	FSeparateAlphaBlendEnable DT_INT
	EBlendOpAlpha             DT_ENUM
	ESrcBlendFactorAlpha      DT_ENUM
	EDestBlendFactorAlpha     DT_ENUM
	FRWriteEnable             DT_INT
	FGWriteEnable             DT_INT
	FBWriteEnable             DT_INT
	FAWriteEnable             DT_INT
}

func (t *AlphaBlendFactors) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.FAlphaBlendEnable, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.EBlendOp, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.ESrcBlendFactor, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.EDestBlendFactor, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.FSeparateAlphaBlendEnable, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.EBlendOpAlpha, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ESrcBlendFactorAlpha, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.EDestBlendFactorAlpha, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.FRWriteEnable, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.FGWriteEnable, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.FBWriteEnable, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.FAWriteEnable, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *AlphaBlendFactors) Walk(cb WalkCallback, d ...any) {
	cb.Do("FAlphaBlendEnable", &t.FAlphaBlendEnable, d...)
	cb.Do("EBlendOp", &t.EBlendOp, d...)
	cb.Do("ESrcBlendFactor", &t.ESrcBlendFactor, d...)
	cb.Do("EDestBlendFactor", &t.EDestBlendFactor, d...)
	cb.Do("FSeparateAlphaBlendEnable", &t.FSeparateAlphaBlendEnable, d...)
	cb.Do("EBlendOpAlpha", &t.EBlendOpAlpha, d...)
	cb.Do("ESrcBlendFactorAlpha", &t.ESrcBlendFactorAlpha, d...)
	cb.Do("EDestBlendFactorAlpha", &t.EDestBlendFactorAlpha, d...)
	cb.Do("FRWriteEnable", &t.FRWriteEnable, d...)
	cb.Do("FGWriteEnable", &t.FGWriteEnable, d...)
	cb.Do("FBWriteEnable", &t.FBWriteEnable, d...)
	cb.Do("FAWriteEnable", &t.FAWriteEnable, d...)
}

type PlayerHasEarnedAchievementSubcondition struct {
	// Inherits Subcondition
	// Inherits PolymorphicBase
	DwType         DT_UINT
	BNegate        DT_INT
	DwPad          DT_UINT
	SnoAchievement DT_SNO
}

func (t *PlayerHasEarnedAchievementSubcondition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BNegate, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SnoAchievement, r, &Options{
		Flags: 513,
		Group: 99,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PlayerHasEarnedAchievementSubcondition) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("BNegate", &t.BNegate, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("SnoAchievement", &t.SnoAchievement, d...)
}

type GameTestingInteractNPC struct {
	THeader   RequiredMessageHeader
	SzNPCName DT_CHARARRAY
}

func (t *GameTestingInteractNPC) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SzNPCName, r, &Options{
		ArrayLength: 64,
		Flags:       1,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+80, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *GameTestingInteractNPC) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("SzNPCName", &t.SzNPCName, d...)
}

type NetAttributeKeyValue struct {
	NKeyParam  DT_OPTIONAL[*DT_INT]
	EKeyAttrib DT_ENUM
}

func (t *NetAttributeKeyValue) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.NKeyParam, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.EKeyAttrib, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *NetAttributeKeyValue) Walk(cb WalkCallback, d ...any) {
	cb.Do("NKeyParam", &t.NKeyParam, d...)
	cb.Do("EKeyAttrib", &t.EKeyAttrib, d...)
}

type PhaseJumpScriptTriggeredEvent struct {
	// Inherits PhaseJumpBase
	// Inherits PolymorphicBase
	DwType       DT_UINT
	Unk_2de4987  DT_UINT
	ArConditions DT_POLYMORPHIC_VARIABLEARRAY[*DT_INT64]
	BEnd         DT_INT
	DwPad        DT_UINT
}

func (t *PhaseJumpScriptTriggeredEvent) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_2de4987, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ArConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.BEnd, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+56, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PhaseJumpScriptTriggeredEvent) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("Unk_2de4987", &t.Unk_2de4987, d...)
	cb.Do("ArConditions", &t.ArConditions, d...)
	cb.Do("BEnd", &t.BEnd, d...)
	cb.Do("DwPad", &t.DwPad, d...)
}

type ZoneProgressEarnedMessage struct {
	THeader             RequiredMessageHeader
	WpPlace             SharedServerWorldPlace
	EZone               DT_ENUM
	NProgressAmount     DT_INT
	Unk_40f5b6          DT_INT
	EEarnedProgressType DT_ENUM
}

func (t *ZoneProgressEarnedMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.WpPlace, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.EZone, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.NProgressAmount, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.Unk_40f5b6, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.EEarnedProgressType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+52, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ZoneProgressEarnedMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("WpPlace", &t.WpPlace, d...)
	cb.Do("EZone", &t.EZone, d...)
	cb.Do("NProgressAmount", &t.NProgressAmount, d...)
	cb.Do("Unk_40f5b6", &t.Unk_40f5b6, d...)
	cb.Do("EEarnedProgressType", &t.EEarnedProgressType, d...)
}

type LightDefinition struct {
	DwFlags        DT_UINT
	NPriority      DT_INT
	DwMaxInstances DT_UINT
	TInstanceData  LightInstanceData
	Unk_383f1ce    DT_FLOAT
	Unk_b9c2829    DT_FLOAT
}

func (t *LightDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.NPriority, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.DwMaxInstances, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.TInstanceData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+920, &t.Unk_383f1ce, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+924, &t.Unk_b9c2829, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+928, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *LightDefinition) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwFlags", &t.DwFlags, d...)
	cb.Do("NPriority", &t.NPriority, d...)
	cb.Do("DwMaxInstances", &t.DwMaxInstances, d...)
	cb.Do("TInstanceData", &t.TInstanceData, d...)
	cb.Do("Unk_383f1ce", &t.Unk_383f1ce, d...)
	cb.Do("Unk_b9c2829", &t.Unk_b9c2829, d...)
}

type CheatCampaignStateMessage struct {
	THeader           RequiredMessageHeader
	BSetPlayerState   DT_INT
	BSetPartyState    DT_INT
	ArCompletedQuests DT_FIXEDARRAY[*DT_SNO]
}

func (t *CheatCampaignStateMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BSetPlayerState, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.BSetPartyState, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ArCompletedQuests, r, &Options{
		ArrayLength: 128,
		Flags:       9,
		Group:       31,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+540, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *CheatCampaignStateMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("BSetPlayerState", &t.BSetPlayerState, d...)
	cb.Do("BSetPartyState", &t.BSetPartyState, d...)
	cb.Do("ArCompletedQuests", &t.ArCompletedQuests, d...)
}

type InterpolationPath_float struct {
	THeader      InterpolationPathHeader
	PtArrayNodes DT_VARIABLEARRAY[*InterpolationNode_float]
}

func (t *InterpolationPath_float) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.PtArrayNodes, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+56, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *InterpolationPath_float) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("PtArrayNodes", &t.PtArrayNodes, d...)
}

type PowerConditionHasDamageShield struct {
	// Inherits PowerConditionBase
	// Inherits PolymorphicBase
	DwType   DT_UINT
	BInverse DT_INT
	DwPad    DT_UINT
	ESubject DT_ENUM
}

func (t *PowerConditionHasDamageShield) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BInverse, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ESubject, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PowerConditionHasDamageShield) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("BInverse", &t.BInverse, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("ESubject", &t.ESubject, d...)
}

type SpeedTree8BranchWindLevel struct {
	AfFrequency  DT_FIXEDARRAY[*DT_FLOAT]
	AfBend       DT_FIXEDARRAY[*DT_FLOAT]
	AfTurbulence DT_FIXEDARRAY[*DT_FLOAT]
	Unk_2a283cc  DT_FIXEDARRAY[*DT_FLOAT]
	Unk_5c74a81  DT_FLOAT
}

func (t *SpeedTree8BranchWindLevel) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.AfFrequency, r, &Options{
		ArrayLength: 20,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.AfBend, r, &Options{
		ArrayLength: 20,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+160, &t.AfTurbulence, r, &Options{
		ArrayLength: 20,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+240, &t.Unk_2a283cc, r, &Options{
		ArrayLength: 20,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+320, &t.Unk_5c74a81, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+324, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *SpeedTree8BranchWindLevel) Walk(cb WalkCallback, d ...any) {
	cb.Do("AfFrequency", &t.AfFrequency, d...)
	cb.Do("AfBend", &t.AfBend, d...)
	cb.Do("AfTurbulence", &t.AfTurbulence, d...)
	cb.Do("Unk_2a283cc", &t.Unk_2a283cc, d...)
	cb.Do("Unk_5c74a81", &t.Unk_5c74a81, d...)
}

type OnProjectileImpactPowerCallback struct {
	// Inherits PowerCallbackBase
	// Inherits PolymorphicBase
	DwType                DT_UINT
	DwPad                 DT_UINT
	SnoTriggerEffectGroup DT_SNO
	BCouldHaveRagdolled   DT_INT
	THitTargetEffect      ProjectileImpactEffect
	THitSceneEffect       ProjectileImpactEffect
	TExpiredEffect        ProjectileImpactEffect
}

func (t *OnProjectileImpactPowerCallback) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoTriggerEffectGroup, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.BCouldHaveRagdolled, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.THitTargetEffect, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.THitSceneEffect, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.TExpiredEffect, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+96, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *OnProjectileImpactPowerCallback) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("SnoTriggerEffectGroup", &t.SnoTriggerEffectGroup, d...)
	cb.Do("BCouldHaveRagdolled", &t.BCouldHaveRagdolled, d...)
	cb.Do("THitTargetEffect", &t.THitTargetEffect, d...)
	cb.Do("THitSceneEffect", &t.THitSceneEffect, d...)
	cb.Do("TExpiredEffect", &t.TExpiredEffect, d...)
}

type InterpolationPath_int32 struct {
	THeader      InterpolationPathHeader
	PtArrayNodes DT_VARIABLEARRAY[*InterpolationNode_int32]
}

func (t *InterpolationPath_int32) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.PtArrayNodes, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+56, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *InterpolationPath_int32) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("PtArrayNodes", &t.PtArrayNodes, d...)
}

type PlayerFootstepTableEntry struct {
	// Inherits FootstepTableEntry
	// Inherits PolymorphicBase
	DwType                           DT_UINT
	DwPad                            DT_UINT
	SnoSurface                       DT_SNO
	Unk_96ed25b                      DT_UINT
	SnoSplashParticle                DT_SNO
	SnoFootstepEffectLeft            DT_SNO
	SnoFootstepEffectRight           DT_SNO
	SnoFootstepDragEffect            DT_SNO
	SnoFootstepTrailEffect           DT_SNO
	SnoFootstepLiftEffect            DT_SNO
	SnoResidualFootstepParticleLeft  DT_SNO
	SnoResidualFootstepParticleRight DT_SNO
}

func (t *PlayerFootstepTableEntry) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoSurface, r, &Options{
		Flags: 1,
		Group: 43,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.Unk_96ed25b, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SnoSplashParticle, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.SnoFootstepEffectLeft, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.SnoFootstepEffectRight, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.SnoFootstepDragEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.SnoFootstepTrailEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.SnoFootstepLiftEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.SnoResidualFootstepParticleLeft, r, &Options{
		Flags: 1,
		Group: 27,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.SnoResidualFootstepParticleRight, r, &Options{
		Flags: 1,
		Group: 27,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+56, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PlayerFootstepTableEntry) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("SnoSurface", &t.SnoSurface, d...)
	cb.Do("Unk_96ed25b", &t.Unk_96ed25b, d...)
	cb.Do("SnoSplashParticle", &t.SnoSplashParticle, d...)
	cb.Do("SnoFootstepEffectLeft", &t.SnoFootstepEffectLeft, d...)
	cb.Do("SnoFootstepEffectRight", &t.SnoFootstepEffectRight, d...)
	cb.Do("SnoFootstepDragEffect", &t.SnoFootstepDragEffect, d...)
	cb.Do("SnoFootstepTrailEffect", &t.SnoFootstepTrailEffect, d...)
	cb.Do("SnoFootstepLiftEffect", &t.SnoFootstepLiftEffect, d...)
	cb.Do("SnoResidualFootstepParticleLeft", &t.SnoResidualFootstepParticleLeft, d...)
	cb.Do("SnoResidualFootstepParticleRight", &t.SnoResidualFootstepParticleRight, d...)
}

type GemTypeSubcondition struct {
	// Inherits NumericComparisonSubcondition
	// Inherits Subcondition
	// Inherits PolymorphicBase
	DwType        DT_UINT
	BNegate       DT_INT
	EComparisonOp DT_ENUM
	DwPad         DT_UINT
	EType         DT_ENUM
}

func (t *GemTypeSubcondition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BNegate, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.EComparisonOp, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.EType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+40, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *GemTypeSubcondition) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("BNegate", &t.BNegate, d...)
	cb.Do("EComparisonOp", &t.EComparisonOp, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("EType", &t.EType, d...)
}

type SkillRankChangedMessage struct {
	THeader               RequiredMessageHeader
	DwPlayerGameAccountId DT_UINT
	SnoPower              DT_SNO
	DwRank                DT_UINT
	BFromTome             DT_INT
}

func (t *SkillRankChangedMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.DwPlayerGameAccountId, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.SnoPower, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.DwRank, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.BFromTome, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *SkillRankChangedMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("DwPlayerGameAccountId", &t.DwPlayerGameAccountId, d...)
	cb.Do("SnoPower", &t.SnoPower, d...)
	cb.Do("DwRank", &t.DwRank, d...)
	cb.Do("BFromTome", &t.BFromTome, d...)
}

type PortalSpecifierMessage struct {
	THeader       RequiredMessageHeader
	Ann           DT_ACD_NETWORK_NAME
	TResolvedDest ResolvedPortalDestination
}

func (t *PortalSpecifierMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Ann, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.TResolvedDest, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+36, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PortalSpecifierMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("Ann", &t.Ann, d...)
	cb.Do("TResolvedDest", &t.TResolvedDest, d...)
}

type ScriptedAchievementEvent_Table struct {
	// Inherits GameBalanceTable
	// Inherits PolymorphicBase
	DwType   DT_UINT
	DwPad    DT_UINT
	TEntries DT_VARIABLEARRAY[*ScriptedAchievementEvent]
}

func (t *ScriptedAchievementEvent_Table) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TEntries, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ScriptedAchievementEvent_Table) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("TEntries", &t.TEntries, d...)
}

type CriteriaDefinition struct {
	UID                DT_UINT
	UNecessaryQuantity DT_INT64
	TStartEvent        CriteriaStartEvent
	TAdvanceEvent      CriteriaEvent
	TFailEvent         CriteriaEvent
	UFlags             DT_UINT
}

func (t *CriteriaDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.UID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.UNecessaryQuantity, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TStartEvent, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.TAdvanceEvent, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+216, &t.TFailEvent, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+312, &t.UFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if _, err := r.Seek(p+320, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *CriteriaDefinition) Walk(cb WalkCallback, d ...any) {
	cb.Do("UID", &t.UID, d...)
	cb.Do("UNecessaryQuantity", &t.UNecessaryQuantity, d...)
	cb.Do("TStartEvent", &t.TStartEvent, d...)
	cb.Do("TAdvanceEvent", &t.TAdvanceEvent, d...)
	cb.Do("TFailEvent", &t.TFailEvent, d...)
	cb.Do("UFlags", &t.UFlags, d...)
}

type NPCComponentSetPreloadHelper struct {
	SnoActor        DT_SNO
	SnoComponentSet DT_SNO
	TBaseData       AppearanceAndMaterialContent
	TSlots          SerialDataInfo
}

func (t *NPCComponentSetPreloadHelper) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoActor, r, &Options{
		Flags: 1,
		Group: 1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.SnoComponentSet, r, &Options{
		Flags: 1,
		Group: 1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.TBaseData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.TSlots, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *NPCComponentSetPreloadHelper) Walk(cb WalkCallback, d ...any) {
	cb.Do("SnoActor", &t.SnoActor, d...)
	cb.Do("SnoComponentSet", &t.SnoComponentSet, d...)
	cb.Do("TBaseData", &t.TBaseData, d...)
	cb.Do("TSlots", &t.TSlots, d...)
}

type ZoneMapSecretTexture struct {
	SnoSecretTexture     DT_SNO
	ArCampaignConditions DT_VARIABLEARRAY[*ZoneMapSecretCondition]
}

func (t *ZoneMapSecretTexture) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoSecretTexture, r, &Options{
		Flags: 513,
		Group: 44,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.ArCampaignConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ZoneMapSecretTexture) Walk(cb WalkCallback, d ...any) {
	cb.Do("SnoSecretTexture", &t.SnoSecretTexture, d...)
	cb.Do("ArCampaignConditions", &t.ArCampaignConditions, d...)
}

type ConversationScopeNode struct {
	// Inherits ConversationTreeNode
	// Inherits PolymorphicBase
	DwType         DT_UINT
	DwPad          DT_UINT
	DwNodeID       DT_UINT
	DwNextNodeID   DT_UINT
	DwParentNodeID DT_UINT
	PtNextNode     DT_INT64
	DwFlags        DT_UINT
	SzComment      DT_CSTRING[*DT_BYTE]
	ArChildNodes   DT_POLYMORPHIC_VARIABLEARRAY[*DT_INT64]
	SnoCondition   DT_SNO
	Unk_d8bf9e4    DT_INT
}

func (t *ConversationScopeNode) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.DwNodeID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwNextNodeID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.DwParentNodeID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.PtNextNode, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.DwFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.SzComment, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.ArChildNodes, r, &Options{Flags: 262145}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.SnoCondition, r, &Options{
		Flags: 1,
		Group: 51,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.Unk_d8bf9e4, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+96, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ConversationScopeNode) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("DwNodeID", &t.DwNodeID, d...)
	cb.Do("DwNextNodeID", &t.DwNextNodeID, d...)
	cb.Do("DwParentNodeID", &t.DwParentNodeID, d...)
	cb.Do("PtNextNode", &t.PtNextNode, d...)
	cb.Do("DwFlags", &t.DwFlags, d...)
	cb.Do("SzComment", &t.SzComment, d...)
	cb.Do("ArChildNodes", &t.ArChildNodes, d...)
	cb.Do("SnoCondition", &t.SnoCondition, d...)
	cb.Do("Unk_d8bf9e4", &t.Unk_d8bf9e4, d...)
}

type LightInfluenceSettings struct {
	FlLightInfluenceThreshold DT_FLOAT
}

func (t *LightInfluenceSettings) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.FlLightInfluenceThreshold, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+4, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *LightInfluenceSettings) Walk(cb WalkCallback, d ...any) {
	cb.Do("FlLightInfluenceThreshold", &t.FlLightInfluenceThreshold, d...)
}

type UITextStyleOptionalFieldMapDefaults struct {
	FlTextInsetX               DT_FLOAT
	FlTextInsetY               DT_FLOAT
	FlTextPaddingL             DT_FLOAT
	FlTextPaddingT             DT_FLOAT
	FlTextPaddingR             DT_FLOAT
	FlTextPaddingB             DT_FLOAT
	HText                      StringLabelHandleEx
	NFontSizeFallback          DT_INT
	Unk_ad7d5ca                DT_INT
	Unk_748233d                DT_INT
	ETextJustify               DT_ENUM
	ETextJustifyVertical       DT_ENUM
	FlTextAdvanceScalar        DT_FLOAT
	FlTextLineSpacingScalar    DT_FLOAT
	BTextAllCaps               DT_INT
	NTextLinesBeforeTruncation DT_INT
	BWordWrap                  DT_INT
	BShrinkToFit               DT_INT
	EResizeToFit               DT_ENUM
	BHyperlinkAware            DT_INT
	BPassword                  DT_INT
	BSelectable                DT_INT
	BUseDropShadow             DT_INT
	Unk_c5637af                DT_INT
	BDisableFontScale          DT_INT
	NOutlineStrength           DT_UINT
	SzPreviewText              DT_CSTRING[*DT_BYTE]
	Unk_5e1244a                DT_INT
}

func (t *UITextStyleOptionalFieldMapDefaults) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.FlTextInsetX, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.FlTextInsetY, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.FlTextPaddingL, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.FlTextPaddingT, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.FlTextPaddingR, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.FlTextPaddingB, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.HText, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.NFontSizeFallback, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.Unk_ad7d5ca, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.Unk_748233d, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.ETextJustify, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.ETextJustifyVertical, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.FlTextAdvanceScalar, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.FlTextLineSpacingScalar, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+60, &t.BTextAllCaps, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.NTextLinesBeforeTruncation, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.BWordWrap, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.BShrinkToFit, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.EResizeToFit, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.BHyperlinkAware, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.BPassword, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.BSelectable, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.BUseDropShadow, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.Unk_c5637af, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+100, &t.BDisableFontScale, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+104, &t.NOutlineStrength, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.SzPreviewText, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.Unk_5e1244a, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+136, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *UITextStyleOptionalFieldMapDefaults) Walk(cb WalkCallback, d ...any) {
	cb.Do("FlTextInsetX", &t.FlTextInsetX, d...)
	cb.Do("FlTextInsetY", &t.FlTextInsetY, d...)
	cb.Do("FlTextPaddingL", &t.FlTextPaddingL, d...)
	cb.Do("FlTextPaddingT", &t.FlTextPaddingT, d...)
	cb.Do("FlTextPaddingR", &t.FlTextPaddingR, d...)
	cb.Do("FlTextPaddingB", &t.FlTextPaddingB, d...)
	cb.Do("HText", &t.HText, d...)
	cb.Do("NFontSizeFallback", &t.NFontSizeFallback, d...)
	cb.Do("Unk_ad7d5ca", &t.Unk_ad7d5ca, d...)
	cb.Do("Unk_748233d", &t.Unk_748233d, d...)
	cb.Do("ETextJustify", &t.ETextJustify, d...)
	cb.Do("ETextJustifyVertical", &t.ETextJustifyVertical, d...)
	cb.Do("FlTextAdvanceScalar", &t.FlTextAdvanceScalar, d...)
	cb.Do("FlTextLineSpacingScalar", &t.FlTextLineSpacingScalar, d...)
	cb.Do("BTextAllCaps", &t.BTextAllCaps, d...)
	cb.Do("NTextLinesBeforeTruncation", &t.NTextLinesBeforeTruncation, d...)
	cb.Do("BWordWrap", &t.BWordWrap, d...)
	cb.Do("BShrinkToFit", &t.BShrinkToFit, d...)
	cb.Do("EResizeToFit", &t.EResizeToFit, d...)
	cb.Do("BHyperlinkAware", &t.BHyperlinkAware, d...)
	cb.Do("BPassword", &t.BPassword, d...)
	cb.Do("BSelectable", &t.BSelectable, d...)
	cb.Do("BUseDropShadow", &t.BUseDropShadow, d...)
	cb.Do("Unk_c5637af", &t.Unk_c5637af, d...)
	cb.Do("BDisableFontScale", &t.BDisableFontScale, d...)
	cb.Do("NOutlineStrength", &t.NOutlineStrength, d...)
	cb.Do("SzPreviewText", &t.SzPreviewText, d...)
	cb.Do("Unk_5e1244a", &t.Unk_5e1244a, d...)
}

type SoundDefinition struct {
	DwFlags              DT_UINT
	TSoundPlayHistory    SoundPlayHistory
	SnoSoundBankMetaData DT_SNO
	SnoSoundBankMedia    DT_SNO
	Unk_fec55de          DT_UINT
	DwWwiseFlags         DT_UINT
	FlMaxRange           DT_FLOAT
	PtUsedGameParameters DT_VARIABLEARRAY[*SoundEventGameParameter]
	SnoStopSound         DT_SNO
	FlCooldownDuration   DT_FLOAT
	Unk_dc0bc5b          DT_INT
	FlSoundLimitRadius   DT_FLOAT
	Unk_a86caeb          DT_FLOAT
	FlDopplerFactor      DT_FLOAT
	Unk_f056ee9          DT_FLOAT
	Unk_f056deb          DT_FLOAT
}

func (t *SoundDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.TSoundPlayHistory, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.SnoSoundBankMetaData, r, &Options{
		Flags: 1,
		Group: 71,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.SnoSoundBankMedia, r, &Options{
		Flags: 1,
		Group: 71,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.Unk_fec55de, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.DwWwiseFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.FlMaxRange, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.PtUsedGameParameters, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.SnoStopSound, r, &Options{
		Flags: 1,
		Group: 40,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.FlCooldownDuration, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.Unk_dc0bc5b, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.FlSoundLimitRadius, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.Unk_a86caeb, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.FlDopplerFactor, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.Unk_f056ee9, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+100, &t.Unk_f056deb, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+104, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *SoundDefinition) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwFlags", &t.DwFlags, d...)
	cb.Do("TSoundPlayHistory", &t.TSoundPlayHistory, d...)
	cb.Do("SnoSoundBankMetaData", &t.SnoSoundBankMetaData, d...)
	cb.Do("SnoSoundBankMedia", &t.SnoSoundBankMedia, d...)
	cb.Do("Unk_fec55de", &t.Unk_fec55de, d...)
	cb.Do("DwWwiseFlags", &t.DwWwiseFlags, d...)
	cb.Do("FlMaxRange", &t.FlMaxRange, d...)
	cb.Do("PtUsedGameParameters", &t.PtUsedGameParameters, d...)
	cb.Do("SnoStopSound", &t.SnoStopSound, d...)
	cb.Do("FlCooldownDuration", &t.FlCooldownDuration, d...)
	cb.Do("Unk_dc0bc5b", &t.Unk_dc0bc5b, d...)
	cb.Do("FlSoundLimitRadius", &t.FlSoundLimitRadius, d...)
	cb.Do("Unk_a86caeb", &t.Unk_a86caeb, d...)
	cb.Do("FlDopplerFactor", &t.FlDopplerFactor, d...)
	cb.Do("Unk_f056ee9", &t.Unk_f056ee9, d...)
	cb.Do("Unk_f056deb", &t.Unk_f056deb, d...)
}

type MarkerInstanceGroupsAO struct {
	ArVertexAO DT_VARIABLEARRAY[*DT_BYTE]
}

func (t *MarkerInstanceGroupsAO) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.ArVertexAO, r, &Options{Flags: 2097153}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *MarkerInstanceGroupsAO) Walk(cb WalkCallback, d ...any) {
	cb.Do("ArVertexAO", &t.ArVertexAO, d...)
}

type UILoadscreenTipData struct {
	SnoStringlist DT_SNO
	ArConditions  DT_VARIABLEARRAY[*DT_SNO]
}

func (t *UILoadscreenTipData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoStringlist, r, &Options{
		Flags: 1,
		Group: 42,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.ArConditions, r, &Options{
		Flags: 1,
		Group: 51,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *UILoadscreenTipData) Walk(cb WalkCallback, d ...any) {
	cb.Do("SnoStringlist", &t.SnoStringlist, d...)
	cb.Do("ArConditions", &t.ArConditions, d...)
}

type GameTestingPurchaseSkill struct {
	THeader     RequiredMessageHeader
	DwNodeIndex DT_UINT
}

func (t *GameTestingPurchaseSkill) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.DwNodeIndex, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+20, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *GameTestingPurchaseSkill) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("DwNodeIndex", &t.DwNodeIndex, d...)
}

type ScriptEventParamSubzone struct {
	// Inherits ScriptEventParamBase
	// Inherits PolymorphicBase
	DwType     DT_UINT
	EParamType DT_ENUM
	DwPad      DT_UINT
	SnoSubzone DT_SNO
}

func (t *ScriptEventParamSubzone) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.EParamType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SnoSubzone, r, &Options{
		Flags: 513,
		Group: 80,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ScriptEventParamSubzone) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("EParamType", &t.EParamType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("SnoSubzone", &t.SnoSubzone, d...)
}

type PhysicsDefinition struct {
	DwFlags             DT_UINT
	NMaxIterations      DT_INT
	FlFriction          DT_FLOAT
	FlRollingResistance DT_FLOAT
	FlRestitution       DT_FLOAT
	FlLinearDamping     DT_FLOAT
	FlAngularDamping    DT_FLOAT
	WCollisionMask      DT_UINT
	FlDragCoeff         DT_FLOAT
	FlAirBuoyancy       DT_FLOAT
	FlAccelerationMax   DT_FLOAT
	FlSpeedMax          DT_FLOAT
	FlGravityMultiplier DT_FLOAT
	TRandomAccelRange   DT_RANGE[*DT_FLOAT]
	Unk_7b327fe         DT_FLOAT
}

func (t *PhysicsDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.NMaxIterations, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.FlFriction, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.FlRollingResistance, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.FlRestitution, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.FlLinearDamping, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.FlAngularDamping, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.WCollisionMask, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.FlDragCoeff, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.FlAirBuoyancy, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.FlAccelerationMax, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.FlSpeedMax, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.FlGravityMultiplier, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+60, &t.TRandomAccelRange, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.Unk_7b327fe, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+72, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PhysicsDefinition) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwFlags", &t.DwFlags, d...)
	cb.Do("NMaxIterations", &t.NMaxIterations, d...)
	cb.Do("FlFriction", &t.FlFriction, d...)
	cb.Do("FlRollingResistance", &t.FlRollingResistance, d...)
	cb.Do("FlRestitution", &t.FlRestitution, d...)
	cb.Do("FlLinearDamping", &t.FlLinearDamping, d...)
	cb.Do("FlAngularDamping", &t.FlAngularDamping, d...)
	cb.Do("WCollisionMask", &t.WCollisionMask, d...)
	cb.Do("FlDragCoeff", &t.FlDragCoeff, d...)
	cb.Do("FlAirBuoyancy", &t.FlAirBuoyancy, d...)
	cb.Do("FlAccelerationMax", &t.FlAccelerationMax, d...)
	cb.Do("FlSpeedMax", &t.FlSpeedMax, d...)
	cb.Do("FlGravityMultiplier", &t.FlGravityMultiplier, d...)
	cb.Do("TRandomAccelRange", &t.TRandomAccelRange, d...)
	cb.Do("Unk_7b327fe", &t.Unk_7b327fe, d...)
}

type CharacterPreset struct {
	// Inherits PolymorphicBase
	DwType    DT_UINT
	DwPad     DT_UINT
	SzName    DT_CSTRING[*DT_BYTE]
	SnoWorld  DT_SNO
	NPadding1 DT_INT
}

func (t *CharacterPreset) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SzName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.SnoWorld, r, &Options{
		Flags: 513,
		Group: 48,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.NPadding1, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+40, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *CharacterPreset) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("SzName", &t.SzName, d...)
	cb.Do("SnoWorld", &t.SnoWorld, d...)
	cb.Do("NPadding1", &t.NPadding1, d...)
}

type AffixMessage struct {
	THeader                RequiredMessageHeader
	Ann                    DT_ACD_NETWORK_NAME
	FIdentified            DT_INT
	AAffixes               DT_FIXEDARRAY[*DT_SNO]
	AAffixRNGStates        DT_FIXEDARRAY[*RNGStateData]
	ARolledInherentAffixes DT_FIXEDARRAY[*DT_SNO]
}

func (t *AffixMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Ann, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.FIdentified, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.AAffixes, r, &Options{
		ArrayLength: 5,
		Flags:       9,
		Group:       104,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.AAffixRNGStates, r, &Options{
		ArrayLength: 5,
		Flags:       8,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.ARolledInherentAffixes, r, &Options{
		ArrayLength: 5,
		Flags:       9,
		Group:       104,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+120, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *AffixMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("Ann", &t.Ann, d...)
	cb.Do("FIdentified", &t.FIdentified, d...)
	cb.Do("AAffixes", &t.AAffixes, d...)
	cb.Do("AAffixRNGStates", &t.AAffixRNGStates, d...)
	cb.Do("ARolledInherentAffixes", &t.ARolledInherentAffixes, d...)
}

type GlobalWaypointData struct {
	// Inherits GlobalBase
	// Inherits PolymorphicBase
	DwType               DT_UINT
	DwPad                DT_UINT
	ArGlobalMarkerActors DT_VARIABLEARRAY[*GlobalMarkerActor]
}

func (t *GlobalWaypointData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.ArGlobalMarkerActors, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *GlobalWaypointData) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("ArGlobalMarkerActors", &t.ArGlobalMarkerActors, d...)
}

type TriggerEventOutroEffectGroup struct {
	// Inherits TriggerEvent
	// Inherits PolymorphicBase
	DwType          DT_UINT
	DwPad           DT_UINT
	TConditions     TriggerConditions
	FGenerated      DT_INT
	Unk_6cba752     DT_INT
	DwParentActorID DT_UINT
	IdEffectGroup   DT_UINT
}

func (t *TriggerEventOutroEffectGroup) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.FGenerated, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_6cba752, r, &Options{Flags: 16}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.DwParentActorID, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.IdEffectGroup, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+88, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TriggerEventOutroEffectGroup) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("TConditions", &t.TConditions, d...)
	cb.Do("FGenerated", &t.FGenerated, d...)
	cb.Do("Unk_6cba752", &t.Unk_6cba752, d...)
	cb.Do("DwParentActorID", &t.DwParentActorID, d...)
	cb.Do("IdEffectGroup", &t.IdEffectGroup, d...)
}

type MarkerActorGizmoData struct {
	PtDoorGizmoData             DT_VARIABLEARRAY[*MarkerDoorGizmoData]
	PtLockData                  DT_VARIABLEARRAY[*LockingGizmoData]
	PtPOICameraInstanceData     DT_VARIABLEARRAY[*POICameraInstanceData]
	PtTraversalInstanceData     DT_VARIABLEARRAY[*TraversalInstanceData]
	PtChestGizmoData            DT_VARIABLEARRAY[*MarkerChestGizmoData]
	PtSpawnerGizmoData          DT_VARIABLEARRAY[*SpawnerGizmoInstanceData]
	PtPortalGizmoData           DT_VARIABLEARRAY[*MarkerPortalGizmoData]
	PtPortalDestGizmoData       DT_VARIABLEARRAY[*MarkerPortalDestGizmoData]
	PtProxData                  DT_POLYMORPHIC_VARIABLEARRAY[*ProximityDataBase]
	PtTriggerProximityGizmoData DT_VARIABLEARRAY[*TriggerProximityData]
	PtMarkerBaseGizmoData       DT_VARIABLEARRAY[*MarkerBaseGizmoData]
	PtHiddenCacheGizmoData      DT_VARIABLEARRAY[*MarkerHiddenCacheGizmoData]
	PtRecipeEventGizmoData      DT_VARIABLEARRAY[*MarkerRecipeEventGizmoData]
	PtGizmoConditionData        DT_VARIABLEARRAY[*GizmoConditionData]
}

func (t *MarkerActorGizmoData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.PtDoorGizmoData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.PtLockData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.PtPOICameraInstanceData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.PtTraversalInstanceData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.PtChestGizmoData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.PtSpawnerGizmoData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.PtPortalGizmoData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.PtPortalDestGizmoData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.PtProxData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+152, &t.PtTriggerProximityGizmoData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+168, &t.PtMarkerBaseGizmoData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+184, &t.PtHiddenCacheGizmoData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+200, &t.PtRecipeEventGizmoData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+216, &t.PtGizmoConditionData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+232, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *MarkerActorGizmoData) Walk(cb WalkCallback, d ...any) {
	cb.Do("PtDoorGizmoData", &t.PtDoorGizmoData, d...)
	cb.Do("PtLockData", &t.PtLockData, d...)
	cb.Do("PtPOICameraInstanceData", &t.PtPOICameraInstanceData, d...)
	cb.Do("PtTraversalInstanceData", &t.PtTraversalInstanceData, d...)
	cb.Do("PtChestGizmoData", &t.PtChestGizmoData, d...)
	cb.Do("PtSpawnerGizmoData", &t.PtSpawnerGizmoData, d...)
	cb.Do("PtPortalGizmoData", &t.PtPortalGizmoData, d...)
	cb.Do("PtPortalDestGizmoData", &t.PtPortalDestGizmoData, d...)
	cb.Do("PtProxData", &t.PtProxData, d...)
	cb.Do("PtTriggerProximityGizmoData", &t.PtTriggerProximityGizmoData, d...)
	cb.Do("PtMarkerBaseGizmoData", &t.PtMarkerBaseGizmoData, d...)
	cb.Do("PtHiddenCacheGizmoData", &t.PtHiddenCacheGizmoData, d...)
	cb.Do("PtRecipeEventGizmoData", &t.PtRecipeEventGizmoData, d...)
	cb.Do("PtGizmoConditionData", &t.PtGizmoConditionData, d...)
}

type TriggerEventSetIGCMusic struct {
	// Inherits TriggerEventRangedDuration
	// Inherits TriggerEvent
	// Inherits PolymorphicBase
	DwType           DT_UINT
	TConditions      TriggerConditions
	FGenerated       DT_INT
	Unk_6cba752      DT_INT
	DwParentActorID  DT_UINT
	TDuration        DT_FLOAT
	DwTriggerFlags   DT_UINT
	DwTriggerFlagsEx DT_UINT
	TCleanup         TriggerCleanup
	Unk_49e9257      DT_INT
	Unk_5490979      DT_INT
	DwPad            DT_UINT
	SnoMusic         DT_SNO
	Unk_e1829be      DT_FLOAT
}

func (t *TriggerEventSetIGCMusic) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.FGenerated, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_6cba752, r, &Options{Flags: 16}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.DwParentActorID, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.TDuration, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.DwTriggerFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.DwTriggerFlagsEx, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.TCleanup, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+116, &t.Unk_49e9257, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.Unk_5490979, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+124, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.SnoMusic, r, &Options{
		Flags: 1,
		Group: 62,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+132, &t.Unk_e1829be, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+136, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TriggerEventSetIGCMusic) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("TConditions", &t.TConditions, d...)
	cb.Do("FGenerated", &t.FGenerated, d...)
	cb.Do("Unk_6cba752", &t.Unk_6cba752, d...)
	cb.Do("DwParentActorID", &t.DwParentActorID, d...)
	cb.Do("TDuration", &t.TDuration, d...)
	cb.Do("DwTriggerFlags", &t.DwTriggerFlags, d...)
	cb.Do("DwTriggerFlagsEx", &t.DwTriggerFlagsEx, d...)
	cb.Do("TCleanup", &t.TCleanup, d...)
	cb.Do("Unk_49e9257", &t.Unk_49e9257, d...)
	cb.Do("Unk_5490979", &t.Unk_5490979, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("SnoMusic", &t.SnoMusic, d...)
	cb.Do("Unk_e1829be", &t.Unk_e1829be, d...)
}

type ParticleSimKeyFrameNonUniformScale struct {
	FlTime DT_FLOAT
	VScale DT_VECTOR3D
}

func (t *ParticleSimKeyFrameNonUniformScale) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.FlTime, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.VScale, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ParticleSimKeyFrameNonUniformScale) Walk(cb WalkCallback, d ...any) {
	cb.Do("FlTime", &t.FlTime, d...)
	cb.Do("VScale", &t.VScale, d...)
}

type ParticleKeyFrames struct {
	PtPositions        DT_VARIABLEARRAY[*ParticleSimKeyFramePosition]
	PtColors           DT_VARIABLEARRAY[*ParticleSimKeyFrameColor]
	PtScales           DT_VARIABLEARRAY[*ParticleSimKeyFrameScale]
	PtNonUniformScales DT_VARIABLEARRAY[*ParticleSimKeyFrameNonUniformScale]
	PtRotations        DT_VARIABLEARRAY[*ParticleSimKeyFrameRotation]
	PtSpins            DT_VARIABLEARRAY[*ParticleSimKeyFrameSpin]
	PtDistortions      DT_VARIABLEARRAY[*ParticleSimKeyFrameDistortion]
}

func (t *ParticleKeyFrames) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.PtPositions, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.PtColors, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.PtScales, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.PtNonUniformScales, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.PtRotations, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.PtSpins, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.PtDistortions, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+112, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ParticleKeyFrames) Walk(cb WalkCallback, d ...any) {
	cb.Do("PtPositions", &t.PtPositions, d...)
	cb.Do("PtColors", &t.PtColors, d...)
	cb.Do("PtScales", &t.PtScales, d...)
	cb.Do("PtNonUniformScales", &t.PtNonUniformScales, d...)
	cb.Do("PtRotations", &t.PtRotations, d...)
	cb.Do("PtSpins", &t.PtSpins, d...)
	cb.Do("PtDistortions", &t.PtDistortions, d...)
}

type Type_cec837f6 struct {
	DwID                DT_UINT
	EType               DT_ENUM
	TDimension1         DT_STRING_FORMULA
	TDimension2         DT_STRING_FORMULA
	TDimension3         DT_STRING_FORMULA
	TDimension4         DT_STRING_FORMULA
	TDimension5         DT_STRING_FORMULA
	Unk_6a8ab2          DT_INT
	Unk_5078500         DT_INT
	Unk_128669f         DT_INT
	FAlignmentHeight    DT_FLOAT
	ArConditions        DT_POLYMORPHIC_VARIABLEARRAY[*DT_INT64]
	BAnimated           DT_INT
	Unk_3ee89a          DT_INT
	Unk_a4d0200         DT_INT
	Unk_c91bb71         DT_INT
	Unk_e960d46         DT_INT
	Unk_e282419         DT_ENUM
	Unk_7ed70e2         DT_INT
	Unk_77bdba8         DT_ENUM
	Unk_8f61ea4         DT_UINT
	Unk_3e59e14         DT_VECTOR3D
	Unk_6076d47         DT_ENUM
	Unk_8d18eb6         DT_ENUM
	Unk_67060f1         DT_INT
	TAnimatedDimension1 DT_STRING_FORMULA
	TAnimatedDimension2 DT_STRING_FORMULA
	TAnimatedDimension3 DT_STRING_FORMULA
	TAnimatedInterval   DT_STRING_FORMULA
	TAnimatedTotalTime  DT_STRING_FORMULA
	Unk_e5f3235         DT_STRING_FORMULA
	Unk_7fd2cb0         DT_INT
	Unk_bb05455         DT_INT
	BLoop               DT_INT
	Unk_77a6dd9         DT_INT
	Unk_14cfb7f         DT_INT
	Unk_4f22bac         DT_INT
	Unk_ca7a183         DT_INT
	Unk_78bcfac         DT_INT
	ELOSCheck           DT_ENUM
	DwTargetingFlags    DT_UINT
	BDebugDraw          DT_INT
}

func (t *Type_cec837f6) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.DwID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.EType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.TDimension1, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.TDimension2, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.TDimension3, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+104, &t.TDimension4, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+136, &t.TDimension5, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+168, &t.Unk_6a8ab2, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+172, &t.Unk_5078500, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+176, &t.Unk_128669f, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+180, &t.FAlignmentHeight, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+184, &t.ArConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+208, &t.BAnimated, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+212, &t.Unk_3ee89a, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+216, &t.Unk_a4d0200, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+220, &t.Unk_c91bb71, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+224, &t.Unk_e960d46, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+228, &t.Unk_e282419, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+232, &t.Unk_7ed70e2, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+236, &t.Unk_77bdba8, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+240, &t.Unk_8f61ea4, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+244, &t.Unk_3e59e14, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+256, &t.Unk_6076d47, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+260, &t.Unk_8d18eb6, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+264, &t.Unk_67060f1, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+272, &t.TAnimatedDimension1, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+304, &t.TAnimatedDimension2, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+336, &t.TAnimatedDimension3, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+368, &t.TAnimatedInterval, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+400, &t.TAnimatedTotalTime, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+432, &t.Unk_e5f3235, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+464, &t.Unk_7fd2cb0, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+468, &t.Unk_bb05455, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+472, &t.BLoop, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+476, &t.Unk_77a6dd9, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+480, &t.Unk_14cfb7f, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+484, &t.Unk_4f22bac, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+488, &t.Unk_ca7a183, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+492, &t.Unk_78bcfac, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+496, &t.ELOSCheck, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+500, &t.DwTargetingFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+504, &t.BDebugDraw, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+512, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_cec837f6) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwID", &t.DwID, d...)
	cb.Do("EType", &t.EType, d...)
	cb.Do("TDimension1", &t.TDimension1, d...)
	cb.Do("TDimension2", &t.TDimension2, d...)
	cb.Do("TDimension3", &t.TDimension3, d...)
	cb.Do("TDimension4", &t.TDimension4, d...)
	cb.Do("TDimension5", &t.TDimension5, d...)
	cb.Do("Unk_6a8ab2", &t.Unk_6a8ab2, d...)
	cb.Do("Unk_5078500", &t.Unk_5078500, d...)
	cb.Do("Unk_128669f", &t.Unk_128669f, d...)
	cb.Do("FAlignmentHeight", &t.FAlignmentHeight, d...)
	cb.Do("ArConditions", &t.ArConditions, d...)
	cb.Do("BAnimated", &t.BAnimated, d...)
	cb.Do("Unk_3ee89a", &t.Unk_3ee89a, d...)
	cb.Do("Unk_a4d0200", &t.Unk_a4d0200, d...)
	cb.Do("Unk_c91bb71", &t.Unk_c91bb71, d...)
	cb.Do("Unk_e960d46", &t.Unk_e960d46, d...)
	cb.Do("Unk_e282419", &t.Unk_e282419, d...)
	cb.Do("Unk_7ed70e2", &t.Unk_7ed70e2, d...)
	cb.Do("Unk_77bdba8", &t.Unk_77bdba8, d...)
	cb.Do("Unk_8f61ea4", &t.Unk_8f61ea4, d...)
	cb.Do("Unk_3e59e14", &t.Unk_3e59e14, d...)
	cb.Do("Unk_6076d47", &t.Unk_6076d47, d...)
	cb.Do("Unk_8d18eb6", &t.Unk_8d18eb6, d...)
	cb.Do("Unk_67060f1", &t.Unk_67060f1, d...)
	cb.Do("TAnimatedDimension1", &t.TAnimatedDimension1, d...)
	cb.Do("TAnimatedDimension2", &t.TAnimatedDimension2, d...)
	cb.Do("TAnimatedDimension3", &t.TAnimatedDimension3, d...)
	cb.Do("TAnimatedInterval", &t.TAnimatedInterval, d...)
	cb.Do("TAnimatedTotalTime", &t.TAnimatedTotalTime, d...)
	cb.Do("Unk_e5f3235", &t.Unk_e5f3235, d...)
	cb.Do("Unk_7fd2cb0", &t.Unk_7fd2cb0, d...)
	cb.Do("Unk_bb05455", &t.Unk_bb05455, d...)
	cb.Do("BLoop", &t.BLoop, d...)
	cb.Do("Unk_77a6dd9", &t.Unk_77a6dd9, d...)
	cb.Do("Unk_14cfb7f", &t.Unk_14cfb7f, d...)
	cb.Do("Unk_4f22bac", &t.Unk_4f22bac, d...)
	cb.Do("Unk_ca7a183", &t.Unk_ca7a183, d...)
	cb.Do("Unk_78bcfac", &t.Unk_78bcfac, d...)
	cb.Do("ELOSCheck", &t.ELOSCheck, d...)
	cb.Do("DwTargetingFlags", &t.DwTargetingFlags, d...)
	cb.Do("BDebugDraw", &t.BDebugDraw, d...)
}

type PVPGameSubcondition struct {
	// Inherits Subcondition
	// Inherits PolymorphicBase
	DwType  DT_UINT
	BNegate DT_INT
	DwPad   DT_UINT
}

func (t *PVPGameSubcondition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BNegate, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PVPGameSubcondition) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("BNegate", &t.BNegate, d...)
	cb.Do("DwPad", &t.DwPad, d...)
}

type DungeonSpawningPoolEntry_Table struct {
	// Inherits GameBalanceTable
	// Inherits PolymorphicBase
	DwType   DT_UINT
	DwPad    DT_UINT
	TEntries DT_VARIABLEARRAY[*DungeonSpawningPoolEntry]
}

func (t *DungeonSpawningPoolEntry_Table) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TEntries, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *DungeonSpawningPoolEntry_Table) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("TEntries", &t.TEntries, d...)
}

type AttributeSubcondition struct {
	// Inherits NumericComparisonSubcondition
	// Inherits Subcondition
	// Inherits PolymorphicBase
	DwType           DT_UINT
	BNegate          DT_INT
	EComparisonOp    DT_ENUM
	DwPad            DT_UINT
	EAttribute       DT_ENUM
	FlValue          DT_FLOAT
	NParam           DT_INT
	EActorToEvaluate DT_ENUM
}

func (t *AttributeSubcondition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BNegate, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.EComparisonOp, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.EAttribute, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.FlValue, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.NParam, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.EActorToEvaluate, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *AttributeSubcondition) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("BNegate", &t.BNegate, d...)
	cb.Do("EComparisonOp", &t.EComparisonOp, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("EAttribute", &t.EAttribute, d...)
	cb.Do("FlValue", &t.FlValue, d...)
	cb.Do("NParam", &t.NParam, d...)
	cb.Do("EActorToEvaluate", &t.EActorToEvaluate, d...)
}

type NpcLookTagEntry struct {
	THeader GBIDHeader
}

func (t *NpcLookTagEntry) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+260, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *NpcLookTagEntry) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
}

type ScriptEventParamActorGroup struct {
	// Inherits ScriptEventParamBase
	// Inherits PolymorphicBase
	DwType         DT_UINT
	EParamType     DT_ENUM
	DwPad          DT_UINT
	GbidActorGroup DT_GBID
}

func (t *ScriptEventParamActorGroup) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.EParamType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.GbidActorGroup, r, &Options{
		Flags: 1,
		Group: 24,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ScriptEventParamActorGroup) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("EParamType", &t.EParamType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("GbidActorGroup", &t.GbidActorGroup, d...)
}

type SpawnCountOffset struct {
	NMin DT_INT
	NMax DT_INT
}

func (t *SpawnCountOffset) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.NMin, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.NMax, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *SpawnCountOffset) Walk(cb WalkCallback, d ...any) {
	cb.Do("NMin", &t.NMin, d...)
	cb.Do("NMax", &t.NMax, d...)
}

type PhaseJumpImmediate struct {
	// Inherits PhaseJumpBase
	// Inherits PolymorphicBase
	DwType       DT_UINT
	Unk_2de4987  DT_UINT
	ArConditions DT_POLYMORPHIC_VARIABLEARRAY[*DT_INT64]
	BEnd         DT_INT
	DwPad        DT_UINT
}

func (t *PhaseJumpImmediate) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_2de4987, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ArConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.BEnd, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+56, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PhaseJumpImmediate) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("Unk_2de4987", &t.Unk_2de4987, d...)
	cb.Do("ArConditions", &t.ArConditions, d...)
	cb.Do("BEnd", &t.BEnd, d...)
	cb.Do("DwPad", &t.DwPad, d...)
}

type BlessingLevel struct {
	Unk_cb968cf       DT_INT
	FlBonusPercentage DT_FLOAT
}

func (t *BlessingLevel) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Unk_cb968cf, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.FlBonusPercentage, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *BlessingLevel) Walk(cb WalkCallback, d ...any) {
	cb.Do("Unk_cb968cf", &t.Unk_cb968cf, d...)
	cb.Do("FlBonusPercentage", &t.FlBonusPercentage, d...)
}

type TriggerEventCameraKeyFrame struct {
	// Inherits TriggerEvent
	// Inherits PolymorphicBase
	DwType              DT_UINT
	DwPad               DT_UINT
	TConditions         TriggerConditions
	FGenerated          DT_INT
	Unk_6cba752         DT_INT
	DwParentActorID     DT_UINT
	EMicrophoneMode     DT_ENUM
	VecMicrophoneOffset DT_VECTOR3D
	ArKeys              DT_POLYMORPHIC_VARIABLEARRAY[*DT_INT64]
	Unk_9717a7e         DT_FLOAT
}

func (t *TriggerEventCameraKeyFrame) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.FGenerated, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_6cba752, r, &Options{Flags: 16}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.DwParentActorID, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.EMicrophoneMode, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.VecMicrophoneOffset, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.ArKeys, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.Unk_9717a7e, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+128, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TriggerEventCameraKeyFrame) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("TConditions", &t.TConditions, d...)
	cb.Do("FGenerated", &t.FGenerated, d...)
	cb.Do("Unk_6cba752", &t.Unk_6cba752, d...)
	cb.Do("DwParentActorID", &t.DwParentActorID, d...)
	cb.Do("EMicrophoneMode", &t.EMicrophoneMode, d...)
	cb.Do("VecMicrophoneOffset", &t.VecMicrophoneOffset, d...)
	cb.Do("ArKeys", &t.ArKeys, d...)
	cb.Do("Unk_9717a7e", &t.Unk_9717a7e, d...)
}

type TriggerEventObjectTurnToOriginalFacing struct {
	// Inherits TriggerEvent
	// Inherits PolymorphicBase
	DwType          DT_UINT
	DwPad           DT_UINT
	TConditions     TriggerConditions
	FGenerated      DT_INT
	Unk_6cba752     DT_INT
	DwParentActorID DT_UINT
	DwObjectID      DT_UINT
}

func (t *TriggerEventObjectTurnToOriginalFacing) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.FGenerated, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_6cba752, r, &Options{Flags: 16}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.DwParentActorID, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.DwObjectID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+88, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TriggerEventObjectTurnToOriginalFacing) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("TConditions", &t.TConditions, d...)
	cb.Do("FGenerated", &t.FGenerated, d...)
	cb.Do("Unk_6cba752", &t.Unk_6cba752, d...)
	cb.Do("DwParentActorID", &t.DwParentActorID, d...)
	cb.Do("DwObjectID", &t.DwObjectID, d...)
}

type AnyLogicSubcondition struct {
	// Inherits LogicSubcondition
	// Inherits Subcondition
	// Inherits PolymorphicBase
	DwType       DT_UINT
	BNegate      DT_INT
	DwPad        DT_UINT
	ArConditions DT_POLYMORPHIC_VARIABLEARRAY[*DT_INT64]
}

func (t *AnyLogicSubcondition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BNegate, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ArConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *AnyLogicSubcondition) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("BNegate", &t.BNegate, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("ArConditions", &t.ArConditions, d...)
}

type ShaderMapDefinition struct {
	SnoMinDefaultBaseShader  DT_SNO
	SnoMedDefaultBaseShader  DT_SNO
	SnoHighDefaultBaseShader DT_SNO
	SnoFurBaseShader         DT_SNO
	ArShaderOverrides        DT_VARIABLEARRAY[*ShaderOverride]
	Unk_54bea5a              DT_TAGMAP[*DT_ENUM]
}

func (t *ShaderMapDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.SnoMinDefaultBaseShader, r, &Options{
		Flags: 1,
		Group: 37,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.SnoMedDefaultBaseShader, r, &Options{
		Flags: 1,
		Group: 37,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoHighDefaultBaseShader, r, &Options{
		Flags: 1,
		Group: 37,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.SnoFurBaseShader, r, &Options{
		Flags: 1,
		Group: 37,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ArShaderOverrides, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.Unk_54bea5a, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+56, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ShaderMapDefinition) Walk(cb WalkCallback, d ...any) {
	cb.Do("SnoMinDefaultBaseShader", &t.SnoMinDefaultBaseShader, d...)
	cb.Do("SnoMedDefaultBaseShader", &t.SnoMedDefaultBaseShader, d...)
	cb.Do("SnoHighDefaultBaseShader", &t.SnoHighDefaultBaseShader, d...)
	cb.Do("SnoFurBaseShader", &t.SnoFurBaseShader, d...)
	cb.Do("ArShaderOverrides", &t.ArShaderOverrides, d...)
	cb.Do("Unk_54bea5a", &t.Unk_54bea5a, d...)
}

type AspectDefinition struct {
	SnoAffix DT_SNO
}

func (t *AspectDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.SnoAffix, r, &Options{
		Flags: 1,
		Group: 104,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+12, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *AspectDefinition) Walk(cb WalkCallback, d ...any) {
	cb.Do("SnoAffix", &t.SnoAffix, d...)
}

type DemonScrollReward struct {
	ArItems DT_FIXEDARRAY[*ItemSpecifierData]
}

func (t *DemonScrollReward) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.ArItems, r, &Options{
		ArrayLength: 3,
		Flags:       1,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+108, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *DemonScrollReward) Walk(cb WalkCallback, d ...any) {
	cb.Do("ArItems", &t.ArItems, d...)
}

type SavedWorldCameraState struct {
	SnoWorld     DT_SNO
	TCameraState SavedCameraState
}

func (t *SavedWorldCameraState) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoWorld, r, &Options{
		Flags: 1,
		Group: 48,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.TCameraState, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+68, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *SavedWorldCameraState) Walk(cb WalkCallback, d ...any) {
	cb.Do("SnoWorld", &t.SnoWorld, d...)
	cb.Do("TCameraState", &t.TCameraState, d...)
}

type GameTestingInvitePlayersToPartyMessage struct {
	THeader               RequiredMessageHeader
	NPlayers              DT_INT
	APlayerGameAccountIds DT_FIXEDARRAY[*DT_UINT]
}

func (t *GameTestingInvitePlayersToPartyMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.NPlayers, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.APlayerGameAccountIds, r, &Options{
		ArrayLength: 4,
		Flags:       1,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+36, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *GameTestingInvitePlayersToPartyMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("NPlayers", &t.NPlayers, d...)
	cb.Do("APlayerGameAccountIds", &t.APlayerGameAccountIds, d...)
}

type TriggerEventPlayMovie struct {
	// Inherits TriggerEventRangedDuration
	// Inherits TriggerEvent
	// Inherits PolymorphicBase
	DwType           DT_UINT
	TConditions      TriggerConditions
	FGenerated       DT_INT
	Unk_6cba752      DT_INT
	DwParentActorID  DT_UINT
	TDuration        DT_FLOAT
	DwTriggerFlags   DT_UINT
	DwTriggerFlagsEx DT_UINT
	TCleanup         TriggerCleanup
	Unk_49e9257      DT_INT
	Unk_5490979      DT_INT
	DwPad            DT_UINT
	SnoMovie         DT_SNO
	FIntroMovie      DT_INT
	Unk_26e6b7e      DT_INT
}

func (t *TriggerEventPlayMovie) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.FGenerated, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_6cba752, r, &Options{Flags: 16}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.DwParentActorID, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.TDuration, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.DwTriggerFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.DwTriggerFlagsEx, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.TCleanup, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+116, &t.Unk_49e9257, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.Unk_5490979, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+124, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.SnoMovie, r, &Options{
		Flags: 1,
		Group: 102,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+132, &t.FIntroMovie, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+136, &t.Unk_26e6b7e, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+144, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TriggerEventPlayMovie) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("TConditions", &t.TConditions, d...)
	cb.Do("FGenerated", &t.FGenerated, d...)
	cb.Do("Unk_6cba752", &t.Unk_6cba752, d...)
	cb.Do("DwParentActorID", &t.DwParentActorID, d...)
	cb.Do("TDuration", &t.TDuration, d...)
	cb.Do("DwTriggerFlags", &t.DwTriggerFlags, d...)
	cb.Do("DwTriggerFlagsEx", &t.DwTriggerFlagsEx, d...)
	cb.Do("TCleanup", &t.TCleanup, d...)
	cb.Do("Unk_49e9257", &t.Unk_49e9257, d...)
	cb.Do("Unk_5490979", &t.Unk_5490979, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("SnoMovie", &t.SnoMovie, d...)
	cb.Do("FIntroMovie", &t.FIntroMovie, d...)
	cb.Do("Unk_26e6b7e", &t.Unk_26e6b7e, d...)
}

type HeroStatusDataMessage struct {
	THeader    RequiredMessageHeader
	UHeroId    DT_UINT
	SzHeroName DT_CHARARRAY
	SnoClass   DT_SNO
	NLevel     DT_INT
}

func (t *HeroStatusDataMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.UHeroId, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.SzHeroName, r, &Options{
		ArrayLength: 12,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.SnoClass, r, &Options{
		Flags: 1,
		Group: 74,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.NLevel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+40, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *HeroStatusDataMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("UHeroId", &t.UHeroId, d...)
	cb.Do("SzHeroName", &t.SzHeroName, d...)
	cb.Do("SnoClass", &t.SnoClass, d...)
	cb.Do("NLevel", &t.NLevel, d...)
}

type EnchantAffixMessage struct {
	THeader          RequiredMessageHeader
	AnnItem          DT_ACD_NETWORK_NAME
	SnoAffixToReroll DT_SNO
}

func (t *EnchantAffixMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.AnnItem, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SnoAffixToReroll, r, &Options{
		Flags: 1,
		Group: 104,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+28, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *EnchantAffixMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("AnnItem", &t.AnnItem, d...)
	cb.Do("SnoAffixToReroll", &t.SnoAffixToReroll, d...)
}

type TriggerEventChangeLook struct {
	// Inherits TriggerEvent
	// Inherits PolymorphicBase
	DwType          DT_UINT
	DwPad           DT_UINT
	TConditions     TriggerConditions
	FGenerated      DT_INT
	Unk_6cba752     DT_INT
	DwParentActorID DT_UINT
	DwActorID       DT_UINT
	SnoAppearance   DT_SNO
	TLookLink       LookLink
	Unk_279aa5a     DT_INT
}

func (t *TriggerEventChangeLook) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.FGenerated, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_6cba752, r, &Options{Flags: 16}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.DwParentActorID, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.DwActorID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.SnoAppearance, r, &Options{
		Flags: 513,
		Group: 9,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.TLookLink, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.Unk_279aa5a, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+96, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TriggerEventChangeLook) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("TConditions", &t.TConditions, d...)
	cb.Do("FGenerated", &t.FGenerated, d...)
	cb.Do("Unk_6cba752", &t.Unk_6cba752, d...)
	cb.Do("DwParentActorID", &t.DwParentActorID, d...)
	cb.Do("DwActorID", &t.DwActorID, d...)
	cb.Do("SnoAppearance", &t.SnoAppearance, d...)
	cb.Do("TLookLink", &t.TLookLink, d...)
	cb.Do("Unk_279aa5a", &t.Unk_279aa5a, d...)
}

type GlobalStore struct {
	// Inherits GlobalBase
	// Inherits PolymorphicBase
	DwType                  DT_UINT
	DwPad                   DT_UINT
	Unk_2fa1bf6             DT_FLOAT
	Unk_5967152             DT_FLOAT
	Unk_2eb3017             DT_FLOAT
	Unk_9ff4d97             DT_FLOAT
	Unk_ec0907f             DT_FLOAT
	Unk_7f36142             DT_FLOAT
	Unk_d7f8478             DT_FLOAT
	Unk_2009ff7             DT_INT
	Unk_aef9c7f             DT_VARIABLEARRAY[*Type_8a12bdb7]
	ArCameraTransitions     DT_FIXEDARRAY[*StoreCameraTransition]
	SnoStorePreviewWorld    DT_SNO
	SzStorePreviewHardpoint DT_CSTRING[*DT_BYTE]
	SnoVendorWorld          DT_SNO
	SzVendorCamera          DT_UINT
	Unk_d7df52d             DT_FIXEDARRAY[*Type_b3f69894]
	Unk_107fe73             DT_ENUM
	Unk_465e395             DT_FIXEDARRAY[*StorePreviewCameraPositioning]
	ArStoreDisclaimerData   DT_FIXEDARRAY[*StoreDisclaimerData]
	Unk_782b094             DT_FIXEDARRAY[*Type_5887daa1]
	ArVOLines               DT_FIXEDARRAY[*Type_e3bec795]
}

func (t *GlobalStore) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_2fa1bf6, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.Unk_5967152, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_2eb3017, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.Unk_9ff4d97, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.Unk_ec0907f, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.Unk_7f36142, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.Unk_d7f8478, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.Unk_2009ff7, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.Unk_aef9c7f, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.ArCameraTransitions, r, &Options{
		ArrayLength: 5,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+264, &t.SnoStorePreviewWorld, r, &Options{
		Flags: 1,
		Group: 48,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+272, &t.SzStorePreviewHardpoint, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+288, &t.SnoVendorWorld, r, &Options{
		Flags: 1,
		Group: 48,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+292, &t.SzVendorCamera, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+296, &t.Unk_d7df52d, r, &Options{
		ArrayLength: 3,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+320, &t.Unk_107fe73, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+328, &t.Unk_465e395, r, &Options{
		ArrayLength: 18,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1624, &t.ArStoreDisclaimerData, r, &Options{
		ArrayLength: 10,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1704, &t.Unk_782b094, r, &Options{
		ArrayLength: 1,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1744, &t.ArVOLines, r, &Options{
		ArrayLength: 4,
		Flags:       1,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+1904, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *GlobalStore) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("Unk_2fa1bf6", &t.Unk_2fa1bf6, d...)
	cb.Do("Unk_5967152", &t.Unk_5967152, d...)
	cb.Do("Unk_2eb3017", &t.Unk_2eb3017, d...)
	cb.Do("Unk_9ff4d97", &t.Unk_9ff4d97, d...)
	cb.Do("Unk_ec0907f", &t.Unk_ec0907f, d...)
	cb.Do("Unk_7f36142", &t.Unk_7f36142, d...)
	cb.Do("Unk_d7f8478", &t.Unk_d7f8478, d...)
	cb.Do("Unk_2009ff7", &t.Unk_2009ff7, d...)
	cb.Do("Unk_aef9c7f", &t.Unk_aef9c7f, d...)
	cb.Do("ArCameraTransitions", &t.ArCameraTransitions, d...)
	cb.Do("SnoStorePreviewWorld", &t.SnoStorePreviewWorld, d...)
	cb.Do("SzStorePreviewHardpoint", &t.SzStorePreviewHardpoint, d...)
	cb.Do("SnoVendorWorld", &t.SnoVendorWorld, d...)
	cb.Do("SzVendorCamera", &t.SzVendorCamera, d...)
	cb.Do("Unk_d7df52d", &t.Unk_d7df52d, d...)
	cb.Do("Unk_107fe73", &t.Unk_107fe73, d...)
	cb.Do("Unk_465e395", &t.Unk_465e395, d...)
	cb.Do("ArStoreDisclaimerData", &t.ArStoreDisclaimerData, d...)
	cb.Do("Unk_782b094", &t.Unk_782b094, d...)
	cb.Do("ArVOLines", &t.ArVOLines, d...)
}

type wWiseSoundBankDefinition struct {
	PtContent DT_POLYMORPHIC_VARIABLEARRAY[*WwiseSoundBankContentBase]
}

func (t *wWiseSoundBankDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.PtContent, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *wWiseSoundBankDefinition) Walk(cb WalkCallback, d ...any) {
	cb.Do("PtContent", &t.PtContent, d...)
}

type ItemSpecifierData struct {
	SnoItemToDrop                 DT_SNO
	SnoAffixes                    DT_FIXEDARRAY[*DT_SNO]
	NNumAffixes                   DT_INT
	BAccountBound                 DT_INT
	TAdditionalRandomAffixesRange DT_RANGE[*DT_INT]
}

func (t *ItemSpecifierData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoItemToDrop, r, &Options{
		Flags: 1,
		Group: 73,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.SnoAffixes, r, &Options{
		ArrayLength: 4,
		Flags:       1,
		Group:       104,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.NNumAffixes, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.BAccountBound, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.TAdditionalRandomAffixesRange, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+36, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ItemSpecifierData) Walk(cb WalkCallback, d ...any) {
	cb.Do("SnoItemToDrop", &t.SnoItemToDrop, d...)
	cb.Do("SnoAffixes", &t.SnoAffixes, d...)
	cb.Do("NNumAffixes", &t.NNumAffixes, d...)
	cb.Do("BAccountBound", &t.BAccountBound, d...)
	cb.Do("TAdditionalRandomAffixesRange", &t.TAdditionalRandomAffixesRange, d...)
}

type SubObjectAppearanceVariant struct {
	EVariantType       DT_ENUM
	SnoVariantMaterial DT_SNO
}

func (t *SubObjectAppearanceVariant) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.EVariantType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.SnoVariantMaterial, r, &Options{
		Flags: 1,
		Group: 57,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *SubObjectAppearanceVariant) Walk(cb WalkCallback, d ...any) {
	cb.Do("EVariantType", &t.EVariantType, d...)
	cb.Do("SnoVariantMaterial", &t.SnoVariantMaterial, d...)
}

type GameSetupMessage struct {
	THeader          RequiredMessageHeader
	DwFirstHeartbeat DT_UINT
	UidActorOwner    DT_INT64
	Unk_387b0e       DT_INT
	TTrace           TraceMessage
}

func (t *GameSetupMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.DwFirstHeartbeat, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.UidActorOwner, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.Unk_387b0e, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.TTrace, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+120, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *GameSetupMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("DwFirstHeartbeat", &t.DwFirstHeartbeat, d...)
	cb.Do("UidActorOwner", &t.UidActorOwner, d...)
	cb.Do("Unk_387b0e", &t.Unk_387b0e, d...)
	cb.Do("TTrace", &t.TTrace, d...)
}

type DungeonStatesEntry struct {
	THeader GBIDHeader
}

func (t *DungeonStatesEntry) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+260, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *DungeonStatesEntry) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
}

type ReputationLevel struct {
	DwReputationRequired  DT_UINT
	NGoldRewardAmount     DT_INT
	NObolsRewardAmount    DT_INT
	NXPRewardAmount       DT_INT
	SnoPassivePowerReward DT_SNO
	TItemRewardInfo       ReputationItemReward
}

func (t *ReputationLevel) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.DwReputationRequired, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.NGoldRewardAmount, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.NObolsRewardAmount, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.NXPRewardAmount, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoPassivePowerReward, r, &Options{
		Flags: 1,
		Group: 142,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.TItemRewardInfo, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+28, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ReputationLevel) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwReputationRequired", &t.DwReputationRequired, d...)
	cb.Do("NGoldRewardAmount", &t.NGoldRewardAmount, d...)
	cb.Do("NObolsRewardAmount", &t.NObolsRewardAmount, d...)
	cb.Do("NXPRewardAmount", &t.NXPRewardAmount, d...)
	cb.Do("SnoPassivePowerReward", &t.SnoPassivePowerReward, d...)
	cb.Do("TItemRewardInfo", &t.TItemRewardInfo, d...)
}

type PhaseJumpNotMoving struct {
	// Inherits PhaseJumpBase
	// Inherits PolymorphicBase
	DwType              DT_UINT
	Unk_2de4987         DT_UINT
	ArConditions        DT_POLYMORPHIC_VARIABLEARRAY[*DT_INT64]
	BEnd                DT_INT
	DwPad               DT_UINT
	FlDistanceThreshold DT_FLOAT
}

func (t *PhaseJumpNotMoving) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_2de4987, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ArConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.BEnd, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.FlDistanceThreshold, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+64, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PhaseJumpNotMoving) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("Unk_2de4987", &t.Unk_2de4987, d...)
	cb.Do("ArConditions", &t.ArConditions, d...)
	cb.Do("BEnd", &t.BEnd, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("FlDistanceThreshold", &t.FlDistanceThreshold, d...)
}

type SimpleMessage struct {
	THeader RequiredMessageHeader
}

func (t *SimpleMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *SimpleMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
}

type ClanBankWithdrawMessage struct {
	THeader         RequiredRequestMessageHeader
	TItemId         Type_f5ac91bb
	ECurrencyType   DT_ENUM
	NCurrencyAmount DT_INT64
}

func (t *ClanBankWithdrawMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.TItemId, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.ECurrencyType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.NCurrencyAmount, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+56, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ClanBankWithdrawMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("TItemId", &t.TItemId, d...)
	cb.Do("ECurrencyType", &t.ECurrencyType, d...)
	cb.Do("NCurrencyAmount", &t.NCurrencyAmount, d...)
}

type GlobalNightmareDungeonData struct {
	// Inherits GlobalBase
	// Inherits PolymorphicBase
	DwType                         DT_UINT
	DwPad                          DT_UINT
	ArDungeonLists                 DT_FIXEDARRAY[*DungeonList]
	ArNightmareDungeonGlobalSpawns DT_VARIABLEARRAY[*NightmareDungeonGlobalSpawn]
	Unk_2da258                     DT_UINT
	Unk_4242026                    DT_FIXEDARRAY[*DT_FLOAT]
	ArHasDamageScalarFormulas      DT_FIXEDARRAY[*DT_FLOAT]
	ArSpawnCountOffsets            DT_FIXEDARRAY[*SpawnCountOffset]
	Unk_74b00e3                    DT_FLOAT
	Unk_908474b                    DT_RANGE[*DT_UINT]
	Unk_408865c                    DT_RANGE[*DT_UINT]
}

func (t *GlobalNightmareDungeonData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.ArDungeonLists, r, &Options{
		ArrayLength: 2,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.ArNightmareDungeonGlobalSpawns, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.Unk_2da258, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.Unk_4242026, r, &Options{
		ArrayLength: 2,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.ArHasDamageScalarFormulas, r, &Options{
		ArrayLength: 9,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.ArSpawnCountOffsets, r, &Options{
		ArrayLength: 9,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+184, &t.Unk_74b00e3, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+188, &t.Unk_908474b, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+196, &t.Unk_408865c, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+208, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *GlobalNightmareDungeonData) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("ArDungeonLists", &t.ArDungeonLists, d...)
	cb.Do("ArNightmareDungeonGlobalSpawns", &t.ArNightmareDungeonGlobalSpawns, d...)
	cb.Do("Unk_2da258", &t.Unk_2da258, d...)
	cb.Do("Unk_4242026", &t.Unk_4242026, d...)
	cb.Do("ArHasDamageScalarFormulas", &t.ArHasDamageScalarFormulas, d...)
	cb.Do("ArSpawnCountOffsets", &t.ArSpawnCountOffsets, d...)
	cb.Do("Unk_74b00e3", &t.Unk_74b00e3, d...)
	cb.Do("Unk_908474b", &t.Unk_908474b, d...)
	cb.Do("Unk_408865c", &t.Unk_408865c, d...)
}

type StoryboardTrack struct {
	// Inherits PolymorphicBase
	DwType DT_UINT
	DwPad  DT_UINT
}

func (t *StoryboardTrack) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *StoryboardTrack) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
}

type AITargetDebugSetState struct {
	THeader  RequiredMessageHeader
	AnnActor DT_ACD_NETWORK_NAME
	BEnabled DT_INT
}

func (t *AITargetDebugSetState) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.AnnActor, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.BEnabled, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+28, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *AITargetDebugSetState) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("AnnActor", &t.AnnActor, d...)
	cb.Do("BEnabled", &t.BEnabled, d...)
}

type OnAssistTriggeredBuffCallback struct {
	// Inherits BuffCallbackBase
	// Inherits PolymorphicBase
	DwType                DT_UINT
	DwPad                 DT_UINT
	SnoTriggerEffectGroup DT_SNO
	ArConditions          DT_POLYMORPHIC_VARIABLEARRAY[*DT_INT64]
}

func (t *OnAssistTriggeredBuffCallback) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoTriggerEffectGroup, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ArConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *OnAssistTriggeredBuffCallback) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("SnoTriggerEffectGroup", &t.SnoTriggerEffectGroup, d...)
	cb.Do("ArConditions", &t.ArConditions, d...)
}

type SchedulerGlobalUniqueCategory struct {
	THeader GBIDHeader
}

func (t *SchedulerGlobalUniqueCategory) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+260, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *SchedulerGlobalUniqueCategory) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
}

type ActorCustomizationHelper struct {
	Unk_6c44779 SerialDataInfo
	Unk_550eb8a SerialDataInfo
	TFace       SerialDataInfo
	TMakeup     SerialDataInfo
	TJewelry    SerialDataInfo
	THairStyle  SerialDataInfo
	TFacialHair SerialDataInfo
}

func (t *ActorCustomizationHelper) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Unk_6c44779, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.Unk_550eb8a, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TFace, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.TMakeup, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.TJewelry, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.THairStyle, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.TFacialHair, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+56, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ActorCustomizationHelper) Walk(cb WalkCallback, d ...any) {
	cb.Do("Unk_6c44779", &t.Unk_6c44779, d...)
	cb.Do("Unk_550eb8a", &t.Unk_550eb8a, d...)
	cb.Do("TFace", &t.TFace, d...)
	cb.Do("TMakeup", &t.TMakeup, d...)
	cb.Do("TJewelry", &t.TJewelry, d...)
	cb.Do("THairStyle", &t.THairStyle, d...)
	cb.Do("TFacialHair", &t.TFacialHair, d...)
}

type RequestBuffCancelMessage struct {
	THeader      RequiredMessageHeader
	SnoPower     DT_SNO
	DwBuffDataID DT_UINT
}

func (t *RequestBuffCancelMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoPower, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwBuffDataID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *RequestBuffCancelMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("SnoPower", &t.SnoPower, d...)
	cb.Do("DwBuffDataID", &t.DwBuffDataID, d...)
}

type CountdownStartedMessage struct {
	THeader               RequiredMessageHeader
	DwTime                DT_UINT
	DwPlayerGameAccountId DT_UINT
}

func (t *CountdownStartedMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.DwTime, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPlayerGameAccountId, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *CountdownStartedMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("DwTime", &t.DwTime, d...)
	cb.Do("DwPlayerGameAccountId", &t.DwPlayerGameAccountId, d...)
}

type OnKillTriggeredBuffCallback struct {
	// Inherits BuffCallbackBase
	// Inherits PolymorphicBase
	DwType                DT_UINT
	DwPad                 DT_UINT
	SnoTriggerEffectGroup DT_SNO
	ArConditions          DT_POLYMORPHIC_VARIABLEARRAY[*DT_INT64]
}

func (t *OnKillTriggeredBuffCallback) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoTriggerEffectGroup, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ArConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *OnKillTriggeredBuffCallback) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("SnoTriggerEffectGroup", &t.SnoTriggerEffectGroup, d...)
	cb.Do("ArConditions", &t.ArConditions, d...)
}

type EssencePowerTierEntry struct {
	NItemPowerMin DT_INT
}

func (t *EssencePowerTierEntry) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.NItemPowerMin, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+4, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *EssencePowerTierEntry) Walk(cb WalkCallback, d ...any) {
	cb.Do("NItemPowerMin", &t.NItemPowerMin, d...)
}

type ItemDungeonKeyDataMessage struct {
	THeader           RequiredMessageHeader
	Ann               DT_ACD_NETWORK_NAME
	SnoWorld          DT_SNO
	ArDungeonAffixes  DT_FIXEDARRAY[*DT_SNO]
	UKeyedDungeonTier DT_OPTIONAL[*DT_UINT]
}

func (t *ItemDungeonKeyDataMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Ann, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SnoWorld, r, &Options{
		Flags: 1,
		Group: 48,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.ArDungeonAffixes, r, &Options{
		ArrayLength: 8,
		Flags:       9,
		Group:       135,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.UKeyedDungeonTier, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+72, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ItemDungeonKeyDataMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("Ann", &t.Ann, d...)
	cb.Do("SnoWorld", &t.SnoWorld, d...)
	cb.Do("ArDungeonAffixes", &t.ArDungeonAffixes, d...)
	cb.Do("UKeyedDungeonTier", &t.UKeyedDungeonTier, d...)
}

type ScriptEventParamTimeInterval struct {
	// Inherits ScriptEventParamBase
	// Inherits PolymorphicBase
	DwType            DT_UINT
	EParamType        DT_ENUM
	DwPad             DT_UINT
	EFilterInequality DT_ENUM
	FlTimeInterval    DT_FLOAT
}

func (t *ScriptEventParamTimeInterval) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.EParamType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.EFilterInequality, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.FlTimeInterval, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ScriptEventParamTimeInterval) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("EParamType", &t.EParamType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("EFilterInequality", &t.EFilterInequality, d...)
	cb.Do("FlTimeInterval", &t.FlTimeInterval, d...)
}

type NumericComparisonSubcondition struct {
	// Inherits Subcondition
	// Inherits PolymorphicBase
	DwType        DT_UINT
	BNegate       DT_INT
	EComparisonOp DT_ENUM
	DwPad         DT_UINT
}

func (t *NumericComparisonSubcondition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BNegate, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.EComparisonOp, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *NumericComparisonSubcondition) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("BNegate", &t.BNegate, d...)
	cb.Do("EComparisonOp", &t.EComparisonOp, d...)
	cb.Do("DwPad", &t.DwPad, d...)
}

type OnInitializeAttackBuffCallback struct {
	// Inherits BuffCallbackBase
	// Inherits PolymorphicBase
	DwType                DT_UINT
	DwPad                 DT_UINT
	SnoTriggerEffectGroup DT_SNO
	ArConditions          DT_POLYMORPHIC_VARIABLEARRAY[*DT_INT64]
}

func (t *OnInitializeAttackBuffCallback) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoTriggerEffectGroup, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ArConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *OnInitializeAttackBuffCallback) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("SnoTriggerEffectGroup", &t.SnoTriggerEffectGroup, d...)
	cb.Do("ArConditions", &t.ArConditions, d...)
}

type LevelAreaDefinition struct {
	DwFlags                  DT_UINT
	SnoWeather               DT_SNO
	SnoAudioContext          DT_SNO
	SnoObserverOverride      DT_SNO
	SnoCampaignTownCondition DT_SNO
	FOverridesDebugColor     DT_INT
	RgbaDebugColor           DT_RGBACOLOR
	SnoFogOfWar              DT_SNO
	TPrivateLevelScaling     LevelScalingData
	ArPublicLevelScaling     DT_FIXEDARRAY[*LevelScalingData]
	Unk_f4b6cde              Type_56ff7d6a
	TServices                SupportedServices
}

func (t *LevelAreaDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.SnoWeather, r, &Options{
		Flags: 1,
		Group: 47,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoAudioContext, r, &Options{
		Flags: 1,
		Group: 93,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.SnoObserverOverride, r, &Options{
		Flags: 1,
		Group: 26,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SnoCampaignTownCondition, r, &Options{
		Flags: 1,
		Group: 51,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.FOverridesDebugColor, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.RgbaDebugColor, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.SnoFogOfWar, r, &Options{
		Flags: 1,
		Group: 123,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.TPrivateLevelScaling, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.ArPublicLevelScaling, r, &Options{
		ArrayLength: 4,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.Unk_f4b6cde, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+136, &t.TServices, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+288, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *LevelAreaDefinition) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwFlags", &t.DwFlags, d...)
	cb.Do("SnoWeather", &t.SnoWeather, d...)
	cb.Do("SnoAudioContext", &t.SnoAudioContext, d...)
	cb.Do("SnoObserverOverride", &t.SnoObserverOverride, d...)
	cb.Do("SnoCampaignTownCondition", &t.SnoCampaignTownCondition, d...)
	cb.Do("FOverridesDebugColor", &t.FOverridesDebugColor, d...)
	cb.Do("RgbaDebugColor", &t.RgbaDebugColor, d...)
	cb.Do("SnoFogOfWar", &t.SnoFogOfWar, d...)
	cb.Do("TPrivateLevelScaling", &t.TPrivateLevelScaling, d...)
	cb.Do("ArPublicLevelScaling", &t.ArPublicLevelScaling, d...)
	cb.Do("Unk_f4b6cde", &t.Unk_f4b6cde, d...)
	cb.Do("TServices", &t.TServices, d...)
}

type FavorSeason_Table struct {
	// Inherits GameBalanceTable
	// Inherits PolymorphicBase
	DwType   DT_UINT
	DwPad    DT_UINT
	TEntries DT_VARIABLEARRAY[*FavorSeason]
}

func (t *FavorSeason_Table) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TEntries, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *FavorSeason_Table) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("TEntries", &t.TEntries, d...)
}

type StoryboardUIControlSetValueTrack_float struct {
	DwType          DT_UINT
	TNodeCollection StoryboardValueNodeCollection_float
	Unk_77ed19a     DT_ENUM
	DwPad           DT_UINT
}

func (t *StoryboardUIControlSetValueTrack_float) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TNodeCollection, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.Unk_77ed19a, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+56, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *StoryboardUIControlSetValueTrack_float) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("TNodeCollection", &t.TNodeCollection, d...)
	cb.Do("Unk_77ed19a", &t.Unk_77ed19a, d...)
	cb.Do("DwPad", &t.DwPad, d...)
}

type Type_d4235100 struct {
	SnoActor   DT_SNO
	Unk_15efd3 SerialDataInfo
}

func (t *Type_d4235100) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoActor, r, &Options{
		Flags: 1,
		Group: 1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.Unk_15efd3, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+12, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_d4235100) Walk(cb WalkCallback, d ...any) {
	cb.Do("SnoActor", &t.SnoActor, d...)
	cb.Do("Unk_15efd3", &t.Unk_15efd3, d...)
}

type ACDTranslateProjectileMessage struct {
	THeader                 RequiredMessageHeader
	Ann                     DT_ACD_NETWORK_NAME
	VPos                    DT_VECTOR3D
	QRot                    bcQuat
	VVel                    DT_VECTOR3D
	Unk_a25a877             DT_OPTIONAL[*DT_VECTOR3D]
	UMoveFlags              DT_OPTIONAL[*DT_UINT]
	SnoPowerAnimKeyOverride DT_OPTIONAL[*DT_SNO]
	FlSpeedMult             DT_OPTIONAL[*DT_FLOAT]
}

func (t *ACDTranslateProjectileMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Ann, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.VPos, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.QRot, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.VVel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.Unk_a25a877, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.UMoveFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.SnoPowerAnimKeyOverride, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.FlSpeedMult, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+104, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ACDTranslateProjectileMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("Ann", &t.Ann, d...)
	cb.Do("VPos", &t.VPos, d...)
	cb.Do("QRot", &t.QRot, d...)
	cb.Do("VVel", &t.VVel, d...)
	cb.Do("Unk_a25a877", &t.Unk_a25a877, d...)
	cb.Do("UMoveFlags", &t.UMoveFlags, d...)
	cb.Do("SnoPowerAnimKeyOverride", &t.SnoPowerAnimKeyOverride, d...)
	cb.Do("FlSpeedMult", &t.FlSpeedMult, d...)
}

type PlayerTitleResponseMessage struct {
	THeader               RequiredRequestMessageHeader
	DwPlayerGameAccountId DT_UINT
	TPlayerTitle          SavedPlayerTitle
}

func (t *PlayerTitleResponseMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPlayerGameAccountId, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.TPlayerTitle, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PlayerTitleResponseMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("DwPlayerGameAccountId", &t.DwPlayerGameAccountId, d...)
	cb.Do("TPlayerTitle", &t.TPlayerTitle, d...)
}

type PowerOverride struct {
	// Inherits PolymorphicBase
	DwType           DT_UINT
	DwPad            DT_UINT
	SnoInputPower    DT_SNO
	SnoOverridePower DT_SNO
}

func (t *PowerOverride) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoInputPower, r, &Options{
		Flags: 513,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.SnoOverridePower, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PowerOverride) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("SnoInputPower", &t.SnoInputPower, d...)
	cb.Do("SnoOverridePower", &t.SnoOverridePower, d...)
}

type PlayerForceShapeshiftMessage struct {
	THeader               RequiredMessageHeader
	DwPlayerGameAccountId DT_UINT
	EShapeshiftForm       DT_ENUM
}

func (t *PlayerForceShapeshiftMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.DwPlayerGameAccountId, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.EShapeshiftForm, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PlayerForceShapeshiftMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("DwPlayerGameAccountId", &t.DwPlayerGameAccountId, d...)
	cb.Do("EShapeshiftForm", &t.EShapeshiftForm, d...)
}

type TriggerEventFadeGroup struct {
	// Inherits TriggerEvent
	// Inherits PolymorphicBase
	DwType          DT_UINT
	DwPad           DT_UINT
	TConditions     TriggerConditions
	FGenerated      DT_INT
	Unk_6cba752     DT_INT
	DwParentActorID DT_UINT
	Unk_8dea4d9     DT_INT
	NFadeGroup      DT_INT
	EBehavior       DT_ENUM
	Unk_2b48a58     DT_INT
}

func (t *TriggerEventFadeGroup) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.FGenerated, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_6cba752, r, &Options{Flags: 16}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.DwParentActorID, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.Unk_8dea4d9, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.NFadeGroup, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.EBehavior, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.Unk_2b48a58, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+96, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TriggerEventFadeGroup) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("TConditions", &t.TConditions, d...)
	cb.Do("FGenerated", &t.FGenerated, d...)
	cb.Do("Unk_6cba752", &t.Unk_6cba752, d...)
	cb.Do("DwParentActorID", &t.DwParentActorID, d...)
	cb.Do("Unk_8dea4d9", &t.Unk_8dea4d9, d...)
	cb.Do("NFadeGroup", &t.NFadeGroup, d...)
	cb.Do("EBehavior", &t.EBehavior, d...)
	cb.Do("Unk_2b48a58", &t.Unk_2b48a58, d...)
}

type HelpCode struct {
	THeader           GBIDHeader
	GbidParentSubMenu DT_GBID
	BSubMenu          DT_INT
	SzCommand         DT_CHARARRAY
}

func (t *HelpCode) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+260, &t.GbidParentSubMenu, r, &Options{
		Flags: 1,
		Group: 9,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+264, &t.BSubMenu, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+268, &t.SzCommand, r, &Options{
		ArrayLength: 1024,
		Flags:       1,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+1292, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *HelpCode) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("GbidParentSubMenu", &t.GbidParentSubMenu, d...)
	cb.Do("BSubMenu", &t.BSubMenu, d...)
	cb.Do("SzCommand", &t.SzCommand, d...)
}

type PlayConvLineMessage struct {
	THeader         RequiredMessageHeader
	AnnSpeaker      DT_ACD_NETWORK_NAME
	TParams         PlayLineParams
	EContext        DT_ENUM
	FlTimeToDisplay DT_FLOAT
}

func (t *PlayConvLineMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.AnnSpeaker, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.TParams, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.EContext, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+116, &t.FlTimeToDisplay, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+120, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PlayConvLineMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("AnnSpeaker", &t.AnnSpeaker, d...)
	cb.Do("TParams", &t.TParams, d...)
	cb.Do("EContext", &t.EContext, d...)
	cb.Do("FlTimeToDisplay", &t.FlTimeToDisplay, d...)
}

type GlobalRoadData struct {
	// Inherits GlobalBase
	// Inherits PolymorphicBase
	DwType              DT_UINT
	DwPad               DT_UINT
	ArGlobalRoadGraphs  DT_VARIABLEARRAY[*GlobalRoadGraph]
	ArGlobalRoadSplines DT_VARIABLEARRAY[*GlobalRoadSpline]
}

func (t *GlobalRoadData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.ArGlobalRoadGraphs, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.ArGlobalRoadSplines, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *GlobalRoadData) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("ArGlobalRoadGraphs", &t.ArGlobalRoadGraphs, d...)
	cb.Do("ArGlobalRoadSplines", &t.ArGlobalRoadSplines, d...)
}

type NecroArmyUnitTypeData struct {
	SnoSkillBarPower  DT_SNO
	SnoPetSpawnPower  DT_SNO
	GbidPetType       DT_GBID
	HIconOverride     DT_UINT
	ArSpecializations DT_FIXEDARRAY[*NecroArmyUnitSpecializationData]
}

func (t *NecroArmyUnitTypeData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoSkillBarPower, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.SnoPetSpawnPower, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.GbidPetType, r, &Options{
		Flags: 1,
		Group: 23,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.HIconOverride, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.ArSpecializations, r, &Options{
		ArrayLength: 3,
		Flags:       1,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+280, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *NecroArmyUnitTypeData) Walk(cb WalkCallback, d ...any) {
	cb.Do("SnoSkillBarPower", &t.SnoSkillBarPower, d...)
	cb.Do("SnoPetSpawnPower", &t.SnoPetSpawnPower, d...)
	cb.Do("GbidPetType", &t.GbidPetType, d...)
	cb.Do("HIconOverride", &t.HIconOverride, d...)
	cb.Do("ArSpecializations", &t.ArSpecializations, d...)
}

type PlayHitJitterMessage struct {
	THeader         RequiredMessageHeader
	Ann             DT_ACD_NETWORK_NAME
	VLocalImpactPos DT_VECTOR3D
}

func (t *PlayHitJitterMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Ann, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.VLocalImpactPos, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+36, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PlayHitJitterMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("Ann", &t.Ann, d...)
	cb.Do("VLocalImpactPos", &t.VLocalImpactPos, d...)
}

type OnDoDamageBuffCallback struct {
	// Inherits ProcChanceBuffCallbackBase
	// Inherits BuffCallbackBase
	// Inherits PolymorphicBase
	DwType                DT_UINT
	DwPad                 DT_UINT
	SnoTriggerEffectGroup DT_SNO
	ArConditions          DT_POLYMORPHIC_VARIABLEARRAY[*DT_INT64]
	BAlwaysProcs          DT_INT
	DwPadding             DT_UINT
	TProcChance           DT_STRING_FORMULA
	Unk_b52872c           DT_INT
}

func (t *OnDoDamageBuffCallback) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoTriggerEffectGroup, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ArConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.BAlwaysProcs, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.DwPadding, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.TProcChance, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.Unk_b52872c, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+96, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *OnDoDamageBuffCallback) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("SnoTriggerEffectGroup", &t.SnoTriggerEffectGroup, d...)
	cb.Do("ArConditions", &t.ArConditions, d...)
	cb.Do("BAlwaysProcs", &t.BAlwaysProcs, d...)
	cb.Do("DwPadding", &t.DwPadding, d...)
	cb.Do("TProcChance", &t.TProcChance, d...)
	cb.Do("Unk_b52872c", &t.Unk_b52872c, d...)
}

type GlobalEmotes struct {
	// Inherits GlobalBase
	// Inherits PolymorphicBase
	DwType          DT_UINT
	DwPad           DT_UINT
	ArInitialEmotes DT_VARIABLEARRAY[*DT_SNO]
}

func (t *GlobalEmotes) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.ArInitialEmotes, r, &Options{
		Flags: 1,
		Group: 118,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *GlobalEmotes) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("ArInitialEmotes", &t.ArInitialEmotes, d...)
}

type UIControlGroupStyle struct {
	// Inherits UIControlStyle
	// Inherits PolymorphicBase
	DwType                    DT_UINT
	DwPad                     DT_UINT
	HParentStyle              UIControlHandle
	Unk_441f783               DT_INT64
	M_eHasModifiedPowerTagMap DT_TAGMAP[*DT_ENUM]
}

func (t *UIControlGroupStyle) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.HParentStyle, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_441f783, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.M_eHasModifiedPowerTagMap, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *UIControlGroupStyle) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("HParentStyle", &t.HParentStyle, d...)
	cb.Do("Unk_441f783", &t.Unk_441f783, d...)
	cb.Do("M_eHasModifiedPowerTagMap", &t.M_eHasModifiedPowerTagMap, d...)
}

type EffectGroupRotationRollKeyData struct {
	// Inherits EffectGroupKeyData
	// Inherits PolymorphicBase
	DwType     DT_UINT
	DwPad      DT_UINT
	ArKeyItems DT_VARIABLEARRAY[*EffectGroupKey]
}

func (t *EffectGroupRotationRollKeyData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.ArKeyItems, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *EffectGroupRotationRollKeyData) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("ArKeyItems", &t.ArKeyItems, d...)
}

type HiddenCacheEntry_Table struct {
	// Inherits GameBalanceTable
	// Inherits PolymorphicBase
	DwType   DT_UINT
	DwPad    DT_UINT
	TEntries DT_VARIABLEARRAY[*HiddenCacheEntry]
}

func (t *HiddenCacheEntry_Table) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TEntries, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *HiddenCacheEntry_Table) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("TEntries", &t.TEntries, d...)
}

type PVPShrineEventParticipatingMessage struct {
	THeader   RequiredMessageHeader
	DwEnd     DT_UINT
	AnnShrine DT_ACD_NETWORK_NAME
}

func (t *PVPShrineEventParticipatingMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.DwEnd, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.AnnShrine, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+28, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PVPShrineEventParticipatingMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("DwEnd", &t.DwEnd, d...)
	cb.Do("AnnShrine", &t.AnnShrine, d...)
}

type ValidComponents struct {
	TComponentArray DT_VARIABLEARRAY[*ValidComponent]
}

func (t *ValidComponents) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.TComponentArray, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ValidComponents) Walk(cb WalkCallback, d ...any) {
	cb.Do("TComponentArray", &t.TComponentArray, d...)
}

type TriggerEventFootstepTrail struct {
	// Inherits TriggerEventRangedDuration
	// Inherits TriggerEvent
	// Inherits PolymorphicBase
	DwType           DT_UINT
	TConditions      TriggerConditions
	FGenerated       DT_INT
	Unk_6cba752      DT_INT
	DwParentActorID  DT_UINT
	TDuration        DT_FLOAT
	DwTriggerFlags   DT_UINT
	DwTriggerFlagsEx DT_UINT
	TCleanup         TriggerCleanup
	Unk_49e9257      DT_INT
	Unk_5490979      DT_INT
	DwPad            DT_UINT
	THardpointLink   HardpointLink
}

func (t *TriggerEventFootstepTrail) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.FGenerated, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_6cba752, r, &Options{Flags: 16}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.DwParentActorID, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.TDuration, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.DwTriggerFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.DwTriggerFlagsEx, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.TCleanup, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+116, &t.Unk_49e9257, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.Unk_5490979, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+124, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.THardpointLink, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+136, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TriggerEventFootstepTrail) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("TConditions", &t.TConditions, d...)
	cb.Do("FGenerated", &t.FGenerated, d...)
	cb.Do("Unk_6cba752", &t.Unk_6cba752, d...)
	cb.Do("DwParentActorID", &t.DwParentActorID, d...)
	cb.Do("TDuration", &t.TDuration, d...)
	cb.Do("DwTriggerFlags", &t.DwTriggerFlags, d...)
	cb.Do("DwTriggerFlagsEx", &t.DwTriggerFlagsEx, d...)
	cb.Do("TCleanup", &t.TCleanup, d...)
	cb.Do("Unk_49e9257", &t.Unk_49e9257, d...)
	cb.Do("Unk_5490979", &t.Unk_5490979, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("THardpointLink", &t.THardpointLink, d...)
}

type WwiseExternalSourceSoundBank struct {
	// Inherits WwiseSoundBankContentBase
	// Inherits PolymorphicBase
	DwType            DT_UINT
	DwPad             DT_UINT
	ArExternalSources DT_VARIABLEARRAY[*WwiseExternalSource]
}

func (t *WwiseExternalSourceSoundBank) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.ArExternalSources, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *WwiseExternalSourceSoundBank) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("ArExternalSources", &t.ArExternalSources, d...)
}

type PowerFormulaTableEntry struct {
	SzName  DT_CHARARRAY
	FlValue DT_FIXEDARRAY[*DT_FLOAT]
}

func (t *PowerFormulaTableEntry) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SzName, r, &Options{
		ArrayLength: 1024,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1024, &t.FlValue, r, &Options{
		ArrayLength: 76,
		Flags:       1,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+1328, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PowerFormulaTableEntry) Walk(cb WalkCallback, d ...any) {
	cb.Do("SzName", &t.SzName, d...)
	cb.Do("FlValue", &t.FlValue, d...)
}

type WwiseStreamedSound struct {
	DwMediaID DT_UINT
	TName     WwiseName
}

func (t *WwiseStreamedSound) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.DwMediaID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.TName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *WwiseStreamedSound) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwMediaID", &t.DwMediaID, d...)
	cb.Do("TName", &t.TName, d...)
}

type EffectGroupCameraTrack struct {
	// Inherits EffectGroupTrack
	// Inherits PolymorphicBase
	DwType DT_UINT
	DwPad  DT_UINT
}

func (t *EffectGroupCameraTrack) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *EffectGroupCameraTrack) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
}

type WorldTierData struct {
	DwUnlockLevel        DT_UINT
	Unk_db9e2c           DT_INT
	PtPlayerAttributes   DT_VARIABLEARRAY[*AttributeSpecifier]
	TLevelScalingData    LevelScalingData
	Unk_2bca372          DT_INT
	Unk_b1d243f          DT_INT
	Unk_a4f6399          DT_INT
	Unk_458b4ff          DT_FLOAT
	Unk_6bdfabc          DT_FLOAT
	Unk_de899e2          DT_FLOAT
	FlDOTHitPercentBonus DT_FLOAT
	Unk_f40f193          DT_FLOAT
	Unk_d6bbd39          DT_FLOAT
	Unk_e362b2e          DT_FLOAT
	Unk_49768b           DT_FLOAT
	Unk_bc88631          DT_FLOAT
	Unk_b794376          DT_FLOAT
	Unk_7fd09d3          DT_FLOAT
	Unk_565b579          DT_FLOAT
	Unk_60d111b          DT_FLOAT
	Unk_e743158          DT_FLOAT
	Unk_633e27e          DT_FLOAT
	Unk_e9ded47          DT_BYTE
	PtMonsterAttributes  DT_VARIABLEARRAY[*AttributeSpecifier]
	Unk_5a79ac1          DT_FIXEDARRAY[*DT_FLOAT]
	Unk_fffd308          DT_FLOAT
	Unk_a420de9          DT_FIXEDARRAY[*DT_INT]
	Unk_fb475a3          DT_FIXEDARRAY[*DT_INT]
	Unk_2ae7938          DT_FIXEDARRAY[*DT_INT]
	Unk_afbfb6b          DT_FIXEDARRAY[*DT_INT]
	Unk_cf174d8          DT_FLOAT
}

func (t *WorldTierData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.DwUnlockLevel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.Unk_db9e2c, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.PtPlayerAttributes, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.TLevelScalingData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.Unk_2bca372, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.Unk_b1d243f, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.Unk_a4f6399, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.Unk_458b4ff, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.Unk_6bdfabc, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+60, &t.Unk_de899e2, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.FlDOTHitPercentBonus, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.Unk_f40f193, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_d6bbd39, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.Unk_e362b2e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.Unk_49768b, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.Unk_bc88631, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.Unk_b794376, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.Unk_7fd09d3, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.Unk_565b579, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+100, &t.Unk_60d111b, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+104, &t.Unk_e743158, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+108, &t.Unk_633e27e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.Unk_e9ded47, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.PtMonsterAttributes, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+136, &t.Unk_5a79ac1, r, &Options{
		ArrayLength: 3,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+148, &t.Unk_fffd308, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+152, &t.Unk_a420de9, r, &Options{
		ArrayLength: 3,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+164, &t.Unk_fb475a3, r, &Options{
		ArrayLength: 3,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+176, &t.Unk_2ae7938, r, &Options{
		ArrayLength: 5,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+196, &t.Unk_afbfb6b, r, &Options{
		ArrayLength: 3,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+208, &t.Unk_cf174d8, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+216, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *WorldTierData) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwUnlockLevel", &t.DwUnlockLevel, d...)
	cb.Do("Unk_db9e2c", &t.Unk_db9e2c, d...)
	cb.Do("PtPlayerAttributes", &t.PtPlayerAttributes, d...)
	cb.Do("TLevelScalingData", &t.TLevelScalingData, d...)
	cb.Do("Unk_2bca372", &t.Unk_2bca372, d...)
	cb.Do("Unk_b1d243f", &t.Unk_b1d243f, d...)
	cb.Do("Unk_a4f6399", &t.Unk_a4f6399, d...)
	cb.Do("Unk_458b4ff", &t.Unk_458b4ff, d...)
	cb.Do("Unk_6bdfabc", &t.Unk_6bdfabc, d...)
	cb.Do("Unk_de899e2", &t.Unk_de899e2, d...)
	cb.Do("FlDOTHitPercentBonus", &t.FlDOTHitPercentBonus, d...)
	cb.Do("Unk_f40f193", &t.Unk_f40f193, d...)
	cb.Do("Unk_d6bbd39", &t.Unk_d6bbd39, d...)
	cb.Do("Unk_e362b2e", &t.Unk_e362b2e, d...)
	cb.Do("Unk_49768b", &t.Unk_49768b, d...)
	cb.Do("Unk_bc88631", &t.Unk_bc88631, d...)
	cb.Do("Unk_b794376", &t.Unk_b794376, d...)
	cb.Do("Unk_7fd09d3", &t.Unk_7fd09d3, d...)
	cb.Do("Unk_565b579", &t.Unk_565b579, d...)
	cb.Do("Unk_60d111b", &t.Unk_60d111b, d...)
	cb.Do("Unk_e743158", &t.Unk_e743158, d...)
	cb.Do("Unk_633e27e", &t.Unk_633e27e, d...)
	cb.Do("Unk_e9ded47", &t.Unk_e9ded47, d...)
	cb.Do("PtMonsterAttributes", &t.PtMonsterAttributes, d...)
	cb.Do("Unk_5a79ac1", &t.Unk_5a79ac1, d...)
	cb.Do("Unk_fffd308", &t.Unk_fffd308, d...)
	cb.Do("Unk_a420de9", &t.Unk_a420de9, d...)
	cb.Do("Unk_fb475a3", &t.Unk_fb475a3, d...)
	cb.Do("Unk_2ae7938", &t.Unk_2ae7938, d...)
	cb.Do("Unk_afbfb6b", &t.Unk_afbfb6b, d...)
	cb.Do("Unk_cf174d8", &t.Unk_cf174d8, d...)
}

type TriggerEventSetTimeOfDay struct {
	// Inherits TriggerEvent
	// Inherits PolymorphicBase
	DwType          DT_UINT
	DwPad           DT_UINT
	TConditions     TriggerConditions
	FGenerated      DT_INT
	Unk_6cba752     DT_INT
	DwParentActorID DT_UINT
	FlTimeOfDay     DT_FLOAT
}

func (t *TriggerEventSetTimeOfDay) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.FGenerated, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_6cba752, r, &Options{Flags: 16}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.DwParentActorID, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.FlTimeOfDay, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+88, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TriggerEventSetTimeOfDay) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("TConditions", &t.TConditions, d...)
	cb.Do("FGenerated", &t.FGenerated, d...)
	cb.Do("Unk_6cba752", &t.Unk_6cba752, d...)
	cb.Do("DwParentActorID", &t.DwParentActorID, d...)
	cb.Do("FlTimeOfDay", &t.FlTimeOfDay, d...)
}

type PhaseJumpDistanceReached struct {
	// Inherits PhaseJumpBase
	// Inherits PolymorphicBase
	DwType       DT_UINT
	Unk_2de4987  DT_UINT
	ArConditions DT_POLYMORPHIC_VARIABLEARRAY[*DT_INT64]
	BEnd         DT_INT
	DwPad        DT_UINT
	FlDistance   DT_FLOAT
}

func (t *PhaseJumpDistanceReached) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_2de4987, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ArConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.BEnd, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.FlDistance, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+64, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PhaseJumpDistanceReached) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("Unk_2de4987", &t.Unk_2de4987, d...)
	cb.Do("ArConditions", &t.ArConditions, d...)
	cb.Do("BEnd", &t.BEnd, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("FlDistance", &t.FlDistance, d...)
}

type ParagonNodeMessage struct {
	THeader     RequiredMessageHeader
	DwNodeIndex DT_UINT
	BIsCheat    DT_INT
}

func (t *ParagonNodeMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.DwNodeIndex, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.BIsCheat, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ParagonNodeMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("DwNodeIndex", &t.DwNodeIndex, d...)
	cb.Do("BIsCheat", &t.BIsCheat, d...)
}

type ChatMessage struct {
	THeader               RequiredMessageHeader
	DwPlayerGameAccountId DT_UINT
	UsMessage             DT_CHARARRAY
}

func (t *ChatMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.DwPlayerGameAccountId, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.UsMessage, r, &Options{
		ArrayLength: 1024,
		Flags:       1,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+1044, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ChatMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("DwPlayerGameAccountId", &t.DwPlayerGameAccountId, d...)
	cb.Do("UsMessage", &t.UsMessage, d...)
}

type Type_d7ee8f26 struct {
	SnoMaterialValue DT_SNO
	NBitOffset       DT_INT
	Unk_bbe4258      DT_VARIABLEARRAY[*DT_FLOAT]
	FlDefaultValue   DT_FLOAT
}

func (t *Type_d7ee8f26) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoMaterialValue, r, &Options{
		Flags: 1,
		Group: 81,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.NBitOffset, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.Unk_bbe4258, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.FlDefaultValue, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_d7ee8f26) Walk(cb WalkCallback, d ...any) {
	cb.Do("SnoMaterialValue", &t.SnoMaterialValue, d...)
	cb.Do("NBitOffset", &t.NBitOffset, d...)
	cb.Do("Unk_bbe4258", &t.Unk_bbe4258, d...)
	cb.Do("FlDefaultValue", &t.FlDefaultValue, d...)
}

type EmblemDefinition struct {
	HSmallIcon DT_UINT
	HLargeIcon DT_UINT
}

func (t *EmblemDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.HSmallIcon, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.HLargeIcon, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *EmblemDefinition) Walk(cb WalkCallback, d ...any) {
	cb.Do("HSmallIcon", &t.HSmallIcon, d...)
	cb.Do("HLargeIcon", &t.HLargeIcon, d...)
}

type PlayerClassDefinition struct {
	SnoActorMale                          DT_SNO
	SnoActorFemale                        DT_SNO
	SnoInventory                          DT_SNO
	FlStartingStrength                    DT_FLOAT
	FlStartingIntelligence                DT_FLOAT
	FlStartingWillpower                   DT_FLOAT
	FlStartingDexterity                   DT_FLOAT
	FlAttributesHitPoints                 DT_FLOAT
	FlAttributesMaxDamageShield           DT_FLOAT
	Unk_9ae1b37                           DT_FLOAT
	Unk_9ae1b42                           DT_FLOAT
	TPrimaryResource                      PlayerClassResourceData
	TSecondaryResource                    PlayerClassResourceData
	Unk_b34fba9                           DT_FLOAT
	FlAttributesWalkSpeed                 DT_FLOAT
	FlAttributesRunSpeed                  DT_FLOAT
	FlAttributesClimbSpeed                DT_FLOAT
	FlAttributesSlideSpeed                DT_FLOAT
	TFacingData                           ActorFacingData
	FlAttributesCritPercentBase           DT_FLOAT
	FlAttributesOverpowerChanceBase       DT_FLOAT
	FlAttributesResistFire                DT_FLOAT
	FlAttributesResistLightning           DT_FLOAT
	FlAttributesResistCold                DT_FLOAT
	FlAttributesResistPoison              DT_FLOAT
	FlAttributesResistShadow              DT_FLOAT
	FlAttributesResistChill               DT_FLOAT
	FlAttributeDodgeChanceBonus           DT_FLOAT
	ArCoreStatBenefit                     DT_FIXEDARRAY[*PlayerClassCoreStatBenefitData]
	GbidDefaultDynamicMovementData        DT_GBID
	SnoSkillKit                           DT_SNO
	SnoSkillKitBlizzconOverride           DT_SNO
	SnoDefaultBasicAttack                 DT_SNO
	Unk_97b2546                           DT_FIXEDARRAY[*DT_UINT]
	SnoCombatDismountPower                DT_SNO
	SnoActorResourceGlobe                 DT_SNO
	Unk_63df9da                           DT_INT
	TNecroData                            PlayerClassNecroData
	TRogueData                            PlayerClassRogueData
	TSorcererData                         PlayerClassSorcererData
	TDruidData                            PlayerClassDruidData
	TBarbData                             PlayerClassBarbData
	ArItemTiers                           DT_VARIABLEARRAY[*ItemTier]
	ArAvailableParagonBoards              DT_VARIABLEARRAY[*DT_SNO]
	Unk_b3a4391                           Type_da21c503
	SnoInventoryUIWorld                   DT_SNO
	SnoCharacterSelectUIWorld             DT_SNO
	SzCharacterSelectCameraName           DT_UINT
	SnoCharacterSelect_HeadToBody         DT_SNO
	SnoCharacterSelect_BodyToHead         DT_SNO
	SzCharacterCustomizationCameraName    DT_UINT
	SnoCharacterCustomization_StartToHead DT_SNO
	SnoCharacterCustomization_HeadToBody  DT_SNO
	SnoCharacterCustomization_BodyToHead  DT_SNO
	SnoCharacterCustomization_HeadToEnd   DT_SNO
	SnoCharacterCustomization_BodyToEnd   DT_SNO
	SnoCharacterCustomization_FaceToHead  DT_SNO
	SnoCharacterCustomization_HeadToFace  DT_SNO
	SnoCharacterCustomization_FaceToEnd   DT_SNO
	SzFrontEndHeadFaceCharacterCam        DT_UINT
	SzWardrobeCameraName                  DT_UINT
	SzWardrobeHeadCameraName              DT_UINT
	SzWardrobeTorsoCameraName             DT_UINT
	SzWardrobeHandsCameraName             DT_UINT
	SzWardrobeMainHandCameraName          DT_UINT
	SzWardrobeOffHandCameraName           DT_UINT
	SzWardrobeLegsCameraName              DT_UINT
	SzWardrobeFeetCameraName              DT_UINT
	Unk_71458eb                           DT_UINT
	Unk_a996ec1                           DT_UINT
	Unk_699692c                           DT_UINT
	Unk_f5348c2                           DT_UINT
	Unk_4996ef8                           DT_UINT
	Unk_f9cce95                           DT_UINT
	Unk_1052b5d                           DT_UINT
	Unk_a43c1cd                           DT_UINT
	Unk_448f16c                           DT_UINT
	SnoNamesMale                          DT_SNO
	SnoNamesFemale                        DT_SNO
	HSkillTreeCenterImage                 DT_UINT
}

func (t *PlayerClassDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.SnoActorMale, r, &Options{
		Flags: 1,
		Group: 1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.SnoActorFemale, r, &Options{
		Flags: 1,
		Group: 1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoInventory, r, &Options{
		Flags: 1,
		Group: 52,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.FlStartingStrength, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.FlStartingIntelligence, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.FlStartingWillpower, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.FlStartingDexterity, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.FlAttributesHitPoints, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.FlAttributesMaxDamageShield, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.Unk_9ae1b37, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.Unk_9ae1b42, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.TPrimaryResource, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.TSecondaryResource, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+116, &t.Unk_b34fba9, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.FlAttributesWalkSpeed, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+124, &t.FlAttributesRunSpeed, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.FlAttributesClimbSpeed, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+132, &t.FlAttributesSlideSpeed, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+136, &t.TFacingData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+148, &t.FlAttributesCritPercentBase, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+152, &t.FlAttributesOverpowerChanceBase, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+156, &t.FlAttributesResistFire, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+160, &t.FlAttributesResistLightning, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+164, &t.FlAttributesResistCold, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+168, &t.FlAttributesResistPoison, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+172, &t.FlAttributesResistShadow, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+176, &t.FlAttributesResistChill, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+180, &t.FlAttributeDodgeChanceBonus, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+184, &t.ArCoreStatBenefit, r, &Options{
		ArrayLength: 4,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+248, &t.GbidDefaultDynamicMovementData, r, &Options{
		Flags: 1,
		Group: 34,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+252, &t.SnoSkillKit, r, &Options{
		Flags: 1,
		Group: 39,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+256, &t.SnoSkillKitBlizzconOverride, r, &Options{
		Flags: 1,
		Group: 39,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+260, &t.SnoDefaultBasicAttack, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+264, &t.Unk_97b2546, r, &Options{
		ArrayLength: 6,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+288, &t.SnoCombatDismountPower, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+292, &t.SnoActorResourceGlobe, r, &Options{
		Flags: 1,
		Group: 1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+296, &t.Unk_63df9da, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+304, &t.TNecroData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1152, &t.TRogueData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1208, &t.TSorcererData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1240, &t.TDruidData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1280, &t.TBarbData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1312, &t.ArItemTiers, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1328, &t.ArAvailableParagonBoards, r, &Options{
		Flags: 1,
		Group: 108,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1344, &t.Unk_b3a4391, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1360, &t.SnoInventoryUIWorld, r, &Options{
		Flags: 1,
		Group: 48,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1364, &t.SnoCharacterSelectUIWorld, r, &Options{
		Flags: 1,
		Group: 48,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1368, &t.SzCharacterSelectCameraName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1372, &t.SnoCharacterSelect_HeadToBody, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1376, &t.SnoCharacterSelect_BodyToHead, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1380, &t.SzCharacterCustomizationCameraName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1384, &t.SnoCharacterCustomization_StartToHead, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1388, &t.SnoCharacterCustomization_HeadToBody, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1392, &t.SnoCharacterCustomization_BodyToHead, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1396, &t.SnoCharacterCustomization_HeadToEnd, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1400, &t.SnoCharacterCustomization_BodyToEnd, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1404, &t.SnoCharacterCustomization_FaceToHead, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1408, &t.SnoCharacterCustomization_HeadToFace, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1412, &t.SnoCharacterCustomization_FaceToEnd, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1416, &t.SzFrontEndHeadFaceCharacterCam, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1420, &t.SzWardrobeCameraName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1424, &t.SzWardrobeHeadCameraName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1428, &t.SzWardrobeTorsoCameraName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1432, &t.SzWardrobeHandsCameraName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1436, &t.SzWardrobeMainHandCameraName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1440, &t.SzWardrobeOffHandCameraName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1444, &t.SzWardrobeLegsCameraName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1448, &t.SzWardrobeFeetCameraName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1452, &t.Unk_71458eb, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1456, &t.Unk_a996ec1, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1460, &t.Unk_699692c, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1464, &t.Unk_f5348c2, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1468, &t.Unk_4996ef8, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1472, &t.Unk_f9cce95, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1476, &t.Unk_1052b5d, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1480, &t.Unk_a43c1cd, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1484, &t.Unk_448f16c, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1488, &t.SnoNamesMale, r, &Options{
		Flags: 1,
		Group: 42,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1492, &t.SnoNamesFemale, r, &Options{
		Flags: 1,
		Group: 42,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1496, &t.HSkillTreeCenterImage, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+1504, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PlayerClassDefinition) Walk(cb WalkCallback, d ...any) {
	cb.Do("SnoActorMale", &t.SnoActorMale, d...)
	cb.Do("SnoActorFemale", &t.SnoActorFemale, d...)
	cb.Do("SnoInventory", &t.SnoInventory, d...)
	cb.Do("FlStartingStrength", &t.FlStartingStrength, d...)
	cb.Do("FlStartingIntelligence", &t.FlStartingIntelligence, d...)
	cb.Do("FlStartingWillpower", &t.FlStartingWillpower, d...)
	cb.Do("FlStartingDexterity", &t.FlStartingDexterity, d...)
	cb.Do("FlAttributesHitPoints", &t.FlAttributesHitPoints, d...)
	cb.Do("FlAttributesMaxDamageShield", &t.FlAttributesMaxDamageShield, d...)
	cb.Do("Unk_9ae1b37", &t.Unk_9ae1b37, d...)
	cb.Do("Unk_9ae1b42", &t.Unk_9ae1b42, d...)
	cb.Do("TPrimaryResource", &t.TPrimaryResource, d...)
	cb.Do("TSecondaryResource", &t.TSecondaryResource, d...)
	cb.Do("Unk_b34fba9", &t.Unk_b34fba9, d...)
	cb.Do("FlAttributesWalkSpeed", &t.FlAttributesWalkSpeed, d...)
	cb.Do("FlAttributesRunSpeed", &t.FlAttributesRunSpeed, d...)
	cb.Do("FlAttributesClimbSpeed", &t.FlAttributesClimbSpeed, d...)
	cb.Do("FlAttributesSlideSpeed", &t.FlAttributesSlideSpeed, d...)
	cb.Do("TFacingData", &t.TFacingData, d...)
	cb.Do("FlAttributesCritPercentBase", &t.FlAttributesCritPercentBase, d...)
	cb.Do("FlAttributesOverpowerChanceBase", &t.FlAttributesOverpowerChanceBase, d...)
	cb.Do("FlAttributesResistFire", &t.FlAttributesResistFire, d...)
	cb.Do("FlAttributesResistLightning", &t.FlAttributesResistLightning, d...)
	cb.Do("FlAttributesResistCold", &t.FlAttributesResistCold, d...)
	cb.Do("FlAttributesResistPoison", &t.FlAttributesResistPoison, d...)
	cb.Do("FlAttributesResistShadow", &t.FlAttributesResistShadow, d...)
	cb.Do("FlAttributesResistChill", &t.FlAttributesResistChill, d...)
	cb.Do("FlAttributeDodgeChanceBonus", &t.FlAttributeDodgeChanceBonus, d...)
	cb.Do("ArCoreStatBenefit", &t.ArCoreStatBenefit, d...)
	cb.Do("GbidDefaultDynamicMovementData", &t.GbidDefaultDynamicMovementData, d...)
	cb.Do("SnoSkillKit", &t.SnoSkillKit, d...)
	cb.Do("SnoSkillKitBlizzconOverride", &t.SnoSkillKitBlizzconOverride, d...)
	cb.Do("SnoDefaultBasicAttack", &t.SnoDefaultBasicAttack, d...)
	cb.Do("Unk_97b2546", &t.Unk_97b2546, d...)
	cb.Do("SnoCombatDismountPower", &t.SnoCombatDismountPower, d...)
	cb.Do("SnoActorResourceGlobe", &t.SnoActorResourceGlobe, d...)
	cb.Do("Unk_63df9da", &t.Unk_63df9da, d...)
	cb.Do("TNecroData", &t.TNecroData, d...)
	cb.Do("TRogueData", &t.TRogueData, d...)
	cb.Do("TSorcererData", &t.TSorcererData, d...)
	cb.Do("TDruidData", &t.TDruidData, d...)
	cb.Do("TBarbData", &t.TBarbData, d...)
	cb.Do("ArItemTiers", &t.ArItemTiers, d...)
	cb.Do("ArAvailableParagonBoards", &t.ArAvailableParagonBoards, d...)
	cb.Do("Unk_b3a4391", &t.Unk_b3a4391, d...)
	cb.Do("SnoInventoryUIWorld", &t.SnoInventoryUIWorld, d...)
	cb.Do("SnoCharacterSelectUIWorld", &t.SnoCharacterSelectUIWorld, d...)
	cb.Do("SzCharacterSelectCameraName", &t.SzCharacterSelectCameraName, d...)
	cb.Do("SnoCharacterSelect_HeadToBody", &t.SnoCharacterSelect_HeadToBody, d...)
	cb.Do("SnoCharacterSelect_BodyToHead", &t.SnoCharacterSelect_BodyToHead, d...)
	cb.Do("SzCharacterCustomizationCameraName", &t.SzCharacterCustomizationCameraName, d...)
	cb.Do("SnoCharacterCustomization_StartToHead", &t.SnoCharacterCustomization_StartToHead, d...)
	cb.Do("SnoCharacterCustomization_HeadToBody", &t.SnoCharacterCustomization_HeadToBody, d...)
	cb.Do("SnoCharacterCustomization_BodyToHead", &t.SnoCharacterCustomization_BodyToHead, d...)
	cb.Do("SnoCharacterCustomization_HeadToEnd", &t.SnoCharacterCustomization_HeadToEnd, d...)
	cb.Do("SnoCharacterCustomization_BodyToEnd", &t.SnoCharacterCustomization_BodyToEnd, d...)
	cb.Do("SnoCharacterCustomization_FaceToHead", &t.SnoCharacterCustomization_FaceToHead, d...)
	cb.Do("SnoCharacterCustomization_HeadToFace", &t.SnoCharacterCustomization_HeadToFace, d...)
	cb.Do("SnoCharacterCustomization_FaceToEnd", &t.SnoCharacterCustomization_FaceToEnd, d...)
	cb.Do("SzFrontEndHeadFaceCharacterCam", &t.SzFrontEndHeadFaceCharacterCam, d...)
	cb.Do("SzWardrobeCameraName", &t.SzWardrobeCameraName, d...)
	cb.Do("SzWardrobeHeadCameraName", &t.SzWardrobeHeadCameraName, d...)
	cb.Do("SzWardrobeTorsoCameraName", &t.SzWardrobeTorsoCameraName, d...)
	cb.Do("SzWardrobeHandsCameraName", &t.SzWardrobeHandsCameraName, d...)
	cb.Do("SzWardrobeMainHandCameraName", &t.SzWardrobeMainHandCameraName, d...)
	cb.Do("SzWardrobeOffHandCameraName", &t.SzWardrobeOffHandCameraName, d...)
	cb.Do("SzWardrobeLegsCameraName", &t.SzWardrobeLegsCameraName, d...)
	cb.Do("SzWardrobeFeetCameraName", &t.SzWardrobeFeetCameraName, d...)
	cb.Do("Unk_71458eb", &t.Unk_71458eb, d...)
	cb.Do("Unk_a996ec1", &t.Unk_a996ec1, d...)
	cb.Do("Unk_699692c", &t.Unk_699692c, d...)
	cb.Do("Unk_f5348c2", &t.Unk_f5348c2, d...)
	cb.Do("Unk_4996ef8", &t.Unk_4996ef8, d...)
	cb.Do("Unk_f9cce95", &t.Unk_f9cce95, d...)
	cb.Do("Unk_1052b5d", &t.Unk_1052b5d, d...)
	cb.Do("Unk_a43c1cd", &t.Unk_a43c1cd, d...)
	cb.Do("Unk_448f16c", &t.Unk_448f16c, d...)
	cb.Do("SnoNamesMale", &t.SnoNamesMale, d...)
	cb.Do("SnoNamesFemale", &t.SnoNamesFemale, d...)
	cb.Do("HSkillTreeCenterImage", &t.HSkillTreeCenterImage, d...)
}

type ForcedPrefetchEntry struct {
	SnoName      DT_SNO_NAME
	EVariantType DT_ENUM
}

func (t *ForcedPrefetchEntry) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoName, r, &Options{Flags: 513}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.EVariantType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+12, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ForcedPrefetchEntry) Walk(cb WalkCallback, d ...any) {
	cb.Do("SnoName", &t.SnoName, d...)
	cb.Do("EVariantType", &t.EVariantType, d...)
}

type TextureDefinition struct {
	ETexFormat           DT_ENUM
	DwVolumeXSlices      DT_WORD
	DwVolumeYSlices      DT_WORD
	DwWidth              DT_WORD
	DwHeight             DT_WORD
	DwDepth              DT_UINT
	DwFaceCount          DT_BYTE
	DwMipMapLevelMin     DT_BYTE
	DwMipMapLevelMax     DT_BYTE
	DwImportFlags        DT_UINT
	ETextureResourceType DT_ENUM
	RgbavalAvgColor      DT_RGBACOLORVALUE
	PHotspot             DT_BCVEC2I
	SerTex               DT_VARIABLEARRAY[*SerializeData]
	PtFrame              DT_VARIABLEARRAY[*TexFrame]
	Unk_20823c1          DT_VARIABLEARRAY[*Type_835c1731]
	PtPostprocessed      DT_INT64
}

func (t *TextureDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.ETexFormat, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwVolumeXSlices, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+14, &t.DwVolumeYSlices, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.DwWidth, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+18, &t.DwHeight, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwDepth, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.DwFaceCount, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+25, &t.DwMipMapLevelMin, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+26, &t.DwMipMapLevelMax, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.DwImportFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.ETextureResourceType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.RgbavalAvgColor, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.PHotspot, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.SerTex, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.PtFrame, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.Unk_20823c1, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.PtPostprocessed, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if _, err := r.Seek(p+120, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TextureDefinition) Walk(cb WalkCallback, d ...any) {
	cb.Do("ETexFormat", &t.ETexFormat, d...)
	cb.Do("DwVolumeXSlices", &t.DwVolumeXSlices, d...)
	cb.Do("DwVolumeYSlices", &t.DwVolumeYSlices, d...)
	cb.Do("DwWidth", &t.DwWidth, d...)
	cb.Do("DwHeight", &t.DwHeight, d...)
	cb.Do("DwDepth", &t.DwDepth, d...)
	cb.Do("DwFaceCount", &t.DwFaceCount, d...)
	cb.Do("DwMipMapLevelMin", &t.DwMipMapLevelMin, d...)
	cb.Do("DwMipMapLevelMax", &t.DwMipMapLevelMax, d...)
	cb.Do("DwImportFlags", &t.DwImportFlags, d...)
	cb.Do("ETextureResourceType", &t.ETextureResourceType, d...)
	cb.Do("RgbavalAvgColor", &t.RgbavalAvgColor, d...)
	cb.Do("PHotspot", &t.PHotspot, d...)
	cb.Do("SerTex", &t.SerTex, d...)
	cb.Do("PtFrame", &t.PtFrame, d...)
	cb.Do("Unk_20823c1", &t.Unk_20823c1, d...)
	cb.Do("PtPostprocessed", &t.PtPostprocessed, d...)
}

type GroupTransferReplyMessage struct {
	THeader RequiredMessageHeader
	Accept  DT_INT
}

func (t *GroupTransferReplyMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Accept, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+20, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *GroupTransferReplyMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("Accept", &t.Accept, d...)
}

type PlayerTownPortalReturnDestMessage struct {
	THeader               RequiredMessageHeader
	TTownPortalReturnDest TownPortalReturnDest
	DwPlayerGameAccountId DT_UINT
}

func (t *PlayerTownPortalReturnDestMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TTownPortalReturnDest, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.DwPlayerGameAccountId, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+56, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PlayerTownPortalReturnDestMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("TTownPortalReturnDest", &t.TTownPortalReturnDest, d...)
	cb.Do("DwPlayerGameAccountId", &t.DwPlayerGameAccountId, d...)
}

type UIStyleResource struct {
	SzStyleName DT_CSTRING[*DT_BYTE]
	NKey        DT_UINT
	PtStyle     DT_POLYMORPHIC_VARIABLEARRAY[*UIControlStyle]
}

func (t *UIStyleResource) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SzStyleName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.NKey, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.PtStyle, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *UIStyleResource) Walk(cb WalkCallback, d ...any) {
	cb.Do("SzStyleName", &t.SzStyleName, d...)
	cb.Do("NKey", &t.NKey, d...)
	cb.Do("PtStyle", &t.PtStyle, d...)
}

type InventoryRequestSortMessage struct {
	THeader    RequiredMessageHeader
	ESlot      DT_ENUM
	Unk_7d12b0 DT_INT
}

func (t *InventoryRequestSortMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.ESlot, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.Unk_7d12b0, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *InventoryRequestSortMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("ESlot", &t.ESlot, d...)
	cb.Do("Unk_7d12b0", &t.Unk_7d12b0, d...)
}

type HardpointInfo struct {
	DwHash     DT_UINT
	DwHashFlag DT_UINT
}

func (t *HardpointInfo) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.DwHash, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.DwHashFlag, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *HardpointInfo) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwHash", &t.DwHash, d...)
	cb.Do("DwHashFlag", &t.DwHashFlag, d...)
}

type HardpointLink struct {
	TInfo HardpointInfo
}

func (t *HardpointLink) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.TInfo, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *HardpointLink) Walk(cb WalkCallback, d ...any) {
	cb.Do("TInfo", &t.TInfo, d...)
}

type HardpointName struct {
	SzName DT_CHARARRAY
}

func (t *HardpointName) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SzName, r, &Options{
		ArrayLength: 64,
		Flags:       1,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+64, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *HardpointName) Walk(cb WalkCallback, d ...any) {
	cb.Do("SzName", &t.SzName, d...)
}

type GlobalBountyData struct {
	// Inherits GlobalBase
	// Inherits PolymorphicBase
	DwType        DT_UINT
	DwPad         DT_UINT
	ArBountyZones DT_FIXEDARRAY[*BountyZones]
	Unk_297c737   DT_UINT
	Unk_65250c9   DT_UINT
}

func (t *GlobalBountyData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.ArBountyZones, r, &Options{
		ArrayLength: 8,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+208, &t.Unk_297c737, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+212, &t.Unk_65250c9, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+216, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *GlobalBountyData) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("ArBountyZones", &t.ArBountyZones, d...)
	cb.Do("Unk_297c737", &t.Unk_297c737, d...)
	cb.Do("Unk_65250c9", &t.Unk_65250c9, d...)
}

type InventoryImages struct {
	HDefaultImage DT_UINT
	HFemaleImage  DT_UINT
}

func (t *InventoryImages) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.HDefaultImage, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.HFemaleImage, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *InventoryImages) Walk(cb WalkCallback, d ...any) {
	cb.Do("HDefaultImage", &t.HDefaultImage, d...)
	cb.Do("HFemaleImage", &t.HFemaleImage, d...)
}

type UIComboBoxStyleOptionalFieldMapDefaults struct {
	NNumComboboxItems            DT_INT
	SzComboboxPlaceholderText    DT_CSTRING[*DT_BYTE]
	SzComboboxOnClick            DT_CSTRING[*DT_BYTE]
	EComboBoxTextJustify         DT_ENUM
	EComboBoxTextJustifyVertical DT_ENUM
	RgbaTextColorNormal          DT_RGBACOLOR
	RgbaTextColorHighlight       DT_RGBACOLOR
	RgbaTextColorSelected        DT_RGBACOLOR
	Unk_3368b                    DT_INT
	ArStaticOptions              DT_VARIABLEARRAY[*StringLabelHandleEx]
}

func (t *UIComboBoxStyleOptionalFieldMapDefaults) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.NNumComboboxItems, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.SzComboboxPlaceholderText, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SzComboboxOnClick, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.EComboBoxTextJustify, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.EComboBoxTextJustifyVertical, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.RgbaTextColorNormal, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.RgbaTextColorHighlight, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.RgbaTextColorSelected, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+60, &t.Unk_3368b, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.ArStaticOptions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+80, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *UIComboBoxStyleOptionalFieldMapDefaults) Walk(cb WalkCallback, d ...any) {
	cb.Do("NNumComboboxItems", &t.NNumComboboxItems, d...)
	cb.Do("SzComboboxPlaceholderText", &t.SzComboboxPlaceholderText, d...)
	cb.Do("SzComboboxOnClick", &t.SzComboboxOnClick, d...)
	cb.Do("EComboBoxTextJustify", &t.EComboBoxTextJustify, d...)
	cb.Do("EComboBoxTextJustifyVertical", &t.EComboBoxTextJustifyVertical, d...)
	cb.Do("RgbaTextColorNormal", &t.RgbaTextColorNormal, d...)
	cb.Do("RgbaTextColorHighlight", &t.RgbaTextColorHighlight, d...)
	cb.Do("RgbaTextColorSelected", &t.RgbaTextColorSelected, d...)
	cb.Do("Unk_3368b", &t.Unk_3368b, d...)
	cb.Do("ArStaticOptions", &t.ArStaticOptions, d...)
}

type ACDWorldPositionMessage struct {
	THeader             RequiredMessageHeader
	Ann                 DT_ACD_NETWORK_NAME
	TWorldLocationData  WorldLocationMessageData
	TLookOverrides      DT_OPTIONAL[*EnterKnownLookOverrides]
	TShaderMapOverrides DT_OPTIONAL[*EnterKnownShaderMapOverrides]
}

func (t *ACDWorldPositionMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Ann, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.TWorldLocationData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.TLookOverrides, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+124, &t.TShaderMapOverrides, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+152, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ACDWorldPositionMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("Ann", &t.Ann, d...)
	cb.Do("TWorldLocationData", &t.TWorldLocationData, d...)
	cb.Do("TLookOverrides", &t.TLookOverrides, d...)
	cb.Do("TShaderMapOverrides", &t.TShaderMapOverrides, d...)
}

type GeoChunkVertexBuffer struct {
	EVBFormat       DT_ENUM
	DwVertStride    DT_UINT
	PtVertexElems   DT_VARIABLEARRAY[*VertexElem]
	Unk_aea647a     DT_VARIABLEARRAY[*DT_BYTE]
	Vfid            DT_INT
	PtChunkVertices DT_VARIABLEARRAY[*DT_BYTE]
	Vbid            DT_INT
	Baid            DT_INT
	Unk_4c43adc     DT_UINT
	FOptional       DT_INT
}

func (t *GeoChunkVertexBuffer) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.EVBFormat, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.DwVertStride, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.PtVertexElems, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_aea647a, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.Vfid, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.PtChunkVertices, r, &Options{Flags: 4194305}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.Vbid, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.Baid, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_4c43adc, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.FOptional, r, &Options{Flags: 16}); err != nil {
		return err
	}
	if _, err := r.Seek(p+80, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *GeoChunkVertexBuffer) Walk(cb WalkCallback, d ...any) {
	cb.Do("EVBFormat", &t.EVBFormat, d...)
	cb.Do("DwVertStride", &t.DwVertStride, d...)
	cb.Do("PtVertexElems", &t.PtVertexElems, d...)
	cb.Do("Unk_aea647a", &t.Unk_aea647a, d...)
	cb.Do("Vfid", &t.Vfid, d...)
	cb.Do("PtChunkVertices", &t.PtChunkVertices, d...)
	cb.Do("Vbid", &t.Vbid, d...)
	cb.Do("Baid", &t.Baid, d...)
	cb.Do("Unk_4c43adc", &t.Unk_4c43adc, d...)
	cb.Do("FOptional", &t.FOptional, d...)
}

type FontDefinition struct {
	EHintingMode         DT_ENUM
	EHintingStyle        DT_ENUM
	NSizeAdjustments     DT_FIXEDARRAY[*DT_INT]
	Unk_316a8bf          DT_FLOAT
	Unk_1cd7ee6          DT_FLOAT
	FlAdvanceScalar      DT_FLOAT
	FlIconHeightScalar   DT_FLOAT
	SnoBoldStyle         DT_SNO
	SnoItalicStyle       DT_SNO
	SnoBoldItalicStyle   DT_SNO
	SnoFallbackFont      DT_SNO
	DwTransformFlags     DT_UINT
	FlBoldWeight         DT_FLOAT
	Unk_4ca851           DT_FLOAT
	FlUnderlineThickness DT_FLOAT
	FlUnderlineGap       DT_FLOAT
	PtPostData           DT_INT64
	Unk_2cd1580          DT_VARIABLEARRAY[*DT_BYTE]
}

func (t *FontDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.EHintingMode, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.EHintingStyle, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.NSizeAdjustments, r, &Options{
		ArrayLength: 3,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.Unk_316a8bf, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.Unk_1cd7ee6, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.FlAdvanceScalar, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.FlIconHeightScalar, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.SnoBoldStyle, r, &Options{
		Flags: 1,
		Group: 19,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.SnoItalicStyle, r, &Options{
		Flags: 1,
		Group: 19,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.SnoBoldItalicStyle, r, &Options{
		Flags: 1,
		Group: 19,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.SnoFallbackFont, r, &Options{
		Flags: 1,
		Group: 19,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+60, &t.DwTransformFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.FlBoldWeight, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.Unk_4ca851, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.FlUnderlineThickness, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.FlUnderlineGap, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.PtPostData, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.Unk_2cd1580, r, &Options{Flags: 2097152}); err != nil {
		return err
	}
	if _, err := r.Seek(p+104, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *FontDefinition) Walk(cb WalkCallback, d ...any) {
	cb.Do("EHintingMode", &t.EHintingMode, d...)
	cb.Do("EHintingStyle", &t.EHintingStyle, d...)
	cb.Do("NSizeAdjustments", &t.NSizeAdjustments, d...)
	cb.Do("Unk_316a8bf", &t.Unk_316a8bf, d...)
	cb.Do("Unk_1cd7ee6", &t.Unk_1cd7ee6, d...)
	cb.Do("FlAdvanceScalar", &t.FlAdvanceScalar, d...)
	cb.Do("FlIconHeightScalar", &t.FlIconHeightScalar, d...)
	cb.Do("SnoBoldStyle", &t.SnoBoldStyle, d...)
	cb.Do("SnoItalicStyle", &t.SnoItalicStyle, d...)
	cb.Do("SnoBoldItalicStyle", &t.SnoBoldItalicStyle, d...)
	cb.Do("SnoFallbackFont", &t.SnoFallbackFont, d...)
	cb.Do("DwTransformFlags", &t.DwTransformFlags, d...)
	cb.Do("FlBoldWeight", &t.FlBoldWeight, d...)
	cb.Do("Unk_4ca851", &t.Unk_4ca851, d...)
	cb.Do("FlUnderlineThickness", &t.FlUnderlineThickness, d...)
	cb.Do("FlUnderlineGap", &t.FlUnderlineGap, d...)
	cb.Do("PtPostData", &t.PtPostData, d...)
	cb.Do("Unk_2cd1580", &t.Unk_2cd1580, d...)
}

type ACDTranslateDetPathSinMessage struct {
	THeader             RequiredMessageHeader
	Ann                 DT_ACD_NETWORK_NAME
	EDPath              DT_ENUM
	TSeed               RandomNumberGenerator
	WvVelocity          DT_VECTOR3D
	AOriginalYaw        DT_FLOAT
	VStartPos           DT_VECTOR3D
	UMoveFlags          DT_UINT
	SnoPowerPassability DT_SNO
	NInt0               DT_INT
	FlVar0              DT_FLOAT
	TSinData            DPathSinData
	FlSpeedMult         DT_FLOAT
}

func (t *ACDTranslateDetPathSinMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Ann, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.EDPath, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.TSeed, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.WvVelocity, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.AOriginalYaw, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.VStartPos, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.UMoveFlags, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.SnoPowerPassability, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.NInt0, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.FlVar0, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.TSinData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.FlSpeedMult, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+116, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ACDTranslateDetPathSinMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("Ann", &t.Ann, d...)
	cb.Do("EDPath", &t.EDPath, d...)
	cb.Do("TSeed", &t.TSeed, d...)
	cb.Do("WvVelocity", &t.WvVelocity, d...)
	cb.Do("AOriginalYaw", &t.AOriginalYaw, d...)
	cb.Do("VStartPos", &t.VStartPos, d...)
	cb.Do("UMoveFlags", &t.UMoveFlags, d...)
	cb.Do("SnoPowerPassability", &t.SnoPowerPassability, d...)
	cb.Do("NInt0", &t.NInt0, d...)
	cb.Do("FlVar0", &t.FlVar0, d...)
	cb.Do("TSinData", &t.TSinData, d...)
	cb.Do("FlSpeedMult", &t.FlSpeedMult, d...)
}

type RandomItemUnluckyBonuses struct {
	FlPctHead     DT_FLOAT
	FlPctTorso    DT_FLOAT
	FlPctOffHand  DT_FLOAT
	FlPctMainHand DT_FLOAT
	FlPctHands    DT_FLOAT
	FlPctLegs     DT_FLOAT
	FlPctFeet     DT_FLOAT
	FlPctFinger   DT_FLOAT
	FlPctNeck     DT_FLOAT
}

func (t *RandomItemUnluckyBonuses) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.FlPctHead, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.FlPctTorso, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.FlPctOffHand, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.FlPctMainHand, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.FlPctHands, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.FlPctLegs, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.FlPctFeet, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.FlPctFinger, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.FlPctNeck, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+36, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *RandomItemUnluckyBonuses) Walk(cb WalkCallback, d ...any) {
	cb.Do("FlPctHead", &t.FlPctHead, d...)
	cb.Do("FlPctTorso", &t.FlPctTorso, d...)
	cb.Do("FlPctOffHand", &t.FlPctOffHand, d...)
	cb.Do("FlPctMainHand", &t.FlPctMainHand, d...)
	cb.Do("FlPctHands", &t.FlPctHands, d...)
	cb.Do("FlPctLegs", &t.FlPctLegs, d...)
	cb.Do("FlPctFeet", &t.FlPctFeet, d...)
	cb.Do("FlPctFinger", &t.FlPctFinger, d...)
	cb.Do("FlPctNeck", &t.FlPctNeck, d...)
}

type MovieDefinition struct {
	SnoAudioTrack     DT_SNO
	SnoSubtitles      DT_SNO
	SnoClosedCaptions DT_SNO
	Unk_19d005e       DT_UINT
	Unk_1426000       DT_FLOAT
}

func (t *MovieDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.SnoAudioTrack, r, &Options{
		Flags: 1,
		Group: 71,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.SnoSubtitles, r, &Options{
		Flags: 1,
		Group: 42,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoClosedCaptions, r, &Options{
		Flags: 1,
		Group: 42,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.Unk_19d005e, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_1426000, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+28, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *MovieDefinition) Walk(cb WalkCallback, d ...any) {
	cb.Do("SnoAudioTrack", &t.SnoAudioTrack, d...)
	cb.Do("SnoSubtitles", &t.SnoSubtitles, d...)
	cb.Do("SnoClosedCaptions", &t.SnoClosedCaptions, d...)
	cb.Do("Unk_19d005e", &t.Unk_19d005e, d...)
	cb.Do("Unk_1426000", &t.Unk_1426000, d...)
}

type DoorGizmoData struct {
	// Inherits NamedGizmoData
	// Inherits ActorGizmoData
	// Inherits PolymorphicBase
	DwType                           DT_UINT
	DwPad                            DT_UINT
	FDisableNonFriendlyOperation     DT_INT
	FWalkToCenter                    DT_INT
	FGizmoStartsDisabled             DT_INT
	FUseStringListName               DT_INT
	FForceMinimapIcon                DT_INT
	FlOperationRadius                DT_FLOAT
	Unk_d0b1df5                      DT_FLOAT
	FlGizmoUseTime                   DT_FLOAT
	SnoChannelingEffect              DT_SNO
	Unk_2767229                      DT_INT
	FGizmoShowProgressBar            DT_INT
	Unk_6d9ebe1                      DT_INT
	Unk_5456245                      DT_INT
	Unk_af5815a                      DT_INT
	SnoOnClickEffect                 DT_SNO
	SnoPickedUpEffect                DT_SNO
	SnoDropOnGroundEffect            DT_SNO
	TConditionData                   GizmoConditionData
	SnoPowerOperator                 DT_SNO
	SnoPowerOperate                  DT_SNO
	SnoPowerOperatorActive           DT_SNO
	SnoPowerOperateActive            DT_SNO
	Unk_359810e                      DT_INT
	NCooldown                        DT_UINT
	Unk_9c8478e                      DT_UINT
	Unk_d45ed2d                      DT_INT
	Unk_f6b20b7                      DT_INT
	Unk_54513b8                      DT_INT
	Unk_fd1f378                      DT_UINT
	HGizmoOperateFlavorTextMsgLabel  DT_UINT
	HGizmoOperateDescriptionMsgLabel DT_UINT
	FlGizmoOperateOffset             DT_FLOAT
	Unk_ab58cd3                      DT_ENUM
	Unk_91a3966                      DT_UINT
	HGizmoChannelingLabel            DT_UINT
	Unk_4be4371                      DT_INT
	TLockData                        LockingGizmoData
	FGizmoPlayerOperable             DT_INT
	FPlayerCanCloseDoor              DT_INT
	DwPrefixValue                    DT_INT
	Unk_af999c8                      DT_INT
	FlOpenDuration                   DT_FLOAT
	Unk_6561d12                      DT_FLOAT
	Unk_1d7bcd2                      DT_FLOAT
	Unk_e9859fe                      DT_INT
}

func (t *DoorGizmoData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.FDisableNonFriendlyOperation, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.FWalkToCenter, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.FGizmoStartsDisabled, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.FUseStringListName, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.FForceMinimapIcon, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.FlOperationRadius, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.Unk_d0b1df5, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.FlGizmoUseTime, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.SnoChannelingEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.Unk_2767229, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.FGizmoShowProgressBar, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+60, &t.Unk_6d9ebe1, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.Unk_5456245, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.Unk_af5815a, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.SnoOnClickEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.SnoPickedUpEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.SnoDropOnGroundEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.TConditionData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.SnoPowerOperator, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.SnoPowerOperate, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.SnoPowerOperatorActive, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+100, &t.SnoPowerOperateActive, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+104, &t.Unk_359810e, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+108, &t.NCooldown, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.Unk_9c8478e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+116, &t.Unk_d45ed2d, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.Unk_f6b20b7, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+124, &t.Unk_54513b8, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.Unk_fd1f378, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+132, &t.HGizmoOperateFlavorTextMsgLabel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+136, &t.HGizmoOperateDescriptionMsgLabel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+140, &t.FlGizmoOperateOffset, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+144, &t.Unk_ab58cd3, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+148, &t.Unk_91a3966, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+152, &t.HGizmoChannelingLabel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+156, &t.Unk_4be4371, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+160, &t.TLockData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+196, &t.FGizmoPlayerOperable, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+200, &t.FPlayerCanCloseDoor, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+204, &t.DwPrefixValue, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+208, &t.Unk_af999c8, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+212, &t.FlOpenDuration, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+216, &t.Unk_6561d12, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+220, &t.Unk_1d7bcd2, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+224, &t.Unk_e9859fe, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+232, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *DoorGizmoData) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("FDisableNonFriendlyOperation", &t.FDisableNonFriendlyOperation, d...)
	cb.Do("FWalkToCenter", &t.FWalkToCenter, d...)
	cb.Do("FGizmoStartsDisabled", &t.FGizmoStartsDisabled, d...)
	cb.Do("FUseStringListName", &t.FUseStringListName, d...)
	cb.Do("FForceMinimapIcon", &t.FForceMinimapIcon, d...)
	cb.Do("FlOperationRadius", &t.FlOperationRadius, d...)
	cb.Do("Unk_d0b1df5", &t.Unk_d0b1df5, d...)
	cb.Do("FlGizmoUseTime", &t.FlGizmoUseTime, d...)
	cb.Do("SnoChannelingEffect", &t.SnoChannelingEffect, d...)
	cb.Do("Unk_2767229", &t.Unk_2767229, d...)
	cb.Do("FGizmoShowProgressBar", &t.FGizmoShowProgressBar, d...)
	cb.Do("Unk_6d9ebe1", &t.Unk_6d9ebe1, d...)
	cb.Do("Unk_5456245", &t.Unk_5456245, d...)
	cb.Do("Unk_af5815a", &t.Unk_af5815a, d...)
	cb.Do("SnoOnClickEffect", &t.SnoOnClickEffect, d...)
	cb.Do("SnoPickedUpEffect", &t.SnoPickedUpEffect, d...)
	cb.Do("SnoDropOnGroundEffect", &t.SnoDropOnGroundEffect, d...)
	cb.Do("TConditionData", &t.TConditionData, d...)
	cb.Do("SnoPowerOperator", &t.SnoPowerOperator, d...)
	cb.Do("SnoPowerOperate", &t.SnoPowerOperate, d...)
	cb.Do("SnoPowerOperatorActive", &t.SnoPowerOperatorActive, d...)
	cb.Do("SnoPowerOperateActive", &t.SnoPowerOperateActive, d...)
	cb.Do("Unk_359810e", &t.Unk_359810e, d...)
	cb.Do("NCooldown", &t.NCooldown, d...)
	cb.Do("Unk_9c8478e", &t.Unk_9c8478e, d...)
	cb.Do("Unk_d45ed2d", &t.Unk_d45ed2d, d...)
	cb.Do("Unk_f6b20b7", &t.Unk_f6b20b7, d...)
	cb.Do("Unk_54513b8", &t.Unk_54513b8, d...)
	cb.Do("Unk_fd1f378", &t.Unk_fd1f378, d...)
	cb.Do("HGizmoOperateFlavorTextMsgLabel", &t.HGizmoOperateFlavorTextMsgLabel, d...)
	cb.Do("HGizmoOperateDescriptionMsgLabel", &t.HGizmoOperateDescriptionMsgLabel, d...)
	cb.Do("FlGizmoOperateOffset", &t.FlGizmoOperateOffset, d...)
	cb.Do("Unk_ab58cd3", &t.Unk_ab58cd3, d...)
	cb.Do("Unk_91a3966", &t.Unk_91a3966, d...)
	cb.Do("HGizmoChannelingLabel", &t.HGizmoChannelingLabel, d...)
	cb.Do("Unk_4be4371", &t.Unk_4be4371, d...)
	cb.Do("TLockData", &t.TLockData, d...)
	cb.Do("FGizmoPlayerOperable", &t.FGizmoPlayerOperable, d...)
	cb.Do("FPlayerCanCloseDoor", &t.FPlayerCanCloseDoor, d...)
	cb.Do("DwPrefixValue", &t.DwPrefixValue, d...)
	cb.Do("Unk_af999c8", &t.Unk_af999c8, d...)
	cb.Do("FlOpenDuration", &t.FlOpenDuration, d...)
	cb.Do("Unk_6561d12", &t.Unk_6561d12, d...)
	cb.Do("Unk_1d7bcd2", &t.Unk_1d7bcd2, d...)
	cb.Do("Unk_e9859fe", &t.Unk_e9859fe, d...)
}

type PowerConditionDamageIsOverpower struct {
	// Inherits PowerConditionBase
	// Inherits PolymorphicBase
	DwType   DT_UINT
	BInverse DT_INT
	DwPad    DT_UINT
}

func (t *PowerConditionDamageIsOverpower) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BInverse, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PowerConditionDamageIsOverpower) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("BInverse", &t.BInverse, d...)
	cb.Do("DwPad", &t.DwPad, d...)
}

type BuffExclusiveType_Table struct {
	// Inherits GameBalanceTable
	// Inherits PolymorphicBase
	DwType   DT_UINT
	DwPad    DT_UINT
	TEntries DT_VARIABLEARRAY[*BuffExclusiveType]
}

func (t *BuffExclusiveType_Table) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TEntries, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *BuffExclusiveType_Table) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("TEntries", &t.TEntries, d...)
}

type Type_da21c503 struct {
	ArCompleteLooks DT_VARIABLEARRAY[*Type_6ce32aa3]
}

func (t *Type_da21c503) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.ArCompleteLooks, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_da21c503) Walk(cb WalkCallback, d ...any) {
	cb.Do("ArCompleteLooks", &t.ArCompleteLooks, d...)
}

type SubzoneTypeSubcondition struct {
	// Inherits Subcondition
	// Inherits PolymorphicBase
	DwType   DT_UINT
	BNegate  DT_INT
	DwPad    DT_UINT
	EType    DT_ENUM
	EPvPType DT_ENUM
}

func (t *SubzoneTypeSubcondition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BNegate, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.EType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.EPvPType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *SubzoneTypeSubcondition) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("BNegate", &t.BNegate, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("EType", &t.EType, d...)
	cb.Do("EPvPType", &t.EPvPType, d...)
}

type dmClothPlaneDefMirror struct {
	LocalTransform dmTransformMirror
	Stiffness      DT_FLOAT
	Friction       DT_FLOAT
	BoneIndex      DT_WORD
	Padding        DT_FIXEDARRAY[*DT_WORD]
}

func (t *dmClothPlaneDefMirror) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.LocalTransform, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.Stiffness, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.Friction, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.BoneIndex, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+42, &t.Padding, r, &Options{ArrayLength: 3}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *dmClothPlaneDefMirror) Walk(cb WalkCallback, d ...any) {
	cb.Do("LocalTransform", &t.LocalTransform, d...)
	cb.Do("Stiffness", &t.Stiffness, d...)
	cb.Do("Friction", &t.Friction, d...)
	cb.Do("BoneIndex", &t.BoneIndex, d...)
	cb.Do("Padding", &t.Padding, d...)
}

type QuestFollowerSpawnBehavior struct {
	EFollowerSpawnMethod DT_ENUM
	Unk_d64b2c9          DT_INT
	SnoSummonPower       DT_SNO
	TMarkerHandle        MarkerHandle
	EVisibility          DT_ENUM
	Unk_209d19e          DT_INT
}

func (t *QuestFollowerSpawnBehavior) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.EFollowerSpawnMethod, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.Unk_d64b2c9, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.SnoSummonPower, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.TMarkerHandle, r, &Options{Flags: 513}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.EVisibility, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_209d19e, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+28, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *QuestFollowerSpawnBehavior) Walk(cb WalkCallback, d ...any) {
	cb.Do("EFollowerSpawnMethod", &t.EFollowerSpawnMethod, d...)
	cb.Do("Unk_d64b2c9", &t.Unk_d64b2c9, d...)
	cb.Do("SnoSummonPower", &t.SnoSummonPower, d...)
	cb.Do("TMarkerHandle", &t.TMarkerHandle, d...)
	cb.Do("EVisibility", &t.EVisibility, d...)
	cb.Do("Unk_209d19e", &t.Unk_209d19e, d...)
}

type StringListDefinition struct {
	ArStrings        DT_VARIABLEARRAY[*StringTableEntry]
	PtMapStringTable DT_INT64
}

func (t *StringListDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.ArStrings, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.PtMapStringTable, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *StringListDefinition) Walk(cb WalkCallback, d ...any) {
	cb.Do("ArStrings", &t.ArStrings, d...)
	cb.Do("PtMapStringTable", &t.PtMapStringTable, d...)
}

type QuestTagsEntry struct {
	THeader GBIDHeader
}

func (t *QuestTagsEntry) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+260, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *QuestTagsEntry) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
}

type PlayerSkillRankSubcondition struct {
	// Inherits NumericComparisonSubcondition
	// Inherits Subcondition
	// Inherits PolymorphicBase
	DwType        DT_UINT
	BNegate       DT_INT
	EComparisonOp DT_ENUM
	DwPad         DT_UINT
	SnoSkillPower DT_SNO
	NSkillRank    DT_INT
}

func (t *PlayerSkillRankSubcondition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BNegate, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.EComparisonOp, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.SnoSkillPower, r, &Options{
		Flags: 513,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.NSkillRank, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+40, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PlayerSkillRankSubcondition) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("BNegate", &t.BNegate, d...)
	cb.Do("EComparisonOp", &t.EComparisonOp, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("SnoSkillPower", &t.SnoSkillPower, d...)
	cb.Do("NSkillRank", &t.NSkillRank, d...)
}

type PowerPhaseBranch struct {
	// Inherits PowerPhaseBase
	// Inherits PolymorphicBase
	DwType       DT_UINT
	DwPad        DT_UINT
	TPhaseName   DT_UINT
	ArPhaseJumps DT_POLYMORPHIC_VARIABLEARRAY[*DT_INT64]
	Unk_d0d932b  DT_INT
	Unk_9a8200e  DT_INT
}

func (t *PowerPhaseBranch) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TPhaseName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ArPhaseJumps, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.Unk_d0d932b, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.Unk_9a8200e, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+56, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PowerPhaseBranch) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("TPhaseName", &t.TPhaseName, d...)
	cb.Do("ArPhaseJumps", &t.ArPhaseJumps, d...)
	cb.Do("Unk_d0d932b", &t.Unk_d0d932b, d...)
	cb.Do("Unk_9a8200e", &t.Unk_9a8200e, d...)
}

type EnterWorldPlayer struct {
	WpLocation                    DT_VECTOR3D
	DwPlayerGameAccountId         DT_UINT
	TEnterKnownLookOverrides      DT_OPTIONAL[*EnterKnownLookOverrides]
	TEnterKnownShaderMapOverrides DT_OPTIONAL[*EnterKnownShaderMapOverrides]
}

func (t *EnterWorldPlayer) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.WpLocation, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPlayerGameAccountId, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TEnterKnownLookOverrides, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.TEnterKnownShaderMapOverrides, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+96, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *EnterWorldPlayer) Walk(cb WalkCallback, d ...any) {
	cb.Do("WpLocation", &t.WpLocation, d...)
	cb.Do("DwPlayerGameAccountId", &t.DwPlayerGameAccountId, d...)
	cb.Do("TEnterKnownLookOverrides", &t.TEnterKnownLookOverrides, d...)
	cb.Do("TEnterKnownShaderMapOverrides", &t.TEnterKnownShaderMapOverrides, d...)
}

type MonsterAwarenessInfo struct {
	FlIdleRadius       DT_FLOAT
	FlCombatRadius     DT_FLOAT
	FlWarnOthersRadius DT_FLOAT
	Unk_7d4fa2f        DT_FLOAT
	Unk_4eeb2ba        DT_FLOAT
	Unk_3f45ddd        DT_INT
	Unk_d9ecad5        DT_INT
}

func (t *MonsterAwarenessInfo) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.FlIdleRadius, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.FlCombatRadius, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.FlWarnOthersRadius, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.Unk_7d4fa2f, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_4eeb2ba, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.Unk_3f45ddd, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_d9ecad5, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+28, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *MonsterAwarenessInfo) Walk(cb WalkCallback, d ...any) {
	cb.Do("FlIdleRadius", &t.FlIdleRadius, d...)
	cb.Do("FlCombatRadius", &t.FlCombatRadius, d...)
	cb.Do("FlWarnOthersRadius", &t.FlWarnOthersRadius, d...)
	cb.Do("Unk_7d4fa2f", &t.Unk_7d4fa2f, d...)
	cb.Do("Unk_4eeb2ba", &t.Unk_4eeb2ba, d...)
	cb.Do("Unk_3f45ddd", &t.Unk_3f45ddd, d...)
	cb.Do("Unk_d9ecad5", &t.Unk_d9ecad5, d...)
}

type EffectGroupActorVariant struct {
	SnoActor DT_SNO
	EVariant DT_ENUM
}

func (t *EffectGroupActorVariant) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoActor, r, &Options{
		Flags: 1,
		Group: 1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.EVariant, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *EffectGroupActorVariant) Walk(cb WalkCallback, d ...any) {
	cb.Do("SnoActor", &t.SnoActor, d...)
	cb.Do("EVariant", &t.EVariant, d...)
}

type Type_dbcb04f3 struct {
	Unk_ebf6585 DT_VARIABLEARRAY[*DT_FLOAT]
}

func (t *Type_dbcb04f3) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Unk_ebf6585, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_dbcb04f3) Walk(cb WalkCallback, d ...any) {
	cb.Do("Unk_ebf6585", &t.Unk_ebf6585, d...)
}

type ActorServerData struct {
	SnoScript                       DT_SNO
	FCannotBeTargetedByAI           DT_INT
	Unk_195410b                     DT_INT
	FNotConsideredInMarkersetBounds DT_INT
	FInvulnerable                   DT_INT
	FDisableDamage                  DT_INT
	FCannotDie                      DT_INT
	Unk_9ad1b04                     DT_INT
	FlNoSpawnRadius                 DT_FLOAT
}

func (t *ActorServerData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoScript, r, &Options{
		Flags: 1,
		Group: 35,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.FCannotBeTargetedByAI, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.Unk_195410b, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.FNotConsideredInMarkersetBounds, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.FInvulnerable, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.FDisableDamage, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.FCannotDie, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.Unk_9ad1b04, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.FlNoSpawnRadius, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+36, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ActorServerData) Walk(cb WalkCallback, d ...any) {
	cb.Do("SnoScript", &t.SnoScript, d...)
	cb.Do("FCannotBeTargetedByAI", &t.FCannotBeTargetedByAI, d...)
	cb.Do("Unk_195410b", &t.Unk_195410b, d...)
	cb.Do("FNotConsideredInMarkersetBounds", &t.FNotConsideredInMarkersetBounds, d...)
	cb.Do("FInvulnerable", &t.FInvulnerable, d...)
	cb.Do("FDisableDamage", &t.FDisableDamage, d...)
	cb.Do("FCannotDie", &t.FCannotDie, d...)
	cb.Do("Unk_9ad1b04", &t.Unk_9ad1b04, d...)
	cb.Do("FlNoSpawnRadius", &t.FlNoSpawnRadius, d...)
}

type OnProjectileImpactBuffCallback struct {
	// Inherits BuffCallbackBase
	// Inherits PolymorphicBase
	DwType                DT_UINT
	DwPad                 DT_UINT
	SnoTriggerEffectGroup DT_SNO
	ArConditions          DT_POLYMORPHIC_VARIABLEARRAY[*DT_INT64]
}

func (t *OnProjectileImpactBuffCallback) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoTriggerEffectGroup, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ArConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *OnProjectileImpactBuffCallback) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("SnoTriggerEffectGroup", &t.SnoTriggerEffectGroup, d...)
	cb.Do("ArConditions", &t.ArConditions, d...)
}

type BoneKeysInfo struct {
	PtBoneKeys DT_VARIABLEARRAY[*BoneKeyInfo]
}

func (t *BoneKeysInfo) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.PtBoneKeys, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *BoneKeysInfo) Walk(cb WalkCallback, d ...any) {
	cb.Do("PtBoneKeys", &t.PtBoneKeys, d...)
}

type MapPingMessage struct {
	THeader     RequiredMessageHeader
	Unk_3eecb71 DT_UINT
	IdSWorld    DT_SHARED_SERVER_DATA_ID
	WpLocation  DT_VECTOR3D
}

func (t *MapPingMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_3eecb71, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.IdSWorld, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.WpLocation, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+40, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *MapPingMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("Unk_3eecb71", &t.Unk_3eecb71, d...)
	cb.Do("IdSWorld", &t.IdSWorld, d...)
	cb.Do("WpLocation", &t.WpLocation, d...)
}

type HardpointOffset struct {
	THardpointLink  HardpointLink
	VecOffset       DT_VECTOR3D
	QRotationOffset bcQuat
}

func (t *HardpointOffset) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THardpointLink, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.VecOffset, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.QRotationOffset, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+36, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *HardpointOffset) Walk(cb WalkCallback, d ...any) {
	cb.Do("THardpointLink", &t.THardpointLink, d...)
	cb.Do("VecOffset", &t.VecOffset, d...)
	cb.Do("QRotationOffset", &t.QRotationOffset, d...)
}

type PortToPlayerMessage struct {
	THeader     RequiredMessageHeader
	Unk_393b384 DT_UINT
	Unk_74eafc7 DT_UINT
}

func (t *PortToPlayerMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_393b384, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.Unk_74eafc7, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PortToPlayerMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("Unk_393b384", &t.Unk_393b384, d...)
	cb.Do("Unk_74eafc7", &t.Unk_74eafc7, d...)
}

type EffectGroupPositionYKeyData struct {
	// Inherits EffectGroupKeyData
	// Inherits PolymorphicBase
	DwType     DT_UINT
	DwPad      DT_UINT
	ArKeyItems DT_VARIABLEARRAY[*EffectGroupKey]
}

func (t *EffectGroupPositionYKeyData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.ArKeyItems, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *EffectGroupPositionYKeyData) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("ArKeyItems", &t.ArKeyItems, d...)
}

type Type_dc960527 struct {
	// Inherits BuffCallbackBase
	// Inherits PolymorphicBase
	DwType                DT_UINT
	DwPad                 DT_UINT
	SnoTriggerEffectGroup DT_SNO
	ArConditions          DT_POLYMORPHIC_VARIABLEARRAY[*DT_INT64]
}

func (t *Type_dc960527) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoTriggerEffectGroup, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ArConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_dc960527) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("SnoTriggerEffectGroup", &t.SnoTriggerEffectGroup, d...)
	cb.Do("ArConditions", &t.ArConditions, d...)
}

type IntensitySubParam struct {
	SzName      DT_UINT
	Unk_465327d InterpolationPath_float
}

func (t *IntensitySubParam) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SzName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.Unk_465327d, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+64, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *IntensitySubParam) Walk(cb WalkCallback, d ...any) {
	cb.Do("SzName", &t.SzName, d...)
	cb.Do("Unk_465327d", &t.Unk_465327d, d...)
}

type ParagonGlyphAffixAttribute struct {
	EAttribute DT_ENUM
	NParam     DT_INT
}

func (t *ParagonGlyphAffixAttribute) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.EAttribute, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.NParam, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ParagonGlyphAffixAttribute) Walk(cb WalkCallback, d ...any) {
	cb.Do("EAttribute", &t.EAttribute, d...)
	cb.Do("NParam", &t.NParam, d...)
}

type PlayerLoadingScreens struct {
	SnoLoopEffect      DT_SNO
	SnoLoopingWorld    DT_SNO
	SzCameraMarkerName DT_CHARARRAY
	SzActorMarkerName  DT_UINT
}

func (t *PlayerLoadingScreens) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoLoopEffect, r, &Options{
		Flags: 513,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.SnoLoopingWorld, r, &Options{
		Flags: 513,
		Group: 48,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.SzCameraMarkerName, r, &Options{
		ArrayLength: 128,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+136, &t.SzActorMarkerName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+140, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PlayerLoadingScreens) Walk(cb WalkCallback, d ...any) {
	cb.Do("SnoLoopEffect", &t.SnoLoopEffect, d...)
	cb.Do("SnoLoopingWorld", &t.SnoLoopingWorld, d...)
	cb.Do("SzCameraMarkerName", &t.SzCameraMarkerName, d...)
	cb.Do("SzActorMarkerName", &t.SzActorMarkerName, d...)
}

type TriggerEventObjectMoveToObject struct {
	// Inherits TriggerEventRangedDuration
	// Inherits TriggerEvent
	// Inherits PolymorphicBase
	DwType                     DT_UINT
	TConditions                TriggerConditions
	FGenerated                 DT_INT
	Unk_6cba752                DT_INT
	DwParentActorID            DT_UINT
	TDuration                  DT_FLOAT
	DwTriggerFlags             DT_UINT
	DwTriggerFlagsEx           DT_UINT
	TCleanup                   TriggerCleanup
	Unk_49e9257                DT_INT
	Unk_5490979                DT_INT
	DwPad                      DT_UINT
	DwObjectID                 DT_UINT
	Unk_17909b9                DT_INT
	THardpointLinkTarget       HardpointLink
	DwTargetID                 DT_UINT
	EOrientationMode           DT_ENUM
	ELookAtTargetType          DT_ENUM
	Unk_6101673                DT_UINT
	THardpointLinkLookAtTarget HardpointLink
	DwLookAtTargetID           DT_UINT
	EBlendEasing               DT_ENUM
	EMoveRate                  DT_ENUM
	EDynamicMovementSpeed      DT_ENUM
	FUseDynamicMovement        DT_INT
	Unk_23237e1                DT_INT
	Unk_f1b6afc                DT_FLOAT
}

func (t *TriggerEventObjectMoveToObject) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.FGenerated, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_6cba752, r, &Options{Flags: 16}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.DwParentActorID, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.TDuration, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.DwTriggerFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.DwTriggerFlagsEx, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.TCleanup, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+116, &t.Unk_49e9257, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.Unk_5490979, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+124, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.DwObjectID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+132, &t.Unk_17909b9, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+136, &t.THardpointLinkTarget, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+144, &t.DwTargetID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+148, &t.EOrientationMode, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+152, &t.ELookAtTargetType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+156, &t.Unk_6101673, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+160, &t.THardpointLinkLookAtTarget, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+168, &t.DwLookAtTargetID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+172, &t.EBlendEasing, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+176, &t.EMoveRate, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+180, &t.EDynamicMovementSpeed, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+184, &t.FUseDynamicMovement, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+188, &t.Unk_23237e1, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+192, &t.Unk_f1b6afc, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+200, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TriggerEventObjectMoveToObject) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("TConditions", &t.TConditions, d...)
	cb.Do("FGenerated", &t.FGenerated, d...)
	cb.Do("Unk_6cba752", &t.Unk_6cba752, d...)
	cb.Do("DwParentActorID", &t.DwParentActorID, d...)
	cb.Do("TDuration", &t.TDuration, d...)
	cb.Do("DwTriggerFlags", &t.DwTriggerFlags, d...)
	cb.Do("DwTriggerFlagsEx", &t.DwTriggerFlagsEx, d...)
	cb.Do("TCleanup", &t.TCleanup, d...)
	cb.Do("Unk_49e9257", &t.Unk_49e9257, d...)
	cb.Do("Unk_5490979", &t.Unk_5490979, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("DwObjectID", &t.DwObjectID, d...)
	cb.Do("Unk_17909b9", &t.Unk_17909b9, d...)
	cb.Do("THardpointLinkTarget", &t.THardpointLinkTarget, d...)
	cb.Do("DwTargetID", &t.DwTargetID, d...)
	cb.Do("EOrientationMode", &t.EOrientationMode, d...)
	cb.Do("ELookAtTargetType", &t.ELookAtTargetType, d...)
	cb.Do("Unk_6101673", &t.Unk_6101673, d...)
	cb.Do("THardpointLinkLookAtTarget", &t.THardpointLinkLookAtTarget, d...)
	cb.Do("DwLookAtTargetID", &t.DwLookAtTargetID, d...)
	cb.Do("EBlendEasing", &t.EBlendEasing, d...)
	cb.Do("EMoveRate", &t.EMoveRate, d...)
	cb.Do("EDynamicMovementSpeed", &t.EDynamicMovementSpeed, d...)
	cb.Do("FUseDynamicMovement", &t.FUseDynamicMovement, d...)
	cb.Do("Unk_23237e1", &t.Unk_23237e1, d...)
	cb.Do("Unk_f1b6afc", &t.Unk_f1b6afc, d...)
}

type TraversalSurfaceOptions struct {
	ArSurfaces DT_VARIABLEARRAY[*DT_SNO]
}

func (t *TraversalSurfaceOptions) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.ArSurfaces, r, &Options{
		Flags: 1,
		Group: 43,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TraversalSurfaceOptions) Walk(cb WalkCallback, d ...any) {
	cb.Do("ArSurfaces", &t.ArSurfaces, d...)
}

type SNODataMessage struct {
	THeader RequiredMessageHeader
	SnoData DT_SNO
}

func (t *SNODataMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+20, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *SNODataMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("SnoData", &t.SnoData, d...)
}

type SlopeBone struct {
	TBoneName AppBone
	APitchMin DT_FLOAT
	APitchMax DT_FLOAT
}

func (t *SlopeBone) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.TBoneName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.APitchMin, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.APitchMax, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+12, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *SlopeBone) Walk(cb WalkCallback, d ...any) {
	cb.Do("TBoneName", &t.TBoneName, d...)
	cb.Do("APitchMin", &t.APitchMin, d...)
	cb.Do("APitchMax", &t.APitchMax, d...)
}

type KeyedDungeonTierEntry struct {
	NMonsterLevel      DT_INT
	Unk_a089b1c        DT_FLOAT
	Unk_171d567        DT_FLOAT
	FlHPScalar         DT_FLOAT
	FlDamageScalar     DT_FLOAT
	Unk_435a301        DT_INT
	NMajorAffixCount   DT_INT
	Unk_2db9e3b        DT_INT
	Unk_838537c        DT_INT
	Unk_d9508bd        DT_INT
	NResurrectionLimit DT_INT
	NGlyphExperience   DT_INT
	NXPReward          DT_INT
	NGoldReward        DT_INT
}

func (t *KeyedDungeonTierEntry) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.NMonsterLevel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.Unk_a089b1c, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.Unk_171d567, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.FlHPScalar, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.FlDamageScalar, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.Unk_435a301, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.NMajorAffixCount, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.Unk_2db9e3b, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.Unk_838537c, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.Unk_d9508bd, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.NResurrectionLimit, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.NGlyphExperience, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.NXPReward, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.NGoldReward, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+56, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *KeyedDungeonTierEntry) Walk(cb WalkCallback, d ...any) {
	cb.Do("NMonsterLevel", &t.NMonsterLevel, d...)
	cb.Do("Unk_a089b1c", &t.Unk_a089b1c, d...)
	cb.Do("Unk_171d567", &t.Unk_171d567, d...)
	cb.Do("FlHPScalar", &t.FlHPScalar, d...)
	cb.Do("FlDamageScalar", &t.FlDamageScalar, d...)
	cb.Do("Unk_435a301", &t.Unk_435a301, d...)
	cb.Do("NMajorAffixCount", &t.NMajorAffixCount, d...)
	cb.Do("Unk_2db9e3b", &t.Unk_2db9e3b, d...)
	cb.Do("Unk_838537c", &t.Unk_838537c, d...)
	cb.Do("Unk_d9508bd", &t.Unk_d9508bd, d...)
	cb.Do("NResurrectionLimit", &t.NResurrectionLimit, d...)
	cb.Do("NGlyphExperience", &t.NGlyphExperience, d...)
	cb.Do("NXPReward", &t.NXPReward, d...)
	cb.Do("NGoldReward", &t.NGoldReward, d...)
}

type UIPieChartStyle struct {
	// Inherits UIWindowStyle
	// Inherits UIControlStyle
	// Inherits PolymorphicBase
	DwType                    DT_UINT
	DwPad                     DT_UINT
	HParentStyle              UIControlHandle
	Unk_441f783               DT_INT64
	M_eHasModifiedPowerTagMap DT_TAGMAP[*DT_ENUM]
	TConsoleInput             UIControlConsoleInput
	Unk_b4f614c               DT_TAGMAP[*DT_ENUM]
}

func (t *UIPieChartStyle) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.HParentStyle, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_441f783, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.M_eHasModifiedPowerTagMap, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.TConsoleInput, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.Unk_b4f614c, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+80, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *UIPieChartStyle) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("HParentStyle", &t.HParentStyle, d...)
	cb.Do("Unk_441f783", &t.Unk_441f783, d...)
	cb.Do("M_eHasModifiedPowerTagMap", &t.M_eHasModifiedPowerTagMap, d...)
	cb.Do("TConsoleInput", &t.TConsoleInput, d...)
	cb.Do("Unk_b4f614c", &t.Unk_b4f614c, d...)
}

type GameErrorData struct {
	EError DT_ENUM
	DwVal  DT_UINT
}

func (t *GameErrorData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.EError, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.DwVal, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *GameErrorData) Walk(cb WalkCallback, d ...any) {
	cb.Do("EError", &t.EError, d...)
	cb.Do("DwVal", &t.DwVal, d...)
}

type PVPObeliskGizmoData struct {
	// Inherits NamedGizmoData
	// Inherits ActorGizmoData
	// Inherits PolymorphicBase
	DwType                           DT_UINT
	DwPad                            DT_UINT
	FDisableNonFriendlyOperation     DT_INT
	FWalkToCenter                    DT_INT
	FGizmoStartsDisabled             DT_INT
	FUseStringListName               DT_INT
	FForceMinimapIcon                DT_INT
	FlOperationRadius                DT_FLOAT
	Unk_d0b1df5                      DT_FLOAT
	FlGizmoUseTime                   DT_FLOAT
	SnoChannelingEffect              DT_SNO
	Unk_2767229                      DT_INT
	FGizmoShowProgressBar            DT_INT
	Unk_6d9ebe1                      DT_INT
	Unk_5456245                      DT_INT
	Unk_af5815a                      DT_INT
	SnoOnClickEffect                 DT_SNO
	SnoPickedUpEffect                DT_SNO
	SnoDropOnGroundEffect            DT_SNO
	TConditionData                   GizmoConditionData
	SnoPowerOperator                 DT_SNO
	SnoPowerOperate                  DT_SNO
	SnoPowerOperatorActive           DT_SNO
	SnoPowerOperateActive            DT_SNO
	Unk_359810e                      DT_INT
	NCooldown                        DT_UINT
	Unk_9c8478e                      DT_UINT
	Unk_d45ed2d                      DT_INT
	Unk_f6b20b7                      DT_INT
	Unk_54513b8                      DT_INT
	Unk_fd1f378                      DT_UINT
	HGizmoOperateFlavorTextMsgLabel  DT_UINT
	HGizmoOperateDescriptionMsgLabel DT_UINT
	FlGizmoOperateOffset             DT_FLOAT
	Unk_ab58cd3                      DT_ENUM
	Unk_91a3966                      DT_UINT
	HGizmoChannelingLabel            DT_UINT
	Unk_4be4371                      DT_INT
	SnoActivationPower               DT_SNO
	Unk_6c381bd                      DT_INT
	SnoPlayerParticipatingEffect     DT_FIXEDARRAY[*DT_SNO]
	SnoRewardInAnim                  DT_SNO
	SnoShrineOnCooldown              DT_SNO
}

func (t *PVPObeliskGizmoData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.FDisableNonFriendlyOperation, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.FWalkToCenter, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.FGizmoStartsDisabled, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.FUseStringListName, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.FForceMinimapIcon, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.FlOperationRadius, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.Unk_d0b1df5, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.FlGizmoUseTime, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.SnoChannelingEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.Unk_2767229, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.FGizmoShowProgressBar, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+60, &t.Unk_6d9ebe1, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.Unk_5456245, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.Unk_af5815a, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.SnoOnClickEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.SnoPickedUpEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.SnoDropOnGroundEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.TConditionData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.SnoPowerOperator, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.SnoPowerOperate, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.SnoPowerOperatorActive, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+100, &t.SnoPowerOperateActive, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+104, &t.Unk_359810e, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+108, &t.NCooldown, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.Unk_9c8478e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+116, &t.Unk_d45ed2d, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.Unk_f6b20b7, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+124, &t.Unk_54513b8, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.Unk_fd1f378, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+132, &t.HGizmoOperateFlavorTextMsgLabel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+136, &t.HGizmoOperateDescriptionMsgLabel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+140, &t.FlGizmoOperateOffset, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+144, &t.Unk_ab58cd3, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+148, &t.Unk_91a3966, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+152, &t.HGizmoChannelingLabel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+156, &t.Unk_4be4371, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+160, &t.SnoActivationPower, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+164, &t.Unk_6c381bd, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+168, &t.SnoPlayerParticipatingEffect, r, &Options{
		ArrayLength: 4,
		Flags:       1,
		Group:       14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+184, &t.SnoRewardInAnim, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+188, &t.SnoShrineOnCooldown, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+192, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PVPObeliskGizmoData) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("FDisableNonFriendlyOperation", &t.FDisableNonFriendlyOperation, d...)
	cb.Do("FWalkToCenter", &t.FWalkToCenter, d...)
	cb.Do("FGizmoStartsDisabled", &t.FGizmoStartsDisabled, d...)
	cb.Do("FUseStringListName", &t.FUseStringListName, d...)
	cb.Do("FForceMinimapIcon", &t.FForceMinimapIcon, d...)
	cb.Do("FlOperationRadius", &t.FlOperationRadius, d...)
	cb.Do("Unk_d0b1df5", &t.Unk_d0b1df5, d...)
	cb.Do("FlGizmoUseTime", &t.FlGizmoUseTime, d...)
	cb.Do("SnoChannelingEffect", &t.SnoChannelingEffect, d...)
	cb.Do("Unk_2767229", &t.Unk_2767229, d...)
	cb.Do("FGizmoShowProgressBar", &t.FGizmoShowProgressBar, d...)
	cb.Do("Unk_6d9ebe1", &t.Unk_6d9ebe1, d...)
	cb.Do("Unk_5456245", &t.Unk_5456245, d...)
	cb.Do("Unk_af5815a", &t.Unk_af5815a, d...)
	cb.Do("SnoOnClickEffect", &t.SnoOnClickEffect, d...)
	cb.Do("SnoPickedUpEffect", &t.SnoPickedUpEffect, d...)
	cb.Do("SnoDropOnGroundEffect", &t.SnoDropOnGroundEffect, d...)
	cb.Do("TConditionData", &t.TConditionData, d...)
	cb.Do("SnoPowerOperator", &t.SnoPowerOperator, d...)
	cb.Do("SnoPowerOperate", &t.SnoPowerOperate, d...)
	cb.Do("SnoPowerOperatorActive", &t.SnoPowerOperatorActive, d...)
	cb.Do("SnoPowerOperateActive", &t.SnoPowerOperateActive, d...)
	cb.Do("Unk_359810e", &t.Unk_359810e, d...)
	cb.Do("NCooldown", &t.NCooldown, d...)
	cb.Do("Unk_9c8478e", &t.Unk_9c8478e, d...)
	cb.Do("Unk_d45ed2d", &t.Unk_d45ed2d, d...)
	cb.Do("Unk_f6b20b7", &t.Unk_f6b20b7, d...)
	cb.Do("Unk_54513b8", &t.Unk_54513b8, d...)
	cb.Do("Unk_fd1f378", &t.Unk_fd1f378, d...)
	cb.Do("HGizmoOperateFlavorTextMsgLabel", &t.HGizmoOperateFlavorTextMsgLabel, d...)
	cb.Do("HGizmoOperateDescriptionMsgLabel", &t.HGizmoOperateDescriptionMsgLabel, d...)
	cb.Do("FlGizmoOperateOffset", &t.FlGizmoOperateOffset, d...)
	cb.Do("Unk_ab58cd3", &t.Unk_ab58cd3, d...)
	cb.Do("Unk_91a3966", &t.Unk_91a3966, d...)
	cb.Do("HGizmoChannelingLabel", &t.HGizmoChannelingLabel, d...)
	cb.Do("Unk_4be4371", &t.Unk_4be4371, d...)
	cb.Do("SnoActivationPower", &t.SnoActivationPower, d...)
	cb.Do("Unk_6c381bd", &t.Unk_6c381bd, d...)
	cb.Do("SnoPlayerParticipatingEffect", &t.SnoPlayerParticipatingEffect, d...)
	cb.Do("SnoRewardInAnim", &t.SnoRewardInAnim, d...)
	cb.Do("SnoShrineOnCooldown", &t.SnoShrineOnCooldown, d...)
}

type DesignerWorldFeatureFlags struct {
	THeader GBIDHeader
}

func (t *DesignerWorldFeatureFlags) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+260, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *DesignerWorldFeatureFlags) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
}

type ScrollbarElementImages struct {
	HStateImages DT_FIXEDARRAY[*DT_UINT]
}

func (t *ScrollbarElementImages) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.HStateImages, r, &Options{
		ArrayLength: 3,
		Flags:       1,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+12, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ScrollbarElementImages) Walk(cb WalkCallback, d ...any) {
	cb.Do("HStateImages", &t.HStateImages, d...)
}

type AudioContextDefinition struct {
	SnoMusic     DT_SNO
	SnoAmbient   DT_SNO
	SnoReverb    DT_SNO
	Unk_2d0db3d  DT_INT
	Unk_e197f62  DT_INT
	Unk_d110c10  Type_fa97e5b9
	ArRainSounds DT_VARIABLEARRAY[*RainSoundSurfaceSet]
}

func (t *AudioContextDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.SnoMusic, r, &Options{
		Flags: 1,
		Group: 62,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.SnoAmbient, r, &Options{
		Flags: 1,
		Group: 5,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoReverb, r, &Options{
		Flags: 1,
		Group: 60,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.Unk_2d0db3d, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_e197f62, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.Unk_d110c10, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.ArRainSounds, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+64, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *AudioContextDefinition) Walk(cb WalkCallback, d ...any) {
	cb.Do("SnoMusic", &t.SnoMusic, d...)
	cb.Do("SnoAmbient", &t.SnoAmbient, d...)
	cb.Do("SnoReverb", &t.SnoReverb, d...)
	cb.Do("Unk_2d0db3d", &t.Unk_2d0db3d, d...)
	cb.Do("Unk_e197f62", &t.Unk_e197f62, d...)
	cb.Do("Unk_d110c10", &t.Unk_d110c10, d...)
	cb.Do("ArRainSounds", &t.ArRainSounds, d...)
}

type ScriptEventDescription struct {
	EEventType          DT_ENUM
	SzDescription       DT_INT64
	SzGrammar           DT_INT64
	ArParamTypes        DT_FIXEDARRAY[*DT_ENUM]
	SzParamNames        DT_FIXEDARRAY[*DT_INT64]
	SzFuncParamNames    DT_FIXEDARRAY[*DT_INT64]
	SzParamDescriptions DT_FIXEDARRAY[*DT_INT64]
	Unk_aab17b3         DT_FIXEDARRAY[*DT_ENUM]
	Unk_7ef4b8b         DT_FIXEDARRAY[*DT_ENUM]
	Unk_336d153         DT_FIXEDARRAY[*DT_ENUM]
	Unk_41cdd20         DT_FIXEDARRAY[*DT_ENUM]
	DwFlags             DT_UINT
	Unk_165bc75         DT_INT64
}

func (t *ScriptEventDescription) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.EEventType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.SzDescription, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SzGrammar, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ArParamTypes, r, &Options{
		ArrayLength: 4,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.SzParamNames, r, &Options{
		ArrayLength: 4,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.SzFuncParamNames, r, &Options{
		ArrayLength: 4,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+104, &t.SzParamDescriptions, r, &Options{
		ArrayLength: 4,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+136, &t.Unk_aab17b3, r, &Options{
		ArrayLength: 4,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+152, &t.Unk_7ef4b8b, r, &Options{
		ArrayLength: 4,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+168, &t.Unk_336d153, r, &Options{
		ArrayLength: 4,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+184, &t.Unk_41cdd20, r, &Options{
		ArrayLength: 4,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+200, &t.DwFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+208, &t.Unk_165bc75, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+216, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ScriptEventDescription) Walk(cb WalkCallback, d ...any) {
	cb.Do("EEventType", &t.EEventType, d...)
	cb.Do("SzDescription", &t.SzDescription, d...)
	cb.Do("SzGrammar", &t.SzGrammar, d...)
	cb.Do("ArParamTypes", &t.ArParamTypes, d...)
	cb.Do("SzParamNames", &t.SzParamNames, d...)
	cb.Do("SzFuncParamNames", &t.SzFuncParamNames, d...)
	cb.Do("SzParamDescriptions", &t.SzParamDescriptions, d...)
	cb.Do("Unk_aab17b3", &t.Unk_aab17b3, d...)
	cb.Do("Unk_7ef4b8b", &t.Unk_7ef4b8b, d...)
	cb.Do("Unk_336d153", &t.Unk_336d153, d...)
	cb.Do("Unk_41cdd20", &t.Unk_41cdd20, d...)
	cb.Do("DwFlags", &t.DwFlags, d...)
	cb.Do("Unk_165bc75", &t.Unk_165bc75, d...)
}

type ItemSalvageLevel struct {
	SnoSalvageTreasureClassNormal    DT_SNO
	SnoSalvageTreasureClassMagic     DT_SNO
	SnoSalvageTreasureClassRare      DT_SNO
	SnoSalvageTreasureClassLegendary DT_SNO
	SnoSalvageTreasureClassUnique    DT_SNO
	SnoSalvageTreasureClassSetItem   DT_SNO
}

func (t *ItemSalvageLevel) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoSalvageTreasureClassNormal, r, &Options{
		Flags: 1,
		Group: 52,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.SnoSalvageTreasureClassMagic, r, &Options{
		Flags: 1,
		Group: 52,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.SnoSalvageTreasureClassRare, r, &Options{
		Flags: 1,
		Group: 52,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.SnoSalvageTreasureClassLegendary, r, &Options{
		Flags: 1,
		Group: 52,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoSalvageTreasureClassUnique, r, &Options{
		Flags: 1,
		Group: 52,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.SnoSalvageTreasureClassSetItem, r, &Options{
		Flags: 1,
		Group: 52,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ItemSalvageLevel) Walk(cb WalkCallback, d ...any) {
	cb.Do("SnoSalvageTreasureClassNormal", &t.SnoSalvageTreasureClassNormal, d...)
	cb.Do("SnoSalvageTreasureClassMagic", &t.SnoSalvageTreasureClassMagic, d...)
	cb.Do("SnoSalvageTreasureClassRare", &t.SnoSalvageTreasureClassRare, d...)
	cb.Do("SnoSalvageTreasureClassLegendary", &t.SnoSalvageTreasureClassLegendary, d...)
	cb.Do("SnoSalvageTreasureClassUnique", &t.SnoSalvageTreasureClassUnique, d...)
	cb.Do("SnoSalvageTreasureClassSetItem", &t.SnoSalvageTreasureClassSetItem, d...)
}

type GlobalMarkerActorData struct {
	// Inherits PolymorphicBase
	DwType DT_UINT
	DwPad  DT_UINT
}

func (t *GlobalMarkerActorData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *GlobalMarkerActorData) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
}

type ConditionWrapper struct {
	SnoCondition      DT_SNO
	PtInlineCondition DT_POLYMORPHIC_VARIABLEARRAY[*Subcondition]
}

func (t *ConditionWrapper) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoCondition, r, &Options{
		Flags: 1,
		Group: 51,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.PtInlineCondition, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ConditionWrapper) Walk(cb WalkCallback, d ...any) {
	cb.Do("SnoCondition", &t.SnoCondition, d...)
	cb.Do("PtInlineCondition", &t.PtInlineCondition, d...)
}

type RogueSpecializationGlobalData struct {
	SnoSpecPower       DT_SNO
	SnoUnlockQuest     DT_SNO
	NUnlockLevel       DT_INT
	HUnlockDescription DT_UINT
}

func (t *RogueSpecializationGlobalData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoSpecPower, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.SnoUnlockQuest, r, &Options{
		Flags: 1,
		Group: 31,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.NUnlockLevel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.HUnlockDescription, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *RogueSpecializationGlobalData) Walk(cb WalkCallback, d ...any) {
	cb.Do("SnoSpecPower", &t.SnoSpecPower, d...)
	cb.Do("SnoUnlockQuest", &t.SnoUnlockQuest, d...)
	cb.Do("NUnlockLevel", &t.NUnlockLevel, d...)
	cb.Do("HUnlockDescription", &t.HUnlockDescription, d...)
}

type ReputationIncrementMessage struct {
	THeader       RequiredMessageHeader
	SnoReputation DT_SNO
	DwAmount      DT_UINT
}

func (t *ReputationIncrementMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoReputation, r, &Options{
		Flags: 1,
		Group: 105,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwAmount, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ReputationIncrementMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("SnoReputation", &t.SnoReputation, d...)
	cb.Do("DwAmount", &t.DwAmount, d...)
}

type WorldSyncedData struct {
	SnoWeatherOverride            DT_SNO
	FlWeatherIntensityOverride    DT_FLOAT
	DwWeatherIntensityOverrideEnd DT_UINT
	ArRevealedPortalInfo          DT_FIXEDARRAY[*WorldRevealedPortalInfo]
	ArRevealedLevelAreaSNOs       DT_FIXEDARRAY[*DT_SNO]
	ArLevelAreaSNOs               DT_FIXEDARRAY[*DT_SNO]
	SnoMusicOverride              DT_SNO
	Unk_f4f9d6f                   DT_INT
	Unk_55eead1                   DT_FLOAT
}

func (t *WorldSyncedData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoWeatherOverride, r, &Options{
		Flags: 1,
		Group: 47,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.FlWeatherIntensityOverride, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwWeatherIntensityOverrideEnd, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.ArRevealedPortalInfo, r, &Options{
		ArrayLength: 32,
		Flags:       8,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1296, &t.ArRevealedLevelAreaSNOs, r, &Options{
		ArrayLength: 32,
		Flags:       9,
		Group:       22,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1428, &t.ArLevelAreaSNOs, r, &Options{
		ArrayLength: 32,
		Flags:       9,
		Group:       22,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1560, &t.SnoMusicOverride, r, &Options{
		Flags: 1,
		Group: 62,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1564, &t.Unk_f4f9d6f, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1568, &t.Unk_55eead1, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+1572, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *WorldSyncedData) Walk(cb WalkCallback, d ...any) {
	cb.Do("SnoWeatherOverride", &t.SnoWeatherOverride, d...)
	cb.Do("FlWeatherIntensityOverride", &t.FlWeatherIntensityOverride, d...)
	cb.Do("DwWeatherIntensityOverrideEnd", &t.DwWeatherIntensityOverrideEnd, d...)
	cb.Do("ArRevealedPortalInfo", &t.ArRevealedPortalInfo, d...)
	cb.Do("ArRevealedLevelAreaSNOs", &t.ArRevealedLevelAreaSNOs, d...)
	cb.Do("ArLevelAreaSNOs", &t.ArLevelAreaSNOs, d...)
	cb.Do("SnoMusicOverride", &t.SnoMusicOverride, d...)
	cb.Do("Unk_f4f9d6f", &t.Unk_f4f9d6f, d...)
	cb.Do("Unk_55eead1", &t.Unk_55eead1, d...)
}

type Subcondition struct {
	// Inherits PolymorphicBase
	DwType  DT_UINT
	BNegate DT_INT
	DwPad   DT_UINT
}

func (t *Subcondition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BNegate, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Subcondition) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("BNegate", &t.BNegate, d...)
	cb.Do("DwPad", &t.DwPad, d...)
}

type Type_df8f2b75 struct {
	Unk_746f6e7            DT_FLOAT
	FlMaxDeviation         DT_FLOAT
	Unk_1f66e44            DT_INT
	Unk_86e9b87            DT_FLOAT
	EGeometryImportance    DT_ENUM
	EGroupImportance       DT_ENUM
	EShadingImportance     DT_ENUM
	ETextureImportance     DT_ENUM
	ESkinningImportance    DT_ENUM
	EMaterialImportance    DT_ENUM
	EVertexColorImportance DT_ENUM
	Unk_3c55dd8            DT_ENUM
}

func (t *Type_df8f2b75) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Unk_746f6e7, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.FlMaxDeviation, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.Unk_1f66e44, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.Unk_86e9b87, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.EGeometryImportance, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.EGroupImportance, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.EShadingImportance, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.ETextureImportance, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.ESkinningImportance, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.EMaterialImportance, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.EVertexColorImportance, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.Unk_3c55dd8, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_df8f2b75) Walk(cb WalkCallback, d ...any) {
	cb.Do("Unk_746f6e7", &t.Unk_746f6e7, d...)
	cb.Do("FlMaxDeviation", &t.FlMaxDeviation, d...)
	cb.Do("Unk_1f66e44", &t.Unk_1f66e44, d...)
	cb.Do("Unk_86e9b87", &t.Unk_86e9b87, d...)
	cb.Do("EGeometryImportance", &t.EGeometryImportance, d...)
	cb.Do("EGroupImportance", &t.EGroupImportance, d...)
	cb.Do("EShadingImportance", &t.EShadingImportance, d...)
	cb.Do("ETextureImportance", &t.ETextureImportance, d...)
	cb.Do("ESkinningImportance", &t.ESkinningImportance, d...)
	cb.Do("EMaterialImportance", &t.EMaterialImportance, d...)
	cb.Do("EVertexColorImportance", &t.EVertexColorImportance, d...)
	cb.Do("Unk_3c55dd8", &t.Unk_3c55dd8, d...)
}

type Type_dff70e83 struct {
	Unk_bd0bed5 DT_FIXEDARRAY[*DT_SNO]
}

func (t *Type_dff70e83) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Unk_bd0bed5, r, &Options{
		ArrayLength: 3,
		Flags:       1,
		Group:       73,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+12, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_dff70e83) Walk(cb WalkCallback, d ...any) {
	cb.Do("Unk_bd0bed5", &t.Unk_bd0bed5, d...)
}

type BuffSubcondition struct {
	// Inherits Subcondition
	// Inherits PolymorphicBase
	DwType           DT_UINT
	BNegate          DT_INT
	DwPad            DT_UINT
	SnoBuffPower     DT_SNO
	SzBuffDataID     DT_UINT
	EActorToEvaluate DT_ENUM
}

func (t *BuffSubcondition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BNegate, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SnoBuffPower, r, &Options{
		Flags: 513,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.SzBuffDataID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.EActorToEvaluate, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+40, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *BuffSubcondition) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("BNegate", &t.BNegate, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("SnoBuffPower", &t.SnoBuffPower, d...)
	cb.Do("SzBuffDataID", &t.SzBuffDataID, d...)
	cb.Do("EActorToEvaluate", &t.EActorToEvaluate, d...)
}

type AnimContactFrame struct {
	NFrameNumber DT_INT
	VLocalOffset DT_VECTOR3D
}

func (t *AnimContactFrame) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.NFrameNumber, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.VLocalOffset, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *AnimContactFrame) Walk(cb WalkCallback, d ...any) {
	cb.Do("NFrameNumber", &t.NFrameNumber, d...)
	cb.Do("VLocalOffset", &t.VLocalOffset, d...)
}

type EmitterDataBase struct {
	// Inherits PolymorphicBase
	DwType DT_UINT
	DwPad  DT_UINT
}

func (t *EmitterDataBase) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *EmitterDataBase) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
}

type ComplexEffectAddMessage struct {
	THeader           RequiredMessageHeader
	IdSComplexEffect  DT_ENUM
	EType             DT_ENUM
	SnoEffectGroup    DT_SNO
	AnnSource         DT_ACD_NETWORK_NAME
	AnnDest           DT_ACD_NETWORK_NAME
	AnnOrigin         DT_ACD_NETWORK_NAME
	DwParam1          DT_UINT
	DwParam2          DT_UINT
	BIgnoreOwnerAlpha DT_UINT
}

func (t *ComplexEffectAddMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.IdSComplexEffect, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.EType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SnoEffectGroup, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.AnnSource, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.AnnDest, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.AnnOrigin, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.DwParam1, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.DwParam2, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+60, &t.BIgnoreOwnerAlpha, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+64, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ComplexEffectAddMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("IdSComplexEffect", &t.IdSComplexEffect, d...)
	cb.Do("EType", &t.EType, d...)
	cb.Do("SnoEffectGroup", &t.SnoEffectGroup, d...)
	cb.Do("AnnSource", &t.AnnSource, d...)
	cb.Do("AnnDest", &t.AnnDest, d...)
	cb.Do("AnnOrigin", &t.AnnOrigin, d...)
	cb.Do("DwParam1", &t.DwParam1, d...)
	cb.Do("DwParam2", &t.DwParam2, d...)
	cb.Do("BIgnoreOwnerAlpha", &t.BIgnoreOwnerAlpha, d...)
}

type SummonedActorsPreloadHelper struct {
	SnoActor        DT_SNO
	TSummonedActors SerialDataInfo
}

func (t *SummonedActorsPreloadHelper) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoActor, r, &Options{
		Flags: 1,
		Group: 1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.TSummonedActors, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+12, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *SummonedActorsPreloadHelper) Walk(cb WalkCallback, d ...any) {
	cb.Do("SnoActor", &t.SnoActor, d...)
	cb.Do("TSummonedActors", &t.TSummonedActors, d...)
}

type QuestRewardLevelOverride struct {
	Unk_cea351b DT_INT
}

func (t *QuestRewardLevelOverride) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Unk_cea351b, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+4, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *QuestRewardLevelOverride) Walk(cb WalkCallback, d ...any) {
	cb.Do("Unk_cea351b", &t.Unk_cea351b, d...)
}

type Type_e1291b50 struct {
	EDevicePlugin DT_ENUM
	TName         WwiseName
	DwFlags       DT_UINT
}

func (t *Type_e1291b50) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.EDevicePlugin, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.TName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if _, err := r.Seek(p+12, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_e1291b50) Walk(cb WalkCallback, d ...any) {
	cb.Do("EDevicePlugin", &t.EDevicePlugin, d...)
	cb.Do("TName", &t.TName, d...)
	cb.Do("DwFlags", &t.DwFlags, d...)
}

type EffectGroupMaterialValueKeyData struct {
	// Inherits EffectGroupKeyData
	// Inherits PolymorphicBase
	DwType            DT_UINT
	DwPad             DT_UINT
	ArKeyItems        DT_VARIABLEARRAY[*EffectGroupKey]
	SnoMaterialValue  DT_SNO
	SnoMaterialFilter DT_SNO
}

func (t *EffectGroupMaterialValueKeyData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.ArKeyItems, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.SnoMaterialValue, r, &Options{
		Flags: 1,
		Group: 81,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.SnoMaterialFilter, r, &Options{
		Flags: 1,
		Group: 57,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+40, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *EffectGroupMaterialValueKeyData) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("ArKeyItems", &t.ArKeyItems, d...)
	cb.Do("SnoMaterialValue", &t.SnoMaterialValue, d...)
	cb.Do("SnoMaterialFilter", &t.SnoMaterialFilter, d...)
}

type PowerConditionBase struct {
	// Inherits PolymorphicBase
	DwType   DT_UINT
	BInverse DT_INT
	DwPad    DT_UINT
}

func (t *PowerConditionBase) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BInverse, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PowerConditionBase) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("BInverse", &t.BInverse, d...)
	cb.Do("DwPad", &t.DwPad, d...)
}

type ActorChildRotationJoint struct {
	SzBoneName           DT_UINT
	FlAdditionalRotation DT_FLOAT
}

func (t *ActorChildRotationJoint) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SzBoneName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.FlAdditionalRotation, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ActorChildRotationJoint) Walk(cb WalkCallback, d ...any) {
	cb.Do("SzBoneName", &t.SzBoneName, d...)
	cb.Do("FlAdditionalRotation", &t.FlAdditionalRotation, d...)
}

type NPCWeaponHardpointOverride struct {
	Offset      HardpointOffset
	SnoItemType DT_SNO
}

func (t *NPCWeaponHardpointOverride) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Offset, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.SnoItemType, r, &Options{
		Flags: 1,
		Group: 98,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+40, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *NPCWeaponHardpointOverride) Walk(cb WalkCallback, d ...any) {
	cb.Do("Offset", &t.Offset, d...)
	cb.Do("SnoItemType", &t.SnoItemType, d...)
}

type MonsterTags struct {
	THeader              GBIDHeader
	ArTuningData         DT_FIXEDARRAY[*MonsterTagTuningData]
	SnoCondition         DT_SNO
	ArForcedAffixes      DT_VARIABLEARRAY[*DT_SNO]
	ArAttributes         DT_VARIABLEARRAY[*AttributeSpecifier]
	ArChildTags          DT_VARIABLEARRAY[*DT_GBID]
	Unk_c816404          DT_UINT
	ArParentTags         DT_VARIABLEARRAY[*DT_GBID]
	ArUltimateParentTags DT_VARIABLEARRAY[*DT_GBID]
}

func (t *MonsterTags) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+260, &t.ArTuningData, r, &Options{
		ArrayLength: 4,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+308, &t.SnoCondition, r, &Options{
		Flags: 1,
		Group: 51,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+312, &t.ArForcedAffixes, r, &Options{
		Flags: 1,
		Group: 107,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+328, &t.ArAttributes, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+344, &t.ArChildTags, r, &Options{
		Flags: 1,
		Group: 66,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+360, &t.Unk_c816404, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+368, &t.ArParentTags, r, &Options{Group: 66}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+384, &t.ArUltimateParentTags, r, &Options{Group: 66}); err != nil {
		return err
	}
	if _, err := r.Seek(p+400, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *MonsterTags) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("ArTuningData", &t.ArTuningData, d...)
	cb.Do("SnoCondition", &t.SnoCondition, d...)
	cb.Do("ArForcedAffixes", &t.ArForcedAffixes, d...)
	cb.Do("ArAttributes", &t.ArAttributes, d...)
	cb.Do("ArChildTags", &t.ArChildTags, d...)
	cb.Do("Unk_c816404", &t.Unk_c816404, d...)
	cb.Do("ArParentTags", &t.ArParentTags, d...)
	cb.Do("ArUltimateParentTags", &t.ArUltimateParentTags, d...)
}

type dmClothCapsuleOldMirror struct {
	M_localTransform dmTransformMirror
	M_transform1     dmTransformMirror
	M_transform2     dmTransformMirror
	M_scale          DT_VECTOR4D
	M_invScale       DT_VECTOR4D
	M_dimensions     DT_VECTOR4D
	M_params         DT_VECTOR4D
	M_type           DT_WORD
	M_boneIndex      DT_WORD
	M_padding        DT_FIXEDARRAY[*DT_WORD]
}

func (t *dmClothCapsuleOldMirror) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.M_localTransform, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.M_transform1, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.M_transform2, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.M_scale, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.M_invScale, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.M_dimensions, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+144, &t.M_params, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+160, &t.M_type, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+162, &t.M_boneIndex, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+164, &t.M_padding, r, &Options{ArrayLength: 6}); err != nil {
		return err
	}
	if _, err := r.Seek(p+176, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *dmClothCapsuleOldMirror) Walk(cb WalkCallback, d ...any) {
	cb.Do("M_localTransform", &t.M_localTransform, d...)
	cb.Do("M_transform1", &t.M_transform1, d...)
	cb.Do("M_transform2", &t.M_transform2, d...)
	cb.Do("M_scale", &t.M_scale, d...)
	cb.Do("M_invScale", &t.M_invScale, d...)
	cb.Do("M_dimensions", &t.M_dimensions, d...)
	cb.Do("M_params", &t.M_params, d...)
	cb.Do("M_type", &t.M_type, d...)
	cb.Do("M_boneIndex", &t.M_boneIndex, d...)
	cb.Do("M_padding", &t.M_padding, d...)
}

type AttributesChangedBuffCallback struct {
	// Inherits BuffCallbackBase
	// Inherits PolymorphicBase
	DwType                DT_UINT
	DwPad                 DT_UINT
	SnoTriggerEffectGroup DT_SNO
	ArConditions          DT_POLYMORPHIC_VARIABLEARRAY[*DT_INT64]
}

func (t *AttributesChangedBuffCallback) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoTriggerEffectGroup, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ArConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *AttributesChangedBuffCallback) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("SnoTriggerEffectGroup", &t.SnoTriggerEffectGroup, d...)
	cb.Do("ArConditions", &t.ArConditions, d...)
}

type Type_e243df90 struct {
	Unk_62412ed    DT_RANGE[*DT_INT]
	NRequiredLevel DT_INT
	Unk_4d258da    DT_ENUM
	Unk_aeed93c    DT_RANGE[*DT_INT]
}

func (t *Type_e243df90) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Unk_62412ed, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.NRequiredLevel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.Unk_4d258da, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_aeed93c, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_e243df90) Walk(cb WalkCallback, d ...any) {
	cb.Do("Unk_62412ed", &t.Unk_62412ed, d...)
	cb.Do("NRequiredLevel", &t.NRequiredLevel, d...)
	cb.Do("Unk_4d258da", &t.Unk_4d258da, d...)
	cb.Do("Unk_aeed93c", &t.Unk_aeed93c, d...)
}

type PowerPhaseInitialization struct {
	// Inherits PowerPhaseBase
	// Inherits PolymorphicBase
	DwType       DT_UINT
	DwPad        DT_UINT
	TPhaseName   DT_UINT
	ArPhaseJumps DT_POLYMORPHIC_VARIABLEARRAY[*DT_INT64]
	Unk_d0d932b  DT_INT
	Unk_9a8200e  DT_INT
}

func (t *PowerPhaseInitialization) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TPhaseName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ArPhaseJumps, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.Unk_d0d932b, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.Unk_9a8200e, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+56, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PowerPhaseInitialization) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("TPhaseName", &t.TPhaseName, d...)
	cb.Do("ArPhaseJumps", &t.ArPhaseJumps, d...)
	cb.Do("Unk_d0d932b", &t.Unk_d0d932b, d...)
	cb.Do("Unk_9a8200e", &t.Unk_9a8200e, d...)
}

type WallInstanceData struct {
	TScatterLayers       DT_VARIABLEARRAY[*WallScatterData]
	TCornerPieces        WallCornerPieces
	TDeformLayers        DT_VARIABLEARRAY[*WallDeformData]
	TTerrainDeformLayers DT_VARIABLEARRAY[*WallDeformData]
}

func (t *WallInstanceData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.TScatterLayers, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TCornerPieces, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.TDeformLayers, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+136, &t.TTerrainDeformLayers, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+152, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *WallInstanceData) Walk(cb WalkCallback, d ...any) {
	cb.Do("TScatterLayers", &t.TScatterLayers, d...)
	cb.Do("TCornerPieces", &t.TCornerPieces, d...)
	cb.Do("TDeformLayers", &t.TDeformLayers, d...)
	cb.Do("TTerrainDeformLayers", &t.TTerrainDeformLayers, d...)
}

type QuestChainDefinition struct {
	DwNextID                       DT_UINT
	SnoSubzone                     DT_SNO
	Unk_2feafdd                    DT_INT
	Unk_23523de                    DT_INT
	EQuestChainType                DT_ENUM
	ArRequiredCompletedQuestChains DT_VARIABLEARRAY[*DT_SNO]
	Unk_97b742f                    DT_VARIABLEARRAY[*DT_SNO]
	SnoCompletionSubzoneOverride   DT_SNO
	USubzoneOverrideEntranceGUID   DT_STARTLOC_NAME
	TMarkerHandle                  MarkerHandle
	VecMarkerLocation              DT_VECTOR3D
	TFlipLocationMarkerHandle      MarkerHandle
	VecFlipLocation                DT_VECTOR3D
	SnoFoWToReveal                 DT_SNO
	SnoEffectGroupPreFlip          DT_SNO
	SnoEffectGroupPostFlip         DT_SNO
	SnoEffectGroupPostFlipOutro    DT_SNO
	ArSteps                        DT_VARIABLEARRAY[*QuestChainStep]
	Unk_f4b6cde                    Type_56ff7d6a
}

func (t *QuestChainDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwNextID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.SnoSubzone, r, &Options{
		Flags: 1,
		Group: 80,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_2feafdd, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.Unk_23523de, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.EQuestChainType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.ArRequiredCompletedQuestChains, r, &Options{
		Flags: 1,
		Group: 96,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.Unk_97b742f, r, &Options{
		Flags: 1,
		Group: 80,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.SnoCompletionSubzoneOverride, r, &Options{
		Flags: 1,
		Group: 80,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.USubzoneOverrideEntranceGUID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.TMarkerHandle, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.VecMarkerLocation, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.TFlipLocationMarkerHandle, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+100, &t.VecFlipLocation, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.SnoFoWToReveal, r, &Options{
		Flags: 1,
		Group: 123,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+116, &t.SnoEffectGroupPreFlip, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.SnoEffectGroupPostFlip, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+124, &t.SnoEffectGroupPostFlipOutro, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.ArSteps, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+144, &t.Unk_f4b6cde, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+160, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *QuestChainDefinition) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwNextID", &t.DwNextID, d...)
	cb.Do("SnoSubzone", &t.SnoSubzone, d...)
	cb.Do("Unk_2feafdd", &t.Unk_2feafdd, d...)
	cb.Do("Unk_23523de", &t.Unk_23523de, d...)
	cb.Do("EQuestChainType", &t.EQuestChainType, d...)
	cb.Do("ArRequiredCompletedQuestChains", &t.ArRequiredCompletedQuestChains, d...)
	cb.Do("Unk_97b742f", &t.Unk_97b742f, d...)
	cb.Do("SnoCompletionSubzoneOverride", &t.SnoCompletionSubzoneOverride, d...)
	cb.Do("USubzoneOverrideEntranceGUID", &t.USubzoneOverrideEntranceGUID, d...)
	cb.Do("TMarkerHandle", &t.TMarkerHandle, d...)
	cb.Do("VecMarkerLocation", &t.VecMarkerLocation, d...)
	cb.Do("TFlipLocationMarkerHandle", &t.TFlipLocationMarkerHandle, d...)
	cb.Do("VecFlipLocation", &t.VecFlipLocation, d...)
	cb.Do("SnoFoWToReveal", &t.SnoFoWToReveal, d...)
	cb.Do("SnoEffectGroupPreFlip", &t.SnoEffectGroupPreFlip, d...)
	cb.Do("SnoEffectGroupPostFlip", &t.SnoEffectGroupPostFlip, d...)
	cb.Do("SnoEffectGroupPostFlipOutro", &t.SnoEffectGroupPostFlipOutro, d...)
	cb.Do("ArSteps", &t.ArSteps, d...)
	cb.Do("Unk_f4b6cde", &t.Unk_f4b6cde, d...)
}

type GlobalRoadSegment struct {
	ERoadType                DT_ENUM
	ArWorldPoints            DT_VARIABLEARRAY[*DT_VECTOR3D]
	ArPreviousSegmentIndices DT_VARIABLEARRAY[*DT_INT]
	ArNextSegmentIndices     DT_VARIABLEARRAY[*DT_INT]
	ArCurveLengths           DT_VARIABLEARRAY[*DT_FLOAT]
	FlLength                 DT_FLOAT
	FIsLoop                  DT_INT
	AabbBounds               AABB
}

func (t *GlobalRoadSegment) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.ERoadType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.ArWorldPoints, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ArPreviousSegmentIndices, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.ArNextSegmentIndices, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.ArCurveLengths, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.FlLength, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.FIsLoop, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.AabbBounds, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+104, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *GlobalRoadSegment) Walk(cb WalkCallback, d ...any) {
	cb.Do("ERoadType", &t.ERoadType, d...)
	cb.Do("ArWorldPoints", &t.ArWorldPoints, d...)
	cb.Do("ArPreviousSegmentIndices", &t.ArPreviousSegmentIndices, d...)
	cb.Do("ArNextSegmentIndices", &t.ArNextSegmentIndices, d...)
	cb.Do("ArCurveLengths", &t.ArCurveLengths, d...)
	cb.Do("FlLength", &t.FlLength, d...)
	cb.Do("FIsLoop", &t.FIsLoop, d...)
	cb.Do("AabbBounds", &t.AabbBounds, d...)
}

type AnimTreeBlendCase struct {
	EParam         DT_ENUM
	NIntLiteral    DT_INT
	FlFloatLiteral DT_FLOAT
}

func (t *AnimTreeBlendCase) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.EParam, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.NIntLiteral, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.FlFloatLiteral, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+12, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *AnimTreeBlendCase) Walk(cb WalkCallback, d ...any) {
	cb.Do("EParam", &t.EParam, d...)
	cb.Do("NIntLiteral", &t.NIntLiteral, d...)
	cb.Do("FlFloatLiteral", &t.FlFloatLiteral, d...)
}

type PhaseJumpServerTriggeredEnd struct {
	// Inherits PhaseJumpBase
	// Inherits PolymorphicBase
	DwType       DT_UINT
	Unk_2de4987  DT_UINT
	ArConditions DT_POLYMORPHIC_VARIABLEARRAY[*DT_INT64]
	BEnd         DT_INT
	DwPad        DT_UINT
}

func (t *PhaseJumpServerTriggeredEnd) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_2de4987, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ArConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.BEnd, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+56, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PhaseJumpServerTriggeredEnd) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("Unk_2de4987", &t.Unk_2de4987, d...)
	cb.Do("ArConditions", &t.ArConditions, d...)
	cb.Do("BEnd", &t.BEnd, d...)
	cb.Do("DwPad", &t.DwPad, d...)
}

type SkillTreeNodeConnection struct {
	NIndexNodeA           DT_INT
	NIndexNodeB           DT_INT
	DwSourceId            DT_UINT
	DwDestinationId       DT_UINT
	ArCustomPathPositions DT_VARIABLEARRAY[*DT_VECTOR2D]
}

func (t *SkillTreeNodeConnection) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.NIndexNodeA, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.NIndexNodeB, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwSourceId, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwDestinationId, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.ArCustomPathPositions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *SkillTreeNodeConnection) Walk(cb WalkCallback, d ...any) {
	cb.Do("NIndexNodeA", &t.NIndexNodeA, d...)
	cb.Do("NIndexNodeB", &t.NIndexNodeB, d...)
	cb.Do("DwSourceId", &t.DwSourceId, d...)
	cb.Do("DwDestinationId", &t.DwDestinationId, d...)
	cb.Do("ArCustomPathPositions", &t.ArCustomPathPositions, d...)
}

type SoundPlayHistory struct {
	NLastPlayedPerm  DT_INT
	FlLastPlayedTime DT_FLOAT
	ArPlayedFlags    DT_FIXEDARRAY[*DT_BYTE]
}

func (t *SoundPlayHistory) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.NLastPlayedPerm, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.FlLastPlayedTime, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.ArPlayedFlags, r, &Options{
		ArrayLength: 16,
		Flags:       1,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *SoundPlayHistory) Walk(cb WalkCallback, d ...any) {
	cb.Do("NLastPlayedPerm", &t.NLastPlayedPerm, d...)
	cb.Do("FlLastPlayedTime", &t.FlLastPlayedTime, d...)
	cb.Do("ArPlayedFlags", &t.ArPlayedFlags, d...)
}

type TriggerEventEnableRagdoll struct {
	// Inherits TriggerEvent
	// Inherits PolymorphicBase
	DwType          DT_UINT
	DwPad           DT_UINT
	TConditions     TriggerConditions
	FGenerated      DT_INT
	Unk_6cba752     DT_INT
	DwParentActorID DT_UINT
	TRagdollParams  EnableRagdollParams
	DwActorID       DT_UINT
	Unk_279aa5a     DT_INT
}

func (t *TriggerEventEnableRagdoll) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.FGenerated, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_6cba752, r, &Options{Flags: 16}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.DwParentActorID, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.TRagdollParams, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.DwActorID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.Unk_279aa5a, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+104, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TriggerEventEnableRagdoll) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("TConditions", &t.TConditions, d...)
	cb.Do("FGenerated", &t.FGenerated, d...)
	cb.Do("Unk_6cba752", &t.Unk_6cba752, d...)
	cb.Do("DwParentActorID", &t.DwParentActorID, d...)
	cb.Do("TRagdollParams", &t.TRagdollParams, d...)
	cb.Do("DwActorID", &t.DwActorID, d...)
	cb.Do("Unk_279aa5a", &t.Unk_279aa5a, d...)
}

type SkillTreeNodePersonalConnection struct {
	NIndexNode DT_INT
}

func (t *SkillTreeNodePersonalConnection) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.NIndexNode, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+4, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *SkillTreeNodePersonalConnection) Walk(cb WalkCallback, d ...any) {
	cb.Do("NIndexNode", &t.NIndexNode, d...)
}

type ActorEffectData struct {
	NHardpointIndexForRope          DT_INT
	FDoesntCauseCriticalBloodEffect DT_INT
	FNeverPlayGethitJitter          DT_INT
	ArNormalHitEffectGroups         DT_FIXEDARRAY[*DT_SNO]
	ArDirectionalHitEffectGroups    DT_FIXEDARRAY[*DT_SNO]
	ArDOTEffectGroups               DT_FIXEDARRAY[*DT_SNO]
	ArDOTApplicationEffectGroups    DT_FIXEDARRAY[*DT_SNO]
	SnoMonsterRarityEffectGroup     DT_SNO
	SnoShieldBlockEffectGroup       DT_SNO
}

func (t *ActorEffectData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.NHardpointIndexForRope, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.FDoesntCauseCriticalBloodEffect, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.FNeverPlayGethitJitter, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.ArNormalHitEffectGroups, r, &Options{
		ArrayLength: 6,
		Flags:       1,
		Group:       14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.ArDirectionalHitEffectGroups, r, &Options{
		ArrayLength: 6,
		Flags:       1,
		Group:       14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+60, &t.ArDOTEffectGroups, r, &Options{
		ArrayLength: 6,
		Flags:       1,
		Group:       14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.ArDOTApplicationEffectGroups, r, &Options{
		ArrayLength: 6,
		Flags:       1,
		Group:       14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+108, &t.SnoMonsterRarityEffectGroup, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.SnoShieldBlockEffectGroup, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+116, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ActorEffectData) Walk(cb WalkCallback, d ...any) {
	cb.Do("NHardpointIndexForRope", &t.NHardpointIndexForRope, d...)
	cb.Do("FDoesntCauseCriticalBloodEffect", &t.FDoesntCauseCriticalBloodEffect, d...)
	cb.Do("FNeverPlayGethitJitter", &t.FNeverPlayGethitJitter, d...)
	cb.Do("ArNormalHitEffectGroups", &t.ArNormalHitEffectGroups, d...)
	cb.Do("ArDirectionalHitEffectGroups", &t.ArDirectionalHitEffectGroups, d...)
	cb.Do("ArDOTEffectGroups", &t.ArDOTEffectGroups, d...)
	cb.Do("ArDOTApplicationEffectGroups", &t.ArDOTApplicationEffectGroups, d...)
	cb.Do("SnoMonsterRarityEffectGroup", &t.SnoMonsterRarityEffectGroup, d...)
	cb.Do("SnoShieldBlockEffectGroup", &t.SnoShieldBlockEffectGroup, d...)
}

type FloatingNumberMessage struct {
	THeader          RequiredMessageHeader
	AnnTarget        DT_ACD_NETWORK_NAME
	FlDamage         DT_FLOAT
	FlDamageUnscaled DT_FLOAT
	EType            DT_ENUM
	VImpactPos       DT_OPTIONAL[*DT_VECTOR2D]
	Unk_741de7       DT_OPTIONAL[*DT_FLOAT]
}

func (t *FloatingNumberMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.AnnTarget, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.FlDamage, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.FlDamageUnscaled, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.EType, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.VImpactPos, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.Unk_741de7, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+56, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *FloatingNumberMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("AnnTarget", &t.AnnTarget, d...)
	cb.Do("FlDamage", &t.FlDamage, d...)
	cb.Do("FlDamageUnscaled", &t.FlDamageUnscaled, d...)
	cb.Do("EType", &t.EType, d...)
	cb.Do("VImpactPos", &t.VImpactPos, d...)
	cb.Do("Unk_741de7", &t.Unk_741de7, d...)
}

type Type_e3bec795 struct {
	Unk_27ff629     DT_VARIABLEARRAY[*Type_2cf6a209]
	SnoConversation DT_SNO
	DwNodeID        DT_UINT
	SnoSpeaker      DT_SNO
	ESpeakerGender  DT_ENUM
	ESpeakerClass   DT_ENUM
}

func (t *Type_e3bec795) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Unk_27ff629, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoConversation, r, &Options{
		Flags: 1,
		Group: 12,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwNodeID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SnoSpeaker, r, &Options{
		Flags: 1,
		Group: 72,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.ESpeakerGender, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.ESpeakerClass, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+40, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_e3bec795) Walk(cb WalkCallback, d ...any) {
	cb.Do("Unk_27ff629", &t.Unk_27ff629, d...)
	cb.Do("SnoConversation", &t.SnoConversation, d...)
	cb.Do("DwNodeID", &t.DwNodeID, d...)
	cb.Do("SnoSpeaker", &t.SnoSpeaker, d...)
	cb.Do("ESpeakerGender", &t.ESpeakerGender, d...)
	cb.Do("ESpeakerClass", &t.ESpeakerClass, d...)
}

type BlizzconCVarsMessage struct {
	THeader              RequiredMessageHeader
	BMultiplayerEnabled  DT_INT
	BDHunterEnabled      DT_INT
	BBlizzconDropEnabled DT_INT
}

func (t *BlizzconCVarsMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BMultiplayerEnabled, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.BDHunterEnabled, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.BBlizzconDropEnabled, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+28, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *BlizzconCVarsMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("BMultiplayerEnabled", &t.BMultiplayerEnabled, d...)
	cb.Do("BDHunterEnabled", &t.BDHunterEnabled, d...)
	cb.Do("BBlizzconDropEnabled", &t.BBlizzconDropEnabled, d...)
}

type PowerBuffDOTDamage struct {
	EDamageType              DT_ENUM
	TDamage                  HitpointSpecifier
	Unk_89dc285              DT_INT
	FlFlatDamageBonusScalar  DT_FLOAT
	Unk_f551941              DT_ENUM
	Unk_dd4b5bf              DT_INT
	Unk_3d768b7              DT_INT
	Unk_b8f2b                DT_ENUM
	BHasCombatEffectOverride DT_INT
	TCombatEffectOverride    DT_STRING_FORMULA
	Unk_693b6db              DT_INT
	Unk_d50fe6e              DT_INT
}

func (t *PowerBuffDOTDamage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.EDamageType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.TDamage, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.Unk_89dc285, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.FlFlatDamageBonusScalar, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.Unk_f551941, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.Unk_dd4b5bf, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.Unk_3d768b7, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+100, &t.Unk_b8f2b, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+104, &t.BHasCombatEffectOverride, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.TCombatEffectOverride, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+144, &t.Unk_693b6db, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+148, &t.Unk_d50fe6e, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+152, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PowerBuffDOTDamage) Walk(cb WalkCallback, d ...any) {
	cb.Do("EDamageType", &t.EDamageType, d...)
	cb.Do("TDamage", &t.TDamage, d...)
	cb.Do("Unk_89dc285", &t.Unk_89dc285, d...)
	cb.Do("FlFlatDamageBonusScalar", &t.FlFlatDamageBonusScalar, d...)
	cb.Do("Unk_f551941", &t.Unk_f551941, d...)
	cb.Do("Unk_dd4b5bf", &t.Unk_dd4b5bf, d...)
	cb.Do("Unk_3d768b7", &t.Unk_3d768b7, d...)
	cb.Do("Unk_b8f2b", &t.Unk_b8f2b, d...)
	cb.Do("BHasCombatEffectOverride", &t.BHasCombatEffectOverride, d...)
	cb.Do("TCombatEffectOverride", &t.TCombatEffectOverride, d...)
	cb.Do("Unk_693b6db", &t.Unk_693b6db, d...)
	cb.Do("Unk_d50fe6e", &t.Unk_d50fe6e, d...)
}

type ProximityDataBase struct {
	// Inherits PolymorphicBase
	DwType DT_UINT
	DwPad  DT_UINT
}

func (t *ProximityDataBase) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ProximityDataBase) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
}

type ItemRequirementDefinition struct {
	BAnyWeapon             DT_INT
	BDualWielding          DT_INT
	Unk_901b272            DT_INT
	BAllArsenalSlot        DT_INT
	Unk_9f5f4cb            DT_INT
	ArItemLabels           DT_VARIABLEARRAY[*DT_ENUM]
	HSkillRequirementLabel DT_UINT
}

func (t *ItemRequirementDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.BAnyWeapon, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.BDualWielding, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_901b272, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.BAllArsenalSlot, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_9f5f4cb, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.ArItemLabels, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.HSkillRequirementLabel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+56, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ItemRequirementDefinition) Walk(cb WalkCallback, d ...any) {
	cb.Do("BAnyWeapon", &t.BAnyWeapon, d...)
	cb.Do("BDualWielding", &t.BDualWielding, d...)
	cb.Do("Unk_901b272", &t.Unk_901b272, d...)
	cb.Do("BAllArsenalSlot", &t.BAllArsenalSlot, d...)
	cb.Do("Unk_9f5f4cb", &t.Unk_9f5f4cb, d...)
	cb.Do("ArItemLabels", &t.ArItemLabels, d...)
	cb.Do("HSkillRequirementLabel", &t.HSkillRequirementLabel, d...)
}

type AIStateDebugSetAllEntryStatesMessage struct {
	THeader  RequiredMessageHeader
	AnnActor DT_ACD_NETWORK_NAME
	BEnabled DT_INT
}

func (t *AIStateDebugSetAllEntryStatesMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.AnnActor, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.BEnabled, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+28, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *AIStateDebugSetAllEntryStatesMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("AnnActor", &t.AnnActor, d...)
	cb.Do("BEnabled", &t.BEnabled, d...)
}

type ConstraintParameters struct {
	DwHash                DT_UINT
	DwHashPadding         DT_UINT
	DwFlags               DT_UINT
	EType                 DT_ENUM
	NBone1                DT_INT
	NBone2                DT_INT
	LocalFrame1           PRTransform
	LocalFrame2           PRTransform
	FlRevoluteAngleLow    DT_FLOAT
	FlRevoluteAngleHigh   DT_FLOAT
	FlRagdollConeAngle    DT_FLOAT
	FlRagdollTwistLow     DT_FLOAT
	FlRagdollTwistHigh    DT_FLOAT
	Unk_9d701d6           DT_INT
	FlFriction            DT_FLOAT
	FlCompliance          DT_FLOAT
	FlAngularFrequencyHz  DT_FLOAT
	FlAngularDampingRatio DT_FLOAT
	FlLinearFrequencyHz   DT_FLOAT
	FlLinearDampingRatio  DT_FLOAT
	Unk_66d7e12           DT_INT
	FlDuration            DT_FLOAT
	Unk_cfbfec2           DT_FLOAT
	FlStrengthRange       DT_RANGE[*DT_FLOAT]
	FIgnoreGravity        DT_INT
	QTwistAxis            bcQuat
	SnoParticleSystemSno  DT_SNO
	Unk_5cad7b9           DT_FLOAT
}

func (t *ConstraintParameters) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.DwHash, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.DwHashPadding, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.EType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.NBone1, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.NBone2, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.LocalFrame1, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.LocalFrame2, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.FlRevoluteAngleLow, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.FlRevoluteAngleHigh, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.FlRagdollConeAngle, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.FlRagdollTwistLow, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.FlRagdollTwistHigh, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+100, &t.Unk_9d701d6, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+104, &t.FlFriction, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+108, &t.FlCompliance, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.FlAngularFrequencyHz, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+116, &t.FlAngularDampingRatio, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.FlLinearFrequencyHz, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+124, &t.FlLinearDampingRatio, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.Unk_66d7e12, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+132, &t.FlDuration, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+136, &t.Unk_cfbfec2, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+140, &t.FlStrengthRange, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+148, &t.FIgnoreGravity, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+152, &t.QTwistAxis, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+168, &t.SnoParticleSystemSno, r, &Options{
		Flags: 1,
		Group: 27,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+172, &t.Unk_5cad7b9, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+176, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ConstraintParameters) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwHash", &t.DwHash, d...)
	cb.Do("DwHashPadding", &t.DwHashPadding, d...)
	cb.Do("DwFlags", &t.DwFlags, d...)
	cb.Do("EType", &t.EType, d...)
	cb.Do("NBone1", &t.NBone1, d...)
	cb.Do("NBone2", &t.NBone2, d...)
	cb.Do("LocalFrame1", &t.LocalFrame1, d...)
	cb.Do("LocalFrame2", &t.LocalFrame2, d...)
	cb.Do("FlRevoluteAngleLow", &t.FlRevoluteAngleLow, d...)
	cb.Do("FlRevoluteAngleHigh", &t.FlRevoluteAngleHigh, d...)
	cb.Do("FlRagdollConeAngle", &t.FlRagdollConeAngle, d...)
	cb.Do("FlRagdollTwistLow", &t.FlRagdollTwistLow, d...)
	cb.Do("FlRagdollTwistHigh", &t.FlRagdollTwistHigh, d...)
	cb.Do("Unk_9d701d6", &t.Unk_9d701d6, d...)
	cb.Do("FlFriction", &t.FlFriction, d...)
	cb.Do("FlCompliance", &t.FlCompliance, d...)
	cb.Do("FlAngularFrequencyHz", &t.FlAngularFrequencyHz, d...)
	cb.Do("FlAngularDampingRatio", &t.FlAngularDampingRatio, d...)
	cb.Do("FlLinearFrequencyHz", &t.FlLinearFrequencyHz, d...)
	cb.Do("FlLinearDampingRatio", &t.FlLinearDampingRatio, d...)
	cb.Do("Unk_66d7e12", &t.Unk_66d7e12, d...)
	cb.Do("FlDuration", &t.FlDuration, d...)
	cb.Do("Unk_cfbfec2", &t.Unk_cfbfec2, d...)
	cb.Do("FlStrengthRange", &t.FlStrengthRange, d...)
	cb.Do("FIgnoreGravity", &t.FIgnoreGravity, d...)
	cb.Do("QTwistAxis", &t.QTwistAxis, d...)
	cb.Do("SnoParticleSystemSno", &t.SnoParticleSystemSno, d...)
	cb.Do("Unk_5cad7b9", &t.Unk_5cad7b9, d...)
}

type WorldSyncedDataMessage struct {
	THeader     RequiredMessageHeader
	IdSWorld    DT_SHARED_SERVER_DATA_ID
	TSyncedData WorldSyncedData
}

func (t *WorldSyncedDataMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.IdSWorld, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.TSyncedData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+1596, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *WorldSyncedDataMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("IdSWorld", &t.IdSWorld, d...)
	cb.Do("TSyncedData", &t.TSyncedData, d...)
}

type ScriptEventParamTrackedReward struct {
	// Inherits ScriptEventParamBase
	// Inherits PolymorphicBase
	DwType           DT_UINT
	EParamType       DT_ENUM
	DwPad            DT_UINT
	SnoTrackedReward DT_SNO
}

func (t *ScriptEventParamTrackedReward) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.EParamType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SnoTrackedReward, r, &Options{
		Flags: 1,
		Group: 126,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ScriptEventParamTrackedReward) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("EParamType", &t.EParamType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("SnoTrackedReward", &t.SnoTrackedReward, d...)
}

type MonsterTagSubcondition struct {
	// Inherits Subcondition
	// Inherits PolymorphicBase
	DwType           DT_UINT
	BNegate          DT_INT
	DwPad            DT_UINT
	GbidMonsterTag   DT_GBID
	EActorToEvaluate DT_ENUM
}

func (t *MonsterTagSubcondition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BNegate, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.GbidMonsterTag, r, &Options{
		Flags: 1,
		Group: 66,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.EActorToEvaluate, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *MonsterTagSubcondition) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("BNegate", &t.BNegate, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("GbidMonsterTag", &t.GbidMonsterTag, d...)
	cb.Do("EActorToEvaluate", &t.EActorToEvaluate, d...)
}

type DRLGWorldDebugInfoMessage struct {
	THeader        RequiredMessageHeader
	IdSWorld       DT_SHARED_SERVER_DATA_ID
	TDRLGDebugInfo DRLGWorldDebugInfo
}

func (t *DRLGWorldDebugInfoMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.IdSWorld, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.TDRLGDebugInfo, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16456, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *DRLGWorldDebugInfoMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("IdSWorld", &t.IdSWorld, d...)
	cb.Do("TDRLGDebugInfo", &t.TDRLGDebugInfo, d...)
}

type WallDefinition struct {
	TInstanceData WallInstanceData
}

func (t *WallDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.TInstanceData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+160, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *WallDefinition) Walk(cb WalkCallback, d ...any) {
	cb.Do("TInstanceData", &t.TInstanceData, d...)
}

type BountyIcons struct {
	HIconNormal       DT_UINT
	HIconDisabled     DT_UINT
	HNotificationIcon DT_UINT
}

func (t *BountyIcons) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.HIconNormal, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.HIconDisabled, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.HNotificationIcon, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+12, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *BountyIcons) Walk(cb WalkCallback, d ...any) {
	cb.Do("HIconNormal", &t.HIconNormal, d...)
	cb.Do("HIconDisabled", &t.HIconDisabled, d...)
	cb.Do("HNotificationIcon", &t.HNotificationIcon, d...)
}

type MonsterTags_Table struct {
	// Inherits GameBalanceTable
	// Inherits PolymorphicBase
	DwType   DT_UINT
	DwPad    DT_UINT
	TEntries DT_VARIABLEARRAY[*MonsterTags]
}

func (t *MonsterTags_Table) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TEntries, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *MonsterTags_Table) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("TEntries", &t.TEntries, d...)
}

type StringTableEntry struct {
	SzLabel DT_CSTRING[*DT_BYTE]
	SzText  DT_CSTRING[*DT_BYTE]
	HLabel  DT_UINT
}

func (t *StringTableEntry) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SzLabel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SzText, r, &Options{Flags: 1048577}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.HLabel, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+40, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *StringTableEntry) Walk(cb WalkCallback, d ...any) {
	cb.Do("SzLabel", &t.SzLabel, d...)
	cb.Do("SzText", &t.SzText, d...)
	cb.Do("HLabel", &t.HLabel, d...)
}

type PlayerQuestHistoryEntry struct {
	SnoQuest DT_SNO
	NStepUID DT_INT
}

func (t *PlayerQuestHistoryEntry) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoQuest, r, &Options{
		Flags: 1,
		Group: 31,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.NStepUID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PlayerQuestHistoryEntry) Walk(cb WalkCallback, d ...any) {
	cb.Do("SnoQuest", &t.SnoQuest, d...)
	cb.Do("NStepUID", &t.NStepUID, d...)
}

type SpeedTree8RippleGroup struct {
	AfBend                DT_FIXEDARRAY[*DT_FLOAT]
	AfTurbulenceFrequency DT_FIXEDARRAY[*DT_FLOAT]
	AfTurbulence          DT_FIXEDARRAY[*DT_FLOAT]
	Unk_5c74a81           DT_FLOAT
}

func (t *SpeedTree8RippleGroup) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.AfBend, r, &Options{
		ArrayLength: 20,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.AfTurbulenceFrequency, r, &Options{
		ArrayLength: 20,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+160, &t.AfTurbulence, r, &Options{
		ArrayLength: 20,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+240, &t.Unk_5c74a81, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+244, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *SpeedTree8RippleGroup) Walk(cb WalkCallback, d ...any) {
	cb.Do("AfBend", &t.AfBend, d...)
	cb.Do("AfTurbulenceFrequency", &t.AfTurbulenceFrequency, d...)
	cb.Do("AfTurbulence", &t.AfTurbulence, d...)
	cb.Do("Unk_5c74a81", &t.Unk_5c74a81, d...)
}

type MailSentResponseMessage struct {
	THeader RequiredMessageHeader
	IdMail  Type_f5ac91bb
	IdErr   DT_INT
}

func (t *MailSentResponseMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.IdMail, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.IdErr, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+40, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *MailSentResponseMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("IdMail", &t.IdMail, d...)
	cb.Do("IdErr", &t.IdErr, d...)
}

type CustomizationData struct {
	SnoFace         DT_SNO
	SnoHairColor    DT_SNO
	SnoHairStyle    DT_SNO
	SnoFacialHair   DT_SNO
	SnoJewelry      DT_SNO
	SnoEyeColor     DT_SNO
	NSkinColorIndex DT_INT
	SnoMakeup       DT_SNO
	SnoMarkingShape DT_SNO
	SnoMarkingColor DT_SNO
}

func (t *CustomizationData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoFace, r, &Options{
		Flags: 1,
		Group: 140,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.SnoHairColor, r, &Options{
		Flags: 1,
		Group: 134,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.SnoHairStyle, r, &Options{
		Flags: 1,
		Group: 138,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.SnoFacialHair, r, &Options{
		Flags: 1,
		Group: 139,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoJewelry, r, &Options{
		Flags: 1,
		Group: 119,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.SnoEyeColor, r, &Options{
		Flags: 1,
		Group: 131,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.NSkinColorIndex, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.SnoMakeup, r, &Options{
		Flags: 1,
		Group: 132,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.SnoMarkingShape, r, &Options{
		Flags: 1,
		Group: 115,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.SnoMarkingColor, r, &Options{
		Flags: 1,
		Group: 133,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+40, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *CustomizationData) Walk(cb WalkCallback, d ...any) {
	cb.Do("SnoFace", &t.SnoFace, d...)
	cb.Do("SnoHairColor", &t.SnoHairColor, d...)
	cb.Do("SnoHairStyle", &t.SnoHairStyle, d...)
	cb.Do("SnoFacialHair", &t.SnoFacialHair, d...)
	cb.Do("SnoJewelry", &t.SnoJewelry, d...)
	cb.Do("SnoEyeColor", &t.SnoEyeColor, d...)
	cb.Do("NSkinColorIndex", &t.NSkinColorIndex, d...)
	cb.Do("SnoMakeup", &t.SnoMakeup, d...)
	cb.Do("SnoMarkingShape", &t.SnoMarkingShape, d...)
	cb.Do("SnoMarkingColor", &t.SnoMarkingColor, d...)
}

type dmFloat4Mirror struct {
	X DT_FLOAT
	Y DT_FLOAT
	Z DT_FLOAT
	W DT_FLOAT
}

func (t *dmFloat4Mirror) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.X, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.Y, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.Z, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.W, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *dmFloat4Mirror) Walk(cb WalkCallback, d ...any) {
	cb.Do("X", &t.X, d...)
	cb.Do("Y", &t.Y, d...)
	cb.Do("Z", &t.Z, d...)
	cb.Do("W", &t.W, d...)
}

type BountyZones struct {
	EZone        DT_ENUM
	SnoCondition DT_SNO
	ArBounties   DT_VARIABLEARRAY[*BountyData]
}

func (t *BountyZones) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.EZone, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.SnoCondition, r, &Options{
		Flags: 1,
		Group: 51,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.ArBounties, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *BountyZones) Walk(cb WalkCallback, d ...any) {
	cb.Do("EZone", &t.EZone, d...)
	cb.Do("SnoCondition", &t.SnoCondition, d...)
	cb.Do("ArBounties", &t.ArBounties, d...)
}

type SurfaceDefinition struct {
	SnoSplashParticle                DT_SNO
	SnoFootstepEffectLeft            DT_SNO
	SnoFootstepEffectRight           DT_SNO
	SnoMonsterFootstepEffect         DT_SNO
	SnoMonsterFootstepWalkEffect     DT_SNO
	SnoResidualFootstepParticleLeft  DT_SNO
	SnoResidualFootstepParticleRight DT_SNO
	SnoFootstepDragEffect            DT_SNO
	SnoFootstepTrailEffect           DT_SNO
	SnoFootstepLiftEffect            DT_SNO
	SnoOverrideWhenWet               DT_SNO
	Unk_4b222fd                      DT_SNO
	Unk_5b1fba9                      DT_FIXEDARRAY[*DT_SNO]
	Unk_323a0d8                      DT_FIXEDARRAY[*DT_SNO]
	FLiquid                          DT_INT
	FGrass                           DT_INT
}

func (t *SurfaceDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.SnoSplashParticle, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.SnoFootstepEffectLeft, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoFootstepEffectRight, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.SnoMonsterFootstepEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SnoMonsterFootstepWalkEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.SnoResidualFootstepParticleLeft, r, &Options{
		Flags: 1,
		Group: 27,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.SnoResidualFootstepParticleRight, r, &Options{
		Flags: 1,
		Group: 27,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.SnoFootstepDragEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.SnoFootstepTrailEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.SnoFootstepLiftEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.SnoOverrideWhenWet, r, &Options{
		Flags: 1,
		Group: 43,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.Unk_4b222fd, r, &Options{
		Flags: 1,
		Group: 43,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.Unk_5b1fba9, r, &Options{
		ArrayLength: 1,
		Flags:       1,
		Group:       14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+60, &t.Unk_323a0d8, r, &Options{
		ArrayLength: 1,
		Flags:       1,
		Group:       14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.FLiquid, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.FGrass, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+72, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *SurfaceDefinition) Walk(cb WalkCallback, d ...any) {
	cb.Do("SnoSplashParticle", &t.SnoSplashParticle, d...)
	cb.Do("SnoFootstepEffectLeft", &t.SnoFootstepEffectLeft, d...)
	cb.Do("SnoFootstepEffectRight", &t.SnoFootstepEffectRight, d...)
	cb.Do("SnoMonsterFootstepEffect", &t.SnoMonsterFootstepEffect, d...)
	cb.Do("SnoMonsterFootstepWalkEffect", &t.SnoMonsterFootstepWalkEffect, d...)
	cb.Do("SnoResidualFootstepParticleLeft", &t.SnoResidualFootstepParticleLeft, d...)
	cb.Do("SnoResidualFootstepParticleRight", &t.SnoResidualFootstepParticleRight, d...)
	cb.Do("SnoFootstepDragEffect", &t.SnoFootstepDragEffect, d...)
	cb.Do("SnoFootstepTrailEffect", &t.SnoFootstepTrailEffect, d...)
	cb.Do("SnoFootstepLiftEffect", &t.SnoFootstepLiftEffect, d...)
	cb.Do("SnoOverrideWhenWet", &t.SnoOverrideWhenWet, d...)
	cb.Do("Unk_4b222fd", &t.Unk_4b222fd, d...)
	cb.Do("Unk_5b1fba9", &t.Unk_5b1fba9, d...)
	cb.Do("Unk_323a0d8", &t.Unk_323a0d8, d...)
	cb.Do("FLiquid", &t.FLiquid, d...)
	cb.Do("FGrass", &t.FGrass, d...)
}

type UIActorTagStyle struct {
	// Inherits UIButtonStyle
	// Inherits UITextStyle
	// Inherits UIWindowStyle
	// Inherits UIControlStyle
	// Inherits PolymorphicBase
	DwType                      DT_UINT
	DwPad                       DT_UINT
	HParentStyle                UIControlHandle
	Unk_441f783                 DT_INT64
	M_eHasModifiedPowerTagMap   DT_TAGMAP[*DT_ENUM]
	TConsoleInput               UIControlConsoleInput
	Unk_b4f614c                 DT_TAGMAP[*DT_ENUM]
	TFont                       UIControlFont
	PtUIControlTagMapIconLabels DT_TAGMAP[*DT_ENUM]
	TIcon                       UIControlIcon
	TClickSounds                UIControlClickSounds
	Unk_10f81f0                 DT_TAGMAP[*DT_ENUM]
}

func (t *UIActorTagStyle) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.HParentStyle, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_441f783, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.M_eHasModifiedPowerTagMap, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.TConsoleInput, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.Unk_b4f614c, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.TFont, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.PtUIControlTagMapIconLabels, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.TIcon, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.TClickSounds, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+144, &t.Unk_10f81f0, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+160, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *UIActorTagStyle) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("HParentStyle", &t.HParentStyle, d...)
	cb.Do("Unk_441f783", &t.Unk_441f783, d...)
	cb.Do("M_eHasModifiedPowerTagMap", &t.M_eHasModifiedPowerTagMap, d...)
	cb.Do("TConsoleInput", &t.TConsoleInput, d...)
	cb.Do("Unk_b4f614c", &t.Unk_b4f614c, d...)
	cb.Do("TFont", &t.TFont, d...)
	cb.Do("PtUIControlTagMapIconLabels", &t.PtUIControlTagMapIconLabels, d...)
	cb.Do("TIcon", &t.TIcon, d...)
	cb.Do("TClickSounds", &t.TClickSounds, d...)
	cb.Do("Unk_10f81f0", &t.Unk_10f81f0, d...)
}

type DynamicGameParameter struct {
	TName   WwiseName
	TRadius DT_RANGE[*DT_FLOAT]
	BInvert DT_INT
}

func (t *DynamicGameParameter) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.TName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.TRadius, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.BInvert, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *DynamicGameParameter) Walk(cb WalkCallback, d ...any) {
	cb.Do("TName", &t.TName, d...)
	cb.Do("TRadius", &t.TRadius, d...)
	cb.Do("BInvert", &t.BInvert, d...)
}

type SpawnerGizmoInstanceData struct {
	ESpawnTriggerType               DT_ENUM
	PtProxData                      DT_POLYMORPHIC_VARIABLEARRAY[*ProximityDataBase]
	SnoPowerSummoned                DT_SNO
	SnoEffectGroupSummoned          DT_SNO
	SnoSpawnEffectGroup             DT_SNO
	SnoSpawnEffectGroupActorToActor DT_SNO
	ESpawnMonsterRarity             DT_ENUM
	HFlavorTextOverride             DT_UINT
	SnoTreasureClassOverride        DT_SNO
	ArActorGroups                   DT_VARIABLEARRAY[*DT_GBID]
	ArPrefabScopedActorGroups       DT_VARIABLEARRAY[*DT_GBID]
	ArMonsterTagOverride            DT_VARIABLEARRAY[*MonsterTagOverrideData]
	Unk_5ba0830                     DT_INT
	TSpawnInitialDelayRange         DT_RANGE[*DT_FLOAT]
	TSpawnTimeRange                 DT_RANGE[*DT_FLOAT]
	TSpawnQuantityRange             DT_RANGE[*DT_INT]
	FlSpawnStayOpenTime             DT_FLOAT
	FlDelayBeforeDeath              DT_FLOAT
	FSpawnTimeIsADelay              DT_INT
	NSpawnMaxCount                  DT_INT
	NSpawnMaxGenerated              DT_INT
	SnoSpawnCondition               DT_SNO
	Unk_b123ad6                     DT_INT
	Unk_b694fec                     DT_FLOAT
	FDontPerturb                    DT_INT
	FUseLinkedMarkersForLocation    DT_INT
	Unk_915258d                     DT_INT
	Unk_b043709                     DT_INT
	TOffsetRadius                   DT_RANGE[*DT_INT]
	EFacingType                     DT_ENUM
	FlSpecificFacing                DT_FLOAT
	Unk_c9a925d                     DT_INT
	Unk_3d07f2f                     DT_RANGE[*DT_INT]
	FSpawnedMonstersGiveLoot        DT_INT
	FSpawnedMonstersGiveXP          DT_INT
}

func (t *SpawnerGizmoInstanceData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.ESpawnTriggerType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.PtProxData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.SnoPowerSummoned, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.SnoEffectGroupSummoned, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.SnoSpawnEffectGroup, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.SnoSpawnEffectGroupActorToActor, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.ESpawnMonsterRarity, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.HFlavorTextOverride, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.SnoTreasureClassOverride, r, &Options{
		Flags: 1,
		Group: 52,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.ArActorGroups, r, &Options{
		Flags: 1,
		Group: 24,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.ArPrefabScopedActorGroups, r, &Options{
		Flags: 1,
		Group: 51,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.ArMonsterTagOverride, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.Unk_5ba0830, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+116, &t.TSpawnInitialDelayRange, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+124, &t.TSpawnTimeRange, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+132, &t.TSpawnQuantityRange, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+140, &t.FlSpawnStayOpenTime, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+144, &t.FlDelayBeforeDeath, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+148, &t.FSpawnTimeIsADelay, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+152, &t.NSpawnMaxCount, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+156, &t.NSpawnMaxGenerated, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+160, &t.SnoSpawnCondition, r, &Options{
		Flags: 1,
		Group: 51,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+164, &t.Unk_b123ad6, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+168, &t.Unk_b694fec, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+172, &t.FDontPerturb, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+176, &t.FUseLinkedMarkersForLocation, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+180, &t.Unk_915258d, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+184, &t.Unk_b043709, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+188, &t.TOffsetRadius, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+196, &t.EFacingType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+200, &t.FlSpecificFacing, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+204, &t.Unk_c9a925d, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+208, &t.Unk_3d07f2f, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+216, &t.FSpawnedMonstersGiveLoot, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+220, &t.FSpawnedMonstersGiveXP, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+224, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *SpawnerGizmoInstanceData) Walk(cb WalkCallback, d ...any) {
	cb.Do("ESpawnTriggerType", &t.ESpawnTriggerType, d...)
	cb.Do("PtProxData", &t.PtProxData, d...)
	cb.Do("SnoPowerSummoned", &t.SnoPowerSummoned, d...)
	cb.Do("SnoEffectGroupSummoned", &t.SnoEffectGroupSummoned, d...)
	cb.Do("SnoSpawnEffectGroup", &t.SnoSpawnEffectGroup, d...)
	cb.Do("SnoSpawnEffectGroupActorToActor", &t.SnoSpawnEffectGroupActorToActor, d...)
	cb.Do("ESpawnMonsterRarity", &t.ESpawnMonsterRarity, d...)
	cb.Do("HFlavorTextOverride", &t.HFlavorTextOverride, d...)
	cb.Do("SnoTreasureClassOverride", &t.SnoTreasureClassOverride, d...)
	cb.Do("ArActorGroups", &t.ArActorGroups, d...)
	cb.Do("ArPrefabScopedActorGroups", &t.ArPrefabScopedActorGroups, d...)
	cb.Do("ArMonsterTagOverride", &t.ArMonsterTagOverride, d...)
	cb.Do("Unk_5ba0830", &t.Unk_5ba0830, d...)
	cb.Do("TSpawnInitialDelayRange", &t.TSpawnInitialDelayRange, d...)
	cb.Do("TSpawnTimeRange", &t.TSpawnTimeRange, d...)
	cb.Do("TSpawnQuantityRange", &t.TSpawnQuantityRange, d...)
	cb.Do("FlSpawnStayOpenTime", &t.FlSpawnStayOpenTime, d...)
	cb.Do("FlDelayBeforeDeath", &t.FlDelayBeforeDeath, d...)
	cb.Do("FSpawnTimeIsADelay", &t.FSpawnTimeIsADelay, d...)
	cb.Do("NSpawnMaxCount", &t.NSpawnMaxCount, d...)
	cb.Do("NSpawnMaxGenerated", &t.NSpawnMaxGenerated, d...)
	cb.Do("SnoSpawnCondition", &t.SnoSpawnCondition, d...)
	cb.Do("Unk_b123ad6", &t.Unk_b123ad6, d...)
	cb.Do("Unk_b694fec", &t.Unk_b694fec, d...)
	cb.Do("FDontPerturb", &t.FDontPerturb, d...)
	cb.Do("FUseLinkedMarkersForLocation", &t.FUseLinkedMarkersForLocation, d...)
	cb.Do("Unk_915258d", &t.Unk_915258d, d...)
	cb.Do("Unk_b043709", &t.Unk_b043709, d...)
	cb.Do("TOffsetRadius", &t.TOffsetRadius, d...)
	cb.Do("EFacingType", &t.EFacingType, d...)
	cb.Do("FlSpecificFacing", &t.FlSpecificFacing, d...)
	cb.Do("Unk_c9a925d", &t.Unk_c9a925d, d...)
	cb.Do("Unk_3d07f2f", &t.Unk_3d07f2f, d...)
	cb.Do("FSpawnedMonstersGiveLoot", &t.FSpawnedMonstersGiveLoot, d...)
	cb.Do("FSpawnedMonstersGiveXP", &t.FSpawnedMonstersGiveXP, d...)
}

type AttributeFormulaEntry struct {
	THeader  GBIDHeader
	ArRanges DT_VARIABLEARRAY[*AttributeFormulaRange]
}

func (t *AttributeFormulaEntry) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+264, &t.ArRanges, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+280, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *AttributeFormulaEntry) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("ArRanges", &t.ArRanges, d...)
}

type QuestChestGizmoData struct {
	// Inherits ActorGizmoData
	// Inherits PolymorphicBase
	DwType                           DT_UINT
	DwPad                            DT_UINT
	FDisableNonFriendlyOperation     DT_INT
	FWalkToCenter                    DT_INT
	FGizmoStartsDisabled             DT_INT
	FUseStringListName               DT_INT
	FForceMinimapIcon                DT_INT
	FlOperationRadius                DT_FLOAT
	Unk_d0b1df5                      DT_FLOAT
	FlGizmoUseTime                   DT_FLOAT
	SnoChannelingEffect              DT_SNO
	Unk_2767229                      DT_INT
	FGizmoShowProgressBar            DT_INT
	Unk_6d9ebe1                      DT_INT
	Unk_5456245                      DT_INT
	Unk_af5815a                      DT_INT
	SnoOnClickEffect                 DT_SNO
	SnoPickedUpEffect                DT_SNO
	SnoDropOnGroundEffect            DT_SNO
	TConditionData                   GizmoConditionData
	SnoPowerOperator                 DT_SNO
	SnoPowerOperate                  DT_SNO
	SnoPowerOperatorActive           DT_SNO
	SnoPowerOperateActive            DT_SNO
	Unk_359810e                      DT_INT
	NCooldown                        DT_UINT
	Unk_9c8478e                      DT_UINT
	Unk_d45ed2d                      DT_INT
	Unk_f6b20b7                      DT_INT
	Unk_54513b8                      DT_INT
	Unk_fd1f378                      DT_UINT
	HGizmoOperateFlavorTextMsgLabel  DT_UINT
	HGizmoOperateDescriptionMsgLabel DT_UINT
	FlGizmoOperateOffset             DT_FLOAT
	Unk_ab58cd3                      DT_ENUM
	Unk_91a3966                      DT_UINT
	HGizmoChannelingLabel            DT_UINT
	Unk_4be4371                      DT_INT
	Unk_ebdd077                      DT_INT
}

func (t *QuestChestGizmoData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.FDisableNonFriendlyOperation, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.FWalkToCenter, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.FGizmoStartsDisabled, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.FUseStringListName, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.FForceMinimapIcon, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.FlOperationRadius, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.Unk_d0b1df5, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.FlGizmoUseTime, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.SnoChannelingEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.Unk_2767229, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.FGizmoShowProgressBar, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+60, &t.Unk_6d9ebe1, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.Unk_5456245, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.Unk_af5815a, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.SnoOnClickEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.SnoPickedUpEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.SnoDropOnGroundEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.TConditionData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.SnoPowerOperator, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.SnoPowerOperate, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.SnoPowerOperatorActive, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+100, &t.SnoPowerOperateActive, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+104, &t.Unk_359810e, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+108, &t.NCooldown, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.Unk_9c8478e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+116, &t.Unk_d45ed2d, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.Unk_f6b20b7, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+124, &t.Unk_54513b8, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.Unk_fd1f378, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+132, &t.HGizmoOperateFlavorTextMsgLabel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+136, &t.HGizmoOperateDescriptionMsgLabel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+140, &t.FlGizmoOperateOffset, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+144, &t.Unk_ab58cd3, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+148, &t.Unk_91a3966, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+152, &t.HGizmoChannelingLabel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+156, &t.Unk_4be4371, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+160, &t.Unk_ebdd077, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+168, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *QuestChestGizmoData) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("FDisableNonFriendlyOperation", &t.FDisableNonFriendlyOperation, d...)
	cb.Do("FWalkToCenter", &t.FWalkToCenter, d...)
	cb.Do("FGizmoStartsDisabled", &t.FGizmoStartsDisabled, d...)
	cb.Do("FUseStringListName", &t.FUseStringListName, d...)
	cb.Do("FForceMinimapIcon", &t.FForceMinimapIcon, d...)
	cb.Do("FlOperationRadius", &t.FlOperationRadius, d...)
	cb.Do("Unk_d0b1df5", &t.Unk_d0b1df5, d...)
	cb.Do("FlGizmoUseTime", &t.FlGizmoUseTime, d...)
	cb.Do("SnoChannelingEffect", &t.SnoChannelingEffect, d...)
	cb.Do("Unk_2767229", &t.Unk_2767229, d...)
	cb.Do("FGizmoShowProgressBar", &t.FGizmoShowProgressBar, d...)
	cb.Do("Unk_6d9ebe1", &t.Unk_6d9ebe1, d...)
	cb.Do("Unk_5456245", &t.Unk_5456245, d...)
	cb.Do("Unk_af5815a", &t.Unk_af5815a, d...)
	cb.Do("SnoOnClickEffect", &t.SnoOnClickEffect, d...)
	cb.Do("SnoPickedUpEffect", &t.SnoPickedUpEffect, d...)
	cb.Do("SnoDropOnGroundEffect", &t.SnoDropOnGroundEffect, d...)
	cb.Do("TConditionData", &t.TConditionData, d...)
	cb.Do("SnoPowerOperator", &t.SnoPowerOperator, d...)
	cb.Do("SnoPowerOperate", &t.SnoPowerOperate, d...)
	cb.Do("SnoPowerOperatorActive", &t.SnoPowerOperatorActive, d...)
	cb.Do("SnoPowerOperateActive", &t.SnoPowerOperateActive, d...)
	cb.Do("Unk_359810e", &t.Unk_359810e, d...)
	cb.Do("NCooldown", &t.NCooldown, d...)
	cb.Do("Unk_9c8478e", &t.Unk_9c8478e, d...)
	cb.Do("Unk_d45ed2d", &t.Unk_d45ed2d, d...)
	cb.Do("Unk_f6b20b7", &t.Unk_f6b20b7, d...)
	cb.Do("Unk_54513b8", &t.Unk_54513b8, d...)
	cb.Do("Unk_fd1f378", &t.Unk_fd1f378, d...)
	cb.Do("HGizmoOperateFlavorTextMsgLabel", &t.HGizmoOperateFlavorTextMsgLabel, d...)
	cb.Do("HGizmoOperateDescriptionMsgLabel", &t.HGizmoOperateDescriptionMsgLabel, d...)
	cb.Do("FlGizmoOperateOffset", &t.FlGizmoOperateOffset, d...)
	cb.Do("Unk_ab58cd3", &t.Unk_ab58cd3, d...)
	cb.Do("Unk_91a3966", &t.Unk_91a3966, d...)
	cb.Do("HGizmoChannelingLabel", &t.HGizmoChannelingLabel, d...)
	cb.Do("Unk_4be4371", &t.Unk_4be4371, d...)
	cb.Do("Unk_ebdd077", &t.Unk_ebdd077, d...)
}

type CollisionHeightField struct {
	Transform             PRTransform
	FWater                DT_INT
	FLandscape            DT_INT
	HeightDataMirror      dmHeightDataMirror
	PtDominoHeightSamples DT_VARIABLEARRAY[*dmHeightSampleMirror]
	PtWaterFlowDirection  DT_VARIABLEARRAY[*DT_VECTOR2D]
}

func (t *CollisionHeightField) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Transform, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.FWater, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.FLandscape, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.HeightDataMirror, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.PtDominoHeightSamples, r, &Options{Flags: 2097153}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.PtWaterFlowDirection, r, &Options{Flags: 2097153}); err != nil {
		return err
	}
	if _, err := r.Seek(p+104, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *CollisionHeightField) Walk(cb WalkCallback, d ...any) {
	cb.Do("Transform", &t.Transform, d...)
	cb.Do("FWater", &t.FWater, d...)
	cb.Do("FLandscape", &t.FLandscape, d...)
	cb.Do("HeightDataMirror", &t.HeightDataMirror, d...)
	cb.Do("PtDominoHeightSamples", &t.PtDominoHeightSamples, d...)
	cb.Do("PtWaterFlowDirection", &t.PtWaterFlowDirection, d...)
}

type TexAnimTranslation struct {
	// Inherits TexAnim
	// Inherits PolymorphicBase
	DwType               DT_UINT
	DwPad                DT_UINT
	FlUScale             DT_FLOAT
	FlVScale             DT_FLOAT
	FlUTransInitial      DT_FLOAT
	Unk_803e8a7          DT_RANGE[*DT_FLOAT]
	Unk_d28788e          InterpolationScalar
	FlVTransInitial      DT_FLOAT
	Unk_42b1708          DT_RANGE[*DT_FLOAT]
	Unk_6fe64f           InterpolationScalar
	EPinTranslation      DT_ENUM
	EOrderOperation      DT_ENUM
	Unk_96b1a52          DT_UINT
	Unk_ec7cf93          DT_UINT
	DwAnimFlags          DT_UINT
	Unk_e5b0c7f          DT_RANGE[*DT_FLOAT]
	FXOffset             DT_FLOAT
	FYOffset             DT_FLOAT
	ARotationInitial     DT_FLOAT
	DwRotationRandomSeed DT_UINT
	TUScaleScalar        InterpolationScalar
	TVScaleScalar        InterpolationScalar
}

func (t *TexAnimTranslation) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.FlUScale, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.FlVScale, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.FlUTransInitial, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.Unk_803e8a7, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.Unk_d28788e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.FlVTransInitial, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_42b1708, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.Unk_6fe64f, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.EPinTranslation, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+116, &t.EOrderOperation, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.Unk_96b1a52, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+124, &t.Unk_ec7cf93, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.DwAnimFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+132, &t.Unk_e5b0c7f, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+140, &t.FXOffset, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+144, &t.FYOffset, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+148, &t.ARotationInitial, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+152, &t.DwRotationRandomSeed, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+156, &t.TUScaleScalar, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+188, &t.TVScaleScalar, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+224, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TexAnimTranslation) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("FlUScale", &t.FlUScale, d...)
	cb.Do("FlVScale", &t.FlVScale, d...)
	cb.Do("FlUTransInitial", &t.FlUTransInitial, d...)
	cb.Do("Unk_803e8a7", &t.Unk_803e8a7, d...)
	cb.Do("Unk_d28788e", &t.Unk_d28788e, d...)
	cb.Do("FlVTransInitial", &t.FlVTransInitial, d...)
	cb.Do("Unk_42b1708", &t.Unk_42b1708, d...)
	cb.Do("Unk_6fe64f", &t.Unk_6fe64f, d...)
	cb.Do("EPinTranslation", &t.EPinTranslation, d...)
	cb.Do("EOrderOperation", &t.EOrderOperation, d...)
	cb.Do("Unk_96b1a52", &t.Unk_96b1a52, d...)
	cb.Do("Unk_ec7cf93", &t.Unk_ec7cf93, d...)
	cb.Do("DwAnimFlags", &t.DwAnimFlags, d...)
	cb.Do("Unk_e5b0c7f", &t.Unk_e5b0c7f, d...)
	cb.Do("FXOffset", &t.FXOffset, d...)
	cb.Do("FYOffset", &t.FYOffset, d...)
	cb.Do("ARotationInitial", &t.ARotationInitial, d...)
	cb.Do("DwRotationRandomSeed", &t.DwRotationRandomSeed, d...)
	cb.Do("TUScaleScalar", &t.TUScaleScalar, d...)
	cb.Do("TVScaleScalar", &t.TVScaleScalar, d...)
}

type WallScatterData struct {
	ArPieces          DT_VARIABLEARRAY[*WallPiece]
	EPieceSelectMode  DT_ENUM
	Unk_755f012       DT_RANGE[*DT_FLOAT]
	THorizontalOffset DT_RANGE[*DT_FLOAT]
	TScale            DT_RANGE[*DT_FLOAT]
	TYaw              DT_RANGE[*DT_FLOAT]
	Unk_609e23d       DT_INT
	Unk_d8fcfe4       DT_INT
	Unk_435bdfd       DT_INT
	Unk_f2dbd17       DT_INT
	TVerticalOffset   DT_RANGE[*DT_FLOAT]
	Unk_2a8c4b6       DT_FLOAT
}

func (t *WallScatterData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.ArPieces, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.EPieceSelectMode, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.Unk_755f012, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.THorizontalOffset, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.TScale, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.TYaw, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.Unk_609e23d, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.Unk_d8fcfe4, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+60, &t.Unk_435bdfd, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.Unk_f2dbd17, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.TVerticalOffset, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.Unk_2a8c4b6, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+80, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *WallScatterData) Walk(cb WalkCallback, d ...any) {
	cb.Do("ArPieces", &t.ArPieces, d...)
	cb.Do("EPieceSelectMode", &t.EPieceSelectMode, d...)
	cb.Do("Unk_755f012", &t.Unk_755f012, d...)
	cb.Do("THorizontalOffset", &t.THorizontalOffset, d...)
	cb.Do("TScale", &t.TScale, d...)
	cb.Do("TYaw", &t.TYaw, d...)
	cb.Do("Unk_609e23d", &t.Unk_609e23d, d...)
	cb.Do("Unk_d8fcfe4", &t.Unk_d8fcfe4, d...)
	cb.Do("Unk_435bdfd", &t.Unk_435bdfd, d...)
	cb.Do("Unk_f2dbd17", &t.Unk_f2dbd17, d...)
	cb.Do("TVerticalOffset", &t.TVerticalOffset, d...)
	cb.Do("Unk_2a8c4b6", &t.Unk_2a8c4b6, d...)
}

type MarkerFolder struct {
	NParentFolderID    DT_INT
	NID                DT_INT
	EType              DT_ENUM
	SnoPrefab          DT_SNO
	NPrefabOriginalID  DT_INT
	SzName             DT_CSTRING[*DT_BYTE]
	Unk_c7bd9ba        DT_INT
	NParentFolderIndex DT_INT
	FIsSpawned         DT_INT
	FCanBeCustomized   DT_INT
	FIsCustomized      DT_INT
}

func (t *MarkerFolder) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.NParentFolderID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.NID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.EType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.SnoPrefab, r, &Options{
		Flags: 1,
		Group: 24,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.NPrefabOriginalID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SzName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.Unk_c7bd9ba, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.NParentFolderIndex, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.FIsSpawned, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.FCanBeCustomized, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.FIsCustomized, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+64, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *MarkerFolder) Walk(cb WalkCallback, d ...any) {
	cb.Do("NParentFolderID", &t.NParentFolderID, d...)
	cb.Do("NID", &t.NID, d...)
	cb.Do("EType", &t.EType, d...)
	cb.Do("SnoPrefab", &t.SnoPrefab, d...)
	cb.Do("NPrefabOriginalID", &t.NPrefabOriginalID, d...)
	cb.Do("SzName", &t.SzName, d...)
	cb.Do("Unk_c7bd9ba", &t.Unk_c7bd9ba, d...)
	cb.Do("NParentFolderIndex", &t.NParentFolderIndex, d...)
	cb.Do("FIsSpawned", &t.FIsSpawned, d...)
	cb.Do("FCanBeCustomized", &t.FCanBeCustomized, d...)
	cb.Do("FIsCustomized", &t.FIsCustomized, d...)
}

type PowerFormulaTableEntry_Table struct {
	// Inherits GameBalanceTable
	// Inherits PolymorphicBase
	DwType   DT_UINT
	DwPad    DT_UINT
	TEntries DT_VARIABLEARRAY[*PowerFormulaTableEntry]
}

func (t *PowerFormulaTableEntry_Table) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TEntries, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PowerFormulaTableEntry_Table) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("TEntries", &t.TEntries, d...)
}

type DesignerVariable struct {
	THeader         GBIDHeader
	EScope          DT_ENUM
	EType           DT_ENUM
	NDefaultValue   DT_INT
	NDefaultString  DT_UINT
	EGameReset      DT_ENUM
	EPlayerReset    DT_ENUM
	NResetDuration  DT_INT
	NResetInterval  DT_INT
	SnoResetSubzone DT_SNO
	SnoResetQuest   DT_SNO
	ArUsedStrings   DT_VARIABLEARRAY[*DT_UINT]
}

func (t *DesignerVariable) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+260, &t.EScope, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+264, &t.EType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+268, &t.NDefaultValue, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+272, &t.NDefaultString, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+276, &t.EGameReset, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+280, &t.EPlayerReset, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+284, &t.NResetDuration, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+288, &t.NResetInterval, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+292, &t.SnoResetSubzone, r, &Options{
		Flags: 1,
		Group: 80,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+296, &t.SnoResetQuest, r, &Options{
		Flags: 1,
		Group: 31,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+304, &t.ArUsedStrings, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+320, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *DesignerVariable) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("EScope", &t.EScope, d...)
	cb.Do("EType", &t.EType, d...)
	cb.Do("NDefaultValue", &t.NDefaultValue, d...)
	cb.Do("NDefaultString", &t.NDefaultString, d...)
	cb.Do("EGameReset", &t.EGameReset, d...)
	cb.Do("EPlayerReset", &t.EPlayerReset, d...)
	cb.Do("NResetDuration", &t.NResetDuration, d...)
	cb.Do("NResetInterval", &t.NResetInterval, d...)
	cb.Do("SnoResetSubzone", &t.SnoResetSubzone, d...)
	cb.Do("SnoResetQuest", &t.SnoResetQuest, d...)
	cb.Do("ArUsedStrings", &t.ArUsedStrings, d...)
}

type AttributeFormulaRange struct {
	NItemPowerRangeStart DT_INT
	TValueRange          DT_RANGE[*DT_FLOAT]
	TFormula             DT_STRING_FORMULA
}

func (t *AttributeFormulaRange) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.NItemPowerRangeStart, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.TValueRange, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TFormula, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *AttributeFormulaRange) Walk(cb WalkCallback, d ...any) {
	cb.Do("NItemPowerRangeStart", &t.NItemPowerRangeStart, d...)
	cb.Do("TValueRange", &t.TValueRange, d...)
	cb.Do("TFormula", &t.TFormula, d...)
}

type DRLGSpawnGroupTypeData struct {
	TSpawnGroupCountRange DT_RANGE[*DT_INT]
	Unk_90a5a75           DT_FLOAT
	Unk_1ad4878           DT_SNO
	Unk_b0e2c7            DT_RANGE[*DT_INT]
	Unk_49f6f23           DT_INT
}

func (t *DRLGSpawnGroupTypeData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.TSpawnGroupCountRange, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.Unk_90a5a75, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.Unk_1ad4878, r, &Options{
		Flags: 1,
		Group: 84,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_b0e2c7, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_49f6f23, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+28, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *DRLGSpawnGroupTypeData) Walk(cb WalkCallback, d ...any) {
	cb.Do("TSpawnGroupCountRange", &t.TSpawnGroupCountRange, d...)
	cb.Do("Unk_90a5a75", &t.Unk_90a5a75, d...)
	cb.Do("Unk_1ad4878", &t.Unk_1ad4878, d...)
	cb.Do("Unk_b0e2c7", &t.Unk_b0e2c7, d...)
	cb.Do("Unk_49f6f23", &t.Unk_49f6f23, d...)
}

type dmInputTriangleMirror struct {
	I1            DT_INT
	I2            DT_INT
	I3            DT_INT
	DwMaterialId  DT_WORD
	DwGameFlags   DT_WORD
	DwIncludeMask DT_WORD
}

func (t *dmInputTriangleMirror) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.I1, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.I2, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.I3, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwMaterialId, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+14, &t.DwGameFlags, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.DwIncludeMask, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+20, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *dmInputTriangleMirror) Walk(cb WalkCallback, d ...any) {
	cb.Do("I1", &t.I1, d...)
	cb.Do("I2", &t.I2, d...)
	cb.Do("I3", &t.I3, d...)
	cb.Do("DwMaterialId", &t.DwMaterialId, d...)
	cb.Do("DwGameFlags", &t.DwGameFlags, d...)
	cb.Do("DwIncludeMask", &t.DwIncludeMask, d...)
}

type PowerConditionIsActorBerserk struct {
	// Inherits PowerConditionBase
	// Inherits PolymorphicBase
	DwType   DT_UINT
	BInverse DT_INT
	DwPad    DT_UINT
	ESubject DT_ENUM
}

func (t *PowerConditionIsActorBerserk) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BInverse, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ESubject, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PowerConditionIsActorBerserk) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("BInverse", &t.BInverse, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("ESubject", &t.ESubject, d...)
}

type BoneKeyInfo struct {
	Unk_b3f7acb DT_INT
	Unk_b22ae3c DT_INT
	TTangents   AnimTangent
}

func (t *BoneKeyInfo) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Unk_b3f7acb, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.Unk_b22ae3c, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.TTangents, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+56, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *BoneKeyInfo) Walk(cb WalkCallback, d ...any) {
	cb.Do("Unk_b3f7acb", &t.Unk_b3f7acb, d...)
	cb.Do("Unk_b22ae3c", &t.Unk_b22ae3c, d...)
	cb.Do("TTangents", &t.TTangents, d...)
}

type CampaignChain struct {
	DwID          DT_UINT
	SnoQuestChain DT_SNO
}

func (t *CampaignChain) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.DwID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.SnoQuestChain, r, &Options{
		Flags: 1,
		Group: 96,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *CampaignChain) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwID", &t.DwID, d...)
	cb.Do("SnoQuestChain", &t.SnoQuestChain, d...)
}

type GameTestingSkillSamplingStartMessage struct {
	THeader     RequiredMessageHeader
	Unk_e99ade5 DT_CHARARRAY
	SzPowerName DT_CHARARRAY
	SnoClass    DT_SNO
}

func (t *GameTestingSkillSamplingStartMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_e99ade5, r, &Options{
		ArrayLength: 64,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.SzPowerName, r, &Options{
		ArrayLength: 64,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+144, &t.SnoClass, r, &Options{
		Flags: 1,
		Group: 74,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+148, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *GameTestingSkillSamplingStartMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("Unk_e99ade5", &t.Unk_e99ade5, d...)
	cb.Do("SzPowerName", &t.SzPowerName, d...)
	cb.Do("SnoClass", &t.SnoClass, d...)
}

type OnDismountCallback struct {
	// Inherits BuffCallbackBase
	// Inherits PolymorphicBase
	DwType                DT_UINT
	DwPad                 DT_UINT
	SnoTriggerEffectGroup DT_SNO
	ArConditions          DT_POLYMORPHIC_VARIABLEARRAY[*DT_INT64]
}

func (t *OnDismountCallback) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoTriggerEffectGroup, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ArConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *OnDismountCallback) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("SnoTriggerEffectGroup", &t.SnoTriggerEffectGroup, d...)
	cb.Do("ArConditions", &t.ArConditions, d...)
}

type TriggerEventCameraFollowSpline struct {
	// Inherits TriggerEventRangedDuration
	// Inherits TriggerEvent
	// Inherits PolymorphicBase
	DwType                     DT_UINT
	TConditions                TriggerConditions
	FGenerated                 DT_INT
	Unk_6cba752                DT_INT
	DwParentActorID            DT_UINT
	TDuration                  DT_FLOAT
	DwTriggerFlags             DT_UINT
	DwTriggerFlagsEx           DT_UINT
	TCleanup                   TriggerCleanup
	Unk_49e9257                DT_INT
	Unk_5490979                DT_INT
	DwPad                      DT_UINT
	FlBlendTime                DT_FLOAT
	SzSplineName               DT_UINT
	Unk_30b49c2                DT_ENUM
	Unk_8781d26                DT_UINT
	Unk_9a31592                DT_UINT
	FlFirstPercent             DT_FLOAT
	FlLastPercent              DT_FLOAT
	FlFirstDistance            DT_FLOAT
	FlLastDistance             DT_FLOAT
	Unk_71c05df                DT_INT
	Unk_325b1ab                DT_INT
	EEasing                    DT_ENUM
	TEasingWeight              SplineEasingWeight
	Unk_802b7b                 DT_INT
	SnoObserverForOrientation  DT_SNO
	EOrientationMode           DT_ENUM
	TransformOffset            PRTransform
	ELookAtTargetType          DT_ENUM
	Unk_6101673                DT_UINT
	THardpointLinkLookAtTarget HardpointLink
	DwLookAtTargetID           DT_UINT
	VecTargetOffset            DT_VECTOR3D
	EMicrophoneMode            DT_ENUM
	VecMicrophoneOffset        DT_VECTOR3D
	EEasingType                DT_ENUM
	EBlendEasing               DT_ENUM
	EFollowSplineInterpolation DT_ENUM
	FlInTangentWeight          DT_FLOAT
	FlOutTangentWeight         DT_FLOAT
}

func (t *TriggerEventCameraFollowSpline) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.FGenerated, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_6cba752, r, &Options{Flags: 16}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.DwParentActorID, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.TDuration, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.DwTriggerFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.DwTriggerFlagsEx, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.TCleanup, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+116, &t.Unk_49e9257, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.Unk_5490979, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+124, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.FlBlendTime, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+132, &t.SzSplineName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+136, &t.Unk_30b49c2, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+140, &t.Unk_8781d26, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+144, &t.Unk_9a31592, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+148, &t.FlFirstPercent, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+152, &t.FlLastPercent, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+156, &t.FlFirstDistance, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+160, &t.FlLastDistance, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+164, &t.Unk_71c05df, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+168, &t.Unk_325b1ab, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+172, &t.EEasing, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+176, &t.TEasingWeight, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+188, &t.Unk_802b7b, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+192, &t.SnoObserverForOrientation, r, &Options{
		Flags: 1,
		Group: 26,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+196, &t.EOrientationMode, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+200, &t.TransformOffset, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+228, &t.ELookAtTargetType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+232, &t.Unk_6101673, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+236, &t.THardpointLinkLookAtTarget, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+244, &t.DwLookAtTargetID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+248, &t.VecTargetOffset, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+260, &t.EMicrophoneMode, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+264, &t.VecMicrophoneOffset, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+276, &t.EEasingType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+280, &t.EBlendEasing, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+284, &t.EFollowSplineInterpolation, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+288, &t.FlInTangentWeight, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+292, &t.FlOutTangentWeight, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+296, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TriggerEventCameraFollowSpline) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("TConditions", &t.TConditions, d...)
	cb.Do("FGenerated", &t.FGenerated, d...)
	cb.Do("Unk_6cba752", &t.Unk_6cba752, d...)
	cb.Do("DwParentActorID", &t.DwParentActorID, d...)
	cb.Do("TDuration", &t.TDuration, d...)
	cb.Do("DwTriggerFlags", &t.DwTriggerFlags, d...)
	cb.Do("DwTriggerFlagsEx", &t.DwTriggerFlagsEx, d...)
	cb.Do("TCleanup", &t.TCleanup, d...)
	cb.Do("Unk_49e9257", &t.Unk_49e9257, d...)
	cb.Do("Unk_5490979", &t.Unk_5490979, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("FlBlendTime", &t.FlBlendTime, d...)
	cb.Do("SzSplineName", &t.SzSplineName, d...)
	cb.Do("Unk_30b49c2", &t.Unk_30b49c2, d...)
	cb.Do("Unk_8781d26", &t.Unk_8781d26, d...)
	cb.Do("Unk_9a31592", &t.Unk_9a31592, d...)
	cb.Do("FlFirstPercent", &t.FlFirstPercent, d...)
	cb.Do("FlLastPercent", &t.FlLastPercent, d...)
	cb.Do("FlFirstDistance", &t.FlFirstDistance, d...)
	cb.Do("FlLastDistance", &t.FlLastDistance, d...)
	cb.Do("Unk_71c05df", &t.Unk_71c05df, d...)
	cb.Do("Unk_325b1ab", &t.Unk_325b1ab, d...)
	cb.Do("EEasing", &t.EEasing, d...)
	cb.Do("TEasingWeight", &t.TEasingWeight, d...)
	cb.Do("Unk_802b7b", &t.Unk_802b7b, d...)
	cb.Do("SnoObserverForOrientation", &t.SnoObserverForOrientation, d...)
	cb.Do("EOrientationMode", &t.EOrientationMode, d...)
	cb.Do("TransformOffset", &t.TransformOffset, d...)
	cb.Do("ELookAtTargetType", &t.ELookAtTargetType, d...)
	cb.Do("Unk_6101673", &t.Unk_6101673, d...)
	cb.Do("THardpointLinkLookAtTarget", &t.THardpointLinkLookAtTarget, d...)
	cb.Do("DwLookAtTargetID", &t.DwLookAtTargetID, d...)
	cb.Do("VecTargetOffset", &t.VecTargetOffset, d...)
	cb.Do("EMicrophoneMode", &t.EMicrophoneMode, d...)
	cb.Do("VecMicrophoneOffset", &t.VecMicrophoneOffset, d...)
	cb.Do("EEasingType", &t.EEasingType, d...)
	cb.Do("EBlendEasing", &t.EBlendEasing, d...)
	cb.Do("EFollowSplineInterpolation", &t.EFollowSplineInterpolation, d...)
	cb.Do("FlInTangentWeight", &t.FlInTangentWeight, d...)
	cb.Do("FlOutTangentWeight", &t.FlOutTangentWeight, d...)
}

type MaterialTexture struct {
	SnoTex             DT_SNO
	PtTexAnim          DT_POLYMORPHIC_VARIABLEARRAY[*TexAnim]
	NTexAnimStateIndex DT_INT
}

func (t *MaterialTexture) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoTex, r, &Options{
		Flags: 1,
		Group: 44,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.PtTexAnim, r, &Options{Flags: 262145}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.NTexAnimStateIndex, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+40, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *MaterialTexture) Walk(cb WalkCallback, d ...any) {
	cb.Do("SnoTex", &t.SnoTex, d...)
	cb.Do("PtTexAnim", &t.PtTexAnim, d...)
	cb.Do("NTexAnimStateIndex", &t.NTexAnimStateIndex, d...)
}

type StorePreviewCameraPositioning struct {
	SzBaseCamera DT_UINT
	FlScale      DT_FLOAT
	Unk_adeec18  DT_ENUM
	Unk_c1e1359  DT_FLOAT
	Unk_479eba2  PRTransform
	Unk_fc35c24  DT_FLOAT
	Unk_60a2e66  DT_FLOAT
	ArZoomLevels DT_VARIABLEARRAY[*StoreCameraZoomMapping]
}

func (t *StorePreviewCameraPositioning) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SzBaseCamera, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.FlScale, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.Unk_adeec18, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.Unk_c1e1359, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_479eba2, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.Unk_fc35c24, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.Unk_60a2e66, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.ArZoomLevels, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+72, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *StorePreviewCameraPositioning) Walk(cb WalkCallback, d ...any) {
	cb.Do("SzBaseCamera", &t.SzBaseCamera, d...)
	cb.Do("FlScale", &t.FlScale, d...)
	cb.Do("Unk_adeec18", &t.Unk_adeec18, d...)
	cb.Do("Unk_c1e1359", &t.Unk_c1e1359, d...)
	cb.Do("Unk_479eba2", &t.Unk_479eba2, d...)
	cb.Do("Unk_fc35c24", &t.Unk_fc35c24, d...)
	cb.Do("Unk_60a2e66", &t.Unk_60a2e66, d...)
	cb.Do("ArZoomLevels", &t.ArZoomLevels, d...)
}

type Animation2DDefinition struct {
	TFrameAnim FrameAnim
	SnoSound   DT_SNO
	PtFrames   DT_VARIABLEARRAY[*Anim2DFrame]
}

func (t *Animation2DDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.TFrameAnim, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.SnoSound, r, &Options{
		Flags: 1,
		Group: 40,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.PtFrames, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+64, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Animation2DDefinition) Walk(cb WalkCallback, d ...any) {
	cb.Do("TFrameAnim", &t.TFrameAnim, d...)
	cb.Do("SnoSound", &t.SnoSound, d...)
	cb.Do("PtFrames", &t.PtFrames, d...)
}

type ShaderOverride struct {
	DwShaderMapOverride      DT_UINT
	SnoMinDefault            DT_SNO
	SnoMinDefaultBaseShader  DT_SNO
	SnoMedDefault            DT_SNO
	SnoMedDefaultBaseShader  DT_SNO
	SnoHighDefault           DT_SNO
	SnoHighDefaultBaseShader DT_SNO
	SnoHighlight             DT_SNO
	SnoLootOverlay           DT_SNO
	SnoOccluded              DT_SNO
	SnoDepth                 DT_SNO
	SnoCookie                DT_SNO
	SnoCookieBaseShader      DT_SNO
	SnoUIRActor              DT_SNO
	SnoFaded                 DT_SNO
	SnoFur                   DT_SNO
	SnoFurBaseShader         DT_SNO
	SnoPowerCenters          DT_SNO
}

func (t *ShaderOverride) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.DwShaderMapOverride, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.SnoMinDefault, r, &Options{
		Flags: 1,
		Group: 37,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.SnoMinDefaultBaseShader, r, &Options{
		Flags: 1,
		Group: 37,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.SnoMedDefault, r, &Options{
		Flags: 1,
		Group: 37,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoMedDefaultBaseShader, r, &Options{
		Flags: 1,
		Group: 37,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.SnoHighDefault, r, &Options{
		Flags: 1,
		Group: 37,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SnoHighDefaultBaseShader, r, &Options{
		Flags: 1,
		Group: 37,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.SnoHighlight, r, &Options{
		Flags: 1,
		Group: 37,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.SnoLootOverlay, r, &Options{
		Flags: 1,
		Group: 37,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.SnoOccluded, r, &Options{
		Flags: 1,
		Group: 37,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.SnoDepth, r, &Options{
		Flags: 1,
		Group: 37,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.SnoCookie, r, &Options{
		Flags: 1,
		Group: 37,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.SnoCookieBaseShader, r, &Options{
		Flags: 1,
		Group: 37,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.SnoUIRActor, r, &Options{
		Flags: 1,
		Group: 37,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.SnoFaded, r, &Options{
		Flags: 1,
		Group: 37,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+60, &t.SnoFur, r, &Options{
		Flags: 1,
		Group: 37,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.SnoFurBaseShader, r, &Options{
		Flags: 1,
		Group: 37,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.SnoPowerCenters, r, &Options{
		Flags: 1,
		Group: 37,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+72, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ShaderOverride) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwShaderMapOverride", &t.DwShaderMapOverride, d...)
	cb.Do("SnoMinDefault", &t.SnoMinDefault, d...)
	cb.Do("SnoMinDefaultBaseShader", &t.SnoMinDefaultBaseShader, d...)
	cb.Do("SnoMedDefault", &t.SnoMedDefault, d...)
	cb.Do("SnoMedDefaultBaseShader", &t.SnoMedDefaultBaseShader, d...)
	cb.Do("SnoHighDefault", &t.SnoHighDefault, d...)
	cb.Do("SnoHighDefaultBaseShader", &t.SnoHighDefaultBaseShader, d...)
	cb.Do("SnoHighlight", &t.SnoHighlight, d...)
	cb.Do("SnoLootOverlay", &t.SnoLootOverlay, d...)
	cb.Do("SnoOccluded", &t.SnoOccluded, d...)
	cb.Do("SnoDepth", &t.SnoDepth, d...)
	cb.Do("SnoCookie", &t.SnoCookie, d...)
	cb.Do("SnoCookieBaseShader", &t.SnoCookieBaseShader, d...)
	cb.Do("SnoUIRActor", &t.SnoUIRActor, d...)
	cb.Do("SnoFaded", &t.SnoFaded, d...)
	cb.Do("SnoFur", &t.SnoFur, d...)
	cb.Do("SnoFurBaseShader", &t.SnoFurBaseShader, d...)
	cb.Do("SnoPowerCenters", &t.SnoPowerCenters, d...)
}

type dmPolytopeDataMirror struct {
	M_aVertices     DT_INT64
	M_aPlanes       DT_INT64
	M_aSubEdges     DT_INT64
	M_aFaceSubEdges DT_INT64
	M_centroid      DT_VECTOR3D
	M_VertexCount   DT_INT
	M_FaceCount     DT_INT
	M_SubEdgeCount  DT_INT
	M_volume        DT_FLOAT
	M_area          DT_FLOAT
}

func (t *dmPolytopeDataMirror) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.M_aVertices, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.M_aPlanes, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.M_aSubEdges, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.M_aFaceSubEdges, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.M_centroid, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.M_VertexCount, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.M_FaceCount, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.M_SubEdgeCount, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.M_volume, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+60, &t.M_area, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+64, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *dmPolytopeDataMirror) Walk(cb WalkCallback, d ...any) {
	cb.Do("M_aVertices", &t.M_aVertices, d...)
	cb.Do("M_aPlanes", &t.M_aPlanes, d...)
	cb.Do("M_aSubEdges", &t.M_aSubEdges, d...)
	cb.Do("M_aFaceSubEdges", &t.M_aFaceSubEdges, d...)
	cb.Do("M_centroid", &t.M_centroid, d...)
	cb.Do("M_VertexCount", &t.M_VertexCount, d...)
	cb.Do("M_FaceCount", &t.M_FaceCount, d...)
	cb.Do("M_SubEdgeCount", &t.M_SubEdgeCount, d...)
	cb.Do("M_volume", &t.M_volume, d...)
	cb.Do("M_area", &t.M_area, d...)
}

type DRLGEventDebugInfo struct {
	SzEventName DT_CHARARRAY
}

func (t *DRLGEventDebugInfo) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SzEventName, r, &Options{
		ArrayLength: 64,
		Flags:       1,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+64, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *DRLGEventDebugInfo) Walk(cb WalkCallback, d ...any) {
	cb.Do("SzEventName", &t.SzEventName, d...)
}

type OnProjectileCreateBuffCallback struct {
	// Inherits BuffCallbackBase
	// Inherits PolymorphicBase
	DwType                DT_UINT
	DwPad                 DT_UINT
	SnoTriggerEffectGroup DT_SNO
	ArConditions          DT_POLYMORPHIC_VARIABLEARRAY[*DT_INT64]
}

func (t *OnProjectileCreateBuffCallback) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoTriggerEffectGroup, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ArConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *OnProjectileCreateBuffCallback) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("SnoTriggerEffectGroup", &t.SnoTriggerEffectGroup, d...)
	cb.Do("ArConditions", &t.ArConditions, d...)
}

type ParticleSimKeyFrameRotation struct {
	FlTime DT_FLOAT
	QRot   bcQuat
}

func (t *ParticleSimKeyFrameRotation) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.FlTime, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.QRot, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+20, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ParticleSimKeyFrameRotation) Walk(cb WalkCallback, d ...any) {
	cb.Do("FlTime", &t.FlTime, d...)
	cb.Do("QRot", &t.QRot, d...)
}

type EffectGroupKey struct {
	FlTime        DT_FLOAT
	FlValue       DT_FLOAT
	VecInTangent  DT_VECTOR2D
	VecOutTangent DT_VECTOR2D
}

func (t *EffectGroupKey) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.FlTime, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.FlValue, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.VecInTangent, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.VecOutTangent, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *EffectGroupKey) Walk(cb WalkCallback, d ...any) {
	cb.Do("FlTime", &t.FlTime, d...)
	cb.Do("FlValue", &t.FlValue, d...)
	cb.Do("VecInTangent", &t.VecInTangent, d...)
	cb.Do("VecOutTangent", &t.VecOutTangent, d...)
}

type Type_e8578394 struct{}

func (t *Type_e8578394) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if _, err := r.Seek(p+1, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_e8578394) Walk(cb WalkCallback, d ...any) {}

type QuestRewardChoicePickedMessage struct {
	THeader              RequiredMessageHeader
	IdQuest              DT_ENUM
	NSelectedRewardIndex DT_INT
}

func (t *QuestRewardChoicePickedMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.IdQuest, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.NSelectedRewardIndex, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *QuestRewardChoicePickedMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("IdQuest", &t.IdQuest, d...)
	cb.Do("NSelectedRewardIndex", &t.NSelectedRewardIndex, d...)
}

type UIMinimapFoWStyle struct {
	// Inherits UIWindowStyle
	// Inherits UIControlStyle
	// Inherits PolymorphicBase
	DwType                    DT_UINT
	DwPad                     DT_UINT
	HParentStyle              UIControlHandle
	Unk_441f783               DT_INT64
	M_eHasModifiedPowerTagMap DT_TAGMAP[*DT_ENUM]
	TConsoleInput             UIControlConsoleInput
	Unk_b4f614c               DT_TAGMAP[*DT_ENUM]
}

func (t *UIMinimapFoWStyle) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.HParentStyle, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_441f783, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.M_eHasModifiedPowerTagMap, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.TConsoleInput, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.Unk_b4f614c, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+80, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *UIMinimapFoWStyle) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("HParentStyle", &t.HParentStyle, d...)
	cb.Do("Unk_441f783", &t.Unk_441f783, d...)
	cb.Do("M_eHasModifiedPowerTagMap", &t.M_eHasModifiedPowerTagMap, d...)
	cb.Do("TConsoleInput", &t.TConsoleInput, d...)
	cb.Do("Unk_b4f614c", &t.Unk_b4f614c, d...)
}

type SpawnLocOverrideData struct {
	GbidSpawnLocToOverride DT_GBID
	Unk_2a1fbb4            DT_SNO
}

func (t *SpawnLocOverrideData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.GbidSpawnLocToOverride, r, &Options{
		Flags: 1,
		Group: 20,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.Unk_2a1fbb4, r, &Options{
		Flags: 1,
		Group: 84,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *SpawnLocOverrideData) Walk(cb WalkCallback, d ...any) {
	cb.Do("GbidSpawnLocToOverride", &t.GbidSpawnLocToOverride, d...)
	cb.Do("Unk_2a1fbb4", &t.Unk_2a1fbb4, d...)
}

type TriggerEventSetWeaponSheathedDuration struct {
	// Inherits TriggerEventRangedDuration
	// Inherits TriggerEvent
	// Inherits PolymorphicBase
	DwType           DT_UINT
	TConditions      TriggerConditions
	FGenerated       DT_INT
	Unk_6cba752      DT_INT
	DwParentActorID  DT_UINT
	TDuration        DT_FLOAT
	DwTriggerFlags   DT_UINT
	DwTriggerFlagsEx DT_UINT
	TCleanup         TriggerCleanup
	Unk_49e9257      DT_INT
	Unk_5490979      DT_INT
	DwPad            DT_UINT
	Unk_279aa5a      DT_INT
	DwActorID        DT_UINT
	BSheathed        DT_INT
}

func (t *TriggerEventSetWeaponSheathedDuration) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.FGenerated, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_6cba752, r, &Options{Flags: 16}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.DwParentActorID, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.TDuration, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.DwTriggerFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.DwTriggerFlagsEx, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.TCleanup, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+116, &t.Unk_49e9257, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.Unk_5490979, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+124, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.Unk_279aa5a, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+132, &t.DwActorID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+136, &t.BSheathed, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+144, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TriggerEventSetWeaponSheathedDuration) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("TConditions", &t.TConditions, d...)
	cb.Do("FGenerated", &t.FGenerated, d...)
	cb.Do("Unk_6cba752", &t.Unk_6cba752, d...)
	cb.Do("DwParentActorID", &t.DwParentActorID, d...)
	cb.Do("TDuration", &t.TDuration, d...)
	cb.Do("DwTriggerFlags", &t.DwTriggerFlags, d...)
	cb.Do("DwTriggerFlagsEx", &t.DwTriggerFlagsEx, d...)
	cb.Do("TCleanup", &t.TCleanup, d...)
	cb.Do("Unk_49e9257", &t.Unk_49e9257, d...)
	cb.Do("Unk_5490979", &t.Unk_5490979, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("Unk_279aa5a", &t.Unk_279aa5a, d...)
	cb.Do("DwActorID", &t.DwActorID, d...)
	cb.Do("BSheathed", &t.BSheathed, d...)
}

type ConversationTypeSounds struct {
	SnoGlobalChatterSound    DT_SNO
	SnoPersonalChatterSound  DT_SNO
	SnoLocalChatterSound     DT_SNO
	SnoQuestIGCSound         DT_SNO
	SnoInteractiveIGCSound   DT_SNO
	SnoDisembodiedVoiceSound DT_SNO
	SnoJournalVOSound        DT_SNO
	SnoEmoteSound            DT_SNO
}

func (t *ConversationTypeSounds) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoGlobalChatterSound, r, &Options{
		Flags: 1,
		Group: 40,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.SnoPersonalChatterSound, r, &Options{
		Flags: 1,
		Group: 40,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.SnoLocalChatterSound, r, &Options{
		Flags: 1,
		Group: 40,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.SnoQuestIGCSound, r, &Options{
		Flags: 1,
		Group: 40,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoInteractiveIGCSound, r, &Options{
		Flags: 1,
		Group: 40,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.SnoDisembodiedVoiceSound, r, &Options{
		Flags: 1,
		Group: 40,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SnoJournalVOSound, r, &Options{
		Flags: 1,
		Group: 40,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.SnoEmoteSound, r, &Options{
		Flags: 1,
		Group: 40,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ConversationTypeSounds) Walk(cb WalkCallback, d ...any) {
	cb.Do("SnoGlobalChatterSound", &t.SnoGlobalChatterSound, d...)
	cb.Do("SnoPersonalChatterSound", &t.SnoPersonalChatterSound, d...)
	cb.Do("SnoLocalChatterSound", &t.SnoLocalChatterSound, d...)
	cb.Do("SnoQuestIGCSound", &t.SnoQuestIGCSound, d...)
	cb.Do("SnoInteractiveIGCSound", &t.SnoInteractiveIGCSound, d...)
	cb.Do("SnoDisembodiedVoiceSound", &t.SnoDisembodiedVoiceSound, d...)
	cb.Do("SnoJournalVOSound", &t.SnoJournalVOSound, d...)
	cb.Do("SnoEmoteSound", &t.SnoEmoteSound, d...)
}

type MarkerDataBase struct {
	// Inherits PolymorphicBase
	DwType DT_UINT
	DwPad  DT_UINT
}

func (t *MarkerDataBase) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *MarkerDataBase) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
}

type UITreeFolderStyle struct {
	// Inherits UIButtonStyle
	// Inherits UITextStyle
	// Inherits UIWindowStyle
	// Inherits UIControlStyle
	// Inherits PolymorphicBase
	DwType                      DT_UINT
	DwPad                       DT_UINT
	HParentStyle                UIControlHandle
	Unk_441f783                 DT_INT64
	M_eHasModifiedPowerTagMap   DT_TAGMAP[*DT_ENUM]
	TConsoleInput               UIControlConsoleInput
	Unk_b4f614c                 DT_TAGMAP[*DT_ENUM]
	TFont                       UIControlFont
	PtUIControlTagMapIconLabels DT_TAGMAP[*DT_ENUM]
	TIcon                       UIControlIcon
	TClickSounds                UIControlClickSounds
	Unk_10f81f0                 DT_TAGMAP[*DT_ENUM]
	Unk_b6fa340                 DT_TAGMAP[*DT_ENUM]
}

func (t *UITreeFolderStyle) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.HParentStyle, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_441f783, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.M_eHasModifiedPowerTagMap, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.TConsoleInput, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.Unk_b4f614c, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.TFont, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.PtUIControlTagMapIconLabels, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.TIcon, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.TClickSounds, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+144, &t.Unk_10f81f0, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+160, &t.Unk_b6fa340, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+176, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *UITreeFolderStyle) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("HParentStyle", &t.HParentStyle, d...)
	cb.Do("Unk_441f783", &t.Unk_441f783, d...)
	cb.Do("M_eHasModifiedPowerTagMap", &t.M_eHasModifiedPowerTagMap, d...)
	cb.Do("TConsoleInput", &t.TConsoleInput, d...)
	cb.Do("Unk_b4f614c", &t.Unk_b4f614c, d...)
	cb.Do("TFont", &t.TFont, d...)
	cb.Do("PtUIControlTagMapIconLabels", &t.PtUIControlTagMapIconLabels, d...)
	cb.Do("TIcon", &t.TIcon, d...)
	cb.Do("TClickSounds", &t.TClickSounds, d...)
	cb.Do("Unk_10f81f0", &t.Unk_10f81f0, d...)
	cb.Do("Unk_b6fa340", &t.Unk_b6fa340, d...)
}

type EndOfTickMessage struct {
	THeader      RequiredMessageHeader
	DwTickEnding DT_UINT
	DwTickNext   DT_UINT
}

func (t *EndOfTickMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.DwTickEnding, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwTickNext, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *EndOfTickMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("DwTickEnding", &t.DwTickEnding, d...)
	cb.Do("DwTickNext", &t.DwTickNext, d...)
}

type CloneBeingDeletedMessage struct {
	THeader  RequiredMessageHeader
	AnnClone DT_ACD_NETWORK_NAME
	AnnNPC   DT_ACD_NETWORK_NAME
}

func (t *CloneBeingDeletedMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.AnnClone, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.AnnNPC, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *CloneBeingDeletedMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("AnnClone", &t.AnnClone, d...)
	cb.Do("AnnNPC", &t.AnnNPC, d...)
}

type QuitGameMessage struct {
	THeader         RequiredMessageHeader
	EReason         DT_ENUM
	DwLastHeartbeat DT_OPTIONAL[*DT_UINT]
}

func (t *QuitGameMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.EReason, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwLastHeartbeat, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+28, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *QuitGameMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("EReason", &t.EReason, d...)
	cb.Do("DwLastHeartbeat", &t.DwLastHeartbeat, d...)
}

type PowerConditionDamageDeliveryMechanism struct {
	// Inherits PowerConditionBase
	// Inherits PolymorphicBase
	DwType             DT_UINT
	BInverse           DT_INT
	DwPad              DT_UINT
	EDeliveryMechanism DT_ENUM
}

func (t *PowerConditionDamageDeliveryMechanism) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BInverse, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.EDeliveryMechanism, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PowerConditionDamageDeliveryMechanism) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("BInverse", &t.BInverse, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("EDeliveryMechanism", &t.EDeliveryMechanism, d...)
}

type EffectGroupActorMovementTrack struct {
	// Inherits EffectGroupTrack
	// Inherits PolymorphicBase
	DwType DT_UINT
	DwPad  DT_UINT
}

func (t *EffectGroupActorMovementTrack) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *EffectGroupActorMovementTrack) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
}

type BannerColor struct {
	SzName    DT_UINT
	HLabel    StringLabelHandleEx
	RgbaColor DT_RGBACOLOR
}

func (t *BannerColor) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SzName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.HLabel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.RgbaColor, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *BannerColor) Walk(cb WalkCallback, d ...any) {
	cb.Do("SzName", &t.SzName, d...)
	cb.Do("HLabel", &t.HLabel, d...)
	cb.Do("RgbaColor", &t.RgbaColor, d...)
}

type HairColorDefinition struct {
	NSortOrder           DT_INT
	FUsableByClass       DT_FIXEDARRAY[*DT_INT]
	RgbaColors           DT_FIXEDARRAY[*DT_RGBACOLOR]
	FlHairColorInfluence DT_FLOAT
}

func (t *HairColorDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.NSortOrder, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.FUsableByClass, r, &Options{
		ArrayLength: 5,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.RgbaColors, r, &Options{
		ArrayLength: 3,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.FlHairColorInfluence, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *HairColorDefinition) Walk(cb WalkCallback, d ...any) {
	cb.Do("NSortOrder", &t.NSortOrder, d...)
	cb.Do("FUsableByClass", &t.FUsableByClass, d...)
	cb.Do("RgbaColors", &t.RgbaColors, d...)
	cb.Do("FlHairColorInfluence", &t.FlHairColorInfluence, d...)
}

type Type_e97cce1f struct {
	Unk_9568563    DT_ENUM
	Unk_5c29242    DT_INT
	FlCameraOffset DT_FLOAT
}

func (t *Type_e97cce1f) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Unk_9568563, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.Unk_5c29242, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.FlCameraOffset, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+12, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_e97cce1f) Walk(cb WalkCallback, d ...any) {
	cb.Do("Unk_9568563", &t.Unk_9568563, d...)
	cb.Do("Unk_5c29242", &t.Unk_5c29242, d...)
	cb.Do("FlCameraOffset", &t.FlCameraOffset, d...)
}

type PowerConditionHasResource struct {
	// Inherits PowerConditionBase
	// Inherits PolymorphicBase
	DwType        DT_UINT
	BInverse      DT_INT
	DwPad         DT_UINT
	ESubject      DT_ENUM
	EResourceType DT_ENUM
	FlAmount      DT_FLOAT
}

func (t *PowerConditionHasResource) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BInverse, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ESubject, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.EResourceType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.FlAmount, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+40, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PowerConditionHasResource) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("BInverse", &t.BInverse, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("ESubject", &t.ESubject, d...)
	cb.Do("EResourceType", &t.EResourceType, d...)
	cb.Do("FlAmount", &t.FlAmount, d...)
}

type ScriptEventParamPassivePowerContainer struct {
	// Inherits ScriptEventParamBase
	// Inherits PolymorphicBase
	DwType                   DT_UINT
	EParamType               DT_ENUM
	DwPad                    DT_UINT
	SnoPassivePowerContainer DT_SNO
}

func (t *ScriptEventParamPassivePowerContainer) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.EParamType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SnoPassivePowerContainer, r, &Options{
		Flags: 1,
		Group: 142,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ScriptEventParamPassivePowerContainer) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("EParamType", &t.EParamType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("SnoPassivePowerContainer", &t.SnoPassivePowerContainer, d...)
}

type ActorShaderMapOverrideChangedMessage struct {
	THeader             RequiredMessageHeader
	Ann                 DT_ACD_NETWORK_NAME
	NChange             DT_INT
	DwShaderMapOverride DT_UINT
}

func (t *ActorShaderMapOverrideChangedMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Ann, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.NChange, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.DwShaderMapOverride, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ActorShaderMapOverrideChangedMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("Ann", &t.Ann, d...)
	cb.Do("NChange", &t.NChange, d...)
	cb.Do("DwShaderMapOverride", &t.DwShaderMapOverride, d...)
}

type ReputationRewardEarnedMessage struct {
	THeader           RequiredMessageHeader
	SnoReputation     DT_SNO
	DwReputationLevel DT_UINT
	DwRewardIndex     DT_UINT
}

func (t *ReputationRewardEarnedMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoReputation, r, &Options{
		Flags: 1,
		Group: 105,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwReputationLevel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.DwRewardIndex, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+28, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ReputationRewardEarnedMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("SnoReputation", &t.SnoReputation, d...)
	cb.Do("DwReputationLevel", &t.DwReputationLevel, d...)
	cb.Do("DwRewardIndex", &t.DwRewardIndex, d...)
}

type PhaseJumpStoppedChannelling struct {
	// Inherits PhaseJumpBase
	// Inherits PolymorphicBase
	DwType       DT_UINT
	Unk_2de4987  DT_UINT
	ArConditions DT_POLYMORPHIC_VARIABLEARRAY[*DT_INT64]
	BEnd         DT_INT
	DwPad        DT_UINT
}

func (t *PhaseJumpStoppedChannelling) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_2de4987, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ArConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.BEnd, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+56, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PhaseJumpStoppedChannelling) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("Unk_2de4987", &t.Unk_2de4987, d...)
	cb.Do("ArConditions", &t.ArConditions, d...)
	cb.Do("BEnd", &t.BEnd, d...)
	cb.Do("DwPad", &t.DwPad, d...)
}

type DefaultTextureInfo struct {
	EShaderTex DT_ENUM
	SnoTexture DT_SNO
}

func (t *DefaultTextureInfo) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.EShaderTex, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.SnoTexture, r, &Options{
		Flags: 1,
		Group: 44,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *DefaultTextureInfo) Walk(cb WalkCallback, d ...any) {
	cb.Do("EShaderTex", &t.EShaderTex, d...)
	cb.Do("SnoTexture", &t.SnoTexture, d...)
}

type TriggerEventObjectFollowSpline struct {
	// Inherits TriggerEventRangedDuration
	// Inherits TriggerEvent
	// Inherits PolymorphicBase
	DwType                     DT_UINT
	TConditions                TriggerConditions
	FGenerated                 DT_INT
	Unk_6cba752                DT_INT
	DwParentActorID            DT_UINT
	TDuration                  DT_FLOAT
	DwTriggerFlags             DT_UINT
	DwTriggerFlagsEx           DT_UINT
	TCleanup                   TriggerCleanup
	Unk_49e9257                DT_INT
	Unk_5490979                DT_INT
	DwPad                      DT_UINT
	DwObjectID                 DT_UINT
	FlBlendTime                DT_FLOAT
	SzSplineName               DT_UINT
	Unk_30b49c2                DT_ENUM
	Unk_8781d26                DT_UINT
	Unk_9a31592                DT_UINT
	FlFirstPercent             DT_FLOAT
	FlLastPercent              DT_FLOAT
	FlFirstDistance            DT_FLOAT
	FlLastDistance             DT_FLOAT
	Unk_71c05df                DT_INT
	Unk_325b1ab                DT_INT
	EEasing                    DT_ENUM
	TEasingWeight              SplineEasingWeight
	EOrientationMode           DT_ENUM
	TransformOffset            PRTransform
	ELookAtTargetType          DT_ENUM
	Unk_6101673                DT_UINT
	THardpointLinkLookAtTarget HardpointLink
	DwLookAtTargetID           DT_UINT
	EEasingType                DT_ENUM
	EBlendEasing               DT_ENUM
	EFollowSplineInterpolation DT_ENUM
	FlInTangentWeight          DT_FLOAT
	FlOutTangentWeight         DT_FLOAT
}

func (t *TriggerEventObjectFollowSpline) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.FGenerated, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_6cba752, r, &Options{Flags: 16}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.DwParentActorID, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.TDuration, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.DwTriggerFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.DwTriggerFlagsEx, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.TCleanup, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+116, &t.Unk_49e9257, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.Unk_5490979, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+124, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.DwObjectID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+132, &t.FlBlendTime, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+136, &t.SzSplineName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+140, &t.Unk_30b49c2, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+144, &t.Unk_8781d26, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+148, &t.Unk_9a31592, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+152, &t.FlFirstPercent, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+156, &t.FlLastPercent, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+160, &t.FlFirstDistance, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+164, &t.FlLastDistance, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+168, &t.Unk_71c05df, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+172, &t.Unk_325b1ab, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+176, &t.EEasing, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+180, &t.TEasingWeight, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+192, &t.EOrientationMode, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+196, &t.TransformOffset, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+224, &t.ELookAtTargetType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+228, &t.Unk_6101673, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+232, &t.THardpointLinkLookAtTarget, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+240, &t.DwLookAtTargetID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+244, &t.EEasingType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+248, &t.EBlendEasing, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+252, &t.EFollowSplineInterpolation, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+256, &t.FlInTangentWeight, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+260, &t.FlOutTangentWeight, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+264, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TriggerEventObjectFollowSpline) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("TConditions", &t.TConditions, d...)
	cb.Do("FGenerated", &t.FGenerated, d...)
	cb.Do("Unk_6cba752", &t.Unk_6cba752, d...)
	cb.Do("DwParentActorID", &t.DwParentActorID, d...)
	cb.Do("TDuration", &t.TDuration, d...)
	cb.Do("DwTriggerFlags", &t.DwTriggerFlags, d...)
	cb.Do("DwTriggerFlagsEx", &t.DwTriggerFlagsEx, d...)
	cb.Do("TCleanup", &t.TCleanup, d...)
	cb.Do("Unk_49e9257", &t.Unk_49e9257, d...)
	cb.Do("Unk_5490979", &t.Unk_5490979, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("DwObjectID", &t.DwObjectID, d...)
	cb.Do("FlBlendTime", &t.FlBlendTime, d...)
	cb.Do("SzSplineName", &t.SzSplineName, d...)
	cb.Do("Unk_30b49c2", &t.Unk_30b49c2, d...)
	cb.Do("Unk_8781d26", &t.Unk_8781d26, d...)
	cb.Do("Unk_9a31592", &t.Unk_9a31592, d...)
	cb.Do("FlFirstPercent", &t.FlFirstPercent, d...)
	cb.Do("FlLastPercent", &t.FlLastPercent, d...)
	cb.Do("FlFirstDistance", &t.FlFirstDistance, d...)
	cb.Do("FlLastDistance", &t.FlLastDistance, d...)
	cb.Do("Unk_71c05df", &t.Unk_71c05df, d...)
	cb.Do("Unk_325b1ab", &t.Unk_325b1ab, d...)
	cb.Do("EEasing", &t.EEasing, d...)
	cb.Do("TEasingWeight", &t.TEasingWeight, d...)
	cb.Do("EOrientationMode", &t.EOrientationMode, d...)
	cb.Do("TransformOffset", &t.TransformOffset, d...)
	cb.Do("ELookAtTargetType", &t.ELookAtTargetType, d...)
	cb.Do("Unk_6101673", &t.Unk_6101673, d...)
	cb.Do("THardpointLinkLookAtTarget", &t.THardpointLinkLookAtTarget, d...)
	cb.Do("DwLookAtTargetID", &t.DwLookAtTargetID, d...)
	cb.Do("EEasingType", &t.EEasingType, d...)
	cb.Do("EBlendEasing", &t.EBlendEasing, d...)
	cb.Do("EFollowSplineInterpolation", &t.EFollowSplineInterpolation, d...)
	cb.Do("FlInTangentWeight", &t.FlInTangentWeight, d...)
	cb.Do("FlOutTangentWeight", &t.FlOutTangentWeight, d...)
}

type MarkerHandle struct {
	SnoMarkerSet DT_SNO
	NID          DT_INT
}

func (t *MarkerHandle) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoMarkerSet, r, &Options{
		Flags: 1,
		Group: 24,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.NID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *MarkerHandle) Walk(cb WalkCallback, d ...any) {
	cb.Do("SnoMarkerSet", &t.SnoMarkerSet, d...)
	cb.Do("NID", &t.NID, d...)
}

type ParametricInfo struct {
	SnoBaseLayer       DT_SNO
	ArParametricLayers DT_VARIABLEARRAY[*ParametricLayer]
}

func (t *ParametricInfo) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoBaseLayer, r, &Options{
		Flags: 1,
		Group: 57,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.ArParametricLayers, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ParametricInfo) Walk(cb WalkCallback, d ...any) {
	cb.Do("SnoBaseLayer", &t.SnoBaseLayer, d...)
	cb.Do("ArParametricLayers", &t.ArParametricLayers, d...)
}

type RestrictedComponent struct {
	TComponentId      DT_UINT
	PtValidComponents DT_FIXEDARRAY[*ValidComponents]
}

func (t *RestrictedComponent) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.TComponentId, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.PtValidComponents, r, &Options{
		ArrayLength: 4,
		Flags:       1,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+72, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *RestrictedComponent) Walk(cb WalkCallback, d ...any) {
	cb.Do("TComponentId", &t.TComponentId, d...)
	cb.Do("PtValidComponents", &t.PtValidComponents, d...)
}

type dmSubEdgeMirror struct {
	TwinOffset DT_BYTE
	Tail       DT_BYTE
	Left       DT_BYTE
	Next       DT_BYTE
}

func (t *dmSubEdgeMirror) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.TwinOffset, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1, &t.Tail, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2, &t.Left, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+3, &t.Next, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+4, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *dmSubEdgeMirror) Walk(cb WalkCallback, d ...any) {
	cb.Do("TwinOffset", &t.TwinOffset, d...)
	cb.Do("Tail", &t.Tail, d...)
	cb.Do("Left", &t.Left, d...)
	cb.Do("Next", &t.Next, d...)
}

type DPathSinData struct {
	FlSinIncPerTick            DT_FLOAT
	FlSinIncAccel              DT_FLOAT
	FlLateralMaxDistance       DT_FLOAT
	FlOOLateralDistanceToScale DT_FLOAT
	FlLateralStartDistance     DT_FLOAT
	FlSpeed                    DT_FLOAT
	AnnOwner                   DT_ACD_NETWORK_NAME
}

func (t *DPathSinData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.FlSinIncPerTick, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.FlSinIncAccel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.FlLateralMaxDistance, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.FlOOLateralDistanceToScale, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.FlLateralStartDistance, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.FlSpeed, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.AnnOwner, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *DPathSinData) Walk(cb WalkCallback, d ...any) {
	cb.Do("FlSinIncPerTick", &t.FlSinIncPerTick, d...)
	cb.Do("FlSinIncAccel", &t.FlSinIncAccel, d...)
	cb.Do("FlLateralMaxDistance", &t.FlLateralMaxDistance, d...)
	cb.Do("FlOOLateralDistanceToScale", &t.FlOOLateralDistanceToScale, d...)
	cb.Do("FlLateralStartDistance", &t.FlLateralStartDistance, d...)
	cb.Do("FlSpeed", &t.FlSpeed, d...)
	cb.Do("AnnOwner", &t.AnnOwner, d...)
}

type QuestSubcondition struct {
	// Inherits QuestSubconditionBase
	// Inherits Subcondition
	// Inherits PolymorphicBase
	DwType          DT_UINT
	BNegate         DT_INT
	SnoQuest        DT_SNO
	DwPad           DT_UINT
	EState          DT_ENUM
	EStepComparison DT_ENUM
	NStepUID        DT_INT
}

func (t *QuestSubcondition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BNegate, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SnoQuest, r, &Options{
		Flags: 513,
		Group: 31,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.EState, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.EStepComparison, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.NStepUID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *QuestSubcondition) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("BNegate", &t.BNegate, d...)
	cb.Do("SnoQuest", &t.SnoQuest, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("EState", &t.EState, d...)
	cb.Do("EStepComparison", &t.EStepComparison, d...)
	cb.Do("NStepUID", &t.NStepUID, d...)
}

type SalvageResultsMessage struct {
	THeader             RequiredMessageHeader
	ArNewItems          DT_FIXEDARRAY[*SalvageResultItem]
	ArUnlockedTransmogs DT_FIXEDARRAY[*DT_SNO]
}

func (t *SalvageResultsMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.ArNewItems, r, &Options{
		ArrayLength: 16,
		Flags:       8,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+148, &t.ArUnlockedTransmogs, r, &Options{
		ArrayLength: 64,
		Flags:       9,
		Group:       73,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+408, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *SalvageResultsMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("ArNewItems", &t.ArNewItems, d...)
	cb.Do("ArUnlockedTransmogs", &t.ArUnlockedTransmogs, d...)
}

type ServerLogMessage struct {
	THeader   RequiredMessageHeader
	UsMessage DT_CHARARRAY
}

func (t *ServerLogMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.UsMessage, r, &Options{
		ArrayLength: 1024,
		Flags:       1,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+1040, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ServerLogMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("UsMessage", &t.UsMessage, d...)
}

type GenericBlobRequestMessage struct {
	THeader   RequiredRequestMessageHeader
	UBlobSize DT_WORD
}

func (t *GenericBlobRequestMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.UBlobSize, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *GenericBlobRequestMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("UBlobSize", &t.UBlobSize, d...)
}

type StoryboardUIControlSetWidthTrack struct {
	// Inherits StoryboardUIControlSetValueTrack_float
	DwType          DT_UINT
	TNodeCollection StoryboardValueNodeCollection_float
	Unk_77ed19a     DT_ENUM
	DwPad           DT_UINT
}

func (t *StoryboardUIControlSetWidthTrack) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TNodeCollection, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.Unk_77ed19a, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+56, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *StoryboardUIControlSetWidthTrack) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("TNodeCollection", &t.TNodeCollection, d...)
	cb.Do("Unk_77ed19a", &t.Unk_77ed19a, d...)
	cb.Do("DwPad", &t.DwPad, d...)
}

type ScriptEventParamMonsterFamilyArchetypeRarity struct {
	// Inherits ScriptEventParamBase
	// Inherits PolymorphicBase
	DwType           DT_UINT
	EParamType       DT_ENUM
	DwPad            DT_UINT
	SnoMonsterFamily DT_SNO
	SzArchetype      DT_UINT
	DwArchetypeHash  DT_UINT
	EOptionalRarity  DT_ENUM
}

func (t *ScriptEventParamMonsterFamilyArchetypeRarity) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.EParamType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SnoMonsterFamily, r, &Options{
		Flags: 513,
		Group: 82,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.SzArchetype, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.DwArchetypeHash, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.EOptionalRarity, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+40, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ScriptEventParamMonsterFamilyArchetypeRarity) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("EParamType", &t.EParamType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("SnoMonsterFamily", &t.SnoMonsterFamily, d...)
	cb.Do("SzArchetype", &t.SzArchetype, d...)
	cb.Do("DwArchetypeHash", &t.DwArchetypeHash, d...)
	cb.Do("EOptionalRarity", &t.EOptionalRarity, d...)
}

type MaterialScalarValuesUsed struct {
	SnoMaterialValue DT_SNO
	FlDefaultValue   DT_FLOAT
}

func (t *MaterialScalarValuesUsed) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoMaterialValue, r, &Options{
		Flags: 1,
		Group: 81,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.FlDefaultValue, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *MaterialScalarValuesUsed) Walk(cb WalkCallback, d ...any) {
	cb.Do("SnoMaterialValue", &t.SnoMaterialValue, d...)
	cb.Do("FlDefaultValue", &t.FlDefaultValue, d...)
}

type bcQuat struct {
	X DT_FLOAT
	Y DT_FLOAT
	Z DT_FLOAT
	W DT_FLOAT
}

func (t *bcQuat) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.X, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.Y, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.Z, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.W, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *bcQuat) Walk(cb WalkCallback, d ...any) {
	cb.Do("X", &t.X, d...)
	cb.Do("Y", &t.Y, d...)
	cb.Do("Z", &t.Z, d...)
	cb.Do("W", &t.W, d...)
}

type PowerConditionIsFortified struct {
	// Inherits PowerConditionBase
	// Inherits PolymorphicBase
	DwType   DT_UINT
	BInverse DT_INT
	DwPad    DT_UINT
	ESubject DT_ENUM
}

func (t *PowerConditionIsFortified) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BInverse, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ESubject, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PowerConditionIsFortified) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("BInverse", &t.BInverse, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("ESubject", &t.ESubject, d...)
}

type ACDPickupFailedMessage struct {
	THeader         RequiredMessageHeader
	ECurrencyType   DT_ENUM
	Unk_c9b5ba6     DT_INT
	EPickupResponse DT_ENUM
	AnnPickee       DT_ACD_NETWORK_NAME
}

func (t *ACDPickupFailedMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.ECurrencyType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.Unk_c9b5ba6, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.EPickupResponse, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.AnnPickee, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+36, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ACDPickupFailedMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("ECurrencyType", &t.ECurrencyType, d...)
	cb.Do("Unk_c9b5ba6", &t.Unk_c9b5ba6, d...)
	cb.Do("EPickupResponse", &t.EPickupResponse, d...)
	cb.Do("AnnPickee", &t.AnnPickee, d...)
}

type DungeonStateSubcondition struct {
	// Inherits Subcondition
	// Inherits PolymorphicBase
	DwType                   DT_UINT
	BNegate                  DT_INT
	DwPad                    DT_UINT
	GbidRequiredDungeonState DT_GBID
}

func (t *DungeonStateSubcondition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BNegate, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.GbidRequiredDungeonState, r, &Options{
		Flags: 1,
		Group: 31,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *DungeonStateSubcondition) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("BNegate", &t.BNegate, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("GbidRequiredDungeonState", &t.GbidRequiredDungeonState, d...)
}

type AnimFacingWindow struct {
	NFrameStart DT_INT
	NFrameEnd   DT_INT
	Unk_f28aa5a DT_FLOAT
	Unk_963cba8 DT_INT
	Unk_65d9350 DT_INT
}

func (t *AnimFacingWindow) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.NFrameStart, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.NFrameEnd, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.Unk_f28aa5a, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.Unk_963cba8, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_65d9350, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+20, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *AnimFacingWindow) Walk(cb WalkCallback, d ...any) {
	cb.Do("NFrameStart", &t.NFrameStart, d...)
	cb.Do("NFrameEnd", &t.NFrameEnd, d...)
	cb.Do("Unk_f28aa5a", &t.Unk_f28aa5a, d...)
	cb.Do("Unk_963cba8", &t.Unk_963cba8, d...)
	cb.Do("Unk_65d9350", &t.Unk_65d9350, d...)
}

type GlobalDefinition struct {
	DwNextID  DT_UINT
	PtContent DT_POLYMORPHIC_VARIABLEARRAY[*GlobalBase]
}

func (t *GlobalDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwNextID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.PtContent, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+40, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *GlobalDefinition) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwNextID", &t.DwNextID, d...)
	cb.Do("PtContent", &t.PtContent, d...)
}

type EventSubcondition struct {
	// Inherits QuestSubconditionBase
	// Inherits Subcondition
	// Inherits PolymorphicBase
	DwType          DT_UINT
	BNegate         DT_INT
	SnoQuest        DT_SNO
	DwPad           DT_UINT
	EState          DT_ENUM
	EStepComparison DT_ENUM
	NStepUID        DT_INT
}

func (t *EventSubcondition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BNegate, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SnoQuest, r, &Options{
		Flags: 513,
		Group: 31,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.EState, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.EStepComparison, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.NStepUID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *EventSubcondition) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("BNegate", &t.BNegate, d...)
	cb.Do("SnoQuest", &t.SnoQuest, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("EState", &t.EState, d...)
	cb.Do("EStepComparison", &t.EStepComparison, d...)
	cb.Do("NStepUID", &t.NStepUID, d...)
}

type StoryboardUIControlSetScaleTrack struct {
	// Inherits StoryboardUIControlSetValueTrack_bcVec2
	DwType          DT_UINT
	TNodeCollection StoryboardValueNodeCollection_bcVec2
	Unk_77ed19a     DT_ENUM
	DwPad           DT_UINT
}

func (t *StoryboardUIControlSetScaleTrack) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TNodeCollection, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.Unk_77ed19a, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+56, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *StoryboardUIControlSetScaleTrack) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("TNodeCollection", &t.TNodeCollection, d...)
	cb.Do("Unk_77ed19a", &t.Unk_77ed19a, d...)
	cb.Do("DwPad", &t.DwPad, d...)
}

type GeoChunk struct {
	AabbBounds           AABB
	PtLODs               DT_VARIABLEARRAY[*GeoSet]
	PtChunkVertexBuffers DT_VARIABLEARRAY[*GeoChunkVertexBuffer]
	PtChunkIndexBuffers  DT_VARIABLEARRAY[*GeoChunkIndexBuffer]
	Unk_8c8b576          DT_VARIABLEARRAY[*DT_FLOAT]
}

func (t *GeoChunk) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.AabbBounds, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.PtLODs, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.PtChunkVertexBuffers, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.PtChunkIndexBuffers, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_8c8b576, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+88, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *GeoChunk) Walk(cb WalkCallback, d ...any) {
	cb.Do("AabbBounds", &t.AabbBounds, d...)
	cb.Do("PtLODs", &t.PtLODs, d...)
	cb.Do("PtChunkVertexBuffers", &t.PtChunkVertexBuffers, d...)
	cb.Do("PtChunkIndexBuffers", &t.PtChunkIndexBuffers, d...)
	cb.Do("Unk_8c8b576", &t.Unk_8c8b576, d...)
}

type EffectGroupRotationPitchKeyData struct {
	// Inherits EffectGroupKeyData
	// Inherits PolymorphicBase
	DwType     DT_UINT
	DwPad      DT_UINT
	ArKeyItems DT_VARIABLEARRAY[*EffectGroupKey]
}

func (t *EffectGroupRotationPitchKeyData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.ArKeyItems, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *EffectGroupRotationPitchKeyData) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("ArKeyItems", &t.ArKeyItems, d...)
}

type MarkerBoneTransform struct {
	SzName    DT_UINT
	Transform PRSTransform
}

func (t *MarkerBoneTransform) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SzName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.Transform, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+44, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *MarkerBoneTransform) Walk(cb WalkCallback, d ...any) {
	cb.Do("SzName", &t.SzName, d...)
	cb.Do("Transform", &t.Transform, d...)
}

type GlobalHealerEvents struct {
	SnoConversations DT_FIXEDARRAY[*DT_SNO]
}

func (t *GlobalHealerEvents) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoConversations, r, &Options{
		ArrayLength: 1,
		Flags:       1,
		Group:       12,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+4, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *GlobalHealerEvents) Walk(cb WalkCallback, d ...any) {
	cb.Do("SnoConversations", &t.SnoConversations, d...)
}

type NPCComponentRestrictionEntry struct {
	PtRestrictedComponents DT_VARIABLEARRAY[*RestrictedComponent]
}

func (t *NPCComponentRestrictionEntry) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.PtRestrictedComponents, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *NPCComponentRestrictionEntry) Walk(cb WalkCallback, d ...any) {
	cb.Do("PtRestrictedComponents", &t.PtRestrictedComponents, d...)
}

type OnShapeshiftCallback struct {
	// Inherits BuffCallbackBase
	// Inherits PolymorphicBase
	DwType                DT_UINT
	DwPad                 DT_UINT
	SnoTriggerEffectGroup DT_SNO
	ArConditions          DT_POLYMORPHIC_VARIABLEARRAY[*DT_INT64]
	Unk_49ab17c           DT_INT
}

func (t *OnShapeshiftCallback) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoTriggerEffectGroup, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ArConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.Unk_49ab17c, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+56, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *OnShapeshiftCallback) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("SnoTriggerEffectGroup", &t.SnoTriggerEffectGroup, d...)
	cb.Do("ArConditions", &t.ArConditions, d...)
	cb.Do("Unk_49ab17c", &t.Unk_49ab17c, d...)
}

type LookVariantMaterialOverride struct {
	SnoBaseMaterial     DT_SNO
	SnoOverrideMaterial DT_SNO
}

func (t *LookVariantMaterialOverride) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoBaseMaterial, r, &Options{
		Flags: 1,
		Group: 57,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.SnoOverrideMaterial, r, &Options{
		Flags: 1,
		Group: 57,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *LookVariantMaterialOverride) Walk(cb WalkCallback, d ...any) {
	cb.Do("SnoBaseMaterial", &t.SnoBaseMaterial, d...)
	cb.Do("SnoOverrideMaterial", &t.SnoOverrideMaterial, d...)
}

type GlobalPortalData struct {
	// Inherits GlobalBase
	// Inherits PolymorphicBase
	DwType                         DT_UINT
	DwPad                          DT_UINT
	TDefaultWaypointEffects        PortalInfo
	Unk_17b3d69                    PortalInfo
	Unk_40a7880                    PortalInfo
	Unk_5b9ef28                    PortalInfo
	TDefaultPortalInfo             PortalInfo
	Unk_1b0f21b                    PortalInfo
	SnoAfterCreditsScene           DT_SNO
	SnoAfterCreditsSceneSeasonal   DT_SNO
	Unk_5d1c931                    DT_FIXEDARRAY[*StaticLoadingImages]
	ArPerClassPlayerLoadingScreens DT_FIXEDARRAY[*PlayerLoadingScreens]
	Unk_834e1aa                    DT_INT
	ArLoadingScreenPartySizes      DT_FIXEDARRAY[*PlayerLoadingScreens]
	ArPortalTypes                  DT_VARIABLEARRAY[*DynamicPortalInfo]
	DwTownPortalType               DT_UINT
	Unk_f3c5748                    DT_UINT
	Unk_2b9b577                    DT_UINT
	Unk_706c5c5                    DT_UINT
	Unk_dbc4b77                    DT_INT
	Unk_dfb0a77                    DT_INT
}

func (t *GlobalPortalData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TDefaultWaypointEffects, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+232, &t.Unk_17b3d69, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+448, &t.Unk_40a7880, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+664, &t.Unk_5b9ef28, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+880, &t.TDefaultPortalInfo, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1096, &t.Unk_1b0f21b, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1312, &t.SnoAfterCreditsScene, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1316, &t.SnoAfterCreditsSceneSeasonal, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1320, &t.Unk_5d1c931, r, &Options{
		ArrayLength: 8,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1576, &t.ArPerClassPlayerLoadingScreens, r, &Options{
		ArrayLength: 5,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2276, &t.Unk_834e1aa, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2280, &t.ArLoadingScreenPartySizes, r, &Options{
		ArrayLength: 3,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2704, &t.ArPortalTypes, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2720, &t.DwTownPortalType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2724, &t.Unk_f3c5748, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2728, &t.Unk_2b9b577, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2732, &t.Unk_706c5c5, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2736, &t.Unk_dbc4b77, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2740, &t.Unk_dfb0a77, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+2744, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *GlobalPortalData) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("TDefaultWaypointEffects", &t.TDefaultWaypointEffects, d...)
	cb.Do("Unk_17b3d69", &t.Unk_17b3d69, d...)
	cb.Do("Unk_40a7880", &t.Unk_40a7880, d...)
	cb.Do("Unk_5b9ef28", &t.Unk_5b9ef28, d...)
	cb.Do("TDefaultPortalInfo", &t.TDefaultPortalInfo, d...)
	cb.Do("Unk_1b0f21b", &t.Unk_1b0f21b, d...)
	cb.Do("SnoAfterCreditsScene", &t.SnoAfterCreditsScene, d...)
	cb.Do("SnoAfterCreditsSceneSeasonal", &t.SnoAfterCreditsSceneSeasonal, d...)
	cb.Do("Unk_5d1c931", &t.Unk_5d1c931, d...)
	cb.Do("ArPerClassPlayerLoadingScreens", &t.ArPerClassPlayerLoadingScreens, d...)
	cb.Do("Unk_834e1aa", &t.Unk_834e1aa, d...)
	cb.Do("ArLoadingScreenPartySizes", &t.ArLoadingScreenPartySizes, d...)
	cb.Do("ArPortalTypes", &t.ArPortalTypes, d...)
	cb.Do("DwTownPortalType", &t.DwTownPortalType, d...)
	cb.Do("Unk_f3c5748", &t.Unk_f3c5748, d...)
	cb.Do("Unk_2b9b577", &t.Unk_2b9b577, d...)
	cb.Do("Unk_706c5c5", &t.Unk_706c5c5, d...)
	cb.Do("Unk_dbc4b77", &t.Unk_dbc4b77, d...)
	cb.Do("Unk_dfb0a77", &t.Unk_dfb0a77, d...)
}

type InventoryStackTransferMessage struct {
	THeader     RequiredMessageHeader
	AnnItemSrc  DT_ACD_NETWORK_NAME
	AnnItemDest DT_ACD_NETWORK_NAME
	UAmount     DT_INT64
}

func (t *InventoryStackTransferMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.AnnItemSrc, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.AnnItemDest, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.UAmount, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+40, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *InventoryStackTransferMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("AnnItemSrc", &t.AnnItemSrc, d...)
	cb.Do("AnnItemDest", &t.AnnItemDest, d...)
	cb.Do("UAmount", &t.UAmount, d...)
}

type ShakeDefinition struct {
	DwShakeFlags                DT_UINT
	TSystemDuration             DT_FLOAT
	TOutroDuration              DT_FLOAT
	WdMinRange                  DT_FLOAT
	WdMaxRange                  DT_FLOAT
	PathCameraPositionAmplitude VectorPath
	PathCameraPositionFrequency VectorPath
}

func (t *ShakeDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwShakeFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.TSystemDuration, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TOutroDuration, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.WdMinRange, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.WdMaxRange, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.PathCameraPositionAmplitude, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.PathCameraPositionFrequency, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+144, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ShakeDefinition) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwShakeFlags", &t.DwShakeFlags, d...)
	cb.Do("TSystemDuration", &t.TSystemDuration, d...)
	cb.Do("TOutroDuration", &t.TOutroDuration, d...)
	cb.Do("WdMinRange", &t.WdMinRange, d...)
	cb.Do("WdMaxRange", &t.WdMaxRange, d...)
	cb.Do("PathCameraPositionAmplitude", &t.PathCameraPositionAmplitude, d...)
	cb.Do("PathCameraPositionFrequency", &t.PathCameraPositionFrequency, d...)
}

type MarkerTextLabelData struct {
	// Inherits MarkerDataBase
	// Inherits PolymorphicBase
	DwType     DT_UINT
	DwPad      DT_UINT
	SzLabel    DT_CHARARRAY
	Unk_590b8b DT_INT
	FHidden    DT_INT
}

func (t *MarkerTextLabelData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SzLabel, r, &Options{
		ArrayLength: 128,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+144, &t.Unk_590b8b, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+148, &t.FHidden, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+152, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *MarkerTextLabelData) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("SzLabel", &t.SzLabel, d...)
	cb.Do("Unk_590b8b", &t.Unk_590b8b, d...)
	cb.Do("FHidden", &t.FHidden, d...)
}

type Type_eda64360 struct {
	DwID          DT_UINT
	DwRowIndex    DT_UINT
	DwColumnIndex DT_UINT
	ArQuestChains DT_VARIABLEARRAY[*DT_SNO]
}

func (t *Type_eda64360) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.DwID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.DwRowIndex, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwColumnIndex, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.ArQuestChains, r, &Options{
		Flags: 1,
		Group: 96,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_eda64360) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwID", &t.DwID, d...)
	cb.Do("DwRowIndex", &t.DwRowIndex, d...)
	cb.Do("DwColumnIndex", &t.DwColumnIndex, d...)
	cb.Do("ArQuestChains", &t.ArQuestChains, d...)
}

type BannerTextileTexture struct {
	SzName       DT_UINT
	HLabel       StringLabelHandleEx
	SnoNormal    DT_SNO
	SnoAlbedo    DT_SNO
	SnoRoughness DT_SNO
	HIcon        UIImageHandleReference
}

func (t *BannerTextileTexture) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SzName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.HLabel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.SnoNormal, r, &Options{
		Flags: 1,
		Group: 44,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoAlbedo, r, &Options{
		Flags: 1,
		Group: 44,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.SnoRoughness, r, &Options{
		Flags: 1,
		Group: 44,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.HIcon, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+28, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *BannerTextileTexture) Walk(cb WalkCallback, d ...any) {
	cb.Do("SzName", &t.SzName, d...)
	cb.Do("HLabel", &t.HLabel, d...)
	cb.Do("SnoNormal", &t.SnoNormal, d...)
	cb.Do("SnoAlbedo", &t.SnoAlbedo, d...)
	cb.Do("SnoRoughness", &t.SnoRoughness, d...)
	cb.Do("HIcon", &t.HIcon, d...)
}

type HeadstoneGizmoData struct {
	// Inherits ActorGizmoData
	// Inherits PolymorphicBase
	DwType                           DT_UINT
	DwPad                            DT_UINT
	FDisableNonFriendlyOperation     DT_INT
	FWalkToCenter                    DT_INT
	FGizmoStartsDisabled             DT_INT
	FUseStringListName               DT_INT
	FForceMinimapIcon                DT_INT
	FlOperationRadius                DT_FLOAT
	Unk_d0b1df5                      DT_FLOAT
	FlGizmoUseTime                   DT_FLOAT
	SnoChannelingEffect              DT_SNO
	Unk_2767229                      DT_INT
	FGizmoShowProgressBar            DT_INT
	Unk_6d9ebe1                      DT_INT
	Unk_5456245                      DT_INT
	Unk_af5815a                      DT_INT
	SnoOnClickEffect                 DT_SNO
	SnoPickedUpEffect                DT_SNO
	SnoDropOnGroundEffect            DT_SNO
	TConditionData                   GizmoConditionData
	SnoPowerOperator                 DT_SNO
	SnoPowerOperate                  DT_SNO
	SnoPowerOperatorActive           DT_SNO
	SnoPowerOperateActive            DT_SNO
	Unk_359810e                      DT_INT
	NCooldown                        DT_UINT
	Unk_9c8478e                      DT_UINT
	Unk_d45ed2d                      DT_INT
	Unk_f6b20b7                      DT_INT
	Unk_54513b8                      DT_INT
	Unk_fd1f378                      DT_UINT
	HGizmoOperateFlavorTextMsgLabel  DT_UINT
	HGizmoOperateDescriptionMsgLabel DT_UINT
	FlGizmoOperateOffset             DT_FLOAT
	Unk_ab58cd3                      DT_ENUM
	Unk_91a3966                      DT_UINT
	HGizmoChannelingLabel            DT_UINT
	Unk_4be4371                      DT_INT
	EClassRestriction                DT_ENUM
}

func (t *HeadstoneGizmoData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.FDisableNonFriendlyOperation, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.FWalkToCenter, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.FGizmoStartsDisabled, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.FUseStringListName, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.FForceMinimapIcon, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.FlOperationRadius, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.Unk_d0b1df5, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.FlGizmoUseTime, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.SnoChannelingEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.Unk_2767229, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.FGizmoShowProgressBar, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+60, &t.Unk_6d9ebe1, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.Unk_5456245, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.Unk_af5815a, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.SnoOnClickEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.SnoPickedUpEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.SnoDropOnGroundEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.TConditionData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.SnoPowerOperator, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.SnoPowerOperate, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.SnoPowerOperatorActive, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+100, &t.SnoPowerOperateActive, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+104, &t.Unk_359810e, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+108, &t.NCooldown, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.Unk_9c8478e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+116, &t.Unk_d45ed2d, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.Unk_f6b20b7, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+124, &t.Unk_54513b8, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.Unk_fd1f378, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+132, &t.HGizmoOperateFlavorTextMsgLabel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+136, &t.HGizmoOperateDescriptionMsgLabel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+140, &t.FlGizmoOperateOffset, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+144, &t.Unk_ab58cd3, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+148, &t.Unk_91a3966, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+152, &t.HGizmoChannelingLabel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+156, &t.Unk_4be4371, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+160, &t.EClassRestriction, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+168, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *HeadstoneGizmoData) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("FDisableNonFriendlyOperation", &t.FDisableNonFriendlyOperation, d...)
	cb.Do("FWalkToCenter", &t.FWalkToCenter, d...)
	cb.Do("FGizmoStartsDisabled", &t.FGizmoStartsDisabled, d...)
	cb.Do("FUseStringListName", &t.FUseStringListName, d...)
	cb.Do("FForceMinimapIcon", &t.FForceMinimapIcon, d...)
	cb.Do("FlOperationRadius", &t.FlOperationRadius, d...)
	cb.Do("Unk_d0b1df5", &t.Unk_d0b1df5, d...)
	cb.Do("FlGizmoUseTime", &t.FlGizmoUseTime, d...)
	cb.Do("SnoChannelingEffect", &t.SnoChannelingEffect, d...)
	cb.Do("Unk_2767229", &t.Unk_2767229, d...)
	cb.Do("FGizmoShowProgressBar", &t.FGizmoShowProgressBar, d...)
	cb.Do("Unk_6d9ebe1", &t.Unk_6d9ebe1, d...)
	cb.Do("Unk_5456245", &t.Unk_5456245, d...)
	cb.Do("Unk_af5815a", &t.Unk_af5815a, d...)
	cb.Do("SnoOnClickEffect", &t.SnoOnClickEffect, d...)
	cb.Do("SnoPickedUpEffect", &t.SnoPickedUpEffect, d...)
	cb.Do("SnoDropOnGroundEffect", &t.SnoDropOnGroundEffect, d...)
	cb.Do("TConditionData", &t.TConditionData, d...)
	cb.Do("SnoPowerOperator", &t.SnoPowerOperator, d...)
	cb.Do("SnoPowerOperate", &t.SnoPowerOperate, d...)
	cb.Do("SnoPowerOperatorActive", &t.SnoPowerOperatorActive, d...)
	cb.Do("SnoPowerOperateActive", &t.SnoPowerOperateActive, d...)
	cb.Do("Unk_359810e", &t.Unk_359810e, d...)
	cb.Do("NCooldown", &t.NCooldown, d...)
	cb.Do("Unk_9c8478e", &t.Unk_9c8478e, d...)
	cb.Do("Unk_d45ed2d", &t.Unk_d45ed2d, d...)
	cb.Do("Unk_f6b20b7", &t.Unk_f6b20b7, d...)
	cb.Do("Unk_54513b8", &t.Unk_54513b8, d...)
	cb.Do("Unk_fd1f378", &t.Unk_fd1f378, d...)
	cb.Do("HGizmoOperateFlavorTextMsgLabel", &t.HGizmoOperateFlavorTextMsgLabel, d...)
	cb.Do("HGizmoOperateDescriptionMsgLabel", &t.HGizmoOperateDescriptionMsgLabel, d...)
	cb.Do("FlGizmoOperateOffset", &t.FlGizmoOperateOffset, d...)
	cb.Do("Unk_ab58cd3", &t.Unk_ab58cd3, d...)
	cb.Do("Unk_91a3966", &t.Unk_91a3966, d...)
	cb.Do("HGizmoChannelingLabel", &t.HGizmoChannelingLabel, d...)
	cb.Do("Unk_4be4371", &t.Unk_4be4371, d...)
	cb.Do("EClassRestriction", &t.EClassRestriction, d...)
}

type PrefabData struct {
	DwFlags                 DT_UINT
	Unk_32bf9c6             DT_ENUM
	EFadeMethod             DT_ENUM
	NFadeGroup              DT_INT
	Unk_d094b9a             DT_ENUM
	ECullingLevel           DT_ENUM
	SzLookOverride          DT_UINT
	DwShaderMapOverride     DT_UINT
	PtRunTimeMaterialValues DT_VARIABLEARRAY[*RunTimeMaterialValues]
}

func (t *PrefabData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.DwFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.Unk_32bf9c6, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.EFadeMethod, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.NFadeGroup, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_d094b9a, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.ECullingLevel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SzLookOverride, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.DwShaderMapOverride, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.PtRunTimeMaterialValues, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PrefabData) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwFlags", &t.DwFlags, d...)
	cb.Do("Unk_32bf9c6", &t.Unk_32bf9c6, d...)
	cb.Do("EFadeMethod", &t.EFadeMethod, d...)
	cb.Do("NFadeGroup", &t.NFadeGroup, d...)
	cb.Do("Unk_d094b9a", &t.Unk_d094b9a, d...)
	cb.Do("ECullingLevel", &t.ECullingLevel, d...)
	cb.Do("SzLookOverride", &t.SzLookOverride, d...)
	cb.Do("DwShaderMapOverride", &t.DwShaderMapOverride, d...)
	cb.Do("PtRunTimeMaterialValues", &t.PtRunTimeMaterialValues, d...)
}

type MaterialEnumValue struct {
	Value DT_UINT
}

func (t *MaterialEnumValue) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Value, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+4, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *MaterialEnumValue) Walk(cb WalkCallback, d ...any) {
	cb.Do("Value", &t.Value, d...)
}

type OnNecroCorpseConsumedCallback struct {
	// Inherits BuffCallbackBase
	// Inherits PolymorphicBase
	DwType                DT_UINT
	DwPad                 DT_UINT
	SnoTriggerEffectGroup DT_SNO
	ArConditions          DT_POLYMORPHIC_VARIABLEARRAY[*DT_INT64]
}

func (t *OnNecroCorpseConsumedCallback) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoTriggerEffectGroup, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ArConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *OnNecroCorpseConsumedCallback) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("SnoTriggerEffectGroup", &t.SnoTriggerEffectGroup, d...)
	cb.Do("ArConditions", &t.ArConditions, d...)
}

type SlowAmountSettings struct {
	FlLight  DT_FLOAT
	FlMedium DT_FLOAT
	FlHeavy  DT_FLOAT
}

func (t *SlowAmountSettings) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.FlLight, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.FlMedium, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.FlHeavy, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+12, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *SlowAmountSettings) Walk(cb WalkCallback, d ...any) {
	cb.Do("FlLight", &t.FlLight, d...)
	cb.Do("FlMedium", &t.FlMedium, d...)
	cb.Do("FlHeavy", &t.FlHeavy, d...)
}

type StoreProductTemplate struct{}

func (t *StoreProductTemplate) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if _, err := r.Seek(p+1, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *StoreProductTemplate) Walk(cb WalkCallback, d ...any) {}

type PreloadInactiveMarkerMessage struct {
	THeader  RequiredMessageHeader
	DwID     DT_UINT
	TSNOName DT_SNO_NAME
}

func (t *PreloadInactiveMarkerMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.DwID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.TSNOName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+28, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PreloadInactiveMarkerMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("DwID", &t.DwID, d...)
	cb.Do("TSNOName", &t.TSNOName, d...)
}

type Type_ee5a7d4a struct {
	// Inherits PowerConditionBase
	// Inherits PolymorphicBase
	DwType         DT_UINT
	BInverse       DT_INT
	DwPad          DT_UINT
	SzVariableName DT_UINT
	FlValue        DT_FLOAT
}

func (t *Type_ee5a7d4a) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BInverse, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SzVariableName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.FlValue, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_ee5a7d4a) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("BInverse", &t.BInverse, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("SzVariableName", &t.SzVariableName, d...)
	cb.Do("FlValue", &t.FlValue, d...)
}

type SkillTagStruct struct {
	GbidSkillTag DT_GBID
	BSearchOnly  DT_INT
}

func (t *SkillTagStruct) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.GbidSkillTag, r, &Options{
		Flags: 1,
		Group: 56,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.BSearchOnly, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *SkillTagStruct) Walk(cb WalkCallback, d ...any) {
	cb.Do("GbidSkillTag", &t.GbidSkillTag, d...)
	cb.Do("BSearchOnly", &t.BSearchOnly, d...)
}

type TriggerEventRestoreTimeOfDay struct {
	// Inherits TriggerEvent
	// Inherits PolymorphicBase
	DwType          DT_UINT
	DwPad           DT_UINT
	TConditions     TriggerConditions
	FGenerated      DT_INT
	Unk_6cba752     DT_INT
	DwParentActorID DT_UINT
}

func (t *TriggerEventRestoreTimeOfDay) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.FGenerated, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_6cba752, r, &Options{Flags: 16}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.DwParentActorID, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+80, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TriggerEventRestoreTimeOfDay) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("TConditions", &t.TConditions, d...)
	cb.Do("FGenerated", &t.FGenerated, d...)
	cb.Do("Unk_6cba752", &t.Unk_6cba752, d...)
	cb.Do("DwParentActorID", &t.DwParentActorID, d...)
}

type TempCollisionMesh struct {
	PtVertices  DT_VARIABLEARRAY[*dmFloat4Mirror]
	PtTriangles DT_VARIABLEARRAY[*dmInputTriangleMirror]
}

func (t *TempCollisionMesh) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.PtVertices, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.PtTriangles, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TempCollisionMesh) Walk(cb WalkCallback, d ...any) {
	cb.Do("PtVertices", &t.PtVertices, d...)
	cb.Do("PtTriangles", &t.PtTriangles, d...)
}

type ExplosionDefinition struct {
	DwFlags               DT_UINT
	EType                 DT_ENUM
	WvDirection           DT_VECTOR3D
	PathMagnitudePerSec   InterpolationPath_float
	PathRadius            InterpolationPath_float
	THorizontalAngleRange DT_RANGE[*DT_FLOAT]
	TVerticalAngleRange   DT_RANGE[*DT_FLOAT]
	FlCutoffRadius        DT_FLOAT
	AHorizontalAngle      DT_FLOAT
	AVerticalAngle        DT_FLOAT
	FlDuration            DT_FLOAT
	FlChance              DT_FLOAT
	FlFrequency           DT_FLOAT
	WpOffsetMin           DT_VECTOR3D
	WpOffsetMax           DT_VECTOR3D
	Unk_c5b3851           DT_FLOAT
}

func (t *ExplosionDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.EType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.WvDirection, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.PathMagnitudePerSec, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.PathRadius, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+144, &t.THorizontalAngleRange, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+152, &t.TVerticalAngleRange, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+160, &t.FlCutoffRadius, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+164, &t.AHorizontalAngle, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+168, &t.AVerticalAngle, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+172, &t.FlDuration, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+176, &t.FlChance, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+180, &t.FlFrequency, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+184, &t.WpOffsetMin, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+196, &t.WpOffsetMax, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+208, &t.Unk_c5b3851, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+216, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ExplosionDefinition) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwFlags", &t.DwFlags, d...)
	cb.Do("EType", &t.EType, d...)
	cb.Do("WvDirection", &t.WvDirection, d...)
	cb.Do("PathMagnitudePerSec", &t.PathMagnitudePerSec, d...)
	cb.Do("PathRadius", &t.PathRadius, d...)
	cb.Do("THorizontalAngleRange", &t.THorizontalAngleRange, d...)
	cb.Do("TVerticalAngleRange", &t.TVerticalAngleRange, d...)
	cb.Do("FlCutoffRadius", &t.FlCutoffRadius, d...)
	cb.Do("AHorizontalAngle", &t.AHorizontalAngle, d...)
	cb.Do("AVerticalAngle", &t.AVerticalAngle, d...)
	cb.Do("FlDuration", &t.FlDuration, d...)
	cb.Do("FlChance", &t.FlChance, d...)
	cb.Do("FlFrequency", &t.FlFrequency, d...)
	cb.Do("WpOffsetMin", &t.WpOffsetMin, d...)
	cb.Do("WpOffsetMax", &t.WpOffsetMax, d...)
	cb.Do("Unk_c5b3851", &t.Unk_c5b3851, d...)
}

type GameTestingProfilingStarted struct {
	THeader     RequiredMessageHeader
	SampleIndex DT_INT
}

func (t *GameTestingProfilingStarted) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SampleIndex, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+20, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *GameTestingProfilingStarted) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("SampleIndex", &t.SampleIndex, d...)
}

type MarkerLevelAreaVolumeData struct {
	// Inherits MarkerDataBase
	// Inherits PolymorphicBase
	DwType                DT_UINT
	DwPad                 DT_UINT
	ELevelAreaVolumeShape DT_ENUM
	SnoLevelArea          DT_SNO
}

func (t *MarkerLevelAreaVolumeData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.ELevelAreaVolumeShape, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.SnoLevelArea, r, &Options{
		Flags: 1,
		Group: 22,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *MarkerLevelAreaVolumeData) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("ELevelAreaVolumeShape", &t.ELevelAreaVolumeShape, d...)
	cb.Do("SnoLevelArea", &t.SnoLevelArea, d...)
}

type MalignantGeneralData struct {
	GbidGlobalSpawningMalignantMonsterTag DT_GBID
	Unk_c80f300                           DT_VARIABLEARRAY[*DT_GBID]
	GbidLesserMalignantMonsterTag         DT_GBID
}

func (t *MalignantGeneralData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.GbidGlobalSpawningMalignantMonsterTag, r, &Options{
		Flags: 1,
		Group: 66,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.Unk_c80f300, r, &Options{
		Flags: 1,
		Group: 66,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.GbidLesserMalignantMonsterTag, r, &Options{
		Flags: 1,
		Group: 66,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *MalignantGeneralData) Walk(cb WalkCallback, d ...any) {
	cb.Do("GbidGlobalSpawningMalignantMonsterTag", &t.GbidGlobalSpawningMalignantMonsterTag, d...)
	cb.Do("Unk_c80f300", &t.Unk_c80f300, d...)
	cb.Do("GbidLesserMalignantMonsterTag", &t.GbidLesserMalignantMonsterTag, d...)
}

type VectorFieldDefinition struct {
	NDimX     DT_INT
	NDimY     DT_INT
	NDimZ     DT_INT
	FlMagMin  DT_FLOAT
	FlMagMax  DT_FLOAT
	Aabb      AABB
	PtSamples DT_VARIABLEARRAY[*DT_VECTOR3D]
}

func (t *VectorFieldDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.NDimX, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.NDimY, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.NDimZ, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.FlMagMin, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.FlMagMax, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.Aabb, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.PtSamples, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+72, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *VectorFieldDefinition) Walk(cb WalkCallback, d ...any) {
	cb.Do("NDimX", &t.NDimX, d...)
	cb.Do("NDimY", &t.NDimY, d...)
	cb.Do("NDimZ", &t.NDimZ, d...)
	cb.Do("FlMagMin", &t.FlMagMin, d...)
	cb.Do("FlMagMax", &t.FlMagMax, d...)
	cb.Do("Aabb", &t.Aabb, d...)
	cb.Do("PtSamples", &t.PtSamples, d...)
}

type UIButtonStyleOptionalFieldMapDefaults struct {
	HHeldButtonProgressTemplate   UIControlHandle
	SnoHeldButtonProgressSound    DT_SNO
	Unk_9a8825c                   DT_FLOAT
	Unk_a17abed                   DT_INT
	BButtonIsEnabled              DT_INT
	RgbaButtonDisabledColor       DT_RGBACOLOR
	TOnEnabledEffect              UIEffect
	SzClickPredicate              DT_CSTRING[*DT_BYTE]
	SzMiddleMax                   DT_CSTRING[*DT_BYTE]
	SzMiddleClickPredicate        DT_CSTRING[*DT_BYTE]
	SzHeldButtonPredicate         DT_CSTRING[*DT_BYTE]
	SzOnGainedFocus               DT_CSTRING[*DT_BYTE]
	SzOnLostFocus                 DT_CSTRING[*DT_BYTE]
	SzOnHitRegionEnter            DT_CSTRING[*DT_BYTE]
	SzOnHitRegionExit             DT_CSTRING[*DT_BYTE]
	EHotkey                       DT_ENUM
	EHotkeyAlternate              DT_ENUM
	NButtonPressHorizontal        DT_INT
	NButtonPressVertical          DT_INT
	SnoRightClickSound            DT_SNO
	SnoMiddleClickSound           DT_SNO
	HImageFrameMouseOver          UIImageHandleReference
	HImageFramePressed            UIImageHandleReference
	HImageFrameDisable            UIImageHandleReference
	SnoBtnTiledStyleNormal        DT_SNO
	SnoBtnTiledStyleMouseOver     DT_SNO
	SnoBtnTiledStylePressed       DT_SNO
	SnoBtnTiledStyleDisabled      DT_SNO
	RgbaForegroundHighlight       DT_RGBACOLOR
	RgbaDropShadowHighlight       DT_RGBACOLOR
	RgbaForegroundPushed          DT_RGBACOLOR
	RgbaDropShadowPushed          DT_RGBACOLOR
	RgbaForegroundPushedHighlight DT_RGBACOLOR
	RgbaDropShadowPushedHighlight DT_RGBACOLOR
	Unk_3368b                     DT_INT
}

func (t *UIButtonStyleOptionalFieldMapDefaults) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.HHeldButtonProgressTemplate, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.SnoHeldButtonProgressSound, r, &Options{
		Flags: 1,
		Group: 40,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.Unk_9a8825c, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_a17abed, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.BButtonIsEnabled, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.RgbaButtonDisabledColor, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.TOnEnabledEffect, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.SzClickPredicate, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.SzMiddleMax, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+104, &t.SzMiddleClickPredicate, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.SzHeldButtonPredicate, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+136, &t.SzOnGainedFocus, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+152, &t.SzOnLostFocus, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+168, &t.SzOnHitRegionEnter, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+184, &t.SzOnHitRegionExit, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+200, &t.EHotkey, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+204, &t.EHotkeyAlternate, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+208, &t.NButtonPressHorizontal, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+212, &t.NButtonPressVertical, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+216, &t.SnoRightClickSound, r, &Options{
		Flags: 1,
		Group: 40,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+220, &t.SnoMiddleClickSound, r, &Options{
		Flags: 1,
		Group: 40,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+224, &t.HImageFrameMouseOver, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+228, &t.HImageFramePressed, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+232, &t.HImageFrameDisable, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+236, &t.SnoBtnTiledStyleNormal, r, &Options{
		Flags: 1,
		Group: 103,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+240, &t.SnoBtnTiledStyleMouseOver, r, &Options{
		Flags: 1,
		Group: 103,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+244, &t.SnoBtnTiledStylePressed, r, &Options{
		Flags: 1,
		Group: 103,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+248, &t.SnoBtnTiledStyleDisabled, r, &Options{
		Flags: 1,
		Group: 103,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+252, &t.RgbaForegroundHighlight, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+256, &t.RgbaDropShadowHighlight, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+260, &t.RgbaForegroundPushed, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+264, &t.RgbaDropShadowPushed, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+268, &t.RgbaForegroundPushedHighlight, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+272, &t.RgbaDropShadowPushedHighlight, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+276, &t.Unk_3368b, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+280, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *UIButtonStyleOptionalFieldMapDefaults) Walk(cb WalkCallback, d ...any) {
	cb.Do("HHeldButtonProgressTemplate", &t.HHeldButtonProgressTemplate, d...)
	cb.Do("SnoHeldButtonProgressSound", &t.SnoHeldButtonProgressSound, d...)
	cb.Do("Unk_9a8825c", &t.Unk_9a8825c, d...)
	cb.Do("Unk_a17abed", &t.Unk_a17abed, d...)
	cb.Do("BButtonIsEnabled", &t.BButtonIsEnabled, d...)
	cb.Do("RgbaButtonDisabledColor", &t.RgbaButtonDisabledColor, d...)
	cb.Do("TOnEnabledEffect", &t.TOnEnabledEffect, d...)
	cb.Do("SzClickPredicate", &t.SzClickPredicate, d...)
	cb.Do("SzMiddleMax", &t.SzMiddleMax, d...)
	cb.Do("SzMiddleClickPredicate", &t.SzMiddleClickPredicate, d...)
	cb.Do("SzHeldButtonPredicate", &t.SzHeldButtonPredicate, d...)
	cb.Do("SzOnGainedFocus", &t.SzOnGainedFocus, d...)
	cb.Do("SzOnLostFocus", &t.SzOnLostFocus, d...)
	cb.Do("SzOnHitRegionEnter", &t.SzOnHitRegionEnter, d...)
	cb.Do("SzOnHitRegionExit", &t.SzOnHitRegionExit, d...)
	cb.Do("EHotkey", &t.EHotkey, d...)
	cb.Do("EHotkeyAlternate", &t.EHotkeyAlternate, d...)
	cb.Do("NButtonPressHorizontal", &t.NButtonPressHorizontal, d...)
	cb.Do("NButtonPressVertical", &t.NButtonPressVertical, d...)
	cb.Do("SnoRightClickSound", &t.SnoRightClickSound, d...)
	cb.Do("SnoMiddleClickSound", &t.SnoMiddleClickSound, d...)
	cb.Do("HImageFrameMouseOver", &t.HImageFrameMouseOver, d...)
	cb.Do("HImageFramePressed", &t.HImageFramePressed, d...)
	cb.Do("HImageFrameDisable", &t.HImageFrameDisable, d...)
	cb.Do("SnoBtnTiledStyleNormal", &t.SnoBtnTiledStyleNormal, d...)
	cb.Do("SnoBtnTiledStyleMouseOver", &t.SnoBtnTiledStyleMouseOver, d...)
	cb.Do("SnoBtnTiledStylePressed", &t.SnoBtnTiledStylePressed, d...)
	cb.Do("SnoBtnTiledStyleDisabled", &t.SnoBtnTiledStyleDisabled, d...)
	cb.Do("RgbaForegroundHighlight", &t.RgbaForegroundHighlight, d...)
	cb.Do("RgbaDropShadowHighlight", &t.RgbaDropShadowHighlight, d...)
	cb.Do("RgbaForegroundPushed", &t.RgbaForegroundPushed, d...)
	cb.Do("RgbaDropShadowPushed", &t.RgbaDropShadowPushed, d...)
	cb.Do("RgbaForegroundPushedHighlight", &t.RgbaForegroundPushedHighlight, d...)
	cb.Do("RgbaDropShadowPushedHighlight", &t.RgbaDropShadowPushedHighlight, d...)
	cb.Do("Unk_3368b", &t.Unk_3368b, d...)
}

type EffectGroupPositionXKeyData struct {
	// Inherits EffectGroupKeyData
	// Inherits PolymorphicBase
	DwType     DT_UINT
	DwPad      DT_UINT
	ArKeyItems DT_VARIABLEARRAY[*EffectGroupKey]
}

func (t *EffectGroupPositionXKeyData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.ArKeyItems, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *EffectGroupPositionXKeyData) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("ArKeyItems", &t.ArKeyItems, d...)
}

type AttachActorToActorMessage struct {
	THeader                 RequiredMessageHeader
	AnnMain                 DT_ACD_NETWORK_NAME
	AnnAttachment           DT_ACD_NETWORK_NAME
	DwHardPointMain         DT_UINT
	DwHardPointAttachment   DT_UINT
	QRot                    DT_OPTIONAL[*bcQuat]
	FImportHardpointRetreat DT_OPTIONAL[*DT_INT]
}

func (t *AttachActorToActorMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.AnnMain, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.AnnAttachment, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.DwHardPointMain, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.DwHardPointAttachment, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.QRot, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+60, &t.FImportHardpointRetreat, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+68, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *AttachActorToActorMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("AnnMain", &t.AnnMain, d...)
	cb.Do("AnnAttachment", &t.AnnAttachment, d...)
	cb.Do("DwHardPointMain", &t.DwHardPointMain, d...)
	cb.Do("DwHardPointAttachment", &t.DwHardPointAttachment, d...)
	cb.Do("QRot", &t.QRot, d...)
	cb.Do("FImportHardpointRetreat", &t.FImportHardpointRetreat, d...)
}

type ActorBrainData struct {
	EDefaultBrain               DT_ENUM
	EBehaviorType               DT_ENUM
	FlRadiusTriggerRadius       DT_FLOAT
	TRadiusTriggerIntervalRange DT_RANGE[*DT_FLOAT]
	FRadiusTriggerOneShot       DT_INT
	TAIDisperseData             ActorAIDisperseData
	SnoRetreatOverride          DT_SNO
}

func (t *ActorBrainData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.EDefaultBrain, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.EBehaviorType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.FlRadiusTriggerRadius, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.TRadiusTriggerIntervalRange, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.FRadiusTriggerOneShot, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.TAIDisperseData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.SnoRetreatOverride, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ActorBrainData) Walk(cb WalkCallback, d ...any) {
	cb.Do("EDefaultBrain", &t.EDefaultBrain, d...)
	cb.Do("EBehaviorType", &t.EBehaviorType, d...)
	cb.Do("FlRadiusTriggerRadius", &t.FlRadiusTriggerRadius, d...)
	cb.Do("TRadiusTriggerIntervalRange", &t.TRadiusTriggerIntervalRange, d...)
	cb.Do("FRadiusTriggerOneShot", &t.FRadiusTriggerOneShot, d...)
	cb.Do("TAIDisperseData", &t.TAIDisperseData, d...)
	cb.Do("SnoRetreatOverride", &t.SnoRetreatOverride, d...)
}

type SavePointPortalGizmoData struct {
	// Inherits ActorGizmoData
	// Inherits PolymorphicBase
	DwType                           DT_UINT
	DwPad                            DT_UINT
	FDisableNonFriendlyOperation     DT_INT
	FWalkToCenter                    DT_INT
	FGizmoStartsDisabled             DT_INT
	FUseStringListName               DT_INT
	FForceMinimapIcon                DT_INT
	FlOperationRadius                DT_FLOAT
	Unk_d0b1df5                      DT_FLOAT
	FlGizmoUseTime                   DT_FLOAT
	SnoChannelingEffect              DT_SNO
	Unk_2767229                      DT_INT
	FGizmoShowProgressBar            DT_INT
	Unk_6d9ebe1                      DT_INT
	Unk_5456245                      DT_INT
	Unk_af5815a                      DT_INT
	SnoOnClickEffect                 DT_SNO
	SnoPickedUpEffect                DT_SNO
	SnoDropOnGroundEffect            DT_SNO
	TConditionData                   GizmoConditionData
	SnoPowerOperator                 DT_SNO
	SnoPowerOperate                  DT_SNO
	SnoPowerOperatorActive           DT_SNO
	SnoPowerOperateActive            DT_SNO
	Unk_359810e                      DT_INT
	NCooldown                        DT_UINT
	Unk_9c8478e                      DT_UINT
	Unk_d45ed2d                      DT_INT
	Unk_f6b20b7                      DT_INT
	Unk_54513b8                      DT_INT
	Unk_fd1f378                      DT_UINT
	HGizmoOperateFlavorTextMsgLabel  DT_UINT
	HGizmoOperateDescriptionMsgLabel DT_UINT
	FlGizmoOperateOffset             DT_FLOAT
	Unk_ab58cd3                      DT_ENUM
	Unk_91a3966                      DT_UINT
	HGizmoChannelingLabel            DT_UINT
	Unk_4be4371                      DT_INT
	DwEntranceName                   DT_STARTLOC_NAME
	Unk_d2a1272                      DT_INT
}

func (t *SavePointPortalGizmoData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.FDisableNonFriendlyOperation, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.FWalkToCenter, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.FGizmoStartsDisabled, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.FUseStringListName, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.FForceMinimapIcon, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.FlOperationRadius, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.Unk_d0b1df5, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.FlGizmoUseTime, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.SnoChannelingEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.Unk_2767229, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.FGizmoShowProgressBar, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+60, &t.Unk_6d9ebe1, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.Unk_5456245, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.Unk_af5815a, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.SnoOnClickEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.SnoPickedUpEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.SnoDropOnGroundEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.TConditionData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.SnoPowerOperator, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.SnoPowerOperate, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.SnoPowerOperatorActive, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+100, &t.SnoPowerOperateActive, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+104, &t.Unk_359810e, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+108, &t.NCooldown, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.Unk_9c8478e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+116, &t.Unk_d45ed2d, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.Unk_f6b20b7, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+124, &t.Unk_54513b8, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.Unk_fd1f378, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+132, &t.HGizmoOperateFlavorTextMsgLabel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+136, &t.HGizmoOperateDescriptionMsgLabel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+140, &t.FlGizmoOperateOffset, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+144, &t.Unk_ab58cd3, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+148, &t.Unk_91a3966, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+152, &t.HGizmoChannelingLabel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+156, &t.Unk_4be4371, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+160, &t.DwEntranceName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+164, &t.Unk_d2a1272, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+168, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *SavePointPortalGizmoData) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("FDisableNonFriendlyOperation", &t.FDisableNonFriendlyOperation, d...)
	cb.Do("FWalkToCenter", &t.FWalkToCenter, d...)
	cb.Do("FGizmoStartsDisabled", &t.FGizmoStartsDisabled, d...)
	cb.Do("FUseStringListName", &t.FUseStringListName, d...)
	cb.Do("FForceMinimapIcon", &t.FForceMinimapIcon, d...)
	cb.Do("FlOperationRadius", &t.FlOperationRadius, d...)
	cb.Do("Unk_d0b1df5", &t.Unk_d0b1df5, d...)
	cb.Do("FlGizmoUseTime", &t.FlGizmoUseTime, d...)
	cb.Do("SnoChannelingEffect", &t.SnoChannelingEffect, d...)
	cb.Do("Unk_2767229", &t.Unk_2767229, d...)
	cb.Do("FGizmoShowProgressBar", &t.FGizmoShowProgressBar, d...)
	cb.Do("Unk_6d9ebe1", &t.Unk_6d9ebe1, d...)
	cb.Do("Unk_5456245", &t.Unk_5456245, d...)
	cb.Do("Unk_af5815a", &t.Unk_af5815a, d...)
	cb.Do("SnoOnClickEffect", &t.SnoOnClickEffect, d...)
	cb.Do("SnoPickedUpEffect", &t.SnoPickedUpEffect, d...)
	cb.Do("SnoDropOnGroundEffect", &t.SnoDropOnGroundEffect, d...)
	cb.Do("TConditionData", &t.TConditionData, d...)
	cb.Do("SnoPowerOperator", &t.SnoPowerOperator, d...)
	cb.Do("SnoPowerOperate", &t.SnoPowerOperate, d...)
	cb.Do("SnoPowerOperatorActive", &t.SnoPowerOperatorActive, d...)
	cb.Do("SnoPowerOperateActive", &t.SnoPowerOperateActive, d...)
	cb.Do("Unk_359810e", &t.Unk_359810e, d...)
	cb.Do("NCooldown", &t.NCooldown, d...)
	cb.Do("Unk_9c8478e", &t.Unk_9c8478e, d...)
	cb.Do("Unk_d45ed2d", &t.Unk_d45ed2d, d...)
	cb.Do("Unk_f6b20b7", &t.Unk_f6b20b7, d...)
	cb.Do("Unk_54513b8", &t.Unk_54513b8, d...)
	cb.Do("Unk_fd1f378", &t.Unk_fd1f378, d...)
	cb.Do("HGizmoOperateFlavorTextMsgLabel", &t.HGizmoOperateFlavorTextMsgLabel, d...)
	cb.Do("HGizmoOperateDescriptionMsgLabel", &t.HGizmoOperateDescriptionMsgLabel, d...)
	cb.Do("FlGizmoOperateOffset", &t.FlGizmoOperateOffset, d...)
	cb.Do("Unk_ab58cd3", &t.Unk_ab58cd3, d...)
	cb.Do("Unk_91a3966", &t.Unk_91a3966, d...)
	cb.Do("HGizmoChannelingLabel", &t.HGizmoChannelingLabel, d...)
	cb.Do("Unk_4be4371", &t.Unk_4be4371, d...)
	cb.Do("DwEntranceName", &t.DwEntranceName, d...)
	cb.Do("Unk_d2a1272", &t.Unk_d2a1272, d...)
}

type EffectItem struct {
	DwWeight            DT_UINT
	SnoSurfaces         DT_VARIABLEARRAY[*DT_SNO]
	ArWeaponItemTypes   DT_VARIABLEARRAY[*DT_SNO]
	ArMonsterArchetypes DT_VARIABLEARRAY[*DT_UINT]
	ArActorVariantTypes DT_VARIABLEARRAY[*DT_ENUM]
	ArTopology          DT_VARIABLEARRAY[*DT_ENUM]
	Unk_43e7b5a         DT_VARIABLEARRAY[*DT_ENUM]
	DwHash              DT_UINT
	TMsgTriggeredEvents MsgTriggeredEvent
}

func (t *EffectItem) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.DwWeight, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.SnoSurfaces, r, &Options{
		Flags: 1,
		Group: 43,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ArWeaponItemTypes, r, &Options{
		Flags: 1,
		Group: 98,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.ArMonsterArchetypes, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.ArActorVariantTypes, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.ArTopology, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.Unk_43e7b5a, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+104, &t.DwHash, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.TMsgTriggeredEvents, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+152, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *EffectItem) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwWeight", &t.DwWeight, d...)
	cb.Do("SnoSurfaces", &t.SnoSurfaces, d...)
	cb.Do("ArWeaponItemTypes", &t.ArWeaponItemTypes, d...)
	cb.Do("ArMonsterArchetypes", &t.ArMonsterArchetypes, d...)
	cb.Do("ArActorVariantTypes", &t.ArActorVariantTypes, d...)
	cb.Do("ArTopology", &t.ArTopology, d...)
	cb.Do("Unk_43e7b5a", &t.Unk_43e7b5a, d...)
	cb.Do("DwHash", &t.DwHash, d...)
	cb.Do("TMsgTriggeredEvents", &t.TMsgTriggeredEvents, d...)
}

type AppearanceMaterial struct {
	DwMaterialHash   DT_UINT
	FPersonaMaterial DT_INT
	DwPersona        DT_BYTE
	PtSOAs           DT_VARIABLEARRAY[*SubObjectAppearance]
}

func (t *AppearanceMaterial) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.DwMaterialHash, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.FPersonaMaterial, r, &Options{Flags: 16}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwPersona, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.PtSOAs, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *AppearanceMaterial) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwMaterialHash", &t.DwMaterialHash, d...)
	cb.Do("FPersonaMaterial", &t.FPersonaMaterial, d...)
	cb.Do("DwPersona", &t.DwPersona, d...)
	cb.Do("PtSOAs", &t.PtSOAs, d...)
}

type ScriptEventParamPrefabScopedActorGroup struct {
	// Inherits ScriptEventParamBase
	// Inherits PolymorphicBase
	DwType                     DT_UINT
	EParamType                 DT_ENUM
	DwPad                      DT_UINT
	GbidPrefabScopedActorGroup DT_GBID
}

func (t *ScriptEventParamPrefabScopedActorGroup) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.EParamType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.GbidPrefabScopedActorGroup, r, &Options{
		Flags: 1,
		Group: 51,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ScriptEventParamPrefabScopedActorGroup) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("EParamType", &t.EParamType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("GbidPrefabScopedActorGroup", &t.GbidPrefabScopedActorGroup, d...)
}

type Type_f0f63f3d struct {
	URewardClaimedFlags DT_UINT
}

func (t *Type_f0f63f3d) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.URewardClaimedFlags, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+4, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_f0f63f3d) Walk(cb WalkCallback, d ...any) {
	cb.Do("URewardClaimedFlags", &t.URewardClaimedFlags, d...)
}

type HiddenCacheEntry struct {
	THeader          GBIDHeader
	SnoTrackedReward DT_SNO
}

func (t *HiddenCacheEntry) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+260, &t.SnoTrackedReward, r, &Options{
		Flags: 1,
		Group: 126,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+264, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *HiddenCacheEntry) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("SnoTrackedReward", &t.SnoTrackedReward, d...)
}

type ScriptEventParamLinkedMarkerInGroup struct {
	// Inherits ScriptEventParamBase
	// Inherits PolymorphicBase
	DwType      DT_UINT
	EParamType  DT_ENUM
	DwPad       DT_UINT
	DwGroupHash DT_UINT
	IdValue     DT_INT
	SzGroup     DT_CSTRING[*DT_BYTE]
}

func (t *ScriptEventParamLinkedMarkerInGroup) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.EParamType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.DwGroupHash, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.IdValue, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.SzGroup, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ScriptEventParamLinkedMarkerInGroup) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("EParamType", &t.EParamType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("DwGroupHash", &t.DwGroupHash, d...)
	cb.Do("IdValue", &t.IdValue, d...)
	cb.Do("SzGroup", &t.SzGroup, d...)
}

type AuthorityTransferredAckMessage struct {
	THeader RequiredMessageHeader
	TTrace  TraceMessage
}

func (t *AuthorityTransferredAckMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TTrace, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+96, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *AuthorityTransferredAckMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("TTrace", &t.TTrace, d...)
}

type GameSyncedDebugDataMessage struct {
	THeader          RequiredMessageHeader
	TSyncedDebugData GameSyncedDebugData
}

func (t *GameSyncedDebugDataMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TSyncedDebugData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+456, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *GameSyncedDebugDataMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("TSyncedDebugData", &t.TSyncedDebugData, d...)
}

type dmFrameMirror struct {
	Q DT_VECTOR4D
	P DT_VECTOR4D
	S DT_VECTOR4D
}

func (t *dmFrameMirror) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Q, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.P, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.S, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *dmFrameMirror) Walk(cb WalkCallback, d ...any) {
	cb.Do("Q", &t.Q, d...)
	cb.Do("P", &t.P, d...)
	cb.Do("S", &t.S, d...)
}

type LookAtBone struct {
	THardpointLookAt    HardpointLink
	AYawMin             DT_FLOAT
	AYawMax             DT_FLOAT
	Unk_5559079         DT_RANGE[*DT_FLOAT]
	APitchMin           DT_FLOAT
	APitchMax           DT_FLOAT
	Unk_5d19a0          DT_RANGE[*DT_FLOAT]
	APitchOffset        DT_FLOAT
	ASpeed              DT_FLOAT
	BYawOnly            DT_INT
	BDynamicPitchOffset DT_INT
	FlDelay             DT_FLOAT
}

func (t *LookAtBone) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THardpointLookAt, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.AYawMin, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.AYawMax, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_5559079, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.APitchMin, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.APitchMax, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.Unk_5d19a0, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.APitchOffset, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.ASpeed, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.BYawOnly, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.BDynamicPitchOffset, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.FlDelay, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+60, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *LookAtBone) Walk(cb WalkCallback, d ...any) {
	cb.Do("THardpointLookAt", &t.THardpointLookAt, d...)
	cb.Do("AYawMin", &t.AYawMin, d...)
	cb.Do("AYawMax", &t.AYawMax, d...)
	cb.Do("Unk_5559079", &t.Unk_5559079, d...)
	cb.Do("APitchMin", &t.APitchMin, d...)
	cb.Do("APitchMax", &t.APitchMax, d...)
	cb.Do("Unk_5d19a0", &t.Unk_5d19a0, d...)
	cb.Do("APitchOffset", &t.APitchOffset, d...)
	cb.Do("ASpeed", &t.ASpeed, d...)
	cb.Do("BYawOnly", &t.BYawOnly, d...)
	cb.Do("BDynamicPitchOffset", &t.BDynamicPitchOffset, d...)
	cb.Do("FlDelay", &t.FlDelay, d...)
}

type LookAtData struct {
	FlRange                    DT_FLOAT
	Unk_5115351                DT_FLOAT
	ArBones                    DT_VARIABLEARRAY[*LookAtBone]
	TSlopeBone                 SlopeBone
	THardpointLinkLookAtTarget HardpointLink
}

func (t *LookAtData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.FlRange, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.Unk_5115351, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.ArBones, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.TSlopeBone, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.THardpointLinkLookAtTarget, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *LookAtData) Walk(cb WalkCallback, d ...any) {
	cb.Do("FlRange", &t.FlRange, d...)
	cb.Do("Unk_5115351", &t.Unk_5115351, d...)
	cb.Do("ArBones", &t.ArBones, d...)
	cb.Do("TSlopeBone", &t.TSlopeBone, d...)
	cb.Do("THardpointLinkLookAtTarget", &t.THardpointLinkLookAtTarget, d...)
}

type NecroArmySpecMessage struct {
	THeader         RequiredMessageHeader
	EUnitType       DT_ENUM
	ESpecialization DT_ENUM
}

func (t *NecroArmySpecMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.EUnitType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.ESpecialization, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *NecroArmySpecMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("EUnitType", &t.EUnitType, d...)
	cb.Do("ESpecialization", &t.ESpecialization, d...)
}

type OnRetreatCallback struct {
	// Inherits BuffCallbackBase
	// Inherits PolymorphicBase
	DwType                DT_UINT
	DwPad                 DT_UINT
	SnoTriggerEffectGroup DT_SNO
	ArConditions          DT_POLYMORPHIC_VARIABLEARRAY[*DT_INT64]
}

func (t *OnRetreatCallback) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoTriggerEffectGroup, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ArConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *OnRetreatCallback) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("SnoTriggerEffectGroup", &t.SnoTriggerEffectGroup, d...)
	cb.Do("ArConditions", &t.ArConditions, d...)
}

type GlobalCharacterPresets struct {
	// Inherits GlobalBase
	// Inherits PolymorphicBase
	DwType   DT_UINT
	DwPad    DT_UINT
	ArHeroes DT_VARIABLEARRAY[*HeroPreset]
	ArMounts DT_VARIABLEARRAY[*MountPreset]
	ArNPCs   DT_VARIABLEARRAY[*NPCPreset]
}

func (t *GlobalCharacterPresets) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.ArHeroes, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.ArMounts, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.ArNPCs, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+64, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *GlobalCharacterPresets) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("ArHeroes", &t.ArHeroes, d...)
	cb.Do("ArMounts", &t.ArMounts, d...)
	cb.Do("ArNPCs", &t.ArNPCs, d...)
}

type StopConvLineMessage struct {
	THeader        RequiredMessageHeader
	NConvLineGUID  DT_INT
	FStoppedByUser DT_INT
}

func (t *StopConvLineMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.NConvLineGUID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.FStoppedByUser, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *StopConvLineMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("NConvLineGUID", &t.NConvLineGUID, d...)
	cb.Do("FStoppedByUser", &t.FStoppedByUser, d...)
}

type UIListItemStyleOptionalFieldMapDefaults struct {
	HImageFrameListMouseOver UIImageHandleReference
	HImageFrameSelected      UIImageHandleReference
	HImageFrameUnselected    UIImageHandleReference
	SnoTiledStyleMouseOver   DT_SNO
	SnoTiledStyleSelected    DT_SNO
	SnoTiledStyleUnselected  DT_SNO
}

func (t *UIListItemStyleOptionalFieldMapDefaults) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.HImageFrameListMouseOver, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.HImageFrameSelected, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.HImageFrameUnselected, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.SnoTiledStyleMouseOver, r, &Options{
		Flags: 1,
		Group: 103,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoTiledStyleSelected, r, &Options{
		Flags: 1,
		Group: 103,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.SnoTiledStyleUnselected, r, &Options{
		Flags: 1,
		Group: 103,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *UIListItemStyleOptionalFieldMapDefaults) Walk(cb WalkCallback, d ...any) {
	cb.Do("HImageFrameListMouseOver", &t.HImageFrameListMouseOver, d...)
	cb.Do("HImageFrameSelected", &t.HImageFrameSelected, d...)
	cb.Do("HImageFrameUnselected", &t.HImageFrameUnselected, d...)
	cb.Do("SnoTiledStyleMouseOver", &t.SnoTiledStyleMouseOver, d...)
	cb.Do("SnoTiledStyleSelected", &t.SnoTiledStyleSelected, d...)
	cb.Do("SnoTiledStyleUnselected", &t.SnoTiledStyleUnselected, d...)
}

type BloodSealUpdateDisabledMessage struct {
	THeader     RequiredMessageHeader
	Unk_1d1c9f3 DT_FIXEDARRAY[*DT_SNO]
	Unk_cc50946 DT_FIXEDARRAY[*DT_SNO]
}

func (t *BloodSealUpdateDisabledMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_1d1c9f3, r, &Options{
		ArrayLength: 5,
		Flags:       9,
		Group:       142,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.Unk_cc50946, r, &Options{
		ArrayLength: 5,
		Flags:       9,
		Group:       142,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+64, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *BloodSealUpdateDisabledMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("Unk_1d1c9f3", &t.Unk_1d1c9f3, d...)
	cb.Do("Unk_cc50946", &t.Unk_cc50946, d...)
}

type ActorDeathData struct {
	ArDeathEffectGroups DT_FIXEDARRAY[*DT_SNO]
	SnoPowerDeath       DT_SNO
	Unk_2a26311         DT_SNO
	Unk_6f9a204         DT_INT
}

func (t *ActorDeathData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.ArDeathEffectGroups, r, &Options{
		ArrayLength: 6,
		Flags:       1,
		Group:       14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SnoPowerDeath, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.Unk_2a26311, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.Unk_6f9a204, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+36, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ActorDeathData) Walk(cb WalkCallback, d ...any) {
	cb.Do("ArDeathEffectGroups", &t.ArDeathEffectGroups, d...)
	cb.Do("SnoPowerDeath", &t.SnoPowerDeath, d...)
	cb.Do("Unk_2a26311", &t.Unk_2a26311, d...)
	cb.Do("Unk_6f9a204", &t.Unk_6f9a204, d...)
}

type PowerConditionParagonNodeIsPurchased struct {
	// Inherits PowerConditionBase
	// Inherits PolymorphicBase
	DwType         DT_UINT
	BInverse       DT_INT
	DwPad          DT_UINT
	ESubject       DT_ENUM
	SnoParagonNode DT_SNO
}

func (t *PowerConditionParagonNodeIsPurchased) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BInverse, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ESubject, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.SnoParagonNode, r, &Options{
		Flags: 513,
		Group: 106,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PowerConditionParagonNodeIsPurchased) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("BInverse", &t.BInverse, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("ESubject", &t.ESubject, d...)
	cb.Do("SnoParagonNode", &t.SnoParagonNode, d...)
}

type TriggerEventPlayConversationLine struct {
	// Inherits TriggerEventRangedDuration
	// Inherits TriggerEvent
	// Inherits PolymorphicBase
	DwType               DT_UINT
	TConditions          TriggerConditions
	FGenerated           DT_INT
	Unk_6cba752          DT_INT
	DwParentActorID      DT_UINT
	TDuration            DT_FLOAT
	DwTriggerFlags       DT_UINT
	DwTriggerFlagsEx     DT_UINT
	TCleanup             TriggerCleanup
	Unk_49e9257          DT_INT
	Unk_5490979          DT_INT
	DwPad                DT_UINT
	DwConversationNodeID DT_UINT
	DwActorID            DT_UINT
	FIsSkipPoint         DT_INT
	Unk_e8a81a5          DT_UINT
}

func (t *TriggerEventPlayConversationLine) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.FGenerated, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_6cba752, r, &Options{Flags: 16}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.DwParentActorID, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.TDuration, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.DwTriggerFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.DwTriggerFlagsEx, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.TCleanup, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+116, &t.Unk_49e9257, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.Unk_5490979, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+124, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.DwConversationNodeID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+132, &t.DwActorID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+136, &t.FIsSkipPoint, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+140, &t.Unk_e8a81a5, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+144, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TriggerEventPlayConversationLine) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("TConditions", &t.TConditions, d...)
	cb.Do("FGenerated", &t.FGenerated, d...)
	cb.Do("Unk_6cba752", &t.Unk_6cba752, d...)
	cb.Do("DwParentActorID", &t.DwParentActorID, d...)
	cb.Do("TDuration", &t.TDuration, d...)
	cb.Do("DwTriggerFlags", &t.DwTriggerFlags, d...)
	cb.Do("DwTriggerFlagsEx", &t.DwTriggerFlagsEx, d...)
	cb.Do("TCleanup", &t.TCleanup, d...)
	cb.Do("Unk_49e9257", &t.Unk_49e9257, d...)
	cb.Do("Unk_5490979", &t.Unk_5490979, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("DwConversationNodeID", &t.DwConversationNodeID, d...)
	cb.Do("DwActorID", &t.DwActorID, d...)
	cb.Do("FIsSkipPoint", &t.FIsSkipPoint, d...)
	cb.Do("Unk_e8a81a5", &t.Unk_e8a81a5, d...)
}

type ACDTranslateDetPathMessage struct {
	THeader             RequiredMessageHeader
	Ann                 DT_ACD_NETWORK_NAME
	EDPath              DT_ENUM
	TSeed               RandomNumberGenerator
	WvVelocity          DT_VECTOR3D
	AOriginalYaw        DT_FLOAT
	VStartPos           DT_VECTOR3D
	VTargetPos          DT_VECTOR3D
	UMoveFlags          DT_UINT
	SnoPowerPassability DT_SNO
	NInt0               DT_INT
	FlVar0              DT_FLOAT
	FlVar1              DT_FLOAT
	FlVar2              DT_FLOAT
	FlVar3              DT_FLOAT
	FlVar4              DT_FLOAT
	FlSpeedMult         DT_FLOAT
}

func (t *ACDTranslateDetPathMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Ann, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.EDPath, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.TSeed, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.WvVelocity, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.AOriginalYaw, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.VStartPos, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.VTargetPos, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.UMoveFlags, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.SnoPowerPassability, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.NInt0, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.FlVar0, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.FlVar1, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.FlVar2, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+100, &t.FlVar3, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+104, &t.FlVar4, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+108, &t.FlSpeedMult, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+112, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ACDTranslateDetPathMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("Ann", &t.Ann, d...)
	cb.Do("EDPath", &t.EDPath, d...)
	cb.Do("TSeed", &t.TSeed, d...)
	cb.Do("WvVelocity", &t.WvVelocity, d...)
	cb.Do("AOriginalYaw", &t.AOriginalYaw, d...)
	cb.Do("VStartPos", &t.VStartPos, d...)
	cb.Do("VTargetPos", &t.VTargetPos, d...)
	cb.Do("UMoveFlags", &t.UMoveFlags, d...)
	cb.Do("SnoPowerPassability", &t.SnoPowerPassability, d...)
	cb.Do("NInt0", &t.NInt0, d...)
	cb.Do("FlVar0", &t.FlVar0, d...)
	cb.Do("FlVar1", &t.FlVar1, d...)
	cb.Do("FlVar2", &t.FlVar2, d...)
	cb.Do("FlVar3", &t.FlVar3, d...)
	cb.Do("FlVar4", &t.FlVar4, d...)
	cb.Do("FlSpeedMult", &t.FlSpeedMult, d...)
}

type EndConversationMessage struct {
	THeader         RequiredMessageHeader
	SnoConversation DT_SNO
	Unk_1dc956e     DT_UINT
}

func (t *EndConversationMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoConversation, r, &Options{
		Flags: 1,
		Group: 12,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.Unk_1dc956e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *EndConversationMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("SnoConversation", &t.SnoConversation, d...)
	cb.Do("Unk_1dc956e", &t.Unk_1dc956e, d...)
}

type UIKeyMappingButtonStyleOptionalFieldMapDefaults struct {
	SzOnKey     DT_CSTRING[*DT_BYTE]
	Unk_147ed31 DT_INT
}

func (t *UIKeyMappingButtonStyleOptionalFieldMapDefaults) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SzOnKey, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_147ed31, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *UIKeyMappingButtonStyleOptionalFieldMapDefaults) Walk(cb WalkCallback, d ...any) {
	cb.Do("SzOnKey", &t.SzOnKey, d...)
	cb.Do("Unk_147ed31", &t.Unk_147ed31, d...)
}

type MarkerSetDefinition struct {
	TMarkerSet                 DT_VARIABLEARRAY[*Marker]
	DwMarkerSetFlags           DT_UINT
	NLabel                     DT_GBID
	SnoCampaignEnableCondition DT_SNO
	ArPrefabDataInfo           DT_VARIABLEARRAY[*PrefabDataInfo]
	PtPrefabDataMap            DT_INT64
	PtChunks                   DT_VARIABLEARRAY[*MarkerInstanceChunk]
	ArVertexAOOffsets          DT_VARIABLEARRAY[*MarkerPathToAOOffset]
	PtMergedMsgTriggeredEvents DT_VARIABLEARRAY[*MergedMsgTriggeredEvent]
	Unk_2bbd1d                 Type_c8d78ce7
	ArVertexAO                 DT_VARIABLEARRAY[*DT_BYTE]
	Unk_2f217b0                DT_INT
	PtPrefabAOMap              DT_INT64
}

func (t *MarkerSetDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.TMarkerSet, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.DwMarkerSetFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.NLabel, r, &Options{
		Flags: 1,
		Group: 4,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.SnoCampaignEnableCondition, r, &Options{
		Flags: 1,
		Group: 51,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.ArPrefabDataInfo, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.PtPrefabDataMap, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.PtChunks, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.ArVertexAOOffsets, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.PtMergedMsgTriggeredEvents, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.Unk_2bbd1d, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+256, &t.ArVertexAO, r, &Options{Flags: 2097152}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+272, &t.Unk_2f217b0, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+280, &t.PtPrefabAOMap, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if _, err := r.Seek(p+288, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *MarkerSetDefinition) Walk(cb WalkCallback, d ...any) {
	cb.Do("TMarkerSet", &t.TMarkerSet, d...)
	cb.Do("DwMarkerSetFlags", &t.DwMarkerSetFlags, d...)
	cb.Do("NLabel", &t.NLabel, d...)
	cb.Do("SnoCampaignEnableCondition", &t.SnoCampaignEnableCondition, d...)
	cb.Do("ArPrefabDataInfo", &t.ArPrefabDataInfo, d...)
	cb.Do("PtPrefabDataMap", &t.PtPrefabDataMap, d...)
	cb.Do("PtChunks", &t.PtChunks, d...)
	cb.Do("ArVertexAOOffsets", &t.ArVertexAOOffsets, d...)
	cb.Do("PtMergedMsgTriggeredEvents", &t.PtMergedMsgTriggeredEvents, d...)
	cb.Do("Unk_2bbd1d", &t.Unk_2bbd1d, d...)
	cb.Do("ArVertexAO", &t.ArVertexAO, d...)
	cb.Do("Unk_2f217b0", &t.Unk_2f217b0, d...)
	cb.Do("PtPrefabAOMap", &t.PtPrefabAOMap, d...)
}

type PrefabCustomizedMarker struct {
	TMarker Marker
}

func (t *PrefabCustomizedMarker) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.TMarker, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+184, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PrefabCustomizedMarker) Walk(cb WalkCallback, d ...any) {
	cb.Do("TMarker", &t.TMarker, d...)
}

type EffectGroupMaterialTrack struct {
	// Inherits EffectGroupStandardTrack
	// Inherits EffectGroupTrack
	// Inherits PolymorphicBase
	DwType DT_UINT
	DwPad  DT_UINT
}

func (t *EffectGroupMaterialTrack) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *EffectGroupMaterialTrack) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
}

type Type_f47ac7d8 struct {
	EInventorySlot DT_ENUM
	Unk_6ea9dd     DT_INT
}

func (t *Type_f47ac7d8) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.EInventorySlot, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.Unk_6ea9dd, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_f47ac7d8) Walk(cb WalkCallback, d ...any) {
	cb.Do("EInventorySlot", &t.EInventorySlot, d...)
	cb.Do("Unk_6ea9dd", &t.Unk_6ea9dd, d...)
}

type PlayerWarpedMessage struct {
	THeader      RequiredMessageHeader
	IdClientUser DT_INT
	EWarpReason  DT_ENUM
}

func (t *PlayerWarpedMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.IdClientUser, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.EWarpReason, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PlayerWarpedMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("IdClientUser", &t.IdClientUser, d...)
	cb.Do("EWarpReason", &t.EWarpReason, d...)
}

type TryConsoleCommand struct {
	THeader               RequiredMessageHeader
	DwPlayerGameAccountId DT_UINT
	Unk_243faa3           DT_OPTIONAL[*DT_UINT]
	UsMessage             DT_CHARARRAY
	TPlaceTarget          SharedServerWorldPlace
	AnnTarget             DT_ACD_NETWORK_NAME
	DwFlags               DT_UINT
}

func (t *TryConsoleCommand) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.DwPlayerGameAccountId, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.Unk_243faa3, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.UsMessage, r, &Options{
		ArrayLength: 1024,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1052, &t.TPlaceTarget, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1072, &t.AnnTarget, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1080, &t.DwFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if _, err := r.Seek(p+1084, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TryConsoleCommand) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("DwPlayerGameAccountId", &t.DwPlayerGameAccountId, d...)
	cb.Do("Unk_243faa3", &t.Unk_243faa3, d...)
	cb.Do("UsMessage", &t.UsMessage, d...)
	cb.Do("TPlaceTarget", &t.TPlaceTarget, d...)
	cb.Do("AnnTarget", &t.AnnTarget, d...)
	cb.Do("DwFlags", &t.DwFlags, d...)
}

type Type_f49e9532 struct {
	BEnabled                DT_INT
	Unk_f14ffed             DT_VECTOR3D
	PathExtinction          InterpolationPath_float
	Unk_169823a             InterpolationPath_float
	FlCloudIntensity        DT_FLOAT
	Unk_beb976c             InterpolationPath_float
	PathCoverageBias        InterpolationPath_float
	PathCloudTypeBias       InterpolationPath_float
	Unk_d14bc79             DT_FLOAT
	Unk_f852d87             DT_FLOAT
	Unk_86d2585             DT_FLOAT
	VecWeatherDataOffset    DT_VECTOR2D
	Unk_67b3c4a             DT_FLOAT
	FlCirrusCloudIntensity  DT_FLOAT
	VecCirrusOffset         DT_VECTOR2D
	Unk_95e2b10             InterpolationPath_float
	Unk_b9a067e             InterpolationPath_float
	Unk_2f13301             InterpolationPath_float
	Unk_caea994             DT_FLOAT
	Unk_e4f6034             DT_FLOAT
	PathTurbulenceStrength  InterpolationPath_float
	VCloudWind              DT_VECTOR3D
	Unk_ab0e39e             InterpolationPath_float
	FlCloudShellInnerRadius DT_FLOAT
	FlCloudShellThickness   DT_FLOAT
	FlCloudStartingHeight   DT_FLOAT
	Unk_6b9f105             DT_INT
	Unk_ddba751             DT_VECTOR3D
	Unk_48b7873             DT_FLOAT
	SnoTexWeatherData       DT_SNO
	SnoTexCirrus            DT_SNO
}

func (t *Type_f49e9532) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.BEnabled, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.Unk_f14ffed, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.PathExtinction, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_169823a, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.FlCloudIntensity, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+136, &t.Unk_beb976c, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+192, &t.PathCoverageBias, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+248, &t.PathCloudTypeBias, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+304, &t.Unk_d14bc79, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+308, &t.Unk_f852d87, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+312, &t.Unk_86d2585, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+316, &t.VecWeatherDataOffset, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+324, &t.Unk_67b3c4a, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+328, &t.FlCirrusCloudIntensity, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+332, &t.VecCirrusOffset, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+344, &t.Unk_95e2b10, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+400, &t.Unk_b9a067e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+456, &t.Unk_2f13301, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+512, &t.Unk_caea994, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+516, &t.Unk_e4f6034, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+520, &t.PathTurbulenceStrength, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+576, &t.VCloudWind, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+592, &t.Unk_ab0e39e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+648, &t.FlCloudShellInnerRadius, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+652, &t.FlCloudShellThickness, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+656, &t.FlCloudStartingHeight, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+660, &t.Unk_6b9f105, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+664, &t.Unk_ddba751, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+676, &t.Unk_48b7873, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+680, &t.SnoTexWeatherData, r, &Options{
		Flags: 1,
		Group: 44,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+684, &t.SnoTexCirrus, r, &Options{
		Flags: 1,
		Group: 44,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+688, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_f49e9532) Walk(cb WalkCallback, d ...any) {
	cb.Do("BEnabled", &t.BEnabled, d...)
	cb.Do("Unk_f14ffed", &t.Unk_f14ffed, d...)
	cb.Do("PathExtinction", &t.PathExtinction, d...)
	cb.Do("Unk_169823a", &t.Unk_169823a, d...)
	cb.Do("FlCloudIntensity", &t.FlCloudIntensity, d...)
	cb.Do("Unk_beb976c", &t.Unk_beb976c, d...)
	cb.Do("PathCoverageBias", &t.PathCoverageBias, d...)
	cb.Do("PathCloudTypeBias", &t.PathCloudTypeBias, d...)
	cb.Do("Unk_d14bc79", &t.Unk_d14bc79, d...)
	cb.Do("Unk_f852d87", &t.Unk_f852d87, d...)
	cb.Do("Unk_86d2585", &t.Unk_86d2585, d...)
	cb.Do("VecWeatherDataOffset", &t.VecWeatherDataOffset, d...)
	cb.Do("Unk_67b3c4a", &t.Unk_67b3c4a, d...)
	cb.Do("FlCirrusCloudIntensity", &t.FlCirrusCloudIntensity, d...)
	cb.Do("VecCirrusOffset", &t.VecCirrusOffset, d...)
	cb.Do("Unk_95e2b10", &t.Unk_95e2b10, d...)
	cb.Do("Unk_b9a067e", &t.Unk_b9a067e, d...)
	cb.Do("Unk_2f13301", &t.Unk_2f13301, d...)
	cb.Do("Unk_caea994", &t.Unk_caea994, d...)
	cb.Do("Unk_e4f6034", &t.Unk_e4f6034, d...)
	cb.Do("PathTurbulenceStrength", &t.PathTurbulenceStrength, d...)
	cb.Do("VCloudWind", &t.VCloudWind, d...)
	cb.Do("Unk_ab0e39e", &t.Unk_ab0e39e, d...)
	cb.Do("FlCloudShellInnerRadius", &t.FlCloudShellInnerRadius, d...)
	cb.Do("FlCloudShellThickness", &t.FlCloudShellThickness, d...)
	cb.Do("FlCloudStartingHeight", &t.FlCloudStartingHeight, d...)
	cb.Do("Unk_6b9f105", &t.Unk_6b9f105, d...)
	cb.Do("Unk_ddba751", &t.Unk_ddba751, d...)
	cb.Do("Unk_48b7873", &t.Unk_48b7873, d...)
	cb.Do("SnoTexWeatherData", &t.SnoTexWeatherData, d...)
	cb.Do("SnoTexCirrus", &t.SnoTexCirrus, d...)
}

type GlobalQuestData struct {
	// Inherits GlobalBase
	// Inherits PolymorphicBase
	DwType           DT_UINT
	DwPad            DT_UINT
	Unk_23c11ba      DT_INT64
	Unk_8bd826d      DT_INT64
	Unk_d9bddf0      DT_INT64
	Unk_70db485      DT_INT64
	Unk_daeff02      DT_INT64
	Unk_de43c60      DT_INT64
	Unk_8726862      DT_INT64
	Unk_4b26f7       DT_INT64
	Unk_c6d58a9      DT_UINT
	Unk_e318094      DT_UINT
	Unk_a49964c      DT_UINT
	SnoStartingQuest DT_SNO
	TCampaignData    CampaignData
	Unk_36bc0dc      DT_VARIABLEARRAY[*DT_SNO]
	Unk_b419a05      DT_VARIABLEARRAY[*DT_SNO]
	Unk_a70acb6      DT_VARIABLEARRAY[*DT_SNO]
	Unk_68fb226      DT_UINT
	Unk_3286df3      ConnectorProperties
	Unk_dd4bd56      ConnectorProperties
	Unk_195043d      DT_UINT
}

func (t *GlobalQuestData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_23c11ba, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_8bd826d, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.Unk_d9bddf0, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.Unk_70db485, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.Unk_daeff02, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.Unk_de43c60, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.Unk_8726862, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_4b26f7, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.Unk_c6d58a9, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.Unk_e318094, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.Unk_a49964c, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.SnoStartingQuest, r, &Options{
		Flags: 513,
		Group: 31,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.TCampaignData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.Unk_36bc0dc, r, &Options{
		Flags: 513,
		Group: 31,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.Unk_b419a05, r, &Options{
		Flags: 513,
		Group: 22,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+144, &t.Unk_a70acb6, r, &Options{
		Flags: 513,
		Group: 123,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+160, &t.Unk_68fb226, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+164, &t.Unk_3286df3, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+192, &t.Unk_dd4bd56, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+220, &t.Unk_195043d, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+224, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *GlobalQuestData) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("Unk_23c11ba", &t.Unk_23c11ba, d...)
	cb.Do("Unk_8bd826d", &t.Unk_8bd826d, d...)
	cb.Do("Unk_d9bddf0", &t.Unk_d9bddf0, d...)
	cb.Do("Unk_70db485", &t.Unk_70db485, d...)
	cb.Do("Unk_daeff02", &t.Unk_daeff02, d...)
	cb.Do("Unk_de43c60", &t.Unk_de43c60, d...)
	cb.Do("Unk_8726862", &t.Unk_8726862, d...)
	cb.Do("Unk_4b26f7", &t.Unk_4b26f7, d...)
	cb.Do("Unk_c6d58a9", &t.Unk_c6d58a9, d...)
	cb.Do("Unk_e318094", &t.Unk_e318094, d...)
	cb.Do("Unk_a49964c", &t.Unk_a49964c, d...)
	cb.Do("SnoStartingQuest", &t.SnoStartingQuest, d...)
	cb.Do("TCampaignData", &t.TCampaignData, d...)
	cb.Do("Unk_36bc0dc", &t.Unk_36bc0dc, d...)
	cb.Do("Unk_b419a05", &t.Unk_b419a05, d...)
	cb.Do("Unk_a70acb6", &t.Unk_a70acb6, d...)
	cb.Do("Unk_68fb226", &t.Unk_68fb226, d...)
	cb.Do("Unk_3286df3", &t.Unk_3286df3, d...)
	cb.Do("Unk_dd4bd56", &t.Unk_dd4bd56, d...)
	cb.Do("Unk_195043d", &t.Unk_195043d, d...)
}

type BreakableContainerGizmoData struct {
	// Inherits NamedGizmoData
	// Inherits ActorGizmoData
	// Inherits PolymorphicBase
	DwType                           DT_UINT
	DwPad                            DT_UINT
	FDisableNonFriendlyOperation     DT_INT
	FWalkToCenter                    DT_INT
	FGizmoStartsDisabled             DT_INT
	FUseStringListName               DT_INT
	FForceMinimapIcon                DT_INT
	FlOperationRadius                DT_FLOAT
	Unk_d0b1df5                      DT_FLOAT
	FlGizmoUseTime                   DT_FLOAT
	SnoChannelingEffect              DT_SNO
	Unk_2767229                      DT_INT
	FGizmoShowProgressBar            DT_INT
	Unk_6d9ebe1                      DT_INT
	Unk_5456245                      DT_INT
	Unk_af5815a                      DT_INT
	SnoOnClickEffect                 DT_SNO
	SnoPickedUpEffect                DT_SNO
	SnoDropOnGroundEffect            DT_SNO
	TConditionData                   GizmoConditionData
	SnoPowerOperator                 DT_SNO
	SnoPowerOperate                  DT_SNO
	SnoPowerOperatorActive           DT_SNO
	SnoPowerOperateActive            DT_SNO
	Unk_359810e                      DT_INT
	NCooldown                        DT_UINT
	Unk_9c8478e                      DT_UINT
	Unk_d45ed2d                      DT_INT
	Unk_f6b20b7                      DT_INT
	Unk_54513b8                      DT_INT
	Unk_fd1f378                      DT_UINT
	HGizmoOperateFlavorTextMsgLabel  DT_UINT
	HGizmoOperateDescriptionMsgLabel DT_UINT
	FlGizmoOperateOffset             DT_FLOAT
	Unk_ab58cd3                      DT_ENUM
	Unk_91a3966                      DT_UINT
	HGizmoChannelingLabel            DT_UINT
	Unk_4be4371                      DT_INT
	SnoTreasureClass                 DT_SNO
	SnoDeathPower                    DT_SNO
	SnoPostDeathPower                DT_SNO
	FlPostDeathPowerChance           DT_FLOAT
	Unk_c0f7c                        DT_INT
	Unk_4d93264                      DT_ENUM
}

func (t *BreakableContainerGizmoData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.FDisableNonFriendlyOperation, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.FWalkToCenter, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.FGizmoStartsDisabled, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.FUseStringListName, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.FForceMinimapIcon, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.FlOperationRadius, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.Unk_d0b1df5, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.FlGizmoUseTime, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.SnoChannelingEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.Unk_2767229, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.FGizmoShowProgressBar, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+60, &t.Unk_6d9ebe1, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.Unk_5456245, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.Unk_af5815a, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.SnoOnClickEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.SnoPickedUpEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.SnoDropOnGroundEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.TConditionData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.SnoPowerOperator, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.SnoPowerOperate, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.SnoPowerOperatorActive, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+100, &t.SnoPowerOperateActive, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+104, &t.Unk_359810e, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+108, &t.NCooldown, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.Unk_9c8478e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+116, &t.Unk_d45ed2d, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.Unk_f6b20b7, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+124, &t.Unk_54513b8, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.Unk_fd1f378, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+132, &t.HGizmoOperateFlavorTextMsgLabel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+136, &t.HGizmoOperateDescriptionMsgLabel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+140, &t.FlGizmoOperateOffset, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+144, &t.Unk_ab58cd3, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+148, &t.Unk_91a3966, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+152, &t.HGizmoChannelingLabel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+156, &t.Unk_4be4371, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+160, &t.SnoTreasureClass, r, &Options{
		Flags: 1,
		Group: 52,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+164, &t.SnoDeathPower, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+168, &t.SnoPostDeathPower, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+172, &t.FlPostDeathPowerChance, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+176, &t.Unk_c0f7c, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+180, &t.Unk_4d93264, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+184, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *BreakableContainerGizmoData) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("FDisableNonFriendlyOperation", &t.FDisableNonFriendlyOperation, d...)
	cb.Do("FWalkToCenter", &t.FWalkToCenter, d...)
	cb.Do("FGizmoStartsDisabled", &t.FGizmoStartsDisabled, d...)
	cb.Do("FUseStringListName", &t.FUseStringListName, d...)
	cb.Do("FForceMinimapIcon", &t.FForceMinimapIcon, d...)
	cb.Do("FlOperationRadius", &t.FlOperationRadius, d...)
	cb.Do("Unk_d0b1df5", &t.Unk_d0b1df5, d...)
	cb.Do("FlGizmoUseTime", &t.FlGizmoUseTime, d...)
	cb.Do("SnoChannelingEffect", &t.SnoChannelingEffect, d...)
	cb.Do("Unk_2767229", &t.Unk_2767229, d...)
	cb.Do("FGizmoShowProgressBar", &t.FGizmoShowProgressBar, d...)
	cb.Do("Unk_6d9ebe1", &t.Unk_6d9ebe1, d...)
	cb.Do("Unk_5456245", &t.Unk_5456245, d...)
	cb.Do("Unk_af5815a", &t.Unk_af5815a, d...)
	cb.Do("SnoOnClickEffect", &t.SnoOnClickEffect, d...)
	cb.Do("SnoPickedUpEffect", &t.SnoPickedUpEffect, d...)
	cb.Do("SnoDropOnGroundEffect", &t.SnoDropOnGroundEffect, d...)
	cb.Do("TConditionData", &t.TConditionData, d...)
	cb.Do("SnoPowerOperator", &t.SnoPowerOperator, d...)
	cb.Do("SnoPowerOperate", &t.SnoPowerOperate, d...)
	cb.Do("SnoPowerOperatorActive", &t.SnoPowerOperatorActive, d...)
	cb.Do("SnoPowerOperateActive", &t.SnoPowerOperateActive, d...)
	cb.Do("Unk_359810e", &t.Unk_359810e, d...)
	cb.Do("NCooldown", &t.NCooldown, d...)
	cb.Do("Unk_9c8478e", &t.Unk_9c8478e, d...)
	cb.Do("Unk_d45ed2d", &t.Unk_d45ed2d, d...)
	cb.Do("Unk_f6b20b7", &t.Unk_f6b20b7, d...)
	cb.Do("Unk_54513b8", &t.Unk_54513b8, d...)
	cb.Do("Unk_fd1f378", &t.Unk_fd1f378, d...)
	cb.Do("HGizmoOperateFlavorTextMsgLabel", &t.HGizmoOperateFlavorTextMsgLabel, d...)
	cb.Do("HGizmoOperateDescriptionMsgLabel", &t.HGizmoOperateDescriptionMsgLabel, d...)
	cb.Do("FlGizmoOperateOffset", &t.FlGizmoOperateOffset, d...)
	cb.Do("Unk_ab58cd3", &t.Unk_ab58cd3, d...)
	cb.Do("Unk_91a3966", &t.Unk_91a3966, d...)
	cb.Do("HGizmoChannelingLabel", &t.HGizmoChannelingLabel, d...)
	cb.Do("Unk_4be4371", &t.Unk_4be4371, d...)
	cb.Do("SnoTreasureClass", &t.SnoTreasureClass, d...)
	cb.Do("SnoDeathPower", &t.SnoDeathPower, d...)
	cb.Do("SnoPostDeathPower", &t.SnoPostDeathPower, d...)
	cb.Do("FlPostDeathPowerChance", &t.FlPostDeathPowerChance, d...)
	cb.Do("Unk_c0f7c", &t.Unk_c0f7c, d...)
	cb.Do("Unk_4d93264", &t.Unk_4d93264, d...)
}

type TriggerEventOutroObject struct {
	// Inherits TriggerEvent
	// Inherits PolymorphicBase
	DwType          DT_UINT
	DwPad           DT_UINT
	TConditions     TriggerConditions
	FGenerated      DT_INT
	Unk_6cba752     DT_INT
	DwParentActorID DT_UINT
	DwID            DT_UINT
}

func (t *TriggerEventOutroObject) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.FGenerated, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_6cba752, r, &Options{Flags: 16}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.DwParentActorID, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.DwID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+88, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TriggerEventOutroObject) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("TConditions", &t.TConditions, d...)
	cb.Do("FGenerated", &t.FGenerated, d...)
	cb.Do("Unk_6cba752", &t.Unk_6cba752, d...)
	cb.Do("DwParentActorID", &t.DwParentActorID, d...)
	cb.Do("DwID", &t.DwID, d...)
}

type PRSTransform struct {
	Q      bcQuat
	Wp     DT_VECTOR3D
	VScale DT_VECTOR3D
}

func (t *PRSTransform) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Q, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Wp, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.VScale, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+40, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PRSTransform) Walk(cb WalkCallback, d ...any) {
	cb.Do("Q", &t.Q, d...)
	cb.Do("Wp", &t.Wp, d...)
	cb.Do("VScale", &t.VScale, d...)
}

type OnFirstHitPowerCallback struct {
	// Inherits PowerCallbackBase
	// Inherits PolymorphicBase
	DwType                DT_UINT
	DwPad                 DT_UINT
	SnoTriggerEffectGroup DT_SNO
	BCouldHaveRagdolled   DT_INT
}

func (t *OnFirstHitPowerCallback) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoTriggerEffectGroup, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.BCouldHaveRagdolled, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *OnFirstHitPowerCallback) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("SnoTriggerEffectGroup", &t.SnoTriggerEffectGroup, d...)
	cb.Do("BCouldHaveRagdolled", &t.BCouldHaveRagdolled, d...)
}

type HairStyleDefinition struct {
	FUsableByClass   DT_FIXEDARRAY[*DT_INT]
	DwSubObjectStyle DT_UINT
}

func (t *HairStyleDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.FUsableByClass, r, &Options{
		ArrayLength: 5,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.DwSubObjectStyle, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *HairStyleDefinition) Walk(cb WalkCallback, d ...any) {
	cb.Do("FUsableByClass", &t.FUsableByClass, d...)
	cb.Do("DwSubObjectStyle", &t.DwSubObjectStyle, d...)
}

type GroupRegionEntry struct {
	THeader GBIDHeader
}

func (t *GroupRegionEntry) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+260, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *GroupRegionEntry) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
}

type OnEquipPowerCallback struct {
	// Inherits PowerCallbackBase
	// Inherits PolymorphicBase
	DwType                DT_UINT
	DwPad                 DT_UINT
	SnoTriggerEffectGroup DT_SNO
	BCouldHaveRagdolled   DT_INT
}

func (t *OnEquipPowerCallback) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoTriggerEffectGroup, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.BCouldHaveRagdolled, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *OnEquipPowerCallback) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("SnoTriggerEffectGroup", &t.SnoTriggerEffectGroup, d...)
	cb.Do("BCouldHaveRagdolled", &t.BCouldHaveRagdolled, d...)
}

type MaterialVectorValuesUsed struct {
	SnoMaterialValue DT_SNO
	VDefaultValue    DT_VECTOR4D
}

func (t *MaterialVectorValuesUsed) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoMaterialValue, r, &Options{
		Flags: 1,
		Group: 81,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.VDefaultValue, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+20, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *MaterialVectorValuesUsed) Walk(cb WalkCallback, d ...any) {
	cb.Do("SnoMaterialValue", &t.SnoMaterialValue, d...)
	cb.Do("VDefaultValue", &t.VDefaultValue, d...)
}

type ResolvedPortalDestination struct {
	SnoWorld         DT_SNO
	UEntranceGUID    DT_STARTLOC_NAME
	SnoDestLevelArea DT_SNO
}

func (t *ResolvedPortalDestination) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoWorld, r, &Options{
		Flags: 1,
		Group: 48,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.UEntranceGUID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.SnoDestLevelArea, r, &Options{
		Flags: 1,
		Group: 22,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+12, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ResolvedPortalDestination) Walk(cb WalkCallback, d ...any) {
	cb.Do("SnoWorld", &t.SnoWorld, d...)
	cb.Do("UEntranceGUID", &t.UEntranceGUID, d...)
	cb.Do("SnoDestLevelArea", &t.SnoDestLevelArea, d...)
}

type SubObject struct {
	DwFlags                        DT_UINT
	Unk_334eb2d                    DT_INT
	PtClothData                    DT_VARIABLEARRAY[*ClothData]
	Unk_26f39c1                    DT_VARIABLEARRAY[*Type_72081710]
	DwBAOffset                     DT_UINT
	Unk_87b4c64                    DT_UINT
	Unk_d28c748                    DT_UINT
	DwBASize                       DT_UINT
	TNameInfo                      SubObjectNameInfo
	NMaterialIndex                 DT_INT
	DwSubObjectHash                DT_UINT
	Unk_79283f                     DT_INT
	NVertBufferIndex               DT_INT
	NIndexBufferIndex              DT_INT
	Unk_a758781                    DT_INT
	Unk_a1b71f5                    DT_INT
	Unk_95f2e14                    DT_INT
	DwShaderMapOverride            DT_UINT
	SnoCampaignVisibilityCondition DT_SNO
	AabbBounds                     AABB
	PtShapes                       DT_VARIABLEARRAY[*CollisionShape]
	PtBaseBoneInfluences           DT_VARIABLEARRAY[*DT_BYTE]
	PtPostprocessed                DT_INT64
	PtSegments                     DT_VARIABLEARRAY[*SubObjectSegment]
	WpFixedPointPosOffset          DT_VECTOR3D
	WpFixedPointPosScale           DT_VECTOR3D
}

func (t *SubObject) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.DwFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.Unk_334eb2d, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.PtClothData, r, &Options{Flags: 2097152}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_26f39c1, r, &Options{Flags: 2097152}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.DwBAOffset, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.Unk_87b4c64, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.Unk_d28c748, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.DwBASize, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.TNameInfo, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.NMaterialIndex, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+100, &t.DwSubObjectHash, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+104, &t.Unk_79283f, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+108, &t.NVertBufferIndex, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.NIndexBufferIndex, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+116, &t.Unk_a758781, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.Unk_a1b71f5, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+124, &t.Unk_95f2e14, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.DwShaderMapOverride, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+132, &t.SnoCampaignVisibilityCondition, r, &Options{Group: 51}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+136, &t.AabbBounds, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+160, &t.PtShapes, r, &Options{Flags: 2097152}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+176, &t.PtBaseBoneInfluences, r, &Options{Flags: 2097152}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+192, &t.PtPostprocessed, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+200, &t.PtSegments, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+216, &t.WpFixedPointPosOffset, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+228, &t.WpFixedPointPosScale, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+240, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *SubObject) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwFlags", &t.DwFlags, d...)
	cb.Do("Unk_334eb2d", &t.Unk_334eb2d, d...)
	cb.Do("PtClothData", &t.PtClothData, d...)
	cb.Do("Unk_26f39c1", &t.Unk_26f39c1, d...)
	cb.Do("DwBAOffset", &t.DwBAOffset, d...)
	cb.Do("Unk_87b4c64", &t.Unk_87b4c64, d...)
	cb.Do("Unk_d28c748", &t.Unk_d28c748, d...)
	cb.Do("DwBASize", &t.DwBASize, d...)
	cb.Do("TNameInfo", &t.TNameInfo, d...)
	cb.Do("NMaterialIndex", &t.NMaterialIndex, d...)
	cb.Do("DwSubObjectHash", &t.DwSubObjectHash, d...)
	cb.Do("Unk_79283f", &t.Unk_79283f, d...)
	cb.Do("NVertBufferIndex", &t.NVertBufferIndex, d...)
	cb.Do("NIndexBufferIndex", &t.NIndexBufferIndex, d...)
	cb.Do("Unk_a758781", &t.Unk_a758781, d...)
	cb.Do("Unk_a1b71f5", &t.Unk_a1b71f5, d...)
	cb.Do("Unk_95f2e14", &t.Unk_95f2e14, d...)
	cb.Do("DwShaderMapOverride", &t.DwShaderMapOverride, d...)
	cb.Do("SnoCampaignVisibilityCondition", &t.SnoCampaignVisibilityCondition, d...)
	cb.Do("AabbBounds", &t.AabbBounds, d...)
	cb.Do("PtShapes", &t.PtShapes, d...)
	cb.Do("PtBaseBoneInfluences", &t.PtBaseBoneInfluences, d...)
	cb.Do("PtPostprocessed", &t.PtPostprocessed, d...)
	cb.Do("PtSegments", &t.PtSegments, d...)
	cb.Do("WpFixedPointPosOffset", &t.WpFixedPointPosOffset, d...)
	cb.Do("WpFixedPointPosScale", &t.WpFixedPointPosScale, d...)
}

type Type_f5ac91bb struct {
	Data1 DT_INT64
	Data2 DT_INT64
}

func (t *Type_f5ac91bb) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Data1, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.Data2, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_f5ac91bb) Walk(cb WalkCallback, d ...any) {
	cb.Do("Data1", &t.Data1, d...)
	cb.Do("Data2", &t.Data2, d...)
}

type WwiseGameParameter struct {
	TName   WwiseName
	FlValue DT_FLOAT
	FlMin   DT_FLOAT
	FlMax   DT_FLOAT
}

func (t *WwiseGameParameter) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.TName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.FlValue, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.FlMin, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.FlMax, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *WwiseGameParameter) Walk(cb WalkCallback, d ...any) {
	cb.Do("TName", &t.TName, d...)
	cb.Do("FlValue", &t.FlValue, d...)
	cb.Do("FlMin", &t.FlMin, d...)
	cb.Do("FlMax", &t.FlMax, d...)
}

type SurveyTypeEntry struct {
	THeader          GBIDHeader
	FlChance         DT_FLOAT
	Unk_b28752e      DT_VARIABLEARRAY[*DT_SNO]
	BIgnoresCooldown DT_INT
	Unk_69022        DT_INT
	Unk_e04d458      DT_INT
}

func (t *SurveyTypeEntry) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+260, &t.FlChance, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+264, &t.Unk_b28752e, r, &Options{
		Flags: 1,
		Group: 42,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+280, &t.BIgnoresCooldown, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+284, &t.Unk_69022, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+288, &t.Unk_e04d458, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+296, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *SurveyTypeEntry) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("FlChance", &t.FlChance, d...)
	cb.Do("Unk_b28752e", &t.Unk_b28752e, d...)
	cb.Do("BIgnoresCooldown", &t.BIgnoresCooldown, d...)
	cb.Do("Unk_69022", &t.Unk_69022, d...)
	cb.Do("Unk_e04d458", &t.Unk_e04d458, d...)
}

type AppearanceAndMaterialContent struct {
	TAppearance SerialDataInfo
	TMaterial   SerialDataInfo
}

func (t *AppearanceAndMaterialContent) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.TAppearance, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.TMaterial, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *AppearanceAndMaterialContent) Walk(cb WalkCallback, d ...any) {
	cb.Do("TAppearance", &t.TAppearance, d...)
	cb.Do("TMaterial", &t.TMaterial, d...)
}

type Type_f5cd87eb struct {
	TCapsule   CollisionCapsule
	DwSlotHash DT_UINT
}

func (t *Type_f5cd87eb) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.TCapsule, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.DwSlotHash, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+68, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_f5cd87eb) Walk(cb WalkCallback, d ...any) {
	cb.Do("TCapsule", &t.TCapsule, d...)
	cb.Do("DwSlotHash", &t.DwSlotHash, d...)
}

type SplineEasingWeight struct {
	FlFirstWeight  DT_FLOAT
	FlMiddleWeight DT_FLOAT
	FlLastWeight   DT_FLOAT
}

func (t *SplineEasingWeight) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.FlFirstWeight, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.FlMiddleWeight, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.FlLastWeight, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+12, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *SplineEasingWeight) Walk(cb WalkCallback, d ...any) {
	cb.Do("FlFirstWeight", &t.FlFirstWeight, d...)
	cb.Do("FlMiddleWeight", &t.FlMiddleWeight, d...)
	cb.Do("FlLastWeight", &t.FlLastWeight, d...)
}

type TrackedCheckpointGizmoData struct {
	// Inherits ActorGizmoData
	// Inherits PolymorphicBase
	DwType                           DT_UINT
	DwPad                            DT_UINT
	FDisableNonFriendlyOperation     DT_INT
	FWalkToCenter                    DT_INT
	FGizmoStartsDisabled             DT_INT
	FUseStringListName               DT_INT
	FForceMinimapIcon                DT_INT
	FlOperationRadius                DT_FLOAT
	Unk_d0b1df5                      DT_FLOAT
	FlGizmoUseTime                   DT_FLOAT
	SnoChannelingEffect              DT_SNO
	Unk_2767229                      DT_INT
	FGizmoShowProgressBar            DT_INT
	Unk_6d9ebe1                      DT_INT
	Unk_5456245                      DT_INT
	Unk_af5815a                      DT_INT
	SnoOnClickEffect                 DT_SNO
	SnoPickedUpEffect                DT_SNO
	SnoDropOnGroundEffect            DT_SNO
	TConditionData                   GizmoConditionData
	SnoPowerOperator                 DT_SNO
	SnoPowerOperate                  DT_SNO
	SnoPowerOperatorActive           DT_SNO
	SnoPowerOperateActive            DT_SNO
	Unk_359810e                      DT_INT
	NCooldown                        DT_UINT
	Unk_9c8478e                      DT_UINT
	Unk_d45ed2d                      DT_INT
	Unk_f6b20b7                      DT_INT
	Unk_54513b8                      DT_INT
	Unk_fd1f378                      DT_UINT
	HGizmoOperateFlavorTextMsgLabel  DT_UINT
	HGizmoOperateDescriptionMsgLabel DT_UINT
	FlGizmoOperateOffset             DT_FLOAT
	Unk_ab58cd3                      DT_ENUM
	Unk_91a3966                      DT_UINT
	HGizmoChannelingLabel            DT_UINT
	Unk_4be4371                      DT_INT
	PtProxData                       DT_POLYMORPHIC_VARIABLEARRAY[*ProximityDataBase]
	Unk_c0f24ec                      DT_INT
}

func (t *TrackedCheckpointGizmoData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.FDisableNonFriendlyOperation, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.FWalkToCenter, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.FGizmoStartsDisabled, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.FUseStringListName, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.FForceMinimapIcon, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.FlOperationRadius, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.Unk_d0b1df5, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.FlGizmoUseTime, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.SnoChannelingEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.Unk_2767229, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.FGizmoShowProgressBar, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+60, &t.Unk_6d9ebe1, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.Unk_5456245, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.Unk_af5815a, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.SnoOnClickEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.SnoPickedUpEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.SnoDropOnGroundEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.TConditionData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.SnoPowerOperator, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.SnoPowerOperate, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.SnoPowerOperatorActive, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+100, &t.SnoPowerOperateActive, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+104, &t.Unk_359810e, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+108, &t.NCooldown, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.Unk_9c8478e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+116, &t.Unk_d45ed2d, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.Unk_f6b20b7, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+124, &t.Unk_54513b8, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.Unk_fd1f378, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+132, &t.HGizmoOperateFlavorTextMsgLabel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+136, &t.HGizmoOperateDescriptionMsgLabel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+140, &t.FlGizmoOperateOffset, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+144, &t.Unk_ab58cd3, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+148, &t.Unk_91a3966, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+152, &t.HGizmoChannelingLabel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+156, &t.Unk_4be4371, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+160, &t.PtProxData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+184, &t.Unk_c0f24ec, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+192, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TrackedCheckpointGizmoData) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("FDisableNonFriendlyOperation", &t.FDisableNonFriendlyOperation, d...)
	cb.Do("FWalkToCenter", &t.FWalkToCenter, d...)
	cb.Do("FGizmoStartsDisabled", &t.FGizmoStartsDisabled, d...)
	cb.Do("FUseStringListName", &t.FUseStringListName, d...)
	cb.Do("FForceMinimapIcon", &t.FForceMinimapIcon, d...)
	cb.Do("FlOperationRadius", &t.FlOperationRadius, d...)
	cb.Do("Unk_d0b1df5", &t.Unk_d0b1df5, d...)
	cb.Do("FlGizmoUseTime", &t.FlGizmoUseTime, d...)
	cb.Do("SnoChannelingEffect", &t.SnoChannelingEffect, d...)
	cb.Do("Unk_2767229", &t.Unk_2767229, d...)
	cb.Do("FGizmoShowProgressBar", &t.FGizmoShowProgressBar, d...)
	cb.Do("Unk_6d9ebe1", &t.Unk_6d9ebe1, d...)
	cb.Do("Unk_5456245", &t.Unk_5456245, d...)
	cb.Do("Unk_af5815a", &t.Unk_af5815a, d...)
	cb.Do("SnoOnClickEffect", &t.SnoOnClickEffect, d...)
	cb.Do("SnoPickedUpEffect", &t.SnoPickedUpEffect, d...)
	cb.Do("SnoDropOnGroundEffect", &t.SnoDropOnGroundEffect, d...)
	cb.Do("TConditionData", &t.TConditionData, d...)
	cb.Do("SnoPowerOperator", &t.SnoPowerOperator, d...)
	cb.Do("SnoPowerOperate", &t.SnoPowerOperate, d...)
	cb.Do("SnoPowerOperatorActive", &t.SnoPowerOperatorActive, d...)
	cb.Do("SnoPowerOperateActive", &t.SnoPowerOperateActive, d...)
	cb.Do("Unk_359810e", &t.Unk_359810e, d...)
	cb.Do("NCooldown", &t.NCooldown, d...)
	cb.Do("Unk_9c8478e", &t.Unk_9c8478e, d...)
	cb.Do("Unk_d45ed2d", &t.Unk_d45ed2d, d...)
	cb.Do("Unk_f6b20b7", &t.Unk_f6b20b7, d...)
	cb.Do("Unk_54513b8", &t.Unk_54513b8, d...)
	cb.Do("Unk_fd1f378", &t.Unk_fd1f378, d...)
	cb.Do("HGizmoOperateFlavorTextMsgLabel", &t.HGizmoOperateFlavorTextMsgLabel, d...)
	cb.Do("HGizmoOperateDescriptionMsgLabel", &t.HGizmoOperateDescriptionMsgLabel, d...)
	cb.Do("FlGizmoOperateOffset", &t.FlGizmoOperateOffset, d...)
	cb.Do("Unk_ab58cd3", &t.Unk_ab58cd3, d...)
	cb.Do("Unk_91a3966", &t.Unk_91a3966, d...)
	cb.Do("HGizmoChannelingLabel", &t.HGizmoChannelingLabel, d...)
	cb.Do("Unk_4be4371", &t.Unk_4be4371, d...)
	cb.Do("PtProxData", &t.PtProxData, d...)
	cb.Do("Unk_c0f24ec", &t.Unk_c0f24ec, d...)
}

type MarkerSpawnLocData struct {
	// Inherits MarkerDataBase
	// Inherits PolymorphicBase
	DwType                 DT_UINT
	DwPad                  DT_UINT
	GbidSpawnLocType       DT_GBID
	ArPrefabCustomizations DT_VARIABLEARRAY[*PrefabCustomization]
}

func (t *MarkerSpawnLocData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.GbidSpawnLocType, r, &Options{
		Flags: 1,
		Group: 20,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ArPrefabCustomizations, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+40, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *MarkerSpawnLocData) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("GbidSpawnLocType", &t.GbidSpawnLocType, d...)
	cb.Do("ArPrefabCustomizations", &t.ArPrefabCustomizations, d...)
}

type MsgTriggeredEvent struct {
	DwMsgKey       DT_ENUM
	PtTriggerEvent DT_POLYMORPHIC_VARIABLEARRAY[*TriggerEvent]
	TCooldown      DT_FLOAT
}

func (t *MsgTriggeredEvent) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.DwMsgKey, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.PtTriggerEvent, r, &Options{Flags: 262145}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.TCooldown, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+40, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *MsgTriggeredEvent) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwMsgKey", &t.DwMsgKey, d...)
	cb.Do("PtTriggerEvent", &t.PtTriggerEvent, d...)
	cb.Do("TCooldown", &t.TCooldown, d...)
}

type UIProgressBarBase struct {
	Unk_b2b0e88 DT_TAGMAP[*DT_ENUM]
}

func (t *UIProgressBarBase) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Unk_b2b0e88, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *UIProgressBarBase) Walk(cb WalkCallback, d ...any) {
	cb.Do("Unk_b2b0e88", &t.Unk_b2b0e88, d...)
}

type LevelScalingDefinition_Table struct {
	// Inherits GameBalanceTable
	// Inherits PolymorphicBase
	DwType   DT_UINT
	DwPad    DT_UINT
	TEntries DT_VARIABLEARRAY[*LevelScalingDefinition]
}

func (t *LevelScalingDefinition_Table) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TEntries, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *LevelScalingDefinition_Table) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("TEntries", &t.TEntries, d...)
}

type StoryboardUIControlTrack struct {
	// Inherits StoryboardTrack
	// Inherits PolymorphicBase
	DwType DT_UINT
	DwPad  DT_UINT
}

func (t *StoryboardUIControlTrack) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *StoryboardUIControlTrack) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
}

type PowerConditionHasSkillRequirement struct {
	// Inherits PowerConditionBase
	// Inherits PolymorphicBase
	DwType              DT_UINT
	BInverse            DT_INT
	DwPad               DT_UINT
	SnoSkillRequirement DT_SNO
}

func (t *PowerConditionHasSkillRequirement) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BInverse, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SnoSkillRequirement, r, &Options{
		Flags: 513,
		Group: 116,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PowerConditionHasSkillRequirement) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("BInverse", &t.BInverse, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("SnoSkillRequirement", &t.SnoSkillRequirement, d...)
}

type AccountProfilePrivacyFlagMessage struct {
	THeader               RequiredMessageHeader
	DwPlayerGameAccountId DT_UINT
	BPrivacyFlag          DT_INT
}

func (t *AccountProfilePrivacyFlagMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.DwPlayerGameAccountId, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.BPrivacyFlag, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *AccountProfilePrivacyFlagMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("DwPlayerGameAccountId", &t.DwPlayerGameAccountId, d...)
	cb.Do("BPrivacyFlag", &t.BPrivacyFlag, d...)
}

type SetBonusTier struct {
	NRequired DT_INT
	SnoAffix  DT_SNO
}

func (t *SetBonusTier) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.NRequired, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.SnoAffix, r, &Options{
		Flags: 1,
		Group: 104,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *SetBonusTier) Walk(cb WalkCallback, d ...any) {
	cb.Do("NRequired", &t.NRequired, d...)
	cb.Do("SnoAffix", &t.SnoAffix, d...)
}

type EffectGroupRotationYawKeyData struct {
	// Inherits EffectGroupKeyData
	// Inherits PolymorphicBase
	DwType     DT_UINT
	DwPad      DT_UINT
	ArKeyItems DT_VARIABLEARRAY[*EffectGroupKey]
}

func (t *EffectGroupRotationYawKeyData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.ArKeyItems, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *EffectGroupRotationYawKeyData) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("ArKeyItems", &t.ArKeyItems, d...)
}

type PowerBuffCrowdControl struct {
	Unk_c63f49e        DT_INT
	DwCCFlags          DT_UINT
	Unk_7355fb9        DT_INT
	Unk_b7df711        DT_ENUM
	TSlowAmount        DT_STRING_FORMULA
	TChillAmount       DT_STRING_FORMULA
	TStaggerMultiplier DT_STRING_FORMULA
}

func (t *PowerBuffCrowdControl) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Unk_c63f49e, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.DwCCFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.Unk_7355fb9, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.Unk_b7df711, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TSlowAmount, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.TChillAmount, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.TStaggerMultiplier, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+112, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PowerBuffCrowdControl) Walk(cb WalkCallback, d ...any) {
	cb.Do("Unk_c63f49e", &t.Unk_c63f49e, d...)
	cb.Do("DwCCFlags", &t.DwCCFlags, d...)
	cb.Do("Unk_7355fb9", &t.Unk_7355fb9, d...)
	cb.Do("Unk_b7df711", &t.Unk_b7df711, d...)
	cb.Do("TSlowAmount", &t.TSlowAmount, d...)
	cb.Do("TChillAmount", &t.TChillAmount, d...)
	cb.Do("TStaggerMultiplier", &t.TStaggerMultiplier, d...)
}

type WeaponExpertiseRankReward struct {
	NRequiredRank   DT_INT
	SnoPassivePower DT_SNO
}

func (t *WeaponExpertiseRankReward) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.NRequiredRank, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.SnoPassivePower, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *WeaponExpertiseRankReward) Walk(cb WalkCallback, d ...any) {
	cb.Do("NRequiredRank", &t.NRequiredRank, d...)
	cb.Do("SnoPassivePower", &t.SnoPassivePower, d...)
}

type ScriptEventParamCrafter struct {
	// Inherits ScriptEventParamBase
	// Inherits PolymorphicBase
	DwType     DT_UINT
	EParamType DT_ENUM
	DwPad      DT_UINT
	SnoCrafter DT_SNO
}

func (t *ScriptEventParamCrafter) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.EParamType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SnoCrafter, r, &Options{
		Flags: 1,
		Group: 100,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ScriptEventParamCrafter) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("EParamType", &t.EParamType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("SnoCrafter", &t.SnoCrafter, d...)
}

type NPCComponentInstanceData struct {
	TNPCColorSet NPCColorSet
	PtComponents DT_FIXEDARRAY[*ValidComponent]
}

func (t *NPCComponentInstanceData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.TNPCColorSet, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.PtComponents, r, &Options{
		ArrayLength: 4,
		Flags:       1,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+40, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *NPCComponentInstanceData) Walk(cb WalkCallback, d ...any) {
	cb.Do("TNPCColorSet", &t.TNPCColorSet, d...)
	cb.Do("PtComponents", &t.PtComponents, d...)
}

type NonPremiumGameSubcondition struct {
	// Inherits Subcondition
	// Inherits PolymorphicBase
	DwType  DT_UINT
	BNegate DT_INT
	DwPad   DT_UINT
}

func (t *NonPremiumGameSubcondition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BNegate, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *NonPremiumGameSubcondition) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("BNegate", &t.BNegate, d...)
	cb.Do("DwPad", &t.DwPad, d...)
}

type StoryboardUIControlSetTintTrack struct {
	// Inherits StoryboardUIControlSetValueTrack_RGBAColor
	DwType          DT_UINT
	TNodeCollection StoryboardValueNodeCollection_RGBAColor
	Unk_77ed19a     DT_ENUM
	DwPad           DT_UINT
}

func (t *StoryboardUIControlSetTintTrack) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TNodeCollection, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.Unk_77ed19a, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+56, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *StoryboardUIControlSetTintTrack) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("TNodeCollection", &t.TNodeCollection, d...)
	cb.Do("Unk_77ed19a", &t.Unk_77ed19a, d...)
	cb.Do("DwPad", &t.DwPad, d...)
}

type PreloadCompleteACDMessage struct {
	THeader RequiredMessageHeader
	Ann     DT_ACD_NETWORK_NAME
}

func (t *PreloadCompleteACDMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Ann, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PreloadCompleteACDMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("Ann", &t.Ann, d...)
}

type BossDoorGizmoData struct {
	// Inherits NamedGizmoData
	// Inherits ActorGizmoData
	// Inherits PolymorphicBase
	DwType                           DT_UINT
	DwPad                            DT_UINT
	FDisableNonFriendlyOperation     DT_INT
	FWalkToCenter                    DT_INT
	FGizmoStartsDisabled             DT_INT
	FUseStringListName               DT_INT
	FForceMinimapIcon                DT_INT
	FlOperationRadius                DT_FLOAT
	Unk_d0b1df5                      DT_FLOAT
	FlGizmoUseTime                   DT_FLOAT
	SnoChannelingEffect              DT_SNO
	Unk_2767229                      DT_INT
	FGizmoShowProgressBar            DT_INT
	Unk_6d9ebe1                      DT_INT
	Unk_5456245                      DT_INT
	Unk_af5815a                      DT_INT
	SnoOnClickEffect                 DT_SNO
	SnoPickedUpEffect                DT_SNO
	SnoDropOnGroundEffect            DT_SNO
	TConditionData                   GizmoConditionData
	SnoPowerOperator                 DT_SNO
	SnoPowerOperate                  DT_SNO
	SnoPowerOperatorActive           DT_SNO
	SnoPowerOperateActive            DT_SNO
	Unk_359810e                      DT_INT
	NCooldown                        DT_UINT
	Unk_9c8478e                      DT_UINT
	Unk_d45ed2d                      DT_INT
	Unk_f6b20b7                      DT_INT
	Unk_54513b8                      DT_INT
	Unk_fd1f378                      DT_UINT
	HGizmoOperateFlavorTextMsgLabel  DT_UINT
	HGizmoOperateDescriptionMsgLabel DT_UINT
	FlGizmoOperateOffset             DT_FLOAT
	Unk_ab58cd3                      DT_ENUM
	Unk_91a3966                      DT_UINT
	HGizmoChannelingLabel            DT_UINT
	Unk_4be4371                      DT_INT
	TBossDoorData                    BossDoorInstanceData
}

func (t *BossDoorGizmoData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.FDisableNonFriendlyOperation, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.FWalkToCenter, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.FGizmoStartsDisabled, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.FUseStringListName, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.FForceMinimapIcon, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.FlOperationRadius, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.Unk_d0b1df5, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.FlGizmoUseTime, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.SnoChannelingEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.Unk_2767229, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.FGizmoShowProgressBar, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+60, &t.Unk_6d9ebe1, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.Unk_5456245, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.Unk_af5815a, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.SnoOnClickEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.SnoPickedUpEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.SnoDropOnGroundEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.TConditionData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.SnoPowerOperator, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.SnoPowerOperate, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.SnoPowerOperatorActive, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+100, &t.SnoPowerOperateActive, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+104, &t.Unk_359810e, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+108, &t.NCooldown, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.Unk_9c8478e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+116, &t.Unk_d45ed2d, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.Unk_f6b20b7, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+124, &t.Unk_54513b8, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.Unk_fd1f378, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+132, &t.HGizmoOperateFlavorTextMsgLabel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+136, &t.HGizmoOperateDescriptionMsgLabel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+140, &t.FlGizmoOperateOffset, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+144, &t.Unk_ab58cd3, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+148, &t.Unk_91a3966, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+152, &t.HGizmoChannelingLabel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+156, &t.Unk_4be4371, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+160, &t.TBossDoorData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+168, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *BossDoorGizmoData) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("FDisableNonFriendlyOperation", &t.FDisableNonFriendlyOperation, d...)
	cb.Do("FWalkToCenter", &t.FWalkToCenter, d...)
	cb.Do("FGizmoStartsDisabled", &t.FGizmoStartsDisabled, d...)
	cb.Do("FUseStringListName", &t.FUseStringListName, d...)
	cb.Do("FForceMinimapIcon", &t.FForceMinimapIcon, d...)
	cb.Do("FlOperationRadius", &t.FlOperationRadius, d...)
	cb.Do("Unk_d0b1df5", &t.Unk_d0b1df5, d...)
	cb.Do("FlGizmoUseTime", &t.FlGizmoUseTime, d...)
	cb.Do("SnoChannelingEffect", &t.SnoChannelingEffect, d...)
	cb.Do("Unk_2767229", &t.Unk_2767229, d...)
	cb.Do("FGizmoShowProgressBar", &t.FGizmoShowProgressBar, d...)
	cb.Do("Unk_6d9ebe1", &t.Unk_6d9ebe1, d...)
	cb.Do("Unk_5456245", &t.Unk_5456245, d...)
	cb.Do("Unk_af5815a", &t.Unk_af5815a, d...)
	cb.Do("SnoOnClickEffect", &t.SnoOnClickEffect, d...)
	cb.Do("SnoPickedUpEffect", &t.SnoPickedUpEffect, d...)
	cb.Do("SnoDropOnGroundEffect", &t.SnoDropOnGroundEffect, d...)
	cb.Do("TConditionData", &t.TConditionData, d...)
	cb.Do("SnoPowerOperator", &t.SnoPowerOperator, d...)
	cb.Do("SnoPowerOperate", &t.SnoPowerOperate, d...)
	cb.Do("SnoPowerOperatorActive", &t.SnoPowerOperatorActive, d...)
	cb.Do("SnoPowerOperateActive", &t.SnoPowerOperateActive, d...)
	cb.Do("Unk_359810e", &t.Unk_359810e, d...)
	cb.Do("NCooldown", &t.NCooldown, d...)
	cb.Do("Unk_9c8478e", &t.Unk_9c8478e, d...)
	cb.Do("Unk_d45ed2d", &t.Unk_d45ed2d, d...)
	cb.Do("Unk_f6b20b7", &t.Unk_f6b20b7, d...)
	cb.Do("Unk_54513b8", &t.Unk_54513b8, d...)
	cb.Do("Unk_fd1f378", &t.Unk_fd1f378, d...)
	cb.Do("HGizmoOperateFlavorTextMsgLabel", &t.HGizmoOperateFlavorTextMsgLabel, d...)
	cb.Do("HGizmoOperateDescriptionMsgLabel", &t.HGizmoOperateDescriptionMsgLabel, d...)
	cb.Do("FlGizmoOperateOffset", &t.FlGizmoOperateOffset, d...)
	cb.Do("Unk_ab58cd3", &t.Unk_ab58cd3, d...)
	cb.Do("Unk_91a3966", &t.Unk_91a3966, d...)
	cb.Do("HGizmoChannelingLabel", &t.HGizmoChannelingLabel, d...)
	cb.Do("Unk_4be4371", &t.Unk_4be4371, d...)
	cb.Do("TBossDoorData", &t.TBossDoorData, d...)
}

type MountSetMessage struct {
	THeader     RequiredMessageHeader
	Unk_70bf7e7 DT_UINT
	AnnMount    DT_ACD_NETWORK_NAME
}

func (t *MountSetMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_70bf7e7, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.AnnMount, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+28, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *MountSetMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("Unk_70bf7e7", &t.Unk_70bf7e7, d...)
	cb.Do("AnnMount", &t.AnnMount, d...)
}

type PowerConditionIsMonsterFamilyArchetype struct {
	// Inherits PowerConditionBase
	// Inherits PolymorphicBase
	DwType            DT_UINT
	BInverse          DT_INT
	DwPad             DT_UINT
	ESubject          DT_ENUM
	SnoMonsterFamily  DT_SNO
	BTargetFullFamily DT_INT
	SzArchetype       DT_UINT
}

func (t *PowerConditionIsMonsterFamilyArchetype) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BInverse, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ESubject, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.SnoMonsterFamily, r, &Options{
		Flags: 513,
		Group: 82,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.BTargetFullFamily, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.SzArchetype, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+40, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PowerConditionIsMonsterFamilyArchetype) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("BInverse", &t.BInverse, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("ESubject", &t.ESubject, d...)
	cb.Do("SnoMonsterFamily", &t.SnoMonsterFamily, d...)
	cb.Do("BTargetFullFamily", &t.BTargetFullFamily, d...)
	cb.Do("SzArchetype", &t.SzArchetype, d...)
}

type GlobalHealthPotionData struct {
	// Inherits GlobalBase
	// Inherits PolymorphicBase
	DwType          DT_UINT
	DwPad           DT_UINT
	ArHealthPotions DT_VARIABLEARRAY[*HealthPotionData]
}

func (t *GlobalHealthPotionData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.ArHealthPotions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *GlobalHealthPotionData) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("ArHealthPotions", &t.ArHealthPotions, d...)
}

type TriggerEventHideWarpDestinationUI struct {
	// Inherits TriggerEvent
	// Inherits PolymorphicBase
	DwType          DT_UINT
	DwPad           DT_UINT
	TConditions     TriggerConditions
	FGenerated      DT_INT
	Unk_6cba752     DT_INT
	DwParentActorID DT_UINT
}

func (t *TriggerEventHideWarpDestinationUI) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.FGenerated, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_6cba752, r, &Options{Flags: 16}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.DwParentActorID, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+80, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TriggerEventHideWarpDestinationUI) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("TConditions", &t.TConditions, d...)
	cb.Do("FGenerated", &t.FGenerated, d...)
	cb.Do("Unk_6cba752", &t.Unk_6cba752, d...)
	cb.Do("DwParentActorID", &t.DwParentActorID, d...)
}

type CompInfluence struct{}

func (t *CompInfluence) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if _, err := r.Seek(p+1, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *CompInfluence) Walk(cb WalkCallback, d ...any) {}

type TriggerEventOutroServicesDisable struct {
	// Inherits TriggerEvent
	// Inherits PolymorphicBase
	DwType          DT_UINT
	DwPad           DT_UINT
	TConditions     TriggerConditions
	FGenerated      DT_INT
	Unk_6cba752     DT_INT
	DwParentActorID DT_UINT
	Unk_a82d707     DT_ENUM
	FlDuration      DT_FLOAT
	FlDistance      DT_FLOAT
	EBlendEasing    DT_ENUM
}

func (t *TriggerEventOutroServicesDisable) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.FGenerated, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_6cba752, r, &Options{Flags: 16}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.DwParentActorID, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.Unk_a82d707, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.FlDuration, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.FlDistance, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.EBlendEasing, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+96, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TriggerEventOutroServicesDisable) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("TConditions", &t.TConditions, d...)
	cb.Do("FGenerated", &t.FGenerated, d...)
	cb.Do("Unk_6cba752", &t.Unk_6cba752, d...)
	cb.Do("DwParentActorID", &t.DwParentActorID, d...)
	cb.Do("Unk_a82d707", &t.Unk_a82d707, d...)
	cb.Do("FlDuration", &t.FlDuration, d...)
	cb.Do("FlDistance", &t.FlDistance, d...)
	cb.Do("EBlendEasing", &t.EBlendEasing, d...)
}

type ACDTranslateSnappedMessage struct {
	THeader              RequiredMessageHeader
	Ann                  DT_ACD_NETWORK_NAME
	VDestX               DT_OPTIONAL[*DT_INT]
	VDestY               DT_OPTIONAL[*DT_INT]
	VDestZ               DT_OPTIONAL[*DT_INT]
	ADesiredYaw          DT_FLOAT
	BSnapFacing          DT_INT
	UMoveFlags           DT_UINT
	UAckValue            DT_OPTIONAL[*DT_UINT]
	UCameraSmoothingTime DT_OPTIONAL[*DT_UINT]
	Unk_91b31d5          DT_OPTIONAL[*DT_UINT]
}

func (t *ACDTranslateSnappedMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Ann, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.VDestX, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.VDestY, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.VDestZ, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.ADesiredYaw, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.BSnapFacing, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.UMoveFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+60, &t.UAckValue, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.UCameraSmoothingTime, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.Unk_91b31d5, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+84, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ACDTranslateSnappedMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("Ann", &t.Ann, d...)
	cb.Do("VDestX", &t.VDestX, d...)
	cb.Do("VDestY", &t.VDestY, d...)
	cb.Do("VDestZ", &t.VDestZ, d...)
	cb.Do("ADesiredYaw", &t.ADesiredYaw, d...)
	cb.Do("BSnapFacing", &t.BSnapFacing, d...)
	cb.Do("UMoveFlags", &t.UMoveFlags, d...)
	cb.Do("UAckValue", &t.UAckValue, d...)
	cb.Do("UCameraSmoothingTime", &t.UCameraSmoothingTime, d...)
	cb.Do("Unk_91b31d5", &t.Unk_91b31d5, d...)
}

type TriggerEventRangedDuration struct {
	// Inherits TriggerEvent
	// Inherits PolymorphicBase
	DwType           DT_UINT
	TConditions      TriggerConditions
	FGenerated       DT_INT
	Unk_6cba752      DT_INT
	DwParentActorID  DT_UINT
	TDuration        DT_FLOAT
	DwTriggerFlags   DT_UINT
	DwTriggerFlagsEx DT_UINT
	TCleanup         TriggerCleanup
	Unk_49e9257      DT_INT
	Unk_5490979      DT_INT
	DwPad            DT_UINT
}

func (t *TriggerEventRangedDuration) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.FGenerated, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_6cba752, r, &Options{Flags: 16}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.DwParentActorID, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.TDuration, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.DwTriggerFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.DwTriggerFlagsEx, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.TCleanup, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+116, &t.Unk_49e9257, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.Unk_5490979, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+124, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+128, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TriggerEventRangedDuration) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("TConditions", &t.TConditions, d...)
	cb.Do("FGenerated", &t.FGenerated, d...)
	cb.Do("Unk_6cba752", &t.Unk_6cba752, d...)
	cb.Do("DwParentActorID", &t.DwParentActorID, d...)
	cb.Do("TDuration", &t.TDuration, d...)
	cb.Do("DwTriggerFlags", &t.DwTriggerFlags, d...)
	cb.Do("DwTriggerFlagsEx", &t.DwTriggerFlagsEx, d...)
	cb.Do("TCleanup", &t.TCleanup, d...)
	cb.Do("Unk_49e9257", &t.Unk_49e9257, d...)
	cb.Do("Unk_5490979", &t.Unk_5490979, d...)
	cb.Do("DwPad", &t.DwPad, d...)
}

type GlobalUIData struct {
	// Inherits GlobalBase
	// Inherits PolymorphicBase
	DwType                                            DT_UINT
	DwPad                                             DT_UINT
	ArUILayoutEntries                                 DT_FIXEDARRAY[*UILayoutList]
	FlHeldButtonDelay                                 DT_FLOAT
	FlHeldButtonThreshold                             DT_FLOAT
	Unk_2c2d08c                                       DT_FLOAT
	Unk_3687be2                                       DT_FLOAT
	Unk_f29cf9f                                       DT_FLOAT
	Unk_a1a0b99                                       DT_FLOAT
	Unk_8fd95d7                                       DT_FLOAT
	Unk_7fad401                                       DT_FLOAT
	Unk_5610641                                       DT_FLOAT
	Unk_876f67                                        DT_FLOAT
	Unk_196eaf0                                       DT_FLOAT
	Unk_cd8b828                                       DT_FLOAT
	FlMapBaseScale                                    DT_FLOAT
	Unk_7624717                                       DT_FLOAT
	FlMapZoomScaleMax                                 DT_FLOAT
	FlMapZoomSpeed                                    DT_FLOAT
	FlMapControllerScrollSpeedPerSecond               DT_FLOAT
	Unk_3e0d388                                       DT_FLOAT
	FlMapControllerAccDelay                           DT_FLOAT
	FlMapControllerAccTime                            DT_FLOAT
	FlMapControllerAccScale                           DT_FLOAT
	Unk_1224aa7                                       DT_FLOAT
	FlMapArrowSize                                    DT_FLOAT
	Unk_9946cbb                                       DT_FLOAT
	Unk_9f87fb4                                       DT_FLOAT
	Unk_aaf0c18                                       DT_FLOAT
	Unk_e16b011                                       DT_UINT
	Unk_4f3cd66                                       DT_UINT
	Unk_b825f41                                       DT_UINT
	Unk_478de7c                                       DT_UINT
	Unk_5e323f0                                       DT_UINT
	FlMapFogOfWarFadeDelay                            DT_FLOAT
	FlMapFogOfWarFadeTime                             DT_FLOAT
	Unk_9b4effb                                       DT_FLOAT
	Unk_f65fa83                                       DT_FLOAT
	Unk_d30a7e3                                       DT_VECTOR2D
	SnoMinimapParchmentTexture                        DT_SNO
	SnoMinimapNoiseTexture                            DT_SNO
	SnoMinimapHatchesTexture                          DT_SNO
	FlMinimapTextureAlpha                             DT_FLOAT
	FlMinimapHighlightedTextureAlpha                  DT_FLOAT
	RgbaMinimapBorderColor                            DT_RGBACOLOR
	RgbaMinimapHighlightedBorderColor                 DT_RGBACOLOR
	RgbaMinimapShadowColor                            DT_RGBACOLOR
	RgbaMinimapHighlightedShadowColor                 DT_RGBACOLOR
	RgbaMinimapExteriorColor                          DT_RGBACOLOR
	RgbaMinimapHighlightedExteriorColor               DT_RGBACOLOR
	RgbaMinimapHighlightedTint                        DT_RGBACOLOR
	RgbaMinimapHatchesTint                            DT_RGBACOLOR
	FlBorderWidth                                     DT_FLOAT
	FlBorderStrength                                  DT_FLOAT
	FlHighlightedBorderStrength                       DT_FLOAT
	FlDropShadowStrength                              DT_FLOAT
	FlHighlightedDropShadowStrength                   DT_FLOAT
	FlMinimapDistortionFactor                         DT_FLOAT
	FlMinimapDistortionScale                          DT_FLOAT
	FlMinimapHatchesSpacing                           DT_FLOAT
	FlMinimapHatchesThickness                         DT_FLOAT
	FlMinimapHatchesNoiseSize                         DT_FLOAT
	FlMinimapHatchesNoiseStrength                     DT_FLOAT
	FlMinimapHatchesSpread                            DT_FLOAT
	Unk_1a7cebb                                       DT_VECTOR2D
	Unk_cd7a774                                       DT_FLOAT
	Unk_2dbafe8                                       DT_FLOAT
	Unk_f1bb679                                       DT_FLOAT
	Unk_f1bb57b                                       DT_FLOAT
	Unk_ecabd08                                       DT_FLOAT
	FlDurationMicroseconds                            DT_FLOAT
	Unk_dbf4030                                       DT_FLOAT
	Unk_a133a8                                        DT_FLOAT
	Unk_f577b0                                        DT_FLOAT
	Unk_3ab43a3                                       DT_INT
	Unk_9c8f277                                       DT_FLOAT
	Unk_f2cc835                                       DT_UINT
	Unk_a5093bf                                       DT_FLOAT
	Unk_eeb8012                                       DT_UINT
	SnoFoWShader                                      DT_SNO
	Unk_5dbe647                                       DT_SNO
	Unk_149bdee                                       DT_FLOAT
	Unk_10d9d74                                       DT_FLOAT
	FlMapPingDuration                                 DT_FLOAT
	Unk_430d091                                       DT_FLOAT
	Unk_7a41cb9                                       DT_FLOAT
	Unk_5c6981e                                       DT_FLOAT
	Unk_62b69ec                                       DT_INT
	Unk_3a17c48                                       DT_FLOAT
	TRegions                                          DT_FIXEDARRAY[*ObjectiveRegionParams]
	TTerritoryRegion                                  TerritoryRegionParams
	Unk_2c3270                                        DT_FLOAT
	Unk_ec0001f                                       DT_FLOAT
	Unk_c0496bf                                       DT_FLOAT
	Unk_ec858c                                        DT_FLOAT
	Unk_5135a05                                       DT_FLOAT
	Unk_3f64492                                       DT_FLOAT
	Unk_c993839                                       DT_FLOAT
	Unk_4cf9be8                                       DT_FLOAT
	Unk_eee69a4                                       DT_FLOAT
	FlCurveDistanceThreshold                          DT_FLOAT
	Unk_3fdcbeb                                       DT_FLOAT
	Unk_3fdcaed                                       DT_FLOAT
	FlPathFadeInTime                                  DT_FLOAT
	Unk_85356ef                                       DT_FLOAT
	TPathProps                                        RoadTypeProperties
	Unk_cfff5f6                                       RoadTypeProperties
	TRoadProps                                        DT_FIXEDARRAY[*RoadTypeProperties]
	Unk_d9fccf3                                       Type_31220ee1
	Unk_c0e1b71                                       DT_VECTOR2D
	Unk_5161778                                       DT_VECTOR2D
	Unk_78b2a91                                       DT_VECTOR2D
	Unk_10c7eaa                                       DT_FLOAT
	Unk_a61c4bf                                       DT_FLOAT
	TSkillTreeFrameProps                              SkillTreeConnectionFrameProperties
	TSkillTreePropsPurchased                          ConnectorProperties
	TSkillTreePropsAvailable                          ConnectorProperties
	TSkillTreePropsUnavailable                        ConnectorProperties
	TSkillTreePropsExclusivePurchased                 ConnectorProperties
	TSkillTreePropsExclusiveAvailable                 ConnectorProperties
	TSkillTreePropsExclusiveUnavailable               ConnectorProperties
	TSkillTreePropsExclusiveLocked                    ConnectorProperties
	RgbaSkillTreeInvalidColor                         DT_RGBACOLOR
	Unk_62538b3                                       DT_RGBACOLOR
	RgbaSkillTreeBonusRanksColor                      DT_RGBACOLOR
	RgbaSkillTreeMaxRanksColor                        DT_RGBACOLOR
	Unk_78ed1cc                                       Type_31220ee1
	Unk_5cf738e                                       DT_FLOAT
	Unk_695a8a5                                       DT_FLOAT
	Unk_b2e2e43                                       DT_FLOAT
	Unk_e2be78                                        DT_FLOAT
	Unk_dada65f                                       DT_FLOAT
	Unk_ccab046                                       DT_BYTE
	Unk_78e60c2                                       DT_BYTE
	Unk_1333341                                       DT_BYTE
	Unk_15a4084                                       DT_BYTE
	Unk_c019b27                                       DT_BYTE
	Unk_c091278                                       DT_BYTE
	Unk_7c3f20c                                       DT_FLOAT
	Unk_f993efd                                       DT_UINT
	Unk_ba98f17                                       DT_UINT
	ArHeroDetailsEntries                              DT_FIXEDARRAY[*HeroDetailsArray]
	Unk_a4d68a1                                       DT_VARIABLEARRAY[*UILoadscreenTipData]
	Unk_934d708                                       DT_FLOAT
	FlChatMessageTimeUntilFade                        DT_FLOAT
	FlChatMessageFadeDuration                         DT_FLOAT
	Unk_2bdd3a2                                       DT_UINT
	FlChatFadeDuration                                DT_FLOAT
	FlChatFadeInDuration                              DT_FLOAT
	Unk_99df291                                       DT_FLOAT
	Unk_ecfa0a0                                       DT_FLOAT
	Unk_599fb20                                       DT_FLOAT
	Unk_6fd1380                                       DT_UINT
	Unk_71f6e7e                                       DT_UINT
	Unk_5df2c46                                       DT_UINT
	Unk_80370e6                                       DT_UINT
	Unk_321b8d8                                       DT_UINT
	Unk_59d8d4                                        DT_BYTE
	Unk_15da863                                       DT_BYTE
	Unk_67c326a                                       DT_FLOAT
	TScrollbarStyles                                  DT_FIXEDARRAY[*ScrollbarStyle]
	NMaxRecentAchievements                            DT_UINT
	Unk_90ccf89                                       DT_VARIABLEARRAY[*DT_SNO]
	Unk_2738127                                       DT_UINT
	TSocialWheelSlotDefault_0_0                       SocialWheelSlotBinding
	TSocialWheelSlotDefault_0_1                       SocialWheelSlotBinding
	TSocialWheelSlotDefault_0_2                       SocialWheelSlotBinding
	TSocialWheelSlotDefault_0_3                       SocialWheelSlotBinding
	TSocialWheelSlotDefault_0_4                       SocialWheelSlotBinding
	TSocialWheelSlotDefault_0_5                       SocialWheelSlotBinding
	TSocialWheelSlotDefault_0_6                       SocialWheelSlotBinding
	TSocialWheelSlotDefault_0_7                       SocialWheelSlotBinding
	TSocialWheelSlotDefault_1_0                       SocialWheelSlotBinding
	TSocialWheelSlotDefault_1_1                       SocialWheelSlotBinding
	TSocialWheelSlotDefault_1_2                       SocialWheelSlotBinding
	TSocialWheelSlotDefault_1_3                       SocialWheelSlotBinding
	TSocialWheelSlotDefault_1_4                       SocialWheelSlotBinding
	TSocialWheelSlotDefault_1_5                       SocialWheelSlotBinding
	TSocialWheelSlotDefault_1_6                       SocialWheelSlotBinding
	TSocialWheelSlotDefault_1_7                       SocialWheelSlotBinding
	TSocialWheelSlotDefault_2_0                       SocialWheelSlotBinding
	TSocialWheelSlotDefault_2_1                       SocialWheelSlotBinding
	TSocialWheelSlotDefault_2_2                       SocialWheelSlotBinding
	TSocialWheelSlotDefault_2_3                       SocialWheelSlotBinding
	TSocialWheelSlotDefault_2_4                       SocialWheelSlotBinding
	TSocialWheelSlotDefault_2_5                       SocialWheelSlotBinding
	TSocialWheelSlotDefault_2_6                       SocialWheelSlotBinding
	TSocialWheelSlotDefault_2_7                       SocialWheelSlotBinding
	HSocialWheelTextureBug                            DT_UINT
	HSocialWheelTextureBugHover                       DT_UINT
	HSocialWheelTextureContentReport                  DT_UINT
	HSocialWheelTextureContentReportHover             DT_UINT
	HSocialWheelTextureFlagForPvPEnabled              DT_UINT
	HSocialWheelTextureFlagForPvPEnabledHover         DT_UINT
	HSocialWheelTextureFlagForPvPDisabled             DT_UINT
	HSocialWheelTextureFlagForPvPDisabledHover        DT_UINT
	Unk_d3dd9b3                                       DT_UINT
	Unk_1aea757                                       DT_UINT
	HSocialWheelTexturePartyEnabled                   DT_UINT
	HSocialWheelTexturePartyEnabledHover              DT_UINT
	HSocialWheelTexturePartyDisabled                  DT_UINT
	HSocialWheelTexturePartyDisabledHover             DT_UINT
	HSocialWheelTextureTradeEnabled                   DT_UINT
	HSocialWheelTextureTradeEnabledHover              DT_UINT
	HSocialWheelTextureTradeDisabled                  DT_UINT
	HSocialWheelTextureTradeDisabledHover             DT_UINT
	HSocialWheelTextureZoom                           DT_UINT
	HSocialWheelTextureZoomHover                      DT_UINT
	HSocialWheelTextureOpenChat                       DT_UINT
	HSocialWheelTextureOpenChatHover                  DT_UINT
	HSocialWheelTexturePlayerContextMenuEnabled       DT_UINT
	HSocialWheelTexturePlayerContextMenuEnabledHover  DT_UINT
	HSocialWheelTexturePlayerContextMenuDisabled      DT_UINT
	HSocialWheelTexturePlayerContextMenuDisabledHover DT_UINT
	HSocialWheelTextureInspectEnabled                 DT_UINT
	HSocialWheelTextureInspectEnabledHover            DT_UINT
	HSocialWheelTextureInspectDisabled                DT_UINT
	HSocialWheelTextureInspectDisabledHover           DT_UINT
	HSocialWheelTextureQuickMountEnabled              DT_UINT
	HSocialWheelTextureQuickMountEnabledHover         DT_UINT
	HSocialWheelTextureQuickMountDisabled             DT_UINT
	HSocialWheelTextureQuickMountDisabledHover        DT_UINT
	HSocialWheelTextureLeaveDungeonEnabled            DT_UINT
	HSocialWheelTextureLeaveDungeonEnabledHover       DT_UINT
	HSocialWheelTextureLeaveDungeonDisabled           DT_UINT
	HSocialWheelTextureLeaveDungeonDisabledHover      DT_UINT
	ArSignMatBackgrounds                              DT_FIXEDARRAY[*DT_UINT]
	ArBountyIcons                                     DT_FIXEDARRAY[*BountyIcons]
	ArBountyTierIcons                                 DT_FIXEDARRAY[*BountyTierIcons]
	ArSeasonalBountyTierIcons                         DT_FIXEDARRAY[*BountyTierIcons]
	ArPrioritySideQuestIcons                          DT_FIXEDARRAY[*PrioritySideQuestIcons]
	Unk_aa34698                                       DT_UINT
	TClassInfo                                        DT_FIXEDARRAY[*ClassInfoDataArray]
	ArLevelUpNotificationData                         DT_VARIABLEARRAY[*LevelUpNotificationEntry]
	Unk_dc621b6                                       DT_VARIABLEARRAY[*DT_ENUM]
	Unk_1ff54e                                        DT_VARIABLEARRAY[*DT_ENUM]
	TRelocChain                                       DT_VARIABLEARRAY[*DT_ENUM]
	Unk_2db68                                         DT_VARIABLEARRAY[*DT_ENUM]
	Unk_dbd3ebc                                       DT_VARIABLEARRAY[*DT_ENUM]
	Unk_bb45514                                       DT_VARIABLEARRAY[*DT_FLOAT]
	Unk_6494906                                       DT_INT
	Unk_31fce21                                       DT_FLOAT
	Unk_774d89f                                       DT_FLOAT
	Unk_ef2cbab                                       DT_FLOAT
	Unk_4f23516                                       DT_FLOAT
	Unk_d3ef4e8                                       DT_FLOAT
	Unk_618bf22                                       DT_FLOAT
	ArCreditsImages                                   DT_VARIABLEARRAY[*DT_SNO]
	Unk_17dc82                                        DT_FLOAT
	Unk_29f26f5                                       DT_FLOAT
	FlMinimapRevealRadius                             DT_FLOAT
	Unk_b8c638c                                       DT_UINT
	ArFontColorsExt                                   DT_VARIABLEARRAY[*GlobalFontColor]
	Unk_7b6861c                                       DT_FLOAT
	Unk_c56ad90                                       DT_FLOAT
	Unk_1f7cfee                                       DT_FLOAT
	Unk_85af920                                       DT_FLOAT
	Unk_3ec7e81                                       DT_FLOAT
	Unk_586724                                        DT_FLOAT
	Unk_1fa8d3c                                       DT_INT
	Unk_1fa8c3e                                       DT_INT
	Unk_17a967d                                       DT_INT
	Unk_f063bba                                       DT_INT
	Unk_ce72bfa                                       DT_INT
	Unk_ce72afc                                       DT_INT
	Unk_9ecbbb                                        DT_INT
	Unk_39edff8                                       DT_INT
	Unk_c79c16e                                       DT_INT
	Unk_c79c070                                       DT_INT
	Unk_c70a82f                                       DT_INT
	BInfiniteAmount                                   DT_INT
	ArVOLines                                         DT_FIXEDARRAY[*Type_e3bec795]
	ArMountCarrotPowers                               DT_FIXEDARRAY[*DT_SNO]
}

func (t *GlobalUIData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.ArUILayoutEntries, r, &Options{
		ArrayLength: 3,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.FlHeldButtonDelay, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.FlHeldButtonThreshold, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_2c2d08c, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.Unk_3687be2, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.Unk_f29cf9f, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.Unk_a1a0b99, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.Unk_8fd95d7, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.Unk_7fad401, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.Unk_5610641, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+100, &t.Unk_876f67, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+104, &t.Unk_196eaf0, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+108, &t.Unk_cd8b828, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.FlMapBaseScale, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+116, &t.Unk_7624717, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.FlMapZoomScaleMax, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+124, &t.FlMapZoomSpeed, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.FlMapControllerScrollSpeedPerSecond, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+132, &t.Unk_3e0d388, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+136, &t.FlMapControllerAccDelay, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+140, &t.FlMapControllerAccTime, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+144, &t.FlMapControllerAccScale, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+148, &t.Unk_1224aa7, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+152, &t.FlMapArrowSize, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+156, &t.Unk_9946cbb, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+160, &t.Unk_9f87fb4, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+164, &t.Unk_aaf0c18, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+168, &t.Unk_e16b011, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+172, &t.Unk_4f3cd66, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+176, &t.Unk_b825f41, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+180, &t.Unk_478de7c, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+184, &t.Unk_5e323f0, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+188, &t.FlMapFogOfWarFadeDelay, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+192, &t.FlMapFogOfWarFadeTime, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+196, &t.Unk_9b4effb, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+200, &t.Unk_f65fa83, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+204, &t.Unk_d30a7e3, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+212, &t.SnoMinimapParchmentTexture, r, &Options{
		Flags: 1,
		Group: 44,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+216, &t.SnoMinimapNoiseTexture, r, &Options{
		Flags: 1,
		Group: 44,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+220, &t.SnoMinimapHatchesTexture, r, &Options{
		Flags: 1,
		Group: 44,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+224, &t.FlMinimapTextureAlpha, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+228, &t.FlMinimapHighlightedTextureAlpha, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+232, &t.RgbaMinimapBorderColor, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+236, &t.RgbaMinimapHighlightedBorderColor, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+240, &t.RgbaMinimapShadowColor, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+244, &t.RgbaMinimapHighlightedShadowColor, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+248, &t.RgbaMinimapExteriorColor, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+252, &t.RgbaMinimapHighlightedExteriorColor, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+256, &t.RgbaMinimapHighlightedTint, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+260, &t.RgbaMinimapHatchesTint, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+264, &t.FlBorderWidth, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+268, &t.FlBorderStrength, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+272, &t.FlHighlightedBorderStrength, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+276, &t.FlDropShadowStrength, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+280, &t.FlHighlightedDropShadowStrength, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+284, &t.FlMinimapDistortionFactor, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+288, &t.FlMinimapDistortionScale, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+292, &t.FlMinimapHatchesSpacing, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+296, &t.FlMinimapHatchesThickness, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+300, &t.FlMinimapHatchesNoiseSize, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+304, &t.FlMinimapHatchesNoiseStrength, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+308, &t.FlMinimapHatchesSpread, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+312, &t.Unk_1a7cebb, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+320, &t.Unk_cd7a774, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+324, &t.Unk_2dbafe8, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+328, &t.Unk_f1bb679, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+332, &t.Unk_f1bb57b, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+336, &t.Unk_ecabd08, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+340, &t.FlDurationMicroseconds, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+344, &t.Unk_dbf4030, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+348, &t.Unk_a133a8, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+352, &t.Unk_f577b0, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+356, &t.Unk_3ab43a3, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+360, &t.Unk_9c8f277, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+364, &t.Unk_f2cc835, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+368, &t.Unk_a5093bf, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+372, &t.Unk_eeb8012, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+376, &t.SnoFoWShader, r, &Options{
		Flags: 1,
		Group: 37,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+380, &t.Unk_5dbe647, r, &Options{
		Flags: 1,
		Group: 37,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+384, &t.Unk_149bdee, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+388, &t.Unk_10d9d74, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+392, &t.FlMapPingDuration, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+396, &t.Unk_430d091, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+400, &t.Unk_7a41cb9, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+404, &t.Unk_5c6981e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+408, &t.Unk_62b69ec, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+412, &t.Unk_3a17c48, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+416, &t.TRegions, r, &Options{
		ArrayLength: 7,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1004, &t.TTerritoryRegion, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1028, &t.Unk_2c3270, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1032, &t.Unk_ec0001f, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1036, &t.Unk_c0496bf, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1040, &t.Unk_ec858c, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1044, &t.Unk_5135a05, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1048, &t.Unk_3f64492, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1052, &t.Unk_c993839, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1056, &t.Unk_4cf9be8, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1060, &t.Unk_eee69a4, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1064, &t.FlCurveDistanceThreshold, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1068, &t.Unk_3fdcbeb, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1072, &t.Unk_3fdcaed, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1076, &t.FlPathFadeInTime, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1080, &t.Unk_85356ef, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1084, &t.TPathProps, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1120, &t.Unk_cfff5f6, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1156, &t.TRoadProps, r, &Options{
		ArrayLength: 2,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1228, &t.Unk_d9fccf3, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1296, &t.Unk_c0e1b71, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1304, &t.Unk_5161778, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1312, &t.Unk_78b2a91, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1320, &t.Unk_10c7eaa, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1324, &t.Unk_a61c4bf, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1328, &t.TSkillTreeFrameProps, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1364, &t.TSkillTreePropsPurchased, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1392, &t.TSkillTreePropsAvailable, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1420, &t.TSkillTreePropsUnavailable, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1448, &t.TSkillTreePropsExclusivePurchased, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1476, &t.TSkillTreePropsExclusiveAvailable, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1504, &t.TSkillTreePropsExclusiveUnavailable, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1532, &t.TSkillTreePropsExclusiveLocked, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1560, &t.RgbaSkillTreeInvalidColor, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1564, &t.Unk_62538b3, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1568, &t.RgbaSkillTreeBonusRanksColor, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1572, &t.RgbaSkillTreeMaxRanksColor, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1576, &t.Unk_78ed1cc, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1644, &t.Unk_5cf738e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1648, &t.Unk_695a8a5, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1652, &t.Unk_b2e2e43, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1656, &t.Unk_e2be78, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1660, &t.Unk_dada65f, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1664, &t.Unk_ccab046, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1665, &t.Unk_78e60c2, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1666, &t.Unk_1333341, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1667, &t.Unk_15a4084, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1668, &t.Unk_c019b27, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1669, &t.Unk_c091278, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1672, &t.Unk_7c3f20c, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1676, &t.Unk_f993efd, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1680, &t.Unk_ba98f17, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1688, &t.ArHeroDetailsEntries, r, &Options{
		ArrayLength: 7,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1800, &t.Unk_a4d68a1, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1816, &t.Unk_934d708, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1820, &t.FlChatMessageTimeUntilFade, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1824, &t.FlChatMessageFadeDuration, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1828, &t.Unk_2bdd3a2, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1832, &t.FlChatFadeDuration, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1836, &t.FlChatFadeInDuration, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1840, &t.Unk_99df291, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1844, &t.Unk_ecfa0a0, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1848, &t.Unk_599fb20, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1852, &t.Unk_6fd1380, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1856, &t.Unk_71f6e7e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1860, &t.Unk_5df2c46, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1864, &t.Unk_80370e6, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1868, &t.Unk_321b8d8, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1872, &t.Unk_59d8d4, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1873, &t.Unk_15da863, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1876, &t.Unk_67c326a, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+1880, &t.TScrollbarStyles, r, &Options{
		ArrayLength: 4,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2120, &t.NMaxRecentAchievements, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2128, &t.Unk_90ccf89, r, &Options{
		Flags: 1,
		Group: 73,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2144, &t.Unk_2738127, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2148, &t.TSocialWheelSlotDefault_0_0, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2164, &t.TSocialWheelSlotDefault_0_1, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2180, &t.TSocialWheelSlotDefault_0_2, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2196, &t.TSocialWheelSlotDefault_0_3, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2212, &t.TSocialWheelSlotDefault_0_4, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2228, &t.TSocialWheelSlotDefault_0_5, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2244, &t.TSocialWheelSlotDefault_0_6, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2260, &t.TSocialWheelSlotDefault_0_7, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2276, &t.TSocialWheelSlotDefault_1_0, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2292, &t.TSocialWheelSlotDefault_1_1, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2308, &t.TSocialWheelSlotDefault_1_2, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2324, &t.TSocialWheelSlotDefault_1_3, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2340, &t.TSocialWheelSlotDefault_1_4, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2356, &t.TSocialWheelSlotDefault_1_5, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2372, &t.TSocialWheelSlotDefault_1_6, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2388, &t.TSocialWheelSlotDefault_1_7, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2404, &t.TSocialWheelSlotDefault_2_0, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2420, &t.TSocialWheelSlotDefault_2_1, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2436, &t.TSocialWheelSlotDefault_2_2, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2452, &t.TSocialWheelSlotDefault_2_3, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2468, &t.TSocialWheelSlotDefault_2_4, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2484, &t.TSocialWheelSlotDefault_2_5, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2500, &t.TSocialWheelSlotDefault_2_6, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2516, &t.TSocialWheelSlotDefault_2_7, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2532, &t.HSocialWheelTextureBug, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2536, &t.HSocialWheelTextureBugHover, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2540, &t.HSocialWheelTextureContentReport, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2544, &t.HSocialWheelTextureContentReportHover, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2548, &t.HSocialWheelTextureFlagForPvPEnabled, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2552, &t.HSocialWheelTextureFlagForPvPEnabledHover, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2556, &t.HSocialWheelTextureFlagForPvPDisabled, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2560, &t.HSocialWheelTextureFlagForPvPDisabledHover, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2564, &t.Unk_d3dd9b3, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2568, &t.Unk_1aea757, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2572, &t.HSocialWheelTexturePartyEnabled, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2576, &t.HSocialWheelTexturePartyEnabledHover, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2580, &t.HSocialWheelTexturePartyDisabled, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2584, &t.HSocialWheelTexturePartyDisabledHover, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2588, &t.HSocialWheelTextureTradeEnabled, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2592, &t.HSocialWheelTextureTradeEnabledHover, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2596, &t.HSocialWheelTextureTradeDisabled, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2600, &t.HSocialWheelTextureTradeDisabledHover, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2604, &t.HSocialWheelTextureZoom, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2608, &t.HSocialWheelTextureZoomHover, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2612, &t.HSocialWheelTextureOpenChat, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2616, &t.HSocialWheelTextureOpenChatHover, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2620, &t.HSocialWheelTexturePlayerContextMenuEnabled, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2624, &t.HSocialWheelTexturePlayerContextMenuEnabledHover, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2628, &t.HSocialWheelTexturePlayerContextMenuDisabled, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2632, &t.HSocialWheelTexturePlayerContextMenuDisabledHover, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2636, &t.HSocialWheelTextureInspectEnabled, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2640, &t.HSocialWheelTextureInspectEnabledHover, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2644, &t.HSocialWheelTextureInspectDisabled, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2648, &t.HSocialWheelTextureInspectDisabledHover, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2652, &t.HSocialWheelTextureQuickMountEnabled, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2656, &t.HSocialWheelTextureQuickMountEnabledHover, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2660, &t.HSocialWheelTextureQuickMountDisabled, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2664, &t.HSocialWheelTextureQuickMountDisabledHover, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2668, &t.HSocialWheelTextureLeaveDungeonEnabled, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2672, &t.HSocialWheelTextureLeaveDungeonEnabledHover, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2676, &t.HSocialWheelTextureLeaveDungeonDisabled, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2680, &t.HSocialWheelTextureLeaveDungeonDisabledHover, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2684, &t.ArSignMatBackgrounds, r, &Options{
		ArrayLength: 23,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2776, &t.ArBountyIcons, r, &Options{
		ArrayLength: 10,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2896, &t.ArBountyTierIcons, r, &Options{
		ArrayLength: 3,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2944, &t.ArSeasonalBountyTierIcons, r, &Options{
		ArrayLength: 3,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2992, &t.ArPrioritySideQuestIcons, r, &Options{
		ArrayLength: 3,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+3088, &t.Unk_aa34698, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+3096, &t.TClassInfo, r, &Options{
		ArrayLength: 5,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+3256, &t.ArLevelUpNotificationData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+3272, &t.Unk_dc621b6, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+3288, &t.Unk_1ff54e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+3304, &t.TRelocChain, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+3320, &t.Unk_2db68, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+3336, &t.Unk_dbd3ebc, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+3352, &t.Unk_bb45514, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+3368, &t.Unk_6494906, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+3372, &t.Unk_31fce21, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+3376, &t.Unk_774d89f, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+3380, &t.Unk_ef2cbab, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+3384, &t.Unk_4f23516, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+3388, &t.Unk_d3ef4e8, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+3392, &t.Unk_618bf22, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+3400, &t.ArCreditsImages, r, &Options{
		Flags: 513,
		Group: 44,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+3416, &t.Unk_17dc82, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+3420, &t.Unk_29f26f5, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+3424, &t.FlMinimapRevealRadius, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+3428, &t.Unk_b8c638c, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+3432, &t.ArFontColorsExt, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+3448, &t.Unk_7b6861c, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+3452, &t.Unk_c56ad90, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+3456, &t.Unk_1f7cfee, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+3460, &t.Unk_85af920, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+3464, &t.Unk_3ec7e81, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+3468, &t.Unk_586724, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+3472, &t.Unk_1fa8d3c, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+3476, &t.Unk_1fa8c3e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+3480, &t.Unk_17a967d, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+3484, &t.Unk_f063bba, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+3488, &t.Unk_ce72bfa, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+3492, &t.Unk_ce72afc, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+3496, &t.Unk_9ecbbb, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+3500, &t.Unk_39edff8, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+3504, &t.Unk_c79c16e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+3508, &t.Unk_c79c070, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+3512, &t.Unk_c70a82f, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+3516, &t.BInfiniteAmount, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+3520, &t.ArVOLines, r, &Options{
		ArrayLength: 1,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+3560, &t.ArMountCarrotPowers, r, &Options{
		ArrayLength: 1,
		Flags:       513,
		Group:       29,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+3568, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *GlobalUIData) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("ArUILayoutEntries", &t.ArUILayoutEntries, d...)
	cb.Do("FlHeldButtonDelay", &t.FlHeldButtonDelay, d...)
	cb.Do("FlHeldButtonThreshold", &t.FlHeldButtonThreshold, d...)
	cb.Do("Unk_2c2d08c", &t.Unk_2c2d08c, d...)
	cb.Do("Unk_3687be2", &t.Unk_3687be2, d...)
	cb.Do("Unk_f29cf9f", &t.Unk_f29cf9f, d...)
	cb.Do("Unk_a1a0b99", &t.Unk_a1a0b99, d...)
	cb.Do("Unk_8fd95d7", &t.Unk_8fd95d7, d...)
	cb.Do("Unk_7fad401", &t.Unk_7fad401, d...)
	cb.Do("Unk_5610641", &t.Unk_5610641, d...)
	cb.Do("Unk_876f67", &t.Unk_876f67, d...)
	cb.Do("Unk_196eaf0", &t.Unk_196eaf0, d...)
	cb.Do("Unk_cd8b828", &t.Unk_cd8b828, d...)
	cb.Do("FlMapBaseScale", &t.FlMapBaseScale, d...)
	cb.Do("Unk_7624717", &t.Unk_7624717, d...)
	cb.Do("FlMapZoomScaleMax", &t.FlMapZoomScaleMax, d...)
	cb.Do("FlMapZoomSpeed", &t.FlMapZoomSpeed, d...)
	cb.Do("FlMapControllerScrollSpeedPerSecond", &t.FlMapControllerScrollSpeedPerSecond, d...)
	cb.Do("Unk_3e0d388", &t.Unk_3e0d388, d...)
	cb.Do("FlMapControllerAccDelay", &t.FlMapControllerAccDelay, d...)
	cb.Do("FlMapControllerAccTime", &t.FlMapControllerAccTime, d...)
	cb.Do("FlMapControllerAccScale", &t.FlMapControllerAccScale, d...)
	cb.Do("Unk_1224aa7", &t.Unk_1224aa7, d...)
	cb.Do("FlMapArrowSize", &t.FlMapArrowSize, d...)
	cb.Do("Unk_9946cbb", &t.Unk_9946cbb, d...)
	cb.Do("Unk_9f87fb4", &t.Unk_9f87fb4, d...)
	cb.Do("Unk_aaf0c18", &t.Unk_aaf0c18, d...)
	cb.Do("Unk_e16b011", &t.Unk_e16b011, d...)
	cb.Do("Unk_4f3cd66", &t.Unk_4f3cd66, d...)
	cb.Do("Unk_b825f41", &t.Unk_b825f41, d...)
	cb.Do("Unk_478de7c", &t.Unk_478de7c, d...)
	cb.Do("Unk_5e323f0", &t.Unk_5e323f0, d...)
	cb.Do("FlMapFogOfWarFadeDelay", &t.FlMapFogOfWarFadeDelay, d...)
	cb.Do("FlMapFogOfWarFadeTime", &t.FlMapFogOfWarFadeTime, d...)
	cb.Do("Unk_9b4effb", &t.Unk_9b4effb, d...)
	cb.Do("Unk_f65fa83", &t.Unk_f65fa83, d...)
	cb.Do("Unk_d30a7e3", &t.Unk_d30a7e3, d...)
	cb.Do("SnoMinimapParchmentTexture", &t.SnoMinimapParchmentTexture, d...)
	cb.Do("SnoMinimapNoiseTexture", &t.SnoMinimapNoiseTexture, d...)
	cb.Do("SnoMinimapHatchesTexture", &t.SnoMinimapHatchesTexture, d...)
	cb.Do("FlMinimapTextureAlpha", &t.FlMinimapTextureAlpha, d...)
	cb.Do("FlMinimapHighlightedTextureAlpha", &t.FlMinimapHighlightedTextureAlpha, d...)
	cb.Do("RgbaMinimapBorderColor", &t.RgbaMinimapBorderColor, d...)
	cb.Do("RgbaMinimapHighlightedBorderColor", &t.RgbaMinimapHighlightedBorderColor, d...)
	cb.Do("RgbaMinimapShadowColor", &t.RgbaMinimapShadowColor, d...)
	cb.Do("RgbaMinimapHighlightedShadowColor", &t.RgbaMinimapHighlightedShadowColor, d...)
	cb.Do("RgbaMinimapExteriorColor", &t.RgbaMinimapExteriorColor, d...)
	cb.Do("RgbaMinimapHighlightedExteriorColor", &t.RgbaMinimapHighlightedExteriorColor, d...)
	cb.Do("RgbaMinimapHighlightedTint", &t.RgbaMinimapHighlightedTint, d...)
	cb.Do("RgbaMinimapHatchesTint", &t.RgbaMinimapHatchesTint, d...)
	cb.Do("FlBorderWidth", &t.FlBorderWidth, d...)
	cb.Do("FlBorderStrength", &t.FlBorderStrength, d...)
	cb.Do("FlHighlightedBorderStrength", &t.FlHighlightedBorderStrength, d...)
	cb.Do("FlDropShadowStrength", &t.FlDropShadowStrength, d...)
	cb.Do("FlHighlightedDropShadowStrength", &t.FlHighlightedDropShadowStrength, d...)
	cb.Do("FlMinimapDistortionFactor", &t.FlMinimapDistortionFactor, d...)
	cb.Do("FlMinimapDistortionScale", &t.FlMinimapDistortionScale, d...)
	cb.Do("FlMinimapHatchesSpacing", &t.FlMinimapHatchesSpacing, d...)
	cb.Do("FlMinimapHatchesThickness", &t.FlMinimapHatchesThickness, d...)
	cb.Do("FlMinimapHatchesNoiseSize", &t.FlMinimapHatchesNoiseSize, d...)
	cb.Do("FlMinimapHatchesNoiseStrength", &t.FlMinimapHatchesNoiseStrength, d...)
	cb.Do("FlMinimapHatchesSpread", &t.FlMinimapHatchesSpread, d...)
	cb.Do("Unk_1a7cebb", &t.Unk_1a7cebb, d...)
	cb.Do("Unk_cd7a774", &t.Unk_cd7a774, d...)
	cb.Do("Unk_2dbafe8", &t.Unk_2dbafe8, d...)
	cb.Do("Unk_f1bb679", &t.Unk_f1bb679, d...)
	cb.Do("Unk_f1bb57b", &t.Unk_f1bb57b, d...)
	cb.Do("Unk_ecabd08", &t.Unk_ecabd08, d...)
	cb.Do("FlDurationMicroseconds", &t.FlDurationMicroseconds, d...)
	cb.Do("Unk_dbf4030", &t.Unk_dbf4030, d...)
	cb.Do("Unk_a133a8", &t.Unk_a133a8, d...)
	cb.Do("Unk_f577b0", &t.Unk_f577b0, d...)
	cb.Do("Unk_3ab43a3", &t.Unk_3ab43a3, d...)
	cb.Do("Unk_9c8f277", &t.Unk_9c8f277, d...)
	cb.Do("Unk_f2cc835", &t.Unk_f2cc835, d...)
	cb.Do("Unk_a5093bf", &t.Unk_a5093bf, d...)
	cb.Do("Unk_eeb8012", &t.Unk_eeb8012, d...)
	cb.Do("SnoFoWShader", &t.SnoFoWShader, d...)
	cb.Do("Unk_5dbe647", &t.Unk_5dbe647, d...)
	cb.Do("Unk_149bdee", &t.Unk_149bdee, d...)
	cb.Do("Unk_10d9d74", &t.Unk_10d9d74, d...)
	cb.Do("FlMapPingDuration", &t.FlMapPingDuration, d...)
	cb.Do("Unk_430d091", &t.Unk_430d091, d...)
	cb.Do("Unk_7a41cb9", &t.Unk_7a41cb9, d...)
	cb.Do("Unk_5c6981e", &t.Unk_5c6981e, d...)
	cb.Do("Unk_62b69ec", &t.Unk_62b69ec, d...)
	cb.Do("Unk_3a17c48", &t.Unk_3a17c48, d...)
	cb.Do("TRegions", &t.TRegions, d...)
	cb.Do("TTerritoryRegion", &t.TTerritoryRegion, d...)
	cb.Do("Unk_2c3270", &t.Unk_2c3270, d...)
	cb.Do("Unk_ec0001f", &t.Unk_ec0001f, d...)
	cb.Do("Unk_c0496bf", &t.Unk_c0496bf, d...)
	cb.Do("Unk_ec858c", &t.Unk_ec858c, d...)
	cb.Do("Unk_5135a05", &t.Unk_5135a05, d...)
	cb.Do("Unk_3f64492", &t.Unk_3f64492, d...)
	cb.Do("Unk_c993839", &t.Unk_c993839, d...)
	cb.Do("Unk_4cf9be8", &t.Unk_4cf9be8, d...)
	cb.Do("Unk_eee69a4", &t.Unk_eee69a4, d...)
	cb.Do("FlCurveDistanceThreshold", &t.FlCurveDistanceThreshold, d...)
	cb.Do("Unk_3fdcbeb", &t.Unk_3fdcbeb, d...)
	cb.Do("Unk_3fdcaed", &t.Unk_3fdcaed, d...)
	cb.Do("FlPathFadeInTime", &t.FlPathFadeInTime, d...)
	cb.Do("Unk_85356ef", &t.Unk_85356ef, d...)
	cb.Do("TPathProps", &t.TPathProps, d...)
	cb.Do("Unk_cfff5f6", &t.Unk_cfff5f6, d...)
	cb.Do("TRoadProps", &t.TRoadProps, d...)
	cb.Do("Unk_d9fccf3", &t.Unk_d9fccf3, d...)
	cb.Do("Unk_c0e1b71", &t.Unk_c0e1b71, d...)
	cb.Do("Unk_5161778", &t.Unk_5161778, d...)
	cb.Do("Unk_78b2a91", &t.Unk_78b2a91, d...)
	cb.Do("Unk_10c7eaa", &t.Unk_10c7eaa, d...)
	cb.Do("Unk_a61c4bf", &t.Unk_a61c4bf, d...)
	cb.Do("TSkillTreeFrameProps", &t.TSkillTreeFrameProps, d...)
	cb.Do("TSkillTreePropsPurchased", &t.TSkillTreePropsPurchased, d...)
	cb.Do("TSkillTreePropsAvailable", &t.TSkillTreePropsAvailable, d...)
	cb.Do("TSkillTreePropsUnavailable", &t.TSkillTreePropsUnavailable, d...)
	cb.Do("TSkillTreePropsExclusivePurchased", &t.TSkillTreePropsExclusivePurchased, d...)
	cb.Do("TSkillTreePropsExclusiveAvailable", &t.TSkillTreePropsExclusiveAvailable, d...)
	cb.Do("TSkillTreePropsExclusiveUnavailable", &t.TSkillTreePropsExclusiveUnavailable, d...)
	cb.Do("TSkillTreePropsExclusiveLocked", &t.TSkillTreePropsExclusiveLocked, d...)
	cb.Do("RgbaSkillTreeInvalidColor", &t.RgbaSkillTreeInvalidColor, d...)
	cb.Do("Unk_62538b3", &t.Unk_62538b3, d...)
	cb.Do("RgbaSkillTreeBonusRanksColor", &t.RgbaSkillTreeBonusRanksColor, d...)
	cb.Do("RgbaSkillTreeMaxRanksColor", &t.RgbaSkillTreeMaxRanksColor, d...)
	cb.Do("Unk_78ed1cc", &t.Unk_78ed1cc, d...)
	cb.Do("Unk_5cf738e", &t.Unk_5cf738e, d...)
	cb.Do("Unk_695a8a5", &t.Unk_695a8a5, d...)
	cb.Do("Unk_b2e2e43", &t.Unk_b2e2e43, d...)
	cb.Do("Unk_e2be78", &t.Unk_e2be78, d...)
	cb.Do("Unk_dada65f", &t.Unk_dada65f, d...)
	cb.Do("Unk_ccab046", &t.Unk_ccab046, d...)
	cb.Do("Unk_78e60c2", &t.Unk_78e60c2, d...)
	cb.Do("Unk_1333341", &t.Unk_1333341, d...)
	cb.Do("Unk_15a4084", &t.Unk_15a4084, d...)
	cb.Do("Unk_c019b27", &t.Unk_c019b27, d...)
	cb.Do("Unk_c091278", &t.Unk_c091278, d...)
	cb.Do("Unk_7c3f20c", &t.Unk_7c3f20c, d...)
	cb.Do("Unk_f993efd", &t.Unk_f993efd, d...)
	cb.Do("Unk_ba98f17", &t.Unk_ba98f17, d...)
	cb.Do("ArHeroDetailsEntries", &t.ArHeroDetailsEntries, d...)
	cb.Do("Unk_a4d68a1", &t.Unk_a4d68a1, d...)
	cb.Do("Unk_934d708", &t.Unk_934d708, d...)
	cb.Do("FlChatMessageTimeUntilFade", &t.FlChatMessageTimeUntilFade, d...)
	cb.Do("FlChatMessageFadeDuration", &t.FlChatMessageFadeDuration, d...)
	cb.Do("Unk_2bdd3a2", &t.Unk_2bdd3a2, d...)
	cb.Do("FlChatFadeDuration", &t.FlChatFadeDuration, d...)
	cb.Do("FlChatFadeInDuration", &t.FlChatFadeInDuration, d...)
	cb.Do("Unk_99df291", &t.Unk_99df291, d...)
	cb.Do("Unk_ecfa0a0", &t.Unk_ecfa0a0, d...)
	cb.Do("Unk_599fb20", &t.Unk_599fb20, d...)
	cb.Do("Unk_6fd1380", &t.Unk_6fd1380, d...)
	cb.Do("Unk_71f6e7e", &t.Unk_71f6e7e, d...)
	cb.Do("Unk_5df2c46", &t.Unk_5df2c46, d...)
	cb.Do("Unk_80370e6", &t.Unk_80370e6, d...)
	cb.Do("Unk_321b8d8", &t.Unk_321b8d8, d...)
	cb.Do("Unk_59d8d4", &t.Unk_59d8d4, d...)
	cb.Do("Unk_15da863", &t.Unk_15da863, d...)
	cb.Do("Unk_67c326a", &t.Unk_67c326a, d...)
	cb.Do("TScrollbarStyles", &t.TScrollbarStyles, d...)
	cb.Do("NMaxRecentAchievements", &t.NMaxRecentAchievements, d...)
	cb.Do("Unk_90ccf89", &t.Unk_90ccf89, d...)
	cb.Do("Unk_2738127", &t.Unk_2738127, d...)
	cb.Do("TSocialWheelSlotDefault_0_0", &t.TSocialWheelSlotDefault_0_0, d...)
	cb.Do("TSocialWheelSlotDefault_0_1", &t.TSocialWheelSlotDefault_0_1, d...)
	cb.Do("TSocialWheelSlotDefault_0_2", &t.TSocialWheelSlotDefault_0_2, d...)
	cb.Do("TSocialWheelSlotDefault_0_3", &t.TSocialWheelSlotDefault_0_3, d...)
	cb.Do("TSocialWheelSlotDefault_0_4", &t.TSocialWheelSlotDefault_0_4, d...)
	cb.Do("TSocialWheelSlotDefault_0_5", &t.TSocialWheelSlotDefault_0_5, d...)
	cb.Do("TSocialWheelSlotDefault_0_6", &t.TSocialWheelSlotDefault_0_6, d...)
	cb.Do("TSocialWheelSlotDefault_0_7", &t.TSocialWheelSlotDefault_0_7, d...)
	cb.Do("TSocialWheelSlotDefault_1_0", &t.TSocialWheelSlotDefault_1_0, d...)
	cb.Do("TSocialWheelSlotDefault_1_1", &t.TSocialWheelSlotDefault_1_1, d...)
	cb.Do("TSocialWheelSlotDefault_1_2", &t.TSocialWheelSlotDefault_1_2, d...)
	cb.Do("TSocialWheelSlotDefault_1_3", &t.TSocialWheelSlotDefault_1_3, d...)
	cb.Do("TSocialWheelSlotDefault_1_4", &t.TSocialWheelSlotDefault_1_4, d...)
	cb.Do("TSocialWheelSlotDefault_1_5", &t.TSocialWheelSlotDefault_1_5, d...)
	cb.Do("TSocialWheelSlotDefault_1_6", &t.TSocialWheelSlotDefault_1_6, d...)
	cb.Do("TSocialWheelSlotDefault_1_7", &t.TSocialWheelSlotDefault_1_7, d...)
	cb.Do("TSocialWheelSlotDefault_2_0", &t.TSocialWheelSlotDefault_2_0, d...)
	cb.Do("TSocialWheelSlotDefault_2_1", &t.TSocialWheelSlotDefault_2_1, d...)
	cb.Do("TSocialWheelSlotDefault_2_2", &t.TSocialWheelSlotDefault_2_2, d...)
	cb.Do("TSocialWheelSlotDefault_2_3", &t.TSocialWheelSlotDefault_2_3, d...)
	cb.Do("TSocialWheelSlotDefault_2_4", &t.TSocialWheelSlotDefault_2_4, d...)
	cb.Do("TSocialWheelSlotDefault_2_5", &t.TSocialWheelSlotDefault_2_5, d...)
	cb.Do("TSocialWheelSlotDefault_2_6", &t.TSocialWheelSlotDefault_2_6, d...)
	cb.Do("TSocialWheelSlotDefault_2_7", &t.TSocialWheelSlotDefault_2_7, d...)
	cb.Do("HSocialWheelTextureBug", &t.HSocialWheelTextureBug, d...)
	cb.Do("HSocialWheelTextureBugHover", &t.HSocialWheelTextureBugHover, d...)
	cb.Do("HSocialWheelTextureContentReport", &t.HSocialWheelTextureContentReport, d...)
	cb.Do("HSocialWheelTextureContentReportHover", &t.HSocialWheelTextureContentReportHover, d...)
	cb.Do("HSocialWheelTextureFlagForPvPEnabled", &t.HSocialWheelTextureFlagForPvPEnabled, d...)
	cb.Do("HSocialWheelTextureFlagForPvPEnabledHover", &t.HSocialWheelTextureFlagForPvPEnabledHover, d...)
	cb.Do("HSocialWheelTextureFlagForPvPDisabled", &t.HSocialWheelTextureFlagForPvPDisabled, d...)
	cb.Do("HSocialWheelTextureFlagForPvPDisabledHover", &t.HSocialWheelTextureFlagForPvPDisabledHover, d...)
	cb.Do("Unk_d3dd9b3", &t.Unk_d3dd9b3, d...)
	cb.Do("Unk_1aea757", &t.Unk_1aea757, d...)
	cb.Do("HSocialWheelTexturePartyEnabled", &t.HSocialWheelTexturePartyEnabled, d...)
	cb.Do("HSocialWheelTexturePartyEnabledHover", &t.HSocialWheelTexturePartyEnabledHover, d...)
	cb.Do("HSocialWheelTexturePartyDisabled", &t.HSocialWheelTexturePartyDisabled, d...)
	cb.Do("HSocialWheelTexturePartyDisabledHover", &t.HSocialWheelTexturePartyDisabledHover, d...)
	cb.Do("HSocialWheelTextureTradeEnabled", &t.HSocialWheelTextureTradeEnabled, d...)
	cb.Do("HSocialWheelTextureTradeEnabledHover", &t.HSocialWheelTextureTradeEnabledHover, d...)
	cb.Do("HSocialWheelTextureTradeDisabled", &t.HSocialWheelTextureTradeDisabled, d...)
	cb.Do("HSocialWheelTextureTradeDisabledHover", &t.HSocialWheelTextureTradeDisabledHover, d...)
	cb.Do("HSocialWheelTextureZoom", &t.HSocialWheelTextureZoom, d...)
	cb.Do("HSocialWheelTextureZoomHover", &t.HSocialWheelTextureZoomHover, d...)
	cb.Do("HSocialWheelTextureOpenChat", &t.HSocialWheelTextureOpenChat, d...)
	cb.Do("HSocialWheelTextureOpenChatHover", &t.HSocialWheelTextureOpenChatHover, d...)
	cb.Do("HSocialWheelTexturePlayerContextMenuEnabled", &t.HSocialWheelTexturePlayerContextMenuEnabled, d...)
	cb.Do("HSocialWheelTexturePlayerContextMenuEnabledHover", &t.HSocialWheelTexturePlayerContextMenuEnabledHover, d...)
	cb.Do("HSocialWheelTexturePlayerContextMenuDisabled", &t.HSocialWheelTexturePlayerContextMenuDisabled, d...)
	cb.Do("HSocialWheelTexturePlayerContextMenuDisabledHover", &t.HSocialWheelTexturePlayerContextMenuDisabledHover, d...)
	cb.Do("HSocialWheelTextureInspectEnabled", &t.HSocialWheelTextureInspectEnabled, d...)
	cb.Do("HSocialWheelTextureInspectEnabledHover", &t.HSocialWheelTextureInspectEnabledHover, d...)
	cb.Do("HSocialWheelTextureInspectDisabled", &t.HSocialWheelTextureInspectDisabled, d...)
	cb.Do("HSocialWheelTextureInspectDisabledHover", &t.HSocialWheelTextureInspectDisabledHover, d...)
	cb.Do("HSocialWheelTextureQuickMountEnabled", &t.HSocialWheelTextureQuickMountEnabled, d...)
	cb.Do("HSocialWheelTextureQuickMountEnabledHover", &t.HSocialWheelTextureQuickMountEnabledHover, d...)
	cb.Do("HSocialWheelTextureQuickMountDisabled", &t.HSocialWheelTextureQuickMountDisabled, d...)
	cb.Do("HSocialWheelTextureQuickMountDisabledHover", &t.HSocialWheelTextureQuickMountDisabledHover, d...)
	cb.Do("HSocialWheelTextureLeaveDungeonEnabled", &t.HSocialWheelTextureLeaveDungeonEnabled, d...)
	cb.Do("HSocialWheelTextureLeaveDungeonEnabledHover", &t.HSocialWheelTextureLeaveDungeonEnabledHover, d...)
	cb.Do("HSocialWheelTextureLeaveDungeonDisabled", &t.HSocialWheelTextureLeaveDungeonDisabled, d...)
	cb.Do("HSocialWheelTextureLeaveDungeonDisabledHover", &t.HSocialWheelTextureLeaveDungeonDisabledHover, d...)
	cb.Do("ArSignMatBackgrounds", &t.ArSignMatBackgrounds, d...)
	cb.Do("ArBountyIcons", &t.ArBountyIcons, d...)
	cb.Do("ArBountyTierIcons", &t.ArBountyTierIcons, d...)
	cb.Do("ArSeasonalBountyTierIcons", &t.ArSeasonalBountyTierIcons, d...)
	cb.Do("ArPrioritySideQuestIcons", &t.ArPrioritySideQuestIcons, d...)
	cb.Do("Unk_aa34698", &t.Unk_aa34698, d...)
	cb.Do("TClassInfo", &t.TClassInfo, d...)
	cb.Do("ArLevelUpNotificationData", &t.ArLevelUpNotificationData, d...)
	cb.Do("Unk_dc621b6", &t.Unk_dc621b6, d...)
	cb.Do("Unk_1ff54e", &t.Unk_1ff54e, d...)
	cb.Do("TRelocChain", &t.TRelocChain, d...)
	cb.Do("Unk_2db68", &t.Unk_2db68, d...)
	cb.Do("Unk_dbd3ebc", &t.Unk_dbd3ebc, d...)
	cb.Do("Unk_bb45514", &t.Unk_bb45514, d...)
	cb.Do("Unk_6494906", &t.Unk_6494906, d...)
	cb.Do("Unk_31fce21", &t.Unk_31fce21, d...)
	cb.Do("Unk_774d89f", &t.Unk_774d89f, d...)
	cb.Do("Unk_ef2cbab", &t.Unk_ef2cbab, d...)
	cb.Do("Unk_4f23516", &t.Unk_4f23516, d...)
	cb.Do("Unk_d3ef4e8", &t.Unk_d3ef4e8, d...)
	cb.Do("Unk_618bf22", &t.Unk_618bf22, d...)
	cb.Do("ArCreditsImages", &t.ArCreditsImages, d...)
	cb.Do("Unk_17dc82", &t.Unk_17dc82, d...)
	cb.Do("Unk_29f26f5", &t.Unk_29f26f5, d...)
	cb.Do("FlMinimapRevealRadius", &t.FlMinimapRevealRadius, d...)
	cb.Do("Unk_b8c638c", &t.Unk_b8c638c, d...)
	cb.Do("ArFontColorsExt", &t.ArFontColorsExt, d...)
	cb.Do("Unk_7b6861c", &t.Unk_7b6861c, d...)
	cb.Do("Unk_c56ad90", &t.Unk_c56ad90, d...)
	cb.Do("Unk_1f7cfee", &t.Unk_1f7cfee, d...)
	cb.Do("Unk_85af920", &t.Unk_85af920, d...)
	cb.Do("Unk_3ec7e81", &t.Unk_3ec7e81, d...)
	cb.Do("Unk_586724", &t.Unk_586724, d...)
	cb.Do("Unk_1fa8d3c", &t.Unk_1fa8d3c, d...)
	cb.Do("Unk_1fa8c3e", &t.Unk_1fa8c3e, d...)
	cb.Do("Unk_17a967d", &t.Unk_17a967d, d...)
	cb.Do("Unk_f063bba", &t.Unk_f063bba, d...)
	cb.Do("Unk_ce72bfa", &t.Unk_ce72bfa, d...)
	cb.Do("Unk_ce72afc", &t.Unk_ce72afc, d...)
	cb.Do("Unk_9ecbbb", &t.Unk_9ecbbb, d...)
	cb.Do("Unk_39edff8", &t.Unk_39edff8, d...)
	cb.Do("Unk_c79c16e", &t.Unk_c79c16e, d...)
	cb.Do("Unk_c79c070", &t.Unk_c79c070, d...)
	cb.Do("Unk_c70a82f", &t.Unk_c70a82f, d...)
	cb.Do("BInfiniteAmount", &t.BInfiniteAmount, d...)
	cb.Do("ArVOLines", &t.ArVOLines, d...)
	cb.Do("ArMountCarrotPowers", &t.ArMountCarrotPowers, d...)
}

type CompVertInfluences struct{}

func (t *CompVertInfluences) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if _, err := r.Seek(p+1, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *CompVertInfluences) Walk(cb WalkCallback, d ...any) {}

type DebugActorTooltipMessage struct {
	THeader   RequiredMessageHeader
	Ann       DT_ACD_NETWORK_NAME
	SzTooltip DT_CHARARRAY
}

func (t *DebugActorTooltipMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Ann, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SzTooltip, r, &Options{
		ArrayLength: 1024,
		Flags:       1,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+1048, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *DebugActorTooltipMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("Ann", &t.Ann, d...)
	cb.Do("SzTooltip", &t.SzTooltip, d...)
}

type AnimSetDefinition struct {
	PtWeaponClasses      DT_VARIABLEARRAY[*DT_ENUM]
	EAnimsetType         DT_ENUM
	PtPowerEntryList     DT_VARIABLEARRAY[*AnimSetPowerEntry]
	PtPowersOverrideList DT_VARIABLEARRAY[*PowerBlendOverrideList]
	Unk_4ff6b8e          DT_VARIABLEARRAY[*Type_a1889860]
}

func (t *AnimSetDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.PtWeaponClasses, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.EAnimsetType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.PtPowerEntryList, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.PtPowersOverrideList, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.Unk_4ff6b8e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+80, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *AnimSetDefinition) Walk(cb WalkCallback, d ...any) {
	cb.Do("PtWeaponClasses", &t.PtWeaponClasses, d...)
	cb.Do("EAnimsetType", &t.EAnimsetType, d...)
	cb.Do("PtPowerEntryList", &t.PtPowerEntryList, d...)
	cb.Do("PtPowersOverrideList", &t.PtPowersOverrideList, d...)
	cb.Do("Unk_4ff6b8e", &t.Unk_4ff6b8e, d...)
}

type RevealWorldMessage struct {
	THeader               RequiredMessageHeader
	IdSWorld              DT_SHARED_SERVER_DATA_ID
	SnoWorld              DT_SNO
	Unk_2573139           DT_UINT
	Unk_b4055da           DT_OPTIONAL[*DT_VECTOR2D]
	UKeyedDungeonTier     DT_OPTIONAL[*DT_UINT]
	ArDungeonStates       DT_FIXEDARRAY[*DT_GBID]
	NDungeonStatesCount   DT_INT
	ArDungeonAffixes      DT_FIXEDARRAY[*DT_SNO]
	ArDungeonQuestSNOs    DT_FIXEDARRAY[*DT_SNO]
	NRemainingReviveCount DT_INT
	NSeed                 DT_OPTIONAL[*DT_INT]
}

func (t *RevealWorldMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.IdSWorld, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SnoWorld, r, &Options{
		Flags: 1,
		Group: 48,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.Unk_2573139, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.Unk_b4055da, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.UKeyedDungeonTier, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.ArDungeonStates, r, &Options{
		ArrayLength: 32,
		Flags:       1,
		Group:       31,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+180, &t.NDungeonStatesCount, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+184, &t.ArDungeonAffixes, r, &Options{
		ArrayLength: 8,
		Flags:       9,
		Group:       135,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+220, &t.ArDungeonQuestSNOs, r, &Options{
		ArrayLength: 8,
		Flags:       9,
		Group:       31,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+256, &t.NRemainingReviveCount, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+260, &t.NSeed, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+268, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *RevealWorldMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("IdSWorld", &t.IdSWorld, d...)
	cb.Do("SnoWorld", &t.SnoWorld, d...)
	cb.Do("Unk_2573139", &t.Unk_2573139, d...)
	cb.Do("Unk_b4055da", &t.Unk_b4055da, d...)
	cb.Do("UKeyedDungeonTier", &t.UKeyedDungeonTier, d...)
	cb.Do("ArDungeonStates", &t.ArDungeonStates, d...)
	cb.Do("NDungeonStatesCount", &t.NDungeonStatesCount, d...)
	cb.Do("ArDungeonAffixes", &t.ArDungeonAffixes, d...)
	cb.Do("ArDungeonQuestSNOs", &t.ArDungeonQuestSNOs, d...)
	cb.Do("NRemainingReviveCount", &t.NRemainingReviveCount, d...)
	cb.Do("NSeed", &t.NSeed, d...)
}

type EffectGroupStandardTrack struct {
	// Inherits EffectGroupTrack
	// Inherits PolymorphicBase
	DwType DT_UINT
	DwPad  DT_UINT
}

func (t *EffectGroupStandardTrack) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *EffectGroupStandardTrack) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
}

type UIDrawHookStyle struct {
	// Inherits UIControlStyle
	// Inherits PolymorphicBase
	DwType                    DT_UINT
	DwPad                     DT_UINT
	HParentStyle              UIControlHandle
	Unk_441f783               DT_INT64
	M_eHasModifiedPowerTagMap DT_TAGMAP[*DT_ENUM]
	Unk_db47553               DT_TAGMAP[*DT_ENUM]
}

func (t *UIDrawHookStyle) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.HParentStyle, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_441f783, r, &Options{Flags: 4194304}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.M_eHasModifiedPowerTagMap, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.Unk_db47553, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+64, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *UIDrawHookStyle) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("HParentStyle", &t.HParentStyle, d...)
	cb.Do("Unk_441f783", &t.Unk_441f783, d...)
	cb.Do("M_eHasModifiedPowerTagMap", &t.M_eHasModifiedPowerTagMap, d...)
	cb.Do("Unk_db47553", &t.Unk_db47553, d...)
}

type ParticleSimKeyFrameDistortion struct {
	FlTime       DT_FLOAT
	FlDistortion DT_FLOAT
}

func (t *ParticleSimKeyFrameDistortion) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.FlTime, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.FlDistortion, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ParticleSimKeyFrameDistortion) Walk(cb WalkCallback, d ...any) {
	cb.Do("FlTime", &t.FlTime, d...)
	cb.Do("FlDistortion", &t.FlDistortion, d...)
}

type Type_fa97e5b9 struct {
	SnoOceanAmbient     DT_SNO
	SnoCoastlineAmbient DT_SNO
	SnoRiverAmbient     DT_SNO
	SnoStreamAmbient    DT_SNO
	SnoCliffEdgeAmbient DT_SNO
}

func (t *Type_fa97e5b9) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoOceanAmbient, r, &Options{
		Flags: 1,
		Group: 5,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.SnoCoastlineAmbient, r, &Options{
		Flags: 1,
		Group: 5,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.SnoRiverAmbient, r, &Options{
		Flags: 1,
		Group: 5,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.SnoStreamAmbient, r, &Options{
		Flags: 1,
		Group: 5,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoCliffEdgeAmbient, r, &Options{
		Flags: 1,
		Group: 5,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+20, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_fa97e5b9) Walk(cb WalkCallback, d ...any) {
	cb.Do("SnoOceanAmbient", &t.SnoOceanAmbient, d...)
	cb.Do("SnoCoastlineAmbient", &t.SnoCoastlineAmbient, d...)
	cb.Do("SnoRiverAmbient", &t.SnoRiverAmbient, d...)
	cb.Do("SnoStreamAmbient", &t.SnoStreamAmbient, d...)
	cb.Do("SnoCliffEdgeAmbient", &t.SnoCliffEdgeAmbient, d...)
}

type ACDCollFlagsMessage struct {
	THeader                RequiredMessageHeader
	Ann                    DT_ACD_NETWORK_NAME
	UDynamicFlagsNoOverlap DT_UINT
	UDynamicMyFlags        DT_UINT
}

func (t *ACDCollFlagsMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Ann, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.UDynamicFlagsNoOverlap, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.UDynamicMyFlags, r, &Options{Flags: 524289}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ACDCollFlagsMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("Ann", &t.Ann, d...)
	cb.Do("UDynamicFlagsNoOverlap", &t.UDynamicFlagsNoOverlap, d...)
	cb.Do("UDynamicMyFlags", &t.UDynamicMyFlags, d...)
}

type PopGroupHandle struct {
	SnoPopulation DT_SNO
	GbidType      DT_GBID
	NID           DT_INT
}

func (t *PopGroupHandle) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoPopulation, r, &Options{
		Flags: 1,
		Group: 84,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.GbidType, r, &Options{
		Flags: 1,
		Group: 20,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.NID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+12, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PopGroupHandle) Walk(cb WalkCallback, d ...any) {
	cb.Do("SnoPopulation", &t.SnoPopulation, d...)
	cb.Do("GbidType", &t.GbidType, d...)
	cb.Do("NID", &t.NID, d...)
}

type ConnectorProperties struct {
	FlThickness           DT_FLOAT
	RgbaColor             DT_RGBACOLOR
	SnoTexPattern         DT_SNO
	FlTextureRepeatLength DT_FLOAT
	Unk_a7a54fd           DT_FLOAT
	HDownCornerImage      DT_UINT
	HUpCornerImage        DT_UINT
}

func (t *ConnectorProperties) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.FlThickness, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.RgbaColor, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.SnoTexPattern, r, &Options{
		Flags: 1,
		Group: 44,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.FlTextureRepeatLength, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Unk_a7a54fd, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.HDownCornerImage, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.HUpCornerImage, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+28, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ConnectorProperties) Walk(cb WalkCallback, d ...any) {
	cb.Do("FlThickness", &t.FlThickness, d...)
	cb.Do("RgbaColor", &t.RgbaColor, d...)
	cb.Do("SnoTexPattern", &t.SnoTexPattern, d...)
	cb.Do("FlTextureRepeatLength", &t.FlTextureRepeatLength, d...)
	cb.Do("Unk_a7a54fd", &t.Unk_a7a54fd, d...)
	cb.Do("HDownCornerImage", &t.HDownCornerImage, d...)
	cb.Do("HUpCornerImage", &t.HUpCornerImage, d...)
}

type MainHandItemLabelSubcondition struct {
	// Inherits Subcondition
	// Inherits PolymorphicBase
	DwType     DT_UINT
	BNegate    DT_INT
	DwPad      DT_UINT
	NItemLabel DT_ENUM
}

func (t *MainHandItemLabelSubcondition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BNegate, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.NItemLabel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *MainHandItemLabelSubcondition) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("BNegate", &t.BNegate, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("NItemLabel", &t.NItemLabel, d...)
}

type RequestPvPInfo struct {
	THeader RequiredMessageHeader
}

func (t *RequestPvPInfo) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *RequestPvPInfo) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
}

type TriggerGizmoData struct {
	// Inherits ActorGizmoData
	// Inherits PolymorphicBase
	DwType                           DT_UINT
	DwPad                            DT_UINT
	FDisableNonFriendlyOperation     DT_INT
	FWalkToCenter                    DT_INT
	FGizmoStartsDisabled             DT_INT
	FUseStringListName               DT_INT
	FForceMinimapIcon                DT_INT
	FlOperationRadius                DT_FLOAT
	Unk_d0b1df5                      DT_FLOAT
	FlGizmoUseTime                   DT_FLOAT
	SnoChannelingEffect              DT_SNO
	Unk_2767229                      DT_INT
	FGizmoShowProgressBar            DT_INT
	Unk_6d9ebe1                      DT_INT
	Unk_5456245                      DT_INT
	Unk_af5815a                      DT_INT
	SnoOnClickEffect                 DT_SNO
	SnoPickedUpEffect                DT_SNO
	SnoDropOnGroundEffect            DT_SNO
	TConditionData                   GizmoConditionData
	SnoPowerOperator                 DT_SNO
	SnoPowerOperate                  DT_SNO
	SnoPowerOperatorActive           DT_SNO
	SnoPowerOperateActive            DT_SNO
	Unk_359810e                      DT_INT
	NCooldown                        DT_UINT
	Unk_9c8478e                      DT_UINT
	Unk_d45ed2d                      DT_INT
	Unk_f6b20b7                      DT_INT
	Unk_54513b8                      DT_INT
	Unk_fd1f378                      DT_UINT
	HGizmoOperateFlavorTextMsgLabel  DT_UINT
	HGizmoOperateDescriptionMsgLabel DT_UINT
	FlGizmoOperateOffset             DT_FLOAT
	Unk_ab58cd3                      DT_ENUM
	Unk_91a3966                      DT_UINT
	HGizmoChannelingLabel            DT_UINT
	Unk_4be4371                      DT_INT
	TTriggerData                     TriggerData
}

func (t *TriggerGizmoData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.FDisableNonFriendlyOperation, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.FWalkToCenter, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.FGizmoStartsDisabled, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.FUseStringListName, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.FForceMinimapIcon, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.FlOperationRadius, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.Unk_d0b1df5, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.FlGizmoUseTime, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.SnoChannelingEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.Unk_2767229, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.FGizmoShowProgressBar, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+60, &t.Unk_6d9ebe1, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.Unk_5456245, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.Unk_af5815a, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.SnoOnClickEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.SnoPickedUpEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.SnoDropOnGroundEffect, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.TConditionData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.SnoPowerOperator, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.SnoPowerOperate, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.SnoPowerOperatorActive, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+100, &t.SnoPowerOperateActive, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+104, &t.Unk_359810e, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+108, &t.NCooldown, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.Unk_9c8478e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+116, &t.Unk_d45ed2d, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+120, &t.Unk_f6b20b7, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+124, &t.Unk_54513b8, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.Unk_fd1f378, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+132, &t.HGizmoOperateFlavorTextMsgLabel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+136, &t.HGizmoOperateDescriptionMsgLabel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+140, &t.FlGizmoOperateOffset, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+144, &t.Unk_ab58cd3, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+148, &t.Unk_91a3966, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+152, &t.HGizmoChannelingLabel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+156, &t.Unk_4be4371, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+160, &t.TTriggerData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+240, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TriggerGizmoData) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("FDisableNonFriendlyOperation", &t.FDisableNonFriendlyOperation, d...)
	cb.Do("FWalkToCenter", &t.FWalkToCenter, d...)
	cb.Do("FGizmoStartsDisabled", &t.FGizmoStartsDisabled, d...)
	cb.Do("FUseStringListName", &t.FUseStringListName, d...)
	cb.Do("FForceMinimapIcon", &t.FForceMinimapIcon, d...)
	cb.Do("FlOperationRadius", &t.FlOperationRadius, d...)
	cb.Do("Unk_d0b1df5", &t.Unk_d0b1df5, d...)
	cb.Do("FlGizmoUseTime", &t.FlGizmoUseTime, d...)
	cb.Do("SnoChannelingEffect", &t.SnoChannelingEffect, d...)
	cb.Do("Unk_2767229", &t.Unk_2767229, d...)
	cb.Do("FGizmoShowProgressBar", &t.FGizmoShowProgressBar, d...)
	cb.Do("Unk_6d9ebe1", &t.Unk_6d9ebe1, d...)
	cb.Do("Unk_5456245", &t.Unk_5456245, d...)
	cb.Do("Unk_af5815a", &t.Unk_af5815a, d...)
	cb.Do("SnoOnClickEffect", &t.SnoOnClickEffect, d...)
	cb.Do("SnoPickedUpEffect", &t.SnoPickedUpEffect, d...)
	cb.Do("SnoDropOnGroundEffect", &t.SnoDropOnGroundEffect, d...)
	cb.Do("TConditionData", &t.TConditionData, d...)
	cb.Do("SnoPowerOperator", &t.SnoPowerOperator, d...)
	cb.Do("SnoPowerOperate", &t.SnoPowerOperate, d...)
	cb.Do("SnoPowerOperatorActive", &t.SnoPowerOperatorActive, d...)
	cb.Do("SnoPowerOperateActive", &t.SnoPowerOperateActive, d...)
	cb.Do("Unk_359810e", &t.Unk_359810e, d...)
	cb.Do("NCooldown", &t.NCooldown, d...)
	cb.Do("Unk_9c8478e", &t.Unk_9c8478e, d...)
	cb.Do("Unk_d45ed2d", &t.Unk_d45ed2d, d...)
	cb.Do("Unk_f6b20b7", &t.Unk_f6b20b7, d...)
	cb.Do("Unk_54513b8", &t.Unk_54513b8, d...)
	cb.Do("Unk_fd1f378", &t.Unk_fd1f378, d...)
	cb.Do("HGizmoOperateFlavorTextMsgLabel", &t.HGizmoOperateFlavorTextMsgLabel, d...)
	cb.Do("HGizmoOperateDescriptionMsgLabel", &t.HGizmoOperateDescriptionMsgLabel, d...)
	cb.Do("FlGizmoOperateOffset", &t.FlGizmoOperateOffset, d...)
	cb.Do("Unk_ab58cd3", &t.Unk_ab58cd3, d...)
	cb.Do("Unk_91a3966", &t.Unk_91a3966, d...)
	cb.Do("HGizmoChannelingLabel", &t.HGizmoChannelingLabel, d...)
	cb.Do("Unk_4be4371", &t.Unk_4be4371, d...)
	cb.Do("TTriggerData", &t.TTriggerData, d...)
}

type UIProgressBarStyleOptionalFieldMapDefaults struct {
	SzProgressTarget                DT_CSTRING[*DT_BYTE]
	SzForegroundChild               DT_CSTRING[*DT_BYTE]
	SnoProgressForegroundTiledStyle DT_SNO
	SnoProgressBackgroundTiledStyle DT_SNO
	SnoProgressChangingSound        DT_SNO
	ESmoothing                      DT_ENUM
	FlSmoothingSpeed                DT_FLOAT
}

func (t *UIProgressBarStyleOptionalFieldMapDefaults) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SzProgressTarget, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SzForegroundChild, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.SnoProgressForegroundTiledStyle, r, &Options{
		Flags: 1,
		Group: 103,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.SnoProgressBackgroundTiledStyle, r, &Options{
		Flags: 1,
		Group: 103,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.SnoProgressChangingSound, r, &Options{
		Flags: 1,
		Group: 40,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.ESmoothing, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.FlSmoothingSpeed, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+56, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *UIProgressBarStyleOptionalFieldMapDefaults) Walk(cb WalkCallback, d ...any) {
	cb.Do("SzProgressTarget", &t.SzProgressTarget, d...)
	cb.Do("SzForegroundChild", &t.SzForegroundChild, d...)
	cb.Do("SnoProgressForegroundTiledStyle", &t.SnoProgressForegroundTiledStyle, d...)
	cb.Do("SnoProgressBackgroundTiledStyle", &t.SnoProgressBackgroundTiledStyle, d...)
	cb.Do("SnoProgressChangingSound", &t.SnoProgressChangingSound, d...)
	cb.Do("ESmoothing", &t.ESmoothing, d...)
	cb.Do("FlSmoothingSpeed", &t.FlSmoothingSpeed, d...)
}

type TransmogSlot struct {
	ESlot     DT_ENUM
	TTransmog Transmog
	BEnabled  DT_INT
}

func (t *TransmogSlot) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.ESlot, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.TTransmog, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.BEnabled, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TransmogSlot) Walk(cb WalkCallback, d ...any) {
	cb.Do("ESlot", &t.ESlot, d...)
	cb.Do("TTransmog", &t.TTransmog, d...)
	cb.Do("BEnabled", &t.BEnabled, d...)
}

type LogoutTickTimeMessage struct {
	THeader       RequiredMessageHeader
	EContext      DT_ENUM
	UMinWaitTicks DT_UINT
	UMaxWaitTicks DT_UINT
	UKickTicks    DT_UINT
}

func (t *LogoutTickTimeMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.EContext, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.UMinWaitTicks, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.UMaxWaitTicks, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.UKickTicks, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *LogoutTickTimeMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("EContext", &t.EContext, d...)
	cb.Do("UMinWaitTicks", &t.UMinWaitTicks, d...)
	cb.Do("UMaxWaitTicks", &t.UMaxWaitTicks, d...)
	cb.Do("UKickTicks", &t.UKickTicks, d...)
}

type ImageFileID struct {
	SzFileName       DT_CHARARRAY
	SzSourceFileName DT_CHARARRAY
	NFrameIndex      DT_INT
}

func (t *ImageFileID) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SzFileName, r, &Options{
		ArrayLength: 256,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+256, &t.SzSourceFileName, r, &Options{
		ArrayLength: 256,
		Flags:       1,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+512, &t.NFrameIndex, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+516, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ImageFileID) Walk(cb WalkCallback, d ...any) {
	cb.Do("SzFileName", &t.SzFileName, d...)
	cb.Do("SzSourceFileName", &t.SzSourceFileName, d...)
	cb.Do("NFrameIndex", &t.NFrameIndex, d...)
}

type EffectGroupScaleZKeyData struct {
	// Inherits EffectGroupKeyData
	// Inherits PolymorphicBase
	DwType     DT_UINT
	DwPad      DT_UINT
	ArKeyItems DT_VARIABLEARRAY[*EffectGroupKey]
}

func (t *EffectGroupScaleZKeyData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.ArKeyItems, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *EffectGroupScaleZKeyData) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("ArKeyItems", &t.ArKeyItems, d...)
}

type MountSelectMessage struct {
	THeader              RequiredMessageHeader
	SnoSelectedMountItem DT_SNO
}

func (t *MountSelectMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoSelectedMountItem, r, &Options{
		Flags: 1,
		Group: 73,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+20, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *MountSelectMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("SnoSelectedMountItem", &t.SnoSelectedMountItem, d...)
}

type dmPlaneMirror struct {
	Normal DT_VECTOR3D
	Offset DT_FLOAT
}

func (t *dmPlaneMirror) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Normal, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.Offset, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *dmPlaneMirror) Walk(cb WalkCallback, d ...any) {
	cb.Do("Normal", &t.Normal, d...)
	cb.Do("Offset", &t.Offset, d...)
}

type WwiseMusicPlaylistItemKey struct {
	DwPlaylistID    DT_UINT
	DwPlaylistIndex DT_UINT
}

func (t *WwiseMusicPlaylistItemKey) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.DwPlaylistID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.DwPlaylistIndex, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *WwiseMusicPlaylistItemKey) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwPlaylistID", &t.DwPlaylistID, d...)
	cb.Do("DwPlaylistIndex", &t.DwPlaylistIndex, d...)
}

type Type_fbd6494b struct {
	THeader     RequiredMessageHeader
	Ann         DT_ACD_NETWORK_NAME
	Unk_6c790e6 DT_BYTE
}

func (t *Type_fbd6494b) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Ann, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.Unk_6c790e6, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+28, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_fbd6494b) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("Ann", &t.Ann, d...)
	cb.Do("Unk_6c790e6", &t.Unk_6c790e6, d...)
}

type LockedRotationBoneData struct {
	ArBones DT_VARIABLEARRAY[*AppBone]
}

func (t *LockedRotationBoneData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.ArBones, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *LockedRotationBoneData) Walk(cb WalkCallback, d ...any) {
	cb.Do("ArBones", &t.ArBones, d...)
}

type EmitterSubObjectData struct {
	// Inherits EmitterDataBase
	// Inherits PolymorphicBase
	DwType              DT_UINT
	DwPad               DT_UINT
	FSequential         DT_INT
	SzSubObjectName     DT_UINT
	PathSequentialRange InterpolationPath_float
}

func (t *EmitterSubObjectData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.FSequential, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.SzSubObjectName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.PathSequentialRange, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+80, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *EmitterSubObjectData) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("FSequential", &t.FSequential, d...)
	cb.Do("SzSubObjectName", &t.SzSubObjectName, d...)
	cb.Do("PathSequentialRange", &t.PathSequentialRange, d...)
}

type StoryboardUIControlSetSizeTrack struct {
	// Inherits StoryboardUIControlSetValueTrack_bcVec2
	DwType          DT_UINT
	TNodeCollection StoryboardValueNodeCollection_bcVec2
	Unk_77ed19a     DT_ENUM
	DwPad           DT_UINT
}

func (t *StoryboardUIControlSetSizeTrack) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TNodeCollection, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.Unk_77ed19a, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+56, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *StoryboardUIControlSetSizeTrack) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("TNodeCollection", &t.TNodeCollection, d...)
	cb.Do("Unk_77ed19a", &t.Unk_77ed19a, d...)
	cb.Do("DwPad", &t.DwPad, d...)
}

type GlobalMarkerActorHiddenCacheData struct {
	// Inherits GlobalMarkerActorData
	// Inherits PolymorphicBase
	DwType          DT_UINT
	DwPad           DT_UINT
	GbidHiddenCache DT_GBID
}

func (t *GlobalMarkerActorHiddenCacheData) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.GbidHiddenCache, r, &Options{
		Flags: 1,
		Group: 28,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *GlobalMarkerActorHiddenCacheData) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("GbidHiddenCache", &t.GbidHiddenCache, d...)
}

type TranslationKey struct {
	NFrame DT_INT
	Wp     DT_VECTOR3D
}

func (t *TranslationKey) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.NFrame, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.Wp, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TranslationKey) Walk(cb WalkCallback, d ...any) {
	cb.Do("NFrame", &t.NFrame, d...)
	cb.Do("Wp", &t.Wp, d...)
}

type IconScale struct {
	Unk_19dc976 DT_TAGMAP[*DT_ENUM]
}

func (t *IconScale) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.Unk_19dc976, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *IconScale) Walk(cb WalkCallback, d ...any) {
	cb.Do("Unk_19dc976", &t.Unk_19dc976, d...)
}

type IconAnchorPoint struct {
	SzName      DT_UINT
	Unk_fd93db3 DT_TAGMAP[*DT_ENUM]
}

func (t *IconAnchorPoint) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SzName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.Unk_fd93db3, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *IconAnchorPoint) Walk(cb WalkCallback, d ...any) {
	cb.Do("SzName", &t.SzName, d...)
	cb.Do("Unk_fd93db3", &t.Unk_fd93db3, d...)
}

type DungeonStatesEntry_Table struct {
	// Inherits GameBalanceTable
	// Inherits PolymorphicBase
	DwType   DT_UINT
	DwPad    DT_UINT
	TEntries DT_VARIABLEARRAY[*DungeonStatesEntry]
}

func (t *DungeonStatesEntry_Table) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TEntries, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *DungeonStatesEntry_Table) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("TEntries", &t.TEntries, d...)
}

type MailReadResponseMessage struct {
	THeader RequiredMessageHeader
	IdMail  Type_f5ac91bb
	IdErr   DT_INT
}

func (t *MailReadResponseMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.IdMail, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.IdErr, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+40, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *MailReadResponseMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("IdMail", &t.IdMail, d...)
	cb.Do("IdErr", &t.IdErr, d...)
}

type NecroArmySpecUpgradeMessage struct {
	THeader                  RequiredMessageHeader
	EUnitType                DT_ENUM
	ESpecialization          DT_ENUM
	SnoSpecializationUpgrade DT_SNO
}

func (t *NecroArmySpecUpgradeMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.EUnitType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.ESpecialization, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.SnoSpecializationUpgrade, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+28, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *NecroArmySpecUpgradeMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("EUnitType", &t.EUnitType, d...)
	cb.Do("ESpecialization", &t.ESpecialization, d...)
	cb.Do("SnoSpecializationUpgrade", &t.SnoSpecializationUpgrade, d...)
}

type ScriptEventParamMarkerHandleHasLinkedMarkerInGroup struct {
	// Inherits ScriptEventParamBase
	// Inherits PolymorphicBase
	DwType        DT_UINT
	EParamType    DT_ENUM
	DwPad         DT_UINT
	TMarkerHandle MarkerHandle
	DwGroupHash   DT_UINT
	IdValue       DT_INT
	SzGroup       DT_CSTRING[*DT_BYTE]
}

func (t *ScriptEventParamMarkerHandleHasLinkedMarkerInGroup) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.EParamType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.TMarkerHandle, r, &Options{Flags: 513}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.DwGroupHash, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.IdValue, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.SzGroup, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+56, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ScriptEventParamMarkerHandleHasLinkedMarkerInGroup) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("EParamType", &t.EParamType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("TMarkerHandle", &t.TMarkerHandle, d...)
	cb.Do("DwGroupHash", &t.DwGroupHash, d...)
	cb.Do("IdValue", &t.IdValue, d...)
	cb.Do("SzGroup", &t.SzGroup, d...)
}

type ExternalPlatform struct {
	SzProductId DT_CSTRING[*DT_BYTE]
}

func (t *ExternalPlatform) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SzProductId, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ExternalPlatform) Walk(cb WalkCallback, d ...any) {
	cb.Do("SzProductId", &t.SzProductId, d...)
}

type SkillKitDefinition struct {
	ArActiveSkillEntries     DT_VARIABLEARRAY[*ActiveSkillEntry]
	ArDefaultSkillLoadout    DT_VARIABLEARRAY[*DT_SNO]
	ArNodes                  DT_VARIABLEARRAY[*SkillTreeNode]
	ArConnections            DT_VARIABLEARRAY[*SkillTreeNodeConnection]
	DwNextID                 DT_UINT
	VNodeMinPositions        DT_VECTOR2D
	VNodeMaxPositions        DT_VECTOR2D
	VRootNodeCenterPosition  DT_VECTOR2D
	VBackgroundImagePosition DT_VECTOR2D
}

func (t *SkillKitDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.ArActiveSkillEntries, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ArDefaultSkillLoadout, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.ArNodes, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.ArConnections, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.DwNextID, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.VNodeMinPositions, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.VNodeMaxPositions, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.VRootNodeCenterPosition, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+100, &t.VBackgroundImagePosition, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+112, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *SkillKitDefinition) Walk(cb WalkCallback, d ...any) {
	cb.Do("ArActiveSkillEntries", &t.ArActiveSkillEntries, d...)
	cb.Do("ArDefaultSkillLoadout", &t.ArDefaultSkillLoadout, d...)
	cb.Do("ArNodes", &t.ArNodes, d...)
	cb.Do("ArConnections", &t.ArConnections, d...)
	cb.Do("DwNextID", &t.DwNextID, d...)
	cb.Do("VNodeMinPositions", &t.VNodeMinPositions, d...)
	cb.Do("VNodeMaxPositions", &t.VNodeMaxPositions, d...)
	cb.Do("VRootNodeCenterPosition", &t.VRootNodeCenterPosition, d...)
	cb.Do("VBackgroundImagePosition", &t.VBackgroundImagePosition, d...)
}

type MarkingColorDefinition struct {
	NSortOrder          DT_INT
	FIsTattoo           DT_INT
	ArPaintColorSamples DT_FIXEDARRAY[*DT_RGBACOLORVALUE]
	FlPaintRoughness    DT_FLOAT
	FlPaintMetalness    DT_FLOAT
}

func (t *MarkingColorDefinition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.NSortOrder, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.FIsTattoo, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.ArPaintColorSamples, r, &Options{ArrayLength: 3}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.FlPaintRoughness, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.FlPaintMetalness, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+72, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *MarkingColorDefinition) Walk(cb WalkCallback, d ...any) {
	cb.Do("NSortOrder", &t.NSortOrder, d...)
	cb.Do("FIsTattoo", &t.FIsTattoo, d...)
	cb.Do("ArPaintColorSamples", &t.ArPaintColorSamples, d...)
	cb.Do("FlPaintRoughness", &t.FlPaintRoughness, d...)
	cb.Do("FlPaintMetalness", &t.FlPaintMetalness, d...)
}

type BountyTierIcons struct {
	HIconSelected         DT_UINT
	HIconNormal           DT_UINT
	HIconDisabled         DT_UINT
	HIconDisabledSelected DT_UINT
}

func (t *BountyTierIcons) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.HIconSelected, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.HIconNormal, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.HIconDisabled, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.HIconDisabledSelected, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *BountyTierIcons) Walk(cb WalkCallback, d ...any) {
	cb.Do("HIconSelected", &t.HIconSelected, d...)
	cb.Do("HIconNormal", &t.HIconNormal, d...)
	cb.Do("HIconDisabled", &t.HIconDisabled, d...)
	cb.Do("HIconDisabledSelected", &t.HIconDisabledSelected, d...)
}

type ItemPVPEarDataMessage struct {
	THeader       RequiredMessageHeader
	Ann           DT_ACD_NETWORK_NAME
	IdGameAccount DT_UINT
	IdBnetAccount DT_UINT
	NPlayerClass  DT_INT
	BIsMale       DT_INT
	NLevel        DT_INT
	SnoLevelArea  DT_SNO
}

func (t *ItemPVPEarDataMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.Ann, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.IdGameAccount, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.IdBnetAccount, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.NPlayerClass, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.BIsMale, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.NLevel, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.SnoLevelArea, r, &Options{
		Flags: 1,
		Group: 22,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *ItemPVPEarDataMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("Ann", &t.Ann, d...)
	cb.Do("IdGameAccount", &t.IdGameAccount, d...)
	cb.Do("IdBnetAccount", &t.IdBnetAccount, d...)
	cb.Do("NPlayerClass", &t.NPlayerClass, d...)
	cb.Do("BIsMale", &t.BIsMale, d...)
	cb.Do("NLevel", &t.NLevel, d...)
	cb.Do("SnoLevelArea", &t.SnoLevelArea, d...)
}

type MarkerHeightFieldSection struct {
	NWidth                         DT_INT
	NHeight                        DT_INT
	NMaxHeight                     DT_WORD
	NMinHeight                     DT_WORD
	Unk_784cc0a                    DT_FLOAT
	ArBakedLayers                  DT_VARIABLEARRAY[*DT_SNO]
	ArBakedMaskTexturesInfo        DT_VARIABLEARRAY[*MarkerHeightFieldTextureInfo]
	TBakedHeightTextureInfo        MarkerHeightFieldTextureInfo
	TBakedFlowMapTextureInfo       MarkerHeightFieldTextureInfo
	TBakedFoamMaskTextureInfo      MarkerHeightFieldTextureInfo
	TBakedGroundFogMaskTextureInfo MarkerHeightFieldTextureInfo
	Unk_aae2d5e                    MarkerHeightFieldTextureInfo
	ArBiomes                       DT_VARIABLEARRAY[*DT_SNO]
	ArClutter                      DT_VARIABLEARRAY[*MarkerHeightFieldClutter]
	TOceanIndicesInfo              MarkerHeightFieldIBInfo
	Unk_4fbebbf                    MarkerHeightFieldIBInfo
	TIndicesInfo                   MarkerHeightFieldIBInfo
	Unk_eb5aed9                    MarkerHeightFieldIBInfo
	TTranslucentIndicesInfo        MarkerHeightFieldIBInfo
	TNoFXIndicesInfo               MarkerHeightFieldIBInfo
	ArLODs                         DT_VARIABLEARRAY[*MarkerHeightFieldIBInfo]
	ArFogMask                      DT_VARIABLEARRAY[*DT_BYTE]
	ArOceanMask                    DT_VARIABLEARRAY[*DT_BYTE]
	Unk_131b0a2                    DT_VECTOR4D
}

func (t *MarkerHeightFieldSection) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.NWidth, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.NHeight, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.NMaxHeight, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+10, &t.NMinHeight, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.Unk_784cc0a, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.ArBakedLayers, r, &Options{
		Flags: 1,
		Group: 57,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.ArBakedMaskTexturesInfo, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.TBakedHeightTextureInfo, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+60, &t.TBakedFlowMapTextureInfo, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.TBakedFoamMaskTextureInfo, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.TBakedGroundFogMaskTextureInfo, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.Unk_aae2d5e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+112, &t.ArBiomes, r, &Options{
		Flags: 1,
		Group: 77,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+128, &t.ArClutter, r, &Options{Flags: 2097153}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+144, &t.TOceanIndicesInfo, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+152, &t.Unk_4fbebbf, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+160, &t.TIndicesInfo, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+168, &t.Unk_eb5aed9, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+176, &t.TTranslucentIndicesInfo, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+184, &t.TNoFXIndicesInfo, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+192, &t.ArLODs, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+208, &t.ArFogMask, r, &Options{Flags: 2097153}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+224, &t.ArOceanMask, r, &Options{Flags: 2097153}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+240, &t.Unk_131b0a2, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+256, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *MarkerHeightFieldSection) Walk(cb WalkCallback, d ...any) {
	cb.Do("NWidth", &t.NWidth, d...)
	cb.Do("NHeight", &t.NHeight, d...)
	cb.Do("NMaxHeight", &t.NMaxHeight, d...)
	cb.Do("NMinHeight", &t.NMinHeight, d...)
	cb.Do("Unk_784cc0a", &t.Unk_784cc0a, d...)
	cb.Do("ArBakedLayers", &t.ArBakedLayers, d...)
	cb.Do("ArBakedMaskTexturesInfo", &t.ArBakedMaskTexturesInfo, d...)
	cb.Do("TBakedHeightTextureInfo", &t.TBakedHeightTextureInfo, d...)
	cb.Do("TBakedFlowMapTextureInfo", &t.TBakedFlowMapTextureInfo, d...)
	cb.Do("TBakedFoamMaskTextureInfo", &t.TBakedFoamMaskTextureInfo, d...)
	cb.Do("TBakedGroundFogMaskTextureInfo", &t.TBakedGroundFogMaskTextureInfo, d...)
	cb.Do("Unk_aae2d5e", &t.Unk_aae2d5e, d...)
	cb.Do("ArBiomes", &t.ArBiomes, d...)
	cb.Do("ArClutter", &t.ArClutter, d...)
	cb.Do("TOceanIndicesInfo", &t.TOceanIndicesInfo, d...)
	cb.Do("Unk_4fbebbf", &t.Unk_4fbebbf, d...)
	cb.Do("TIndicesInfo", &t.TIndicesInfo, d...)
	cb.Do("Unk_eb5aed9", &t.Unk_eb5aed9, d...)
	cb.Do("TTranslucentIndicesInfo", &t.TTranslucentIndicesInfo, d...)
	cb.Do("TNoFXIndicesInfo", &t.TNoFXIndicesInfo, d...)
	cb.Do("ArLODs", &t.ArLODs, d...)
	cb.Do("ArFogMask", &t.ArFogMask, d...)
	cb.Do("ArOceanMask", &t.ArOceanMask, d...)
	cb.Do("Unk_131b0a2", &t.Unk_131b0a2, d...)
}

type VertexCountSettings struct {
	NVertexCountMin DT_INT
	NVertexCountMax DT_INT
}

func (t *VertexCountSettings) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.NVertexCountMin, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.NVertexCountMax, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *VertexCountSettings) Walk(cb WalkCallback, d ...any) {
	cb.Do("NVertexCountMin", &t.NVertexCountMin, d...)
	cb.Do("NVertexCountMax", &t.NVertexCountMax, d...)
}

type PlayerPotionDosesSubcondition struct {
	// Inherits NumericComparisonSubcondition
	// Inherits Subcondition
	// Inherits PolymorphicBase
	DwType        DT_UINT
	BNegate       DT_INT
	EComparisonOp DT_ENUM
	DwPad         DT_UINT
	NPotionCount  DT_INT
}

func (t *PlayerPotionDosesSubcondition) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BNegate, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.EComparisonOp, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.NPotionCount, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+40, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PlayerPotionDosesSubcondition) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("BNegate", &t.BNegate, d...)
	cb.Do("EComparisonOp", &t.EComparisonOp, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("NPotionCount", &t.NPotionCount, d...)
}

type dmConstraintClusterMirror struct {
	StartIndex DT_WORD
	EndIndex   DT_WORD
}

func (t *dmConstraintClusterMirror) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.StartIndex, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+2, &t.EndIndex, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+4, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *dmConstraintClusterMirror) Walk(cb WalkCallback, d ...any) {
	cb.Do("StartIndex", &t.StartIndex, d...)
	cb.Do("EndIndex", &t.EndIndex, d...)
}

type PrefetchMarkerSetMessage struct {
	THeader      RequiredMessageHeader
	SnoMarkerSet DT_SNO
	Unk_a61d97   DT_OPTIONAL[*DT_INT]
}

func (t *PrefetchMarkerSetMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoMarkerSet, r, &Options{
		Flags: 1,
		Group: 24,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.Unk_a61d97, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+28, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PrefetchMarkerSetMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("SnoMarkerSet", &t.SnoMarkerSet, d...)
	cb.Do("Unk_a61d97", &t.Unk_a61d97, d...)
}

type SurfaceGridPrimitive struct {
	DwHeight   DT_BYTE
	SnoSurface DT_UINT
}

func (t *SurfaceGridPrimitive) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.DwHeight, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.SnoSurface, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *SurfaceGridPrimitive) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwHeight", &t.DwHeight, d...)
	cb.Do("SnoSurface", &t.SnoSurface, d...)
}

type AdvancedBloomSettingsOptionalFieldMapDefaults struct {
	FlBloomWeight0 DT_FLOAT
	FlBloomWeight1 DT_FLOAT
	FlBloomWeight2 DT_FLOAT
	FlBloomWeight3 DT_FLOAT
	FlBloomWeight4 DT_FLOAT
	FlBloomWeight5 DT_FLOAT
	RgbaBloomTint0 DT_RGBACOLOR
	RgbaBloomTint1 DT_RGBACOLOR
	RgbaBloomTint2 DT_RGBACOLOR
	RgbaBloomTint3 DT_RGBACOLOR
	RgbaBloomTint4 DT_RGBACOLOR
	RgbaBloomTint5 DT_RGBACOLOR
}

func (t *AdvancedBloomSettingsOptionalFieldMapDefaults) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.FlBloomWeight0, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.FlBloomWeight1, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.FlBloomWeight2, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.FlBloomWeight3, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.FlBloomWeight4, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.FlBloomWeight5, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.RgbaBloomTint0, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.RgbaBloomTint1, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.RgbaBloomTint2, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+36, &t.RgbaBloomTint3, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.RgbaBloomTint4, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+44, &t.RgbaBloomTint5, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *AdvancedBloomSettingsOptionalFieldMapDefaults) Walk(cb WalkCallback, d ...any) {
	cb.Do("FlBloomWeight0", &t.FlBloomWeight0, d...)
	cb.Do("FlBloomWeight1", &t.FlBloomWeight1, d...)
	cb.Do("FlBloomWeight2", &t.FlBloomWeight2, d...)
	cb.Do("FlBloomWeight3", &t.FlBloomWeight3, d...)
	cb.Do("FlBloomWeight4", &t.FlBloomWeight4, d...)
	cb.Do("FlBloomWeight5", &t.FlBloomWeight5, d...)
	cb.Do("RgbaBloomTint0", &t.RgbaBloomTint0, d...)
	cb.Do("RgbaBloomTint1", &t.RgbaBloomTint1, d...)
	cb.Do("RgbaBloomTint2", &t.RgbaBloomTint2, d...)
	cb.Do("RgbaBloomTint3", &t.RgbaBloomTint3, d...)
	cb.Do("RgbaBloomTint4", &t.RgbaBloomTint4, d...)
	cb.Do("RgbaBloomTint5", &t.RgbaBloomTint5, d...)
}

type DynamicAudioState struct {
	TAudioState       WwiseSwitchValue
	TTriggerRange     DT_RANGE[*DT_FLOAT]
	FlMinimumDuration DT_FLOAT
}

func (t *DynamicAudioState) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.TAudioState, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.TTriggerRange, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.FlMinimumDuration, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+20, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *DynamicAudioState) Walk(cb WalkCallback, d ...any) {
	cb.Do("TAudioState", &t.TAudioState, d...)
	cb.Do("TTriggerRange", &t.TTriggerRange, d...)
	cb.Do("FlMinimumDuration", &t.FlMinimumDuration, d...)
}

type Type_fe214945 struct {
	// Inherits PowerCallbackBase
	// Inherits PolymorphicBase
	DwType                DT_UINT
	DwPad                 DT_UINT
	SnoTriggerEffectGroup DT_SNO
	BCouldHaveRagdolled   DT_INT
}

func (t *Type_fe214945) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoTriggerEffectGroup, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.BCouldHaveRagdolled, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *Type_fe214945) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("SnoTriggerEffectGroup", &t.SnoTriggerEffectGroup, d...)
	cb.Do("BCouldHaveRagdolled", &t.BCouldHaveRagdolled, d...)
}

type OnPhaseExitedPowerCallback struct {
	// Inherits PowerCallbackBase
	// Inherits PolymorphicBase
	DwType                DT_UINT
	DwPad                 DT_UINT
	SnoTriggerEffectGroup DT_SNO
	BCouldHaveRagdolled   DT_INT
	TPhaseName            DT_UINT
}

func (t *OnPhaseExitedPowerCallback) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.SnoTriggerEffectGroup, r, &Options{
		Flags: 1,
		Group: 14,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.BCouldHaveRagdolled, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.TPhaseName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+32, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *OnPhaseExitedPowerCallback) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("SnoTriggerEffectGroup", &t.SnoTriggerEffectGroup, d...)
	cb.Do("BCouldHaveRagdolled", &t.BCouldHaveRagdolled, d...)
	cb.Do("TPhaseName", &t.TPhaseName, d...)
}

type LabelRuleSet struct {
	ArRules DT_VARIABLEARRAY[*LabelRule]
}

func (t *LabelRuleSet) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.ArRules, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+16, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *LabelRuleSet) Walk(cb WalkCallback, d ...any) {
	cb.Do("ArRules", &t.ArRules, d...)
}

type AIStateDebugSetLoopMessage struct {
	THeader       RequiredMessageHeader
	AnnActor      DT_ACD_NETWORK_NAME
	DwCooldownKey DT_INT64
	FlCooldown    DT_FLOAT
}

func (t *AIStateDebugSetLoopMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.AnnActor, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.DwCooldownKey, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+32, &t.FlCooldown, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+40, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *AIStateDebugSetLoopMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("AnnActor", &t.AnnActor, d...)
	cb.Do("DwCooldownKey", &t.DwCooldownKey, d...)
	cb.Do("FlCooldown", &t.FlCooldown, d...)
}

type SetTetherInfoForPlayerMessage struct {
	THeader        RequiredMessageHeader
	AnnPlayer      DT_ACD_NETWORK_NAME
	FlTetherRadius DT_FLOAT
	WpTetherPoint  SharedServerWorldPlace
}

func (t *SetTetherInfoForPlayerMessage) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.AnnPlayer, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.FlTetherRadius, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+28, &t.WpTetherPoint, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+48, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *SetTetherInfoForPlayerMessage) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("AnnPlayer", &t.AnnPlayer, d...)
	cb.Do("FlTetherRadius", &t.FlTetherRadius, d...)
	cb.Do("WpTetherPoint", &t.WpTetherPoint, d...)
}

type TrackPieces struct {
	// Inherits WindowPiecesBase
	// Inherits PolymorphicBase
	DwType       DT_UINT
	DwPad        DT_UINT
	FlImageScale DT_FLOAT
	NPadding     DT_UINT
	HPieceFrame  DT_FIXEDARRAY[*DT_UINT]
}

func (t *TrackPieces) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.FlImageScale, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.NPadding, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.HPieceFrame, r, &Options{
		ArrayLength: 3,
		Flags:       1,
	}); err != nil {
		return err
	}
	if _, err := r.Seek(p+40, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TrackPieces) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("FlImageScale", &t.FlImageScale, d...)
	cb.Do("NPadding", &t.NPadding, d...)
	cb.Do("HPieceFrame", &t.HPieceFrame, d...)
}

type SkillExtraAndArsenalEntry struct {
	SnoPower     DT_SNO
	DwWeaponSlot DT_INT
}

func (t *SkillExtraAndArsenalEntry) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.SnoPower, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+4, &t.DwWeaponSlot, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+8, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *SkillExtraAndArsenalEntry) Walk(cb WalkCallback, d ...any) {
	cb.Do("SnoPower", &t.SnoPower, d...)
	cb.Do("DwWeaponSlot", &t.DwWeaponSlot, d...)
}

type TriggerEventShowWarpDestinationUI struct {
	// Inherits TriggerEvent
	// Inherits PolymorphicBase
	DwType            DT_UINT
	DwPad             DT_UINT
	TConditions       TriggerConditions
	FGenerated        DT_INT
	Unk_6cba752       DT_INT
	DwParentActorID   DT_UINT
	BOverridePosition DT_INT
	VecPosition       DT_VECTOR2D
}

func (t *TriggerEventShowWarpDestinationUI) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+12, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.TConditions, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.FGenerated, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.Unk_6cba752, r, &Options{Flags: 16}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.DwParentActorID, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.BOverridePosition, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+84, &t.VecPosition, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+96, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *TriggerEventShowWarpDestinationUI) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("TConditions", &t.TConditions, d...)
	cb.Do("FGenerated", &t.FGenerated, d...)
	cb.Do("Unk_6cba752", &t.Unk_6cba752, d...)
	cb.Do("DwParentActorID", &t.DwParentActorID, d...)
	cb.Do("BOverridePosition", &t.BOverridePosition, d...)
	cb.Do("VecPosition", &t.VecPosition, d...)
}

type PaintedSceneGrid struct {
	ArSnos                     DT_VARIABLEARRAY[*DT_SNO]
	NCompressedGridSubdivision DT_INT
	ArCompressedGrid           DT_VARIABLEARRAY[*DT_BYTE]
}

func (t *PaintedSceneGrid) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.ArSnos, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.NCompressedGridSubdivision, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ArCompressedGrid, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+40, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PaintedSceneGrid) Walk(cb WalkCallback, d ...any) {
	cb.Do("ArSnos", &t.ArSnos, d...)
	cb.Do("NCompressedGridSubdivision", &t.NCompressedGridSubdivision, d...)
	cb.Do("ArCompressedGrid", &t.ArCompressedGrid, d...)
}

type DeathTemplate struct{}

func (t *DeathTemplate) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if _, err := r.Seek(p+1, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *DeathTemplate) Walk(cb WalkCallback, d ...any) {}

type CriteriaStartEvent struct {
	// Inherits CriteriaEvent
	// Inherits PolymorphicBase
	DwType               DT_UINT
	EId                  DT_ENUM
	ArModifier           DT_VARIABLEARRAY[*CriteriaModifier]
	Snoname              DT_SNO_NAME
	EGizmoType           DT_ENUM
	EIQL                 DT_ENUM
	ESlot                DT_ENUM
	EHealType            DT_ENUM
	ECurrencyType        DT_ENUM
	EZone                DT_ENUM
	UVal                 DT_UINT
	GbidAchievementEvent DT_GBID
	UOperand             DT_INT64
	BUsesOperand         DT_INT
	DwPad                DT_UINT
	UTimerDuration       DT_INT64
}

func (t *CriteriaStartEvent) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.EId, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+24, &t.ArModifier, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+40, &t.Snoname, r, &Options{Flags: 513}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+48, &t.EGizmoType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+52, &t.EIQL, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+56, &t.ESlot, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+60, &t.EHealType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+64, &t.ECurrencyType, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+68, &t.EZone, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+72, &t.UVal, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+76, &t.GbidAchievementEvent, r, &Options{
		Flags: 1,
		Group: 62,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+80, &t.UOperand, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+88, &t.BUsesOperand, r, &Options{Flags: 16}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+92, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+96, &t.UTimerDuration, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if _, err := r.Seek(p+104, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *CriteriaStartEvent) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("EId", &t.EId, d...)
	cb.Do("ArModifier", &t.ArModifier, d...)
	cb.Do("Snoname", &t.Snoname, d...)
	cb.Do("EGizmoType", &t.EGizmoType, d...)
	cb.Do("EIQL", &t.EIQL, d...)
	cb.Do("ESlot", &t.ESlot, d...)
	cb.Do("EHealType", &t.EHealType, d...)
	cb.Do("ECurrencyType", &t.ECurrencyType, d...)
	cb.Do("EZone", &t.EZone, d...)
	cb.Do("UVal", &t.UVal, d...)
	cb.Do("GbidAchievementEvent", &t.GbidAchievementEvent, d...)
	cb.Do("UOperand", &t.UOperand, d...)
	cb.Do("BUsesOperand", &t.BUsesOperand, d...)
	cb.Do("DwPad", &t.DwPad, d...)
	cb.Do("UTimerDuration", &t.UTimerDuration, d...)
}

type SubzoneModifierTagsEntry struct {
	THeader             GBIDHeader
	SnoPower            DT_SNO
	SnoBuff             DT_SNO
	Unk_891f4a8         DT_SNO
	Unk_82ec588         DT_FLOAT
	NMonsterLevelOffset DT_INT
	ArSpawnLocOverrides DT_VARIABLEARRAY[*SpawnLocOverrideData]
	Unk_a60ef1c         DT_INT
	HEventName          DT_UINT
	SnoEventEndSound    DT_SNO
	Unk_e116de3         DT_INT
	Unk_11c2d38         DT_INT
	ArCurrencyData      DT_VARIABLEARRAY[*EventCurrencyData]
	Unk_72e5404         DT_UINT
	Unk_eb4c1b0         DT_UINT
	Unk_29d549e         DT_UINT
	Unk_af7dbbd         DT_UINT
	Unk_f37b028         DT_UINT
	Unk_839e400         DT_UINT
	Unk_abfefac         DT_UINT
	SnoFoWShader        DT_SNO
	HMapMarkerImage     DT_UINT
	Unk_cecac89         DT_CSTRING[*DT_BYTE]
	ArEventItemsToTrack DT_VARIABLEARRAY[*DT_SNO]
	Unk_37cbfa7         DT_INT
}

func (t *SubzoneModifierTagsEntry) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+0, &t.THeader, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+260, &t.SnoPower, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+264, &t.SnoBuff, r, &Options{
		Flags: 1,
		Group: 29,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+268, &t.Unk_891f4a8, r, &Options{
		Flags: 1,
		Group: 31,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+272, &t.Unk_82ec588, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+276, &t.NMonsterLevelOffset, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+280, &t.ArSpawnLocOverrides, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+296, &t.Unk_a60ef1c, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+300, &t.HEventName, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+304, &t.SnoEventEndSound, r, &Options{
		Flags: 1,
		Group: 40,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+308, &t.Unk_e116de3, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+312, &t.Unk_11c2d38, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+320, &t.ArCurrencyData, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+336, &t.Unk_72e5404, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+340, &t.Unk_eb4c1b0, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+344, &t.Unk_29d549e, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+348, &t.Unk_af7dbbd, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+352, &t.Unk_f37b028, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+356, &t.Unk_839e400, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+360, &t.Unk_abfefac, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+364, &t.SnoFoWShader, r, &Options{
		Flags: 1,
		Group: 37,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+368, &t.HMapMarkerImage, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+376, &t.Unk_cecac89, r, &Options{Flags: 1}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+392, &t.ArEventItemsToTrack, r, &Options{
		Flags: 1,
		Group: 73,
	}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+408, &t.Unk_37cbfa7, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if _, err := r.Seek(p+416, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *SubzoneModifierTagsEntry) Walk(cb WalkCallback, d ...any) {
	cb.Do("THeader", &t.THeader, d...)
	cb.Do("SnoPower", &t.SnoPower, d...)
	cb.Do("SnoBuff", &t.SnoBuff, d...)
	cb.Do("Unk_891f4a8", &t.Unk_891f4a8, d...)
	cb.Do("Unk_82ec588", &t.Unk_82ec588, d...)
	cb.Do("NMonsterLevelOffset", &t.NMonsterLevelOffset, d...)
	cb.Do("ArSpawnLocOverrides", &t.ArSpawnLocOverrides, d...)
	cb.Do("Unk_a60ef1c", &t.Unk_a60ef1c, d...)
	cb.Do("HEventName", &t.HEventName, d...)
	cb.Do("SnoEventEndSound", &t.SnoEventEndSound, d...)
	cb.Do("Unk_e116de3", &t.Unk_e116de3, d...)
	cb.Do("Unk_11c2d38", &t.Unk_11c2d38, d...)
	cb.Do("ArCurrencyData", &t.ArCurrencyData, d...)
	cb.Do("Unk_72e5404", &t.Unk_72e5404, d...)
	cb.Do("Unk_eb4c1b0", &t.Unk_eb4c1b0, d...)
	cb.Do("Unk_29d549e", &t.Unk_29d549e, d...)
	cb.Do("Unk_af7dbbd", &t.Unk_af7dbbd, d...)
	cb.Do("Unk_f37b028", &t.Unk_f37b028, d...)
	cb.Do("Unk_839e400", &t.Unk_839e400, d...)
	cb.Do("Unk_abfefac", &t.Unk_abfefac, d...)
	cb.Do("SnoFoWShader", &t.SnoFoWShader, d...)
	cb.Do("HMapMarkerImage", &t.HMapMarkerImage, d...)
	cb.Do("Unk_cecac89", &t.Unk_cecac89, d...)
	cb.Do("ArEventItemsToTrack", &t.ArEventItemsToTrack, d...)
	cb.Do("Unk_37cbfa7", &t.Unk_37cbfa7, d...)
}

type PowerConditionIsPlayerActiveSkill struct {
	// Inherits PowerConditionBase
	// Inherits PolymorphicBase
	DwType   DT_UINT
	BInverse DT_INT
	DwPad    DT_UINT
}

func (t *PowerConditionIsPlayerActiveSkill) UnmarshalD4(r *bin.BinaryReader, o *Options) error {
	p, err := r.Pos()
	if err != nil {
		return err
	}
	if err := UnmarshalAt(p+8, &t.DwType, r, &Options{}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+16, &t.BInverse, r, &Options{Flags: 17}); err != nil {
		return err
	}
	if err := UnmarshalAt(p+20, &t.DwPad, r, &Options{}); err != nil {
		return err
	}
	if _, err := r.Seek(p+24, io.SeekStart); err != nil {
		return err
	}
	return nil
}

func (t *PowerConditionIsPlayerActiveSkill) Walk(cb WalkCallback, d ...any) {
	cb.Do("DwType", &t.DwType, d...)
	cb.Do("BInverse", &t.BInverse, d...)
	cb.Do("DwPad", &t.DwPad, d...)
}
